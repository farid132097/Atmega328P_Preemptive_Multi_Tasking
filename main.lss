
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c62  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000698  00800100  00800100  00000cd6  2**0
                  ALLOC
  2 .stab         00000c84  00000000  00000000  00000cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000006c  00000000  00000000  0000195c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  000019c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000bd  00000000  00000000  00001a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001a9  00000000  00000000  00001ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000ba  00000000  00000000  00001c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000044e  00000000  00000000  00001d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00002178  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000116  00000000  00000000  00002238  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 8a 01 	jmp	0x314	; 0x314 <__vector_16>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	00 00       	nop
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 00       	nop
  76:	00 00       	nop
  78:	00 00       	nop
  7a:	00 00       	nop
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 00       	nop
  82:	00 00       	nop
  84:	00 00       	nop
  86:	00 00       	nop
  88:	45 c1       	rjmp	.+650    	; 0x314 <__vector_16>

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61
  96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  9a:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:


    
int main(void) {
    
	Kernel_Init();
  a2:	0e 94 d5 03 	call	0x7aa	; 0x7aa <Kernel_Init>

	Kernel_Task_Create(Tasks_Task1,  5);
  a6:	83 e6       	ldi	r24, 0x63	; 99
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	65 e0       	ldi	r22, 0x05	; 5
  ac:	0e 94 c7 02 	call	0x58e	; 0x58e <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task2,  1);
  b0:	84 e4       	ldi	r24, 0x44	; 68
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	61 e0       	ldi	r22, 0x01	; 1
  b6:	0e 94 c7 02 	call	0x58e	; 0x58e <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task3,  2);
  ba:	85 e2       	ldi	r24, 0x25	; 37
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	62 e0       	ldi	r22, 0x02	; 2
  c0:	0e 94 c7 02 	call	0x58e	; 0x58e <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task4,  3);
  c4:	86 e0       	ldi	r24, 0x06	; 6
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	63 e0       	ldi	r22, 0x03	; 3
  ca:	0e 94 c7 02 	call	0x58e	; 0x58e <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task5,  0);
  ce:	87 ee       	ldi	r24, 0xE7	; 231
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	0e 94 c7 02 	call	0x58e	; 0x58e <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task6,  6);
  d8:	8e ec       	ldi	r24, 0xCE	; 206
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	66 e0       	ldi	r22, 0x06	; 6
  de:	0e 94 c7 02 	call	0x58e	; 0x58e <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task7,  4);
  e2:	85 eb       	ldi	r24, 0xB5	; 181
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	64 e0       	ldi	r22, 0x04	; 4
  e8:	0e 94 c7 02 	call	0x58e	; 0x58e <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task8,  8);
  ec:	8c e9       	ldi	r24, 0x9C	; 156
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	68 e0       	ldi	r22, 0x08	; 8
  f2:	0e 94 c7 02 	call	0x58e	; 0x58e <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task9,  7);
  f6:	83 e8       	ldi	r24, 0x83	; 131
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	67 e0       	ldi	r22, 0x07	; 7
  fc:	0e 94 c7 02 	call	0x58e	; 0x58e <Kernel_Task_Create>
	
	Kernel_Start_Tasks();
 100:	0e 94 41 03 	call	0x682	; 0x682 <Kernel_Start_Tasks>
 104:	ff cf       	rjmp	.-2      	; 0x104 <SRUDR0+0x3e>

00000106 <Tasks_Task9>:
  }
}

void Tasks_Task9(void){
  
  Debug_Init(0);
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 d1 05 	call	0xba2	; 0xba2 <Debug_Init>
  
  while(1){

    asm("push r16");
 10e:	0f 93       	push	r16
    Kernel_Task_Constant_Latency(90);
 110:	8a e5       	ldi	r24, 0x5A	; 90
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <Kernel_Task_Constant_Latency>
    asm("pop r16");
 118:	0f 91       	pop	r16
    
	  Debug_Tx_Byte(9);
 11a:	89 e0       	ldi	r24, 0x09	; 9
 11c:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Debug_Tx_Byte>
    //Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
    //Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
    //Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(9));
    //Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(9));
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 120:	0e 94 cb 05 	call	0xb96	; 0xb96 <Kernel_Abs_High_Prio_Task_ID_Get>
 124:	80 5f       	subi	r24, 0xF0	; 240
 126:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 12a:	0e 94 c4 05 	call	0xb88	; 0xb88 <Kernel_Lowest_Prio_Get>
 12e:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Debug_Tx_Byte>
    //Kernel_Task_Sleep(90);

    Kernel_Task_Constant_Latency_Sleep();
 132:	0e 94 e6 04 	call	0x9cc	; 0x9cc <Kernel_Task_Constant_Latency_Sleep>
 136:	eb cf       	rjmp	.-42     	; 0x10e <Tasks_Task9+0x8>

00000138 <Tasks_Task8>:
  }
}

void Tasks_Task8(void){
  
  Debug_Init(0);
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 d1 05 	call	0xba2	; 0xba2 <Debug_Init>
  
  while(1){

    asm("push r16");
 140:	0f 93       	push	r16
    Kernel_Task_Constant_Latency(80);
 142:	80 e5       	ldi	r24, 0x50	; 80
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <Kernel_Task_Constant_Latency>
    asm("pop r16");
 14a:	0f 91       	pop	r16
    
	  Debug_Tx_Byte(8);
 14c:	88 e0       	ldi	r24, 0x08	; 8
 14e:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Debug_Tx_Byte>
    //Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
    //Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
    //Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(8));
    //Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(8));
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 152:	0e 94 cb 05 	call	0xb96	; 0xb96 <Kernel_Abs_High_Prio_Task_ID_Get>
 156:	80 5f       	subi	r24, 0xF0	; 240
 158:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 15c:	0e 94 c4 05 	call	0xb88	; 0xb88 <Kernel_Lowest_Prio_Get>
 160:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Debug_Tx_Byte>
    //Kernel_Task_Sleep(80);

    Kernel_Task_Constant_Latency_Sleep();
 164:	0e 94 e6 04 	call	0x9cc	; 0x9cc <Kernel_Task_Constant_Latency_Sleep>
 168:	eb cf       	rjmp	.-42     	; 0x140 <Tasks_Task8+0x8>

0000016a <Tasks_Task7>:
  }
}

void Tasks_Task7(void){
  
  Debug_Init(0);
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 d1 05 	call	0xba2	; 0xba2 <Debug_Init>
  
  while(1){

    asm("push r16");
 172:	0f 93       	push	r16
    Kernel_Task_Constant_Latency(70);
 174:	86 e4       	ldi	r24, 0x46	; 70
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <Kernel_Task_Constant_Latency>
    asm("pop r16");
 17c:	0f 91       	pop	r16
    
	  Debug_Tx_Byte(7);
 17e:	87 e0       	ldi	r24, 0x07	; 7
 180:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Debug_Tx_Byte>
    //Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
    //Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
    //Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(7));
    //Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(7));
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 184:	0e 94 cb 05 	call	0xb96	; 0xb96 <Kernel_Abs_High_Prio_Task_ID_Get>
 188:	80 5f       	subi	r24, 0xF0	; 240
 18a:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 18e:	0e 94 c4 05 	call	0xb88	; 0xb88 <Kernel_Lowest_Prio_Get>
 192:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Debug_Tx_Byte>
    //Kernel_Task_Sleep(70);

    Kernel_Task_Constant_Latency_Sleep();
 196:	0e 94 e6 04 	call	0x9cc	; 0x9cc <Kernel_Task_Constant_Latency_Sleep>
 19a:	eb cf       	rjmp	.-42     	; 0x172 <Tasks_Task7+0x8>

0000019c <Tasks_Task6>:
  }
}

void Tasks_Task6(void){
  
  Debug_Init(0);
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 d1 05 	call	0xba2	; 0xba2 <Debug_Init>
  
  while(1){

    asm("push r16");
 1a4:	0f 93       	push	r16
    Kernel_Task_Constant_Latency(60);
 1a6:	8c e3       	ldi	r24, 0x3C	; 60
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <Kernel_Task_Constant_Latency>
    asm("pop r16");
 1ae:	0f 91       	pop	r16
    
    Debug_Tx_Byte(6);
 1b0:	86 e0       	ldi	r24, 0x06	; 6
 1b2:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Debug_Tx_Byte>
    //Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
    //Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
    //Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(6));
    //Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(6));
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 1b6:	0e 94 cb 05 	call	0xb96	; 0xb96 <Kernel_Abs_High_Prio_Task_ID_Get>
 1ba:	80 5f       	subi	r24, 0xF0	; 240
 1bc:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 1c0:	0e 94 c4 05 	call	0xb88	; 0xb88 <Kernel_Lowest_Prio_Get>
 1c4:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Debug_Tx_Byte>
    //Kernel_Task_Sleep(60);

    Kernel_Task_Constant_Latency_Sleep();
 1c8:	0e 94 e6 04 	call	0x9cc	; 0x9cc <Kernel_Task_Constant_Latency_Sleep>
 1cc:	eb cf       	rjmp	.-42     	; 0x1a4 <Tasks_Task6+0x8>

000001ce <Tasks_Task5>:
    Kernel_Task_Constant_Latency_Sleep();
	
  }
}

void Tasks_Task5(void){
 1ce:	1f 93       	push	r17
  
  DDRC |= (1<<5);
 1d0:	3d 9a       	sbi	0x07, 5	; 7

  Debug_Init(0);
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 d1 05 	call	0xba2	; 0xba2 <Debug_Init>

    asm("push r16");
    Kernel_Task_Constant_Latency(50);
    asm("pop r16");
    
    PORTC ^= (1<<5);
 1da:	10 e2       	ldi	r17, 0x20	; 32

  Debug_Init(0);
  
  while(1){

    asm("push r16");
 1dc:	0f 93       	push	r16
    Kernel_Task_Constant_Latency(50);
 1de:	82 e3       	ldi	r24, 0x32	; 50
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <Kernel_Task_Constant_Latency>
    asm("pop r16");
 1e6:	0f 91       	pop	r16
    
    PORTC ^= (1<<5);
 1e8:	88 b1       	in	r24, 0x08	; 8
 1ea:	81 27       	eor	r24, r17
 1ec:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(5);
 1ee:	85 e0       	ldi	r24, 0x05	; 5
 1f0:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Debug_Tx_Byte>
    //Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
    //Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
    //Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(5));
    //Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(5));
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 1f4:	0e 94 cb 05 	call	0xb96	; 0xb96 <Kernel_Abs_High_Prio_Task_ID_Get>
 1f8:	80 5f       	subi	r24, 0xF0	; 240
 1fa:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 1fe:	0e 94 c4 05 	call	0xb88	; 0xb88 <Kernel_Lowest_Prio_Get>
 202:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Debug_Tx_Byte>
    //Kernel_Task_Sleep(50);

    Kernel_Task_Constant_Latency_Sleep();
 206:	0e 94 e6 04 	call	0x9cc	; 0x9cc <Kernel_Task_Constant_Latency_Sleep>
 20a:	e8 cf       	rjmp	.-48     	; 0x1dc <Tasks_Task5+0xe>

0000020c <Tasks_Task4>:
    Kernel_Task_Constant_Latency_Sleep();
	
  }
}

void Tasks_Task4(void){
 20c:	1f 93       	push	r17
  
  DDRC |= (1<<4);
 20e:	3c 9a       	sbi	0x07, 4	; 7

  Debug_Init(0);
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 d1 05 	call	0xba2	; 0xba2 <Debug_Init>
    
    asm("push r16");
    Kernel_Task_Constant_Latency(40);
    asm("pop r16");

    PORTC ^= (1<<4);
 218:	10 e1       	ldi	r17, 0x10	; 16

  Debug_Init(0);
  
  while(1){
    
    asm("push r16");
 21a:	0f 93       	push	r16
    Kernel_Task_Constant_Latency(40);
 21c:	88 e2       	ldi	r24, 0x28	; 40
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <Kernel_Task_Constant_Latency>
    asm("pop r16");
 224:	0f 91       	pop	r16

    PORTC ^= (1<<4);
 226:	88 b1       	in	r24, 0x08	; 8
 228:	81 27       	eor	r24, r17
 22a:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(4);
 22c:	84 e0       	ldi	r24, 0x04	; 4
 22e:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Debug_Tx_Byte>
    //Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
    //Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
    //Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(4));
    //Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(4));
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 232:	0e 94 cb 05 	call	0xb96	; 0xb96 <Kernel_Abs_High_Prio_Task_ID_Get>
 236:	80 5f       	subi	r24, 0xF0	; 240
 238:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 23c:	0e 94 c4 05 	call	0xb88	; 0xb88 <Kernel_Lowest_Prio_Get>
 240:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Debug_Tx_Byte>
    //Kernel_Task_Sleep(40);

    Kernel_Task_Constant_Latency_Sleep();
 244:	0e 94 e6 04 	call	0x9cc	; 0x9cc <Kernel_Task_Constant_Latency_Sleep>
 248:	e8 cf       	rjmp	.-48     	; 0x21a <Tasks_Task4+0xe>

0000024a <Tasks_Task3>:
    Kernel_Task_Constant_Latency_Sleep();
	
  }
}

void Tasks_Task3(void){
 24a:	1f 93       	push	r17
  
  DDRC |= (1<<3);
 24c:	3b 9a       	sbi	0x07, 3	; 7

  Debug_Init(0);
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 d1 05 	call	0xba2	; 0xba2 <Debug_Init>
    
    asm("push r16");
    Kernel_Task_Constant_Latency(30);
    asm("pop r16");

    PORTC ^= (1<<3);
 256:	18 e0       	ldi	r17, 0x08	; 8

  Debug_Init(0);
  
  while(1){
    
    asm("push r16");
 258:	0f 93       	push	r16
    Kernel_Task_Constant_Latency(30);
 25a:	8e e1       	ldi	r24, 0x1E	; 30
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <Kernel_Task_Constant_Latency>
    asm("pop r16");
 262:	0f 91       	pop	r16

    PORTC ^= (1<<3);
 264:	88 b1       	in	r24, 0x08	; 8
 266:	81 27       	eor	r24, r17
 268:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(3);
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Debug_Tx_Byte>
    //Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
    //Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
    //Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(3));
    //Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(3));
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 270:	0e 94 cb 05 	call	0xb96	; 0xb96 <Kernel_Abs_High_Prio_Task_ID_Get>
 274:	80 5f       	subi	r24, 0xF0	; 240
 276:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 27a:	0e 94 c4 05 	call	0xb88	; 0xb88 <Kernel_Lowest_Prio_Get>
 27e:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Debug_Tx_Byte>
    //Kernel_Task_Sleep(30);

    Kernel_Task_Constant_Latency_Sleep();
 282:	0e 94 e6 04 	call	0x9cc	; 0x9cc <Kernel_Task_Constant_Latency_Sleep>
 286:	e8 cf       	rjmp	.-48     	; 0x258 <Tasks_Task3+0xe>

00000288 <Tasks_Task2>:
    Kernel_Task_Constant_Latency_Sleep();
    
  }
}

void Tasks_Task2(void){
 288:	1f 93       	push	r17
  
  DDRC |= (1<<2);
 28a:	3a 9a       	sbi	0x07, 2	; 7

  Debug_Init(0);
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 d1 05 	call	0xba2	; 0xba2 <Debug_Init>
    
    asm("push r16");
    Kernel_Task_Constant_Latency(20);
    asm("pop r16");

    PORTC ^= (1<<2);
 294:	14 e0       	ldi	r17, 0x04	; 4

  Debug_Init(0);
  
  while(1){
    
    asm("push r16");
 296:	0f 93       	push	r16
    Kernel_Task_Constant_Latency(20);
 298:	84 e1       	ldi	r24, 0x14	; 20
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <Kernel_Task_Constant_Latency>
    asm("pop r16");
 2a0:	0f 91       	pop	r16

    PORTC ^= (1<<2);
 2a2:	88 b1       	in	r24, 0x08	; 8
 2a4:	81 27       	eor	r24, r17
 2a6:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(2);
 2a8:	82 e0       	ldi	r24, 0x02	; 2
 2aa:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Debug_Tx_Byte>
    //Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
    //Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
    //Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(2));
    //Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(2));
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 2ae:	0e 94 cb 05 	call	0xb96	; 0xb96 <Kernel_Abs_High_Prio_Task_ID_Get>
 2b2:	80 5f       	subi	r24, 0xF0	; 240
 2b4:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 2b8:	0e 94 c4 05 	call	0xb88	; 0xb88 <Kernel_Lowest_Prio_Get>
 2bc:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Debug_Tx_Byte>
    //Kernel_Task_Sleep(1);

    Kernel_Task_Constant_Latency_Sleep();
 2c0:	0e 94 e6 04 	call	0x9cc	; 0x9cc <Kernel_Task_Constant_Latency_Sleep>
 2c4:	e8 cf       	rjmp	.-48     	; 0x296 <Tasks_Task2+0xe>

000002c6 <Tasks_Task1>:
#include <util/delay.h>
#include "kernel.h"
#include "tasks.h"
#include "debug.h"

void Tasks_Task1(void){
 2c6:	0f 93       	push	r16
 2c8:	1f 93       	push	r17
  
  DDRC |= (1<<1);
 2ca:	39 9a       	sbi	0x07, 1	; 7

  Debug_Init(0);
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 d1 05 	call	0xba2	; 0xba2 <Debug_Init>
    
    asm("push r16");
    Kernel_Task_Constant_Latency(10);
    asm("pop r16");

    PORTC ^= (1<<1);
 2d4:	02 e0       	ldi	r16, 0x02	; 2

  Debug_Init(0);
  
  while(1){
    
    asm("push r16");
 2d6:	0f 93       	push	r16
    Kernel_Task_Constant_Latency(10);
 2d8:	8a e0       	ldi	r24, 0x0A	; 10
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <Kernel_Task_Constant_Latency>
    asm("pop r16");
 2e0:	0f 91       	pop	r16

    PORTC ^= (1<<1);
 2e2:	88 b1       	in	r24, 0x08	; 8
 2e4:	80 27       	eor	r24, r16
 2e6:	88 b9       	out	0x08, r24	; 8
    

	  Debug_Tx_Byte(1);
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Debug_Tx_Byte>
    //asm("push r16");
    //asm("push r24");
    //Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
    //asm("pop r24");
    //asm("pop r16");
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 2ee:	0e 94 cb 05 	call	0xb96	; 0xb96 <Kernel_Abs_High_Prio_Task_ID_Get>
 2f2:	80 5f       	subi	r24, 0xF0	; 240
 2f4:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 2f8:	0e 94 c4 05 	call	0xb88	; 0xb88 <Kernel_Lowest_Prio_Get>
 2fc:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Debug_Tx_Byte>
 300:	10 e0       	ldi	r17, 0x00	; 0
    for(uint8_t i=0;i<200;i++){
      Debug_Tx_Byte(i);
 302:	81 2f       	mov	r24, r17
 304:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Debug_Tx_Byte>
    //Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
    //asm("pop r24");
    //asm("pop r16");
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
    for(uint8_t i=0;i<200;i++){
 308:	1f 5f       	subi	r17, 0xFF	; 255
 30a:	18 3c       	cpi	r17, 0xC8	; 200
 30c:	d1 f7       	brne	.-12     	; 0x302 <Tasks_Task1+0x3c>
      Debug_Tx_Byte(i);
    }

    //Kernel_Task_Sleep(10);

    Kernel_Task_Constant_Latency_Sleep();
 30e:	0e 94 e6 04 	call	0x9cc	; 0x9cc <Kernel_Task_Constant_Latency_Sleep>
 312:	e1 cf       	rjmp	.-62     	; 0x2d6 <Tasks_Task1+0x10>

00000314 <__vector_16>:


;;=================================ISR execution starting===================================;; 
.global  __vector_16                                                                           
    __vector_16:                                          ;total 40.00uS @8MHz    (320 clocks) 
	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 314:	5d 9a       	sbi	0x0b, 5	; 11
        KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 316:	0f 92       	push	r0
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	0f 92       	push	r0
 31c:	1f 92       	push	r1
 31e:	11 24       	eor	r1, r1
 320:	2f 92       	push	r2
 322:	3f 92       	push	r3
 324:	4f 92       	push	r4
 326:	5f 92       	push	r5
 328:	6f 92       	push	r6
 32a:	7f 92       	push	r7
 32c:	8f 92       	push	r8
 32e:	9f 92       	push	r9
 330:	af 92       	push	r10
 332:	bf 92       	push	r11
 334:	cf 92       	push	r12
 336:	df 92       	push	r13
 338:	ef 92       	push	r14
 33a:	ff 92       	push	r15
 33c:	0f 93       	push	r16
 33e:	1f 93       	push	r17
 340:	2f 93       	push	r18
 342:	3f 93       	push	r19
 344:	4f 93       	push	r20
 346:	5f 93       	push	r21
 348:	6f 93       	push	r22
 34a:	7f 93       	push	r23
 34c:	8f 93       	push	r24
 34e:	9f 93       	push	r25
 350:	af 93       	push	r26
 352:	bf 93       	push	r27
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	ef 93       	push	r30
 35a:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 35c:	ee e0       	ldi	r30, 0x0E	; 14
 35e:	f1 e0       	ldi	r31, 0x01	; 1
 360:	20 91 07 01 	lds	r18, 0x0107
 364:	22 0f       	add	r18, r18
 366:	e2 0f       	add	r30, r18
 368:	20 e0       	ldi	r18, 0x00	; 0
 36a:	f2 1f       	adc	r31, r18
 36c:	2d b7       	in	r18, 0x3d	; 61
 36e:	3e b7       	in	r19, 0x3e	; 62
 370:	20 83       	st	Z, r18
 372:	31 83       	std	Z+1, r19	; 0x01
		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 374:	20 91 06 01 	lds	r18, 0x0106
 378:	20 93 46 00 	sts	0x0046, r18
		KER_TICK_INCREMENT                                ;increment tick counter ( 26 clocks) 
 37c:	20 91 00 01 	lds	r18, 0x0100
 380:	23 95       	inc	r18
 382:	20 93 00 01 	sts	0x0100, r18
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	20 91 01 01 	lds	r18, 0x0101
 38c:	23 1f       	adc	r18, r19
 38e:	20 93 01 01 	sts	0x0101, r18
 392:	20 91 02 01 	lds	r18, 0x0102
 396:	23 1f       	adc	r18, r19
 398:	20 93 02 01 	sts	0x0102, r18
 39c:	20 91 03 01 	lds	r18, 0x0103
 3a0:	23 1f       	adc	r18, r19
 3a2:	20 93 03 01 	sts	0x0103, r18
 3a6:	20 91 04 01 	lds	r18, 0x0104
 3aa:	23 1f       	adc	r18, r19
 3ac:	20 93 04 01 	sts	0x0104, r18
		LDI    R24               , SCH_MODE_HANDLER       ;set sch mode           (  1 clock ) 
 3b0:	80 e0       	ldi	r24, 0x00	; 0
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
 3b2:	2f ef       	ldi	r18, 0xFF	; 255
 3b4:	20 93 09 01 	sts	0x0109, r18
 3b8:	20 e0       	ldi	r18, 0x00	; 0
 3ba:	20 93 0a 01 	sts	0x010A, r18
 3be:	f8 2e       	mov	r15, r24

000003c0 <_KER_SCH_LOOP8>:
 3c0:	20 93 07 01 	sts	0x0107, r18
 3c4:	8f 2d       	mov	r24, r15
 3c6:	e4 e4       	ldi	r30, 0x44	; 68
 3c8:	f1 e0       	ldi	r31, 0x01	; 1
 3ca:	20 91 07 01 	lds	r18, 0x0107
 3ce:	22 0f       	add	r18, r18
 3d0:	e2 0f       	add	r30, r18
 3d2:	20 e0       	ldi	r18, 0x00	; 0
 3d4:	f2 1f       	adc	r31, r18
 3d6:	20 81       	ld	r18, Z
 3d8:	31 81       	ldd	r19, Z+1	; 0x01
 3da:	42 2f       	mov	r20, r18
 3dc:	43 2b       	or	r20, r19
 3de:	59 f0       	breq	.+22     	; 0x3f6 <_VAL_NULL9>
 3e0:	81 30       	cpi	r24, 0x01	; 1
 3e2:	99 f0       	breq	.+38     	; 0x40a <_VAL_NOT_NULL9>
 3e4:	41 e0       	ldi	r20, 0x01	; 1
 3e6:	24 1b       	sub	r18, r20
 3e8:	40 e0       	ldi	r20, 0x00	; 0
 3ea:	34 0b       	sbc	r19, r20
 3ec:	20 83       	st	Z, r18
 3ee:	31 83       	std	Z+1, r19	; 0x01
 3f0:	42 2f       	mov	r20, r18
 3f2:	43 2b       	or	r20, r19
 3f4:	51 f4       	brne	.+20     	; 0x40a <_VAL_NOT_NULL9>

000003f6 <_VAL_NULL9>:
 3f6:	e0 e3       	ldi	r30, 0x30	; 48
 3f8:	f1 e0       	ldi	r31, 0x01	; 1
 3fa:	20 91 07 01 	lds	r18, 0x0107
 3fe:	e2 0f       	add	r30, r18
 400:	20 e0       	ldi	r18, 0x00	; 0
 402:	f2 1f       	adc	r31, r18
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	80 83       	st	Z, r24
 408:	08 c0       	rjmp	.+16     	; 0x41a <_EXIT_SLP_TIME9>

0000040a <_VAL_NOT_NULL9>:
 40a:	e0 e3       	ldi	r30, 0x30	; 48
 40c:	f1 e0       	ldi	r31, 0x01	; 1
 40e:	20 91 07 01 	lds	r18, 0x0107
 412:	e2 0f       	add	r30, r18
 414:	20 e0       	ldi	r18, 0x00	; 0
 416:	f2 1f       	adc	r31, r18
 418:	80 81       	ld	r24, Z

0000041a <_EXIT_SLP_TIME9>:
 41a:	81 30       	cpi	r24, 0x01	; 1
 41c:	19 f0       	breq	.+6      	; 0x424 <_KER_CALC_PRIO8>
 41e:	84 30       	cpi	r24, 0x04	; 4
 420:	09 f0       	breq	.+2      	; 0x424 <_KER_CALC_PRIO8>
 422:	12 c0       	rjmp	.+36     	; 0x448 <_KER_SCH_NEXT8>

00000424 <_KER_CALC_PRIO8>:
 424:	ea e3       	ldi	r30, 0x3A	; 58
 426:	f1 e0       	ldi	r31, 0x01	; 1
 428:	20 e0       	ldi	r18, 0x00	; 0
 42a:	80 91 07 01 	lds	r24, 0x0107
 42e:	e8 0f       	add	r30, r24
 430:	f2 1f       	adc	r31, r18
 432:	80 81       	ld	r24, Z
 434:	20 91 09 01 	lds	r18, 0x0109
 438:	82 17       	cp	r24, r18
 43a:	30 f4       	brcc	.+12     	; 0x448 <_KER_SCH_NEXT8>
 43c:	80 93 09 01 	sts	0x0109, r24
 440:	20 91 07 01 	lds	r18, 0x0107
 444:	20 93 0a 01 	sts	0x010A, r18

00000448 <_KER_SCH_NEXT8>:
 448:	20 91 07 01 	lds	r18, 0x0107
 44c:	23 95       	inc	r18
 44e:	30 91 08 01 	lds	r19, 0x0108
 452:	23 17       	cp	r18, r19
 454:	08 f4       	brcc	.+2      	; 0x458 <_KER_SCH_EXIT8>
 456:	b4 cf       	rjmp	.-152    	; 0x3c0 <_KER_SCH_LOOP8>

00000458 <_KER_SCH_EXIT8>:
 458:	20 91 0a 01 	lds	r18, 0x010A
 45c:	20 93 07 01 	sts	0x0107, r18
		KER_CPU_USAGE                                     ;calc cpu usage         ( 26 clocks) 
 460:	20 91 07 01 	lds	r18, 0x0107
 464:	22 23       	and	r18, r18
 466:	29 f0       	breq	.+10     	; 0x472 <_KER_USG_TICK14>
 468:	20 91 0c 01 	lds	r18, 0x010C
 46c:	23 95       	inc	r18
 46e:	20 93 0c 01 	sts	0x010C, r18

00000472 <_KER_USG_TICK14>:
 472:	20 91 0b 01 	lds	r18, 0x010B
 476:	23 95       	inc	r18
 478:	24 36       	cpi	r18, 0x64	; 100
 47a:	40 f0       	brcs	.+16     	; 0x48c <_KER_USG_UTC_SV14>
 47c:	20 e0       	ldi	r18, 0x00	; 0
 47e:	30 91 0c 01 	lds	r19, 0x010C
 482:	30 93 0d 01 	sts	0x010D, r19
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	30 93 0c 01 	sts	0x010C, r19

0000048c <_KER_USG_UTC_SV14>:
 48c:	20 93 0b 01 	sts	0x010B, r18
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 490:	ee e0       	ldi	r30, 0x0E	; 14
 492:	f1 e0       	ldi	r31, 0x01	; 1
 494:	20 91 07 01 	lds	r18, 0x0107
 498:	22 0f       	add	r18, r18
 49a:	e2 0f       	add	r30, r18
 49c:	20 e0       	ldi	r18, 0x00	; 0
 49e:	f2 1f       	adc	r31, r18
 4a0:	20 81       	ld	r18, Z
 4a2:	31 81       	ldd	r19, Z+1	; 0x01
 4a4:	2d bf       	out	0x3d, r18	; 61
 4a6:	3e bf       	out	0x3e, r19	; 62
		KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
 4a8:	ff 91       	pop	r31
 4aa:	ef 91       	pop	r30
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
 4b0:	bf 91       	pop	r27
 4b2:	af 91       	pop	r26
 4b4:	9f 91       	pop	r25
 4b6:	8f 91       	pop	r24
 4b8:	7f 91       	pop	r23
 4ba:	6f 91       	pop	r22
 4bc:	5f 91       	pop	r21
 4be:	4f 91       	pop	r20
 4c0:	3f 91       	pop	r19
 4c2:	2f 91       	pop	r18
 4c4:	1f 91       	pop	r17
 4c6:	0f 91       	pop	r16
 4c8:	ff 90       	pop	r15
 4ca:	ef 90       	pop	r14
 4cc:	df 90       	pop	r13
 4ce:	cf 90       	pop	r12
 4d0:	bf 90       	pop	r11
 4d2:	af 90       	pop	r10
 4d4:	9f 90       	pop	r9
 4d6:	8f 90       	pop	r8
 4d8:	7f 90       	pop	r7
 4da:	6f 90       	pop	r6
 4dc:	5f 90       	pop	r5
 4de:	4f 90       	pop	r4
 4e0:	3f 90       	pop	r3
 4e2:	2f 90       	pop	r2
 4e4:	1f 90       	pop	r1
 4e6:	0f 90       	pop	r0
 4e8:	0f be       	out	0x3f, r0	; 63
 4ea:	0f 90       	pop	r0
	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 4ec:	5d 98       	cbi	0x0b, 5	; 11
		RETI                                              ;return from interrupt  (  4 clocks) 
 4ee:	18 95       	reti

000004f0 <Kernel_SysTick_Reg_Init>:
;used registers          : R18, R19, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
;arg registers           : R24(Prescaler), R22(ReloadVal)                                      
;return registers        : None                                                                
;unsafe access registers : R18, R19, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
Kernel_SysTick_Reg_Init:                                  ;total 11.5uS @8MHz     ( 92 clocks) 
        CLI                                               ;disable global int     (  1 clock ) 
 4f0:	f8 94       	cli
		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 4f2:	5d 98       	cbi	0x0b, 5	; 11
 4f4:	55 9a       	sbi	0x0a, 5	; 10
        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 4f6:	a0 91 22 01 	lds	r26, 0x0122
 4fa:	b0 91 23 01 	lds	r27, 0x0123
 4fe:	2d b7       	in	r18, 0x3d	; 61
 500:	3e b7       	in	r19, 0x3e	; 62
 502:	2d 93       	st	X+, r18
 504:	3d 93       	st	X+, r19
 506:	ed 93       	st	X+, r30
 508:	fd 93       	st	X+, r31
 50a:	a0 93 22 01 	sts	0x0122, r26
 50e:	b0 93 23 01 	sts	0x0123, r27
		;clear reg                                                                             
		LDI   R18                , 0x00                   ;set 0x00 to R18        (  1 clock ) 
 512:	20 e0       	ldi	r18, 0x00	; 0
		;clear tick counter                                                                    
		STS   KerBase+OFB_TICK0  , R18                    ;clear  KerBase[0]      (  2 clocks) 
 514:	20 93 00 01 	sts	0x0100, r18
		STS   KerBase+OFB_TICK1  , R18                    ;clear  KerBase[1]      (  2 clocks) 
 518:	20 93 01 01 	sts	0x0101, r18
		STS   KerBase+OFB_TICK2  , R18                    ;clear  KerBase[2]      (  2 clocks) 
 51c:	20 93 02 01 	sts	0x0102, r18
		STS   KerBase+OFB_TICK3  , R18                    ;clear  KerBase[3]      (  2 clocks) 
 520:	20 93 03 01 	sts	0x0103, r18
		STS   KerBase+OFB_TICK4  , R18                    ;clear  KerBase[4]      (  2 clocks) 
 524:	20 93 04 01 	sts	0x0104, r18
		;clear system registers                                                                
		STS   KerBase+OFB_PRS    , R18                    ;clear  KerBase[5]      (  2 clocks) 
 528:	20 93 05 01 	sts	0x0105, r18
		STS   KerBase+OFB_RLD    , R18                    ;clear  KerBase[6]      (  2 clocks) 
 52c:	20 93 06 01 	sts	0x0106, r18
		STS   KerBase+OFB_TID    , R18                    ;clear  KerBase[7]      (  2 clocks) 
 530:	20 93 07 01 	sts	0x0107, r18
		STS   KerBase+OFB_NTSK   , R18                    ;clear  KerBase[8]      (  2 clocks) 
 534:	20 93 08 01 	sts	0x0108, r18
		STS   KerBase+OFB_LPR    , R18                    ;clear  KerBase[9]      (  2 clocks) 
 538:	20 93 09 01 	sts	0x0109, r18
        STS   KerBase+OFB_PTID   , R18                    ;clear  KerBase[10]     (  2 clocks) 
 53c:	20 93 0a 01 	sts	0x010A, r18
		STS   KerBase+OFB_UTC    , R18                    ;clear  KerBase[11]     (  2 clocks) 
 540:	20 93 0b 01 	sts	0x010B, r18
		STS   KerBase+OFB_UATC   , R18                    ;clear  KerBase[12]     (  2 clocks) 
 544:	20 93 0c 01 	sts	0x010C, r18
		STS   KerBase+OFB_USAGE  , R18                    ;clear  KerBase[13]     (  2 clocks) 
 548:	20 93 0d 01 	sts	0x010D, r18
		;clear all timer registers                                                             
		STS   SRTCCR0A           , R18                    ;clear TCCR0A           (  2 clocks) 
 54c:	20 93 44 00 	sts	0x0044, r18
		STS   SRTCCR0B           , R18                    ;clear TCCR0B           (  2 clocks) 
 550:	20 93 45 00 	sts	0x0045, r18
		STS   SRTIMSK0           , R18                    ;clear TIMSK0           (  2 clocks) 
 554:	20 93 6e 00 	sts	0x006E, r18
		STS   SRTIFR0            , R18                    ;clear TIFR0            (  2 clocks) 
 558:	20 93 35 00 	sts	0x0035, r18
		STS   SROCR0A            , R18                    ;clear OCR0A            (  2 clocks) 
 55c:	20 93 47 00 	sts	0x0047, r18
		STS   SROCR0B            , R18                    ;clear OCR0B            (  2 clocks) 
 560:	20 93 48 00 	sts	0x0048, r18
		STS   SRTCNT0            , R18                    ;clear TCNT0            (  2 clocks) 
 564:	20 93 46 00 	sts	0x0046, r18
		;save values for future use                                                            
		STS   KerBase+OFB_PRS    , R24                    ;KerBase[5] prescaler   (  2 clocks) 
 568:	80 93 05 01 	sts	0x0105, r24
		STS   KerBase+OFB_RLD    , R22                    ;KerBase[6] reload val  (  2 clocks) 
 56c:	60 93 06 01 	sts	0x0106, r22
        KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 570:	a0 91 22 01 	lds	r26, 0x0122
 574:	b0 91 23 01 	lds	r27, 0x0123
 578:	fe 91       	ld	r31, -X
 57a:	ee 91       	ld	r30, -X
 57c:	3e 91       	ld	r19, -X
 57e:	2e 91       	ld	r18, -X
 580:	2d bf       	out	0x3d, r18	; 61
 582:	3e bf       	out	0x3e, r19	; 62
 584:	a0 93 22 01 	sts	0x0122, r26
 588:	b0 93 23 01 	sts	0x0123, r27
		RET                                               ;return from subroutine (  4 clocks) 
 58c:	08 95       	ret

0000058e <Kernel_Task_Create>:
;used registers          : R16, R17, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)         
;arg registers           : R25:R24(FuncPtr), R22(TaskPriority)                                 
;return registers        : None                                                                
;unsafe access registers : R16, R17, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)         
Kernel_Task_Create:                                       ;total 20.38uS @8MHz    (163 clocks) 
        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 58e:	a0 91 22 01 	lds	r26, 0x0122
 592:	b0 91 23 01 	lds	r27, 0x0123
 596:	2d b7       	in	r18, 0x3d	; 61
 598:	3e b7       	in	r19, 0x3e	; 62
 59a:	2d 93       	st	X+, r18
 59c:	3d 93       	st	X+, r19
 59e:	ed 93       	st	X+, r30
 5a0:	fd 93       	st	X+, r31
 5a2:	a0 93 22 01 	sts	0x0122, r26
 5a6:	b0 93 23 01 	sts	0x0123, r27
		;set priority to KerSchPr+task_id                                                      
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 5aa:	ea e3       	ldi	r30, 0x3A	; 58
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 5ac:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 5ae:	20 91 07 01 	lds	r18, 0x0107
 5b2:	e2 0f       	add	r30, r18
 5b4:	20 e0       	ldi	r18, 0x00	; 0
 5b6:	f2 1f       	adc	r31, r18
		ST    Z                  , R22                    ;save priority          (  2 clocks) 
 5b8:	60 83       	st	Z, r22
		;set task status to KerSchSts+task_id                                                  
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 5ba:	e0 e3       	ldi	r30, 0x30	; 48
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 5bc:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 5be:	20 91 07 01 	lds	r18, 0x0107
 5c2:	e2 0f       	add	r30, r18
 5c4:	20 e0       	ldi	r18, 0x00	; 0
 5c6:	f2 1f       	adc	r31, r18
		LDI   R16                , TASK_READY             ;set status as ready    (  1 clock ) 
 5c8:	01 e0       	ldi	r16, 0x01	; 1
		ST    Z                  , R16                    ;save status            (  2 clocks) 
 5ca:	00 83       	st	Z, r16
		;stack pointer for current task (KerStack + KER_STK_SZ*(task_id+1) - 1) ->stack top    
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 5cc:	00 91 07 01 	lds	r16, 0x0107
		MOV   R17                , R16                    ;load task_id           (  1 clock ) 
 5d0:	10 2f       	mov	r17, r16
		INC   R17                                         ;increment task_id      (  1 clock ) 
 5d2:	13 95       	inc	r17
		LDI   R18                , KER_STK_SZ             ;load stack size        (  1 clock ) 
 5d4:	20 ea       	ldi	r18, 0xA0	; 160
		MUL   R17                , R18                    ;multiply to get offset (  2 clocks) 
 5d6:	12 9f       	mul	r17, r18
		MOV   ZL                 , R0                     ;load multiplied low    (  1 clocks) 
 5d8:	e0 2d       	mov	r30, r0
		MOV   ZH                 , R1                     ;load multiplied high   (  1 clocks) 
 5da:	f1 2d       	mov	r31, r1
		SBIW  ZL                 , 0x01                   ;dec multiplied val-1   (  2 clocks) 
 5dc:	31 97       	sbiw	r30, 0x01	; 1
		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 5de:	11 24       	eor	r1, r1
		LDI   R17                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
 5e0:	18 e5       	ldi	r17, 0x58	; 88
		LDI   R18                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
 5e2:	21 e0       	ldi	r18, 0x01	; 1
		ADD   ZL                 , R17                    ;add low bytes          (  1 clock ) 
 5e4:	e1 0f       	add	r30, r17
		ADC   ZH                 , R18                    ;add high bytes+carry   (  1 clock ) 
 5e6:	f2 1f       	adc	r31, r18
		OUT   IOSPL              , ZL                     ;load SPL               (  1 clock ) 
 5e8:	ed bf       	out	0x3d, r30	; 61
        OUT   IOSPH              , ZH                     ;load SPH               (  1 clock ) 
 5ea:	fe bf       	out	0x3e, r31	; 62
		;function argument directly returns word address                                       
	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
 5ec:	8f 93       	push	r24
		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 5ee:	9f 93       	push	r25
		;push context to stack of this task                                                    
		KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 5f0:	0f 92       	push	r0
 5f2:	0f b6       	in	r0, 0x3f	; 63
 5f4:	0f 92       	push	r0
 5f6:	1f 92       	push	r1
 5f8:	11 24       	eor	r1, r1
 5fa:	2f 92       	push	r2
 5fc:	3f 92       	push	r3
 5fe:	4f 92       	push	r4
 600:	5f 92       	push	r5
 602:	6f 92       	push	r6
 604:	7f 92       	push	r7
 606:	8f 92       	push	r8
 608:	9f 92       	push	r9
 60a:	af 92       	push	r10
 60c:	bf 92       	push	r11
 60e:	cf 92       	push	r12
 610:	df 92       	push	r13
 612:	ef 92       	push	r14
 614:	ff 92       	push	r15
 616:	0f 93       	push	r16
 618:	1f 93       	push	r17
 61a:	2f 93       	push	r18
 61c:	3f 93       	push	r19
 61e:	4f 93       	push	r20
 620:	5f 93       	push	r21
 622:	6f 93       	push	r22
 624:	7f 93       	push	r23
 626:	8f 93       	push	r24
 628:	9f 93       	push	r25
 62a:	af 93       	push	r26
 62c:	bf 93       	push	r27
 62e:	cf 93       	push	r28
 630:	df 93       	push	r29
 632:	ef 93       	push	r30
 634:	ff 93       	push	r31
		;read stack pointer of current task (necessary when restore)                           
		IN    R17                , IOSPL                  ;read SPL               (  1 clock ) 
 636:	1d b7       	in	r17, 0x3d	; 61
        IN    R18                , IOSPH                  ;read SPH               (  1 clock ) 
 638:	2e b7       	in	r18, 0x3e	; 62
		;calculate the address where current task's SP will be stored and store SP             
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 63a:	00 91 07 01 	lds	r16, 0x0107
		MOV   R19                , R16                    ;copy task_id           (  1 clock ) 
 63e:	30 2f       	mov	r19, r16
		LSL   R19                                         ;left shift to multiply (  1 clock ) 
 640:	33 0f       	add	r19, r19
		LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 642:	ee e0       	ldi	r30, 0x0E	; 14
		LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 644:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R19                    ;add offset to array    (  1 clock ) 
 646:	e3 0f       	add	r30, r19
		LDI   R16                , 0x00                   ;clear reg              (  1 clock ) 
 648:	00 e0       	ldi	r16, 0x00	; 0
		ADC   ZH                 , R16                    ;add carry if any       (  1 clock ) 
 64a:	f0 1f       	adc	r31, r16
		ST    Z+                 , R17                    ;SPL at KerPSp+offset   (  2 clocks) 
 64c:	11 93       	st	Z+, r17
		ST    Z                  , R18                    ;SPH at KerPSp+offset   (  2 clocks) 
 64e:	20 83       	st	Z, r18
		;increment task_id                                                                     
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 650:	00 91 07 01 	lds	r16, 0x0107
		INC   R16                                         ;increment task_id      (  1 clock ) 
 654:	03 95       	inc	r16
		STS   KerBase+OFB_TID    , R16                    ;store task_id          (  2 clocks) 
 656:	00 93 07 01 	sts	0x0107, r16
		;increment ntask                                                                       
		LDS   R16                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 65a:	00 91 08 01 	lds	r16, 0x0108
		INC   R16                                         ;increment ntask        (  1 clock ) 
 65e:	03 95       	inc	r16
		STS   KerBase+OFB_NTSK   , R16                    ;store ntask            (  2 clocks) 
 660:	00 93 08 01 	sts	0x0108, r16
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 664:	a0 91 22 01 	lds	r26, 0x0122
 668:	b0 91 23 01 	lds	r27, 0x0123
 66c:	fe 91       	ld	r31, -X
 66e:	ee 91       	ld	r30, -X
 670:	3e 91       	ld	r19, -X
 672:	2e 91       	ld	r18, -X
 674:	2d bf       	out	0x3d, r18	; 61
 676:	3e bf       	out	0x3e, r19	; 62
 678:	a0 93 22 01 	sts	0x0122, r26
 67c:	b0 93 23 01 	sts	0x0123, r27
		RET                                               ;return from subroutine (  4 clocks) 
 680:	08 95       	ret

00000682 <Kernel_Start_Tasks>:
;used registers          : R0~R31                                                              
;arg registers           : None                                                                
;return registers        : None                                                                
;unsafe access registers : R16, R17, R18, R24, R25, R30(ZL), R31(ZH)                           
Kernel_Start_Tasks:                                       ;total 11.38uS @8MHz    ( 91 clocks) 
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 682:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
 684:	2f ef       	ldi	r18, 0xFF	; 255
 686:	20 93 09 01 	sts	0x0109, r18
 68a:	20 e0       	ldi	r18, 0x00	; 0
 68c:	20 93 0a 01 	sts	0x010A, r18
 690:	f8 2e       	mov	r15, r24

00000692 <_KER_SCH_LOOP31>:
 692:	20 93 07 01 	sts	0x0107, r18
 696:	8f 2d       	mov	r24, r15
 698:	e4 e4       	ldi	r30, 0x44	; 68
 69a:	f1 e0       	ldi	r31, 0x01	; 1
 69c:	20 91 07 01 	lds	r18, 0x0107
 6a0:	22 0f       	add	r18, r18
 6a2:	e2 0f       	add	r30, r18
 6a4:	20 e0       	ldi	r18, 0x00	; 0
 6a6:	f2 1f       	adc	r31, r18
 6a8:	20 81       	ld	r18, Z
 6aa:	31 81       	ldd	r19, Z+1	; 0x01
 6ac:	42 2f       	mov	r20, r18
 6ae:	43 2b       	or	r20, r19
 6b0:	59 f0       	breq	.+22     	; 0x6c8 <_VAL_NULL32>
 6b2:	81 30       	cpi	r24, 0x01	; 1
 6b4:	99 f0       	breq	.+38     	; 0x6dc <_VAL_NOT_NULL32>
 6b6:	41 e0       	ldi	r20, 0x01	; 1
 6b8:	24 1b       	sub	r18, r20
 6ba:	40 e0       	ldi	r20, 0x00	; 0
 6bc:	34 0b       	sbc	r19, r20
 6be:	20 83       	st	Z, r18
 6c0:	31 83       	std	Z+1, r19	; 0x01
 6c2:	42 2f       	mov	r20, r18
 6c4:	43 2b       	or	r20, r19
 6c6:	51 f4       	brne	.+20     	; 0x6dc <_VAL_NOT_NULL32>

000006c8 <_VAL_NULL32>:
 6c8:	e0 e3       	ldi	r30, 0x30	; 48
 6ca:	f1 e0       	ldi	r31, 0x01	; 1
 6cc:	20 91 07 01 	lds	r18, 0x0107
 6d0:	e2 0f       	add	r30, r18
 6d2:	20 e0       	ldi	r18, 0x00	; 0
 6d4:	f2 1f       	adc	r31, r18
 6d6:	81 e0       	ldi	r24, 0x01	; 1
 6d8:	80 83       	st	Z, r24
 6da:	08 c0       	rjmp	.+16     	; 0x6ec <_EXIT_SLP_TIME32>

000006dc <_VAL_NOT_NULL32>:
 6dc:	e0 e3       	ldi	r30, 0x30	; 48
 6de:	f1 e0       	ldi	r31, 0x01	; 1
 6e0:	20 91 07 01 	lds	r18, 0x0107
 6e4:	e2 0f       	add	r30, r18
 6e6:	20 e0       	ldi	r18, 0x00	; 0
 6e8:	f2 1f       	adc	r31, r18
 6ea:	80 81       	ld	r24, Z

000006ec <_EXIT_SLP_TIME32>:
 6ec:	81 30       	cpi	r24, 0x01	; 1
 6ee:	19 f0       	breq	.+6      	; 0x6f6 <_KER_CALC_PRIO31>
 6f0:	84 30       	cpi	r24, 0x04	; 4
 6f2:	09 f0       	breq	.+2      	; 0x6f6 <_KER_CALC_PRIO31>
 6f4:	12 c0       	rjmp	.+36     	; 0x71a <_KER_SCH_NEXT31>

000006f6 <_KER_CALC_PRIO31>:
 6f6:	ea e3       	ldi	r30, 0x3A	; 58
 6f8:	f1 e0       	ldi	r31, 0x01	; 1
 6fa:	20 e0       	ldi	r18, 0x00	; 0
 6fc:	80 91 07 01 	lds	r24, 0x0107
 700:	e8 0f       	add	r30, r24
 702:	f2 1f       	adc	r31, r18
 704:	80 81       	ld	r24, Z
 706:	20 91 09 01 	lds	r18, 0x0109
 70a:	82 17       	cp	r24, r18
 70c:	30 f4       	brcc	.+12     	; 0x71a <_KER_SCH_NEXT31>
 70e:	80 93 09 01 	sts	0x0109, r24
 712:	20 91 07 01 	lds	r18, 0x0107
 716:	20 93 0a 01 	sts	0x010A, r18

0000071a <_KER_SCH_NEXT31>:
 71a:	20 91 07 01 	lds	r18, 0x0107
 71e:	23 95       	inc	r18
 720:	30 91 08 01 	lds	r19, 0x0108
 724:	23 17       	cp	r18, r19
 726:	08 f4       	brcc	.+2      	; 0x72a <_KER_SCH_EXIT31>
 728:	b4 cf       	rjmp	.-152    	; 0x692 <_KER_SCH_LOOP31>

0000072a <_KER_SCH_EXIT31>:
 72a:	20 91 0a 01 	lds	r18, 0x010A
 72e:	20 93 07 01 	sts	0x0107, r18
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 732:	ee e0       	ldi	r30, 0x0E	; 14
 734:	f1 e0       	ldi	r31, 0x01	; 1
 736:	20 91 07 01 	lds	r18, 0x0107
 73a:	22 0f       	add	r18, r18
 73c:	e2 0f       	add	r30, r18
 73e:	20 e0       	ldi	r18, 0x00	; 0
 740:	f2 1f       	adc	r31, r18
 742:	20 81       	ld	r18, Z
 744:	31 81       	ldd	r19, Z+1	; 0x01
 746:	2d bf       	out	0x3d, r18	; 61
 748:	3e bf       	out	0x3e, r19	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 74a:	ff 91       	pop	r31
 74c:	ef 91       	pop	r30
 74e:	df 91       	pop	r29
 750:	cf 91       	pop	r28
 752:	bf 91       	pop	r27
 754:	af 91       	pop	r26
 756:	9f 91       	pop	r25
 758:	8f 91       	pop	r24
 75a:	7f 91       	pop	r23
 75c:	6f 91       	pop	r22
 75e:	5f 91       	pop	r21
 760:	4f 91       	pop	r20
 762:	3f 91       	pop	r19
 764:	2f 91       	pop	r18
 766:	1f 91       	pop	r17
 768:	0f 91       	pop	r16
 76a:	ff 90       	pop	r15
 76c:	ef 90       	pop	r14
 76e:	df 90       	pop	r13
 770:	cf 90       	pop	r12
 772:	bf 90       	pop	r11
 774:	af 90       	pop	r10
 776:	9f 90       	pop	r9
 778:	8f 90       	pop	r8
 77a:	7f 90       	pop	r7
 77c:	6f 90       	pop	r6
 77e:	5f 90       	pop	r5
 780:	4f 90       	pop	r4
 782:	3f 90       	pop	r3
 784:	2f 90       	pop	r2
 786:	1f 90       	pop	r1
 788:	0f 90       	pop	r0
 78a:	0f be       	out	0x3f, r0	; 63
 78c:	0f 90       	pop	r0
 78e:	78 94       	sei
		;config timer for system tick                                                          
		KER_TIMER_INIT                                    ;init timer, int enable ( 12 clocks) 
 790:	20 91 05 01 	lds	r18, 0x0105
 794:	30 91 06 01 	lds	r19, 0x0106
 798:	20 93 45 00 	sts	0x0045, r18
 79c:	30 93 46 00 	sts	0x0046, r19
 7a0:	21 e0       	ldi	r18, 0x01	; 1
 7a2:	20 93 6e 00 	sts	0x006E, r18
 7a6:	78 94       	sei
		;execute return to jump to highest priority task                                       
		RET                                               ;return from subroutine (  4 clocks) 
 7a8:	08 95       	ret

000007aa <Kernel_Init>:
;used registers          : R1, R16, R17, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
;arg registers           : None                                                                
;return registers        : None                                                                
;unsafe access registers : R1, R16, R17, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
Kernel_Init:                                              ;total 38.63uS @8MHz    (309 clocks) 
		CLR   R1                                          ;gcc expects            (  1 clock ) 
 7aa:	11 24       	eor	r1, r1
        ;store stack top (for MSP) addr to KerSSZ+OFM_MSPI0:1                                  
		LDI   R16                , lo8(KerSSZ+OFM_MSPS)   ;load low address       (  1 clock ) 
 7ac:	04 e2       	ldi	r16, 0x24	; 36
		LDI   R17                , hi8(KerSSZ+OFM_MSPS)   ;load high address      (  1 clock ) 
 7ae:	11 e0       	ldi	r17, 0x01	; 1
        STS   KerSSZ+OFM_MSPI+0  , R16                    ;set mspi to stack top  (  2 clocks) 
 7b0:	00 93 22 01 	sts	0x0122, r16
		STS   KerSSZ+OFM_MSPI+1  , R17                    ;set mspi to stack top  (  2 clocks) 
 7b4:	10 93 23 01 	sts	0x0123, r17
		KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 7b8:	a0 91 22 01 	lds	r26, 0x0122
 7bc:	b0 91 23 01 	lds	r27, 0x0123
 7c0:	2d b7       	in	r18, 0x3d	; 61
 7c2:	3e b7       	in	r19, 0x3e	; 62
 7c4:	2d 93       	st	X+, r18
 7c6:	3d 93       	st	X+, r19
 7c8:	ed 93       	st	X+, r30
 7ca:	fd 93       	st	X+, r31
 7cc:	a0 93 22 01 	sts	0x0122, r26
 7d0:	b0 93 23 01 	sts	0x0123, r27
		;init timer for kernel                                                                 
		LDI   R24                , 0x03                   ;set prescaler          (  1 clock ) 
 7d4:	83 e0       	ldi	r24, 0x03	; 3
		LDI   R22                , 0x82                   ;set reload val         (  1 clock ) 
 7d6:	62 e8       	ldi	r22, 0x82	; 130
		CALL  Kernel_SysTick_Reg_Init                     ;init timer             ( 92 clocks) 
 7d8:	0e 94 78 02 	call	0x4f0	; 0x4f0 <Kernel_SysTick_Reg_Init>
		;create idle task at task_id 0, priority 0xFF (lowest)                                 
		LDI   R24                , lo8(Kernel_Task_Idle)  ;load func addr low     (  1 clock ) 
 7dc:	88 e0       	ldi	r24, 0x08	; 8
		LDI   R25                , hi8(Kernel_Task_Idle)  ;load func addr high    (  1 clock ) 
 7de:	98 e0       	ldi	r25, 0x08	; 8
		LSR   R25                                         ;right shift to divide  (  1 clock ) 
 7e0:	96 95       	lsr	r25
		ROR   R24                                         ;rotate right th carry  (  1 clock ) 
 7e2:	87 95       	ror	r24
		LDI   R22                , 0xFF                   ;set max val            (  1 clock ) 
 7e4:	6f ef       	ldi	r22, 0xFF	; 255
		CALL  Kernel_Task_Create                          ;init idle task         (163 clocks) 
 7e6:	0e 94 c7 02 	call	0x58e	; 0x58e <Kernel_Task_Create>
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 7ea:	a0 91 22 01 	lds	r26, 0x0122
 7ee:	b0 91 23 01 	lds	r27, 0x0123
 7f2:	fe 91       	ld	r31, -X
 7f4:	ee 91       	ld	r30, -X
 7f6:	3e 91       	ld	r19, -X
 7f8:	2e 91       	ld	r18, -X
 7fa:	2d bf       	out	0x3d, r18	; 61
 7fc:	3e bf       	out	0x3e, r19	; 62
 7fe:	a0 93 22 01 	sts	0x0122, r26
 802:	b0 93 23 01 	sts	0x0123, r27
		;execute return to jump to task0, pushed while task init                               
		RET                                               ;return from subroutine (  4 clocks) 
 806:	08 95       	ret

00000808 <Kernel_Task_Idle>:
;arg registers           : None                                                                
;return registers        : None                                                                
;unsafe access registers : None                                                                
Kernel_Task_Idle:                                         ;total 0.5uS @8MHz      (  4 clocks) 
    _IDLE_LOOP:                                           ;forever loop                        
		RJMP  _IDLE_LOOP                                  ;return from subroutine (  4 clocks) 
 808:	ff cf       	rjmp	.-2      	; 0x808 <Kernel_Task_Idle>

0000080a <Kernel_Task_Sleep>:
;arg registers           : R25:R24(SleepTime)                                                  
;return registers        : None                                                                
;unsafe access registers : R16, R17, R18, R24, R25, R30(ZL), R31(ZH)                           
Kernel_Task_Sleep:                                        ;total 35.5uS @8MHz     (284 clocks) 
        ;save current context                                                                  
        KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
 80a:	0f 92       	push	r0
 80c:	0f b6       	in	r0, 0x3f	; 63
 80e:	f8 94       	cli
 810:	0f 92       	push	r0
 812:	1f 92       	push	r1
 814:	11 24       	eor	r1, r1
 816:	2f 92       	push	r2
 818:	3f 92       	push	r3
 81a:	4f 92       	push	r4
 81c:	5f 92       	push	r5
 81e:	6f 92       	push	r6
 820:	7f 92       	push	r7
 822:	8f 92       	push	r8
 824:	9f 92       	push	r9
 826:	af 92       	push	r10
 828:	bf 92       	push	r11
 82a:	cf 92       	push	r12
 82c:	df 92       	push	r13
 82e:	ef 92       	push	r14
 830:	ff 92       	push	r15
 832:	0f 93       	push	r16
 834:	1f 93       	push	r17
 836:	2f 93       	push	r18
 838:	3f 93       	push	r19
 83a:	4f 93       	push	r20
 83c:	5f 93       	push	r21
 83e:	6f 93       	push	r22
 840:	7f 93       	push	r23
 842:	8f 93       	push	r24
 844:	9f 93       	push	r25
 846:	af 93       	push	r26
 848:	bf 93       	push	r27
 84a:	cf 93       	push	r28
 84c:	df 93       	push	r29
 84e:	ef 93       	push	r30
 850:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 852:	ee e0       	ldi	r30, 0x0E	; 14
 854:	f1 e0       	ldi	r31, 0x01	; 1
 856:	20 91 07 01 	lds	r18, 0x0107
 85a:	22 0f       	add	r18, r18
 85c:	e2 0f       	add	r30, r18
 85e:	20 e0       	ldi	r18, 0x00	; 0
 860:	f2 1f       	adc	r31, r18
 862:	2d b7       	in	r18, 0x3d	; 61
 864:	3e b7       	in	r19, 0x3e	; 62
 866:	20 83       	st	Z, r18
 868:	31 83       	std	Z+1, r19	; 0x01
		;create next task wakeup time (args R25:R24)                                           
		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 86a:	e4 e4       	ldi	r30, 0x44	; 68
		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 86c:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
 86e:	20 91 07 01 	lds	r18, 0x0107
 872:	22 0f       	add	r18, r18
 874:	e2 0f       	add	r30, r18
 876:	20 e0       	ldi	r18, 0x00	; 0
 878:	f2 1f       	adc	r31, r18
		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
 87a:	80 83       	st	Z, r24
		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 87c:	91 83       	std	Z+1, r25	; 0x01
		;update task scheduler status as blocked                                               
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 87e:	e0 e3       	ldi	r30, 0x30	; 48
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 880:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
 882:	20 91 07 01 	lds	r18, 0x0107
 886:	e2 0f       	add	r30, r18
 888:	20 e0       	ldi	r18, 0x00	; 0
 88a:	f2 1f       	adc	r31, r18
        LDI   R16                , TASK_BLOCKED           ;block task until cnt=0 (  1 clock ) 
 88c:	00 e0       	ldi	r16, 0x00	; 0
		STD   Z+0                , R16                    ;save block flag        (  2 clocks) 
 88e:	00 83       	st	Z, r16
		;run scheduler, load next task sp, restore context                                     
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 890:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
 892:	2f ef       	ldi	r18, 0xFF	; 255
 894:	20 93 09 01 	sts	0x0109, r18
 898:	20 e0       	ldi	r18, 0x00	; 0
 89a:	20 93 0a 01 	sts	0x010A, r18
 89e:	f8 2e       	mov	r15, r24

000008a0 <_KER_SCH_LOOP52>:
 8a0:	20 93 07 01 	sts	0x0107, r18
 8a4:	8f 2d       	mov	r24, r15
 8a6:	e4 e4       	ldi	r30, 0x44	; 68
 8a8:	f1 e0       	ldi	r31, 0x01	; 1
 8aa:	20 91 07 01 	lds	r18, 0x0107
 8ae:	22 0f       	add	r18, r18
 8b0:	e2 0f       	add	r30, r18
 8b2:	20 e0       	ldi	r18, 0x00	; 0
 8b4:	f2 1f       	adc	r31, r18
 8b6:	20 81       	ld	r18, Z
 8b8:	31 81       	ldd	r19, Z+1	; 0x01
 8ba:	42 2f       	mov	r20, r18
 8bc:	43 2b       	or	r20, r19
 8be:	59 f0       	breq	.+22     	; 0x8d6 <_VAL_NULL53>
 8c0:	81 30       	cpi	r24, 0x01	; 1
 8c2:	99 f0       	breq	.+38     	; 0x8ea <_VAL_NOT_NULL53>
 8c4:	41 e0       	ldi	r20, 0x01	; 1
 8c6:	24 1b       	sub	r18, r20
 8c8:	40 e0       	ldi	r20, 0x00	; 0
 8ca:	34 0b       	sbc	r19, r20
 8cc:	20 83       	st	Z, r18
 8ce:	31 83       	std	Z+1, r19	; 0x01
 8d0:	42 2f       	mov	r20, r18
 8d2:	43 2b       	or	r20, r19
 8d4:	51 f4       	brne	.+20     	; 0x8ea <_VAL_NOT_NULL53>

000008d6 <_VAL_NULL53>:
 8d6:	e0 e3       	ldi	r30, 0x30	; 48
 8d8:	f1 e0       	ldi	r31, 0x01	; 1
 8da:	20 91 07 01 	lds	r18, 0x0107
 8de:	e2 0f       	add	r30, r18
 8e0:	20 e0       	ldi	r18, 0x00	; 0
 8e2:	f2 1f       	adc	r31, r18
 8e4:	81 e0       	ldi	r24, 0x01	; 1
 8e6:	80 83       	st	Z, r24
 8e8:	08 c0       	rjmp	.+16     	; 0x8fa <_EXIT_SLP_TIME53>

000008ea <_VAL_NOT_NULL53>:
 8ea:	e0 e3       	ldi	r30, 0x30	; 48
 8ec:	f1 e0       	ldi	r31, 0x01	; 1
 8ee:	20 91 07 01 	lds	r18, 0x0107
 8f2:	e2 0f       	add	r30, r18
 8f4:	20 e0       	ldi	r18, 0x00	; 0
 8f6:	f2 1f       	adc	r31, r18
 8f8:	80 81       	ld	r24, Z

000008fa <_EXIT_SLP_TIME53>:
 8fa:	81 30       	cpi	r24, 0x01	; 1
 8fc:	19 f0       	breq	.+6      	; 0x904 <_KER_CALC_PRIO52>
 8fe:	84 30       	cpi	r24, 0x04	; 4
 900:	09 f0       	breq	.+2      	; 0x904 <_KER_CALC_PRIO52>
 902:	12 c0       	rjmp	.+36     	; 0x928 <_KER_SCH_NEXT52>

00000904 <_KER_CALC_PRIO52>:
 904:	ea e3       	ldi	r30, 0x3A	; 58
 906:	f1 e0       	ldi	r31, 0x01	; 1
 908:	20 e0       	ldi	r18, 0x00	; 0
 90a:	80 91 07 01 	lds	r24, 0x0107
 90e:	e8 0f       	add	r30, r24
 910:	f2 1f       	adc	r31, r18
 912:	80 81       	ld	r24, Z
 914:	20 91 09 01 	lds	r18, 0x0109
 918:	82 17       	cp	r24, r18
 91a:	30 f4       	brcc	.+12     	; 0x928 <_KER_SCH_NEXT52>
 91c:	80 93 09 01 	sts	0x0109, r24
 920:	20 91 07 01 	lds	r18, 0x0107
 924:	20 93 0a 01 	sts	0x010A, r18

00000928 <_KER_SCH_NEXT52>:
 928:	20 91 07 01 	lds	r18, 0x0107
 92c:	23 95       	inc	r18
 92e:	30 91 08 01 	lds	r19, 0x0108
 932:	23 17       	cp	r18, r19
 934:	08 f4       	brcc	.+2      	; 0x938 <_KER_SCH_EXIT52>
 936:	b4 cf       	rjmp	.-152    	; 0x8a0 <_KER_SCH_LOOP52>

00000938 <_KER_SCH_EXIT52>:
 938:	20 91 0a 01 	lds	r18, 0x010A
 93c:	20 93 07 01 	sts	0x0107, r18
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 940:	ee e0       	ldi	r30, 0x0E	; 14
 942:	f1 e0       	ldi	r31, 0x01	; 1
 944:	20 91 07 01 	lds	r18, 0x0107
 948:	22 0f       	add	r18, r18
 94a:	e2 0f       	add	r30, r18
 94c:	20 e0       	ldi	r18, 0x00	; 0
 94e:	f2 1f       	adc	r31, r18
 950:	20 81       	ld	r18, Z
 952:	31 81       	ldd	r19, Z+1	; 0x01
 954:	2d bf       	out	0x3d, r18	; 61
 956:	3e bf       	out	0x3e, r19	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 958:	ff 91       	pop	r31
 95a:	ef 91       	pop	r30
 95c:	df 91       	pop	r29
 95e:	cf 91       	pop	r28
 960:	bf 91       	pop	r27
 962:	af 91       	pop	r26
 964:	9f 91       	pop	r25
 966:	8f 91       	pop	r24
 968:	7f 91       	pop	r23
 96a:	6f 91       	pop	r22
 96c:	5f 91       	pop	r21
 96e:	4f 91       	pop	r20
 970:	3f 91       	pop	r19
 972:	2f 91       	pop	r18
 974:	1f 91       	pop	r17
 976:	0f 91       	pop	r16
 978:	ff 90       	pop	r15
 97a:	ef 90       	pop	r14
 97c:	df 90       	pop	r13
 97e:	cf 90       	pop	r12
 980:	bf 90       	pop	r11
 982:	af 90       	pop	r10
 984:	9f 90       	pop	r9
 986:	8f 90       	pop	r8
 988:	7f 90       	pop	r7
 98a:	6f 90       	pop	r6
 98c:	5f 90       	pop	r5
 98e:	4f 90       	pop	r4
 990:	3f 90       	pop	r3
 992:	2f 90       	pop	r2
 994:	1f 90       	pop	r1
 996:	0f 90       	pop	r0
 998:	0f be       	out	0x3f, r0	; 63
 99a:	0f 90       	pop	r0
 99c:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
 99e:	08 95       	ret

000009a0 <Kernel_Task_Constant_Latency>:
;arg registers           : R25:R24(SleepTime)                                                  
;return registers        : None                                                                
;unsafe access registers : R16, R24, R25, R30(ZL), R31(ZH)                                     
Kernel_Task_Constant_Latency:                             ;total 35.5uS @8MHz     ( 26 clocks) 
		;create next task wakeup time (args R25:R24)                                           
		CLI                                               ;disable interrupt      (  1 clock ) 
 9a0:	f8 94       	cli
		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 9a2:	e4 e4       	ldi	r30, 0x44	; 68
		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 9a4:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
 9a6:	20 91 07 01 	lds	r18, 0x0107
 9aa:	22 0f       	add	r18, r18
 9ac:	e2 0f       	add	r30, r18
 9ae:	20 e0       	ldi	r18, 0x00	; 0
 9b0:	f2 1f       	adc	r31, r18
		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
 9b2:	80 83       	st	Z, r24
		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 9b4:	91 83       	std	Z+1, r25	; 0x01
		;update task scheduler status as constant latency                                      
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 9b6:	e0 e3       	ldi	r30, 0x30	; 48
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 9b8:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
 9ba:	20 91 07 01 	lds	r18, 0x0107
 9be:	e2 0f       	add	r30, r18
 9c0:	20 e0       	ldi	r18, 0x00	; 0
 9c2:	f2 1f       	adc	r31, r18
        LDI   R16                , TASK_CONS_LAT          ;save as cons_lat       (  1 clock ) 
 9c4:	04 e0       	ldi	r16, 0x04	; 4
		STD   Z+0                , R16                    ;save block flag        (  2 clocks) 
 9c6:	00 83       	st	Z, r16
		SEI                                               ;enable interrupt       (  1 clock ) 
 9c8:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
 9ca:	08 95       	ret

000009cc <Kernel_Task_Constant_Latency_Sleep>:
;arg registers           : R25:R24(SleepTime)                                                  
;return registers        : None                                                                
;unsafe access registers : R16, R24, R25, R30(ZL), R31(ZH)                                     
Kernel_Task_Constant_Latency_Sleep:                       ;total 35.5uS @8MHz     ( 26 clocks) 
		;save current context                                                                  
        KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
 9cc:	0f 92       	push	r0
 9ce:	0f b6       	in	r0, 0x3f	; 63
 9d0:	f8 94       	cli
 9d2:	0f 92       	push	r0
 9d4:	1f 92       	push	r1
 9d6:	11 24       	eor	r1, r1
 9d8:	2f 92       	push	r2
 9da:	3f 92       	push	r3
 9dc:	4f 92       	push	r4
 9de:	5f 92       	push	r5
 9e0:	6f 92       	push	r6
 9e2:	7f 92       	push	r7
 9e4:	8f 92       	push	r8
 9e6:	9f 92       	push	r9
 9e8:	af 92       	push	r10
 9ea:	bf 92       	push	r11
 9ec:	cf 92       	push	r12
 9ee:	df 92       	push	r13
 9f0:	ef 92       	push	r14
 9f2:	ff 92       	push	r15
 9f4:	0f 93       	push	r16
 9f6:	1f 93       	push	r17
 9f8:	2f 93       	push	r18
 9fa:	3f 93       	push	r19
 9fc:	4f 93       	push	r20
 9fe:	5f 93       	push	r21
 a00:	6f 93       	push	r22
 a02:	7f 93       	push	r23
 a04:	8f 93       	push	r24
 a06:	9f 93       	push	r25
 a08:	af 93       	push	r26
 a0a:	bf 93       	push	r27
 a0c:	cf 93       	push	r28
 a0e:	df 93       	push	r29
 a10:	ef 93       	push	r30
 a12:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 a14:	ee e0       	ldi	r30, 0x0E	; 14
 a16:	f1 e0       	ldi	r31, 0x01	; 1
 a18:	20 91 07 01 	lds	r18, 0x0107
 a1c:	22 0f       	add	r18, r18
 a1e:	e2 0f       	add	r30, r18
 a20:	20 e0       	ldi	r18, 0x00	; 0
 a22:	f2 1f       	adc	r31, r18
 a24:	2d b7       	in	r18, 0x3d	; 61
 a26:	3e b7       	in	r19, 0x3e	; 62
 a28:	20 83       	st	Z, r18
 a2a:	31 83       	std	Z+1, r19	; 0x01
		;update task scheduler status as blocked                                               
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 a2c:	e0 e3       	ldi	r30, 0x30	; 48
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 a2e:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
 a30:	20 91 07 01 	lds	r18, 0x0107
 a34:	e2 0f       	add	r30, r18
 a36:	20 e0       	ldi	r18, 0x00	; 0
 a38:	f2 1f       	adc	r31, r18
        LDI   R16                , TASK_BLOCKED           ;blocked until cnt=0    (  1 clock ) 
 a3a:	00 e0       	ldi	r16, 0x00	; 0
		STD   Z+0                , R16                    ;save block flag        (  2 clocks) 
 a3c:	00 83       	st	Z, r16
		;run scheduler, load next task sp, restore context                                     
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 a3e:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
 a40:	2f ef       	ldi	r18, 0xFF	; 255
 a42:	20 93 09 01 	sts	0x0109, r18
 a46:	20 e0       	ldi	r18, 0x00	; 0
 a48:	20 93 0a 01 	sts	0x010A, r18
 a4c:	f8 2e       	mov	r15, r24

00000a4e <_KER_SCH_LOOP71>:
 a4e:	20 93 07 01 	sts	0x0107, r18
 a52:	8f 2d       	mov	r24, r15
 a54:	e4 e4       	ldi	r30, 0x44	; 68
 a56:	f1 e0       	ldi	r31, 0x01	; 1
 a58:	20 91 07 01 	lds	r18, 0x0107
 a5c:	22 0f       	add	r18, r18
 a5e:	e2 0f       	add	r30, r18
 a60:	20 e0       	ldi	r18, 0x00	; 0
 a62:	f2 1f       	adc	r31, r18
 a64:	20 81       	ld	r18, Z
 a66:	31 81       	ldd	r19, Z+1	; 0x01
 a68:	42 2f       	mov	r20, r18
 a6a:	43 2b       	or	r20, r19
 a6c:	59 f0       	breq	.+22     	; 0xa84 <_VAL_NULL72>
 a6e:	81 30       	cpi	r24, 0x01	; 1
 a70:	99 f0       	breq	.+38     	; 0xa98 <_VAL_NOT_NULL72>
 a72:	41 e0       	ldi	r20, 0x01	; 1
 a74:	24 1b       	sub	r18, r20
 a76:	40 e0       	ldi	r20, 0x00	; 0
 a78:	34 0b       	sbc	r19, r20
 a7a:	20 83       	st	Z, r18
 a7c:	31 83       	std	Z+1, r19	; 0x01
 a7e:	42 2f       	mov	r20, r18
 a80:	43 2b       	or	r20, r19
 a82:	51 f4       	brne	.+20     	; 0xa98 <_VAL_NOT_NULL72>

00000a84 <_VAL_NULL72>:
 a84:	e0 e3       	ldi	r30, 0x30	; 48
 a86:	f1 e0       	ldi	r31, 0x01	; 1
 a88:	20 91 07 01 	lds	r18, 0x0107
 a8c:	e2 0f       	add	r30, r18
 a8e:	20 e0       	ldi	r18, 0x00	; 0
 a90:	f2 1f       	adc	r31, r18
 a92:	81 e0       	ldi	r24, 0x01	; 1
 a94:	80 83       	st	Z, r24
 a96:	08 c0       	rjmp	.+16     	; 0xaa8 <_EXIT_SLP_TIME72>

00000a98 <_VAL_NOT_NULL72>:
 a98:	e0 e3       	ldi	r30, 0x30	; 48
 a9a:	f1 e0       	ldi	r31, 0x01	; 1
 a9c:	20 91 07 01 	lds	r18, 0x0107
 aa0:	e2 0f       	add	r30, r18
 aa2:	20 e0       	ldi	r18, 0x00	; 0
 aa4:	f2 1f       	adc	r31, r18
 aa6:	80 81       	ld	r24, Z

00000aa8 <_EXIT_SLP_TIME72>:
 aa8:	81 30       	cpi	r24, 0x01	; 1
 aaa:	19 f0       	breq	.+6      	; 0xab2 <_KER_CALC_PRIO71>
 aac:	84 30       	cpi	r24, 0x04	; 4
 aae:	09 f0       	breq	.+2      	; 0xab2 <_KER_CALC_PRIO71>
 ab0:	12 c0       	rjmp	.+36     	; 0xad6 <_KER_SCH_NEXT71>

00000ab2 <_KER_CALC_PRIO71>:
 ab2:	ea e3       	ldi	r30, 0x3A	; 58
 ab4:	f1 e0       	ldi	r31, 0x01	; 1
 ab6:	20 e0       	ldi	r18, 0x00	; 0
 ab8:	80 91 07 01 	lds	r24, 0x0107
 abc:	e8 0f       	add	r30, r24
 abe:	f2 1f       	adc	r31, r18
 ac0:	80 81       	ld	r24, Z
 ac2:	20 91 09 01 	lds	r18, 0x0109
 ac6:	82 17       	cp	r24, r18
 ac8:	30 f4       	brcc	.+12     	; 0xad6 <_KER_SCH_NEXT71>
 aca:	80 93 09 01 	sts	0x0109, r24
 ace:	20 91 07 01 	lds	r18, 0x0107
 ad2:	20 93 0a 01 	sts	0x010A, r18

00000ad6 <_KER_SCH_NEXT71>:
 ad6:	20 91 07 01 	lds	r18, 0x0107
 ada:	23 95       	inc	r18
 adc:	30 91 08 01 	lds	r19, 0x0108
 ae0:	23 17       	cp	r18, r19
 ae2:	08 f4       	brcc	.+2      	; 0xae6 <_KER_SCH_EXIT71>
 ae4:	b4 cf       	rjmp	.-152    	; 0xa4e <_KER_SCH_LOOP71>

00000ae6 <_KER_SCH_EXIT71>:
 ae6:	20 91 0a 01 	lds	r18, 0x010A
 aea:	20 93 07 01 	sts	0x0107, r18
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 aee:	ee e0       	ldi	r30, 0x0E	; 14
 af0:	f1 e0       	ldi	r31, 0x01	; 1
 af2:	20 91 07 01 	lds	r18, 0x0107
 af6:	22 0f       	add	r18, r18
 af8:	e2 0f       	add	r30, r18
 afa:	20 e0       	ldi	r18, 0x00	; 0
 afc:	f2 1f       	adc	r31, r18
 afe:	20 81       	ld	r18, Z
 b00:	31 81       	ldd	r19, Z+1	; 0x01
 b02:	2d bf       	out	0x3d, r18	; 61
 b04:	3e bf       	out	0x3e, r19	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 b06:	ff 91       	pop	r31
 b08:	ef 91       	pop	r30
 b0a:	df 91       	pop	r29
 b0c:	cf 91       	pop	r28
 b0e:	bf 91       	pop	r27
 b10:	af 91       	pop	r26
 b12:	9f 91       	pop	r25
 b14:	8f 91       	pop	r24
 b16:	7f 91       	pop	r23
 b18:	6f 91       	pop	r22
 b1a:	5f 91       	pop	r21
 b1c:	4f 91       	pop	r20
 b1e:	3f 91       	pop	r19
 b20:	2f 91       	pop	r18
 b22:	1f 91       	pop	r17
 b24:	0f 91       	pop	r16
 b26:	ff 90       	pop	r15
 b28:	ef 90       	pop	r14
 b2a:	df 90       	pop	r13
 b2c:	cf 90       	pop	r12
 b2e:	bf 90       	pop	r11
 b30:	af 90       	pop	r10
 b32:	9f 90       	pop	r9
 b34:	8f 90       	pop	r8
 b36:	7f 90       	pop	r7
 b38:	6f 90       	pop	r6
 b3a:	5f 90       	pop	r5
 b3c:	4f 90       	pop	r4
 b3e:	3f 90       	pop	r3
 b40:	2f 90       	pop	r2
 b42:	1f 90       	pop	r1
 b44:	0f 90       	pop	r0
 b46:	0f be       	out	0x3f, r0	; 63
 b48:	0f 90       	pop	r0
 b4a:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
 b4c:	08 95       	ret

00000b4e <Kernel_Task_Sleep_Time_Get>:
;used registers          : R16, R24, R25, R30(ZL), R31(ZH)                                     
;arg registers           : R24(TaskID)                                                         
;return registers        : R25:R24(SleepTime)                                                  
;unsafe access registers : R16, R24, R25, R30(ZL), R31(ZH)                                     
Kernel_Task_Sleep_Time_Get:                               ;total 1.88uS @8MHz     ( 15 clocks) 
		MOV   R16                , R24                    ;copy                   (  1 clock ) 
 b4e:	08 2f       	mov	r16, r24
		LSL   R16                                         ;x2                     (  1 clock ) 
 b50:	00 0f       	add	r16, r16
		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 b52:	e4 e4       	ldi	r30, 0x44	; 68
		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 b54:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
 b56:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 b58:	00 e0       	ldi	r16, 0x00	; 0
		ADC   ZH                 , R16                    ;add high byte+carry    (  1 clock ) 
 b5a:	f0 1f       	adc	r31, r16
		LDD   R24                , Z+0                    ;load sleep time        (  2 clocks) 
 b5c:	80 81       	ld	r24, Z
		LDD   R25                , Z+1                    ;load sleep time        (  2 clocks) 
 b5e:	91 81       	ldd	r25, Z+1	; 0x01
		RET                                               ;return from subroutine (  4 clocks) 
 b60:	08 95       	ret

00000b62 <Kernel_Task_Status_Get>:
;used registers          : R16, R24, R30(ZL), R31(ZH)                                          
;arg registers           : R24(TaskID)                                                         
;return registers        : R24(TaskSts)                                                        
;unsafe access registers : R16, R24, R30(ZL), R31(ZH)                                          
Kernel_Task_Status_Get:                                   ;total 1.50uS @8MHz     ( 12 clocks) 
		MOV   R16                , R24                    ;copy                   (  1 clock ) 
 b62:	08 2f       	mov	r16, r24
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 b64:	e0 e3       	ldi	r30, 0x30	; 48
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 b66:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
 b68:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 b6a:	00 e0       	ldi	r16, 0x00	; 0
		ADC   ZH                 , R16                    ;add high byte+carry    (  1 clock ) 
 b6c:	f0 1f       	adc	r31, r16
		LD    R24                , Z                      ;load task status       (  2 clocks) 
 b6e:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 b70:	08 95       	ret

00000b72 <Kernel_NTask_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(NTask)                                                          
;unsafe access registers : R24                                                                 
Kernel_NTask_Get:                                         ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                 , KerBase+OFB_NTSK      ;load ntask             (  2 clock ) 
 b72:	80 91 08 01 	lds	r24, 0x0108
		RET                                               ;return from subroutine (  4 clocks) 
 b76:	08 95       	ret

00000b78 <Kernel_Task_Prio_Get>:
;arg registers           : R24(TaskID)                                                         
;return registers        : R24(TaskPriority)                                                   
;unsafe access registers : R16, R24, R30(ZL), R31(ZH)                                          
Kernel_Task_Prio_Get:                                     ;total 1.50uS @8MHz     ( 12 clocks) 
		;get priority of the task id, arg (task_id->R24), return R24                           
		MOV   R16                , R24                    ;copy task_id           (  1 clock ) 
 b78:	08 2f       	mov	r16, r24
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 b7a:	ea e3       	ldi	r30, 0x3A	; 58
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 b7c:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
 b7e:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;clear reg              (  1 clock ) 
 b80:	00 e0       	ldi	r16, 0x00	; 0
		ADC   ZH                 , R16                    ;add high byte+carry    (  1 clock ) 
 b82:	f0 1f       	adc	r31, r16
		LD    R24                , Z                      ;load priority          (  2 clocks) 
 b84:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 b86:	08 95       	ret

00000b88 <Kernel_Lowest_Prio_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(LowestPriorityVal)                                              
;unsafe access registers : R24                                                                 
Kernel_Lowest_Prio_Get:                                   ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
 b88:	80 91 09 01 	lds	r24, 0x0109
		RET                                               ;return from subroutine (  4 clocks) 
 b8c:	08 95       	ret

00000b8e <Kernel_High_Prio_Task_ID_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(HighstPriorityTaskID)->UserTaskID (Excluding Idle Task)         
;unsafe access registers : R24                                                                 
Kernel_High_Prio_Task_ID_Get:                             ;total 0.88uS @8MHz     (  7 clocks) 
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 b8e:	80 91 0a 01 	lds	r24, 0x010A
		DEC   R24                                         ;decrement by 1         (  1 clock ) 
 b92:	8a 95       	dec	r24
		RET                                               ;return from subroutine (  4 clocks) 
 b94:	08 95       	ret

00000b96 <Kernel_Abs_High_Prio_Task_ID_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(HighstPriorityTaskID)->AbsoluteTaskID (Including Idle Task)     
;unsafe access registers : R24                                                                 
Kernel_Abs_High_Prio_Task_ID_Get:                         ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 b96:	80 91 0a 01 	lds	r24, 0x010A
		RET                                               ;return from subroutine (  4 clocks) 
 b9a:	08 95       	ret

00000b9c <Kernel_CPU_Usage_Get>:
;arg registers           : None                                                                
;return registers        : R24(CurrentCpuUsage)->In percentage                                 
;unsafe access registers : R24                                                                 
Kernel_CPU_Usage_Get:                                     ;total 0.75uS @8MHz     (  6 clocks) 
		;get cpu usage, return R24                                                             
		LDS   R24                , KerBase+OFB_USAGE      ;load cpu usage         (  2 clocks) 
 b9c:	80 91 0d 01 	lds	r24, 0x010D
		RET                                               ;return from subroutine (  4 clocks) 
 ba0:	08 95       	ret

00000ba2 <Debug_Init>:


;;===================================debug init starting====================================;; 
Debug_Init:                                               ;total 2.38uS @8MHz     ( 19 clocks) 
        ;init registers for UART0 (Arg R25:R24->UBRRH:UBRRL)                                   
		LDI   R16                , (1<<1)                 ;mask U2x               (  1 clock ) 
 ba2:	02 e0       	ldi	r16, 0x02	; 2
		STS   SRUCSR0A           , R16                    ;load val to UCSR0A     (  2 clocks) 
 ba4:	00 93 c0 00 	sts	0x00C0, r16
		MOV   R16                , R25                    ;copy R25->baud rate H  (  1 clock ) 
 ba8:	09 2f       	mov	r16, r25
		STS   SRUBRR0H           , R16                    ;load val to UBRR0H     (  2 clocks) 
 baa:	00 93 c5 00 	sts	0x00C5, r16
		MOV   R16                , R24                    ;copy R24->baud rate L  (  1 clock ) 
 bae:	08 2f       	mov	r16, r24
		STS   SRUBRR0L           , R16                    ;load val to UBRR0L     (  2 clocks) 
 bb0:	00 93 c4 00 	sts	0x00C4, r16
		LDI   R16                , (1<<1)|(1<<2)          ;config 8 data bit      (  1 clock ) 
 bb4:	06 e0       	ldi	r16, 0x06	; 6
		STS   SRUCSR0C           , R16                    ;load val to UCSR0C     (  2 clocks) 
 bb6:	00 93 c2 00 	sts	0x00C2, r16
		LDI   R16                , (1<<3)                 ;enable tx              (  1 clock ) 
 bba:	08 e0       	ldi	r16, 0x08	; 8
		STS   SRUCSR0B           , R16                    ;load val to UCSR0B     (  2 clocks) 
 bbc:	00 93 c1 00 	sts	0x00C1, r16
        RET                                               ;return from subroutine (  4 clocks) 
 bc0:	08 95       	ret

00000bc2 <Debug_Tx_Byte>:


;;====================================debug tx starting=====================================;; 
Debug_Tx_Byte:                                            ;total 2.00uS+LT @8MHz  ( 16 clocks) 
		;write single byte to data register (Arg R24)                                          
		PUSH  R16                                         ;save reg               (  2 clocks) 
 bc2:	0f 93       	push	r16
		STS   SRUDR0             , R24                    ;load val to UDR0       (  2 clocks) 
 bc4:	80 93 c6 00 	sts	0x00C6, r24

00000bc8 <__UDRE0_CLEARED>:
                                                                                               
    __UDRE0_CLEARED:                                      ;undefined loop wrt ck               
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16     (  2 clocks) 
 bc8:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x05                   ;skip if UDRE0 is set   (  2 clocks) 
 bcc:	05 ff       	sbrs	r16, 5
		RJMP  __UDRE0_CLEARED                             ;wait until UDRE0 is set(  2 clocks) 
 bce:	fc cf       	rjmp	.-8      	; 0xbc8 <__UDRE0_CLEARED>
		POP   R16                                         ;restore reg            (  2 clocks) 
 bd0:	0f 91       	pop	r16
        RET                                               ;return from subroutine (  4 clocks) 
 bd2:	08 95       	ret

00000bd4 <Debug_Tx_Word>:


;;==================================debug tx word starting==================================;; 
Debug_Tx_Word:                                            ;total 2.00uS+LT @8MHz  ( 16 clocks) 
		;write 2 bytes, (Arg R24, R25), Args retained                                          
		PUSH  R24                                         ;save reg               (  2 clocks) 
 bd4:	8f 93       	push	r24
		MOV   R24                , R25                    ;copy reg               (  1 clock ) 
 bd6:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte                               ;send via uart          ( 21 clocks) 
 bd8:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Debug_Tx_Byte>
        POP   R24                                         ;restore reg            (  2 clocks) 
 bdc:	8f 91       	pop	r24
		CALL  Debug_Tx_Byte                               ;send via uart          ( 21 clocks) 
 bde:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Debug_Tx_Byte>
        RET                                               ;return from subroutine (  4 clocks) 
 be2:	08 95       	ret

00000be4 <Debug_Tx_Byte_Conf>:


;;================================debug tx confirm starting=================================;; 
Debug_Tx_Byte_Conf:                                       ;total 2.63uS+LT @8MHz  ( 21 clocks) 
        ;write 1 byte, (Arg R24), Args retained                                                
		PUSH  R16                                         ;save reg               (  2 clocks) 
 be4:	0f 93       	push	r16
		STS   SRUDR0             , R24                    ;load val to UDR0,      (  2 clocks) 
 be6:	80 93 c6 00 	sts	0x00C6, r24

00000bea <__TXC0_CLEARED>:
    __TXC0_CLEARED:                                                                            
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,    (  2 clocks) 
 bea:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x06                   ;skip if TXC0 is set,   (  2 clocks) 
 bee:	06 ff       	sbrs	r16, 6
		RJMP  __TXC0_CLEARED                              ;wait until TXC0 is set (  2 clocks) 
 bf0:	fc cf       	rjmp	.-8      	; 0xbea <__TXC0_CLEARED>
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,    (  2 clocks) 
 bf2:	00 91 c0 00 	lds	r16, 0x00C0
		ORI   R16                , (1<<6)                 ;mask bit 6,            (  1 clock ) 
 bf6:	00 64       	ori	r16, 0x40	; 64
		STS   SRUCSR0A           , R16                    ;write reg with bit msk (  2 clocks) 
 bf8:	00 93 c0 00 	sts	0x00C0, r16
		POP   R16                                         ;restore reg            (  2 clocks) 
 bfc:	0f 91       	pop	r16
        RET                                               ;return from subroutine (  4 clocks) 
 bfe:	08 95       	ret

00000c00 <Debug_Tx_Word_Conf>:


;;==============================debug tx word confirm starting==============================;; 
Debug_Tx_Word_Conf:                                       ;total 6.38uS+LT @8MHz  ( 51 clocks) 
        ;write 2 bytes, (Arg R24, R25), Args retained                                          
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 c00:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <Debug_Tx_Byte_Conf>
		PUSH  R24                                         ;save reg               (  2 clocks) 
 c04:	8f 93       	push	r24
		MOV   R24                , R25                    ;copy R25 to R24        (  1 clock ) 
 c06:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 c08:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <Debug_Tx_Byte_Conf>
		POP   R24                                         ;restore reg            (  2 clocks) 
 c0c:	8f 91       	pop	r24
        RET                                               ;return from subroutine (  4 clocks) 
 c0e:	08 95       	ret

00000c10 <Debug_Tx_DWord_Conf>:


;;==============================debug tx dword confirm starting=============================;; 
Debug_Tx_DWord_Conf:                                      ;total 12.38uS+LT @8MHz ( 99 clocks) 
        ;write 4 bytes, (Arg R22-R25), Args retained                                           
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks) 
 c10:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R22                    ;copy R22 to R24          (1 clock ) 
 c14:	86 2f       	mov	r24, r22
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 c16:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <Debug_Tx_Byte_Conf>
		MOV   R24                , R23                    ;copy R23 to R24          (1 clock ) 
 c1a:	87 2f       	mov	r24, r23
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 c1c:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24              (2 clocks) 
 c20:	80 91 4a 00 	lds	r24, 0x004A
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 c24:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <Debug_Tx_Byte_Conf>
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks) 
 c28:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R25                    ;copy R22 to R24          (1 clock ) 
 c2c:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 c2e:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24 val,         (2 clocks) 
 c32:	80 91 4a 00 	lds	r24, 0x004A
        RET                                               ;return from subroutine,  (4 clocks) 
 c36:	08 95       	ret

00000c38 <Debug_Tx_From_RAM>:


;;=============================debug tx confirm from ram starting===========================;; 
Debug_Tx_From_RAM:                                        ;total 4.38uS+LT @8MHz  ( 35 clocks) 
        ;print data from RAM address (Arg R24-R25)                                             
		MOV   R16                , R30                    ;copy R30 to R16          (1 clock ) 
 c38:	0e 2f       	mov	r16, r30
		MOV   R17                , R31                    ;copy R31 to R17          (1 clock ) 
 c3a:	1f 2f       	mov	r17, r31
		MOV   R18                , R24                    ;copy R24 to R18          (1 clock ) 
 c3c:	28 2f       	mov	r18, r24
		MOV   R30                , R24                    ;copy R22 to R24          (1 clock ) 
 c3e:	e8 2f       	mov	r30, r24
		MOV   R31                , R25                    ;copy R22 to R24          (1 clock ) 
 c40:	f9 2f       	mov	r31, r25
		LD    R24                , Z                      ;load val to R24          (2 clocks) 
 c42:	80 81       	ld	r24, Z
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 c44:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <Debug_Tx_Byte_Conf>
		MOV   R30                , R16                    ;copy R16 to R30          (1 clock ) 
 c48:	e0 2f       	mov	r30, r16
		MOV   R31                , R17                    ;copy R17 to R31          (1 clock ) 
 c4a:	f1 2f       	mov	r31, r17
		MOV   R24                , R18                    ;copy R18 to R24          (1 clock ) 
 c4c:	82 2f       	mov	r24, r18
        RET                                               ;return from subroutine,  (4 clocks) 
 c4e:	08 95       	ret

00000c50 <Debug_Tx_RAM_Area>:

;;=============================debug tx confirm ram area starting===========================;; 
Debug_Tx_RAM_Area:                                        ;5.5uS+LT x R22 @8MHz   ( 44 clocks) 
        ;print data from RAM address (arguments R24:R25, R22)                                  
	__DUMP_BYTES:                                                                              
	    CALL  Debug_Tx_From_RAM                           ;send via uart from ram              
 c50:	0e 94 1c 06 	call	0xc38	; 0xc38 <Debug_Tx_From_RAM>
		SUBI  R24                , 0x01                   ;decrement from LSByte               
 c54:	81 50       	subi	r24, 0x01	; 1
        SBCI  R25                , 0x00                   ;decrement if carry                  
 c56:	90 40       	sbci	r25, 0x00	; 0
		SUBI  R22                , 0x01                   ;decrement                           
 c58:	61 50       	subi	r22, 0x01	; 1
		BRNE  __DUMP_BYTES                                                                     
 c5a:	d1 f7       	brne	.-12     	; 0xc50 <Debug_Tx_RAM_Area>
        RET                                               ;return from subroutine,  (4 clocks) 
 c5c:	08 95       	ret

00000c5e <_exit>:
 c5e:	f8 94       	cli

00000c60 <__stop_program>:
 c60:	ff cf       	rjmp	.-2      	; 0xc60 <__stop_program>
