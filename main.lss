
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000720  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000546  00800100  00800100  00000794  2**0
                  ALLOC
  2 .stab         00000de0  00000000  00000000  00000794  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000006d  00000000  00000000  00001574  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  000015e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000bd  00000000  00000000  00001621  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000021f  00000000  00000000  000016de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000b1  00000000  00000000  000018fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000025a  00000000  00000000  000019ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001c08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000117  00000000  00000000  00001cc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__vector_16>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	00 00       	nop
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 00       	nop
  76:	00 00       	nop
  78:	00 00       	nop
  7a:	00 00       	nop
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 00       	nop
  82:	00 00       	nop
  84:	00 00       	nop
  86:	00 00       	nop
  88:	ab c0       	rjmp	.+342    	; 0x1e0 <__vector_16>

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61
  96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  9a:	0c 94 8e 03 	jmp	0x71c	; 0x71c <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:
 


int main(void) {
    
	Kernel_Init();
  a2:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Kernel_Init>
	
	Kernel_Task_Create(Tasks_Task0,  4);
  a6:	83 ee       	ldi	r24, 0xE3	; 227
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	64 e0       	ldi	r22, 0x04	; 4
  ac:	0e 94 df 01 	call	0x3be	; 0x3be <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task1,  0);
  b0:	80 ed       	ldi	r24, 0xD0	; 208
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	0e 94 df 01 	call	0x3be	; 0x3be <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task2,  1);
  ba:	8d eb       	ldi	r24, 0xBD	; 189
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	61 e0       	ldi	r22, 0x01	; 1
  c0:	0e 94 df 01 	call	0x3be	; 0x3be <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task3,  2);
  c4:	80 eb       	ldi	r24, 0xB0	; 176
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	62 e0       	ldi	r22, 0x02	; 2
  ca:	0e 94 df 01 	call	0x3be	; 0x3be <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task4,  3);
  ce:	83 ea       	ldi	r24, 0xA3	; 163
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	63 e0       	ldi	r22, 0x03	; 3
  d4:	0e 94 df 01 	call	0x3be	; 0x3be <Kernel_Task_Create>
	Debug_Tx_Byte_Conf(Kernel_Task_Prio_Get(3));
	Debug_Tx_Byte_Conf(Kernel_Task_Prio_Get(4));
	Debug_Tx_Byte_Conf(Kernel_Task_Prio_Get(5));
    */

	Kernel_Start_Tasks();
  d8:	0e 94 36 02 	call	0x46c	; 0x46c <Kernel_Start_Tasks>
  dc:	ff cf       	rjmp	.-2      	; 0xdc <SRUDR0+0x16>

000000de <Tasks_Task8>:
  }
}

void Tasks_Task8(void){
  
  Debug_Init(0);
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 2c 03 	call	0x658	; 0x658 <Debug_Init>
  uint16_t val = 240;
  
  while(1){
    
	  Debug_Tx_Byte_Conf(8);
  e6:	88 e0       	ldi	r24, 0x08	; 8
  e8:	0e 94 45 03 	call	0x68a	; 0x68a <Debug_Tx_Byte_Conf>
	  //Debug_Tx_Word_Conf(val--);
    Debug_Tx_Byte_Conf(0x10+Kernel_High_Prio_Task_ID_Get());
  ec:	0e 94 25 03 	call	0x64a	; 0x64a <Kernel_High_Prio_Task_ID_Get>
  f0:	80 5f       	subi	r24, 0xF0	; 240
  f2:	0e 94 45 03 	call	0x68a	; 0x68a <Debug_Tx_Byte_Conf>
  f6:	f7 cf       	rjmp	.-18     	; 0xe6 <Tasks_Task8+0x8>

000000f8 <Tasks_Task7>:
  }
}

void Tasks_Task7(void){
  
  Debug_Init(0);
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 2c 03 	call	0x658	; 0x658 <Debug_Init>
  uint16_t val = 220;
  
  while(1){
    
	  Debug_Tx_Byte_Conf(7);
 100:	87 e0       	ldi	r24, 0x07	; 7
 102:	0e 94 45 03 	call	0x68a	; 0x68a <Debug_Tx_Byte_Conf>
	  //Debug_Tx_Word_Conf(val--);
    Debug_Tx_Byte_Conf(0x10+Kernel_High_Prio_Task_ID_Get());
 106:	0e 94 25 03 	call	0x64a	; 0x64a <Kernel_High_Prio_Task_ID_Get>
 10a:	80 5f       	subi	r24, 0xF0	; 240
 10c:	0e 94 45 03 	call	0x68a	; 0x68a <Debug_Tx_Byte_Conf>
 110:	f7 cf       	rjmp	.-18     	; 0x100 <Tasks_Task7+0x8>

00000112 <Tasks_Task6>:
  }
}

void Tasks_Task6(void){
  
  Debug_Init(0);
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 2c 03 	call	0x658	; 0x658 <Debug_Init>
  uint16_t val = 200;
  
  while(1){
    
	  Debug_Tx_Byte_Conf(6);
 11a:	86 e0       	ldi	r24, 0x06	; 6
 11c:	0e 94 45 03 	call	0x68a	; 0x68a <Debug_Tx_Byte_Conf>
	  //Debug_Tx_Word_Conf(val--);
    Debug_Tx_Byte_Conf(0x10+Kernel_High_Prio_Task_ID_Get());
 120:	0e 94 25 03 	call	0x64a	; 0x64a <Kernel_High_Prio_Task_ID_Get>
 124:	80 5f       	subi	r24, 0xF0	; 240
 126:	0e 94 45 03 	call	0x68a	; 0x68a <Debug_Tx_Byte_Conf>
 12a:	f7 cf       	rjmp	.-18     	; 0x11a <Tasks_Task6+0x8>

0000012c <Tasks_Task5>:
  }
}

void Tasks_Task5(void){
  
  Debug_Init(0);
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 2c 03 	call	0x658	; 0x658 <Debug_Init>
  uint16_t val = 180;
  
  while(1){
    
    Debug_Tx_Byte_Conf(5);
 134:	85 e0       	ldi	r24, 0x05	; 5
 136:	0e 94 45 03 	call	0x68a	; 0x68a <Debug_Tx_Byte_Conf>
	  //Debug_Tx_Word_Conf(val--);
    Debug_Tx_Byte_Conf(0x10+Kernel_High_Prio_Task_ID_Get());
 13a:	0e 94 25 03 	call	0x64a	; 0x64a <Kernel_High_Prio_Task_ID_Get>
 13e:	80 5f       	subi	r24, 0xF0	; 240
 140:	0e 94 45 03 	call	0x68a	; 0x68a <Debug_Tx_Byte_Conf>
 144:	f7 cf       	rjmp	.-18     	; 0x134 <Tasks_Task5+0x8>

00000146 <Tasks_Task4>:
  }
}

void Tasks_Task4(void){
  
  Debug_Init(0);
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 2c 03 	call	0x658	; 0x658 <Debug_Init>
  uint16_t val = 160;
  
  while(1){
    
	
	  Debug_Tx_Byte_Conf(4);
 14e:	84 e0       	ldi	r24, 0x04	; 4
 150:	0e 94 45 03 	call	0x68a	; 0x68a <Debug_Tx_Byte_Conf>
	  //Debug_Tx_Word_Conf(val--);
    Debug_Tx_Byte_Conf(0x10+Kernel_High_Prio_Task_ID_Get());
 154:	0e 94 25 03 	call	0x64a	; 0x64a <Kernel_High_Prio_Task_ID_Get>
 158:	80 5f       	subi	r24, 0xF0	; 240
 15a:	0e 94 45 03 	call	0x68a	; 0x68a <Debug_Tx_Byte_Conf>
 15e:	f7 cf       	rjmp	.-18     	; 0x14e <Tasks_Task4+0x8>

00000160 <Tasks_Task3>:
  }
}

void Tasks_Task3(void){
  
  Debug_Init(0);
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 2c 03 	call	0x658	; 0x658 <Debug_Init>
  uint16_t val = 140;
  
  while(1){
    
	  Debug_Tx_Byte_Conf(3);
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	0e 94 45 03 	call	0x68a	; 0x68a <Debug_Tx_Byte_Conf>
	  //Debug_Tx_Word_Conf(val--);
    Debug_Tx_Byte_Conf(0x10+Kernel_High_Prio_Task_ID_Get());
 16e:	0e 94 25 03 	call	0x64a	; 0x64a <Kernel_High_Prio_Task_ID_Get>
 172:	80 5f       	subi	r24, 0xF0	; 240
 174:	0e 94 45 03 	call	0x68a	; 0x68a <Debug_Tx_Byte_Conf>
 178:	f7 cf       	rjmp	.-18     	; 0x168 <Tasks_Task3+0x8>

0000017a <Tasks_Task2>:
	  //Kernel_Task_Sleep(5);
	
  }
}

void Tasks_Task2(void){
 17a:	1f 93       	push	r17
  
  Debug_Init(0);
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 2c 03 	call	0x658	; 0x658 <Debug_Init>
  DDRD |= (1<<6);
 184:	56 9a       	sbi	0x0a, 6	; 10
  uint16_t val = 120;
  
  while(1){
    
    PORTD ^= (1<<6);
 186:	10 e4       	ldi	r17, 0x40	; 64
 188:	8b b1       	in	r24, 0x0b	; 11
 18a:	81 27       	eor	r24, r17
 18c:	8b b9       	out	0x0b, r24	; 11
	  Debug_Tx_Byte_Conf(2);
 18e:	82 e0       	ldi	r24, 0x02	; 2
 190:	0e 94 45 03 	call	0x68a	; 0x68a <Debug_Tx_Byte_Conf>
    //Debug_Tx_Word_Conf(val--);
    Debug_Tx_Byte_Conf(0x10+Kernel_High_Prio_Task_ID_Get());
 194:	0e 94 25 03 	call	0x64a	; 0x64a <Kernel_High_Prio_Task_ID_Get>
 198:	80 5f       	subi	r24, 0xF0	; 240
 19a:	0e 94 45 03 	call	0x68a	; 0x68a <Debug_Tx_Byte_Conf>
 19e:	f4 cf       	rjmp	.-24     	; 0x188 <Tasks_Task2+0xe>

000001a0 <Tasks_Task1>:
	  //Kernel_Task_Sleep(2);
	
  }
}

void Tasks_Task1(void){
 1a0:	1f 93       	push	r17
  
  Debug_Init(0);
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 2c 03 	call	0x658	; 0x658 <Debug_Init>
  DDRD |= (1<<5);
 1aa:	55 9a       	sbi	0x0a, 5	; 10
  uint16_t val = 100;
  
  while(1){
    
    PORTD ^= (1<<5);
 1ac:	10 e2       	ldi	r17, 0x20	; 32
 1ae:	8b b1       	in	r24, 0x0b	; 11
 1b0:	81 27       	eor	r24, r17
 1b2:	8b b9       	out	0x0b, r24	; 11
	  Debug_Tx_Byte_Conf(1);
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	0e 94 45 03 	call	0x68a	; 0x68a <Debug_Tx_Byte_Conf>
	  //Debug_Tx_Word_Conf(val--);
    Debug_Tx_Byte_Conf(0x10+Kernel_High_Prio_Task_ID_Get());
 1ba:	0e 94 25 03 	call	0x64a	; 0x64a <Kernel_High_Prio_Task_ID_Get>
 1be:	80 5f       	subi	r24, 0xF0	; 240
 1c0:	0e 94 45 03 	call	0x68a	; 0x68a <Debug_Tx_Byte_Conf>
 1c4:	f4 cf       	rjmp	.-24     	; 0x1ae <Tasks_Task1+0xe>

000001c6 <Tasks_Task0>:
#include "tasks.h"
#include "debug.h"

void Tasks_Task0(void){
  
  Debug_Init(0);
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 2c 03 	call	0x658	; 0x658 <Debug_Init>
  
  uint16_t val = 80;
  
  while(1){
    
	  Debug_Tx_Byte_Conf(0);
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	0e 94 45 03 	call	0x68a	; 0x68a <Debug_Tx_Byte_Conf>
	  //Debug_Tx_Word_Conf(val--);
    Debug_Tx_Byte_Conf(0x10+Kernel_High_Prio_Task_ID_Get());
 1d4:	0e 94 25 03 	call	0x64a	; 0x64a <Kernel_High_Prio_Task_ID_Get>
 1d8:	80 5f       	subi	r24, 0xF0	; 240
 1da:	0e 94 45 03 	call	0x68a	; 0x68a <Debug_Tx_Byte_Conf>
 1de:	f7 cf       	rjmp	.-18     	; 0x1ce <Tasks_Task0+0x8>

000001e0 <__vector_16>:


;;=================================ISR execution starting===================================;; 
.global  __vector_16
    __vector_16:                                          ;total 26.13uS @8MHz    (211 clocks) 
	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 1e0:	29 9a       	sbi	0x05, 1	; 5
        KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 1e2:	0f 92       	push	r0
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	0f 92       	push	r0
 1e8:	1f 92       	push	r1
 1ea:	11 24       	eor	r1, r1
 1ec:	2f 92       	push	r2
 1ee:	3f 92       	push	r3
 1f0:	4f 92       	push	r4
 1f2:	5f 92       	push	r5
 1f4:	6f 92       	push	r6
 1f6:	7f 92       	push	r7
 1f8:	8f 92       	push	r8
 1fa:	9f 92       	push	r9
 1fc:	af 92       	push	r10
 1fe:	bf 92       	push	r11
 200:	cf 92       	push	r12
 202:	df 92       	push	r13
 204:	ef 92       	push	r14
 206:	ff 92       	push	r15
 208:	0f 93       	push	r16
 20a:	1f 93       	push	r17
 20c:	2f 93       	push	r18
 20e:	3f 93       	push	r19
 210:	4f 93       	push	r20
 212:	5f 93       	push	r21
 214:	6f 93       	push	r22
 216:	7f 93       	push	r23
 218:	8f 93       	push	r24
 21a:	9f 93       	push	r25
 21c:	af 93       	push	r26
 21e:	bf 93       	push	r27
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	ef 93       	push	r30
 226:	ff 93       	push	r31
		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 228:	00 91 06 01 	lds	r16, 0x0106
 22c:	00 93 46 00 	sts	0x0046, r16
		KER_TICK_INCREMENT                                ;increment tick counter ( 27 clocks) 
 230:	00 91 00 01 	lds	r16, 0x0100
 234:	03 95       	inc	r16
 236:	00 93 00 01 	sts	0x0100, r16
 23a:	00 91 01 01 	lds	r16, 0x0101
 23e:	01 1d       	adc	r16, r1
 240:	00 93 01 01 	sts	0x0101, r16
 244:	00 91 02 01 	lds	r16, 0x0102
 248:	01 1d       	adc	r16, r1
 24a:	00 93 02 01 	sts	0x0102, r16
 24e:	00 91 03 01 	lds	r16, 0x0103
 252:	01 1d       	adc	r16, r1
 254:	00 93 03 01 	sts	0x0103, r16
 258:	00 91 04 01 	lds	r16, 0x0104
 25c:	01 1d       	adc	r16, r1
 25e:	00 93 04 01 	sts	0x0104, r16
        KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 262:	0d b7       	in	r16, 0x3d	; 61
 264:	1e b7       	in	r17, 0x3e	; 62
 266:	20 91 07 01 	lds	r18, 0x0107
 26a:	22 0f       	add	r18, r18
 26c:	ea e0       	ldi	r30, 0x0A	; 10
 26e:	f1 e0       	ldi	r31, 0x01	; 1
 270:	e2 0f       	add	r30, r18
 272:	f1 1d       	adc	r31, r1
 274:	01 93       	st	Z+, r16
 276:	10 83       	st	Z, r17
		
		;KER_DEC_SLP_TIMEOUT                               ;decrement of sleep time
		KER_LOAD_NEXT_TASK_ID
 278:	00 91 07 01 	lds	r16, 0x0107
 27c:	03 95       	inc	r16
 27e:	10 91 08 01 	lds	r17, 0x0108

00000282 <_MOD_CONT5>:
 282:	01 17       	cp	r16, r17
 284:	10 f0       	brcs	.+4      	; 0x28a <_MOD_DONE5>
 286:	01 1b       	sub	r16, r17
 288:	fc cf       	rjmp	.-8      	; 0x282 <_MOD_CONT5>

0000028a <_MOD_DONE5>:
 28a:	00 93 07 01 	sts	0x0107, r16
		;KER_RUN_SCHEDULER                                 ;run scheduler          ( 14 clocks) 
	    
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 28e:	00 91 07 01 	lds	r16, 0x0107
 292:	00 0f       	add	r16, r16
 294:	ea e0       	ldi	r30, 0x0A	; 10
 296:	f1 e0       	ldi	r31, 0x01	; 1
 298:	e0 0f       	add	r30, r16
 29a:	f1 1d       	adc	r31, r1
 29c:	01 91       	ld	r16, Z+
 29e:	10 81       	ld	r17, Z
 2a0:	0d bf       	out	0x3d, r16	; 61
 2a2:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 2a4:	ff 91       	pop	r31
 2a6:	ef 91       	pop	r30
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	bf 91       	pop	r27
 2ae:	af 91       	pop	r26
 2b0:	9f 91       	pop	r25
 2b2:	8f 91       	pop	r24
 2b4:	7f 91       	pop	r23
 2b6:	6f 91       	pop	r22
 2b8:	5f 91       	pop	r21
 2ba:	4f 91       	pop	r20
 2bc:	3f 91       	pop	r19
 2be:	2f 91       	pop	r18
 2c0:	1f 91       	pop	r17
 2c2:	0f 91       	pop	r16
 2c4:	ff 90       	pop	r15
 2c6:	ef 90       	pop	r14
 2c8:	df 90       	pop	r13
 2ca:	cf 90       	pop	r12
 2cc:	bf 90       	pop	r11
 2ce:	af 90       	pop	r10
 2d0:	9f 90       	pop	r9
 2d2:	8f 90       	pop	r8
 2d4:	7f 90       	pop	r7
 2d6:	6f 90       	pop	r6
 2d8:	5f 90       	pop	r5
 2da:	4f 90       	pop	r4
 2dc:	3f 90       	pop	r3
 2de:	2f 90       	pop	r2
 2e0:	1f 90       	pop	r1
 2e2:	0f 90       	pop	r0
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	0f 90       	pop	r0
	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 2e8:	29 98       	cbi	0x05, 1	; 5
		RETI                                              ;return from interrupt  (  4 clocks) 
 2ea:	18 95       	reti

000002ec <Kernel_SysTick_Reg_Init>:


;;================================SysTick reg init starting=================================;; 
Kernel_SysTick_Reg_Init:                                  ;total operation        ( 55 clocks) 
        ;arg1 -> prescaler R24, arg2 -> reload val R22
        CLI                                               ;disable global int,    (  1 clock )
 2ec:	f8 94       	cli
        PUSH  R30
 2ee:	ef 93       	push	r30
		PUSH  R31
 2f0:	ff 93       	push	r31
		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 2f2:	21 9a       	sbi	0x04, 1	; 4
 2f4:	29 98       	cbi	0x05, 1	; 5
		LDI   R16                , 0x00                   ;set 0x00 to R16,       (  1 clock ) 
 2f6:	00 e0       	ldi	r16, 0x00	; 0
		
		;clear tick counter
		STS   KerBase+OFF_TICK0  , R16                    ;clear  KerBase[0]      (  2 clocks) 
 2f8:	00 93 00 01 	sts	0x0100, r16
		STS   KerBase+OFF_TICK1  , R16                    ;clear  KerBase[1]      (  2 clocks) 
 2fc:	00 93 01 01 	sts	0x0101, r16
		STS   KerBase+OFF_TICK2  , R16                    ;clear  KerBase[2]      (  2 clocks) 
 300:	00 93 02 01 	sts	0x0102, r16
		STS   KerBase+OFF_TICK3  , R16                    ;clear  KerBase[3]      (  2 clocks) 
 304:	00 93 03 01 	sts	0x0103, r16
		STS   KerBase+OFF_TICK4  , R16                    ;clear  KerBase[4]      (  2 clocks) 
 308:	00 93 04 01 	sts	0x0104, r16
		
		;clear prescaler
		STS   KerBase+OFF_PRS    , R16                    ;clear  KerBase[5]      (  2 clocks) 
 30c:	00 93 05 01 	sts	0x0105, r16
		
		;clear reload value
		STS   KerBase+OFF_RLD    , R16                    ;clear  KerBase[6]      (  2 clocks) 
 310:	00 93 06 01 	sts	0x0106, r16
		
		;clear task id
		STS   KerBase+OFF_TID    , R16                    ;clear  KerBase[7]      (  2 clocks) 
 314:	00 93 07 01 	sts	0x0107, r16
		
		;clear ntask
		STS   KerBase+OFF_NTSK   , R16                    ;clear  KerBase[8]      (  2 clocks) 
 318:	00 93 08 01 	sts	0x0108, r16
		
		;reserved, not used
        STS   KerBase+OFF_PTID   , R16                    ;clear  KerBase[9]      (  2 clocks) 
 31c:	00 93 09 01 	sts	0x0109, r16
		
		;clear all timer registers
		STS   SRTCCR0A           , R16                    ;clear TCCR0A           (  2 clocks) 
 320:	00 93 44 00 	sts	0x0044, r16
		STS   SRTCCR0B           , R16                    ;clear TCCR0B           (  2 clocks) 
 324:	00 93 45 00 	sts	0x0045, r16
		STS   SRTIMSK0           , R16                    ;clear TIMSK0           (  2 clocks) 
 328:	00 93 6e 00 	sts	0x006E, r16
		STS   SRTIFR0            , R16                    ;clear TIFR0            (  2 clocks) 
 32c:	00 93 35 00 	sts	0x0035, r16
		STS   SROCR0A            , R16                    ;clear OCR0A            (  2 clocks) 
 330:	00 93 47 00 	sts	0x0047, r16
		STS   SROCR0B            , R16                    ;clear OCR0B            (  2 clocks) 
 334:	00 93 48 00 	sts	0x0048, r16
		STS   SRTCNT0            , R16                    ;clear TCNT0            (  2 clocks) 
 338:	00 93 46 00 	sts	0x0046, r16
		
		;store prescaler value
		MOV   R16                , R24                    ;prescaler from arg1    (  1 clock ) 
 33c:	08 2f       	mov	r16, r24
		STS   KerBase+OFF_PRS    , R16                    ;KerBase[5] prescaler   (  2 clocks) 
 33e:	00 93 05 01 	sts	0x0105, r16
        
		;store reload value
		MOV   R16                , R22                    ;reload val from arg2   (  1 clock ) 
 342:	06 2f       	mov	r16, r22
		STS   KerBase+OFF_RLD    , R16                    ;KerBase[6] reload val  (  2 clocks) 
 344:	00 93 06 01 	sts	0x0106, r16
		POP   R31
 348:	ff 91       	pop	r31
		POP   R30
 34a:	ef 91       	pop	r30
		
		RET                                               ;return from subroutine (  4 clocks) 
 34c:	08 95       	ret

0000034e <Kernel_SysTick_Val_Get>:

;;===============================SysTick value get starting=================================;; 
Kernel_SysTick_Val_Get:                                   ;total operation        ( 42 clocks) 
    _READ_AGAIN:
	    ;first read & store to actual return registers
		LDS   R18		         , KerBase+OFF_TICK0      ;byte0 (LSB)            (  2 clocks) 
 34e:	20 91 00 01 	lds	r18, 0x0100
		LDS   R19		         , KerBase+OFF_TICK1      ;byte1                  (  2 clocks) 
 352:	30 91 01 01 	lds	r19, 0x0101
		LDS   R20		         , KerBase+OFF_TICK2      ;byte2                  (  2 clocks) 
 356:	40 91 02 01 	lds	r20, 0x0102
		LDS   R21		         , KerBase+OFF_TICK3      ;byte3                  (  2 clocks) 
 35a:	50 91 03 01 	lds	r21, 0x0103
		LDS   R22		         , KerBase+OFF_TICK4      ;byte4 (MSB)            (  2 clocks) 
 35e:	60 91 04 01 	lds	r22, 0x0104
		
		;second read to scratch registers
		LDS   R26		         , KerBase+OFF_TICK0      ;byte0 (LSB)            (  2 clocks) 
 362:	a0 91 00 01 	lds	r26, 0x0100
		LDS   R27		         , KerBase+OFF_TICK1      ;byte1                  (  2 clocks) 
 366:	b0 91 01 01 	lds	r27, 0x0101
		LDS   R30		         , KerBase+OFF_TICK2      ;byte2                  (  2 clocks) 
 36a:	e0 91 02 01 	lds	r30, 0x0102
		LDS   R31		         , KerBase+OFF_TICK3      ;byte3                  (  2 clocks) 
 36e:	f0 91 03 01 	lds	r31, 0x0103
		LDS   R0		         , KerBase+OFF_TICK4      ;byte4 (MSB)            (  2 clocks) 
 372:	00 90 04 01 	lds	r0, 0x0104
		
		;compare all pairs
		CP    R18                , R26                    ;compare                (  1 clock ) 
 376:	2a 17       	cp	r18, r26
		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 378:	51 f7       	brne	.-44     	; 0x34e <Kernel_SysTick_Val_Get>
		CP    R19                , R27                    ;compare                (  1 clock ) 
 37a:	3b 17       	cp	r19, r27
		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 37c:	41 f7       	brne	.-48     	; 0x34e <Kernel_SysTick_Val_Get>
		CP    R20                , R30                    ;compare                (  1 clock ) 
 37e:	4e 17       	cp	r20, r30
		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 380:	31 f7       	brne	.-52     	; 0x34e <Kernel_SysTick_Val_Get>
		CP    R21                , R31                    ;compare                (  1 clock ) 
 382:	5f 17       	cp	r21, r31
		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 384:	21 f7       	brne	.-56     	; 0x34e <Kernel_SysTick_Val_Get>
		CP    R22                , R0                     ;compare                (  1 clock ) 
 386:	60 15       	cp	r22, r0
		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 388:	11 f7       	brne	.-60     	; 0x34e <Kernel_SysTick_Val_Get>
		
		;only 5 bytes data are taken, force clear 3 high bytes (64bit return R25:R18)
		LDI   R23		         , 0x00                   ;byte5 -> R23           (  1 clocks) 
 38a:	70 e0       	ldi	r23, 0x00	; 0
		LDI   R24		         , 0x00                   ;byte6 -> R24           (  1 clocks) 
 38c:	80 e0       	ldi	r24, 0x00	; 0
		LDI   R25		         , 0x00                   ;byte7 -> R25           (  1 clocks) 
 38e:	90 e0       	ldi	r25, 0x00	; 0
		RET                                               ;return from subroutine (  4 clocks) 
 390:	08 95       	ret

00000392 <Kernel_SysTick_Val_Safely_Get>:



;;============================SysTick value safely get starting=============================;; 
Kernel_SysTick_Val_Safely_Get:                            ;total operation        ( 20 clocks) 
        IN    R2                 , IOSREG                 ;save SREG              (  1 clock ) 
 392:	2f b6       	in	r2, 0x3f	; 63
        CLI                                               ;disable interrupts     (  1 clock ) 
 394:	f8 94       	cli
		LDS   R18		         , KerBase+OFF_TICK0      ;byte0 -> R18 (LSB)     (  2 clocks) 
 396:	20 91 00 01 	lds	r18, 0x0100
		LDS   R19		         , KerBase+OFF_TICK1      ;byte1 -> R19           (  2 clocks) 
 39a:	30 91 01 01 	lds	r19, 0x0101
		LDS   R20		         , KerBase+OFF_TICK2      ;byte2 -> R20           (  2 clocks) 
 39e:	40 91 02 01 	lds	r20, 0x0102
		LDS   R21		         , KerBase+OFF_TICK3      ;byte3 -> R21           (  2 clocks) 
 3a2:	50 91 03 01 	lds	r21, 0x0103
		LDS   R22		         , KerBase+OFF_TICK4      ;byte4 -> R22           (  2 clocks) 
 3a6:	60 91 04 01 	lds	r22, 0x0104
		LDI   R23		         , 0x00                   ;byte5 -> R23           (  1 clocks) 
 3aa:	70 e0       	ldi	r23, 0x00	; 0
		LDI   R24		         , 0x00                   ;byte6 -> R24           (  1 clocks) 
 3ac:	80 e0       	ldi	r24, 0x00	; 0
		LDI   R25		         , 0x00                   ;byte7 -> R25 (MSB)     (  1 clocks) 
 3ae:	90 e0       	ldi	r25, 0x00	; 0
		OUT   IOSREG             , R2          		      ;restore SREG           (  1 clock ) 
 3b0:	2f be       	out	0x3f, r2	; 63
		RET                                               ;return from subroutine (  4 clocks) 
 3b2:	08 95       	ret

000003b4 <Kernel_Interrupt_Sts_Get>:



;;==============================interrupt status get starting===============================;; 
Kernel_Interrupt_Sts_Get:                                 ;total operation        ( 10 clocks) 
        LDI   R24		         , 0x00                   ;clear R24              (  1 clock ) 
 3b4:	80 e0       	ldi	r24, 0x00	; 0
        IN    R16		         , IOSREG                 ;save SREG in R16       (  1 clock ) 
 3b6:	0f b7       	in	r16, 0x3f	; 63
		SBRC  R16		         , 0x07                   ;check I flag->bit7     (  3 clocks) 
 3b8:	07 fd       	sbrc	r16, 7
		LDI   R24		         , 0x01                   ;set R24 to 1           (  1 clock ) 
 3ba:	81 e0       	ldi	r24, 0x01	; 1
		RET                                               ;return from subroutine (  4 clocks) 
 3bc:	08 95       	ret

000003be <Kernel_Task_Create>:

;;===============================kernel task create starting================================;; 
Kernel_Task_Create:                                       ;total operation        (130 clocks) 
        ;func_ptr->R25:R24, task_priority->R22 
        ;save main SP & Z pointer 
        IN    R2                 , IOSPL                  ;save SPL of MSP        (  1 clock ) 
 3be:	2d b6       	in	r2, 0x3d	; 61
        IN    R3                 , IOSPH                  ;save SPH of MSP        (  1 clock ) 
 3c0:	3e b6       	in	r3, 0x3e	; 62
        MOV   R4                 , R30                    ;save ZPL               (  1 clock ) 
 3c2:	4e 2e       	mov	r4, r30
		MOV   R5                 , R31                    ;save ZPH               (  1 clock ) 
 3c4:	5f 2e       	mov	r5, r31
        
		;across this function, R16 will be used as task_id 
		LDS   R16                , KerBase+OFF_TID        ;load task_id           (  2 clocks) 
 3c6:	00 91 07 01 	lds	r16, 0x0107
		
		;set priority to KerSchPr+task_id
		LDI   R30                , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 3ca:	e8 e2       	ldi	r30, 0x28	; 40
		LDI   R31                , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 3cc:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 3ce:	e0 0f       	add	r30, r16
		ADC   R31                , R1                     ;add high byte+carry    (  1 clock ) 
 3d0:	f1 1d       	adc	r31, r1
		ST    Z                  , R22                    ;save priority          (  2 clocks) 
 3d2:	60 83       	st	Z, r22
		
		;increment ntask
		LDS   R17                , KerBase+OFF_NTSK       ;load ntask             (  2 clocks) 
 3d4:	10 91 08 01 	lds	r17, 0x0108
		INC   R17                                         ;increment ntask        (  1 clock ) 
 3d8:	13 95       	inc	r17
		STS   KerBase+OFF_NTSK   , R17                    ;store ntask            (  2 clocks) 
 3da:	10 93 08 01 	sts	0x0108, r17
		
		;stack pointer for current task (KerStack + KER_STK_SZ*(ker_ind+1) - 1) ->stack top 
		MOV   R17                , R16                    ;load task_id           (  1 clock )
 3de:	10 2f       	mov	r17, r16
		INC   R17                                         ;increment task_id      (  1 clock ) 
 3e0:	13 95       	inc	r17
		LDI   R18                , KER_STK_SZ             ;load stack size        (  1 clock ) 
 3e2:	20 e8       	ldi	r18, 0x80	; 128
		MUL   R17                , R18                    ;multiply to get offset (  2 clocks) 
 3e4:	12 9f       	mul	r17, r18
		MOV   R30                , R0                     ;load multiplied low    (  1 clocks) 
 3e6:	e0 2d       	mov	r30, r0
		MOV   R31                , R1                     ;load multiplied high   (  1 clocks) 
 3e8:	f1 2d       	mov	r31, r1
		SBIW  R30                , 0x01                   ;dec multiplied val     (  2 clocks) 
 3ea:	31 97       	sbiw	r30, 0x01	; 1
		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 3ec:	11 24       	eor	r1, r1
		LDI   R17                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
 3ee:	16 e4       	ldi	r17, 0x46	; 70
		LDI   R18                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
 3f0:	21 e0       	ldi	r18, 0x01	; 1
		ADD   R30                , R17                    ;add low bytes          (  1 clock ) 
 3f2:	e1 0f       	add	r30, r17
		ADC   R31                , R18                    ;add high bytes+carry   (  1 clock ) 
 3f4:	f2 1f       	adc	r31, r18
		OUT   IOSPL              , R30                    ;load SPL               (  1 clock ) 
 3f6:	ed bf       	out	0x3d, r30	; 61
        OUT   IOSPH              , R31                    ;load SPH               (  1 clock ) 
 3f8:	fe bf       	out	0x3e, r31	; 62
		
		;function argument directly returns word address
	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
 3fa:	8f 93       	push	r24
		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 3fc:	9f 93       	push	r25
		
		;push context to stack of this task
		KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 3fe:	0f 92       	push	r0
 400:	0f b6       	in	r0, 0x3f	; 63
 402:	0f 92       	push	r0
 404:	1f 92       	push	r1
 406:	11 24       	eor	r1, r1
 408:	2f 92       	push	r2
 40a:	3f 92       	push	r3
 40c:	4f 92       	push	r4
 40e:	5f 92       	push	r5
 410:	6f 92       	push	r6
 412:	7f 92       	push	r7
 414:	8f 92       	push	r8
 416:	9f 92       	push	r9
 418:	af 92       	push	r10
 41a:	bf 92       	push	r11
 41c:	cf 92       	push	r12
 41e:	df 92       	push	r13
 420:	ef 92       	push	r14
 422:	ff 92       	push	r15
 424:	0f 93       	push	r16
 426:	1f 93       	push	r17
 428:	2f 93       	push	r18
 42a:	3f 93       	push	r19
 42c:	4f 93       	push	r20
 42e:	5f 93       	push	r21
 430:	6f 93       	push	r22
 432:	7f 93       	push	r23
 434:	8f 93       	push	r24
 436:	9f 93       	push	r25
 438:	af 93       	push	r26
 43a:	bf 93       	push	r27
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
 440:	ef 93       	push	r30
 442:	ff 93       	push	r31
		
		;read stack pointer of current task (necessary when restore)
		IN    R17                , IOSPL                  ;read SPL               (  1 clock ) 
 444:	1d b7       	in	r17, 0x3d	; 61
        IN    R18                , IOSPH                  ;read SPH               (  1 clock ) 
 446:	2e b7       	in	r18, 0x3e	; 62
		
		;calculate the address where current task's SP will be stored and store SP
		MOV   R19                , R16                    ;fetch task_id from arg (  1 clock ) 
 448:	30 2f       	mov	r19, r16
		LSL   R19                                         ;left shift to multiply (  1 clock ) 
 44a:	33 0f       	add	r19, r19
		LDI   R30                , lo8(KerSP)             ;fetch base pos low     (  1 clock ) 
 44c:	ea e0       	ldi	r30, 0x0A	; 10
		LDI   R31                , hi8(KerSP)             ;fetch base pos high    (  1 clock ) 
 44e:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R19                    ;add offset to array    (  1 clock ) 
 450:	e3 0f       	add	r30, r19
		ADC   R31                , R1                     ;add carry if any       (  1 clock ) 
 452:	f1 1d       	adc	r31, r1
		ST    Z+                 , R17                    ;SPL at KerSp+offset    (  2 clocks) 
 454:	11 93       	st	Z+, r17
		ST    z                  , R18                    ;SPH at KerSp+offset    (  2 clocks) 
 456:	20 83       	st	Z, r18
		
		;increment task_id
		LDS   R17                , KerBase+OFF_TID        ;load task_id           (  2 clocks) 
 458:	10 91 07 01 	lds	r17, 0x0107
		INC   R17                                         ;increment task_id      (  1 clock ) 
 45c:	13 95       	inc	r17
		STS   KerBase+OFF_TID    , R17                    ;store task_id          (  2 clocks) 
 45e:	10 93 07 01 	sts	0x0107, r17
		
		;load Main SP, restore Z pointer
		OUT   IOSPL              , R2                     ;load SPL               (  1 clock ) 
 462:	2d be       	out	0x3d, r2	; 61
        OUT   IOSPH              , R3                     ;load SPH               (  1 clock ) 
 464:	3e be       	out	0x3e, r3	; 62
		MOV   R30                , R4                     ;push ZPL               (  1 clock ) 
 466:	e4 2d       	mov	r30, r4
		MOV   R31                , R5                     ;push ZPL               (  1 clock ) 
 468:	f5 2d       	mov	r31, r5
		
		RET                                               ;return from subroutine (  4 clocks) 
 46a:	08 95       	ret

0000046c <Kernel_Start_Tasks>:

;;=================================kernel start tasks starting==============================;; 
Kernel_Start_Tasks:
		;start executing from task0
		;save ZP
		MOV   R4                 , R30                    ;save ZPL               (  2 clocks) 
 46c:	4e 2e       	mov	r4, r30
		MOV   R5                 , R31                    ;save ZPH               (  2 clocks) 
 46e:	5f 2e       	mov	r5, r31
		
		;clear task_id
		LDI   R16                , 0x00                   ;load task_id           (  2 clocks) 
 470:	00 e0       	ldi	r16, 0x00	; 0
		STS   KerBase+OFF_TID    , R16                    ;store task_id          (  2 clocks) 
 472:	00 93 07 01 	sts	0x0107, r16
		
		;load ZP with addr+offset
		LDI   R30                , lo8(KerSP+0x00)        ;fetch ZPL KerSP->TID0  (  1 clock ) 
 476:	ea e0       	ldi	r30, 0x0A	; 10
		LDI   R31                , hi8(KerSP+0x00)        ;fetch ZPH KerSP->TID0  (  1 clock ) 
 478:	f1 e0       	ldi	r31, 0x01	; 1
		
		;load TID0 task's SP
		LD    R16                , Z+                     ;load val from Z, inc Z (  2 clocks) 
 47a:	01 91       	ld	r16, Z+
		LD    R17                , Z                      ;load val from Z+1      (  2 clocks) 
 47c:	10 81       	ld	r17, Z
		
		;set TID0 task's SP
		OUT   IOSPL              , R16                    ;load SPL               (  1 clock ) 
 47e:	0d bf       	out	0x3d, r16	; 61
        OUT   IOSPH              , R17                    ;load SPH               (  1 clock ) 
 480:	1e bf       	out	0x3e, r17	; 62
        
        ;forcefully restore context, in ISR it will be stored automatically
		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 482:	ff 91       	pop	r31
 484:	ef 91       	pop	r30
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	bf 91       	pop	r27
 48c:	af 91       	pop	r26
 48e:	9f 91       	pop	r25
 490:	8f 91       	pop	r24
 492:	7f 91       	pop	r23
 494:	6f 91       	pop	r22
 496:	5f 91       	pop	r21
 498:	4f 91       	pop	r20
 49a:	3f 91       	pop	r19
 49c:	2f 91       	pop	r18
 49e:	1f 91       	pop	r17
 4a0:	0f 91       	pop	r16
 4a2:	ff 90       	pop	r15
 4a4:	ef 90       	pop	r14
 4a6:	df 90       	pop	r13
 4a8:	cf 90       	pop	r12
 4aa:	bf 90       	pop	r11
 4ac:	af 90       	pop	r10
 4ae:	9f 90       	pop	r9
 4b0:	8f 90       	pop	r8
 4b2:	7f 90       	pop	r7
 4b4:	6f 90       	pop	r6
 4b6:	5f 90       	pop	r5
 4b8:	4f 90       	pop	r4
 4ba:	3f 90       	pop	r3
 4bc:	2f 90       	pop	r2
 4be:	1f 90       	pop	r1
 4c0:	0f 90       	pop	r0
 4c2:	0f be       	out	0x3f, r0	; 63
 4c4:	0f 90       	pop	r0
		
		;restore ZP
		MOV   R30                , R4                     ;restore ZPL            (  2 clocks) 
 4c6:	e4 2d       	mov	r30, r4
		MOV   R31                , R5                     ;restore ZPL            (  2 clocks) 
 4c8:	f5 2d       	mov	r31, r5
		
		LDS   R16		         , KerBase+OFF_PRS        ;load prescaler         (  2 clocks) 
 4ca:	00 91 05 01 	lds	r16, 0x0105
		LDS   R17		         , KerBase+OFF_RLD        ;load reload val        (  2 clocks) 
 4ce:	10 91 06 01 	lds	r17, 0x0106
		STS   SRTCCR0B           , R16                    ;prescaler-> TCCR0B     (  2 clocks) 
 4d2:	00 93 45 00 	sts	0x0045, r16
		STS   SRTCNT0            , R17                    ;reload val-> TCNT0     (  2 clocks) 
 4d6:	10 93 46 00 	sts	0x0046, r17
		LDI   R16                , 0x01                   ;bit mask TOIE0         (  1 clock ) 
 4da:	01 e0       	ldi	r16, 0x01	; 1
		STS   SRTIMSK0           , R16                    ;set to TIMSK0          (  2 clocks) 
 4dc:	00 93 6e 00 	sts	0x006E, r16

		;need to save global interrupt enabled in each tasks context
		SEI                                               ;force enable interrupt (  1 clock ) 
 4e0:	78 94       	sei
		
		;execute return to jump to task0, pushed while task init
		RET                                               ;return from subroutine (  4 clocks) 
 4e2:	08 95       	ret

000004e4 <Kernel_Init>:

;;===================================kernel init starting===================================;; 
Kernel_Init:
		;start executing from task0
		;save ZP
		MOV   R4                 , R30                    ;save ZPL               (  2 clocks) 
 4e4:	4e 2e       	mov	r4, r30
		MOV   R5                 , R31                    ;save ZPH               (  2 clocks) 
 4e6:	5f 2e       	mov	r5, r31
		
		;init timer for kernel 
		LDI   R24                , 0x03                   ;set prescaler          (  1 clock ) 
 4e8:	83 e0       	ldi	r24, 0x03	; 3
		LDI   R22                , 0x82                   ;set reload val         (  1 clock ) 
 4ea:	62 e8       	ldi	r22, 0x82	; 130
		CALL  Kernel_SysTick_Reg_Init                     ;init timer             ( 55 clocks) 
 4ec:	0e 94 76 01 	call	0x2ec	; 0x2ec <Kernel_SysTick_Reg_Init>
		
		LDI   R24                , lo8(Kernel_Task_Idle)  ;load func addr low     (  1 clock )
 4f0:	80 e0       	ldi	r24, 0x00	; 0
		LDI   R25                , hi8(Kernel_Task_Idle)  ;load func addr high    (  1 clock )
 4f2:	95 e0       	ldi	r25, 0x05	; 5
		LSR   R25                                         ;right shift to divide  (  1 clock )
 4f4:	96 95       	lsr	r25
		ROR   R24                                         ;rotate right th carry  (  1 clock )
 4f6:	87 95       	ror	r24
		LDI   R22                , 0xFF                   ;set max val
 4f8:	6f ef       	ldi	r22, 0xFF	; 255
		CALL  Kernel_Task_Create                          ;init idle task         (130 clocks) 
 4fa:	0e 94 df 01 	call	0x3be	; 0x3be <Kernel_Task_Create>
		

		;execute return to jump to task0, pushed while task init
		RET                                               ;return from subroutine (  4 clocks) 
 4fe:	08 95       	ret

00000500 <Kernel_Task_Idle>:


;;=================================kernel idle task starting================================;; 
Kernel_Task_Idle:                                         ;jumps to this function when idle
    _IDLE_LOOP:                                           ;forever loop
	    LDI   R24, 0x23
 500:	83 e2       	ldi	r24, 0x23	; 35
		CALL  Debug_Tx_Byte_Conf
 502:	0e 94 45 03 	call	0x68a	; 0x68a <Debug_Tx_Byte_Conf>
		RJMP  _IDLE_LOOP                                  ;return from subroutine (  4 clocks) 
 506:	fc cf       	rjmp	.-8      	; 0x500 <Kernel_Task_Idle>

00000508 <Kernel_Task_Sleep>:


;;================================kernel task sleep starting================================;; 
Kernel_Task_Sleep:
        ;save current context
        KER_CONTEXT_SAVE_YEILD                            ;save context           ( 68 clocks) 
 508:	0f 92       	push	r0
 50a:	0f b6       	in	r0, 0x3f	; 63
 50c:	f8 94       	cli
 50e:	0f 92       	push	r0
 510:	1f 92       	push	r1
 512:	11 24       	eor	r1, r1
 514:	2f 92       	push	r2
 516:	3f 92       	push	r3
 518:	4f 92       	push	r4
 51a:	5f 92       	push	r5
 51c:	6f 92       	push	r6
 51e:	7f 92       	push	r7
 520:	8f 92       	push	r8
 522:	9f 92       	push	r9
 524:	af 92       	push	r10
 526:	bf 92       	push	r11
 528:	cf 92       	push	r12
 52a:	df 92       	push	r13
 52c:	ef 92       	push	r14
 52e:	ff 92       	push	r15
 530:	0f 93       	push	r16
 532:	1f 93       	push	r17
 534:	2f 93       	push	r18
 536:	3f 93       	push	r19
 538:	4f 93       	push	r20
 53a:	5f 93       	push	r21
 53c:	6f 93       	push	r22
 53e:	7f 93       	push	r23
 540:	8f 93       	push	r24
 542:	9f 93       	push	r25
 544:	af 93       	push	r26
 546:	bf 93       	push	r27
 548:	cf 93       	push	r28
 54a:	df 93       	push	r29
 54c:	ef 93       	push	r30
 54e:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks)
 550:	0d b7       	in	r16, 0x3d	; 61
 552:	1e b7       	in	r17, 0x3e	; 62
 554:	20 91 07 01 	lds	r18, 0x0107
 558:	22 0f       	add	r18, r18
 55a:	ea e0       	ldi	r30, 0x0A	; 10
 55c:	f1 e0       	ldi	r31, 0x01	; 1
 55e:	e2 0f       	add	r30, r18
 560:	f1 1d       	adc	r31, r1
 562:	01 93       	st	Z+, r16
 564:	10 83       	st	Z, r17
		
		;create next task wakeup time (args R25:R24)
		LDS   R16                , KerBase+OFF_TID        ;load tak_id            (  2 clocks) 
 566:	00 91 07 01 	lds	r16, 0x0107
		MOV   R17                , R16                    ;copy                   (  1 clock ) 
 56a:	10 2f       	mov	r17, r16
		LSL   R17                                         ;x2                     (  1 clock ) 
 56c:	11 0f       	add	r17, r17
		LDI   R30                , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 56e:	e2 e3       	ldi	r30, 0x32	; 50
		LDI   R31                , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 570:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R17                    ;add low bytes          (  1 clock ) 
 572:	e1 0f       	add	r30, r17
		LDI   R17                , 0x00                   ;load 0                 (  1 clock ) 
 574:	10 e0       	ldi	r17, 0x00	; 0
		ADC   R31                , R17                    ;add high byte+carry    (  1 clock ) 
 576:	f1 1f       	adc	r31, r17
		ST    Z+                 , R24                    ;save sleep time        (  2 clocks) 
 578:	81 93       	st	Z+, r24
		ST    Z                  , R25                    ;save sleep time        (  2 clocks) 
 57a:	90 83       	st	Z, r25
		
		;update task scheduler status as blocked
		LDI   R30                , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 57c:	ee e1       	ldi	r30, 0x1E	; 30
		LDI   R31                , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 57e:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 580:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 582:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 584:	f0 1f       	adc	r31, r16
        LDI   R16                , TASK_BLOCK             ;block task until cnt=0 (  1 clock ) 
 586:	00 e0       	ldi	r16, 0x00	; 0
		ST    Z                  , R16                    ;save block flag        (  2 clocks) 
 588:	00 83       	st	Z, r16
		
		;run scheduler, load next task sp, restore context
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 14 clocks)
 58a:	00 91 08 01 	lds	r16, 0x0108

0000058e <_CH_TASK_READY14>:
 58e:	0a 95       	dec	r16
 590:	10 2f       	mov	r17, r16
 592:	ee e1       	ldi	r30, 0x1E	; 30
 594:	f1 e0       	ldi	r31, 0x01	; 1
 596:	e1 0f       	add	r30, r17
 598:	f1 1d       	adc	r31, r1
 59a:	10 81       	ld	r17, Z
 59c:	11 30       	cpi	r17, 0x01	; 1
 59e:	21 f0       	breq	.+8      	; 0x5a8 <_NEXT_TASK_FOUND14>

000005a0 <_LOOP_CNT14>:
 5a0:	00 30       	cpi	r16, 0x00	; 0
 5a2:	a9 f7       	brne	.-22     	; 0x58e <_CH_TASK_READY14>
 5a4:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <_IDLE_TASK14>

000005a8 <_NEXT_TASK_FOUND14>:
 5a8:	00 93 07 01 	sts	0x0107, r16
 5ac:	0c 94 db 02 	jmp	0x5b6	; 0x5b6 <_EXIT14>

000005b0 <_IDLE_TASK14>:
 5b0:	00 e0       	ldi	r16, 0x00	; 0
 5b2:	00 93 07 01 	sts	0x0107, r16

000005b6 <_EXIT14>:
		;KER_DEC_SLP_TIMEOUT_SLEEP 
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 5b6:	00 91 07 01 	lds	r16, 0x0107
 5ba:	00 0f       	add	r16, r16
 5bc:	ea e0       	ldi	r30, 0x0A	; 10
 5be:	f1 e0       	ldi	r31, 0x01	; 1
 5c0:	e0 0f       	add	r30, r16
 5c2:	f1 1d       	adc	r31, r1
 5c4:	01 91       	ld	r16, Z+
 5c6:	10 81       	ld	r17, Z
 5c8:	0d bf       	out	0x3d, r16	; 61
 5ca:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE_YEILD                         ;restore context        ( 67 clocks) 
 5cc:	ff 91       	pop	r31
 5ce:	ef 91       	pop	r30
 5d0:	df 91       	pop	r29
 5d2:	cf 91       	pop	r28
 5d4:	bf 91       	pop	r27
 5d6:	af 91       	pop	r26
 5d8:	9f 91       	pop	r25
 5da:	8f 91       	pop	r24
 5dc:	7f 91       	pop	r23
 5de:	6f 91       	pop	r22
 5e0:	5f 91       	pop	r21
 5e2:	4f 91       	pop	r20
 5e4:	3f 91       	pop	r19
 5e6:	2f 91       	pop	r18
 5e8:	1f 91       	pop	r17
 5ea:	0f 91       	pop	r16
 5ec:	ff 90       	pop	r15
 5ee:	ef 90       	pop	r14
 5f0:	df 90       	pop	r13
 5f2:	cf 90       	pop	r12
 5f4:	bf 90       	pop	r11
 5f6:	af 90       	pop	r10
 5f8:	9f 90       	pop	r9
 5fa:	8f 90       	pop	r8
 5fc:	7f 90       	pop	r7
 5fe:	6f 90       	pop	r6
 600:	5f 90       	pop	r5
 602:	4f 90       	pop	r4
 604:	3f 90       	pop	r3
 606:	2f 90       	pop	r2
 608:	1f 90       	pop	r1
 60a:	0f 90       	pop	r0
 60c:	0f be       	out	0x3f, r0	; 63
 60e:	0f 90       	pop	r0
 610:	78 94       	sei
		
		RET                                               ;return from subroutine (  4 clocks) 
 612:	08 95       	ret

00000614 <Kernel_Task_Sleep_Time_Get>:


;;===========================kernel task sleep time get starting============================;; 
Kernel_Task_Sleep_Time_Get:
		;get remaining sleep time (ms), return R25:R24
		LDS   R16                , KerBase+OFF_TID        ;load tak_id            (  2 clocks) 
 614:	00 91 07 01 	lds	r16, 0x0107
		LSL   R16                                         ;x2                     (  1 clock ) 
 618:	00 0f       	add	r16, r16
		LDI   R30                , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 61a:	e2 e3       	ldi	r30, 0x32	; 50
		LDI   R31                , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 61c:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 61e:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 620:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 622:	f0 1f       	adc	r31, r16
		LD    R24                , Z+                     ;load sleep time        (  2 clocks) 
 624:	81 91       	ld	r24, Z+
		LD    R25                , Z                      ;load sleep time        (  2 clocks) 
 626:	90 81       	ld	r25, Z
		RET                                               ;return from subroutine (  4 clocks) 
 628:	08 95       	ret

0000062a <Kernel_Task_Sts_Get>:


;;===============================kernel task status starting================================;; 
Kernel_Task_Sts_Get:
		;get current task status : READY (0x01) / BLOCKED (0x00), R24
		LDS   R16                , KerBase+OFF_TID        ;load tak_id            (  2 clocks) 
 62a:	00 91 07 01 	lds	r16, 0x0107
		LDI   R30                , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 62e:	ee e1       	ldi	r30, 0x1E	; 30
		LDI   R31                , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 630:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 632:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 634:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 636:	f0 1f       	adc	r31, r16
		LD    R24                , Z                      ;load sleep time        (  2 clocks) 
 638:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 63a:	08 95       	ret

0000063c <Kernel_Task_Prio_Get>:


;;=============================kernel task priority get starting============================;; 
Kernel_Task_Prio_Get:
		;get priority of the task id, arg (task_id->R24), return R24
		MOV   R16                , R24                    ;copy task_id           (  1 clock ) 
 63c:	08 2f       	mov	r16, r24
		LDI   R30                , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 63e:	e8 e2       	ldi	r30, 0x28	; 40
		LDI   R31                , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 640:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 642:	e0 0f       	add	r30, r16
		ADC   R31                , R1                     ;add high byte+carry    (  1 clock ) 
 644:	f1 1d       	adc	r31, r1
		LD    R24                , Z                      ;load priority          (  2 clocks) 
 646:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 648:	08 95       	ret

0000064a <Kernel_High_Prio_Task_ID_Get>:


;;===========================kernel high priority task id starting==========================;; 
Kernel_High_Prio_Task_ID_Get:
		;internal idle task id = 0, app task start from task id 1, return R24
		LDS   R24                , KerBase+OFF_PTID       ;load priority tak_id   (  2 clocks) 
 64a:	80 91 09 01 	lds	r24, 0x0109
		DEC   R24                                         ;decrement by 1         (  1 clock ) 
 64e:	8a 95       	dec	r24
		RET                                               ;return from subroutine (  4 clocks) 
 650:	08 95       	ret

00000652 <Kernel_Abs_High_Prio_Task_ID_Get>:


;;=========================kernel abs high priority task id starting========================;; 
Kernel_Abs_High_Prio_Task_ID_Get:
		;get highest priority task id, return R24
		LDS   R24                , KerBase+OFF_PTID       ;load priority tak_id   (  2 clocks) 
 652:	80 91 09 01 	lds	r24, 0x0109
		RET                                               ;return from subroutine (  4 clocks) 
 656:	08 95       	ret

00000658 <Debug_Init>:
.global  Debug_Print_TSK

;;========================================Debug Init========================================;;
Debug_Init:
        ;init registers for UART0
		LDI   R16                , (1<<1)                 ;mask U2x,                (1 clock )
 658:	02 e0       	ldi	r16, 0x02	; 2
		STS   SRUCSR0A           , R16                    ;load val to UCSR0A,      (2 clocks)
 65a:	00 93 c0 00 	sts	0x00C0, r16
		MOV   R16                , R25                    ;clear R16,               (1 clock )
 65e:	09 2f       	mov	r16, r25
		STS   SRUBRR0H           , R16                    ;load val to UBRR0H,      (2 clocks)
 660:	00 93 c5 00 	sts	0x00C5, r16
		MOV   R16                , R24                    ;set 0x03, 250k baud,     (1 clock )
 664:	08 2f       	mov	r16, r24
		STS   SRUBRR0L           , R16                    ;load val to UBRR0L,      (2 clocks)
 666:	00 93 c4 00 	sts	0x00C4, r16
		LDI   R16                , (1<<1)|(1<<2)          ;config 8 data bit        (1 clock )
 66a:	06 e0       	ldi	r16, 0x06	; 6
		STS   SRUCSR0C           , R16                    ;load val to UCSR0C,      (2 clocks)
 66c:	00 93 c2 00 	sts	0x00C2, r16
		LDI   R16                , (1<<3)                 ;enable tx,               (1 clock )
 670:	08 e0       	ldi	r16, 0x08	; 8
		STS   SRUCSR0B           , R16                    ;load val to UCSR0B,      (2 clocks)
 672:	00 93 c1 00 	sts	0x00C1, r16
        RET                                               ;return from subroutine,  (4 clocks) 
 676:	08 95       	ret

00000678 <Debug_Tx_Byte>:


;;=========================================Debug Tx=========================================;;
Debug_Tx_Byte:
		;write single byte to data register (Arg R24)
		PUSH  R16                                         ;save reg               (  2 clocks)
 678:	0f 93       	push	r16
		STS   SRUDR0             , R24                    ;load val to UDR0,      (  2 clocks)
 67a:	80 93 c6 00 	sts	0x00C6, r24

0000067e <__UDRE0_CLEARED>:
		
    __UDRE0_CLEARED:
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,    (  2 clocks)
 67e:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x05                   ;skip if UDRE0 is set,  (  2 clocks)
 682:	05 ff       	sbrs	r16, 5
		RJMP  __UDRE0_CLEARED                             ;wait until UDRE0 is set(  2 clocks)
 684:	fc cf       	rjmp	.-8      	; 0x67e <__UDRE0_CLEARED>
		POP   R16                                         ;restore reg            (  2 clocks)
 686:	0f 91       	pop	r16
        RET                                               ;return from subroutine,(  4 clocks) 
 688:	08 95       	ret

0000068a <Debug_Tx_Byte_Conf>:


;;=========================================Debug Tx=========================================;;
Debug_Tx_Byte_Conf:                                       ;untdetermined->loop    ( 23 clocks) 
        ;write 1 byte, (Arg R24), Args retained
		PUSH  R16                                         ;save reg               (  2 clocks)
 68a:	0f 93       	push	r16
		STS   SRUDR0             , R24                    ;load val to UDR0,      (  2 clocks)
 68c:	80 93 c6 00 	sts	0x00C6, r24

00000690 <__TXC0_CLEARED>:
		
    __TXC0_CLEARED:
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,    (  2 clocks)
 690:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x06                   ;skip if TXC0 is set,   (  2 clocks)
 694:	06 ff       	sbrs	r16, 6
		RJMP  __TXC0_CLEARED                              ;wait until TXC0 is set (  2 clocks)
 696:	fc cf       	rjmp	.-8      	; 0x690 <__TXC0_CLEARED>
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,    (  2 clocks)
 698:	00 91 c0 00 	lds	r16, 0x00C0
		ORI   R16                , (1<<6)                 ;mask bit 6,            (  1 clock )
 69c:	00 64       	ori	r16, 0x40	; 64
		STS   SRUCSR0A           , R16                    ;write reg with bit msk (  2 clocks)
 69e:	00 93 c0 00 	sts	0x00C0, r16
		POP   R16                                         ;restore reg            (  2 clocks)
 6a2:	0f 91       	pop	r16
        RET                                               ;return from subroutine (  4 clocks) 
 6a4:	08 95       	ret

000006a6 <Debug_Tx_Word_Conf>:


;;======================================Debug Tx Word=======================================;;
Debug_Tx_Word_Conf:
        ;write 2 bytes, (Arg R24, R25), Args retained
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 6a6:	0e 94 45 03 	call	0x68a	; 0x68a <Debug_Tx_Byte_Conf>
		PUSH  R24                                         ;save reg               (  2 clocks)
 6aa:	8f 93       	push	r24
		MOV   R24                , R25                    ;copy R25 to R24        (  1 clock )
 6ac:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 6ae:	0e 94 45 03 	call	0x68a	; 0x68a <Debug_Tx_Byte_Conf>
		POP   R24                                         ;restore reg            (  2 clocks)
 6b2:	8f 91       	pop	r24
        RET                                               ;return from subroutine (  4 clocks) 
 6b4:	08 95       	ret

000006b6 <Debug_Tx_DWord_Conf>:

;;=====================================Debug Tx DWord=======================================;;
Debug_Tx_DWord_Conf:
        ;write 4 bytes, (Arg R22-R25), Args retained
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks)
 6b6:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R22                    ;copy R22 to R24          (1 clock )
 6ba:	86 2f       	mov	r24, r22
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 6bc:	0e 94 45 03 	call	0x68a	; 0x68a <Debug_Tx_Byte_Conf>
		MOV   R24                , R23                    ;copy R23 to R24          (1 clock )
 6c0:	87 2f       	mov	r24, r23
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 6c2:	0e 94 45 03 	call	0x68a	; 0x68a <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24              (2 clocks)
 6c6:	80 91 4a 00 	lds	r24, 0x004A
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 6ca:	0e 94 45 03 	call	0x68a	; 0x68a <Debug_Tx_Byte_Conf>
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks)
 6ce:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R25                    ;copy R22 to R24          (1 clock )
 6d2:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 6d4:	0e 94 45 03 	call	0x68a	; 0x68a <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24 val,         (2 clocks)
 6d8:	80 91 4a 00 	lds	r24, 0x004A
        RET                                               ;return from subroutine,  (4 clocks) 
 6dc:	08 95       	ret

000006de <Debug_Tx_From_RAM>:


;;===================================Debug Tx From RAM======================================;;
Debug_Tx_From_RAM:
        ;print data from RAM address (Arg R24-R25)
		MOV   R16                , R30                    ;copy R30 to R16          (1 clock )
 6de:	0e 2f       	mov	r16, r30
		MOV   R17                , R31                    ;copy R31 to R17          (1 clock )
 6e0:	1f 2f       	mov	r17, r31
		MOV   R18                , R24                    ;copy R24 to R18          (1 clock )
 6e2:	28 2f       	mov	r18, r24
		MOV   R30                , R24                    ;copy R22 to R24          (1 clock )
 6e4:	e8 2f       	mov	r30, r24
		MOV   R31                , R25                    ;copy R22 to R24          (1 clock )
 6e6:	f9 2f       	mov	r31, r25
		LD    R24                , Z                      ;load val to R24          (2 clocks)
 6e8:	80 81       	ld	r24, Z
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 6ea:	0e 94 45 03 	call	0x68a	; 0x68a <Debug_Tx_Byte_Conf>
		MOV   R30                , R16                    ;copy R16 to R30          (1 clock )
 6ee:	e0 2f       	mov	r30, r16
		MOV   R31                , R17                    ;copy R17 to R31          (1 clock )
 6f0:	f1 2f       	mov	r31, r17
		MOV   R24                , R18                    ;copy R18 to R24          (1 clock )
 6f2:	82 2f       	mov	r24, r18
        RET                                               ;return from subroutine,  (4 clocks) 
 6f4:	08 95       	ret

000006f6 <Debug_Tx_RAM_Area>:

;;===================================Debug Tx RAM Area======================================;;
Debug_Tx_RAM_Area:
        ;print data from RAM address (arguments R24:R25, R22)
	__DUMP_BYTES:
	    CALL  Debug_Tx_From_RAM                           ;send via uart from ram
 6f6:	0e 94 6f 03 	call	0x6de	; 0x6de <Debug_Tx_From_RAM>
		SUBI  R24                , 0x01                   ;decrement from LSByte
 6fa:	81 50       	subi	r24, 0x01	; 1
        SBCI  R25                , 0x00                   ;decrement if carry
 6fc:	90 40       	sbci	r25, 0x00	; 0
		SUBI  R22                , 0x01                   ;decrement
 6fe:	61 50       	subi	r22, 0x01	; 1
		BRNE  __DUMP_BYTES
 700:	d1 f7       	brne	.-12     	; 0x6f6 <Debug_Tx_RAM_Area>
        RET                                               ;return from subroutine,  (4 clocks) 
 702:	08 95       	ret

00000704 <Debug_Print_TSK>:


;;=====================================Debug Dummy Print====================================;;
Debug_Print_TSK:
        ;write 4 bytes, (Arg R22-R25), Args retained
		MOV   R16                , R24                    ;copy R24 to R16          (1 clock )
 704:	08 2f       	mov	r16, r24
		;LDI   R17                , 48                     ;load 48 to reg           (1 clock )
		;ADD   R16                , R17                    ;to convert val to char   (1 clock )
		LDI   R22                , 'T'                    ;copy char                (1 clock )
 706:	64 e5       	ldi	r22, 0x54	; 84
		LDI   R23                , 'S'                    ;copy char                (1 clock )
 708:	73 e5       	ldi	r23, 0x53	; 83
		LDI   R24                , 'k'                    ;copy char                (1 clock )
 70a:	8b e6       	ldi	r24, 0x6B	; 107
		MOV   R25                , R16                    ;copy char                (1 clock )
 70c:	90 2f       	mov	r25, r16
		CALL  Debug_Tx_DWord_Conf                         ;send via uart
 70e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <Debug_Tx_DWord_Conf>
		LDI   R24                , '\r'                   ;copy char                (1 clock )
 712:	8d e0       	ldi	r24, 0x0D	; 13
		LDI   R25                , '\n'                   ;copy char                (1 clock )
 714:	9a e0       	ldi	r25, 0x0A	; 10
		CALL  Debug_Tx_Word_Conf                          ;send via uart
 716:	0e 94 53 03 	call	0x6a6	; 0x6a6 <Debug_Tx_Word_Conf>
        RET                                               ;return from subroutine,  (4 clocks) 
 71a:	08 95       	ret

0000071c <_exit>:
 71c:	f8 94       	cli

0000071e <__stop_program>:
 71e:	ff cf       	rjmp	.-2      	; 0x71e <__stop_program>
