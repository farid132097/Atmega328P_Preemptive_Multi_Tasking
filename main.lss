
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a2a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000556  00800100  00800100  00000a9e  2**0
                  ALLOC
  2 .stab         00000b58  00000000  00000000  00000aa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000006c  00000000  00000000  000015f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00001664  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000bd  00000000  00000000  000016a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000188  00000000  00000000  00001761  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000080  00000000  00000000  000018e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c1  00000000  00000000  00001969  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001d2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000010e  00000000  00000000  00001dec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__vector_16>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	00 00       	nop
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 00       	nop
  76:	00 00       	nop
  78:	00 00       	nop
  7a:	00 00       	nop
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 00       	nop
  82:	00 00       	nop
  84:	00 00       	nop
  86:	00 00       	nop
  88:	96 c1       	rjmp	.+812    	; 0x3b6 <__vector_16>

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61
  96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  9a:	0c 94 13 05 	jmp	0xa26	; 0xa26 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:
 

    
int main(void) {
    
	Kernel_Init();
  a2:	0e 94 97 03 	call	0x72e	; 0x72e <Kernel_Init>

	Kernel_Task_Create(Tasks_Task1,  3);
  a6:	85 eb       	ldi	r24, 0xB5	; 181
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	63 e0       	ldi	r22, 0x03	; 3
  ac:	0e 94 ee 02 	call	0x5dc	; 0x5dc <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task2,  0);
  b0:	8f e8       	ldi	r24, 0x8F	; 143
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	0e 94 ee 02 	call	0x5dc	; 0x5dc <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task3,  2);
  ba:	89 e6       	ldi	r24, 0x69	; 105
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	62 e0       	ldi	r22, 0x02	; 2
  c0:	0e 94 ee 02 	call	0x5dc	; 0x5dc <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task4,  1);
  c4:	83 e4       	ldi	r24, 0x43	; 67
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	0e 94 ee 02 	call	0x5dc	; 0x5dc <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task5,  4);
  ce:	8d e1       	ldi	r24, 0x1D	; 29
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	64 e0       	ldi	r22, 0x04	; 4
  d4:	0e 94 ee 02 	call	0x5dc	; 0x5dc <Kernel_Task_Create>
	
    Debug_Init(0);
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 b5 04 	call	0x96a	; 0x96a <Debug_Init>
    Debug_Tx_Byte_Conf(Kernel_Task_Prio_Get(0));
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	0e 94 a4 04 	call	0x948	; 0x948 <Kernel_Task_Prio_Get>
  e6:	0e 94 d6 04 	call	0x9ac	; 0x9ac <Debug_Tx_Byte_Conf>
    Debug_Tx_Byte_Conf(Kernel_Task_Prio_Get(1));
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	0e 94 a4 04 	call	0x948	; 0x948 <Kernel_Task_Prio_Get>
  f0:	0e 94 d6 04 	call	0x9ac	; 0x9ac <Debug_Tx_Byte_Conf>
	Debug_Tx_Byte_Conf(Kernel_Task_Prio_Get(2));
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	0e 94 a4 04 	call	0x948	; 0x948 <Kernel_Task_Prio_Get>
  fa:	0e 94 d6 04 	call	0x9ac	; 0x9ac <Debug_Tx_Byte_Conf>
	Debug_Tx_Byte_Conf(Kernel_Task_Prio_Get(3));
  fe:	83 e0       	ldi	r24, 0x03	; 3
 100:	0e 94 a4 04 	call	0x948	; 0x948 <Kernel_Task_Prio_Get>
 104:	0e 94 d6 04 	call	0x9ac	; 0x9ac <Debug_Tx_Byte_Conf>
	Debug_Tx_Byte_Conf(Kernel_Task_Prio_Get(4));
 108:	84 e0       	ldi	r24, 0x04	; 4
 10a:	0e 94 a4 04 	call	0x948	; 0x948 <Kernel_Task_Prio_Get>
 10e:	0e 94 d6 04 	call	0x9ac	; 0x9ac <Debug_Tx_Byte_Conf>
	Debug_Tx_Byte_Conf(Kernel_Task_Prio_Get(5));
 112:	85 e0       	ldi	r24, 0x05	; 5
 114:	0e 94 a4 04 	call	0x948	; 0x948 <Kernel_Task_Prio_Get>
 118:	0e 94 d6 04 	call	0x9ac	; 0x9ac <Debug_Tx_Byte_Conf>
	
	Debug_Tx_Byte_Conf(Kernel_NTask_Get());
 11c:	0e 94 a1 04 	call	0x942	; 0x942 <Kernel_NTask_Get>
 120:	0e 94 d6 04 	call	0x9ac	; 0x9ac <Debug_Tx_Byte_Conf>
    Debug_Tx_Byte_Conf(Kernel_High_Prio_Task_ID_Get());
 124:	0e 94 ae 04 	call	0x95c	; 0x95c <Kernel_High_Prio_Task_ID_Get>
 128:	0e 94 d6 04 	call	0x9ac	; 0x9ac <Debug_Tx_Byte_Conf>
	Debug_Tx_Byte_Conf(Kernel_Abs_High_Prio_Task_ID_Get());
 12c:	0e 94 b2 04 	call	0x964	; 0x964 <Kernel_Abs_High_Prio_Task_ID_Get>
 130:	0e 94 d6 04 	call	0x9ac	; 0x9ac <Debug_Tx_Byte_Conf>
    
	Kernel_Start_Tasks();
 134:	0e 94 5f 03 	call	0x6be	; 0x6be <Kernel_Start_Tasks>
 138:	ff cf       	rjmp	.-2      	; 0x138 <SRUDR0+0x72>

0000013a <Tasks_Task9>:
  }
}

void Tasks_Task9(void){
  
  Debug_Init(0);
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 b5 04 	call	0x96a	; 0x96a <Debug_Init>
  
  while(1){
    
	  Debug_Tx_Byte(9);
 142:	89 e0       	ldi	r24, 0x09	; 9
 144:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(9));
 148:	89 e0       	ldi	r24, 0x09	; 9
 14a:	0e 94 8f 04 	call	0x91e	; 0x91e <Kernel_Task_Sleep_Time_Get>
 14e:	0e 94 ce 04 	call	0x99c	; 0x99c <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(9));
 152:	89 e0       	ldi	r24, 0x09	; 9
 154:	0e 94 99 04 	call	0x932	; 0x932 <Kernel_Task_Status_Get>
 158:	80 5e       	subi	r24, 0xE0	; 224
 15a:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 15e:	0e 94 b2 04 	call	0x964	; 0x964 <Kernel_Abs_High_Prio_Task_ID_Get>
 162:	80 5f       	subi	r24, 0xF0	; 240
 164:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 168:	0e 94 ab 04 	call	0x956	; 0x956 <Kernel_Lowest_Prio_Get>
 16c:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Kernel_Task_Sleep(90);
 170:	8a e5       	ldi	r24, 0x5A	; 90
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 ce 03 	call	0x79c	; 0x79c <Kernel_Task_Sleep>
 178:	e4 cf       	rjmp	.-56     	; 0x142 <Tasks_Task9+0x8>

0000017a <Tasks_Task8>:
  }
}

void Tasks_Task8(void){
  
  Debug_Init(0);
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 b5 04 	call	0x96a	; 0x96a <Debug_Init>
  
  while(1){
    
	  Debug_Tx_Byte(8);
 182:	88 e0       	ldi	r24, 0x08	; 8
 184:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(8));
 188:	88 e0       	ldi	r24, 0x08	; 8
 18a:	0e 94 8f 04 	call	0x91e	; 0x91e <Kernel_Task_Sleep_Time_Get>
 18e:	0e 94 ce 04 	call	0x99c	; 0x99c <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(8));
 192:	88 e0       	ldi	r24, 0x08	; 8
 194:	0e 94 99 04 	call	0x932	; 0x932 <Kernel_Task_Status_Get>
 198:	80 5e       	subi	r24, 0xE0	; 224
 19a:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 19e:	0e 94 b2 04 	call	0x964	; 0x964 <Kernel_Abs_High_Prio_Task_ID_Get>
 1a2:	80 5f       	subi	r24, 0xF0	; 240
 1a4:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 1a8:	0e 94 ab 04 	call	0x956	; 0x956 <Kernel_Lowest_Prio_Get>
 1ac:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Kernel_Task_Sleep(80);
 1b0:	80 e5       	ldi	r24, 0x50	; 80
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 ce 03 	call	0x79c	; 0x79c <Kernel_Task_Sleep>
 1b8:	e4 cf       	rjmp	.-56     	; 0x182 <Tasks_Task8+0x8>

000001ba <Tasks_Task7>:
  }
}

void Tasks_Task7(void){
  
  Debug_Init(0);
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 b5 04 	call	0x96a	; 0x96a <Debug_Init>
  
  while(1){
    
	  Debug_Tx_Byte(7);
 1c2:	87 e0       	ldi	r24, 0x07	; 7
 1c4:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(7));
 1c8:	87 e0       	ldi	r24, 0x07	; 7
 1ca:	0e 94 8f 04 	call	0x91e	; 0x91e <Kernel_Task_Sleep_Time_Get>
 1ce:	0e 94 ce 04 	call	0x99c	; 0x99c <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(7));
 1d2:	87 e0       	ldi	r24, 0x07	; 7
 1d4:	0e 94 99 04 	call	0x932	; 0x932 <Kernel_Task_Status_Get>
 1d8:	80 5e       	subi	r24, 0xE0	; 224
 1da:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 1de:	0e 94 b2 04 	call	0x964	; 0x964 <Kernel_Abs_High_Prio_Task_ID_Get>
 1e2:	80 5f       	subi	r24, 0xF0	; 240
 1e4:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 1e8:	0e 94 ab 04 	call	0x956	; 0x956 <Kernel_Lowest_Prio_Get>
 1ec:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Kernel_Task_Sleep(70);
 1f0:	86 e4       	ldi	r24, 0x46	; 70
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 ce 03 	call	0x79c	; 0x79c <Kernel_Task_Sleep>
 1f8:	e4 cf       	rjmp	.-56     	; 0x1c2 <Tasks_Task7+0x8>

000001fa <Tasks_Task6>:
  }
}

void Tasks_Task6(void){
  
  Debug_Init(0);
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 b5 04 	call	0x96a	; 0x96a <Debug_Init>
  
  while(1){
    
    Debug_Tx_Byte(6);
 202:	86 e0       	ldi	r24, 0x06	; 6
 204:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(6));
 208:	86 e0       	ldi	r24, 0x06	; 6
 20a:	0e 94 8f 04 	call	0x91e	; 0x91e <Kernel_Task_Sleep_Time_Get>
 20e:	0e 94 ce 04 	call	0x99c	; 0x99c <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(6));
 212:	86 e0       	ldi	r24, 0x06	; 6
 214:	0e 94 99 04 	call	0x932	; 0x932 <Kernel_Task_Status_Get>
 218:	80 5e       	subi	r24, 0xE0	; 224
 21a:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 21e:	0e 94 b2 04 	call	0x964	; 0x964 <Kernel_Abs_High_Prio_Task_ID_Get>
 222:	80 5f       	subi	r24, 0xF0	; 240
 224:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 228:	0e 94 ab 04 	call	0x956	; 0x956 <Kernel_Lowest_Prio_Get>
 22c:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Kernel_Task_Sleep(60);
 230:	8c e3       	ldi	r24, 0x3C	; 60
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 ce 03 	call	0x79c	; 0x79c <Kernel_Task_Sleep>
 238:	e4 cf       	rjmp	.-56     	; 0x202 <Tasks_Task6+0x8>

0000023a <Tasks_Task5>:
    Kernel_Task_Sleep(40);
	
  }
}

void Tasks_Task5(void){
 23a:	1f 93       	push	r17
  
  DDRC |= (1<<5);
 23c:	3d 9a       	sbi	0x07, 5	; 7

  Debug_Init(0);
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 b5 04 	call	0x96a	; 0x96a <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<5);
 246:	10 e2       	ldi	r17, 0x20	; 32
 248:	88 b1       	in	r24, 0x08	; 8
 24a:	81 27       	eor	r24, r17
 24c:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(5);
 24e:	85 e0       	ldi	r24, 0x05	; 5
 250:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(5));
 254:	85 e0       	ldi	r24, 0x05	; 5
 256:	0e 94 8f 04 	call	0x91e	; 0x91e <Kernel_Task_Sleep_Time_Get>
 25a:	0e 94 ce 04 	call	0x99c	; 0x99c <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(5));
 25e:	85 e0       	ldi	r24, 0x05	; 5
 260:	0e 94 99 04 	call	0x932	; 0x932 <Kernel_Task_Status_Get>
 264:	80 5e       	subi	r24, 0xE0	; 224
 266:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 26a:	0e 94 b2 04 	call	0x964	; 0x964 <Kernel_Abs_High_Prio_Task_ID_Get>
 26e:	80 5f       	subi	r24, 0xF0	; 240
 270:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 274:	0e 94 ab 04 	call	0x956	; 0x956 <Kernel_Lowest_Prio_Get>
 278:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Kernel_Task_Sleep(50);
 27c:	82 e3       	ldi	r24, 0x32	; 50
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 ce 03 	call	0x79c	; 0x79c <Kernel_Task_Sleep>
 284:	e1 cf       	rjmp	.-62     	; 0x248 <Tasks_Task5+0xe>

00000286 <Tasks_Task4>:
    Kernel_Task_Sleep(30);
	
  }
}

void Tasks_Task4(void){
 286:	1f 93       	push	r17
  
  DDRC |= (1<<4);
 288:	3c 9a       	sbi	0x07, 4	; 7

  Debug_Init(0);
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 b5 04 	call	0x96a	; 0x96a <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<4);
 292:	10 e1       	ldi	r17, 0x10	; 16
 294:	88 b1       	in	r24, 0x08	; 8
 296:	81 27       	eor	r24, r17
 298:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(4);
 29a:	84 e0       	ldi	r24, 0x04	; 4
 29c:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(4));
 2a0:	84 e0       	ldi	r24, 0x04	; 4
 2a2:	0e 94 8f 04 	call	0x91e	; 0x91e <Kernel_Task_Sleep_Time_Get>
 2a6:	0e 94 ce 04 	call	0x99c	; 0x99c <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(4));
 2aa:	84 e0       	ldi	r24, 0x04	; 4
 2ac:	0e 94 99 04 	call	0x932	; 0x932 <Kernel_Task_Status_Get>
 2b0:	80 5e       	subi	r24, 0xE0	; 224
 2b2:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 2b6:	0e 94 b2 04 	call	0x964	; 0x964 <Kernel_Abs_High_Prio_Task_ID_Get>
 2ba:	80 5f       	subi	r24, 0xF0	; 240
 2bc:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 2c0:	0e 94 ab 04 	call	0x956	; 0x956 <Kernel_Lowest_Prio_Get>
 2c4:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Kernel_Task_Sleep(40);
 2c8:	88 e2       	ldi	r24, 0x28	; 40
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 ce 03 	call	0x79c	; 0x79c <Kernel_Task_Sleep>
 2d0:	e1 cf       	rjmp	.-62     	; 0x294 <Tasks_Task4+0xe>

000002d2 <Tasks_Task3>:
    Kernel_Task_Sleep(20);
	
  }
}

void Tasks_Task3(void){
 2d2:	1f 93       	push	r17
  
  DDRC |= (1<<3);
 2d4:	3b 9a       	sbi	0x07, 3	; 7

  Debug_Init(0);
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 b5 04 	call	0x96a	; 0x96a <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<3);
 2de:	18 e0       	ldi	r17, 0x08	; 8
 2e0:	88 b1       	in	r24, 0x08	; 8
 2e2:	81 27       	eor	r24, r17
 2e4:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(3);
 2e6:	83 e0       	ldi	r24, 0x03	; 3
 2e8:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(3));
 2ec:	83 e0       	ldi	r24, 0x03	; 3
 2ee:	0e 94 8f 04 	call	0x91e	; 0x91e <Kernel_Task_Sleep_Time_Get>
 2f2:	0e 94 ce 04 	call	0x99c	; 0x99c <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(3));
 2f6:	83 e0       	ldi	r24, 0x03	; 3
 2f8:	0e 94 99 04 	call	0x932	; 0x932 <Kernel_Task_Status_Get>
 2fc:	80 5e       	subi	r24, 0xE0	; 224
 2fe:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 302:	0e 94 b2 04 	call	0x964	; 0x964 <Kernel_Abs_High_Prio_Task_ID_Get>
 306:	80 5f       	subi	r24, 0xF0	; 240
 308:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 30c:	0e 94 ab 04 	call	0x956	; 0x956 <Kernel_Lowest_Prio_Get>
 310:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Kernel_Task_Sleep(30);
 314:	8e e1       	ldi	r24, 0x1E	; 30
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 ce 03 	call	0x79c	; 0x79c <Kernel_Task_Sleep>
 31c:	e1 cf       	rjmp	.-62     	; 0x2e0 <Tasks_Task3+0xe>

0000031e <Tasks_Task2>:
    Kernel_Task_Sleep(10);
    
  }
}

void Tasks_Task2(void){
 31e:	1f 93       	push	r17
  
  DDRC |= (1<<2);
 320:	3a 9a       	sbi	0x07, 2	; 7

  Debug_Init(0);
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 b5 04 	call	0x96a	; 0x96a <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<2);
 32a:	14 e0       	ldi	r17, 0x04	; 4
 32c:	88 b1       	in	r24, 0x08	; 8
 32e:	81 27       	eor	r24, r17
 330:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(2);
 332:	82 e0       	ldi	r24, 0x02	; 2
 334:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(2));
 338:	82 e0       	ldi	r24, 0x02	; 2
 33a:	0e 94 8f 04 	call	0x91e	; 0x91e <Kernel_Task_Sleep_Time_Get>
 33e:	0e 94 ce 04 	call	0x99c	; 0x99c <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(2));
 342:	82 e0       	ldi	r24, 0x02	; 2
 344:	0e 94 99 04 	call	0x932	; 0x932 <Kernel_Task_Status_Get>
 348:	80 5e       	subi	r24, 0xE0	; 224
 34a:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 34e:	0e 94 b2 04 	call	0x964	; 0x964 <Kernel_Abs_High_Prio_Task_ID_Get>
 352:	80 5f       	subi	r24, 0xF0	; 240
 354:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 358:	0e 94 ab 04 	call	0x956	; 0x956 <Kernel_Lowest_Prio_Get>
 35c:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Kernel_Task_Sleep(20);
 360:	84 e1       	ldi	r24, 0x14	; 20
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 ce 03 	call	0x79c	; 0x79c <Kernel_Task_Sleep>
 368:	e1 cf       	rjmp	.-62     	; 0x32c <Tasks_Task2+0xe>

0000036a <Tasks_Task1>:
#include <util/delay.h>
#include "kernel.h"
#include "tasks.h"
#include "debug.h"

void Tasks_Task1(void){
 36a:	1f 93       	push	r17
  
  DDRC |= (1<<1);
 36c:	39 9a       	sbi	0x07, 1	; 7

  Debug_Init(0);
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 b5 04 	call	0x96a	; 0x96a <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<1);
 376:	12 e0       	ldi	r17, 0x02	; 2
 378:	88 b1       	in	r24, 0x08	; 8
 37a:	81 27       	eor	r24, r17
 37c:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(1);
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	0e 94 8f 04 	call	0x91e	; 0x91e <Kernel_Task_Sleep_Time_Get>
 38a:	0e 94 ce 04 	call	0x99c	; 0x99c <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	0e 94 99 04 	call	0x932	; 0x932 <Kernel_Task_Status_Get>
 394:	80 5e       	subi	r24, 0xE0	; 224
 396:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 39a:	0e 94 b2 04 	call	0x964	; 0x964 <Kernel_Abs_High_Prio_Task_ID_Get>
 39e:	80 5f       	subi	r24, 0xF0	; 240
 3a0:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 3a4:	0e 94 ab 04 	call	0x956	; 0x956 <Kernel_Lowest_Prio_Get>
 3a8:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
    Kernel_Task_Sleep(10);
 3ac:	8a e0       	ldi	r24, 0x0A	; 10
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 ce 03 	call	0x79c	; 0x79c <Kernel_Task_Sleep>
 3b4:	e1 cf       	rjmp	.-62     	; 0x378 <Tasks_Task1+0xe>

000003b6 <__vector_16>:


;;=================================ISR execution starting===================================;; 
.global  __vector_16                                                                           
    __vector_16:                                          ;total 26.13uS @8MHz    (211 clocks) 
	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 3b6:	5d 9a       	sbi	0x0b, 5	; 11
        KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 3b8:	0f 92       	push	r0
 3ba:	0f b6       	in	r0, 0x3f	; 63
 3bc:	0f 92       	push	r0
 3be:	1f 92       	push	r1
 3c0:	11 24       	eor	r1, r1
 3c2:	2f 92       	push	r2
 3c4:	3f 92       	push	r3
 3c6:	4f 92       	push	r4
 3c8:	5f 92       	push	r5
 3ca:	6f 92       	push	r6
 3cc:	7f 92       	push	r7
 3ce:	8f 92       	push	r8
 3d0:	9f 92       	push	r9
 3d2:	af 92       	push	r10
 3d4:	bf 92       	push	r11
 3d6:	cf 92       	push	r12
 3d8:	df 92       	push	r13
 3da:	ef 92       	push	r14
 3dc:	ff 92       	push	r15
 3de:	0f 93       	push	r16
 3e0:	1f 93       	push	r17
 3e2:	2f 93       	push	r18
 3e4:	3f 93       	push	r19
 3e6:	4f 93       	push	r20
 3e8:	5f 93       	push	r21
 3ea:	6f 93       	push	r22
 3ec:	7f 93       	push	r23
 3ee:	8f 93       	push	r24
 3f0:	9f 93       	push	r25
 3f2:	af 93       	push	r26
 3f4:	bf 93       	push	r27
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	ef 93       	push	r30
 3fc:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 3fe:	1d b7       	in	r17, 0x3d	; 61
 400:	2e b7       	in	r18, 0x3e	; 62
 402:	ec e0       	ldi	r30, 0x0C	; 12
 404:	f1 e0       	ldi	r31, 0x01	; 1
 406:	00 91 07 01 	lds	r16, 0x0107
 40a:	00 0f       	add	r16, r16
 40c:	e0 0f       	add	r30, r16
 40e:	00 e0       	ldi	r16, 0x00	; 0
 410:	f0 1f       	adc	r31, r16
 412:	10 83       	st	Z, r17
 414:	21 83       	std	Z+1, r18	; 0x01
		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 416:	00 91 06 01 	lds	r16, 0x0106
 41a:	00 93 46 00 	sts	0x0046, r16
		KER_TICK_INCREMENT                                ;increment tick counter ( 27 clocks) 
 41e:	00 91 00 01 	lds	r16, 0x0100
 422:	03 95       	inc	r16
 424:	00 93 00 01 	sts	0x0100, r16
 428:	10 e0       	ldi	r17, 0x00	; 0
 42a:	00 91 01 01 	lds	r16, 0x0101
 42e:	01 1f       	adc	r16, r17
 430:	00 93 01 01 	sts	0x0101, r16
 434:	00 91 02 01 	lds	r16, 0x0102
 438:	01 1f       	adc	r16, r17
 43a:	00 93 02 01 	sts	0x0102, r16
 43e:	00 91 03 01 	lds	r16, 0x0103
 442:	01 1f       	adc	r16, r17
 444:	00 93 03 01 	sts	0x0103, r16
 448:	00 91 04 01 	lds	r16, 0x0104
 44c:	01 1f       	adc	r16, r17
 44e:	00 93 04 01 	sts	0x0104, r16
		LDI    R24               , SCH_MODE_HANDLER       ;set sch mode           (  1 clock ) 
 452:	80 e0       	ldi	r24, 0x00	; 0
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 14 clocks) 
 454:	0f ef       	ldi	r16, 0xFF	; 255
 456:	00 93 09 01 	sts	0x0109, r16
 45a:	00 e0       	ldi	r16, 0x00	; 0
 45c:	00 93 0a 01 	sts	0x010A, r16
 460:	98 2f       	mov	r25, r24

00000462 <_KER_SCH_LOOP8>:
 462:	00 93 07 01 	sts	0x0107, r16
 466:	89 2f       	mov	r24, r25
 468:	e2 e4       	ldi	r30, 0x42	; 66
 46a:	f1 e0       	ldi	r31, 0x01	; 1
 46c:	00 91 07 01 	lds	r16, 0x0107
 470:	00 0f       	add	r16, r16
 472:	e0 0f       	add	r30, r16
 474:	00 e0       	ldi	r16, 0x00	; 0
 476:	f0 1f       	adc	r31, r16
 478:	00 81       	ld	r16, Z
 47a:	11 81       	ldd	r17, Z+1	; 0x01
 47c:	20 2f       	mov	r18, r16
 47e:	21 2b       	or	r18, r17
 480:	59 f0       	breq	.+22     	; 0x498 <_VAL_NULL9>
 482:	81 30       	cpi	r24, 0x01	; 1
 484:	99 f0       	breq	.+38     	; 0x4ac <_VAL_NOT_NULL9>
 486:	21 e0       	ldi	r18, 0x01	; 1
 488:	02 1b       	sub	r16, r18
 48a:	20 e0       	ldi	r18, 0x00	; 0
 48c:	12 0b       	sbc	r17, r18
 48e:	00 83       	st	Z, r16
 490:	11 83       	std	Z+1, r17	; 0x01
 492:	20 2f       	mov	r18, r16
 494:	21 2b       	or	r18, r17
 496:	51 f4       	brne	.+20     	; 0x4ac <_VAL_NOT_NULL9>

00000498 <_VAL_NULL9>:
 498:	ee e2       	ldi	r30, 0x2E	; 46
 49a:	f1 e0       	ldi	r31, 0x01	; 1
 49c:	00 91 07 01 	lds	r16, 0x0107
 4a0:	e0 0f       	add	r30, r16
 4a2:	00 e0       	ldi	r16, 0x00	; 0
 4a4:	f0 1f       	adc	r31, r16
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	80 83       	st	Z, r24
 4aa:	01 c0       	rjmp	.+2      	; 0x4ae <_EXIT_SLP_TIME9>

000004ac <_VAL_NOT_NULL9>:
 4ac:	80 e0       	ldi	r24, 0x00	; 0

000004ae <_EXIT_SLP_TIME9>:
 4ae:	81 30       	cpi	r24, 0x01	; 1
 4b0:	91 f4       	brne	.+36     	; 0x4d6 <_KER_SCH_NEXT8>
 4b2:	e8 e3       	ldi	r30, 0x38	; 56
 4b4:	f1 e0       	ldi	r31, 0x01	; 1
 4b6:	00 e0       	ldi	r16, 0x00	; 0
 4b8:	80 91 07 01 	lds	r24, 0x0107
 4bc:	e8 0f       	add	r30, r24
 4be:	f0 1f       	adc	r31, r16
 4c0:	80 81       	ld	r24, Z
 4c2:	00 91 09 01 	lds	r16, 0x0109
 4c6:	80 17       	cp	r24, r16
 4c8:	30 f4       	brcc	.+12     	; 0x4d6 <_KER_SCH_NEXT8>
 4ca:	80 93 09 01 	sts	0x0109, r24
 4ce:	00 91 07 01 	lds	r16, 0x0107
 4d2:	00 93 0a 01 	sts	0x010A, r16

000004d6 <_KER_SCH_NEXT8>:
 4d6:	00 91 07 01 	lds	r16, 0x0107
 4da:	03 95       	inc	r16
 4dc:	10 91 08 01 	lds	r17, 0x0108
 4e0:	01 17       	cp	r16, r17
 4e2:	08 f4       	brcc	.+2      	; 0x4e6 <_KER_SCH_EXIT8>
 4e4:	be cf       	rjmp	.-132    	; 0x462 <_KER_SCH_LOOP8>

000004e6 <_KER_SCH_EXIT8>:
 4e6:	00 91 0a 01 	lds	r16, 0x010A
 4ea:	00 93 07 01 	sts	0x0107, r16
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 4ee:	ec e0       	ldi	r30, 0x0C	; 12
 4f0:	f1 e0       	ldi	r31, 0x01	; 1
 4f2:	00 91 07 01 	lds	r16, 0x0107
 4f6:	00 0f       	add	r16, r16
 4f8:	e0 0f       	add	r30, r16
 4fa:	00 e0       	ldi	r16, 0x00	; 0
 4fc:	f0 1f       	adc	r31, r16
 4fe:	00 81       	ld	r16, Z
 500:	11 81       	ldd	r17, Z+1	; 0x01
 502:	0d bf       	out	0x3d, r16	; 61
 504:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
 506:	ff 91       	pop	r31
 508:	ef 91       	pop	r30
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	bf 91       	pop	r27
 510:	af 91       	pop	r26
 512:	9f 91       	pop	r25
 514:	8f 91       	pop	r24
 516:	7f 91       	pop	r23
 518:	6f 91       	pop	r22
 51a:	5f 91       	pop	r21
 51c:	4f 91       	pop	r20
 51e:	3f 91       	pop	r19
 520:	2f 91       	pop	r18
 522:	1f 91       	pop	r17
 524:	0f 91       	pop	r16
 526:	ff 90       	pop	r15
 528:	ef 90       	pop	r14
 52a:	df 90       	pop	r13
 52c:	cf 90       	pop	r12
 52e:	bf 90       	pop	r11
 530:	af 90       	pop	r10
 532:	9f 90       	pop	r9
 534:	8f 90       	pop	r8
 536:	7f 90       	pop	r7
 538:	6f 90       	pop	r6
 53a:	5f 90       	pop	r5
 53c:	4f 90       	pop	r4
 53e:	3f 90       	pop	r3
 540:	2f 90       	pop	r2
 542:	1f 90       	pop	r1
 544:	0f 90       	pop	r0
 546:	0f be       	out	0x3f, r0	; 63
 548:	0f 90       	pop	r0
	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 54a:	5d 98       	cbi	0x0b, 5	; 11
		RETI                                              ;return from interrupt  (  4 clocks) 
 54c:	18 95       	reti

0000054e <Kernel_SysTick_Reg_Init>:


;;================================SysTick reg init starting=================================;; 
Kernel_SysTick_Reg_Init:                                  ;total 10.5uS @8MHz     ( 84 clocks) 
        ;arg1 -> prescaler R24, arg2 -> reload val R22                                         
        CLI                                               ;disable global int     (  1 clock ) 
 54e:	f8 94       	cli
		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 550:	5d 98       	cbi	0x0b, 5	; 11
 552:	55 9a       	sbi	0x0a, 5	; 10
        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 554:	a0 91 20 01 	lds	r26, 0x0120
 558:	b0 91 21 01 	lds	r27, 0x0121
 55c:	0d b7       	in	r16, 0x3d	; 61
 55e:	1e b7       	in	r17, 0x3e	; 62
 560:	0d 93       	st	X+, r16
 562:	1d 93       	st	X+, r17
 564:	ed 93       	st	X+, r30
 566:	fd 93       	st	X+, r31
 568:	a0 93 20 01 	sts	0x0120, r26
 56c:	b0 93 21 01 	sts	0x0121, r27
		;clear reg                                                                             
		LDI   R16                , 0x00                   ;set 0x00 to R16        (  1 clock ) 
 570:	00 e0       	ldi	r16, 0x00	; 0
		;clear tick counter                                                                    
		STS   KerBase+OFB_TICK0  , R16                    ;clear  KerBase[0]      (  2 clocks) 
 572:	00 93 00 01 	sts	0x0100, r16
		STS   KerBase+OFB_TICK1  , R16                    ;clear  KerBase[1]      (  2 clocks) 
 576:	00 93 01 01 	sts	0x0101, r16
		STS   KerBase+OFB_TICK2  , R16                    ;clear  KerBase[2]      (  2 clocks) 
 57a:	00 93 02 01 	sts	0x0102, r16
		STS   KerBase+OFB_TICK3  , R16                    ;clear  KerBase[3]      (  2 clocks) 
 57e:	00 93 03 01 	sts	0x0103, r16
		STS   KerBase+OFB_TICK4  , R16                    ;clear  KerBase[4]      (  2 clocks) 
 582:	00 93 04 01 	sts	0x0104, r16
		;clear system registers                                                                
		STS   KerBase+OFB_PRS    , R16                    ;clear  KerBase[5]      (  2 clocks) 
 586:	00 93 05 01 	sts	0x0105, r16
		STS   KerBase+OFB_RLD    , R16                    ;clear  KerBase[6]      (  2 clocks) 
 58a:	00 93 06 01 	sts	0x0106, r16
		STS   KerBase+OFB_TID    , R16                    ;clear  KerBase[7]      (  2 clocks) 
 58e:	00 93 07 01 	sts	0x0107, r16
		STS   KerBase+OFB_NTSK   , R16                    ;clear  KerBase[8]      (  2 clocks) 
 592:	00 93 08 01 	sts	0x0108, r16
        STS   KerBase+OFB_PTID   , R16                    ;clear  KerBase[9]      (  2 clocks) 
 596:	00 93 0a 01 	sts	0x010A, r16
		;clear all timer registers                                                             
		STS   SRTCCR0A           , R16                    ;clear TCCR0A           (  2 clocks) 
 59a:	00 93 44 00 	sts	0x0044, r16
		STS   SRTCCR0B           , R16                    ;clear TCCR0B           (  2 clocks) 
 59e:	00 93 45 00 	sts	0x0045, r16
		STS   SRTIMSK0           , R16                    ;clear TIMSK0           (  2 clocks) 
 5a2:	00 93 6e 00 	sts	0x006E, r16
		STS   SRTIFR0            , R16                    ;clear TIFR0            (  2 clocks) 
 5a6:	00 93 35 00 	sts	0x0035, r16
		STS   SROCR0A            , R16                    ;clear OCR0A            (  2 clocks) 
 5aa:	00 93 47 00 	sts	0x0047, r16
		STS   SROCR0B            , R16                    ;clear OCR0B            (  2 clocks) 
 5ae:	00 93 48 00 	sts	0x0048, r16
		STS   SRTCNT0            , R16                    ;clear TCNT0            (  2 clocks) 
 5b2:	00 93 46 00 	sts	0x0046, r16
		;save values for future use                                                            
		STS   KerBase+OFB_PRS    , R24                    ;KerBase[5] prescaler   (  2 clocks) 
 5b6:	80 93 05 01 	sts	0x0105, r24
		STS   KerBase+OFB_RLD    , R22                    ;KerBase[6] reload val  (  2 clocks) 
 5ba:	60 93 06 01 	sts	0x0106, r22
        KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 5be:	a0 91 20 01 	lds	r26, 0x0120
 5c2:	b0 91 21 01 	lds	r27, 0x0121
 5c6:	fe 91       	ld	r31, -X
 5c8:	ee 91       	ld	r30, -X
 5ca:	1e 91       	ld	r17, -X
 5cc:	0e 91       	ld	r16, -X
 5ce:	0d bf       	out	0x3d, r16	; 61
 5d0:	1e bf       	out	0x3e, r17	; 62
 5d2:	a0 93 20 01 	sts	0x0120, r26
 5d6:	b0 93 21 01 	sts	0x0121, r27
		RET                                               ;return from subroutine (  4 clocks) 
 5da:	08 95       	ret

000005dc <Kernel_Task_Create>:


;;===============================kernel task create starting================================;; 
Kernel_Task_Create:                                       ;total 19.86uS @8MHz    (162 clocks) 
        ;func_ptr->R25:R24, task_priority->R22                                                 
        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 5dc:	a0 91 20 01 	lds	r26, 0x0120
 5e0:	b0 91 21 01 	lds	r27, 0x0121
 5e4:	0d b7       	in	r16, 0x3d	; 61
 5e6:	1e b7       	in	r17, 0x3e	; 62
 5e8:	0d 93       	st	X+, r16
 5ea:	1d 93       	st	X+, r17
 5ec:	ed 93       	st	X+, r30
 5ee:	fd 93       	st	X+, r31
 5f0:	a0 93 20 01 	sts	0x0120, r26
 5f4:	b0 93 21 01 	sts	0x0121, r27
		;across this function, R16 will be used as task_id                                     
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 5f8:	00 91 07 01 	lds	r16, 0x0107
		LDI   R17                , 0x00                   ;clear reg              (  1 clock ) 
 5fc:	10 e0       	ldi	r17, 0x00	; 0
		;set priority to KerSchPr+task_id                                                      
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 5fe:	e8 e3       	ldi	r30, 0x38	; 56
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 600:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
 602:	e0 0f       	add	r30, r16
		ADC   ZH                 , R17                    ;add high byte+carry    (  1 clock ) 
 604:	f1 1f       	adc	r31, r17
		ST    Z                  , R22                    ;save priority          (  2 clocks) 
 606:	60 83       	st	Z, r22
		;stack pointer for current task (KerStack + KER_STK_SZ*(task_id+1) - 1) ->stack top    
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 608:	00 91 07 01 	lds	r16, 0x0107
		MOV   R17                , R16                    ;load task_id           (  1 clock ) 
 60c:	10 2f       	mov	r17, r16
		INC   R17                                         ;increment task_id      (  1 clock ) 
 60e:	13 95       	inc	r17
		LDI   R18                , KER_STK_SZ             ;load stack size        (  1 clock ) 
 610:	20 e8       	ldi	r18, 0x80	; 128
		MUL   R17                , R18                    ;multiply to get offset (  2 clocks) 
 612:	12 9f       	mul	r17, r18
		MOV   ZL                 , R0                     ;load multiplied low    (  1 clocks) 
 614:	e0 2d       	mov	r30, r0
		MOV   ZH                 , R1                     ;load multiplied high   (  1 clocks) 
 616:	f1 2d       	mov	r31, r1
		SBIW  ZL                 , 0x01                   ;dec multiplied val-1   (  2 clocks) 
 618:	31 97       	sbiw	r30, 0x01	; 1
		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 61a:	11 24       	eor	r1, r1
		LDI   R17                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
 61c:	16 e5       	ldi	r17, 0x56	; 86
		LDI   R18                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
 61e:	21 e0       	ldi	r18, 0x01	; 1
		ADD   ZL                 , R17                    ;add low bytes          (  1 clock ) 
 620:	e1 0f       	add	r30, r17
		ADC   ZH                 , R18                    ;add high bytes+carry   (  1 clock ) 
 622:	f2 1f       	adc	r31, r18
		OUT   IOSPL              , ZL                     ;load SPL               (  1 clock ) 
 624:	ed bf       	out	0x3d, r30	; 61
        OUT   IOSPH              , ZH                     ;load SPH               (  1 clock ) 
 626:	fe bf       	out	0x3e, r31	; 62
		;function argument directly returns word address                                       
	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
 628:	8f 93       	push	r24
		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 62a:	9f 93       	push	r25
		;push context to stack of this task                                                    
		KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 62c:	0f 92       	push	r0
 62e:	0f b6       	in	r0, 0x3f	; 63
 630:	0f 92       	push	r0
 632:	1f 92       	push	r1
 634:	11 24       	eor	r1, r1
 636:	2f 92       	push	r2
 638:	3f 92       	push	r3
 63a:	4f 92       	push	r4
 63c:	5f 92       	push	r5
 63e:	6f 92       	push	r6
 640:	7f 92       	push	r7
 642:	8f 92       	push	r8
 644:	9f 92       	push	r9
 646:	af 92       	push	r10
 648:	bf 92       	push	r11
 64a:	cf 92       	push	r12
 64c:	df 92       	push	r13
 64e:	ef 92       	push	r14
 650:	ff 92       	push	r15
 652:	0f 93       	push	r16
 654:	1f 93       	push	r17
 656:	2f 93       	push	r18
 658:	3f 93       	push	r19
 65a:	4f 93       	push	r20
 65c:	5f 93       	push	r21
 65e:	6f 93       	push	r22
 660:	7f 93       	push	r23
 662:	8f 93       	push	r24
 664:	9f 93       	push	r25
 666:	af 93       	push	r26
 668:	bf 93       	push	r27
 66a:	cf 93       	push	r28
 66c:	df 93       	push	r29
 66e:	ef 93       	push	r30
 670:	ff 93       	push	r31
		;read stack pointer of current task (necessary when restore)                           
		IN    R17                , IOSPL                  ;read SPL               (  1 clock ) 
 672:	1d b7       	in	r17, 0x3d	; 61
        IN    R18                , IOSPH                  ;read SPH               (  1 clock ) 
 674:	2e b7       	in	r18, 0x3e	; 62
		;calculate the address where current task's SP will be stored and store SP             
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 676:	00 91 07 01 	lds	r16, 0x0107
		MOV   R19                , R16                    ;copy task_id           (  1 clock ) 
 67a:	30 2f       	mov	r19, r16
		LSL   R19                                         ;left shift to multiply (  1 clock ) 
 67c:	33 0f       	add	r19, r19
		LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 67e:	ec e0       	ldi	r30, 0x0C	; 12
		LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 680:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R19                    ;add offset to array    (  1 clock ) 
 682:	e3 0f       	add	r30, r19
		LDI   R16                , 0x00                   ;clear reg              (  1 clock ) 
 684:	00 e0       	ldi	r16, 0x00	; 0
		ADC   ZH                 , R16                    ;add carry if any       (  1 clock ) 
 686:	f0 1f       	adc	r31, r16
		ST    Z+                 , R17                    ;SPL at KerPSp+offset   (  2 clocks) 
 688:	11 93       	st	Z+, r17
		ST    Z                  , R18                    ;SPH at KerPSp+offset   (  2 clocks) 
 68a:	20 83       	st	Z, r18
		;increment task_id                                                                     
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 68c:	00 91 07 01 	lds	r16, 0x0107
		INC   R16                                         ;increment task_id      (  1 clock ) 
 690:	03 95       	inc	r16
		STS   KerBase+OFB_TID    , R16                    ;store task_id          (  2 clocks) 
 692:	00 93 07 01 	sts	0x0107, r16
		;increment ntask                                                                       
		LDS   R16                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 696:	00 91 08 01 	lds	r16, 0x0108
		INC   R16                                         ;increment ntask        (  1 clock ) 
 69a:	03 95       	inc	r16
		STS   KerBase+OFB_NTSK   , R16                    ;store ntask            (  2 clocks) 
 69c:	00 93 08 01 	sts	0x0108, r16
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 6a0:	a0 91 20 01 	lds	r26, 0x0120
 6a4:	b0 91 21 01 	lds	r27, 0x0121
 6a8:	fe 91       	ld	r31, -X
 6aa:	ee 91       	ld	r30, -X
 6ac:	1e 91       	ld	r17, -X
 6ae:	0e 91       	ld	r16, -X
 6b0:	0d bf       	out	0x3d, r16	; 61
 6b2:	1e bf       	out	0x3e, r17	; 62
 6b4:	a0 93 20 01 	sts	0x0120, r26
 6b8:	b0 93 21 01 	sts	0x0121, r27
		RET                                               ;return from subroutine (  4 clocks) 
 6bc:	08 95       	ret

000006be <Kernel_Start_Tasks>:


;;=================================kernel start tasks starting==============================;; 
Kernel_Start_Tasks:                                       ;total 12.88uS @8MHz    (103 clocks) 
		;clear task_id                                                                         
		LDI   R16                , 0x00                   ;load task_id           (  2 clocks) 
 6be:	00 e0       	ldi	r16, 0x00	; 0
		STS   KerBase+OFB_TID    , R16                    ;store task_id          (  2 clocks) 
 6c0:	00 93 07 01 	sts	0x0107, r16
		;load ZP with addr+offset                                                              
		LDI   ZL                 , lo8(KerPSP+0x00)       ;fetch ZPL KerPSP->TID0 (  1 clock ) 
 6c4:	ec e0       	ldi	r30, 0x0C	; 12
		LDI   ZH                 , hi8(KerPSP+0x00)       ;fetch ZPH KerPSP->TID0 (  1 clock ) 
 6c6:	f1 e0       	ldi	r31, 0x01	; 1
		;load task_id 0 task's SP                                                              
		LD    R16                , Z+                     ;load val from Z, inc Z (  2 clocks) 
 6c8:	01 91       	ld	r16, Z+
		LD    R17                , Z                      ;load val from Z+1      (  2 clocks) 
 6ca:	10 81       	ld	r17, Z
        ;set task_id=0 task's SP                                                               
		OUT   IOSPL              , R16                    ;load SPL               (  1 clock ) 
 6cc:	0d bf       	out	0x3d, r16	; 61
        OUT   IOSPH              , R17                    ;load SPH               (  1 clock ) 
 6ce:	1e bf       	out	0x3e, r17	; 62
        ;forcefully restore context, in ISR it will be stored automatically                    
		KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
 6d0:	ff 91       	pop	r31
 6d2:	ef 91       	pop	r30
 6d4:	df 91       	pop	r29
 6d6:	cf 91       	pop	r28
 6d8:	bf 91       	pop	r27
 6da:	af 91       	pop	r26
 6dc:	9f 91       	pop	r25
 6de:	8f 91       	pop	r24
 6e0:	7f 91       	pop	r23
 6e2:	6f 91       	pop	r22
 6e4:	5f 91       	pop	r21
 6e6:	4f 91       	pop	r20
 6e8:	3f 91       	pop	r19
 6ea:	2f 91       	pop	r18
 6ec:	1f 91       	pop	r17
 6ee:	0f 91       	pop	r16
 6f0:	ff 90       	pop	r15
 6f2:	ef 90       	pop	r14
 6f4:	df 90       	pop	r13
 6f6:	cf 90       	pop	r12
 6f8:	bf 90       	pop	r11
 6fa:	af 90       	pop	r10
 6fc:	9f 90       	pop	r9
 6fe:	8f 90       	pop	r8
 700:	7f 90       	pop	r7
 702:	6f 90       	pop	r6
 704:	5f 90       	pop	r5
 706:	4f 90       	pop	r4
 708:	3f 90       	pop	r3
 70a:	2f 90       	pop	r2
 70c:	1f 90       	pop	r1
 70e:	0f 90       	pop	r0
 710:	0f be       	out	0x3f, r0	; 63
 712:	0f 90       	pop	r0
		;config timer for system tick                                                          
		KER_TIMER_INIT                                    ;init timer, int enable ( 12 clocks) 
 714:	00 91 05 01 	lds	r16, 0x0105
 718:	10 91 06 01 	lds	r17, 0x0106
 71c:	00 93 45 00 	sts	0x0045, r16
 720:	10 93 46 00 	sts	0x0046, r17
 724:	01 e0       	ldi	r16, 0x01	; 1
 726:	00 93 6e 00 	sts	0x006E, r16
 72a:	78 94       	sei
		;execute return to jump to task0, pushed while task init                               
		RET                                               ;return from subroutine (  4 clocks) 
 72c:	08 95       	ret

0000072e <Kernel_Init>:


;;===================================kernel init starting===================================;; 
Kernel_Init:                                              ;total 37.00uS @8MHz    (296 clocks) 
		;save necessary registers and MSP                                                      
		CLR   R1                                          ;gcc expects            (  1 clock ) 
 72e:	11 24       	eor	r1, r1
        ;store stack top (for MSP) addr to KerSSZ+OFM_MSPI0:1                                  
		LDI   R16                , lo8(KerSSZ+OFM_MSPS)   ;load low address       (  1 clock ) 
 730:	02 e2       	ldi	r16, 0x22	; 34
		LDI   R17                , hi8(KerSSZ+OFM_MSPS)   ;load high address      (  1 clock ) 
 732:	11 e0       	ldi	r17, 0x01	; 1
        STS   KerSSZ+OFM_MSPI+0  , R16                    ;set mspi to stack top  (  2 clocks) 
 734:	00 93 20 01 	sts	0x0120, r16
		STS   KerSSZ+OFM_MSPI+1  , R17                    ;set mspi to stack top  (  2 clocks) 
 738:	10 93 21 01 	sts	0x0121, r17
		KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 73c:	a0 91 20 01 	lds	r26, 0x0120
 740:	b0 91 21 01 	lds	r27, 0x0121
 744:	0d b7       	in	r16, 0x3d	; 61
 746:	1e b7       	in	r17, 0x3e	; 62
 748:	0d 93       	st	X+, r16
 74a:	1d 93       	st	X+, r17
 74c:	ed 93       	st	X+, r30
 74e:	fd 93       	st	X+, r31
 750:	a0 93 20 01 	sts	0x0120, r26
 754:	b0 93 21 01 	sts	0x0121, r27
		;init timer for kernel                                                                 
		LDI   R24                , 0x03                   ;set prescaler          (  1 clock ) 
 758:	83 e0       	ldi	r24, 0x03	; 3
		LDI   R22                , 0x82                   ;set reload val         (  1 clock ) 
 75a:	62 e8       	ldi	r22, 0x82	; 130
		CALL  Kernel_SysTick_Reg_Init                     ;init timer             ( 84 clocks) 
 75c:	0e 94 a7 02 	call	0x54e	; 0x54e <Kernel_SysTick_Reg_Init>
		;create idle task at task_id 0, priority 0xFF (lowest)                                 
		LDI   R24                , lo8(Kernel_Task_Idle)  ;load func addr low     (  1 clock ) 
 760:	8c e8       	ldi	r24, 0x8C	; 140
		LDI   R25                , hi8(Kernel_Task_Idle)  ;load func addr high    (  1 clock ) 
 762:	97 e0       	ldi	r25, 0x07	; 7
		LSR   R25                                         ;right shift to divide  (  1 clock ) 
 764:	96 95       	lsr	r25
		ROR   R24                                         ;rotate right th carry  (  1 clock ) 
 766:	87 95       	ror	r24
		LDI   R22                , 0xFF                   ;set max val            (  1 clock ) 
 768:	6f ef       	ldi	r22, 0xFF	; 255
		CALL  Kernel_Task_Create                          ;init idle task         (159 clocks) 
 76a:	0e 94 ee 02 	call	0x5dc	; 0x5dc <Kernel_Task_Create>
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 76e:	a0 91 20 01 	lds	r26, 0x0120
 772:	b0 91 21 01 	lds	r27, 0x0121
 776:	fe 91       	ld	r31, -X
 778:	ee 91       	ld	r30, -X
 77a:	1e 91       	ld	r17, -X
 77c:	0e 91       	ld	r16, -X
 77e:	0d bf       	out	0x3d, r16	; 61
 780:	1e bf       	out	0x3e, r17	; 62
 782:	a0 93 20 01 	sts	0x0120, r26
 786:	b0 93 21 01 	sts	0x0121, r27
		;execute return to jump to task0, pushed while task init                               
		RET                                               ;return from subroutine (  4 clocks) 
 78a:	08 95       	ret

0000078c <Kernel_Task_Idle>:



;;=================================kernel idle task starting================================;; 
Kernel_Task_Idle:                                         ;total 0.5uS @8MHz      (  4 clocks) 
        LDI   R25                , 0x00                   ;set UBRRH              (  1 clock ) 
 78c:	90 e0       	ldi	r25, 0x00	; 0
        LDI   R24                , 0x00                   ;set UBRRL              (  1 clock ) 
 78e:	80 e0       	ldi	r24, 0x00	; 0
        CALL  Debug_Init                                  ;debug init             ( 19 clocks) 
 790:	0e 94 b5 04 	call	0x96a	; 0x96a <Debug_Init>

00000794 <_IDLE_LOOP>:
    _IDLE_LOOP:                                           ;forever loop                        
	    LDI   R24                , 0x23                   ;load val               (  1 clock ) 
 794:	83 e2       	ldi	r24, 0x23	; 35
		CALL  Debug_Tx_Byte                                                                    
 796:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
		RJMP  _IDLE_LOOP                                  ;return from subroutine (  4 clocks) 
 79a:	fc cf       	rjmp	.-8      	; 0x794 <_IDLE_LOOP>

0000079c <Kernel_Task_Sleep>:


;;================================kernel task sleep starting================================;; 
Kernel_Task_Sleep:                                                                             
        ;save current context                                                                  
        KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
 79c:	0f 92       	push	r0
 79e:	0f b6       	in	r0, 0x3f	; 63
 7a0:	f8 94       	cli
 7a2:	0f 92       	push	r0
 7a4:	1f 92       	push	r1
 7a6:	11 24       	eor	r1, r1
 7a8:	2f 92       	push	r2
 7aa:	3f 92       	push	r3
 7ac:	4f 92       	push	r4
 7ae:	5f 92       	push	r5
 7b0:	6f 92       	push	r6
 7b2:	7f 92       	push	r7
 7b4:	8f 92       	push	r8
 7b6:	9f 92       	push	r9
 7b8:	af 92       	push	r10
 7ba:	bf 92       	push	r11
 7bc:	cf 92       	push	r12
 7be:	df 92       	push	r13
 7c0:	ef 92       	push	r14
 7c2:	ff 92       	push	r15
 7c4:	0f 93       	push	r16
 7c6:	1f 93       	push	r17
 7c8:	2f 93       	push	r18
 7ca:	3f 93       	push	r19
 7cc:	4f 93       	push	r20
 7ce:	5f 93       	push	r21
 7d0:	6f 93       	push	r22
 7d2:	7f 93       	push	r23
 7d4:	8f 93       	push	r24
 7d6:	9f 93       	push	r25
 7d8:	af 93       	push	r26
 7da:	bf 93       	push	r27
 7dc:	cf 93       	push	r28
 7de:	df 93       	push	r29
 7e0:	ef 93       	push	r30
 7e2:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 7e4:	1d b7       	in	r17, 0x3d	; 61
 7e6:	2e b7       	in	r18, 0x3e	; 62
 7e8:	ec e0       	ldi	r30, 0x0C	; 12
 7ea:	f1 e0       	ldi	r31, 0x01	; 1
 7ec:	00 91 07 01 	lds	r16, 0x0107
 7f0:	00 0f       	add	r16, r16
 7f2:	e0 0f       	add	r30, r16
 7f4:	00 e0       	ldi	r16, 0x00	; 0
 7f6:	f0 1f       	adc	r31, r16
 7f8:	10 83       	st	Z, r17
 7fa:	21 83       	std	Z+1, r18	; 0x01
		;create next task wakeup time (args R25:R24)                                           
		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 7fc:	e2 e4       	ldi	r30, 0x42	; 66
		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 7fe:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
 800:	00 91 07 01 	lds	r16, 0x0107
 804:	00 0f       	add	r16, r16
 806:	e0 0f       	add	r30, r16
 808:	00 e0       	ldi	r16, 0x00	; 0
 80a:	f0 1f       	adc	r31, r16
		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
 80c:	80 83       	st	Z, r24
		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 80e:	91 83       	std	Z+1, r25	; 0x01
		;update task scheduler status as blocked                                               
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 810:	ee e2       	ldi	r30, 0x2E	; 46
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 812:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
 814:	00 91 07 01 	lds	r16, 0x0107
 818:	e0 0f       	add	r30, r16
 81a:	00 e0       	ldi	r16, 0x00	; 0
 81c:	f0 1f       	adc	r31, r16
        LDI   R16                , TASK_BLOCK             ;block task until cnt=0 (  1 clock ) 
 81e:	00 e0       	ldi	r16, 0x00	; 0
		STD   Z+0                , R16                    ;save block flag        (  2 clocks) 
 820:	00 83       	st	Z, r16
		;run scheduler, load next task sp, restore context                                     
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 822:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 14 clocks) 
 824:	0f ef       	ldi	r16, 0xFF	; 255
 826:	00 93 09 01 	sts	0x0109, r16
 82a:	00 e0       	ldi	r16, 0x00	; 0
 82c:	00 93 0a 01 	sts	0x010A, r16
 830:	98 2f       	mov	r25, r24

00000832 <_KER_SCH_LOOP40>:
 832:	00 93 07 01 	sts	0x0107, r16
 836:	89 2f       	mov	r24, r25
 838:	e2 e4       	ldi	r30, 0x42	; 66
 83a:	f1 e0       	ldi	r31, 0x01	; 1
 83c:	00 91 07 01 	lds	r16, 0x0107
 840:	00 0f       	add	r16, r16
 842:	e0 0f       	add	r30, r16
 844:	00 e0       	ldi	r16, 0x00	; 0
 846:	f0 1f       	adc	r31, r16
 848:	00 81       	ld	r16, Z
 84a:	11 81       	ldd	r17, Z+1	; 0x01
 84c:	20 2f       	mov	r18, r16
 84e:	21 2b       	or	r18, r17
 850:	59 f0       	breq	.+22     	; 0x868 <_VAL_NULL41>
 852:	81 30       	cpi	r24, 0x01	; 1
 854:	99 f0       	breq	.+38     	; 0x87c <_VAL_NOT_NULL41>
 856:	21 e0       	ldi	r18, 0x01	; 1
 858:	02 1b       	sub	r16, r18
 85a:	20 e0       	ldi	r18, 0x00	; 0
 85c:	12 0b       	sbc	r17, r18
 85e:	00 83       	st	Z, r16
 860:	11 83       	std	Z+1, r17	; 0x01
 862:	20 2f       	mov	r18, r16
 864:	21 2b       	or	r18, r17
 866:	51 f4       	brne	.+20     	; 0x87c <_VAL_NOT_NULL41>

00000868 <_VAL_NULL41>:
 868:	ee e2       	ldi	r30, 0x2E	; 46
 86a:	f1 e0       	ldi	r31, 0x01	; 1
 86c:	00 91 07 01 	lds	r16, 0x0107
 870:	e0 0f       	add	r30, r16
 872:	00 e0       	ldi	r16, 0x00	; 0
 874:	f0 1f       	adc	r31, r16
 876:	81 e0       	ldi	r24, 0x01	; 1
 878:	80 83       	st	Z, r24
 87a:	01 c0       	rjmp	.+2      	; 0x87e <_EXIT_SLP_TIME41>

0000087c <_VAL_NOT_NULL41>:
 87c:	80 e0       	ldi	r24, 0x00	; 0

0000087e <_EXIT_SLP_TIME41>:
 87e:	81 30       	cpi	r24, 0x01	; 1
 880:	91 f4       	brne	.+36     	; 0x8a6 <_KER_SCH_NEXT40>
 882:	e8 e3       	ldi	r30, 0x38	; 56
 884:	f1 e0       	ldi	r31, 0x01	; 1
 886:	00 e0       	ldi	r16, 0x00	; 0
 888:	80 91 07 01 	lds	r24, 0x0107
 88c:	e8 0f       	add	r30, r24
 88e:	f0 1f       	adc	r31, r16
 890:	80 81       	ld	r24, Z
 892:	00 91 09 01 	lds	r16, 0x0109
 896:	80 17       	cp	r24, r16
 898:	30 f4       	brcc	.+12     	; 0x8a6 <_KER_SCH_NEXT40>
 89a:	80 93 09 01 	sts	0x0109, r24
 89e:	00 91 07 01 	lds	r16, 0x0107
 8a2:	00 93 0a 01 	sts	0x010A, r16

000008a6 <_KER_SCH_NEXT40>:
 8a6:	00 91 07 01 	lds	r16, 0x0107
 8aa:	03 95       	inc	r16
 8ac:	10 91 08 01 	lds	r17, 0x0108
 8b0:	01 17       	cp	r16, r17
 8b2:	08 f4       	brcc	.+2      	; 0x8b6 <_KER_SCH_EXIT40>
 8b4:	be cf       	rjmp	.-132    	; 0x832 <_KER_SCH_LOOP40>

000008b6 <_KER_SCH_EXIT40>:
 8b6:	00 91 0a 01 	lds	r16, 0x010A
 8ba:	00 93 07 01 	sts	0x0107, r16
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 8be:	ec e0       	ldi	r30, 0x0C	; 12
 8c0:	f1 e0       	ldi	r31, 0x01	; 1
 8c2:	00 91 07 01 	lds	r16, 0x0107
 8c6:	00 0f       	add	r16, r16
 8c8:	e0 0f       	add	r30, r16
 8ca:	00 e0       	ldi	r16, 0x00	; 0
 8cc:	f0 1f       	adc	r31, r16
 8ce:	00 81       	ld	r16, Z
 8d0:	11 81       	ldd	r17, Z+1	; 0x01
 8d2:	0d bf       	out	0x3d, r16	; 61
 8d4:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 8d6:	ff 91       	pop	r31
 8d8:	ef 91       	pop	r30
 8da:	df 91       	pop	r29
 8dc:	cf 91       	pop	r28
 8de:	bf 91       	pop	r27
 8e0:	af 91       	pop	r26
 8e2:	9f 91       	pop	r25
 8e4:	8f 91       	pop	r24
 8e6:	7f 91       	pop	r23
 8e8:	6f 91       	pop	r22
 8ea:	5f 91       	pop	r21
 8ec:	4f 91       	pop	r20
 8ee:	3f 91       	pop	r19
 8f0:	2f 91       	pop	r18
 8f2:	1f 91       	pop	r17
 8f4:	0f 91       	pop	r16
 8f6:	ff 90       	pop	r15
 8f8:	ef 90       	pop	r14
 8fa:	df 90       	pop	r13
 8fc:	cf 90       	pop	r12
 8fe:	bf 90       	pop	r11
 900:	af 90       	pop	r10
 902:	9f 90       	pop	r9
 904:	8f 90       	pop	r8
 906:	7f 90       	pop	r7
 908:	6f 90       	pop	r6
 90a:	5f 90       	pop	r5
 90c:	4f 90       	pop	r4
 90e:	3f 90       	pop	r3
 910:	2f 90       	pop	r2
 912:	1f 90       	pop	r1
 914:	0f 90       	pop	r0
 916:	0f be       	out	0x3f, r0	; 63
 918:	0f 90       	pop	r0
 91a:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
 91c:	08 95       	ret

0000091e <Kernel_Task_Sleep_Time_Get>:


;;===========================kernel task sleep time get starting============================;; 
Kernel_Task_Sleep_Time_Get:                                                                    
		;get remaining sleep time (ms), arg R24, return R25:R24                                
		MOV   R16                , R24                    ;copy                   (  1 clock ) 
 91e:	08 2f       	mov	r16, r24
		LSL   R16                                         ;x2                     (  1 clock ) 
 920:	00 0f       	add	r16, r16
		LDI   R30                , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 922:	e2 e4       	ldi	r30, 0x42	; 66
		LDI   R31                , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 924:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 926:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 928:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 92a:	f0 1f       	adc	r31, r16
		LD    R24                , Z+                     ;load sleep time        (  2 clocks) 
 92c:	81 91       	ld	r24, Z+
		LD    R25                , Z                      ;load sleep time        (  2 clocks) 
 92e:	90 81       	ld	r25, Z
		RET                                               ;return from subroutine (  4 clocks) 
 930:	08 95       	ret

00000932 <Kernel_Task_Status_Get>:


;;==============================kernel task status get starting=============================;; 
Kernel_Task_Status_Get:                                                                        
		;get task status ->ready/blocked, arg R24, return R24                                  
		MOV   R16                , R24                    ;copy                   (  1 clock ) 
 932:	08 2f       	mov	r16, r24
		LDI   R30                , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 934:	ee e2       	ldi	r30, 0x2E	; 46
		LDI   R31                , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 936:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 938:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 93a:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 93c:	f0 1f       	adc	r31, r16
		LD    R24                , Z                      ;load task status       (  2 clocks) 
 93e:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 940:	08 95       	ret

00000942 <Kernel_NTask_Get>:



;;================================kernel ntask get starting=================================;; 
Kernel_NTask_Get:                                         ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                 , KerBase+OFB_NTSK      ;load ntask             (  2 clock ) 
 942:	80 91 08 01 	lds	r24, 0x0108
		RET                                               ;return from subroutine (  4 clocks) 
 946:	08 95       	ret

00000948 <Kernel_Task_Prio_Get>:


;;=============================kernel task priority get starting============================;; 
Kernel_Task_Prio_Get:                                     ;total 1.38uS @8MHz     ( 11 clocks) 
		;get priority of the task id, arg (task_id->R24), return R24                           
		MOV   R16                , R24                    ;copy task_id           (  1 clock ) 
 948:	08 2f       	mov	r16, r24
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 94a:	e8 e3       	ldi	r30, 0x38	; 56
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 94c:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
 94e:	e0 0f       	add	r30, r16
		ADC   ZH                 , R1                     ;add high byte+carry    (  1 clock ) 
 950:	f1 1d       	adc	r31, r1
		LD    R24                , Z                      ;load priority          (  2 clocks) 
 952:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 954:	08 95       	ret

00000956 <Kernel_Lowest_Prio_Get>:


;;============================kernel lowest priority get starting===========================;; 
Kernel_Lowest_Prio_Get:                                   ;total 0.75uS @8MHz     (  6 clocks) 
		;get lowest priority, return R24                                                       
		LDS   R24                , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
 956:	80 91 09 01 	lds	r24, 0x0109
		RET                                               ;return from subroutine (  4 clocks) 
 95a:	08 95       	ret

0000095c <Kernel_High_Prio_Task_ID_Get>:


;;===========================kernel high priority task id starting==========================;; 
Kernel_High_Prio_Task_ID_Get:                                                                  
		;internal idle task id = 0, app task start from task id 1, return R24                  
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 95c:	80 91 0a 01 	lds	r24, 0x010A
		DEC   R24                                         ;decrement by 1         (  1 clock ) 
 960:	8a 95       	dec	r24
		RET                                               ;return from subroutine (  4 clocks) 
 962:	08 95       	ret

00000964 <Kernel_Abs_High_Prio_Task_ID_Get>:


;;=========================kernel abs high priority task id starting========================;; 
Kernel_Abs_High_Prio_Task_ID_Get:                                                              
		;get highest priority task id, return R24                                              
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 964:	80 91 0a 01 	lds	r24, 0x010A
		RET                                               ;return from subroutine (  4 clocks) 
 968:	08 95       	ret

0000096a <Debug_Init>:


;;===================================debug init starting====================================;; 
Debug_Init:                                               ;total 2.38uS @8MHz     ( 19 clocks) 
        ;init registers for UART0 (Arg R25:R24->UBRRH:UBRRL)                                   
		LDI   R16                , (1<<1)                 ;mask U2x               (  1 clock ) 
 96a:	02 e0       	ldi	r16, 0x02	; 2
		STS   SRUCSR0A           , R16                    ;load val to UCSR0A     (  2 clocks) 
 96c:	00 93 c0 00 	sts	0x00C0, r16
		MOV   R16                , R25                    ;copy R25->baud rate H  (  1 clock ) 
 970:	09 2f       	mov	r16, r25
		STS   SRUBRR0H           , R16                    ;load val to UBRR0H     (  2 clocks) 
 972:	00 93 c5 00 	sts	0x00C5, r16
		MOV   R16                , R24                    ;copy R24->baud rate L  (  1 clock ) 
 976:	08 2f       	mov	r16, r24
		STS   SRUBRR0L           , R16                    ;load val to UBRR0L     (  2 clocks) 
 978:	00 93 c4 00 	sts	0x00C4, r16
		LDI   R16                , (1<<1)|(1<<2)          ;config 8 data bit      (  1 clock ) 
 97c:	06 e0       	ldi	r16, 0x06	; 6
		STS   SRUCSR0C           , R16                    ;load val to UCSR0C     (  2 clocks) 
 97e:	00 93 c2 00 	sts	0x00C2, r16
		LDI   R16                , (1<<3)                 ;enable tx              (  1 clock ) 
 982:	08 e0       	ldi	r16, 0x08	; 8
		STS   SRUCSR0B           , R16                    ;load val to UCSR0B     (  2 clocks) 
 984:	00 93 c1 00 	sts	0x00C1, r16
        RET                                               ;return from subroutine (  4 clocks) 
 988:	08 95       	ret

0000098a <Debug_Tx_Byte>:


;;====================================debug tx starting=====================================;; 
Debug_Tx_Byte:                                            ;total 2.00uS+LT @8MHz  ( 16 clocks) 
		;write single byte to data register (Arg R24)                                          
		PUSH  R16                                         ;save reg               (  2 clocks) 
 98a:	0f 93       	push	r16
		STS   SRUDR0             , R24                    ;load val to UDR0       (  2 clocks) 
 98c:	80 93 c6 00 	sts	0x00C6, r24

00000990 <__UDRE0_CLEARED>:
                                                                                               
    __UDRE0_CLEARED:                                      ;undefined loop wrt ck               
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16     (  2 clocks) 
 990:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x05                   ;skip if UDRE0 is set   (  2 clocks) 
 994:	05 ff       	sbrs	r16, 5
		RJMP  __UDRE0_CLEARED                             ;wait until UDRE0 is set(  2 clocks) 
 996:	fc cf       	rjmp	.-8      	; 0x990 <__UDRE0_CLEARED>
		POP   R16                                         ;restore reg            (  2 clocks) 
 998:	0f 91       	pop	r16
        RET                                               ;return from subroutine (  4 clocks) 
 99a:	08 95       	ret

0000099c <Debug_Tx_Word>:


;;==================================debug tx word starting==================================;; 
Debug_Tx_Word:                                            ;total 2.00uS+LT @8MHz  ( 16 clocks) 
		;write 2 bytes, (Arg R24, R25), Args retained                                          
		PUSH  R24                                         ;save reg               (  2 clocks) 
 99c:	8f 93       	push	r24
		MOV   R24                , R25                    ;copy reg               (  1 clock ) 
 99e:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte                               ;send via uart          ( 21 clocks) 
 9a0:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
        POP   R24                                         ;restore reg            (  2 clocks) 
 9a4:	8f 91       	pop	r24
		CALL  Debug_Tx_Byte                               ;send via uart          ( 21 clocks) 
 9a6:	0e 94 c5 04 	call	0x98a	; 0x98a <Debug_Tx_Byte>
        RET                                               ;return from subroutine (  4 clocks) 
 9aa:	08 95       	ret

000009ac <Debug_Tx_Byte_Conf>:


;;================================debug tx confirm starting=================================;; 
Debug_Tx_Byte_Conf:                                       ;total 2.63uS+LT @8MHz  ( 21 clocks) 
        ;write 1 byte, (Arg R24), Args retained                                                
		PUSH  R16                                         ;save reg               (  2 clocks) 
 9ac:	0f 93       	push	r16
		STS   SRUDR0             , R24                    ;load val to UDR0,      (  2 clocks) 
 9ae:	80 93 c6 00 	sts	0x00C6, r24

000009b2 <__TXC0_CLEARED>:
    __TXC0_CLEARED:                                                                            
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,    (  2 clocks) 
 9b2:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x06                   ;skip if TXC0 is set,   (  2 clocks) 
 9b6:	06 ff       	sbrs	r16, 6
		RJMP  __TXC0_CLEARED                              ;wait until TXC0 is set (  2 clocks) 
 9b8:	fc cf       	rjmp	.-8      	; 0x9b2 <__TXC0_CLEARED>
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,    (  2 clocks) 
 9ba:	00 91 c0 00 	lds	r16, 0x00C0
		ORI   R16                , (1<<6)                 ;mask bit 6,            (  1 clock ) 
 9be:	00 64       	ori	r16, 0x40	; 64
		STS   SRUCSR0A           , R16                    ;write reg with bit msk (  2 clocks) 
 9c0:	00 93 c0 00 	sts	0x00C0, r16
		POP   R16                                         ;restore reg            (  2 clocks) 
 9c4:	0f 91       	pop	r16
        RET                                               ;return from subroutine (  4 clocks) 
 9c6:	08 95       	ret

000009c8 <Debug_Tx_Word_Conf>:


;;==============================debug tx word confirm starting==============================;; 
Debug_Tx_Word_Conf:                                       ;total 6.38uS+LT @8MHz  ( 51 clocks) 
        ;write 2 bytes, (Arg R24, R25), Args retained                                          
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 9c8:	0e 94 d6 04 	call	0x9ac	; 0x9ac <Debug_Tx_Byte_Conf>
		PUSH  R24                                         ;save reg               (  2 clocks) 
 9cc:	8f 93       	push	r24
		MOV   R24                , R25                    ;copy R25 to R24        (  1 clock ) 
 9ce:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 9d0:	0e 94 d6 04 	call	0x9ac	; 0x9ac <Debug_Tx_Byte_Conf>
		POP   R24                                         ;restore reg            (  2 clocks) 
 9d4:	8f 91       	pop	r24
        RET                                               ;return from subroutine (  4 clocks) 
 9d6:	08 95       	ret

000009d8 <Debug_Tx_DWord_Conf>:


;;==============================debug tx dword confirm starting=============================;; 
Debug_Tx_DWord_Conf:                                      ;total 12.38uS+LT @8MHz ( 99 clocks) 
        ;write 4 bytes, (Arg R22-R25), Args retained                                           
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks) 
 9d8:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R22                    ;copy R22 to R24          (1 clock ) 
 9dc:	86 2f       	mov	r24, r22
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 9de:	0e 94 d6 04 	call	0x9ac	; 0x9ac <Debug_Tx_Byte_Conf>
		MOV   R24                , R23                    ;copy R23 to R24          (1 clock ) 
 9e2:	87 2f       	mov	r24, r23
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 9e4:	0e 94 d6 04 	call	0x9ac	; 0x9ac <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24              (2 clocks) 
 9e8:	80 91 4a 00 	lds	r24, 0x004A
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 9ec:	0e 94 d6 04 	call	0x9ac	; 0x9ac <Debug_Tx_Byte_Conf>
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks) 
 9f0:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R25                    ;copy R22 to R24          (1 clock ) 
 9f4:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 9f6:	0e 94 d6 04 	call	0x9ac	; 0x9ac <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24 val,         (2 clocks) 
 9fa:	80 91 4a 00 	lds	r24, 0x004A
        RET                                               ;return from subroutine,  (4 clocks) 
 9fe:	08 95       	ret

00000a00 <Debug_Tx_From_RAM>:


;;=============================debug tx confirm from ram starting===========================;; 
Debug_Tx_From_RAM:                                        ;total 4.38uS+LT @8MHz  ( 35 clocks) 
        ;print data from RAM address (Arg R24-R25)                                             
		MOV   R16                , R30                    ;copy R30 to R16          (1 clock ) 
 a00:	0e 2f       	mov	r16, r30
		MOV   R17                , R31                    ;copy R31 to R17          (1 clock ) 
 a02:	1f 2f       	mov	r17, r31
		MOV   R18                , R24                    ;copy R24 to R18          (1 clock ) 
 a04:	28 2f       	mov	r18, r24
		MOV   R30                , R24                    ;copy R22 to R24          (1 clock ) 
 a06:	e8 2f       	mov	r30, r24
		MOV   R31                , R25                    ;copy R22 to R24          (1 clock ) 
 a08:	f9 2f       	mov	r31, r25
		LD    R24                , Z                      ;load val to R24          (2 clocks) 
 a0a:	80 81       	ld	r24, Z
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 a0c:	0e 94 d6 04 	call	0x9ac	; 0x9ac <Debug_Tx_Byte_Conf>
		MOV   R30                , R16                    ;copy R16 to R30          (1 clock ) 
 a10:	e0 2f       	mov	r30, r16
		MOV   R31                , R17                    ;copy R17 to R31          (1 clock ) 
 a12:	f1 2f       	mov	r31, r17
		MOV   R24                , R18                    ;copy R18 to R24          (1 clock ) 
 a14:	82 2f       	mov	r24, r18
        RET                                               ;return from subroutine,  (4 clocks) 
 a16:	08 95       	ret

00000a18 <Debug_Tx_RAM_Area>:

;;=============================debug tx confirm ram area starting===========================;; 
Debug_Tx_RAM_Area:                                        ;5.5uS+LT x R22 @8MHz   ( 44 clocks) 
        ;print data from RAM address (arguments R24:R25, R22)                                  
	__DUMP_BYTES:                                                                              
	    CALL  Debug_Tx_From_RAM                           ;send via uart from ram              
 a18:	0e 94 00 05 	call	0xa00	; 0xa00 <Debug_Tx_From_RAM>
		SUBI  R24                , 0x01                   ;decrement from LSByte               
 a1c:	81 50       	subi	r24, 0x01	; 1
        SBCI  R25                , 0x00                   ;decrement if carry                  
 a1e:	90 40       	sbci	r25, 0x00	; 0
		SUBI  R22                , 0x01                   ;decrement                           
 a20:	61 50       	subi	r22, 0x01	; 1
		BRNE  __DUMP_BYTES                                                                     
 a22:	d1 f7       	brne	.-12     	; 0xa18 <Debug_Tx_RAM_Area>
        RET                                               ;return from subroutine,  (4 clocks) 
 a24:	08 95       	ret

00000a26 <_exit>:
 a26:	f8 94       	cli

00000a28 <__stop_program>:
 a28:	ff cf       	rjmp	.-2      	; 0xa28 <__stop_program>
