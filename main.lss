
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  000011ac  00001240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000061  00800150  00800150  00001290  2**0
                  ALLOC
  3 .debug_aranges 000000e0  00000000  00000000  00001290  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000009ed  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001dda  00000000  00000000  00001d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000075f  00000000  00000000  00003b37  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000170d  00000000  00000000  00004296  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006c0  00000000  00000000  000059a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b4b  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c9b  00000000  00000000  00006baf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000784a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 75 06 	jmp	0xcea	; 0xcea <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec ea       	ldi	r30, 0xAC	; 172
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a0 35       	cpi	r26, 0x50	; 80
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a0 e5       	ldi	r26, 0x50	; 80
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 3b       	cpi	r26, 0xB1	; 177
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 d4 08 	jmp	0x11a8	; 0x11a8 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "systick.h"
#include "app.h"

int main(void) {
    
    SysTick_Init(1000);
      a6:	88 ee       	ldi	r24, 0xE8	; 232
      a8:	93 e0       	ldi	r25, 0x03	; 3
      aa:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <SysTick_Init>
	App_Setup();
      ae:	0e 94 45 01 	call	0x28a	; 0x28a <App_Setup>
	
    while(1){
	 
        App_Main_Loop();
      b2:	0e 94 37 01 	call	0x26e	; 0x26e <App_Main_Loop>
      b6:	fd cf       	rjmp	.-6      	; 0xb2 <main+0xc>

000000b8 <SysTick_Struct_Init>:
}systick_t;

systick_t SysTick;

void SysTick_Struct_Init(void){
    SysTick.Ticks = 0;
      b8:	10 92 ac 01 	sts	0x01AC, r1
      bc:	10 92 ab 01 	sts	0x01AB, r1
    SysTick.OVFUpdateValue = 0;
      c0:	10 92 ae 01 	sts	0x01AE, r1
      c4:	10 92 ad 01 	sts	0x01AD, r1
    SysTick.UpdateRate = 0;
      c8:	10 92 b0 01 	sts	0x01B0, r1
      cc:	10 92 af 01 	sts	0x01AF, r1
}
      d0:	08 95       	ret

000000d2 <SysTick_Reg_Init>:


void SysTick_Reg_Init(uint16_t UpdateRateHz){
      d2:	8f 92       	push	r8
      d4:	9f 92       	push	r9
      d6:	bf 92       	push	r11
      d8:	cf 92       	push	r12
      da:	df 92       	push	r13
      dc:	ef 92       	push	r14
      de:	ff 92       	push	r15
      e0:	0f 93       	push	r16
      e2:	1f 93       	push	r17
      e4:	df 93       	push	r29
      e6:	cf 93       	push	r28
      e8:	cd b7       	in	r28, 0x3d	; 61
      ea:	de b7       	in	r29, 0x3e	; 62
      ec:	2a 97       	sbiw	r28, 0x0a	; 10
      ee:	0f b6       	in	r0, 0x3f	; 63
      f0:	f8 94       	cli
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	0f be       	out	0x3f, r0	; 63
      f6:	cd bf       	out	0x3d, r28	; 61
      f8:	4c 01       	movw	r8, r24
    uint8_t  clock_div_index = 0;
    uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
      fa:	de 01       	movw	r26, r28
      fc:	11 96       	adiw	r26, 0x01	; 1
      fe:	e0 e0       	ldi	r30, 0x00	; 0
     100:	f1 e0       	ldi	r31, 0x01	; 1
     102:	8a e0       	ldi	r24, 0x0A	; 10
     104:	01 90       	ld	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	81 50       	subi	r24, 0x01	; 1
     10a:	e1 f7       	brne	.-8      	; 0x104 <SysTick_Reg_Init+0x32>
    int32_t  temp, curr_freq;

    temp = F_CPU;
    temp /= UpdateRateHz;
     10c:	94 01       	movw	r18, r8
     10e:	40 e0       	ldi	r20, 0x00	; 0
     110:	50 e0       	ldi	r21, 0x00	; 0
     112:	60 e0       	ldi	r22, 0x00	; 0
     114:	7b e1       	ldi	r23, 0x1B	; 27
     116:	87 eb       	ldi	r24, 0xB7	; 183
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	0e 94 b9 08 	call	0x1172	; 0x1172 <__divmodsi4>
     11e:	b2 2e       	mov	r11, r18
     120:	c3 2e       	mov	r12, r19
     122:	d4 2e       	mov	r13, r20
     124:	05 2f       	mov	r16, r21
     126:	7e 01       	movw	r14, r28
     128:	08 94       	sec
     12a:	e1 1c       	adc	r14, r1
     12c:	f1 1c       	adc	r15, r1
     12e:	c9 01       	movw	r24, r18
     130:	da 01       	movw	r26, r20
     132:	9c 01       	movw	r18, r24
     134:	ad 01       	movw	r20, r26
     136:	10 e0       	ldi	r17, 0x00	; 0
     138:	13 c0       	rjmp	.+38     	; 0x160 <SysTick_Reg_Init+0x8e>
    clock_div_index = 0;
    curr_freq = temp;
	
    while( curr_freq > 0xFF ){
	    curr_freq  = temp;
	    curr_freq /= clock_div_factor[clock_div_index];
     13a:	f7 01       	movw	r30, r14
     13c:	21 91       	ld	r18, Z+
     13e:	31 91       	ld	r19, Z+
     140:	7f 01       	movw	r14, r30
     142:	40 e0       	ldi	r20, 0x00	; 0
     144:	50 e0       	ldi	r21, 0x00	; 0
     146:	6b 2d       	mov	r22, r11
     148:	7c 2d       	mov	r23, r12
     14a:	8d 2d       	mov	r24, r13
     14c:	90 2f       	mov	r25, r16
     14e:	0e 94 b9 08 	call	0x1172	; 0x1172 <__divmodsi4>
     152:	c9 01       	movw	r24, r18
     154:	da 01       	movw	r26, r20
     156:	9c 01       	movw	r18, r24
     158:	ad 01       	movw	r20, r26
	    clock_div_index++;
     15a:	1f 5f       	subi	r17, 0xFF	; 255
	    if(clock_div_index == 5){
     15c:	15 30       	cpi	r17, 0x05	; 5
     15e:	31 f0       	breq	.+12     	; 0x16c <SysTick_Reg_Init+0x9a>
    temp /= UpdateRateHz;
	
    clock_div_index = 0;
    curr_freq = temp;
	
    while( curr_freq > 0xFF ){
     160:	2f 3f       	cpi	r18, 0xFF	; 255
     162:	31 05       	cpc	r19, r1
     164:	41 05       	cpc	r20, r1
     166:	51 05       	cpc	r21, r1
     168:	09 f0       	breq	.+2      	; 0x16c <SysTick_Reg_Init+0x9a>
     16a:	3c f7       	brge	.-50     	; 0x13a <SysTick_Reg_Init+0x68>
	    if(clock_div_index == 5){
	        break;
	    }
    }
	
    clock_div_index -= 1;
     16c:	81 2f       	mov	r24, r17
     16e:	81 50       	subi	r24, 0x01	; 1
	
    TCCR0A = 0x00;
     170:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0x00;
     172:	15 bc       	out	0x25, r1	; 37
    TIMSK0 = 0x00;
     174:	10 92 6e 00 	sts	0x006E, r1
    TIFR0  = 0x00;
     178:	15 ba       	out	0x15, r1	; 21
    OCR0A  = 0x00;
     17a:	17 bc       	out	0x27, r1	; 39
    OCR0B  = 0x00;
     17c:	18 bc       	out	0x28, r1	; 40
    TCNT0  = 0x00;
     17e:	16 bc       	out	0x26, r1	; 38
    OCR0A  = 0x00;
     180:	17 bc       	out	0x27, r1	; 39
  
    if(clock_div_index == 0){
     182:	88 23       	and	r24, r24
     184:	11 f4       	brne	.+4      	; 0x18a <SysTick_Reg_Init+0xb8>
	    TCCR0B = (1<<CS00);
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	0f c0       	rjmp	.+30     	; 0x1a8 <SysTick_Reg_Init+0xd6>
    }
    else if(clock_div_index == 1){
     18a:	81 30       	cpi	r24, 0x01	; 1
     18c:	11 f4       	brne	.+4      	; 0x192 <SysTick_Reg_Init+0xc0>
	    TCCR0B = (1<<CS01);
     18e:	82 e0       	ldi	r24, 0x02	; 2
     190:	0b c0       	rjmp	.+22     	; 0x1a8 <SysTick_Reg_Init+0xd6>
    }
    else if(clock_div_index == 2){
     192:	82 30       	cpi	r24, 0x02	; 2
     194:	11 f4       	brne	.+4      	; 0x19a <SysTick_Reg_Init+0xc8>
	    TCCR0B = (1<<CS00)|(1<<CS01);
     196:	83 e0       	ldi	r24, 0x03	; 3
     198:	07 c0       	rjmp	.+14     	; 0x1a8 <SysTick_Reg_Init+0xd6>
    }
    else if(clock_div_index == 3){
     19a:	83 30       	cpi	r24, 0x03	; 3
     19c:	11 f4       	brne	.+4      	; 0x1a2 <SysTick_Reg_Init+0xd0>
	    TCCR0B = (1<<CS02);
     19e:	84 e0       	ldi	r24, 0x04	; 4
     1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <SysTick_Reg_Init+0xd6>
    }
    else if(clock_div_index == 4){
     1a2:	84 30       	cpi	r24, 0x04	; 4
     1a4:	11 f4       	brne	.+4      	; 0x1aa <SysTick_Reg_Init+0xd8>
	    TCCR0B = (1<<CS00)|(1<<CS02);
     1a6:	85 e0       	ldi	r24, 0x05	; 5
     1a8:	85 bd       	out	0x25, r24	; 37
    }
  
    SysTick.OVFUpdateValue = (0xFF-curr_freq);
     1aa:	8f ef       	ldi	r24, 0xFF	; 255
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	82 1b       	sub	r24, r18
     1b0:	93 0b       	sbc	r25, r19
     1b2:	90 93 ae 01 	sts	0x01AE, r25
     1b6:	80 93 ad 01 	sts	0x01AD, r24
    TCNT0  = SysTick.OVFUpdateValue;
     1ba:	80 91 ad 01 	lds	r24, 0x01AD
     1be:	90 91 ae 01 	lds	r25, 0x01AE
     1c2:	86 bd       	out	0x26, r24	; 38
    TIMSK0 = (1<<TOIE0);
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	80 93 6e 00 	sts	0x006E, r24
    sei();
     1ca:	78 94       	sei
    SysTick.UpdateRate = UpdateRateHz;
     1cc:	90 92 b0 01 	sts	0x01B0, r9
     1d0:	80 92 af 01 	sts	0x01AF, r8
}
     1d4:	2a 96       	adiw	r28, 0x0a	; 10
     1d6:	0f b6       	in	r0, 0x3f	; 63
     1d8:	f8 94       	cli
     1da:	de bf       	out	0x3e, r29	; 62
     1dc:	0f be       	out	0x3f, r0	; 63
     1de:	cd bf       	out	0x3d, r28	; 61
     1e0:	cf 91       	pop	r28
     1e2:	df 91       	pop	r29
     1e4:	1f 91       	pop	r17
     1e6:	0f 91       	pop	r16
     1e8:	ff 90       	pop	r15
     1ea:	ef 90       	pop	r14
     1ec:	df 90       	pop	r13
     1ee:	cf 90       	pop	r12
     1f0:	bf 90       	pop	r11
     1f2:	9f 90       	pop	r9
     1f4:	8f 90       	pop	r8
     1f6:	08 95       	ret

000001f8 <SysTick_Init>:
}systick_t;

systick_t SysTick;

void SysTick_Struct_Init(void){
    SysTick.Ticks = 0;
     1f8:	10 92 ac 01 	sts	0x01AC, r1
     1fc:	10 92 ab 01 	sts	0x01AB, r1
    SysTick.OVFUpdateValue = 0;
     200:	10 92 ae 01 	sts	0x01AE, r1
     204:	10 92 ad 01 	sts	0x01AD, r1
    SysTick.UpdateRate = 0;
     208:	10 92 b0 01 	sts	0x01B0, r1
     20c:	10 92 af 01 	sts	0x01AF, r1
}


void SysTick_Init(uint16_t UpdateRateHz){
    SysTick_Struct_Init();
    SysTick_Reg_Init(UpdateRateHz);
     210:	0e 94 69 00 	call	0xd2	; 0xd2 <SysTick_Reg_Init>
}
     214:	08 95       	ret

00000216 <SysTick_ISR_Executables>:




void SysTick_ISR_Executables(void){
   GPIO0_Toggle();
     216:	0e 94 97 07 	call	0xf2e	; 0xf2e <GPIO0_Toggle>
}
     21a:	08 95       	ret

0000021c <__vector_16>:





ISR(TIMER0_OVF_vect){
     21c:	1f 92       	push	r1
     21e:	0f 92       	push	r0
     220:	0f b6       	in	r0, 0x3f	; 63
     222:	0f 92       	push	r0
     224:	11 24       	eor	r1, r1
     226:	2f 93       	push	r18
     228:	3f 93       	push	r19
     22a:	4f 93       	push	r20
     22c:	5f 93       	push	r21
     22e:	6f 93       	push	r22
     230:	7f 93       	push	r23
     232:	8f 93       	push	r24
     234:	9f 93       	push	r25
     236:	af 93       	push	r26
     238:	bf 93       	push	r27
     23a:	ef 93       	push	r30
     23c:	ff 93       	push	r31
    TCNT0  = SysTick.OVFUpdateValue;
     23e:	80 91 ad 01 	lds	r24, 0x01AD
     242:	90 91 ae 01 	lds	r25, 0x01AE
     246:	86 bd       	out	0x26, r24	; 38




void SysTick_ISR_Executables(void){
   GPIO0_Toggle();
     248:	0e 94 97 07 	call	0xf2e	; 0xf2e <GPIO0_Toggle>


ISR(TIMER0_OVF_vect){
    TCNT0  = SysTick.OVFUpdateValue;
    SysTick_ISR_Executables();
}
     24c:	ff 91       	pop	r31
     24e:	ef 91       	pop	r30
     250:	bf 91       	pop	r27
     252:	af 91       	pop	r26
     254:	9f 91       	pop	r25
     256:	8f 91       	pop	r24
     258:	7f 91       	pop	r23
     25a:	6f 91       	pop	r22
     25c:	5f 91       	pop	r21
     25e:	4f 91       	pop	r20
     260:	3f 91       	pop	r19
     262:	2f 91       	pop	r18
     264:	0f 90       	pop	r0
     266:	0f be       	out	0x3f, r0	; 63
     268:	0f 90       	pop	r0
     26a:	1f 90       	pop	r1
     26c:	18 95       	reti

0000026e <App_Main_Loop>:
	
}

void App_Main_Loop(void){
    
    Debug_Tx_Text_NL("Hello");
     26e:	8a e0       	ldi	r24, 0x0A	; 10
     270:	91 e0       	ldi	r25, 0x01	; 1
     272:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <Debug_Tx_Text_NL>
     276:	88 e8       	ldi	r24, 0x88	; 136
     278:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     27a:	2c e2       	ldi	r18, 0x2C	; 44
     27c:	31 e0       	ldi	r19, 0x01	; 1
     27e:	f9 01       	movw	r30, r18
     280:	31 97       	sbiw	r30, 0x01	; 1
     282:	f1 f7       	brne	.-4      	; 0x280 <App_Main_Loop+0x12>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     284:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     286:	d9 f7       	brne	.-10     	; 0x27e <App_Main_Loop+0x10>
	_delay_ms(500);
    
     288:	08 95       	ret

0000028a <App_Setup>:

int global_var = 10;

void App_Setup(void){
    
	Debug_Init(38400);
     28a:	60 e0       	ldi	r22, 0x00	; 0
     28c:	76 e9       	ldi	r23, 0x96	; 150
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	0e 94 44 07 	call	0xe88	; 0xe88 <Debug_Init>
	GPIO_Init();
     296:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_Init>
	
	global_var++;
     29a:	40 91 4d 01 	lds	r20, 0x014D
     29e:	50 91 4e 01 	lds	r21, 0x014E
     2a2:	4f 5f       	subi	r20, 0xFF	; 255
     2a4:	5f 4f       	sbci	r21, 0xFF	; 255
     2a6:	50 93 4e 01 	sts	0x014E, r21
     2aa:	40 93 4d 01 	sts	0x014D, r20
	Debug_Tx_Parameter_NL("before context save", global_var);
     2ae:	66 27       	eor	r22, r22
     2b0:	57 fd       	sbrc	r21, 7
     2b2:	60 95       	com	r22
     2b4:	76 2f       	mov	r23, r22
     2b6:	80 e1       	ldi	r24, 0x10	; 16
     2b8:	91 e0       	ldi	r25, 0x01	; 1
     2ba:	0e 94 83 04 	call	0x906	; 0x906 <Debug_Tx_Parameter_NL>
	
	Context_Save();
     2be:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <Context_Save>
	
	global_var++;
     2c2:	40 91 4d 01 	lds	r20, 0x014D
     2c6:	50 91 4e 01 	lds	r21, 0x014E
     2ca:	4f 5f       	subi	r20, 0xFF	; 255
     2cc:	5f 4f       	sbci	r21, 0xFF	; 255
     2ce:	50 93 4e 01 	sts	0x014E, r21
     2d2:	40 93 4d 01 	sts	0x014D, r20
	
	Debug_Tx_Parameter_NL("after context save", global_var);
     2d6:	66 27       	eor	r22, r22
     2d8:	57 fd       	sbrc	r21, 7
     2da:	60 95       	com	r22
     2dc:	76 2f       	mov	r23, r22
     2de:	84 e2       	ldi	r24, 0x24	; 36
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	0e 94 83 04 	call	0x906	; 0x906 <Debug_Tx_Parameter_NL>
	
	Context_Restore();
     2e6:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <Context_Restore>
	
	Debug_Tx_Parameter_NL("after context restore", global_var);
     2ea:	40 91 4d 01 	lds	r20, 0x014D
     2ee:	50 91 4e 01 	lds	r21, 0x014E
     2f2:	66 27       	eor	r22, r22
     2f4:	57 fd       	sbrc	r21, 7
     2f6:	60 95       	com	r22
     2f8:	76 2f       	mov	r23, r22
     2fa:	87 e3       	ldi	r24, 0x37	; 55
     2fc:	91 e0       	ldi	r25, 0x01	; 1
     2fe:	0e 94 83 04 	call	0x906	; 0x906 <Debug_Tx_Parameter_NL>
	
	
}
     302:	08 95       	ret

00000304 <Debug_Struct_Init>:


/*******************Debug Structure Functions Start****************/

void Debug_Struct_Init(void){
  Debug.Error = DEBUG_NULL;
     304:	10 92 50 01 	sts	0x0150, r1
  Debug.StickyError = DEBUG_NULL;
     308:	10 92 51 01 	sts	0x0151, r1
     30c:	e2 e5       	ldi	r30, 0x52	; 82
     30e:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i = 0; i < 8; i++){
    Debug.Digits[i] = DEBUG_NULL;
     310:	11 92       	st	Z+, r1
/*******************Debug Structure Functions Start****************/

void Debug_Struct_Init(void){
  Debug.Error = DEBUG_NULL;
  Debug.StickyError = DEBUG_NULL;
  for(uint8_t i = 0; i < 8; i++){
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	ea 35       	cpi	r30, 0x5A	; 90
     316:	f8 07       	cpc	r31, r24
     318:	d9 f7       	brne	.-10     	; 0x310 <Debug_Struct_Init+0xc>
    Debug.Digits[i] = DEBUG_NULL;
  }
  Debug.InputNumDigits = DEBUG_NULL;
     31a:	10 82       	st	Z, r1
  Debug.LastRxByte = DEBUG_NULL;
     31c:	11 82       	std	Z+1, r1	; 0x01
  Debug.BufSize = DEBUG_BUFFER_SIZE;
     31e:	80 e4       	ldi	r24, 0x40	; 64
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	90 93 9e 01 	sts	0x019E, r25
     326:	80 93 9d 01 	sts	0x019D, r24
  Debug.BufIndex = 0;
     32a:	10 92 a0 01 	sts	0x01A0, r1
     32e:	10 92 9f 01 	sts	0x019F, r1
     332:	20 e0       	ldi	r18, 0x00	; 0
     334:	04 c0       	rjmp	.+8      	; 0x33e <Debug_Struct_Init+0x3a>
  for(uint8_t i = 0; i < Debug.BufSize; i++){
    Debug.Buf[i] = DEBUG_NULL;
     336:	e0 5b       	subi	r30, 0xB0	; 176
     338:	fe 4f       	sbci	r31, 0xFE	; 254
     33a:	14 86       	std	Z+12, r1	; 0x0c
  }
  Debug.InputNumDigits = DEBUG_NULL;
  Debug.LastRxByte = DEBUG_NULL;
  Debug.BufSize = DEBUG_BUFFER_SIZE;
  Debug.BufIndex = 0;
  for(uint8_t i = 0; i < Debug.BufSize; i++){
     33c:	2f 5f       	subi	r18, 0xFF	; 255
     33e:	80 91 9d 01 	lds	r24, 0x019D
     342:	90 91 9e 01 	lds	r25, 0x019E
     346:	e2 2f       	mov	r30, r18
     348:	f0 e0       	ldi	r31, 0x00	; 0
     34a:	e8 17       	cp	r30, r24
     34c:	f9 07       	cpc	r31, r25
     34e:	98 f3       	brcs	.-26     	; 0x336 <Debug_Struct_Init+0x32>
    Debug.Buf[i] = DEBUG_NULL;
  }
}
     350:	08 95       	ret

00000352 <Debug_RX_Packet_Struct_Init>:

void Debug_RX_Packet_Struct_Init(void){
  Debug.RxPacket.CalculatedCRC    = DEBUG_NULL;
     352:	10 92 a4 01 	sts	0x01A4, r1
     356:	10 92 a3 01 	sts	0x01A3, r1
  Debug.RxPacket.ReceivedCRC      = DEBUG_NULL;
     35a:	10 92 a6 01 	sts	0x01A6, r1
     35e:	10 92 a5 01 	sts	0x01A5, r1
  Debug.RxPacket.CRCStatus        = DEBUG_FALSE;
     362:	10 92 a7 01 	sts	0x01A7, r1
  Debug.RxPacket.DataAvailable    = DEBUG_FALSE;
     366:	10 92 a8 01 	sts	0x01A8, r1
  Debug.RxPacket.DataReadComplete = DEBUG_TRUE;
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	80 93 a9 01 	sts	0x01A9, r24
}
     370:	08 95       	ret

00000372 <Debug_Config_GPIO>:

/*********************Debug Init Functions Start******************/

void Debug_Config_GPIO(void){
  //add gpio config
}
     372:	08 95       	ret

00000374 <Debug_Config_Clock>:
void Debug_Config_Clock(void){
  //add clock config
  #ifdef UART_DOUBLE_SPEED
  UCSR0A|=(1<<U2X0);  
  #else
  UCSR0A&=~(1<<U2X0);  
     374:	e0 ec       	ldi	r30, 0xC0	; 192
     376:	f0 e0       	ldi	r31, 0x00	; 0
     378:	80 81       	ld	r24, Z
     37a:	8d 7f       	andi	r24, 0xFD	; 253
     37c:	80 83       	st	Z, r24
  #endif
}
     37e:	08 95       	ret

00000380 <Debug_Config_BAUD_Rate>:

void Debug_Config_BAUD_Rate(uint32_t baud_rate){
     380:	9b 01       	movw	r18, r22
     382:	ac 01       	movw	r20, r24
  //add baud rate config
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
  #else
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
     384:	60 eb       	ldi	r22, 0xB0	; 176
     386:	71 e7       	ldi	r23, 0x71	; 113
     388:	8b e0       	ldi	r24, 0x0B	; 11
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0e 94 97 08 	call	0x112e	; 0x112e <__udivmodsi4>
     390:	21 50       	subi	r18, 0x01	; 1
     392:	30 40       	sbci	r19, 0x00	; 0
     394:	40 40       	sbci	r20, 0x00	; 0
     396:	50 40       	sbci	r21, 0x00	; 0
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
     398:	bb 27       	eor	r27, r27
     39a:	a5 2f       	mov	r26, r21
     39c:	94 2f       	mov	r25, r20
     39e:	83 2f       	mov	r24, r19
     3a0:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
     3a4:	20 93 c4 00 	sts	0x00C4, r18
}
     3a8:	08 95       	ret

000003aa <Debug_Config_Tx>:


void Debug_Config_Tx(void){
  //add tx config
  UCSR0B|=(1<<TXEN0);
     3aa:	e1 ec       	ldi	r30, 0xC1	; 193
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
     3ae:	80 81       	ld	r24, Z
     3b0:	88 60       	ori	r24, 0x08	; 8
     3b2:	80 83       	st	Z, r24
  UCSR0C|=(1<<UCSZ00)| (1<<UCSZ01);
     3b4:	e2 ec       	ldi	r30, 0xC2	; 194
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	80 81       	ld	r24, Z
     3ba:	86 60       	ori	r24, 0x06	; 6
     3bc:	80 83       	st	Z, r24
}
     3be:	08 95       	ret

000003c0 <Debug_Config_Rx>:


void Debug_Config_Rx(void){
  //add rx config
  UCSR0B|=(1<<RXEN0);
     3c0:	e1 ec       	ldi	r30, 0xC1	; 193
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	80 81       	ld	r24, Z
     3c6:	80 61       	ori	r24, 0x10	; 16
     3c8:	80 83       	st	Z, r24
  UCSR0C|=(1<<UCSZ00)| (1<<UCSZ01);
     3ca:	e2 ec       	ldi	r30, 0xC2	; 194
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	80 81       	ld	r24, Z
     3d0:	86 60       	ori	r24, 0x06	; 6
     3d2:	80 83       	st	Z, r24
}
     3d4:	08 95       	ret

000003d6 <Debug_Config_Rx_Interrupt>:

void Debug_Config_Rx_Interrupt(void){
  //add rx int config
  UCSR0B|=(1<<RXCIE0);
     3d6:	e1 ec       	ldi	r30, 0xC1	; 193
     3d8:	f0 e0       	ldi	r31, 0x00	; 0
     3da:	80 81       	ld	r24, Z
     3dc:	80 68       	ori	r24, 0x80	; 128
     3de:	80 83       	st	Z, r24
  sei();
     3e0:	78 94       	sei
}
     3e2:	08 95       	ret

000003e4 <Debug_Clear_Interrupt_Flag>:

void Debug_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}
     3e4:	08 95       	ret

000003e6 <Debug_Tx_Byte>:

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     3e6:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     3ea:	80 91 c0 00 	lds	r24, 0x00C0
     3ee:	85 ff       	sbrs	r24, 5
     3f0:	fc cf       	rjmp	.-8      	; 0x3ea <Debug_Tx_Byte+0x4>
}
     3f2:	08 95       	ret

000003f4 <Debug_Rx_Byte>:

uint8_t Debug_Rx_Byte(void){
  uint8_t val=0;
  if(UCSR0A & (1<<FE0)){
     3f4:	80 91 c0 00 	lds	r24, 0x00C0
     3f8:	84 ff       	sbrs	r24, 4
     3fa:	03 c0       	rjmp	.+6      	; 0x402 <Debug_Rx_Byte+0xe>
    val=UDR0;
     3fc:	80 91 c6 00 	lds	r24, 0x00C6
     400:	08 95       	ret
  }else if(UCSR0A & (1<<DOR0)){
     402:	80 91 c0 00 	lds	r24, 0x00C0
    val=UDR0;
  }else{
    val=UDR0;
     406:	80 91 c6 00 	lds	r24, 0x00C6
  }
  return val;
}
     40a:	08 95       	ret

0000040c <Debug_Timer_Struct_Init>:


/********************Debug Timer Functions Start*****************/

void Debug_Timer_Struct_Init(void){
  Debug.Timer.Enabled  = DEBUG_FALSE;
     40c:	10 92 a1 01 	sts	0x01A1, r1
  Debug.Timer.ResetVal = DEBUG_NULL;
     410:	10 92 a2 01 	sts	0x01A2, r1
}
     414:	08 95       	ret

00000416 <Debug_Timer_Init>:

void Debug_Timer_Init(void){
  //config debug timer for auto packet validation
  //calculate Debug.Timer.ResetVal if overflow intterrupt is used
}
     416:	08 95       	ret

00000418 <Debug_Timer_Enable>:

void Debug_Timer_Enable(void){
  //debug timer enable
}
     418:	08 95       	ret

0000041a <Debug_Timer_Disable>:

void Debug_Timer_Disable(void){ 
  //debug timer disable
}
     41a:	08 95       	ret

0000041c <Debug_Timer_Get_Status>:

uint8_t Debug_Timer_Get_Status(void){
  return Debug.Timer.Enabled;
     41c:	80 91 a1 01 	lds	r24, 0x01A1
}
     420:	08 95       	ret

00000422 <Debug_Timer_Get_Val>:

uint16_t Debug_Timer_Get_Val(void){
  //return current timer val
	return 0;
}
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	08 95       	ret

00000428 <Debug_Timer_Value_Reset>:


void Debug_Timer_Value_Reset(void){
  //reset timer val if compare mode selected
  //set timer val to Debug.Timer.ResetVal if Overflow int is used
}
     428:	08 95       	ret

0000042a <Debug_Timer_Clear_Interrupt_Flag>:

void Debug_Timer_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}
     42a:	08 95       	ret

0000042c <Debug_Tx_Buf>:



/********************Buffer Tx Functions Start*******************/

void Debug_Tx_Buf(volatile uint8_t *data, uint8_t start, uint8_t len){
     42c:	dc 01       	movw	r26, r24
  len += start;
     42e:	46 0f       	add	r20, r22
     430:	20 e0       	ldi	r18, 0x00	; 0
     432:	30 e0       	ldi	r19, 0x00	; 0
  for(uint16_t i = 0; i < len; i++){
     434:	50 e0       	ldi	r21, 0x00	; 0
     436:	0c c0       	rjmp	.+24     	; 0x450 <Debug_Tx_Buf+0x24>
     438:	fd 01       	movw	r30, r26
     43a:	e2 0f       	add	r30, r18
     43c:	f3 1f       	adc	r31, r19
	Debug_Tx_Byte( data[i] );
     43e:	80 81       	ld	r24, Z
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     440:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     444:	80 91 c0 00 	lds	r24, 0x00C0
     448:	85 ff       	sbrs	r24, 5
     44a:	fc cf       	rjmp	.-8      	; 0x444 <Debug_Tx_Buf+0x18>

/********************Buffer Tx Functions Start*******************/

void Debug_Tx_Buf(volatile uint8_t *data, uint8_t start, uint8_t len){
  len += start;
  for(uint16_t i = 0; i < len; i++){
     44c:	2f 5f       	subi	r18, 0xFF	; 255
     44e:	3f 4f       	sbci	r19, 0xFF	; 255
     450:	24 17       	cp	r18, r20
     452:	35 07       	cpc	r19, r21
     454:	88 f3       	brcs	.-30     	; 0x438 <Debug_Tx_Buf+0xc>
	Debug_Tx_Byte( data[i] );
  }
}
     456:	08 95       	ret

00000458 <Debug_Tx_NL>:
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     458:	8d e0       	ldi	r24, 0x0D	; 13
     45a:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     45e:	80 91 c0 00 	lds	r24, 0x00C0
     462:	85 ff       	sbrs	r24, 5
     464:	fc cf       	rjmp	.-8      	; 0x45e <Debug_Tx_NL+0x6>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     466:	8a e0       	ldi	r24, 0x0A	; 10
     468:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     46c:	80 91 c0 00 	lds	r24, 0x00C0
     470:	85 ff       	sbrs	r24, 5
     472:	fc cf       	rjmp	.-8      	; 0x46c <Debug_Tx_NL+0x14>
/*******************End Char Functions Start******************/

void Debug_Tx_NL(void){
  Debug_Tx_Byte('\r');
  Debug_Tx_Byte('\n');
}
     474:	08 95       	ret

00000476 <Debug_Tx_SP>:
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     476:	80 e2       	ldi	r24, 0x20	; 32
     478:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     47c:	80 91 c0 00 	lds	r24, 0x00C0
     480:	85 ff       	sbrs	r24, 5
     482:	fc cf       	rjmp	.-8      	; 0x47c <Debug_Tx_SP+0x6>
  Debug_Tx_Byte('\n');
}

void Debug_Tx_SP(void){
  Debug_Tx_Byte(' ');
}
     484:	08 95       	ret

00000486 <Debug_Tx_CM>:
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     486:	8c e2       	ldi	r24, 0x2C	; 44
     488:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     48c:	80 91 c0 00 	lds	r24, 0x00C0
     490:	85 ff       	sbrs	r24, 5
     492:	fc cf       	rjmp	.-8      	; 0x48c <Debug_Tx_CM+0x6>
  Debug_Tx_Byte(' ');
}

void Debug_Tx_CM(void){
  Debug_Tx_Byte(',');
}
     494:	08 95       	ret

00000496 <Debug_Tx_Text>:



/*********************Text Functions Start*******************/

void Debug_Tx_Text(char *str){
     496:	ac 01       	movw	r20, r24
     498:	20 e0       	ldi	r18, 0x00	; 0
     49a:	07 c0       	rjmp	.+14     	; 0x4aa <Debug_Tx_Text+0x14>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     49c:	e0 93 c6 00 	sts	0x00C6, r30
  while((UCSR0A & (1<<UDRE0))==0);
     4a0:	80 91 c0 00 	lds	r24, 0x00C0
     4a4:	85 ff       	sbrs	r24, 5
     4a6:	fc cf       	rjmp	.-8      	; 0x4a0 <Debug_Tx_Text+0xa>

void Debug_Tx_Text(char *str){
  uint8_t i = 0;
  while(str[i] != '\0'){
    Debug_Tx_Byte(str[i]);
    i++;
     4a8:	2f 5f       	subi	r18, 0xFF	; 255

/*********************Text Functions Start*******************/

void Debug_Tx_Text(char *str){
  uint8_t i = 0;
  while(str[i] != '\0'){
     4aa:	fa 01       	movw	r30, r20
     4ac:	e2 0f       	add	r30, r18
     4ae:	f1 1d       	adc	r31, r1
     4b0:	e0 81       	ld	r30, Z
     4b2:	ee 23       	and	r30, r30
     4b4:	99 f7       	brne	.-26     	; 0x49c <Debug_Tx_Text+0x6>
    Debug_Tx_Byte(str[i]);
    i++;
  }
}
     4b6:	08 95       	ret

000004b8 <Debug_Tx_Text_NL>:

void Debug_Tx_Text_NL(char *str){
  Debug_Tx_Text(str);
     4b8:	0e 94 4b 02 	call	0x496	; 0x496 <Debug_Tx_Text>
  Debug_Tx_NL();
     4bc:	0e 94 2c 02 	call	0x458	; 0x458 <Debug_Tx_NL>
}
     4c0:	08 95       	ret

000004c2 <Debug_Tx_Text_SP>:

void Debug_Tx_Text_SP(char *str){
  Debug_Tx_Text(str);
     4c2:	0e 94 4b 02 	call	0x496	; 0x496 <Debug_Tx_Text>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     4c6:	80 e2       	ldi	r24, 0x20	; 32
     4c8:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     4cc:	80 91 c0 00 	lds	r24, 0x00C0
     4d0:	85 ff       	sbrs	r24, 5
     4d2:	fc cf       	rjmp	.-8      	; 0x4cc <Debug_Tx_Text_SP+0xa>
}

void Debug_Tx_Text_SP(char *str){
  Debug_Tx_Text(str);
  Debug_Tx_SP();
}
     4d4:	08 95       	ret

000004d6 <Debug_Tx_Text_CM>:

void Debug_Tx_Text_CM(char *str){
  Debug_Tx_Text(str);
     4d6:	0e 94 4b 02 	call	0x496	; 0x496 <Debug_Tx_Text>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     4da:	8c e2       	ldi	r24, 0x2C	; 44
     4dc:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     4e0:	80 91 c0 00 	lds	r24, 0x00C0
     4e4:	85 ff       	sbrs	r24, 5
     4e6:	fc cf       	rjmp	.-8      	; 0x4e0 <Debug_Tx_Text_CM+0xa>
}

void Debug_Tx_Text_CM(char *str){
  Debug_Tx_Text(str);
  Debug_Tx_CM();
}
     4e8:	08 95       	ret

000004ea <Debug_Determine_Digit_Numbers>:



/*********************Number Functions Start********************/

void Debug_Determine_Digit_Numbers(uint32_t num){
     4ea:	bf 92       	push	r11
     4ec:	cf 92       	push	r12
     4ee:	df 92       	push	r13
     4f0:	ef 92       	push	r14
     4f2:	ff 92       	push	r15
     4f4:	0f 93       	push	r16
     4f6:	1f 93       	push	r17
     4f8:	6b 01       	movw	r12, r22
     4fa:	7c 01       	movw	r14, r24
  uint8_t i = 0;
  if(num == 0){
     4fc:	61 15       	cp	r22, r1
     4fe:	71 05       	cpc	r23, r1
     500:	81 05       	cpc	r24, r1
     502:	91 05       	cpc	r25, r1
     504:	31 f4       	brne	.+12     	; 0x512 <Debug_Determine_Digit_Numbers+0x28>
    Debug.Digits[0] = 0;
     506:	10 92 52 01 	sts	0x0152, r1
    Debug.InputNumDigits = 1;
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	80 93 5a 01 	sts	0x015A, r24
     510:	23 c0       	rjmp	.+70     	; 0x558 <Debug_Determine_Digit_Numbers+0x6e>
     512:	bb 24       	eor	r11, r11
  }else{
    while(num != 0){
      Debug.Digits[i] = num%10;
     514:	0b 2d       	mov	r16, r11
     516:	10 e0       	ldi	r17, 0x00	; 0
     518:	00 5b       	subi	r16, 0xB0	; 176
     51a:	1e 4f       	sbci	r17, 0xFE	; 254
     51c:	c7 01       	movw	r24, r14
     51e:	b6 01       	movw	r22, r12
     520:	2a e0       	ldi	r18, 0x0A	; 10
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	40 e0       	ldi	r20, 0x00	; 0
     526:	50 e0       	ldi	r21, 0x00	; 0
     528:	0e 94 97 08 	call	0x112e	; 0x112e <__udivmodsi4>
     52c:	f8 01       	movw	r30, r16
     52e:	62 83       	std	Z+2, r22	; 0x02
      num /= 10;
     530:	c7 01       	movw	r24, r14
     532:	b6 01       	movw	r22, r12
     534:	2a e0       	ldi	r18, 0x0A	; 10
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	40 e0       	ldi	r20, 0x00	; 0
     53a:	50 e0       	ldi	r21, 0x00	; 0
     53c:	0e 94 97 08 	call	0x112e	; 0x112e <__udivmodsi4>
     540:	c9 01       	movw	r24, r18
     542:	da 01       	movw	r26, r20
     544:	6c 01       	movw	r12, r24
     546:	7d 01       	movw	r14, r26
      i++;
     548:	b3 94       	inc	r11
  uint8_t i = 0;
  if(num == 0){
    Debug.Digits[0] = 0;
    Debug.InputNumDigits = 1;
  }else{
    while(num != 0){
     54a:	c1 14       	cp	r12, r1
     54c:	d1 04       	cpc	r13, r1
     54e:	e1 04       	cpc	r14, r1
     550:	f1 04       	cpc	r15, r1
     552:	01 f7       	brne	.-64     	; 0x514 <Debug_Determine_Digit_Numbers+0x2a>
      Debug.Digits[i] = num%10;
      num /= 10;
      i++;
    }
	Debug.InputNumDigits = i;
     554:	b0 92 5a 01 	sts	0x015A, r11
  }
}
     558:	1f 91       	pop	r17
     55a:	0f 91       	pop	r16
     55c:	ff 90       	pop	r15
     55e:	ef 90       	pop	r14
     560:	df 90       	pop	r13
     562:	cf 90       	pop	r12
     564:	bf 90       	pop	r11
     566:	08 95       	ret

00000568 <Debug_Tx_Number_Digits>:

void Debug_Tx_Number_Digits(void){
  for(uint8_t i = Debug.InputNumDigits; i > 0; i--){
     568:	90 91 5a 01 	lds	r25, 0x015A
     56c:	0f c0       	rjmp	.+30     	; 0x58c <Debug_Tx_Number_Digits+0x24>
    uint8_t temp = i;
    temp -= 1;
     56e:	29 2f       	mov	r18, r25
     570:	21 50       	subi	r18, 0x01	; 1
    temp  = Debug.Digits[temp];
     572:	e2 2f       	mov	r30, r18
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	e0 5b       	subi	r30, 0xB0	; 176
     578:	fe 4f       	sbci	r31, 0xFE	; 254
     57a:	82 81       	ldd	r24, Z+2	; 0x02
    temp += 48;
     57c:	80 5d       	subi	r24, 0xD0	; 208
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     57e:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     582:	80 91 c0 00 	lds	r24, 0x00C0
     586:	92 2f       	mov	r25, r18
     588:	85 ff       	sbrs	r24, 5
     58a:	fb cf       	rjmp	.-10     	; 0x582 <Debug_Tx_Number_Digits+0x1a>
	Debug.InputNumDigits = i;
  }
}

void Debug_Tx_Number_Digits(void){
  for(uint8_t i = Debug.InputNumDigits; i > 0; i--){
     58c:	99 23       	and	r25, r25
     58e:	79 f7       	brne	.-34     	; 0x56e <Debug_Tx_Number_Digits+0x6>
    temp -= 1;
    temp  = Debug.Digits[temp];
    temp += 48;
    Debug_Tx_Byte(temp);
  }
}
     590:	08 95       	ret

00000592 <Debug_Tx_Number>:

void Debug_Tx_Number(int32_t num){
     592:	9b 01       	movw	r18, r22
     594:	ac 01       	movw	r20, r24
  if(num < 0){
     596:	97 ff       	sbrs	r25, 7
     598:	0e c0       	rjmp	.+28     	; 0x5b6 <Debug_Tx_Number+0x24>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     59a:	8d e2       	ldi	r24, 0x2D	; 45
     59c:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     5a0:	80 91 c0 00 	lds	r24, 0x00C0
     5a4:	85 ff       	sbrs	r24, 5
     5a6:	fc cf       	rjmp	.-8      	; 0x5a0 <Debug_Tx_Number+0xe>
}

void Debug_Tx_Number(int32_t num){
  if(num < 0){
    Debug_Tx_Byte('-');
	  num = -num;
     5a8:	50 95       	com	r21
     5aa:	40 95       	com	r20
     5ac:	30 95       	com	r19
     5ae:	21 95       	neg	r18
     5b0:	3f 4f       	sbci	r19, 0xFF	; 255
     5b2:	4f 4f       	sbci	r20, 0xFF	; 255
     5b4:	5f 4f       	sbci	r21, 0xFF	; 255
  }
  Debug_Determine_Digit_Numbers((uint32_t)num);
     5b6:	ca 01       	movw	r24, r20
     5b8:	b9 01       	movw	r22, r18
     5ba:	0e 94 75 02 	call	0x4ea	; 0x4ea <Debug_Determine_Digit_Numbers>
  Debug_Tx_Number_Digits();
     5be:	0e 94 b4 02 	call	0x568	; 0x568 <Debug_Tx_Number_Digits>
}
     5c2:	08 95       	ret

000005c4 <Debug_Tx_Number_Hex_Raw>:

void Debug_Tx_Number_Hex_Raw(uint64_t val){
     5c4:	2f 92       	push	r2
     5c6:	3f 92       	push	r3
     5c8:	4f 92       	push	r4
     5ca:	5f 92       	push	r5
     5cc:	6f 92       	push	r6
     5ce:	7f 92       	push	r7
     5d0:	8f 92       	push	r8
     5d2:	9f 92       	push	r9
     5d4:	af 92       	push	r10
     5d6:	bf 92       	push	r11
     5d8:	cf 92       	push	r12
     5da:	df 92       	push	r13
     5dc:	ef 92       	push	r14
     5de:	ff 92       	push	r15
     5e0:	0f 93       	push	r16
     5e2:	1f 93       	push	r17
     5e4:	df 93       	push	r29
     5e6:	cf 93       	push	r28
     5e8:	00 d0       	rcall	.+0      	; 0x5ea <Debug_Tx_Number_Hex_Raw+0x26>
     5ea:	00 d0       	rcall	.+0      	; 0x5ec <Debug_Tx_Number_Hex_Raw+0x28>
     5ec:	0f 92       	push	r0
     5ee:	cd b7       	in	r28, 0x3d	; 61
     5f0:	de b7       	in	r29, 0x3e	; 62
     5f2:	29 83       	std	Y+1, r18	; 0x01
     5f4:	3a 83       	std	Y+2, r19	; 0x02
     5f6:	4b 83       	std	Y+3, r20	; 0x03
     5f8:	25 2e       	mov	r2, r21
     5fa:	36 2e       	mov	r3, r22
     5fc:	47 2e       	mov	r4, r23
     5fe:	58 2e       	mov	r5, r24
     600:	69 2e       	mov	r6, r25
  uint16_t hex_digit, index = 0, loop_counter = 0;
  if(val <= 0xFF){
     602:	99 23       	and	r25, r25
     604:	09 f0       	breq	.+2      	; 0x608 <Debug_Tx_Number_Hex_Raw+0x44>
     606:	44 c0       	rjmp	.+136    	; 0x690 <Debug_Tx_Number_Hex_Raw+0xcc>
     608:	88 23       	and	r24, r24
     60a:	d1 f5       	brne	.+116    	; 0x680 <Debug_Tx_Number_Hex_Raw+0xbc>
     60c:	77 23       	and	r23, r23
     60e:	81 f5       	brne	.+96     	; 0x670 <Debug_Tx_Number_Hex_Raw+0xac>
     610:	66 23       	and	r22, r22
     612:	31 f5       	brne	.+76     	; 0x660 <Debug_Tx_Number_Hex_Raw+0x9c>
     614:	55 23       	and	r21, r21
     616:	e1 f4       	brne	.+56     	; 0x650 <Debug_Tx_Number_Hex_Raw+0x8c>
     618:	44 23       	and	r20, r20
     61a:	91 f4       	brne	.+36     	; 0x640 <Debug_Tx_Number_Hex_Raw+0x7c>
     61c:	33 23       	and	r19, r19
     61e:	41 f4       	brne	.+16     	; 0x630 <Debug_Tx_Number_Hex_Raw+0x6c>
     620:	88 e0       	ldi	r24, 0x08	; 8
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	9d 83       	std	Y+5, r25	; 0x05
     626:	8c 83       	std	Y+4, r24	; 0x04
     628:	e2 e0       	ldi	r30, 0x02	; 2
     62a:	8e 2e       	mov	r8, r30
     62c:	91 2c       	mov	r9, r1
     62e:	37 c0       	rjmp	.+110    	; 0x69e <Debug_Tx_Number_Hex_Raw+0xda>
    index = 8;
    loop_counter = 2;
  }
	else if(val <= 0xFFFF){
     630:	e0 e1       	ldi	r30, 0x10	; 16
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	fd 83       	std	Y+5, r31	; 0x05
     636:	ec 83       	std	Y+4, r30	; 0x04
     638:	74 e0       	ldi	r23, 0x04	; 4
     63a:	87 2e       	mov	r8, r23
     63c:	91 2c       	mov	r9, r1
     63e:	2f c0       	rjmp	.+94     	; 0x69e <Debug_Tx_Number_Hex_Raw+0xda>
    index = 16;
    loop_counter = 4;     
  }
	else if(val <= 0xFFFFFF){
     640:	88 e1       	ldi	r24, 0x18	; 24
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	9d 83       	std	Y+5, r25	; 0x05
     646:	8c 83       	std	Y+4, r24	; 0x04
     648:	66 e0       	ldi	r22, 0x06	; 6
     64a:	86 2e       	mov	r8, r22
     64c:	91 2c       	mov	r9, r1
     64e:	27 c0       	rjmp	.+78     	; 0x69e <Debug_Tx_Number_Hex_Raw+0xda>
    index = 24;
    loop_counter = 6;     
  }
	else if(val <= 0xFFFFFFFF){
     650:	e0 e2       	ldi	r30, 0x20	; 32
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	fd 83       	std	Y+5, r31	; 0x05
     656:	ec 83       	std	Y+4, r30	; 0x04
     658:	58 e0       	ldi	r21, 0x08	; 8
     65a:	85 2e       	mov	r8, r21
     65c:	91 2c       	mov	r9, r1
     65e:	1f c0       	rjmp	.+62     	; 0x69e <Debug_Tx_Number_Hex_Raw+0xda>
    index = 32;
    loop_counter = 8;     
  }
	else if(val <= 0xFFFFFFFFFF){
     660:	88 e2       	ldi	r24, 0x28	; 40
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	9d 83       	std	Y+5, r25	; 0x05
     666:	8c 83       	std	Y+4, r24	; 0x04
     668:	4a e0       	ldi	r20, 0x0A	; 10
     66a:	84 2e       	mov	r8, r20
     66c:	91 2c       	mov	r9, r1
     66e:	17 c0       	rjmp	.+46     	; 0x69e <Debug_Tx_Number_Hex_Raw+0xda>
    index = 40;
    loop_counter = 10;     
  }
	else if(val <= 0xFFFFFFFFFFFF){
     670:	e0 e3       	ldi	r30, 0x30	; 48
     672:	f0 e0       	ldi	r31, 0x00	; 0
     674:	fd 83       	std	Y+5, r31	; 0x05
     676:	ec 83       	std	Y+4, r30	; 0x04
     678:	3c e0       	ldi	r19, 0x0C	; 12
     67a:	83 2e       	mov	r8, r19
     67c:	91 2c       	mov	r9, r1
     67e:	0f c0       	rjmp	.+30     	; 0x69e <Debug_Tx_Number_Hex_Raw+0xda>
    index = 48;
    loop_counter = 12;     
  }
	else if(val <= 0xFFFFFFFFFFFFFF){
     680:	88 e3       	ldi	r24, 0x38	; 56
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	9d 83       	std	Y+5, r25	; 0x05
     686:	8c 83       	std	Y+4, r24	; 0x04
     688:	2e e0       	ldi	r18, 0x0E	; 14
     68a:	82 2e       	mov	r8, r18
     68c:	91 2c       	mov	r9, r1
     68e:	07 c0       	rjmp	.+14     	; 0x69e <Debug_Tx_Number_Hex_Raw+0xda>
     690:	e0 e4       	ldi	r30, 0x40	; 64
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	fd 83       	std	Y+5, r31	; 0x05
     696:	ec 83       	std	Y+4, r30	; 0x04
     698:	90 e1       	ldi	r25, 0x10	; 16
     69a:	89 2e       	mov	r8, r25
     69c:	91 2c       	mov	r9, r1
     69e:	77 24       	eor	r7, r7
     6a0:	20 c0       	rjmp	.+64     	; 0x6e2 <Debug_Tx_Number_Hex_Raw+0x11e>
	else{
    index = 64;
    loop_counter = 16;
  }
  for(uint8_t i = 0; i < loop_counter; i++){
	  index -= 4;
     6a2:	8c 81       	ldd	r24, Y+4	; 0x04
     6a4:	9d 81       	ldd	r25, Y+5	; 0x05
     6a6:	04 97       	sbiw	r24, 0x04	; 4
     6a8:	9d 83       	std	Y+5, r25	; 0x05
     6aa:	8c 83       	std	Y+4, r24	; 0x04
	  hex_digit = ((val >> index) & 0x0F);
     6ac:	29 81       	ldd	r18, Y+1	; 0x01
     6ae:	3a 81       	ldd	r19, Y+2	; 0x02
     6b0:	4b 81       	ldd	r20, Y+3	; 0x03
     6b2:	52 2d       	mov	r21, r2
     6b4:	63 2d       	mov	r22, r3
     6b6:	74 2d       	mov	r23, r4
     6b8:	85 2d       	mov	r24, r5
     6ba:	96 2d       	mov	r25, r6
     6bc:	0c 81       	ldd	r16, Y+4	; 0x04
     6be:	0e 94 18 08 	call	0x1030	; 0x1030 <__lshrdi3>
     6c2:	c9 01       	movw	r24, r18
     6c4:	8f 70       	andi	r24, 0x0F	; 15
     6c6:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit > 9){
     6c8:	8a 30       	cpi	r24, 0x0A	; 10
     6ca:	91 05       	cpc	r25, r1
     6cc:	10 f0       	brcs	.+4      	; 0x6d2 <Debug_Tx_Number_Hex_Raw+0x10e>
	    hex_digit += 55;
     6ce:	c7 96       	adiw	r24, 0x37	; 55
     6d0:	01 c0       	rjmp	.+2      	; 0x6d4 <Debug_Tx_Number_Hex_Raw+0x110>
	  }
	  else{
	    hex_digit += 48;
     6d2:	c0 96       	adiw	r24, 0x30	; 48
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     6d4:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     6d8:	80 91 c0 00 	lds	r24, 0x00C0
     6dc:	85 ff       	sbrs	r24, 5
     6de:	fc cf       	rjmp	.-8      	; 0x6d8 <Debug_Tx_Number_Hex_Raw+0x114>
  }
	else{
    index = 64;
    loop_counter = 16;
  }
  for(uint8_t i = 0; i < loop_counter; i++){
     6e0:	73 94       	inc	r7
     6e2:	87 2d       	mov	r24, r7
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	88 15       	cp	r24, r8
     6e8:	99 05       	cpc	r25, r9
     6ea:	d8 f2       	brcs	.-74     	; 0x6a2 <Debug_Tx_Number_Hex_Raw+0xde>
	  else{
	    hex_digit += 48;
	  }
	  Debug_Tx_Byte((uint8_t)hex_digit);
  }
}
     6ec:	0f 90       	pop	r0
     6ee:	0f 90       	pop	r0
     6f0:	0f 90       	pop	r0
     6f2:	0f 90       	pop	r0
     6f4:	0f 90       	pop	r0
     6f6:	cf 91       	pop	r28
     6f8:	df 91       	pop	r29
     6fa:	1f 91       	pop	r17
     6fc:	0f 91       	pop	r16
     6fe:	ff 90       	pop	r15
     700:	ef 90       	pop	r14
     702:	df 90       	pop	r13
     704:	cf 90       	pop	r12
     706:	bf 90       	pop	r11
     708:	af 90       	pop	r10
     70a:	9f 90       	pop	r9
     70c:	8f 90       	pop	r8
     70e:	7f 90       	pop	r7
     710:	6f 90       	pop	r6
     712:	5f 90       	pop	r5
     714:	4f 90       	pop	r4
     716:	3f 90       	pop	r3
     718:	2f 90       	pop	r2
     71a:	08 95       	ret

0000071c <Debug_Tx_Number_Hex>:

void Debug_Tx_Number_Hex(uint64_t val){
     71c:	e8 2f       	mov	r30, r24
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     71e:	80 e3       	ldi	r24, 0x30	; 48
     720:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     724:	80 91 c0 00 	lds	r24, 0x00C0
     728:	85 ff       	sbrs	r24, 5
     72a:	fc cf       	rjmp	.-8      	; 0x724 <Debug_Tx_Number_Hex+0x8>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     72c:	88 e7       	ldi	r24, 0x78	; 120
     72e:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     732:	80 91 c0 00 	lds	r24, 0x00C0
     736:	85 ff       	sbrs	r24, 5
     738:	fc cf       	rjmp	.-8      	; 0x732 <Debug_Tx_Number_Hex+0x16>
}

void Debug_Tx_Number_Hex(uint64_t val){
  Debug_Tx_Byte('0');
  Debug_Tx_Byte('x');
  Debug_Tx_Number_Hex_Raw(val);
     73a:	8e 2f       	mov	r24, r30
     73c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <Debug_Tx_Number_Hex_Raw>
}
     740:	08 95       	ret

00000742 <Debug_Tx_Number_Bin_Raw>:


void Debug_Tx_Number_Bin_Raw(uint64_t val){
     742:	2f 92       	push	r2
     744:	3f 92       	push	r3
     746:	4f 92       	push	r4
     748:	5f 92       	push	r5
     74a:	6f 92       	push	r6
     74c:	7f 92       	push	r7
     74e:	8f 92       	push	r8
     750:	9f 92       	push	r9
     752:	af 92       	push	r10
     754:	bf 92       	push	r11
     756:	cf 92       	push	r12
     758:	df 92       	push	r13
     75a:	ef 92       	push	r14
     75c:	ff 92       	push	r15
     75e:	0f 93       	push	r16
     760:	1f 93       	push	r17
     762:	df 93       	push	r29
     764:	cf 93       	push	r28
     766:	00 d0       	rcall	.+0      	; 0x768 <Debug_Tx_Number_Bin_Raw+0x26>
     768:	00 d0       	rcall	.+0      	; 0x76a <Debug_Tx_Number_Bin_Raw+0x28>
     76a:	00 d0       	rcall	.+0      	; 0x76c <Debug_Tx_Number_Bin_Raw+0x2a>
     76c:	cd b7       	in	r28, 0x3d	; 61
     76e:	de b7       	in	r29, 0x3e	; 62
     770:	29 83       	std	Y+1, r18	; 0x01
     772:	3a 83       	std	Y+2, r19	; 0x02
     774:	4b 83       	std	Y+3, r20	; 0x03
     776:	5c 83       	std	Y+4, r21	; 0x04
     778:	1b 01       	movw	r2, r22
     77a:	2c 01       	movw	r4, r24
    loop_counter = 15;     
  }else{
    loop_counter = 31;
  }
	
	if(val <= 0xFF){
     77c:	55 20       	and	r5, r5
     77e:	d1 f4       	brne	.+52     	; 0x7b4 <Debug_Tx_Number_Bin_Raw+0x72>
     780:	88 23       	and	r24, r24
     782:	b1 f4       	brne	.+44     	; 0x7b0 <Debug_Tx_Number_Bin_Raw+0x6e>
     784:	33 20       	and	r3, r3
     786:	91 f4       	brne	.+36     	; 0x7ac <Debug_Tx_Number_Bin_Raw+0x6a>
     788:	66 23       	and	r22, r22
     78a:	71 f4       	brne	.+28     	; 0x7a8 <Debug_Tx_Number_Bin_Raw+0x66>
     78c:	55 23       	and	r21, r21
     78e:	51 f4       	brne	.+20     	; 0x7a4 <Debug_Tx_Number_Bin_Raw+0x62>
     790:	44 23       	and	r20, r20
     792:	31 f4       	brne	.+12     	; 0x7a0 <Debug_Tx_Number_Bin_Raw+0x5e>
     794:	33 23       	and	r19, r19
     796:	11 f4       	brne	.+4      	; 0x79c <Debug_Tx_Number_Bin_Raw+0x5a>
     798:	07 e0       	ldi	r16, 0x07	; 7
     79a:	0d c0       	rjmp	.+26     	; 0x7b6 <Debug_Tx_Number_Bin_Raw+0x74>
    loop_counter = 7;
  }
	else if(val <= 0xFFFF){
     79c:	0f e0       	ldi	r16, 0x0F	; 15
     79e:	0b c0       	rjmp	.+22     	; 0x7b6 <Debug_Tx_Number_Bin_Raw+0x74>
    loop_counter = 15;     
  }
	else if(val <= 0xFFFFFF){
     7a0:	07 e1       	ldi	r16, 0x17	; 23
     7a2:	09 c0       	rjmp	.+18     	; 0x7b6 <Debug_Tx_Number_Bin_Raw+0x74>
    loop_counter = 23;     
  }
	else if(val <= 0xFFFFFFFF){
     7a4:	0f e1       	ldi	r16, 0x1F	; 31
     7a6:	07 c0       	rjmp	.+14     	; 0x7b6 <Debug_Tx_Number_Bin_Raw+0x74>
    loop_counter = 31;     
  }
	else if(val <= 0xFFFFFFFFFF){
     7a8:	07 e2       	ldi	r16, 0x27	; 39
     7aa:	05 c0       	rjmp	.+10     	; 0x7b6 <Debug_Tx_Number_Bin_Raw+0x74>
    loop_counter = 39;     
  }
	else if(val <= 0xFFFFFFFFFFFF){
     7ac:	0f e2       	ldi	r16, 0x2F	; 47
     7ae:	03 c0       	rjmp	.+6      	; 0x7b6 <Debug_Tx_Number_Bin_Raw+0x74>
    loop_counter = 47;     
  }
	else if(val <= 0xFFFFFFFFFFFFFF){
     7b0:	07 e3       	ldi	r16, 0x37	; 55
     7b2:	01 c0       	rjmp	.+2      	; 0x7b6 <Debug_Tx_Number_Bin_Raw+0x74>
     7b4:	0f e3       	ldi	r16, 0x3F	; 63
     7b6:	1e 82       	std	Y+6, r1	; 0x06
     7b8:	1d 82       	std	Y+5, r1	; 0x05
  Debug_Tx_Byte('x');
  Debug_Tx_Number_Hex_Raw(val);
}


void Debug_Tx_Number_Bin_Raw(uint64_t val){
     7ba:	80 2e       	mov	r8, r16
     7bc:	99 24       	eor	r9, r9
  }
	else{
    loop_counter = 63;
  }
  
  for(int i = loop_counter; i >= 0; i--){
     7be:	34 01       	movw	r6, r8
     7c0:	08 94       	sec
     7c2:	61 1c       	adc	r6, r1
     7c4:	71 1c       	adc	r7, r1
    if( (val>>i) & 1){
     7c6:	84 01       	movw	r16, r8
     7c8:	8d 81       	ldd	r24, Y+5	; 0x05
     7ca:	9e 81       	ldd	r25, Y+6	; 0x06
     7cc:	08 1b       	sub	r16, r24
     7ce:	19 0b       	sbc	r17, r25
     7d0:	29 81       	ldd	r18, Y+1	; 0x01
     7d2:	3a 81       	ldd	r19, Y+2	; 0x02
     7d4:	4b 81       	ldd	r20, Y+3	; 0x03
     7d6:	5c 81       	ldd	r21, Y+4	; 0x04
     7d8:	b1 01       	movw	r22, r2
     7da:	c2 01       	movw	r24, r4
     7dc:	0e 94 18 08 	call	0x1030	; 0x1030 <__lshrdi3>
     7e0:	c9 01       	movw	r24, r18
     7e2:	81 70       	andi	r24, 0x01	; 1
     7e4:	90 70       	andi	r25, 0x00	; 0
     7e6:	89 2b       	or	r24, r25
     7e8:	41 f0       	breq	.+16     	; 0x7fa <Debug_Tx_Number_Bin_Raw+0xb8>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     7ea:	91 e3       	ldi	r25, 0x31	; 49
     7ec:	90 93 c6 00 	sts	0x00C6, r25
  while((UCSR0A & (1<<UDRE0))==0);
     7f0:	80 91 c0 00 	lds	r24, 0x00C0
     7f4:	85 ff       	sbrs	r24, 5
     7f6:	fc cf       	rjmp	.-8      	; 0x7f0 <Debug_Tx_Number_Bin_Raw+0xae>
     7f8:	07 c0       	rjmp	.+14     	; 0x808 <Debug_Tx_Number_Bin_Raw+0xc6>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     7fa:	e0 e3       	ldi	r30, 0x30	; 48
     7fc:	e0 93 c6 00 	sts	0x00C6, r30
  while((UCSR0A & (1<<UDRE0))==0);
     800:	80 91 c0 00 	lds	r24, 0x00C0
     804:	85 ff       	sbrs	r24, 5
     806:	fc cf       	rjmp	.-8      	; 0x800 <Debug_Tx_Number_Bin_Raw+0xbe>
     808:	8d 81       	ldd	r24, Y+5	; 0x05
     80a:	9e 81       	ldd	r25, Y+6	; 0x06
     80c:	01 96       	adiw	r24, 0x01	; 1
     80e:	9e 83       	std	Y+6, r25	; 0x06
     810:	8d 83       	std	Y+5, r24	; 0x05
  }
	else{
    loop_counter = 63;
  }
  
  for(int i = loop_counter; i >= 0; i--){
     812:	86 15       	cp	r24, r6
     814:	97 05       	cpc	r25, r7
     816:	b9 f6       	brne	.-82     	; 0x7c6 <Debug_Tx_Number_Bin_Raw+0x84>
      Debug_Tx_Byte( 49 );   
    }else{
      Debug_Tx_Byte( 48 );         
    }
  }
}
     818:	26 96       	adiw	r28, 0x06	; 6
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	f8 94       	cli
     81e:	de bf       	out	0x3e, r29	; 62
     820:	0f be       	out	0x3f, r0	; 63
     822:	cd bf       	out	0x3d, r28	; 61
     824:	cf 91       	pop	r28
     826:	df 91       	pop	r29
     828:	1f 91       	pop	r17
     82a:	0f 91       	pop	r16
     82c:	ff 90       	pop	r15
     82e:	ef 90       	pop	r14
     830:	df 90       	pop	r13
     832:	cf 90       	pop	r12
     834:	bf 90       	pop	r11
     836:	af 90       	pop	r10
     838:	9f 90       	pop	r9
     83a:	8f 90       	pop	r8
     83c:	7f 90       	pop	r7
     83e:	6f 90       	pop	r6
     840:	5f 90       	pop	r5
     842:	4f 90       	pop	r4
     844:	3f 90       	pop	r3
     846:	2f 90       	pop	r2
     848:	08 95       	ret

0000084a <Debug_Tx_Number_Bin>:

void Debug_Tx_Number_Bin(uint64_t val){
     84a:	e8 2f       	mov	r30, r24
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     84c:	80 e3       	ldi	r24, 0x30	; 48
     84e:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     852:	80 91 c0 00 	lds	r24, 0x00C0
     856:	85 ff       	sbrs	r24, 5
     858:	fc cf       	rjmp	.-8      	; 0x852 <Debug_Tx_Number_Bin+0x8>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     85a:	82 e6       	ldi	r24, 0x62	; 98
     85c:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     860:	80 91 c0 00 	lds	r24, 0x00C0
     864:	85 ff       	sbrs	r24, 5
     866:	fc cf       	rjmp	.-8      	; 0x860 <Debug_Tx_Number_Bin+0x16>
}

void Debug_Tx_Number_Bin(uint64_t val){
  Debug_Tx_Byte('0');
  Debug_Tx_Byte('b');
  Debug_Tx_Number_Bin_Raw(val);
     868:	8e 2f       	mov	r24, r30
     86a:	0e 94 a1 03 	call	0x742	; 0x742 <Debug_Tx_Number_Bin_Raw>
}
     86e:	08 95       	ret

00000870 <Debug_Tx_Number_NL>:


/************Number with End Char Functions Start**************/

void Debug_Tx_Number_NL(int32_t num){
  Debug_Tx_Number(num);
     870:	0e 94 c9 02 	call	0x592	; 0x592 <Debug_Tx_Number>
  Debug_Tx_NL();
     874:	0e 94 2c 02 	call	0x458	; 0x458 <Debug_Tx_NL>
}
     878:	08 95       	ret

0000087a <Debug_Tx_Number_SP>:

void Debug_Tx_Number_SP(int32_t num){
  Debug_Tx_Number(num);
     87a:	0e 94 c9 02 	call	0x592	; 0x592 <Debug_Tx_Number>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     87e:	80 e2       	ldi	r24, 0x20	; 32
     880:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     884:	80 91 c0 00 	lds	r24, 0x00C0
     888:	85 ff       	sbrs	r24, 5
     88a:	fc cf       	rjmp	.-8      	; 0x884 <Debug_Tx_Number_SP+0xa>
}

void Debug_Tx_Number_SP(int32_t num){
  Debug_Tx_Number(num);
  Debug_Tx_SP();
}
     88c:	08 95       	ret

0000088e <Debug_Tx_Number_CM>:

void Debug_Tx_Number_CM(int32_t num){
  Debug_Tx_Number(num);
     88e:	0e 94 c9 02 	call	0x592	; 0x592 <Debug_Tx_Number>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     892:	8c e2       	ldi	r24, 0x2C	; 44
     894:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     898:	80 91 c0 00 	lds	r24, 0x00C0
     89c:	85 ff       	sbrs	r24, 5
     89e:	fc cf       	rjmp	.-8      	; 0x898 <Debug_Tx_Number_CM+0xa>
}

void Debug_Tx_Number_CM(int32_t num){
  Debug_Tx_Number(num);
  Debug_Tx_CM();
}
     8a0:	08 95       	ret

000008a2 <Debug_Tx_Number_Hex_NL>:


/**********Hex Number with End Char Functions Start************/

void Debug_Tx_Number_Hex_NL(uint64_t num){
  Debug_Tx_Number_Hex(num);
     8a2:	0e 94 8e 03 	call	0x71c	; 0x71c <Debug_Tx_Number_Hex>
  Debug_Tx_NL();
     8a6:	0e 94 2c 02 	call	0x458	; 0x458 <Debug_Tx_NL>
}
     8aa:	08 95       	ret

000008ac <Debug_Tx_Number_Hex_SP>:

void Debug_Tx_Number_Hex_SP(uint64_t num){
  Debug_Tx_Number_Hex(num);
     8ac:	0e 94 8e 03 	call	0x71c	; 0x71c <Debug_Tx_Number_Hex>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     8b0:	80 e2       	ldi	r24, 0x20	; 32
     8b2:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     8b6:	80 91 c0 00 	lds	r24, 0x00C0
     8ba:	85 ff       	sbrs	r24, 5
     8bc:	fc cf       	rjmp	.-8      	; 0x8b6 <Debug_Tx_Number_Hex_SP+0xa>
}

void Debug_Tx_Number_Hex_SP(uint64_t num){
  Debug_Tx_Number_Hex(num);
  Debug_Tx_SP();
}
     8be:	08 95       	ret

000008c0 <Debug_Tx_Number_Hex_CM>:

void Debug_Tx_Number_Hex_CM(uint64_t num){
  Debug_Tx_Number_Hex(num);
     8c0:	0e 94 8e 03 	call	0x71c	; 0x71c <Debug_Tx_Number_Hex>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     8c4:	8c e2       	ldi	r24, 0x2C	; 44
     8c6:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     8ca:	80 91 c0 00 	lds	r24, 0x00C0
     8ce:	85 ff       	sbrs	r24, 5
     8d0:	fc cf       	rjmp	.-8      	; 0x8ca <Debug_Tx_Number_Hex_CM+0xa>
}

void Debug_Tx_Number_Hex_CM(uint64_t num){
  Debug_Tx_Number_Hex(num);
  Debug_Tx_CM();
}
     8d2:	08 95       	ret

000008d4 <Debug_Tx_Number_Bin_NL>:


/**********Bin Number with End Char Functions Start************/

void Debug_Tx_Number_Bin_NL(uint64_t num){
  Debug_Tx_Number_Bin(num);
     8d4:	0e 94 25 04 	call	0x84a	; 0x84a <Debug_Tx_Number_Bin>
  Debug_Tx_NL();
     8d8:	0e 94 2c 02 	call	0x458	; 0x458 <Debug_Tx_NL>
}
     8dc:	08 95       	ret

000008de <Debug_Tx_Number_Bin_SP>:

void Debug_Tx_Number_Bin_SP(uint64_t num){
  Debug_Tx_Number_Bin(num);
     8de:	0e 94 25 04 	call	0x84a	; 0x84a <Debug_Tx_Number_Bin>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     8e2:	80 e2       	ldi	r24, 0x20	; 32
     8e4:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     8e8:	80 91 c0 00 	lds	r24, 0x00C0
     8ec:	85 ff       	sbrs	r24, 5
     8ee:	fc cf       	rjmp	.-8      	; 0x8e8 <Debug_Tx_Number_Bin_SP+0xa>
}

void Debug_Tx_Number_Bin_SP(uint64_t num){
  Debug_Tx_Number_Bin(num);
  Debug_Tx_SP();
}
     8f0:	08 95       	ret

000008f2 <Debug_Tx_Number_Bin_CM>:

void Debug_Tx_Number_Bin_CM(uint64_t num){
  Debug_Tx_Number_Bin(num);
     8f2:	0e 94 25 04 	call	0x84a	; 0x84a <Debug_Tx_Number_Bin>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     8f6:	8c e2       	ldi	r24, 0x2C	; 44
     8f8:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     8fc:	80 91 c0 00 	lds	r24, 0x00C0
     900:	85 ff       	sbrs	r24, 5
     902:	fc cf       	rjmp	.-8      	; 0x8fc <Debug_Tx_Number_Bin_CM+0xa>
}

void Debug_Tx_Number_Bin_CM(uint64_t num){
  Debug_Tx_Number_Bin(num);
  Debug_Tx_CM();
}
     904:	08 95       	ret

00000906 <Debug_Tx_Parameter_NL>:



/************Number with Parameter Functions Start*************/

void Debug_Tx_Parameter_NL(char *name, int32_t num){
     906:	ef 92       	push	r14
     908:	ff 92       	push	r15
     90a:	0f 93       	push	r16
     90c:	1f 93       	push	r17
     90e:	7a 01       	movw	r14, r20
     910:	8b 01       	movw	r16, r22
  Debug_Tx_Text(name);
     912:	0e 94 4b 02 	call	0x496	; 0x496 <Debug_Tx_Text>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     916:	80 e2       	ldi	r24, 0x20	; 32
     918:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     91c:	80 91 c0 00 	lds	r24, 0x00C0
     920:	85 ff       	sbrs	r24, 5
     922:	fc cf       	rjmp	.-8      	; 0x91c <Debug_Tx_Parameter_NL+0x16>
/************Number with Parameter Functions Start*************/

void Debug_Tx_Parameter_NL(char *name, int32_t num){
  Debug_Tx_Text(name);
  Debug_Tx_SP();
  Debug_Tx_Number_NL(num);
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 38 04 	call	0x870	; 0x870 <Debug_Tx_Number_NL>
}
     92c:	1f 91       	pop	r17
     92e:	0f 91       	pop	r16
     930:	ff 90       	pop	r15
     932:	ef 90       	pop	r14
     934:	08 95       	ret

00000936 <Debug_Tx_Parameter_SP>:

void Debug_Tx_Parameter_SP(char *name, int32_t num){
     936:	ef 92       	push	r14
     938:	ff 92       	push	r15
     93a:	0f 93       	push	r16
     93c:	1f 93       	push	r17
     93e:	7a 01       	movw	r14, r20
     940:	8b 01       	movw	r16, r22
  Debug_Tx_Text(name);
     942:	0e 94 4b 02 	call	0x496	; 0x496 <Debug_Tx_Text>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     946:	80 e2       	ldi	r24, 0x20	; 32
     948:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     94c:	80 91 c0 00 	lds	r24, 0x00C0
     950:	85 ff       	sbrs	r24, 5
     952:	fc cf       	rjmp	.-8      	; 0x94c <Debug_Tx_Parameter_SP+0x16>
}

void Debug_Tx_Parameter_SP(char *name, int32_t num){
  Debug_Tx_Text(name);
  Debug_Tx_SP();
  Debug_Tx_Number_SP(num);
     954:	c8 01       	movw	r24, r16
     956:	b7 01       	movw	r22, r14
     958:	0e 94 3d 04 	call	0x87a	; 0x87a <Debug_Tx_Number_SP>
}
     95c:	1f 91       	pop	r17
     95e:	0f 91       	pop	r16
     960:	ff 90       	pop	r15
     962:	ef 90       	pop	r14
     964:	08 95       	ret

00000966 <Debug_Tx_Parameter_CM>:

void Debug_Tx_Parameter_CM(char *name, int32_t num){
     966:	ef 92       	push	r14
     968:	ff 92       	push	r15
     96a:	0f 93       	push	r16
     96c:	1f 93       	push	r17
     96e:	7a 01       	movw	r14, r20
     970:	8b 01       	movw	r16, r22
  Debug_Tx_Text(name);
     972:	0e 94 4b 02 	call	0x496	; 0x496 <Debug_Tx_Text>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     976:	80 e2       	ldi	r24, 0x20	; 32
     978:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     97c:	80 91 c0 00 	lds	r24, 0x00C0
     980:	85 ff       	sbrs	r24, 5
     982:	fc cf       	rjmp	.-8      	; 0x97c <Debug_Tx_Parameter_CM+0x16>
}

void Debug_Tx_Parameter_CM(char *name, int32_t num){
  Debug_Tx_Text(name);
  Debug_Tx_SP();
  Debug_Tx_Number_CM(num);
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 47 04 	call	0x88e	; 0x88e <Debug_Tx_Number_CM>
}
     98c:	1f 91       	pop	r17
     98e:	0f 91       	pop	r16
     990:	ff 90       	pop	r15
     992:	ef 90       	pop	r14
     994:	08 95       	ret

00000996 <Debug_Tx_Parameter_Hex_NL>:



/**********Hex Number with Parameter Functions Start***********/

void Debug_Tx_Parameter_Hex_NL(char *name, uint64_t num){
     996:	af 92       	push	r10
     998:	bf 92       	push	r11
     99a:	cf 92       	push	r12
     99c:	df 92       	push	r13
     99e:	ef 92       	push	r14
     9a0:	ff 92       	push	r15
     9a2:	0f 93       	push	r16
     9a4:	1f 93       	push	r17
     9a6:	f2 2e       	mov	r15, r18
     9a8:	e3 2e       	mov	r14, r19
     9aa:	d4 2e       	mov	r13, r20
     9ac:	c5 2e       	mov	r12, r21
     9ae:	b6 2e       	mov	r11, r22
     9b0:	a7 2e       	mov	r10, r23
  Debug_Tx_Text(name);
     9b2:	0e 94 4b 02 	call	0x496	; 0x496 <Debug_Tx_Text>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     9b6:	80 e2       	ldi	r24, 0x20	; 32
     9b8:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     9bc:	80 91 c0 00 	lds	r24, 0x00C0
     9c0:	85 ff       	sbrs	r24, 5
     9c2:	fc cf       	rjmp	.-8      	; 0x9bc <Debug_Tx_Parameter_Hex_NL+0x26>
/**********Hex Number with Parameter Functions Start***********/

void Debug_Tx_Parameter_Hex_NL(char *name, uint64_t num){
  Debug_Tx_Text(name);
  Debug_Tx_SP();
  Debug_Tx_Number_Hex_NL(num);
     9c4:	98 01       	movw	r18, r16
     9c6:	4f 2d       	mov	r20, r15
     9c8:	5e 2d       	mov	r21, r14
     9ca:	6d 2d       	mov	r22, r13
     9cc:	7c 2d       	mov	r23, r12
     9ce:	8b 2d       	mov	r24, r11
     9d0:	9a 2d       	mov	r25, r10
     9d2:	0e 94 51 04 	call	0x8a2	; 0x8a2 <Debug_Tx_Number_Hex_NL>
}
     9d6:	1f 91       	pop	r17
     9d8:	0f 91       	pop	r16
     9da:	ff 90       	pop	r15
     9dc:	ef 90       	pop	r14
     9de:	df 90       	pop	r13
     9e0:	cf 90       	pop	r12
     9e2:	bf 90       	pop	r11
     9e4:	af 90       	pop	r10
     9e6:	08 95       	ret

000009e8 <Debug_Tx_Parameter_Hex_SP>:

void Debug_Tx_Parameter_Hex_SP(char *name, uint64_t num){
     9e8:	af 92       	push	r10
     9ea:	bf 92       	push	r11
     9ec:	cf 92       	push	r12
     9ee:	df 92       	push	r13
     9f0:	ef 92       	push	r14
     9f2:	ff 92       	push	r15
     9f4:	0f 93       	push	r16
     9f6:	1f 93       	push	r17
     9f8:	f2 2e       	mov	r15, r18
     9fa:	e3 2e       	mov	r14, r19
     9fc:	d4 2e       	mov	r13, r20
     9fe:	c5 2e       	mov	r12, r21
     a00:	b6 2e       	mov	r11, r22
     a02:	a7 2e       	mov	r10, r23
  Debug_Tx_Text(name);
     a04:	0e 94 4b 02 	call	0x496	; 0x496 <Debug_Tx_Text>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     a08:	80 e2       	ldi	r24, 0x20	; 32
     a0a:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     a0e:	80 91 c0 00 	lds	r24, 0x00C0
     a12:	85 ff       	sbrs	r24, 5
     a14:	fc cf       	rjmp	.-8      	; 0xa0e <Debug_Tx_Parameter_Hex_SP+0x26>
}

void Debug_Tx_Parameter_Hex_SP(char *name, uint64_t num){
  Debug_Tx_Text(name);
  Debug_Tx_SP();
  Debug_Tx_Number_Hex_SP(num);
     a16:	98 01       	movw	r18, r16
     a18:	4f 2d       	mov	r20, r15
     a1a:	5e 2d       	mov	r21, r14
     a1c:	6d 2d       	mov	r22, r13
     a1e:	7c 2d       	mov	r23, r12
     a20:	8b 2d       	mov	r24, r11
     a22:	9a 2d       	mov	r25, r10
     a24:	0e 94 56 04 	call	0x8ac	; 0x8ac <Debug_Tx_Number_Hex_SP>
}
     a28:	1f 91       	pop	r17
     a2a:	0f 91       	pop	r16
     a2c:	ff 90       	pop	r15
     a2e:	ef 90       	pop	r14
     a30:	df 90       	pop	r13
     a32:	cf 90       	pop	r12
     a34:	bf 90       	pop	r11
     a36:	af 90       	pop	r10
     a38:	08 95       	ret

00000a3a <Debug_Tx_Parameter_Hex_CM>:

void Debug_Tx_Parameter_Hex_CM(char *name, uint64_t num){
     a3a:	af 92       	push	r10
     a3c:	bf 92       	push	r11
     a3e:	cf 92       	push	r12
     a40:	df 92       	push	r13
     a42:	ef 92       	push	r14
     a44:	ff 92       	push	r15
     a46:	0f 93       	push	r16
     a48:	1f 93       	push	r17
     a4a:	f2 2e       	mov	r15, r18
     a4c:	e3 2e       	mov	r14, r19
     a4e:	d4 2e       	mov	r13, r20
     a50:	c5 2e       	mov	r12, r21
     a52:	b6 2e       	mov	r11, r22
     a54:	a7 2e       	mov	r10, r23
  Debug_Tx_Text(name);
     a56:	0e 94 4b 02 	call	0x496	; 0x496 <Debug_Tx_Text>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     a5a:	80 e2       	ldi	r24, 0x20	; 32
     a5c:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     a60:	80 91 c0 00 	lds	r24, 0x00C0
     a64:	85 ff       	sbrs	r24, 5
     a66:	fc cf       	rjmp	.-8      	; 0xa60 <Debug_Tx_Parameter_Hex_CM+0x26>
}

void Debug_Tx_Parameter_Hex_CM(char *name, uint64_t num){
  Debug_Tx_Text(name);
  Debug_Tx_SP();
  Debug_Tx_Number_Hex_CM(num);
     a68:	98 01       	movw	r18, r16
     a6a:	4f 2d       	mov	r20, r15
     a6c:	5e 2d       	mov	r21, r14
     a6e:	6d 2d       	mov	r22, r13
     a70:	7c 2d       	mov	r23, r12
     a72:	8b 2d       	mov	r24, r11
     a74:	9a 2d       	mov	r25, r10
     a76:	0e 94 60 04 	call	0x8c0	; 0x8c0 <Debug_Tx_Number_Hex_CM>
}
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	ff 90       	pop	r15
     a80:	ef 90       	pop	r14
     a82:	df 90       	pop	r13
     a84:	cf 90       	pop	r12
     a86:	bf 90       	pop	r11
     a88:	af 90       	pop	r10
     a8a:	08 95       	ret

00000a8c <Debug_Tx_Parameter_Bin_NL>:



/**********Bin Number with Parameter Functions Start***********/

void Debug_Tx_Parameter_Bin_NL(char *name, uint64_t num){
     a8c:	af 92       	push	r10
     a8e:	bf 92       	push	r11
     a90:	cf 92       	push	r12
     a92:	df 92       	push	r13
     a94:	ef 92       	push	r14
     a96:	ff 92       	push	r15
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	f2 2e       	mov	r15, r18
     a9e:	e3 2e       	mov	r14, r19
     aa0:	d4 2e       	mov	r13, r20
     aa2:	c5 2e       	mov	r12, r21
     aa4:	b6 2e       	mov	r11, r22
     aa6:	a7 2e       	mov	r10, r23
  Debug_Tx_Text(name);
     aa8:	0e 94 4b 02 	call	0x496	; 0x496 <Debug_Tx_Text>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     aac:	80 e2       	ldi	r24, 0x20	; 32
     aae:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     ab2:	80 91 c0 00 	lds	r24, 0x00C0
     ab6:	85 ff       	sbrs	r24, 5
     ab8:	fc cf       	rjmp	.-8      	; 0xab2 <Debug_Tx_Parameter_Bin_NL+0x26>
/**********Bin Number with Parameter Functions Start***********/

void Debug_Tx_Parameter_Bin_NL(char *name, uint64_t num){
  Debug_Tx_Text(name);
  Debug_Tx_SP();
  Debug_Tx_Number_Bin_NL(num);
     aba:	98 01       	movw	r18, r16
     abc:	4f 2d       	mov	r20, r15
     abe:	5e 2d       	mov	r21, r14
     ac0:	6d 2d       	mov	r22, r13
     ac2:	7c 2d       	mov	r23, r12
     ac4:	8b 2d       	mov	r24, r11
     ac6:	9a 2d       	mov	r25, r10
     ac8:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <Debug_Tx_Number_Bin_NL>
}
     acc:	1f 91       	pop	r17
     ace:	0f 91       	pop	r16
     ad0:	ff 90       	pop	r15
     ad2:	ef 90       	pop	r14
     ad4:	df 90       	pop	r13
     ad6:	cf 90       	pop	r12
     ad8:	bf 90       	pop	r11
     ada:	af 90       	pop	r10
     adc:	08 95       	ret

00000ade <Debug_Tx_Parameter_Bin_SP>:

void Debug_Tx_Parameter_Bin_SP(char *name, uint64_t num){
     ade:	af 92       	push	r10
     ae0:	bf 92       	push	r11
     ae2:	cf 92       	push	r12
     ae4:	df 92       	push	r13
     ae6:	ef 92       	push	r14
     ae8:	ff 92       	push	r15
     aea:	0f 93       	push	r16
     aec:	1f 93       	push	r17
     aee:	f2 2e       	mov	r15, r18
     af0:	e3 2e       	mov	r14, r19
     af2:	d4 2e       	mov	r13, r20
     af4:	c5 2e       	mov	r12, r21
     af6:	b6 2e       	mov	r11, r22
     af8:	a7 2e       	mov	r10, r23
  Debug_Tx_Text(name);
     afa:	0e 94 4b 02 	call	0x496	; 0x496 <Debug_Tx_Text>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     afe:	80 e2       	ldi	r24, 0x20	; 32
     b00:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     b04:	80 91 c0 00 	lds	r24, 0x00C0
     b08:	85 ff       	sbrs	r24, 5
     b0a:	fc cf       	rjmp	.-8      	; 0xb04 <Debug_Tx_Parameter_Bin_SP+0x26>
}

void Debug_Tx_Parameter_Bin_SP(char *name, uint64_t num){
  Debug_Tx_Text(name);
  Debug_Tx_SP();
  Debug_Tx_Number_Bin_SP(num);
     b0c:	98 01       	movw	r18, r16
     b0e:	4f 2d       	mov	r20, r15
     b10:	5e 2d       	mov	r21, r14
     b12:	6d 2d       	mov	r22, r13
     b14:	7c 2d       	mov	r23, r12
     b16:	8b 2d       	mov	r24, r11
     b18:	9a 2d       	mov	r25, r10
     b1a:	0e 94 6f 04 	call	0x8de	; 0x8de <Debug_Tx_Number_Bin_SP>
}
     b1e:	1f 91       	pop	r17
     b20:	0f 91       	pop	r16
     b22:	ff 90       	pop	r15
     b24:	ef 90       	pop	r14
     b26:	df 90       	pop	r13
     b28:	cf 90       	pop	r12
     b2a:	bf 90       	pop	r11
     b2c:	af 90       	pop	r10
     b2e:	08 95       	ret

00000b30 <Debug_Tx_Parameter_Bin_CM>:

void Debug_Tx_Parameter_Bin_CM(char *name, uint64_t num){
     b30:	af 92       	push	r10
     b32:	bf 92       	push	r11
     b34:	cf 92       	push	r12
     b36:	df 92       	push	r13
     b38:	ef 92       	push	r14
     b3a:	ff 92       	push	r15
     b3c:	0f 93       	push	r16
     b3e:	1f 93       	push	r17
     b40:	f2 2e       	mov	r15, r18
     b42:	e3 2e       	mov	r14, r19
     b44:	d4 2e       	mov	r13, r20
     b46:	c5 2e       	mov	r12, r21
     b48:	b6 2e       	mov	r11, r22
     b4a:	a7 2e       	mov	r10, r23
  Debug_Tx_Text(name);
     b4c:	0e 94 4b 02 	call	0x496	; 0x496 <Debug_Tx_Text>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     b50:	80 e2       	ldi	r24, 0x20	; 32
     b52:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     b56:	80 91 c0 00 	lds	r24, 0x00C0
     b5a:	85 ff       	sbrs	r24, 5
     b5c:	fc cf       	rjmp	.-8      	; 0xb56 <Debug_Tx_Parameter_Bin_CM+0x26>
}

void Debug_Tx_Parameter_Bin_CM(char *name, uint64_t num){
  Debug_Tx_Text(name);
  Debug_Tx_SP();
  Debug_Tx_Number_Bin_CM(num);
     b5e:	98 01       	movw	r18, r16
     b60:	4f 2d       	mov	r20, r15
     b62:	5e 2d       	mov	r21, r14
     b64:	6d 2d       	mov	r22, r13
     b66:	7c 2d       	mov	r23, r12
     b68:	8b 2d       	mov	r24, r11
     b6a:	9a 2d       	mov	r25, r10
     b6c:	0e 94 79 04 	call	0x8f2	; 0x8f2 <Debug_Tx_Number_Bin_CM>
}
     b70:	1f 91       	pop	r17
     b72:	0f 91       	pop	r16
     b74:	ff 90       	pop	r15
     b76:	ef 90       	pop	r14
     b78:	df 90       	pop	r13
     b7a:	cf 90       	pop	r12
     b7c:	bf 90       	pop	r11
     b7e:	af 90       	pop	r10
     b80:	08 95       	ret

00000b82 <Debug_Buf_Flush>:



/*******************Debug Buffer Functions Start***************/

void Debug_Buf_Flush(void){
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i = 0; i < DEBUG_BUFFER_SIZE; i++){
	Debug.Buf[i] = 0;
     b86:	fc 01       	movw	r30, r24
     b88:	e0 5b       	subi	r30, 0xB0	; 176
     b8a:	fe 4f       	sbci	r31, 0xFE	; 254
     b8c:	14 86       	std	Z+12, r1	; 0x0c
     b8e:	01 96       	adiw	r24, 0x01	; 1


/*******************Debug Buffer Functions Start***************/

void Debug_Buf_Flush(void){
  for(uint8_t i = 0; i < DEBUG_BUFFER_SIZE; i++){
     b90:	80 34       	cpi	r24, 0x40	; 64
     b92:	91 05       	cpc	r25, r1
     b94:	c1 f7       	brne	.-16     	; 0xb86 <Debug_Buf_Flush+0x4>
	Debug.Buf[i] = 0;
  }
  Debug.BufIndex = 0;
     b96:	10 92 a0 01 	sts	0x01A0, r1
     b9a:	10 92 9f 01 	sts	0x019F, r1
}
     b9e:	08 95       	ret

00000ba0 <Debug_Buf_Get>:

uint8_t Debug_Buf_Get(uint16_t index){
  return Debug.Buf[index];
     ba0:	fc 01       	movw	r30, r24
     ba2:	e0 5b       	subi	r30, 0xB0	; 176
     ba4:	fe 4f       	sbci	r31, 0xFE	; 254
     ba6:	84 85       	ldd	r24, Z+12	; 0x0c
}
     ba8:	08 95       	ret

00000baa <Debug_Buf_Get_Index>:

uint16_t Debug_Buf_Get_Index(void){
  return Debug.BufIndex;
     baa:	20 91 9f 01 	lds	r18, 0x019F
     bae:	30 91 a0 01 	lds	r19, 0x01A0
}
     bb2:	c9 01       	movw	r24, r18
     bb4:	08 95       	ret

00000bb6 <Debug_Data_Available>:


/*******************Debug Data Functions Start****************/

uint8_t Debug_Data_Available(void){
  return Debug.RxPacket.DataAvailable;
     bb6:	80 91 a8 01 	lds	r24, 0x01A8
}
     bba:	08 95       	ret

00000bbc <Debug_Data_Len_Get>:
uint8_t Debug_Buf_Get(uint16_t index){
  return Debug.Buf[index];
}

uint16_t Debug_Buf_Get_Index(void){
  return Debug.BufIndex;
     bbc:	20 91 9f 01 	lds	r18, 0x019F
     bc0:	30 91 a0 01 	lds	r19, 0x01A0
  return Debug.RxPacket.DataAvailable;
}

uint16_t Debug_Data_Len_Get(void){
  return Debug_Buf_Get_Index();
}
     bc4:	c9 01       	movw	r24, r18
     bc6:	08 95       	ret

00000bc8 <Debug_Data_Calculated_CRC_Get>:

uint16_t Debug_Data_Calculated_CRC_Get(void){
  return Debug.RxPacket.CalculatedCRC;
     bc8:	20 91 a3 01 	lds	r18, 0x01A3
     bcc:	30 91 a4 01 	lds	r19, 0x01A4
}
     bd0:	c9 01       	movw	r24, r18
     bd2:	08 95       	ret

00000bd4 <Debug_Data_Received_CRC_Get>:

uint16_t Debug_Data_Received_CRC_Get(void){
  return Debug.RxPacket.ReceivedCRC;
     bd4:	20 91 a5 01 	lds	r18, 0x01A5
     bd8:	30 91 a6 01 	lds	r19, 0x01A6
}
     bdc:	c9 01       	movw	r24, r18
     bde:	08 95       	ret

00000be0 <Debug_Data_CRC_Status_Get>:

uint8_t Debug_Data_CRC_Status_Get(void){
  return Debug.RxPacket.CRCStatus;
     be0:	80 91 a7 01 	lds	r24, 0x01A7
}
     be4:	08 95       	ret

00000be6 <Debug_Data_Read_Complete_Status>:

uint8_t Debug_Data_Read_Complete_Status(void){
  return Debug.RxPacket.DataReadComplete;
     be6:	80 91 a9 01 	lds	r24, 0x01A9
}
     bea:	08 95       	ret

00000bec <Debug_Data_Clear_Available_Flag>:

void Debug_Data_Clear_Available_Flag(void){
  Debug.RxPacket.DataAvailable = DEBUG_FALSE;
     bec:	10 92 a8 01 	sts	0x01A8, r1
}
     bf0:	08 95       	ret

00000bf2 <Debug_Data_Clear_Read_Complete_Flag>:

void Debug_Data_Clear_Read_Complete_Flag(void){
  Debug.RxPacket.DataReadComplete = DEBUG_TRUE;
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	80 93 a9 01 	sts	0x01A9, r24
}
     bf8:	08 95       	ret

00000bfa <Debug_Data_Copy_Buf>:



void Debug_Data_Copy_Buf(uint8_t *buf){
     bfa:	ac 01       	movw	r20, r24
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	0a c0       	rjmp	.+20     	; 0xc16 <Debug_Data_Copy_Buf+0x1c>
  }
  Debug.BufIndex = 0;
}

uint8_t Debug_Buf_Get(uint16_t index){
  return Debug.Buf[index];
     c02:	f9 01       	movw	r30, r18
     c04:	e0 5b       	subi	r30, 0xB0	; 176
     c06:	fe 4f       	sbci	r31, 0xFE	; 254
     c08:	84 85       	ldd	r24, Z+12	; 0x0c



void Debug_Data_Copy_Buf(uint8_t *buf){
  for(uint16_t i = 0; i < Debug_Data_Len_Get(); i++){
	buf[i] = Debug_Buf_Get(i);
     c0a:	fa 01       	movw	r30, r20
     c0c:	e2 0f       	add	r30, r18
     c0e:	f3 1f       	adc	r31, r19
     c10:	80 83       	st	Z, r24
}



void Debug_Data_Copy_Buf(uint8_t *buf){
  for(uint16_t i = 0; i < Debug_Data_Len_Get(); i++){
     c12:	2f 5f       	subi	r18, 0xFF	; 255
     c14:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t Debug_Buf_Get(uint16_t index){
  return Debug.Buf[index];
}

uint16_t Debug_Buf_Get_Index(void){
  return Debug.BufIndex;
     c16:	80 91 9f 01 	lds	r24, 0x019F
     c1a:	90 91 a0 01 	lds	r25, 0x01A0
}



void Debug_Data_Copy_Buf(uint8_t *buf){
  for(uint16_t i = 0; i < Debug_Data_Len_Get(); i++){
     c1e:	28 17       	cp	r18, r24
     c20:	39 07       	cpc	r19, r25
     c22:	78 f3       	brcs	.-34     	; 0xc02 <Debug_Data_Copy_Buf+0x8>
	buf[i] = Debug_Buf_Get(i);
  }
}
     c24:	08 95       	ret

00000c26 <Debug_Data_Print_Buf>:


void Debug_Data_Print_Buf(void){
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	0c c0       	rjmp	.+24     	; 0xc44 <Debug_Data_Print_Buf+0x1e>
  }
  Debug.BufIndex = 0;
}

uint8_t Debug_Buf_Get(uint16_t index){
  return Debug.Buf[index];
     c2c:	f9 01       	movw	r30, r18
     c2e:	e0 5b       	subi	r30, 0xB0	; 176
     c30:	fe 4f       	sbci	r31, 0xFE	; 254
     c32:	84 85       	ldd	r24, Z+12	; 0x0c
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     c34:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     c38:	80 91 c0 00 	lds	r24, 0x00C0
     c3c:	85 ff       	sbrs	r24, 5
     c3e:	fc cf       	rjmp	.-8      	; 0xc38 <Debug_Data_Print_Buf+0x12>
  }
}


void Debug_Data_Print_Buf(void){
  for(uint16_t i = 0; i < Debug_Data_Len_Get(); i++){
     c40:	2f 5f       	subi	r18, 0xFF	; 255
     c42:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t Debug_Buf_Get(uint16_t index){
  return Debug.Buf[index];
}

uint16_t Debug_Buf_Get_Index(void){
  return Debug.BufIndex;
     c44:	80 91 9f 01 	lds	r24, 0x019F
     c48:	90 91 a0 01 	lds	r25, 0x01A0
  }
}


void Debug_Data_Print_Buf(void){
  for(uint16_t i = 0; i < Debug_Data_Len_Get(); i++){
     c4c:	28 17       	cp	r18, r24
     c4e:	39 07       	cpc	r19, r25
     c50:	68 f3       	brcs	.-38     	; 0xc2c <Debug_Data_Print_Buf+0x6>
	Debug_Tx_Byte( Debug_Buf_Get(i) );
  }
  Debug_Tx_NL();
     c52:	0e 94 2c 02 	call	0x458	; 0x458 <Debug_Tx_NL>
}
     c56:	08 95       	ret

00000c58 <Debug_Error_Code_Get>:


/******************Error Code Functions Start****************/

uint8_t Debug_Error_Code_Get(void){
  return Debug.Error;
     c58:	80 91 50 01 	lds	r24, 0x0150
}
     c5c:	08 95       	ret

00000c5e <Debug_Error_Code_Clear>:

void Debug_Error_Code_Clear(void){
  Debug.Error = 0;
     c5e:	10 92 50 01 	sts	0x0150, r1
}
     c62:	08 95       	ret

00000c64 <Debug_Sticky_Error_Code_Get>:

uint8_t Debug_Sticky_Error_Code_Get(void){
  uint8_t temp;
  temp = Debug.StickyError;
     c64:	80 91 51 01 	lds	r24, 0x0151
  Debug.StickyError = DEBUG_NULL;
     c68:	10 92 51 01 	sts	0x0151, r1
  return temp;
}
     c6c:	08 95       	ret

00000c6e <Debug_ISR_Handler>:

/***************Debug ISR Handler Functions Start************/

void Debug_ISR_Handler(void){
  Debug_Clear_Interrupt_Flag();
  Debug.LastRxByte = (uint8_t)Debug_Rx_Byte();
     c6e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Debug_Rx_Byte>
     c72:	80 93 5b 01 	sts	0x015B, r24
  if(Debug.Error == 0x00){
     c76:	80 91 50 01 	lds	r24, 0x0150
     c7a:	88 23       	and	r24, r24
     c7c:	11 f5       	brne	.+68     	; 0xcc2 <Debug_ISR_Handler+0x54>
    Debug.Buf[Debug.BufIndex] = Debug.LastRxByte;
     c7e:	e0 91 9f 01 	lds	r30, 0x019F
     c82:	f0 91 a0 01 	lds	r31, 0x01A0
     c86:	80 91 5b 01 	lds	r24, 0x015B
     c8a:	e0 5b       	subi	r30, 0xB0	; 176
     c8c:	fe 4f       	sbci	r31, 0xFE	; 254
     c8e:	84 87       	std	Z+12, r24	; 0x0c
    Debug.BufIndex++;
     c90:	80 91 9f 01 	lds	r24, 0x019F
     c94:	90 91 a0 01 	lds	r25, 0x01A0
     c98:	01 96       	adiw	r24, 0x01	; 1
     c9a:	90 93 a0 01 	sts	0x01A0, r25
     c9e:	80 93 9f 01 	sts	0x019F, r24
    if(Debug.BufIndex >= Debug.BufSize){
     ca2:	20 91 9f 01 	lds	r18, 0x019F
     ca6:	30 91 a0 01 	lds	r19, 0x01A0
     caa:	80 91 9d 01 	lds	r24, 0x019D
     cae:	90 91 9e 01 	lds	r25, 0x019E
     cb2:	28 17       	cp	r18, r24
     cb4:	39 07       	cpc	r19, r25
     cb6:	88 f0       	brcs	.+34     	; 0xcda <Debug_ISR_Handler+0x6c>
      Debug.BufIndex = 0;
     cb8:	10 92 a0 01 	sts	0x01A0, r1
     cbc:	10 92 9f 01 	sts	0x019F, r1
     cc0:	0c c0       	rjmp	.+24     	; 0xcda <Debug_ISR_Handler+0x6c>
    }
  }
  else{
    Debug.LastRxByte = DEBUG_NULL;
     cc2:	10 92 5b 01 	sts	0x015B, r1
	if(Debug.StickyError == DEBUG_NULL){
     cc6:	80 91 51 01 	lds	r24, 0x0151
     cca:	88 23       	and	r24, r24
     ccc:	21 f4       	brne	.+8      	; 0xcd6 <Debug_ISR_Handler+0x68>
	  Debug.StickyError = Debug.Error;
     cce:	80 91 50 01 	lds	r24, 0x0150
     cd2:	80 93 51 01 	sts	0x0151, r24
	}
	Debug.Error = DEBUG_NULL;
     cd6:	10 92 50 01 	sts	0x0150, r1
  }
  
  Debug_Timer_Value_Reset();
  if(Debug.Timer.Enabled == DEBUG_FALSE){
     cda:	80 91 a1 01 	lds	r24, 0x01A1
     cde:	88 23       	and	r24, r24
     ce0:	19 f4       	brne	.+6      	; 0xce8 <Debug_ISR_Handler+0x7a>
	Debug_Timer_Enable();
	Debug.Timer.Enabled = DEBUG_TRUE;
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	80 93 a1 01 	sts	0x01A1, r24
     ce8:	08 95       	ret

00000cea <__vector_18>:


//add debug interrupt handler vector
//call Debug_ISR_Handler() inside ISR

ISR(USART_RX_vect){
     cea:	1f 92       	push	r1
     cec:	0f 92       	push	r0
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	0f 92       	push	r0
     cf2:	11 24       	eor	r1, r1
     cf4:	2f 93       	push	r18
     cf6:	3f 93       	push	r19
     cf8:	4f 93       	push	r20
     cfa:	5f 93       	push	r21
     cfc:	6f 93       	push	r22
     cfe:	7f 93       	push	r23
     d00:	8f 93       	push	r24
     d02:	9f 93       	push	r25
     d04:	af 93       	push	r26
     d06:	bf 93       	push	r27
     d08:	ef 93       	push	r30
     d0a:	ff 93       	push	r31
  Debug_ISR_Handler();
     d0c:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_ISR_Handler>
}
     d10:	ff 91       	pop	r31
     d12:	ef 91       	pop	r30
     d14:	bf 91       	pop	r27
     d16:	af 91       	pop	r26
     d18:	9f 91       	pop	r25
     d1a:	8f 91       	pop	r24
     d1c:	7f 91       	pop	r23
     d1e:	6f 91       	pop	r22
     d20:	5f 91       	pop	r21
     d22:	4f 91       	pop	r20
     d24:	3f 91       	pop	r19
     d26:	2f 91       	pop	r18
     d28:	0f 90       	pop	r0
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	0f 90       	pop	r0
     d2e:	1f 90       	pop	r1
     d30:	18 95       	reti

00000d32 <Debug_CRC_Calculate_Byte>:
#ifdef   DEBUG_CRC_XMODEM

uint16_t Debug_CRC_Calculate_Byte(uint16_t crc, uint8_t data){
  uint16_t temp = data;
  temp <<= 8;
  crc = crc ^ temp;
     d32:	36 2f       	mov	r19, r22
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	28 27       	eor	r18, r24
     d38:	39 27       	eor	r19, r25
     d3a:	40 e0       	ldi	r20, 0x00	; 0
  for(uint8_t i = 0; i < 8; i++){
    if(crc & 0x8000){
	  temp   = crc;
	  temp <<= 0x01;
	  temp  ^= 0x1021;
     d3c:	61 e2       	ldi	r22, 0x21	; 33
     d3e:	70 e1       	ldi	r23, 0x10	; 16
     d40:	c9 01       	movw	r24, r18
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
uint16_t Debug_CRC_Calculate_Byte(uint16_t crc, uint8_t data){
  uint16_t temp = data;
  temp <<= 8;
  crc = crc ^ temp;
  for(uint8_t i = 0; i < 8; i++){
    if(crc & 0x8000){
     d46:	37 ff       	sbrs	r19, 7
     d48:	04 c0       	rjmp	.+8      	; 0xd52 <Debug_CRC_Calculate_Byte+0x20>
	  temp   = crc;
	  temp <<= 0x01;
	  temp  ^= 0x1021;
     d4a:	9c 01       	movw	r18, r24
     d4c:	26 27       	eor	r18, r22
     d4e:	37 27       	eor	r19, r23
     d50:	01 c0       	rjmp	.+2      	; 0xd54 <Debug_CRC_Calculate_Byte+0x22>
	  crc = temp;
	}
    else{
	  crc <<= 1;
     d52:	9c 01       	movw	r18, r24

uint16_t Debug_CRC_Calculate_Byte(uint16_t crc, uint8_t data){
  uint16_t temp = data;
  temp <<= 8;
  crc = crc ^ temp;
  for(uint8_t i = 0; i < 8; i++){
     d54:	4f 5f       	subi	r20, 0xFF	; 255
     d56:	48 30       	cpi	r20, 0x08	; 8
     d58:	99 f7       	brne	.-26     	; 0xd40 <Debug_CRC_Calculate_Byte+0xe>
    else{
	  crc <<= 1;
	}
  }
  return crc;
}
     d5a:	c9 01       	movw	r24, r18
     d5c:	08 95       	ret

00000d5e <Debug_CRC_Calculate_Block>:

uint16_t Debug_CRC_Calculate_Block(volatile uint8_t *buf, uint8_t len){
     d5e:	0f 93       	push	r16
     d60:	1f 93       	push	r17
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	06 2f       	mov	r16, r22
     d68:	ec 01       	movw	r28, r24
     d6a:	20 e0       	ldi	r18, 0x00	; 0
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	10 e0       	ldi	r17, 0x00	; 0
     d70:	06 c0       	rjmp	.+12     	; 0xd7e <Debug_CRC_Calculate_Block+0x20>
  uint16_t crc = 0;
  for(uint8_t i = 0; i < len; i++){
    crc = Debug_CRC_Calculate_Byte(crc,buf[i]);
     d72:	69 91       	ld	r22, Y+
     d74:	c9 01       	movw	r24, r18
     d76:	0e 94 99 06 	call	0xd32	; 0xd32 <Debug_CRC_Calculate_Byte>
     d7a:	9c 01       	movw	r18, r24
  return crc;
}

uint16_t Debug_CRC_Calculate_Block(volatile uint8_t *buf, uint8_t len){
  uint16_t crc = 0;
  for(uint8_t i = 0; i < len; i++){
     d7c:	1f 5f       	subi	r17, 0xFF	; 255
     d7e:	10 17       	cp	r17, r16
     d80:	c0 f3       	brcs	.-16     	; 0xd72 <Debug_CRC_Calculate_Block+0x14>
    crc = Debug_CRC_Calculate_Byte(crc,buf[i]);
  }
  return crc;
}
     d82:	c9 01       	movw	r24, r18
     d84:	df 91       	pop	r29
     d86:	cf 91       	pop	r28
     d88:	1f 91       	pop	r17
     d8a:	0f 91       	pop	r16
     d8c:	08 95       	ret

00000d8e <Debug_RX_Packet_CRC_Check>:
/*************Debug RX Packet Functions Start***************/

void Debug_RX_Packet_CRC_Check(void){
  uint8_t  temp = 0;
  uint16_t crc_calc = 0, crc_recv = 0;
  Debug.RxPacket.CRCStatus = DEBUG_FALSE;
     d8e:	10 92 a7 01 	sts	0x01A7, r1
uint8_t Debug_Buf_Get(uint16_t index){
  return Debug.Buf[index];
}

uint16_t Debug_Buf_Get_Index(void){
  return Debug.BufIndex;
     d92:	80 91 9f 01 	lds	r24, 0x019F
     d96:	90 91 a0 01 	lds	r25, 0x01A0

void Debug_RX_Packet_CRC_Check(void){
  uint8_t  temp = 0;
  uint16_t crc_calc = 0, crc_recv = 0;
  Debug.RxPacket.CRCStatus = DEBUG_FALSE;
  if( Debug_Data_Len_Get() > 2){
     d9a:	03 97       	sbiw	r24, 0x03	; 3
     d9c:	90 f1       	brcs	.+100    	; 0xe02 <Debug_RX_Packet_CRC_Check+0x74>
uint8_t Debug_Buf_Get(uint16_t index){
  return Debug.Buf[index];
}

uint16_t Debug_Buf_Get_Index(void){
  return Debug.BufIndex;
     d9e:	60 91 9f 01 	lds	r22, 0x019F
     da2:	70 91 a0 01 	lds	r23, 0x01A0
  uint16_t crc_calc = 0, crc_recv = 0;
  Debug.RxPacket.CRCStatus = DEBUG_FALSE;
  if( Debug_Data_Len_Get() > 2){
    temp  = (uint8_t)Debug_Data_Len_Get();
	temp -= 2;
    crc_calc   =  Debug_CRC_Calculate_Block(Debug.Buf, temp);
     da6:	62 50       	subi	r22, 0x02	; 2
     da8:	8c e5       	ldi	r24, 0x5C	; 92
     daa:	91 e0       	ldi	r25, 0x01	; 1
     dac:	0e 94 af 06 	call	0xd5e	; 0xd5e <Debug_CRC_Calculate_Block>
uint8_t Debug_Buf_Get(uint16_t index){
  return Debug.Buf[index];
}

uint16_t Debug_Buf_Get_Index(void){
  return Debug.BufIndex;
     db0:	e0 91 9f 01 	lds	r30, 0x019F
     db4:	f0 91 a0 01 	lds	r31, 0x01A0
  }
  Debug.BufIndex = 0;
}

uint8_t Debug_Buf_Get(uint16_t index){
  return Debug.Buf[index];
     db8:	e2 5b       	subi	r30, 0xB2	; 178
     dba:	fe 4f       	sbci	r31, 0xFE	; 254
     dbc:	24 85       	ldd	r18, Z+12	; 0x0c
  if( Debug_Data_Len_Get() > 2){
    temp  = (uint8_t)Debug_Data_Len_Get();
	temp -= 2;
    crc_calc   =  Debug_CRC_Calculate_Block(Debug.Buf, temp);
    crc_recv   =  Debug_Buf_Get(Debug_Data_Len_Get() - 2);
    crc_recv <<= 8;
     dbe:	52 2f       	mov	r21, r18
     dc0:	40 e0       	ldi	r20, 0x00	; 0
uint8_t Debug_Buf_Get(uint16_t index){
  return Debug.Buf[index];
}

uint16_t Debug_Buf_Get_Index(void){
  return Debug.BufIndex;
     dc2:	e0 91 9f 01 	lds	r30, 0x019F
     dc6:	f0 91 a0 01 	lds	r31, 0x01A0
  }
  Debug.BufIndex = 0;
}

uint8_t Debug_Buf_Get(uint16_t index){
  return Debug.Buf[index];
     dca:	e1 5b       	subi	r30, 0xB1	; 177
     dcc:	fe 4f       	sbci	r31, 0xFE	; 254
     dce:	24 85       	ldd	r18, Z+12	; 0x0c
    temp  = (uint8_t)Debug_Data_Len_Get();
	temp -= 2;
    crc_calc   =  Debug_CRC_Calculate_Block(Debug.Buf, temp);
    crc_recv   =  Debug_Buf_Get(Debug_Data_Len_Get() - 2);
    crc_recv <<= 8;
    crc_recv  |= Debug_Buf_Get(Debug_Data_Len_Get() - 1);
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	42 2b       	or	r20, r18
     dd4:	53 2b       	or	r21, r19
	Debug.RxPacket.CalculatedCRC = crc_calc;
     dd6:	90 93 a4 01 	sts	0x01A4, r25
     dda:	80 93 a3 01 	sts	0x01A3, r24
    Debug.RxPacket.ReceivedCRC = crc_recv;
     dde:	50 93 a6 01 	sts	0x01A6, r21
     de2:	40 93 a5 01 	sts	0x01A5, r20
    if( Debug.RxPacket.CalculatedCRC == Debug.RxPacket.ReceivedCRC ){
     de6:	20 91 a3 01 	lds	r18, 0x01A3
     dea:	30 91 a4 01 	lds	r19, 0x01A4
     dee:	80 91 a5 01 	lds	r24, 0x01A5
     df2:	90 91 a6 01 	lds	r25, 0x01A6
     df6:	28 17       	cp	r18, r24
     df8:	39 07       	cpc	r19, r25
     dfa:	19 f4       	brne	.+6      	; 0xe02 <Debug_RX_Packet_CRC_Check+0x74>
      Debug.RxPacket.CRCStatus = DEBUG_TRUE;
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	80 93 a7 01 	sts	0x01A7, r24
     e02:	08 95       	ret

00000e04 <Debug_RX_Packet_Disassemble>:
  }
}

void Debug_RX_Packet_Disassemble(void){
  //Disassemble packet
}
     e04:	08 95       	ret

00000e06 <Debug_RX_Packet_Read_Complete>:


void Debug_RX_Packet_Read_Complete(void){
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	90 e0       	ldi	r25, 0x00	; 0

/*******************Debug Buffer Functions Start***************/

void Debug_Buf_Flush(void){
  for(uint8_t i = 0; i < DEBUG_BUFFER_SIZE; i++){
	Debug.Buf[i] = 0;
     e0a:	fc 01       	movw	r30, r24
     e0c:	e0 5b       	subi	r30, 0xB0	; 176
     e0e:	fe 4f       	sbci	r31, 0xFE	; 254
     e10:	14 86       	std	Z+12, r1	; 0x0c
     e12:	01 96       	adiw	r24, 0x01	; 1


/*******************Debug Buffer Functions Start***************/

void Debug_Buf_Flush(void){
  for(uint8_t i = 0; i < DEBUG_BUFFER_SIZE; i++){
     e14:	80 34       	cpi	r24, 0x40	; 64
     e16:	91 05       	cpc	r25, r1
     e18:	c1 f7       	brne	.-16     	; 0xe0a <Debug_RX_Packet_Read_Complete+0x4>
	Debug.Buf[i] = 0;
  }
  Debug.BufIndex = 0;
     e1a:	10 92 a0 01 	sts	0x01A0, r1
     e1e:	10 92 9f 01 	sts	0x019F, r1
uint8_t Debug_Data_Read_Complete_Status(void){
  return Debug.RxPacket.DataReadComplete;
}

void Debug_Data_Clear_Available_Flag(void){
  Debug.RxPacket.DataAvailable = DEBUG_FALSE;
     e22:	10 92 a8 01 	sts	0x01A8, r1
}

void Debug_Data_Clear_Read_Complete_Flag(void){
  Debug.RxPacket.DataReadComplete = DEBUG_TRUE;
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	80 93 a9 01 	sts	0x01A9, r24
uint8_t Debug_Error_Code_Get(void){
  return Debug.Error;
}

void Debug_Error_Code_Clear(void){
  Debug.Error = 0;
     e2c:	10 92 50 01 	sts	0x0150, r1
void Debug_RX_Packet_Read_Complete(void){
  Debug_Buf_Flush();
  Debug_Data_Clear_Available_Flag();
  Debug_Data_Clear_Read_Complete_Flag();
  Debug_Error_Code_Clear();
}
     e30:	08 95       	ret

00000e32 <Debug_Timer_ISR_Handler>:
  
}

void Debug_Timer_ISR_Handler(void){
  Debug_Timer_Clear_Interrupt_Flag();
  if(Debug.Timer.Enabled == DEBUG_TRUE){
     e32:	80 91 a1 01 	lds	r24, 0x01A1
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	11 f4       	brne	.+4      	; 0xe3e <Debug_Timer_ISR_Handler+0xc>
    Debug_Timer_Disable();
	Debug.Timer.Enabled = DEBUG_FALSE;
     e3a:	10 92 a1 01 	sts	0x01A1, r1
uint8_t Debug_Buf_Get(uint16_t index){
  return Debug.Buf[index];
}

uint16_t Debug_Buf_Get_Index(void){
  return Debug.BufIndex;
     e3e:	80 91 9f 01 	lds	r24, 0x019F
     e42:	90 91 a0 01 	lds	r25, 0x01A0
  if(Debug.Timer.Enabled == DEBUG_TRUE){
    Debug_Timer_Disable();
	Debug.Timer.Enabled = DEBUG_FALSE;
  }
  
  if(Debug_Buf_Get_Index() != DEBUG_NULL){
     e46:	89 2b       	or	r24, r25
     e48:	f1 f0       	breq	.+60     	; 0xe86 <Debug_Timer_ISR_Handler+0x54>
	if(Debug.RxPacket.DataReadComplete == DEBUG_FALSE){
     e4a:	80 91 a9 01 	lds	r24, 0x01A9
     e4e:	88 23       	and	r24, r24
     e50:	69 f4       	brne	.+26     	; 0xe6c <Debug_Timer_ISR_Handler+0x3a>
	  Debug.Error = DEBUG_RX_ERR_READ_INCOMPLETE;
     e52:	80 e1       	ldi	r24, 0x10	; 16
     e54:	80 93 50 01 	sts	0x0150, r24
	  if(Debug.StickyError == DEBUG_NULL){
     e58:	80 91 51 01 	lds	r24, 0x0151
     e5c:	88 23       	and	r24, r24
     e5e:	21 f4       	brne	.+8      	; 0xe68 <Debug_Timer_ISR_Handler+0x36>
	    Debug.StickyError = Debug.Error;
     e60:	80 91 50 01 	lds	r24, 0x0150
     e64:	80 93 51 01 	sts	0x0151, r24
	  }
	  Debug.Error = DEBUG_NULL;
     e68:	10 92 50 01 	sts	0x0150, r1
	}
	
    Debug_RX_Packet_CRC_Check();
     e6c:	0e 94 c7 06 	call	0xd8e	; 0xd8e <Debug_RX_Packet_CRC_Check>
	
    #ifdef DEBUG_CRC_ENABLE
	if(Debug.RxPacket.CRCStatus == DEBUG_TRUE){
     e70:	80 91 a7 01 	lds	r24, 0x01A7
     e74:	81 30       	cpi	r24, 0x01	; 1
     e76:	29 f4       	brne	.+10     	; 0xe82 <Debug_Timer_ISR_Handler+0x50>
	  Debug.RxPacket.DataAvailable = DEBUG_TRUE;
     e78:	80 93 a8 01 	sts	0x01A8, r24
	  Debug.RxPacket.DataReadComplete = DEBUG_FALSE;
     e7c:	10 92 a9 01 	sts	0x01A9, r1
     e80:	08 95       	ret
	  Debug_RX_Packet_Disassemble();
	}
	else{
	  Debug_RX_Packet_Read_Complete();
     e82:	0e 94 03 07 	call	0xe06	; 0xe06 <Debug_RX_Packet_Read_Complete>
     e86:	08 95       	ret

00000e88 <Debug_Init>:



/*****************Debug Init Functions Start****************/

void Debug_Init(uint32_t baud){
     e88:	ef 92       	push	r14
     e8a:	ff 92       	push	r15
     e8c:	0f 93       	push	r16
     e8e:	1f 93       	push	r17
     e90:	7b 01       	movw	r14, r22
     e92:	8c 01       	movw	r16, r24
  Debug_Struct_Init();
     e94:	0e 94 82 01 	call	0x304	; 0x304 <Debug_Struct_Init>
    Debug.Buf[i] = DEBUG_NULL;
  }
}

void Debug_RX_Packet_Struct_Init(void){
  Debug.RxPacket.CalculatedCRC    = DEBUG_NULL;
     e98:	10 92 a4 01 	sts	0x01A4, r1
     e9c:	10 92 a3 01 	sts	0x01A3, r1
  Debug.RxPacket.ReceivedCRC      = DEBUG_NULL;
     ea0:	10 92 a6 01 	sts	0x01A6, r1
     ea4:	10 92 a5 01 	sts	0x01A5, r1
  Debug.RxPacket.CRCStatus        = DEBUG_FALSE;
     ea8:	10 92 a7 01 	sts	0x01A7, r1
  Debug.RxPacket.DataAvailable    = DEBUG_FALSE;
     eac:	10 92 a8 01 	sts	0x01A8, r1
  Debug.RxPacket.DataReadComplete = DEBUG_TRUE;
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	80 93 a9 01 	sts	0x01A9, r24


/********************Debug Timer Functions Start*****************/

void Debug_Timer_Struct_Init(void){
  Debug.Timer.Enabled  = DEBUG_FALSE;
     eb6:	10 92 a1 01 	sts	0x01A1, r1
  Debug.Timer.ResetVal = DEBUG_NULL;
     eba:	10 92 a2 01 	sts	0x01A2, r1
void Debug_Config_Clock(void){
  //add clock config
  #ifdef UART_DOUBLE_SPEED
  UCSR0A|=(1<<U2X0);  
  #else
  UCSR0A&=~(1<<U2X0);  
     ebe:	80 91 c0 00 	lds	r24, 0x00C0
     ec2:	8d 7f       	andi	r24, 0xFD	; 253
     ec4:	80 93 c0 00 	sts	0x00C0, r24
  Debug_RX_Packet_Struct_Init();
  Debug_Timer_Struct_Init();
  
  Debug_Config_GPIO();
  Debug_Config_Clock();
  Debug_Config_BAUD_Rate(baud);
     ec8:	c8 01       	movw	r24, r16
     eca:	b7 01       	movw	r22, r14
     ecc:	0e 94 c0 01 	call	0x380	; 0x380 <Debug_Config_BAUD_Rate>
}


void Debug_Config_Tx(void){
  //add tx config
  UCSR0B|=(1<<TXEN0);
     ed0:	80 91 c1 00 	lds	r24, 0x00C1
     ed4:	88 60       	ori	r24, 0x08	; 8
     ed6:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C|=(1<<UCSZ00)| (1<<UCSZ01);
     eda:	80 91 c2 00 	lds	r24, 0x00C2
     ede:	86 60       	ori	r24, 0x06	; 6
     ee0:	80 93 c2 00 	sts	0x00C2, r24
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	90 e0       	ldi	r25, 0x00	; 0

/*******************Debug Buffer Functions Start***************/

void Debug_Buf_Flush(void){
  for(uint8_t i = 0; i < DEBUG_BUFFER_SIZE; i++){
	Debug.Buf[i] = 0;
     ee8:	fc 01       	movw	r30, r24
     eea:	e0 5b       	subi	r30, 0xB0	; 176
     eec:	fe 4f       	sbci	r31, 0xFE	; 254
     eee:	14 86       	std	Z+12, r1	; 0x0c
     ef0:	01 96       	adiw	r24, 0x01	; 1


/*******************Debug Buffer Functions Start***************/

void Debug_Buf_Flush(void){
  for(uint8_t i = 0; i < DEBUG_BUFFER_SIZE; i++){
     ef2:	80 34       	cpi	r24, 0x40	; 64
     ef4:	91 05       	cpc	r25, r1
     ef6:	c1 f7       	brne	.-16     	; 0xee8 <Debug_Init+0x60>
	Debug.Buf[i] = 0;
  }
  Debug.BufIndex = 0;
     ef8:	10 92 a0 01 	sts	0x01A0, r1
     efc:	10 92 9f 01 	sts	0x019F, r1
  
  Debug_Timer_Init();
  Debug_Timer_Value_Reset();
  Debug_Timer_Enable();
  Debug_Buf_Flush();
}
     f00:	1f 91       	pop	r17
     f02:	0f 91       	pop	r16
     f04:	ff 90       	pop	r15
     f06:	ef 90       	pop	r14
     f08:	08 95       	ret

00000f0a <GPIO_Struct_Init>:
#include "gpio.h"


void GPIO_Struct_Init(void){
    
}
     f0a:	08 95       	ret

00000f0c <GPIO_Reg_Init>:

void GPIO_Reg_Init(void){
    GPIO0_DDR  |=  (1<<GPIO0_bp);
     f0c:	54 9a       	sbi	0x0a, 4	; 10
    GPIO0_PORT &=~ (1<<GPIO0_bp);
     f0e:	5c 98       	cbi	0x0b, 4	; 11
  
    GPIO1_DDR  |=  (1<<GPIO1_bp);
     f10:	3d 9a       	sbi	0x07, 5	; 7
    GPIO1_PORT &=~ (1<<GPIO1_bp);
     f12:	45 98       	cbi	0x08, 5	; 8
  
    GPIO2_DDR  |=  (1<<GPIO2_bp);
     f14:	3c 9a       	sbi	0x07, 4	; 7
    GPIO2_PORT &=~ (1<<GPIO2_bp);
     f16:	44 98       	cbi	0x08, 4	; 8
  
    GPIO3_DDR  |=  (1<<GPIO3_bp);
     f18:	3b 9a       	sbi	0x07, 3	; 7
    GPIO3_PORT &=~ (1<<GPIO3_bp);
     f1a:	43 98       	cbi	0x08, 3	; 8
  
    GPIO4_DDR  |=  (1<<GPIO4_bp);
     f1c:	3a 9a       	sbi	0x07, 2	; 7
    GPIO4_PORT &=~ (1<<GPIO4_bp);
     f1e:	42 98       	cbi	0x08, 2	; 8
}
     f20:	08 95       	ret

00000f22 <GPIO0_Set>:




void GPIO0_Set(uint8_t val){
    if(val == 0){
     f22:	88 23       	and	r24, r24
     f24:	11 f4       	brne	.+4      	; 0xf2a <GPIO0_Set+0x8>
        GPIO0_PORT &=~ (1<<GPIO0_bp);
     f26:	5c 98       	cbi	0x0b, 4	; 11
     f28:	08 95       	ret
    }
    else{
        GPIO0_PORT |=  (1<<GPIO0_bp);
     f2a:	5c 9a       	sbi	0x0b, 4	; 11
     f2c:	08 95       	ret

00000f2e <GPIO0_Toggle>:
    }
}

void GPIO0_Toggle(void){
    if(GPIO0_PORT & (1<<GPIO0_bp)){
     f2e:	5c 9b       	sbis	0x0b, 4	; 11
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <GPIO0_Toggle+0x8>
        GPIO0_PORT &=~ (1<<GPIO0_bp);
     f32:	5c 98       	cbi	0x0b, 4	; 11
     f34:	08 95       	ret
    }
    else{
        GPIO0_PORT |=  (1<<GPIO0_bp);
     f36:	5c 9a       	sbi	0x0b, 4	; 11
     f38:	08 95       	ret

00000f3a <GPIO1_Set>:




void GPIO1_Set(uint8_t val){
    if(val == 0){
     f3a:	88 23       	and	r24, r24
     f3c:	11 f4       	brne	.+4      	; 0xf42 <GPIO1_Set+0x8>
        GPIO1_PORT &=~ (1<<GPIO1_bp);
     f3e:	45 98       	cbi	0x08, 5	; 8
     f40:	08 95       	ret
    }
    else{
        GPIO1_PORT |=  (1<<GPIO1_bp);
     f42:	45 9a       	sbi	0x08, 5	; 8
     f44:	08 95       	ret

00000f46 <GPIO1_Toggle>:
    }
}

void GPIO1_Toggle(void){
    if(GPIO1_PORT & (1<<GPIO1_bp)){
     f46:	45 9b       	sbis	0x08, 5	; 8
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <GPIO1_Toggle+0x8>
        GPIO1_PORT &=~ (1<<GPIO1_bp);
     f4a:	45 98       	cbi	0x08, 5	; 8
     f4c:	08 95       	ret
    }
    else{
        GPIO1_PORT |=  (1<<GPIO1_bp);
     f4e:	45 9a       	sbi	0x08, 5	; 8
     f50:	08 95       	ret

00000f52 <GPIO2_Set>:




void GPIO2_Set(uint8_t val){
    if(val == 0){
     f52:	88 23       	and	r24, r24
     f54:	11 f4       	brne	.+4      	; 0xf5a <GPIO2_Set+0x8>
        GPIO2_PORT &=~ (1<<GPIO2_bp);
     f56:	44 98       	cbi	0x08, 4	; 8
     f58:	08 95       	ret
    }
    else{
        GPIO2_PORT |=  (1<<GPIO2_bp);
     f5a:	44 9a       	sbi	0x08, 4	; 8
     f5c:	08 95       	ret

00000f5e <GPIO2_Toggle>:
    }
}

void GPIO2_Toggle(void){
    if(GPIO2_PORT & (1<<GPIO2_bp)){
     f5e:	44 9b       	sbis	0x08, 4	; 8
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <GPIO2_Toggle+0x8>
        GPIO2_PORT &=~ (1<<GPIO2_bp);
     f62:	44 98       	cbi	0x08, 4	; 8
     f64:	08 95       	ret
    }
    else{
        GPIO2_PORT |=  (1<<GPIO2_bp);
     f66:	44 9a       	sbi	0x08, 4	; 8
     f68:	08 95       	ret

00000f6a <GPIO3_Set>:




void GPIO3_Set(uint8_t val){
    if(val == 0){
     f6a:	88 23       	and	r24, r24
     f6c:	11 f4       	brne	.+4      	; 0xf72 <GPIO3_Set+0x8>
        GPIO3_PORT &=~ (1<<GPIO3_bp);
     f6e:	43 98       	cbi	0x08, 3	; 8
     f70:	08 95       	ret
    }
    else{
        GPIO3_PORT |=  (1<<GPIO3_bp);
     f72:	43 9a       	sbi	0x08, 3	; 8
     f74:	08 95       	ret

00000f76 <GPIO3_Toggle>:
    }
}

void GPIO3_Toggle(void){
    if(GPIO3_PORT & (1<<GPIO3_bp)){
     f76:	43 9b       	sbis	0x08, 3	; 8
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <GPIO3_Toggle+0x8>
        GPIO3_PORT &=~ (1<<GPIO3_bp);
     f7a:	43 98       	cbi	0x08, 3	; 8
     f7c:	08 95       	ret
    }
    else{
        GPIO3_PORT |=  (1<<GPIO3_bp);
     f7e:	43 9a       	sbi	0x08, 3	; 8
     f80:	08 95       	ret

00000f82 <GPIO4_Set>:




void GPIO4_Set(uint8_t val){
    if(val == 0){
     f82:	88 23       	and	r24, r24
     f84:	11 f4       	brne	.+4      	; 0xf8a <GPIO4_Set+0x8>
        GPIO4_PORT &=~ (1<<GPIO4_bp);
     f86:	42 98       	cbi	0x08, 2	; 8
     f88:	08 95       	ret
    }
    else{
        GPIO4_PORT |=  (1<<GPIO4_bp);
     f8a:	42 9a       	sbi	0x08, 2	; 8
     f8c:	08 95       	ret

00000f8e <GPIO4_Toggle>:
    }
}

void GPIO4_Toggle(void){
    if(GPIO4_PORT & (1<<GPIO4_bp)){
     f8e:	42 9b       	sbis	0x08, 2	; 8
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <GPIO4_Toggle+0x8>
        GPIO4_PORT &=~ (1<<GPIO4_bp);
     f92:	42 98       	cbi	0x08, 2	; 8
     f94:	08 95       	ret
    }
    else{
        GPIO4_PORT |=  (1<<GPIO4_bp);
     f96:	42 9a       	sbi	0x08, 2	; 8
     f98:	08 95       	ret

00000f9a <GPIO_Init>:



void GPIO_Init(void){
    GPIO_Struct_Init();
	GPIO_Reg_Init();
     f9a:	0e 94 86 07 	call	0xf0c	; 0xf0c <GPIO_Reg_Init>
}
     f9e:	08 95       	ret

00000fa0 <Context_Save>:
#include <util/delay.h>
#include "context.h"


void Context_Save(void){
    asm volatile (
     fa0:	0f 92       	push	r0
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	0f 92       	push	r0
     fa6:	1f 92       	push	r1
     fa8:	11 24       	eor	r1, r1
     faa:	2f 92       	push	r2
     fac:	3f 92       	push	r3
     fae:	4f 92       	push	r4
     fb0:	5f 92       	push	r5
     fb2:	6f 92       	push	r6
     fb4:	7f 92       	push	r7
     fb6:	8f 92       	push	r8
     fb8:	9f 92       	push	r9
     fba:	af 92       	push	r10
     fbc:	bf 92       	push	r11
     fbe:	cf 92       	push	r12
     fc0:	df 92       	push	r13
     fc2:	ef 92       	push	r14
     fc4:	ff 92       	push	r15
     fc6:	0f 93       	push	r16
     fc8:	1f 93       	push	r17
     fca:	2f 93       	push	r18
     fcc:	3f 93       	push	r19
     fce:	4f 93       	push	r20
     fd0:	5f 93       	push	r21
     fd2:	6f 93       	push	r22
     fd4:	7f 93       	push	r23
     fd6:	8f 93       	push	r24
     fd8:	9f 93       	push	r25
     fda:	af 93       	push	r26
     fdc:	bf 93       	push	r27
     fde:	cf 93       	push	r28
     fe0:	df 93       	push	r29
     fe2:	ef 93       	push	r30
     fe4:	ff 93       	push	r31
        "push r28            \n\t"
        "push r29            \n\t"
        "push r30            \n\t"
        "push r31            \n\t"
    );
}
     fe6:	08 95       	ret

00000fe8 <Context_Restore>:



void Context_Restore(void){
    asm volatile (
     fe8:	ff 91       	pop	r31
     fea:	ef 91       	pop	r30
     fec:	df 91       	pop	r29
     fee:	cf 91       	pop	r28
     ff0:	bf 91       	pop	r27
     ff2:	af 91       	pop	r26
     ff4:	9f 91       	pop	r25
     ff6:	8f 91       	pop	r24
     ff8:	7f 91       	pop	r23
     ffa:	6f 91       	pop	r22
     ffc:	5f 91       	pop	r21
     ffe:	4f 91       	pop	r20
    1000:	3f 91       	pop	r19
    1002:	2f 91       	pop	r18
    1004:	1f 91       	pop	r17
    1006:	0f 91       	pop	r16
    1008:	ff 90       	pop	r15
    100a:	ef 90       	pop	r14
    100c:	df 90       	pop	r13
    100e:	cf 90       	pop	r12
    1010:	bf 90       	pop	r11
    1012:	af 90       	pop	r10
    1014:	9f 90       	pop	r9
    1016:	8f 90       	pop	r8
    1018:	7f 90       	pop	r7
    101a:	6f 90       	pop	r6
    101c:	5f 90       	pop	r5
    101e:	4f 90       	pop	r4
    1020:	3f 90       	pop	r3
    1022:	2f 90       	pop	r2
    1024:	1f 90       	pop	r1
    1026:	0f 90       	pop	r0
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	0f 90       	pop	r0
    102c:	18 95       	reti
        "pop  r0             \n\t"
        "out  __SREG__, r0   \n\t"
        "pop  r0             \n\t"
        "reti                \n\t"
	);
}
    102e:	08 95       	ret

00001030 <__lshrdi3>:
    1030:	ef 92       	push	r14
    1032:	ff 92       	push	r15
    1034:	0f 93       	push	r16
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	60 97       	sbiw	r28, 0x10	; 16
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	f8 94       	cli
    1044:	de bf       	out	0x3e, r29	; 62
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	cd bf       	out	0x3d, r28	; 61
    104a:	a8 2f       	mov	r26, r24
    104c:	00 23       	and	r16, r16
    104e:	09 f4       	brne	.+2      	; 0x1052 <__lshrdi3+0x22>
    1050:	61 c0       	rjmp	.+194    	; 0x1114 <__lshrdi3+0xe4>
    1052:	7e 01       	movw	r14, r28
    1054:	08 94       	sec
    1056:	e1 1c       	adc	r14, r1
    1058:	f1 1c       	adc	r15, r1
    105a:	88 e0       	ldi	r24, 0x08	; 8
    105c:	f7 01       	movw	r30, r14
    105e:	11 92       	st	Z+, r1
    1060:	8a 95       	dec	r24
    1062:	e9 f7       	brne	.-6      	; 0x105e <__lshrdi3+0x2e>
    1064:	29 83       	std	Y+1, r18	; 0x01
    1066:	3a 83       	std	Y+2, r19	; 0x02
    1068:	4b 83       	std	Y+3, r20	; 0x03
    106a:	5c 83       	std	Y+4, r21	; 0x04
    106c:	6d 83       	std	Y+5, r22	; 0x05
    106e:	7e 83       	std	Y+6, r23	; 0x06
    1070:	af 83       	std	Y+7, r26	; 0x07
    1072:	98 87       	std	Y+8, r25	; 0x08
    1074:	80 e2       	ldi	r24, 0x20	; 32
    1076:	80 1b       	sub	r24, r16
    1078:	e8 2f       	mov	r30, r24
    107a:	ff 27       	eor	r31, r31
    107c:	e7 fd       	sbrc	r30, 7
    107e:	f0 95       	com	r31
    1080:	4d 81       	ldd	r20, Y+5	; 0x05
    1082:	5e 81       	ldd	r21, Y+6	; 0x06
    1084:	6f 81       	ldd	r22, Y+7	; 0x07
    1086:	78 85       	ldd	r23, Y+8	; 0x08
    1088:	18 16       	cp	r1, r24
    108a:	84 f0       	brlt	.+32     	; 0x10ac <__lshrdi3+0x7c>
    108c:	1d 86       	std	Y+13, r1	; 0x0d
    108e:	1e 86       	std	Y+14, r1	; 0x0e
    1090:	1f 86       	std	Y+15, r1	; 0x0f
    1092:	18 8a       	std	Y+16, r1	; 0x10
    1094:	88 27       	eor	r24, r24
    1096:	99 27       	eor	r25, r25
    1098:	8e 1b       	sub	r24, r30
    109a:	9f 0b       	sbc	r25, r31
    109c:	04 c0       	rjmp	.+8      	; 0x10a6 <__lshrdi3+0x76>
    109e:	76 95       	lsr	r23
    10a0:	67 95       	ror	r22
    10a2:	57 95       	ror	r21
    10a4:	47 95       	ror	r20
    10a6:	8a 95       	dec	r24
    10a8:	d2 f7       	brpl	.-12     	; 0x109e <__lshrdi3+0x6e>
    10aa:	28 c0       	rjmp	.+80     	; 0x10fc <__lshrdi3+0xcc>
    10ac:	20 2f       	mov	r18, r16
    10ae:	33 27       	eor	r19, r19
    10b0:	27 fd       	sbrc	r18, 7
    10b2:	30 95       	com	r19
    10b4:	db 01       	movw	r26, r22
    10b6:	ca 01       	movw	r24, r20
    10b8:	02 2e       	mov	r0, r18
    10ba:	04 c0       	rjmp	.+8      	; 0x10c4 <__lshrdi3+0x94>
    10bc:	b6 95       	lsr	r27
    10be:	a7 95       	ror	r26
    10c0:	97 95       	ror	r25
    10c2:	87 95       	ror	r24
    10c4:	0a 94       	dec	r0
    10c6:	d2 f7       	brpl	.-12     	; 0x10bc <__lshrdi3+0x8c>
    10c8:	8d 87       	std	Y+13, r24	; 0x0d
    10ca:	9e 87       	std	Y+14, r25	; 0x0e
    10cc:	af 87       	std	Y+15, r26	; 0x0f
    10ce:	b8 8b       	std	Y+16, r27	; 0x10
    10d0:	04 c0       	rjmp	.+8      	; 0x10da <__lshrdi3+0xaa>
    10d2:	44 0f       	add	r20, r20
    10d4:	55 1f       	adc	r21, r21
    10d6:	66 1f       	adc	r22, r22
    10d8:	77 1f       	adc	r23, r23
    10da:	ea 95       	dec	r30
    10dc:	d2 f7       	brpl	.-12     	; 0x10d2 <__lshrdi3+0xa2>
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	9a 81       	ldd	r25, Y+2	; 0x02
    10e2:	ab 81       	ldd	r26, Y+3	; 0x03
    10e4:	bc 81       	ldd	r27, Y+4	; 0x04
    10e6:	04 c0       	rjmp	.+8      	; 0x10f0 <__lshrdi3+0xc0>
    10e8:	b6 95       	lsr	r27
    10ea:	a7 95       	ror	r26
    10ec:	97 95       	ror	r25
    10ee:	87 95       	ror	r24
    10f0:	2a 95       	dec	r18
    10f2:	d2 f7       	brpl	.-12     	; 0x10e8 <__lshrdi3+0xb8>
    10f4:	48 2b       	or	r20, r24
    10f6:	59 2b       	or	r21, r25
    10f8:	6a 2b       	or	r22, r26
    10fa:	7b 2b       	or	r23, r27
    10fc:	49 87       	std	Y+9, r20	; 0x09
    10fe:	5a 87       	std	Y+10, r21	; 0x0a
    1100:	6b 87       	std	Y+11, r22	; 0x0b
    1102:	7c 87       	std	Y+12, r23	; 0x0c
    1104:	29 85       	ldd	r18, Y+9	; 0x09
    1106:	3a 85       	ldd	r19, Y+10	; 0x0a
    1108:	4b 85       	ldd	r20, Y+11	; 0x0b
    110a:	5c 85       	ldd	r21, Y+12	; 0x0c
    110c:	6d 85       	ldd	r22, Y+13	; 0x0d
    110e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1110:	af 85       	ldd	r26, Y+15	; 0x0f
    1112:	98 89       	ldd	r25, Y+16	; 0x10
    1114:	8a 2f       	mov	r24, r26
    1116:	60 96       	adiw	r28, 0x10	; 16
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	f8 94       	cli
    111c:	de bf       	out	0x3e, r29	; 62
    111e:	0f be       	out	0x3f, r0	; 63
    1120:	cd bf       	out	0x3d, r28	; 61
    1122:	cf 91       	pop	r28
    1124:	df 91       	pop	r29
    1126:	0f 91       	pop	r16
    1128:	ff 90       	pop	r15
    112a:	ef 90       	pop	r14
    112c:	08 95       	ret

0000112e <__udivmodsi4>:
    112e:	a1 e2       	ldi	r26, 0x21	; 33
    1130:	1a 2e       	mov	r1, r26
    1132:	aa 1b       	sub	r26, r26
    1134:	bb 1b       	sub	r27, r27
    1136:	fd 01       	movw	r30, r26
    1138:	0d c0       	rjmp	.+26     	; 0x1154 <__udivmodsi4_ep>

0000113a <__udivmodsi4_loop>:
    113a:	aa 1f       	adc	r26, r26
    113c:	bb 1f       	adc	r27, r27
    113e:	ee 1f       	adc	r30, r30
    1140:	ff 1f       	adc	r31, r31
    1142:	a2 17       	cp	r26, r18
    1144:	b3 07       	cpc	r27, r19
    1146:	e4 07       	cpc	r30, r20
    1148:	f5 07       	cpc	r31, r21
    114a:	20 f0       	brcs	.+8      	; 0x1154 <__udivmodsi4_ep>
    114c:	a2 1b       	sub	r26, r18
    114e:	b3 0b       	sbc	r27, r19
    1150:	e4 0b       	sbc	r30, r20
    1152:	f5 0b       	sbc	r31, r21

00001154 <__udivmodsi4_ep>:
    1154:	66 1f       	adc	r22, r22
    1156:	77 1f       	adc	r23, r23
    1158:	88 1f       	adc	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	1a 94       	dec	r1
    115e:	69 f7       	brne	.-38     	; 0x113a <__udivmodsi4_loop>
    1160:	60 95       	com	r22
    1162:	70 95       	com	r23
    1164:	80 95       	com	r24
    1166:	90 95       	com	r25
    1168:	9b 01       	movw	r18, r22
    116a:	ac 01       	movw	r20, r24
    116c:	bd 01       	movw	r22, r26
    116e:	cf 01       	movw	r24, r30
    1170:	08 95       	ret

00001172 <__divmodsi4>:
    1172:	97 fb       	bst	r25, 7
    1174:	09 2e       	mov	r0, r25
    1176:	05 26       	eor	r0, r21
    1178:	0e d0       	rcall	.+28     	; 0x1196 <__divmodsi4_neg1>
    117a:	57 fd       	sbrc	r21, 7
    117c:	04 d0       	rcall	.+8      	; 0x1186 <__divmodsi4_neg2>
    117e:	d7 df       	rcall	.-82     	; 0x112e <__udivmodsi4>
    1180:	0a d0       	rcall	.+20     	; 0x1196 <__divmodsi4_neg1>
    1182:	00 1c       	adc	r0, r0
    1184:	38 f4       	brcc	.+14     	; 0x1194 <__divmodsi4_exit>

00001186 <__divmodsi4_neg2>:
    1186:	50 95       	com	r21
    1188:	40 95       	com	r20
    118a:	30 95       	com	r19
    118c:	21 95       	neg	r18
    118e:	3f 4f       	sbci	r19, 0xFF	; 255
    1190:	4f 4f       	sbci	r20, 0xFF	; 255
    1192:	5f 4f       	sbci	r21, 0xFF	; 255

00001194 <__divmodsi4_exit>:
    1194:	08 95       	ret

00001196 <__divmodsi4_neg1>:
    1196:	f6 f7       	brtc	.-4      	; 0x1194 <__divmodsi4_exit>
    1198:	90 95       	com	r25
    119a:	80 95       	com	r24
    119c:	70 95       	com	r23
    119e:	61 95       	neg	r22
    11a0:	7f 4f       	sbci	r23, 0xFF	; 255
    11a2:	8f 4f       	sbci	r24, 0xFF	; 255
    11a4:	9f 4f       	sbci	r25, 0xFF	; 255
    11a6:	08 95       	ret

000011a8 <_exit>:
    11a8:	f8 94       	cli

000011aa <__stop_program>:
    11aa:	ff cf       	rjmp	.-2      	; 0x11aa <__stop_program>
