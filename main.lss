
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b78  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000558  00800100  00800100  00000bec  2**0
                  ALLOC
  2 .stab         00000b64  00000000  00000000  00000bec  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000006d  00000000  00000000  00001750  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  000017bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000bd  00000000  00000000  000017fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000002b9  00000000  00000000  000018ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000e3  00000000  00000000  00001b73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b4  00000000  00000000  00001c56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  0000200c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000124  00000000  00000000  000020cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000021f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__vector_16>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	00 00       	nop
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 00       	nop
  76:	00 00       	nop
  78:	00 00       	nop
  7a:	00 00       	nop
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 00       	nop
  82:	00 00       	nop
  84:	00 00       	nop
  86:	00 00       	nop
  88:	a2 c1       	rjmp	.+836    	; 0x3ce <__vector_16>

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61
  96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  9a:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:


    
int main(void) {
    
	Kernel_Init();
  a2:	0e 94 1f 04 	call	0x83e	; 0x83e <Kernel_Init>

	Kernel_Task_Create(Tasks_Task1,  0);
  a6:	8b e2       	ldi	r24, 0x2B	; 43
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	0e 94 1a 03 	call	0x634	; 0x634 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task2,  3);
  b0:	84 e1       	ldi	r24, 0x14	; 20
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	63 e0       	ldi	r22, 0x03	; 3
  b6:	0e 94 1a 03 	call	0x634	; 0x634 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task3,  2);
  ba:	8d ef       	ldi	r24, 0xFD	; 253
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	62 e0       	ldi	r22, 0x02	; 2
  c0:	0e 94 1a 03 	call	0x634	; 0x634 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task4,  1);
  c4:	86 ee       	ldi	r24, 0xE6	; 230
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	0e 94 1a 03 	call	0x634	; 0x634 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task5,  4);
  ce:	8f ec       	ldi	r24, 0xCF	; 207
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	64 e0       	ldi	r22, 0x04	; 4
  d4:	0e 94 1a 03 	call	0x634	; 0x634 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task6,  6);
  d8:	8c eb       	ldi	r24, 0xBC	; 188
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	66 e0       	ldi	r22, 0x06	; 6
  de:	0e 94 1a 03 	call	0x634	; 0x634 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task7,  5);
  e2:	89 ea       	ldi	r24, 0xA9	; 169
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	65 e0       	ldi	r22, 0x05	; 5
  e8:	0e 94 1a 03 	call	0x634	; 0x634 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task8,  8);
  ec:	86 e9       	ldi	r24, 0x96	; 150
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	68 e0       	ldi	r22, 0x08	; 8
  f2:	0e 94 1a 03 	call	0x634	; 0x634 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task9,  7);
  f6:	83 e8       	ldi	r24, 0x83	; 131
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	67 e0       	ldi	r22, 0x07	; 7
  fc:	0e 94 1a 03 	call	0x634	; 0x634 <Kernel_Task_Create>
	
	Kernel_Start_Tasks();
 100:	0e 94 95 03 	call	0x72a	; 0x72a <Kernel_Start_Tasks>
 104:	ff cf       	rjmp	.-2      	; 0x104 <SRUDR0+0x3e>

00000106 <Tasks_Task9>:
    Kernel_Task_Sleep(80);
	
  }
}

void Tasks_Task9(void){
 106:	1f 93       	push	r17
  
  Debug_Init(0);
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 3a 05 	call	0xa74	; 0xa74 <Debug_Init>
 110:	10 e0       	ldi	r17, 0x00	; 0
 112:	04 c0       	rjmp	.+8      	; 0x11c <Tasks_Task9+0x16>
  
  while(1){
    
	  for(uint8_t i=0;i<200;i++){
      Debug_Tx_Byte('9');
 114:	89 e3       	ldi	r24, 0x39	; 57
 116:	0e 94 4a 05 	call	0xa94	; 0xa94 <Debug_Tx_Byte>
  
  Debug_Init(0);
  
  while(1){
    
	  for(uint8_t i=0;i<200;i++){
 11a:	1f 5f       	subi	r17, 0xFF	; 255
 11c:	18 3c       	cpi	r17, 0xC8	; 200
 11e:	d0 f3       	brcs	.-12     	; 0x114 <Tasks_Task9+0xe>
      Debug_Tx_Byte('9');
    }

    Kernel_Task_Sleep(90);
 120:	8a e5       	ldi	r24, 0x5A	; 90
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 4f 04 	call	0x89e	; 0x89e <Kernel_Task_Sleep>
 128:	10 e0       	ldi	r17, 0x00	; 0
 12a:	f4 cf       	rjmp	.-24     	; 0x114 <Tasks_Task9+0xe>

0000012c <Tasks_Task8>:
    Kernel_Task_Sleep(70);
	
  }
}

void Tasks_Task8(void){
 12c:	1f 93       	push	r17
  
  Debug_Init(0);
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 3a 05 	call	0xa74	; 0xa74 <Debug_Init>
 136:	10 e0       	ldi	r17, 0x00	; 0
 138:	04 c0       	rjmp	.+8      	; 0x142 <Tasks_Task8+0x16>
  
  while(1){
    
	  for(uint8_t i=0;i<200;i++){
      Debug_Tx_Byte('8');
 13a:	88 e3       	ldi	r24, 0x38	; 56
 13c:	0e 94 4a 05 	call	0xa94	; 0xa94 <Debug_Tx_Byte>
  
  Debug_Init(0);
  
  while(1){
    
	  for(uint8_t i=0;i<200;i++){
 140:	1f 5f       	subi	r17, 0xFF	; 255
 142:	18 3c       	cpi	r17, 0xC8	; 200
 144:	d0 f3       	brcs	.-12     	; 0x13a <Tasks_Task8+0xe>
      Debug_Tx_Byte('8');
    }

    Kernel_Task_Sleep(80);
 146:	80 e5       	ldi	r24, 0x50	; 80
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 4f 04 	call	0x89e	; 0x89e <Kernel_Task_Sleep>
 14e:	10 e0       	ldi	r17, 0x00	; 0
 150:	f4 cf       	rjmp	.-24     	; 0x13a <Tasks_Task8+0xe>

00000152 <Tasks_Task7>:
    Kernel_Task_Sleep(60);
	
  }
}

void Tasks_Task7(void){
 152:	1f 93       	push	r17
  
  Debug_Init(0);
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 3a 05 	call	0xa74	; 0xa74 <Debug_Init>
 15c:	10 e0       	ldi	r17, 0x00	; 0
 15e:	04 c0       	rjmp	.+8      	; 0x168 <Tasks_Task7+0x16>
  
  while(1){
    
	  for(uint8_t i=0;i<200;i++){
      Debug_Tx_Byte('7');
 160:	87 e3       	ldi	r24, 0x37	; 55
 162:	0e 94 4a 05 	call	0xa94	; 0xa94 <Debug_Tx_Byte>
  
  Debug_Init(0);
  
  while(1){
    
	  for(uint8_t i=0;i<200;i++){
 166:	1f 5f       	subi	r17, 0xFF	; 255
 168:	18 3c       	cpi	r17, 0xC8	; 200
 16a:	d0 f3       	brcs	.-12     	; 0x160 <Tasks_Task7+0xe>
      Debug_Tx_Byte('7');
    }

    Kernel_Task_Sleep(70);
 16c:	86 e4       	ldi	r24, 0x46	; 70
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 4f 04 	call	0x89e	; 0x89e <Kernel_Task_Sleep>
 174:	10 e0       	ldi	r17, 0x00	; 0
 176:	f4 cf       	rjmp	.-24     	; 0x160 <Tasks_Task7+0xe>

00000178 <Tasks_Task6>:
    Kernel_Task_Sleep(50);
	
  }
}

void Tasks_Task6(void){
 178:	1f 93       	push	r17
  
  Debug_Init(0);
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 3a 05 	call	0xa74	; 0xa74 <Debug_Init>
 182:	10 e0       	ldi	r17, 0x00	; 0
 184:	04 c0       	rjmp	.+8      	; 0x18e <Tasks_Task6+0x16>
  
  while(1){
    
    for(uint8_t i=0;i<200;i++){
      Debug_Tx_Byte('6');
 186:	86 e3       	ldi	r24, 0x36	; 54
 188:	0e 94 4a 05 	call	0xa94	; 0xa94 <Debug_Tx_Byte>
  
  Debug_Init(0);
  
  while(1){
    
    for(uint8_t i=0;i<200;i++){
 18c:	1f 5f       	subi	r17, 0xFF	; 255
 18e:	18 3c       	cpi	r17, 0xC8	; 200
 190:	d0 f3       	brcs	.-12     	; 0x186 <Tasks_Task6+0xe>
      Debug_Tx_Byte('6');
    }

    Kernel_Task_Sleep(60);
 192:	8c e3       	ldi	r24, 0x3C	; 60
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 4f 04 	call	0x89e	; 0x89e <Kernel_Task_Sleep>
 19a:	10 e0       	ldi	r17, 0x00	; 0
 19c:	f4 cf       	rjmp	.-24     	; 0x186 <Tasks_Task6+0xe>

0000019e <Tasks_Task5>:
    Kernel_Task_Sleep(40);
	
  }
}

void Tasks_Task5(void){
 19e:	0f 93       	push	r16
 1a0:	1f 93       	push	r17
  
  DDRC |= (1<<5);
 1a2:	3d 9a       	sbi	0x07, 5	; 7

  Debug_Init(0);
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 3a 05 	call	0xa74	; 0xa74 <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<5);
 1ac:	00 e2       	ldi	r16, 0x20	; 32
 1ae:	88 b1       	in	r24, 0x08	; 8
 1b0:	80 27       	eor	r24, r16
 1b2:	88 b9       	out	0x08, r24	; 8
 1b4:	10 e0       	ldi	r17, 0x00	; 0

	  for(uint8_t i=0;i<200;i++){
      Debug_Tx_Byte('5');
 1b6:	85 e3       	ldi	r24, 0x35	; 53
 1b8:	0e 94 4a 05 	call	0xa94	; 0xa94 <Debug_Tx_Byte>
  
  while(1){
    
    PORTC ^= (1<<5);

	  for(uint8_t i=0;i<200;i++){
 1bc:	1f 5f       	subi	r17, 0xFF	; 255
 1be:	18 3c       	cpi	r17, 0xC8	; 200
 1c0:	d1 f7       	brne	.-12     	; 0x1b6 <Tasks_Task5+0x18>
      Debug_Tx_Byte('5');
    }

    Kernel_Task_Sleep(50);
 1c2:	82 e3       	ldi	r24, 0x32	; 50
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 4f 04 	call	0x89e	; 0x89e <Kernel_Task_Sleep>
 1ca:	f1 cf       	rjmp	.-30     	; 0x1ae <Tasks_Task5+0x10>

000001cc <Tasks_Task4>:
    Kernel_Task_Sleep(30);
	
  }
}

void Tasks_Task4(void){
 1cc:	0f 93       	push	r16
 1ce:	1f 93       	push	r17
  
  DDRC |= (1<<4);
 1d0:	3c 9a       	sbi	0x07, 4	; 7

  Debug_Init(0);
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 3a 05 	call	0xa74	; 0xa74 <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<4);
 1da:	00 e1       	ldi	r16, 0x10	; 16
 1dc:	88 b1       	in	r24, 0x08	; 8
 1de:	80 27       	eor	r24, r16
 1e0:	88 b9       	out	0x08, r24	; 8
 1e2:	10 e0       	ldi	r17, 0x00	; 0

	  for(uint8_t i=0;i<200;i++){
      Debug_Tx_Byte('4');
 1e4:	84 e3       	ldi	r24, 0x34	; 52
 1e6:	0e 94 4a 05 	call	0xa94	; 0xa94 <Debug_Tx_Byte>
  
  while(1){
    
    PORTC ^= (1<<4);

	  for(uint8_t i=0;i<200;i++){
 1ea:	1f 5f       	subi	r17, 0xFF	; 255
 1ec:	18 3c       	cpi	r17, 0xC8	; 200
 1ee:	d1 f7       	brne	.-12     	; 0x1e4 <Tasks_Task4+0x18>
      Debug_Tx_Byte('4');
    }

    Kernel_Task_Sleep(40);
 1f0:	88 e2       	ldi	r24, 0x28	; 40
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 4f 04 	call	0x89e	; 0x89e <Kernel_Task_Sleep>
 1f8:	f1 cf       	rjmp	.-30     	; 0x1dc <Tasks_Task4+0x10>

000001fa <Tasks_Task3>:
    Kernel_Task_Sleep(20);
	
  }
}

void Tasks_Task3(void){
 1fa:	0f 93       	push	r16
 1fc:	1f 93       	push	r17
  
  DDRC |= (1<<3);
 1fe:	3b 9a       	sbi	0x07, 3	; 7

  Debug_Init(0);
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 3a 05 	call	0xa74	; 0xa74 <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<3);
 208:	08 e0       	ldi	r16, 0x08	; 8
 20a:	88 b1       	in	r24, 0x08	; 8
 20c:	80 27       	eor	r24, r16
 20e:	88 b9       	out	0x08, r24	; 8
 210:	10 e0       	ldi	r17, 0x00	; 0

	  for(uint8_t i=0;i<200;i++){
      Debug_Tx_Byte('3');
 212:	83 e3       	ldi	r24, 0x33	; 51
 214:	0e 94 4a 05 	call	0xa94	; 0xa94 <Debug_Tx_Byte>
  
  while(1){
    
    PORTC ^= (1<<3);

	  for(uint8_t i=0;i<200;i++){
 218:	1f 5f       	subi	r17, 0xFF	; 255
 21a:	18 3c       	cpi	r17, 0xC8	; 200
 21c:	d1 f7       	brne	.-12     	; 0x212 <Tasks_Task3+0x18>
      Debug_Tx_Byte('3');
    }

    Kernel_Task_Sleep(30);
 21e:	8e e1       	ldi	r24, 0x1E	; 30
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 4f 04 	call	0x89e	; 0x89e <Kernel_Task_Sleep>
 226:	f1 cf       	rjmp	.-30     	; 0x20a <Tasks_Task3+0x10>

00000228 <Tasks_Task2>:
    Kernel_Task_Sleep(10);
    
  }
}

void Tasks_Task2(void){
 228:	0f 93       	push	r16
 22a:	1f 93       	push	r17
  
  DDRC |= (1<<2);
 22c:	3a 9a       	sbi	0x07, 2	; 7

  Debug_Init(0);
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 3a 05 	call	0xa74	; 0xa74 <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<2);
 236:	04 e0       	ldi	r16, 0x04	; 4
 238:	88 b1       	in	r24, 0x08	; 8
 23a:	80 27       	eor	r24, r16
 23c:	88 b9       	out	0x08, r24	; 8
 23e:	10 e0       	ldi	r17, 0x00	; 0
    
    for(uint8_t i=0;i<200;i++){
      Debug_Tx_Byte('2');
 240:	82 e3       	ldi	r24, 0x32	; 50
 242:	0e 94 4a 05 	call	0xa94	; 0xa94 <Debug_Tx_Byte>
  
  while(1){
    
    PORTC ^= (1<<2);
    
    for(uint8_t i=0;i<200;i++){
 246:	1f 5f       	subi	r17, 0xFF	; 255
 248:	18 3c       	cpi	r17, 0xC8	; 200
 24a:	d1 f7       	brne	.-12     	; 0x240 <Tasks_Task2+0x18>
      Debug_Tx_Byte('2');
    }
	  
    Kernel_Task_Sleep(20);
 24c:	84 e1       	ldi	r24, 0x14	; 20
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 4f 04 	call	0x89e	; 0x89e <Kernel_Task_Sleep>
 254:	f1 cf       	rjmp	.-30     	; 0x238 <Tasks_Task2+0x10>

00000256 <Tasks_Task1>:
#include <util/delay.h>
#include "kernel.h"
#include "tasks.h"
#include "debug.h"

void Tasks_Task1(void){
 256:	9f 92       	push	r9
 258:	af 92       	push	r10
 25a:	bf 92       	push	r11
 25c:	cf 92       	push	r12
 25e:	df 92       	push	r13
 260:	ef 92       	push	r14
 262:	ff 92       	push	r15
 264:	0f 93       	push	r16
 266:	1f 93       	push	r17
 268:	df 93       	push	r29
 26a:	cf 93       	push	r28
 26c:	cd b7       	in	r28, 0x3d	; 61
 26e:	de b7       	in	r29, 0x3e	; 62
 270:	2a 97       	sbiw	r28, 0x0a	; 10
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	f8 94       	cli
 276:	de bf       	out	0x3e, r29	; 62
 278:	0f be       	out	0x3f, r0	; 63
 27a:	cd bf       	out	0x3d, r28	; 61
  
  uint32_t vcc=0, temp;
  uint8_t  val[10];
  val[0]='v';
 27c:	86 e7       	ldi	r24, 0x76	; 118
 27e:	89 83       	std	Y+1, r24	; 0x01
  val[1]='d';
 280:	84 e6       	ldi	r24, 0x64	; 100
 282:	8a 83       	std	Y+2, r24	; 0x02
  val[2]='d';
 284:	8b 83       	std	Y+3, r24	; 0x03
  val[3]=' ';
 286:	80 e2       	ldi	r24, 0x20	; 32
 288:	8c 83       	std	Y+4, r24	; 0x04
  val[8]='\r';
 28a:	8d e0       	ldi	r24, 0x0D	; 13
 28c:	89 87       	std	Y+9, r24	; 0x09
  val[9]='\n';
 28e:	8a e0       	ldi	r24, 0x0A	; 10
 290:	8a 87       	std	Y+10, r24	; 0x0a

  DDRC |= (1<<1);
 292:	39 9a       	sbi	0x07, 1	; 7
  Debug_Init(0);
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 3a 05 	call	0xa74	; 0xa74 <Debug_Init>

  ADMUX  =0x00;
 29c:	10 92 7c 00 	sts	0x007C, r1
  ADCSRA =0x00;
 2a0:	10 92 7a 00 	sts	0x007A, r1
  ADMUX |=(1<<REFS0)|(1<<MUX1) |(1<<MUX2) |(1<<MUX3);
 2a4:	80 91 7c 00 	lds	r24, 0x007C
 2a8:	8e 64       	ori	r24, 0x4E	; 78
 2aa:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA|=(1<<ADPS0)|(1<<ADPS2);
 2ae:	80 91 7a 00 	lds	r24, 0x007A
 2b2:	85 60       	ori	r24, 0x05	; 5
 2b4:	80 93 7a 00 	sts	0x007A, r24
  ADCSRA|=(1<<ADEN) ;
 2b8:	80 91 7a 00 	lds	r24, 0x007A
 2bc:	80 68       	ori	r24, 0x80	; 128
 2be:	80 93 7a 00 	sts	0x007A, r24
  Kernel_Task_Sleep(5);
 2c2:	85 e0       	ldi	r24, 0x05	; 5
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 4f 04 	call	0x89e	; 0x89e <Kernel_Task_Sleep>
  
  while(1){
    
    PORTC ^= (1<<1);
 2ca:	92 e0       	ldi	r25, 0x02	; 2
 2cc:	99 2e       	mov	r9, r25
    vcc   = temp;

    val[4] = (vcc/1000)%10 + 48;
    val[5] = (vcc/100)%10 + 48;
    val[6] = (vcc/10)%10 + 48;
    val[7] = (vcc/1)%10 + 48;
 2ce:	5e 01       	movw	r10, r28
 2d0:	08 94       	sec
 2d2:	a1 1c       	adc	r10, r1
 2d4:	b1 1c       	adc	r11, r1
    
    for(uint8_t i=0;i<10;i++){
 2d6:	8b e0       	ldi	r24, 0x0B	; 11
 2d8:	c8 2e       	mov	r12, r24
 2da:	d1 2c       	mov	r13, r1
 2dc:	cc 0e       	add	r12, r28
 2de:	dd 1e       	adc	r13, r29
  ADCSRA|=(1<<ADEN) ;
  Kernel_Task_Sleep(5);
  
  while(1){
    
    PORTC ^= (1<<1);
 2e0:	88 b1       	in	r24, 0x08	; 8
 2e2:	89 25       	eor	r24, r9
 2e4:	88 b9       	out	0x08, r24	; 8
    
    ADCSRA |= (1<<ADSC);
 2e6:	80 91 7a 00 	lds	r24, 0x007A
 2ea:	80 64       	ori	r24, 0x40	; 64
 2ec:	80 93 7a 00 	sts	0x007A, r24
    while((ADCSRA & (1<<ADIF))==0);
 2f0:	80 91 7a 00 	lds	r24, 0x007A
 2f4:	84 ff       	sbrs	r24, 4
 2f6:	fc cf       	rjmp	.-8      	; 0x2f0 <Tasks_Task1+0x9a>
    vcc = ADCW;
 2f8:	20 91 78 00 	lds	r18, 0x0078
 2fc:	30 91 79 00 	lds	r19, 0x0079
    ADCSRA |= (1<<ADIF);
 300:	80 91 7a 00 	lds	r24, 0x007A
 304:	80 61       	ori	r24, 0x10	; 16
 306:	80 93 7a 00 	sts	0x007A, r24
    temp  = 1126400; //1024*1100
    temp /= vcc;
 30a:	40 e0       	ldi	r20, 0x00	; 0
 30c:	50 e0       	ldi	r21, 0x00	; 0
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	70 e3       	ldi	r23, 0x30	; 48
 312:	81 e1       	ldi	r24, 0x11	; 17
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 98 05 	call	0xb30	; 0xb30 <__udivmodsi4>
 31a:	12 2f       	mov	r17, r18
 31c:	03 2f       	mov	r16, r19
 31e:	f4 2e       	mov	r15, r20
 320:	e5 2e       	mov	r14, r21
    vcc   = temp;

    val[4] = (vcc/1000)%10 + 48;
 322:	62 2f       	mov	r22, r18
 324:	73 2f       	mov	r23, r19
 326:	84 2f       	mov	r24, r20
 328:	95 2f       	mov	r25, r21
 32a:	28 ee       	ldi	r18, 0xE8	; 232
 32c:	33 e0       	ldi	r19, 0x03	; 3
 32e:	40 e0       	ldi	r20, 0x00	; 0
 330:	50 e0       	ldi	r21, 0x00	; 0
 332:	0e 94 98 05 	call	0xb30	; 0xb30 <__udivmodsi4>
 336:	ca 01       	movw	r24, r20
 338:	b9 01       	movw	r22, r18
 33a:	2a e0       	ldi	r18, 0x0A	; 10
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	40 e0       	ldi	r20, 0x00	; 0
 340:	50 e0       	ldi	r21, 0x00	; 0
 342:	0e 94 98 05 	call	0xb30	; 0xb30 <__udivmodsi4>
 346:	60 5d       	subi	r22, 0xD0	; 208
 348:	6d 83       	std	Y+5, r22	; 0x05
    val[5] = (vcc/100)%10 + 48;
 34a:	61 2f       	mov	r22, r17
 34c:	70 2f       	mov	r23, r16
 34e:	8f 2d       	mov	r24, r15
 350:	9e 2d       	mov	r25, r14
 352:	24 e6       	ldi	r18, 0x64	; 100
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	40 e0       	ldi	r20, 0x00	; 0
 358:	50 e0       	ldi	r21, 0x00	; 0
 35a:	0e 94 98 05 	call	0xb30	; 0xb30 <__udivmodsi4>
 35e:	ca 01       	movw	r24, r20
 360:	b9 01       	movw	r22, r18
 362:	2a e0       	ldi	r18, 0x0A	; 10
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	40 e0       	ldi	r20, 0x00	; 0
 368:	50 e0       	ldi	r21, 0x00	; 0
 36a:	0e 94 98 05 	call	0xb30	; 0xb30 <__udivmodsi4>
 36e:	60 5d       	subi	r22, 0xD0	; 208
 370:	6e 83       	std	Y+6, r22	; 0x06
    val[6] = (vcc/10)%10 + 48;
 372:	61 2f       	mov	r22, r17
 374:	70 2f       	mov	r23, r16
 376:	8f 2d       	mov	r24, r15
 378:	9e 2d       	mov	r25, r14
 37a:	2a e0       	ldi	r18, 0x0A	; 10
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	40 e0       	ldi	r20, 0x00	; 0
 380:	50 e0       	ldi	r21, 0x00	; 0
 382:	0e 94 98 05 	call	0xb30	; 0xb30 <__udivmodsi4>
 386:	ca 01       	movw	r24, r20
 388:	b9 01       	movw	r22, r18
 38a:	2a e0       	ldi	r18, 0x0A	; 10
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	40 e0       	ldi	r20, 0x00	; 0
 390:	50 e0       	ldi	r21, 0x00	; 0
 392:	0e 94 98 05 	call	0xb30	; 0xb30 <__udivmodsi4>
 396:	60 5d       	subi	r22, 0xD0	; 208
 398:	6f 83       	std	Y+7, r22	; 0x07
    val[7] = (vcc/1)%10 + 48;
 39a:	61 2f       	mov	r22, r17
 39c:	70 2f       	mov	r23, r16
 39e:	8f 2d       	mov	r24, r15
 3a0:	9e 2d       	mov	r25, r14
 3a2:	2a e0       	ldi	r18, 0x0A	; 10
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	40 e0       	ldi	r20, 0x00	; 0
 3a8:	50 e0       	ldi	r21, 0x00	; 0
 3aa:	0e 94 98 05 	call	0xb30	; 0xb30 <__udivmodsi4>
 3ae:	60 5d       	subi	r22, 0xD0	; 208
 3b0:	68 87       	std	Y+8, r22	; 0x08
 3b2:	85 01       	movw	r16, r10
    
    for(uint8_t i=0;i<10;i++){
      Debug_Tx_Byte( val[i] );
 3b4:	f8 01       	movw	r30, r16
 3b6:	81 91       	ld	r24, Z+
 3b8:	8f 01       	movw	r16, r30
 3ba:	0e 94 4a 05 	call	0xa94	; 0xa94 <Debug_Tx_Byte>
    val[4] = (vcc/1000)%10 + 48;
    val[5] = (vcc/100)%10 + 48;
    val[6] = (vcc/10)%10 + 48;
    val[7] = (vcc/1)%10 + 48;
    
    for(uint8_t i=0;i<10;i++){
 3be:	0c 15       	cp	r16, r12
 3c0:	1d 05       	cpc	r17, r13
 3c2:	c1 f7       	brne	.-16     	; 0x3b4 <Tasks_Task1+0x15e>
      Debug_Tx_Byte( val[i] );
    }
    Kernel_Task_Sleep(10);
 3c4:	8a e0       	ldi	r24, 0x0A	; 10
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 4f 04 	call	0x89e	; 0x89e <Kernel_Task_Sleep>
 3cc:	89 cf       	rjmp	.-238    	; 0x2e0 <Tasks_Task1+0x8a>

000003ce <__vector_16>:


;;=================================ISR execution starting===================================;; 
.global  __vector_16                                                                           
    __vector_16:                                          ;total 40.00uS @8MHz    (320 clocks) 
	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 3ce:	5d 9a       	sbi	0x0b, 5	; 11
        KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 3d0:	0f 92       	push	r0
 3d2:	0f b6       	in	r0, 0x3f	; 63
 3d4:	0f 92       	push	r0
 3d6:	1f 92       	push	r1
 3d8:	11 24       	eor	r1, r1
 3da:	2f 92       	push	r2
 3dc:	3f 92       	push	r3
 3de:	4f 92       	push	r4
 3e0:	5f 92       	push	r5
 3e2:	6f 92       	push	r6
 3e4:	7f 92       	push	r7
 3e6:	8f 92       	push	r8
 3e8:	9f 92       	push	r9
 3ea:	af 92       	push	r10
 3ec:	bf 92       	push	r11
 3ee:	cf 92       	push	r12
 3f0:	df 92       	push	r13
 3f2:	ef 92       	push	r14
 3f4:	ff 92       	push	r15
 3f6:	0f 93       	push	r16
 3f8:	1f 93       	push	r17
 3fa:	2f 93       	push	r18
 3fc:	3f 93       	push	r19
 3fe:	4f 93       	push	r20
 400:	5f 93       	push	r21
 402:	6f 93       	push	r22
 404:	7f 93       	push	r23
 406:	8f 93       	push	r24
 408:	9f 93       	push	r25
 40a:	af 93       	push	r26
 40c:	bf 93       	push	r27
 40e:	cf 93       	push	r28
 410:	df 93       	push	r29
 412:	ef 93       	push	r30
 414:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 416:	ee e0       	ldi	r30, 0x0E	; 14
 418:	f1 e0       	ldi	r31, 0x01	; 1
 41a:	00 91 07 01 	lds	r16, 0x0107
 41e:	00 0f       	add	r16, r16
 420:	e0 0f       	add	r30, r16
 422:	00 e0       	ldi	r16, 0x00	; 0
 424:	f0 1f       	adc	r31, r16
 426:	0d b7       	in	r16, 0x3d	; 61
 428:	1e b7       	in	r17, 0x3e	; 62
 42a:	00 83       	st	Z, r16
 42c:	11 83       	std	Z+1, r17	; 0x01
		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 42e:	00 91 06 01 	lds	r16, 0x0106
 432:	00 93 46 00 	sts	0x0046, r16
		KER_TICK_INCREMENT                                ;increment tick counter ( 26 clocks) 
 436:	00 91 00 01 	lds	r16, 0x0100
 43a:	03 95       	inc	r16
 43c:	00 93 00 01 	sts	0x0100, r16
 440:	10 e0       	ldi	r17, 0x00	; 0
 442:	00 91 01 01 	lds	r16, 0x0101
 446:	01 1f       	adc	r16, r17
 448:	00 93 01 01 	sts	0x0101, r16
 44c:	00 91 02 01 	lds	r16, 0x0102
 450:	01 1f       	adc	r16, r17
 452:	00 93 02 01 	sts	0x0102, r16
 456:	00 91 03 01 	lds	r16, 0x0103
 45a:	01 1f       	adc	r16, r17
 45c:	00 93 03 01 	sts	0x0103, r16
 460:	00 91 04 01 	lds	r16, 0x0104
 464:	01 1f       	adc	r16, r17
 466:	00 93 04 01 	sts	0x0104, r16
		LDI    R24               , SCH_MODE_HANDLER       ;set sch mode           (  1 clock ) 
 46a:	80 e0       	ldi	r24, 0x00	; 0
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
 46c:	0f ef       	ldi	r16, 0xFF	; 255
 46e:	00 93 09 01 	sts	0x0109, r16
 472:	00 e0       	ldi	r16, 0x00	; 0
 474:	00 93 0a 01 	sts	0x010A, r16
 478:	98 2f       	mov	r25, r24

0000047a <_KER_SCH_LOOP8>:
 47a:	00 93 07 01 	sts	0x0107, r16
 47e:	89 2f       	mov	r24, r25
 480:	e4 e4       	ldi	r30, 0x44	; 68
 482:	f1 e0       	ldi	r31, 0x01	; 1
 484:	00 91 07 01 	lds	r16, 0x0107
 488:	00 0f       	add	r16, r16
 48a:	e0 0f       	add	r30, r16
 48c:	00 e0       	ldi	r16, 0x00	; 0
 48e:	f0 1f       	adc	r31, r16
 490:	00 81       	ld	r16, Z
 492:	11 81       	ldd	r17, Z+1	; 0x01
 494:	20 2f       	mov	r18, r16
 496:	21 2b       	or	r18, r17
 498:	59 f0       	breq	.+22     	; 0x4b0 <_VAL_NULL9>
 49a:	81 30       	cpi	r24, 0x01	; 1
 49c:	99 f0       	breq	.+38     	; 0x4c4 <_VAL_NOT_NULL9>
 49e:	21 e0       	ldi	r18, 0x01	; 1
 4a0:	02 1b       	sub	r16, r18
 4a2:	20 e0       	ldi	r18, 0x00	; 0
 4a4:	12 0b       	sbc	r17, r18
 4a6:	00 83       	st	Z, r16
 4a8:	11 83       	std	Z+1, r17	; 0x01
 4aa:	20 2f       	mov	r18, r16
 4ac:	21 2b       	or	r18, r17
 4ae:	51 f4       	brne	.+20     	; 0x4c4 <_VAL_NOT_NULL9>

000004b0 <_VAL_NULL9>:
 4b0:	e0 e3       	ldi	r30, 0x30	; 48
 4b2:	f1 e0       	ldi	r31, 0x01	; 1
 4b4:	00 91 07 01 	lds	r16, 0x0107
 4b8:	e0 0f       	add	r30, r16
 4ba:	00 e0       	ldi	r16, 0x00	; 0
 4bc:	f0 1f       	adc	r31, r16
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	80 83       	st	Z, r24
 4c2:	01 c0       	rjmp	.+2      	; 0x4c6 <_EXIT_SLP_TIME9>

000004c4 <_VAL_NOT_NULL9>:
 4c4:	80 e0       	ldi	r24, 0x00	; 0

000004c6 <_EXIT_SLP_TIME9>:
 4c6:	81 30       	cpi	r24, 0x01	; 1
 4c8:	91 f4       	brne	.+36     	; 0x4ee <_KER_SCH_NEXT8>
 4ca:	ea e3       	ldi	r30, 0x3A	; 58
 4cc:	f1 e0       	ldi	r31, 0x01	; 1
 4ce:	00 e0       	ldi	r16, 0x00	; 0
 4d0:	80 91 07 01 	lds	r24, 0x0107
 4d4:	e8 0f       	add	r30, r24
 4d6:	f0 1f       	adc	r31, r16
 4d8:	80 81       	ld	r24, Z
 4da:	00 91 09 01 	lds	r16, 0x0109
 4de:	80 17       	cp	r24, r16
 4e0:	30 f4       	brcc	.+12     	; 0x4ee <_KER_SCH_NEXT8>
 4e2:	80 93 09 01 	sts	0x0109, r24
 4e6:	00 91 07 01 	lds	r16, 0x0107
 4ea:	00 93 0a 01 	sts	0x010A, r16

000004ee <_KER_SCH_NEXT8>:
 4ee:	00 91 07 01 	lds	r16, 0x0107
 4f2:	03 95       	inc	r16
 4f4:	10 91 08 01 	lds	r17, 0x0108
 4f8:	01 17       	cp	r16, r17
 4fa:	08 f4       	brcc	.+2      	; 0x4fe <_KER_SCH_EXIT8>
 4fc:	be cf       	rjmp	.-132    	; 0x47a <_KER_SCH_LOOP8>

000004fe <_KER_SCH_EXIT8>:
 4fe:	00 91 0a 01 	lds	r16, 0x010A
 502:	00 93 07 01 	sts	0x0107, r16
		KER_CPU_USAGE                                     ;calc cpu usage         ( 26 clocks) 
 506:	00 91 07 01 	lds	r16, 0x0107
 50a:	00 23       	and	r16, r16
 50c:	29 f0       	breq	.+10     	; 0x518 <_KER_USG_TICK13>
 50e:	00 91 0c 01 	lds	r16, 0x010C
 512:	03 95       	inc	r16
 514:	00 93 0c 01 	sts	0x010C, r16

00000518 <_KER_USG_TICK13>:
 518:	00 91 0b 01 	lds	r16, 0x010B
 51c:	03 95       	inc	r16
 51e:	04 36       	cpi	r16, 0x64	; 100
 520:	40 f0       	brcs	.+16     	; 0x532 <_KER_USG_UTC_SV13>
 522:	00 e0       	ldi	r16, 0x00	; 0
 524:	10 91 0c 01 	lds	r17, 0x010C
 528:	10 93 0d 01 	sts	0x010D, r17
 52c:	10 e0       	ldi	r17, 0x00	; 0
 52e:	10 93 0c 01 	sts	0x010C, r17

00000532 <_KER_USG_UTC_SV13>:
 532:	00 93 0b 01 	sts	0x010B, r16
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 536:	ee e0       	ldi	r30, 0x0E	; 14
 538:	f1 e0       	ldi	r31, 0x01	; 1
 53a:	00 91 07 01 	lds	r16, 0x0107
 53e:	00 0f       	add	r16, r16
 540:	e0 0f       	add	r30, r16
 542:	00 e0       	ldi	r16, 0x00	; 0
 544:	f0 1f       	adc	r31, r16
 546:	00 81       	ld	r16, Z
 548:	11 81       	ldd	r17, Z+1	; 0x01
 54a:	0d bf       	out	0x3d, r16	; 61
 54c:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
 54e:	ff 91       	pop	r31
 550:	ef 91       	pop	r30
 552:	df 91       	pop	r29
 554:	cf 91       	pop	r28
 556:	bf 91       	pop	r27
 558:	af 91       	pop	r26
 55a:	9f 91       	pop	r25
 55c:	8f 91       	pop	r24
 55e:	7f 91       	pop	r23
 560:	6f 91       	pop	r22
 562:	5f 91       	pop	r21
 564:	4f 91       	pop	r20
 566:	3f 91       	pop	r19
 568:	2f 91       	pop	r18
 56a:	1f 91       	pop	r17
 56c:	0f 91       	pop	r16
 56e:	ff 90       	pop	r15
 570:	ef 90       	pop	r14
 572:	df 90       	pop	r13
 574:	cf 90       	pop	r12
 576:	bf 90       	pop	r11
 578:	af 90       	pop	r10
 57a:	9f 90       	pop	r9
 57c:	8f 90       	pop	r8
 57e:	7f 90       	pop	r7
 580:	6f 90       	pop	r6
 582:	5f 90       	pop	r5
 584:	4f 90       	pop	r4
 586:	3f 90       	pop	r3
 588:	2f 90       	pop	r2
 58a:	1f 90       	pop	r1
 58c:	0f 90       	pop	r0
 58e:	0f be       	out	0x3f, r0	; 63
 590:	0f 90       	pop	r0
	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 592:	5d 98       	cbi	0x0b, 5	; 11
		RETI                                              ;return from interrupt  (  4 clocks) 
 594:	18 95       	reti

00000596 <Kernel_SysTick_Reg_Init>:
;used registers          : R16, R17, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
;arg registers           : R24(Prescaler), R22(ReloadVal)                                      
;return registers        : None                                                                
;unsafe access registers : R16, R17, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
Kernel_SysTick_Reg_Init:                                  ;total 11.5uS @8MHz     ( 92 clocks) 
        CLI                                               ;disable global int     (  1 clock ) 
 596:	f8 94       	cli
		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 598:	5d 98       	cbi	0x0b, 5	; 11
 59a:	55 9a       	sbi	0x0a, 5	; 10
        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 59c:	a0 91 22 01 	lds	r26, 0x0122
 5a0:	b0 91 23 01 	lds	r27, 0x0123
 5a4:	0d b7       	in	r16, 0x3d	; 61
 5a6:	1e b7       	in	r17, 0x3e	; 62
 5a8:	0d 93       	st	X+, r16
 5aa:	1d 93       	st	X+, r17
 5ac:	ed 93       	st	X+, r30
 5ae:	fd 93       	st	X+, r31
 5b0:	a0 93 22 01 	sts	0x0122, r26
 5b4:	b0 93 23 01 	sts	0x0123, r27
		;clear reg                                                                             
		LDI   R16                , 0x00                   ;set 0x00 to R16        (  1 clock ) 
 5b8:	00 e0       	ldi	r16, 0x00	; 0
		;clear tick counter                                                                    
		STS   KerBase+OFB_TICK0  , R16                    ;clear  KerBase[0]      (  2 clocks) 
 5ba:	00 93 00 01 	sts	0x0100, r16
		STS   KerBase+OFB_TICK1  , R16                    ;clear  KerBase[1]      (  2 clocks) 
 5be:	00 93 01 01 	sts	0x0101, r16
		STS   KerBase+OFB_TICK2  , R16                    ;clear  KerBase[2]      (  2 clocks) 
 5c2:	00 93 02 01 	sts	0x0102, r16
		STS   KerBase+OFB_TICK3  , R16                    ;clear  KerBase[3]      (  2 clocks) 
 5c6:	00 93 03 01 	sts	0x0103, r16
		STS   KerBase+OFB_TICK4  , R16                    ;clear  KerBase[4]      (  2 clocks) 
 5ca:	00 93 04 01 	sts	0x0104, r16
		;clear system registers                                                                
		STS   KerBase+OFB_PRS    , R16                    ;clear  KerBase[5]      (  2 clocks) 
 5ce:	00 93 05 01 	sts	0x0105, r16
		STS   KerBase+OFB_RLD    , R16                    ;clear  KerBase[6]      (  2 clocks) 
 5d2:	00 93 06 01 	sts	0x0106, r16
		STS   KerBase+OFB_TID    , R16                    ;clear  KerBase[7]      (  2 clocks) 
 5d6:	00 93 07 01 	sts	0x0107, r16
		STS   KerBase+OFB_NTSK   , R16                    ;clear  KerBase[8]      (  2 clocks) 
 5da:	00 93 08 01 	sts	0x0108, r16
		STS   KerBase+OFB_LPR    , R16                    ;clear  KerBase[9]      (  2 clocks) 
 5de:	00 93 09 01 	sts	0x0109, r16
        STS   KerBase+OFB_PTID   , R16                    ;clear  KerBase[10]     (  2 clocks) 
 5e2:	00 93 0a 01 	sts	0x010A, r16
		STS   KerBase+OFB_UTC    , R16                    ;clear  KerBase[11]     (  2 clocks) 
 5e6:	00 93 0b 01 	sts	0x010B, r16
		STS   KerBase+OFB_UATC   , R16                    ;clear  KerBase[12]     (  2 clocks) 
 5ea:	00 93 0c 01 	sts	0x010C, r16
		STS   KerBase+OFB_USAGE  , R16                    ;clear  KerBase[13]     (  2 clocks) 
 5ee:	00 93 0d 01 	sts	0x010D, r16
		;clear all timer registers                                                             
		STS   SRTCCR0A           , R16                    ;clear TCCR0A           (  2 clocks) 
 5f2:	00 93 44 00 	sts	0x0044, r16
		STS   SRTCCR0B           , R16                    ;clear TCCR0B           (  2 clocks) 
 5f6:	00 93 45 00 	sts	0x0045, r16
		STS   SRTIMSK0           , R16                    ;clear TIMSK0           (  2 clocks) 
 5fa:	00 93 6e 00 	sts	0x006E, r16
		STS   SRTIFR0            , R16                    ;clear TIFR0            (  2 clocks) 
 5fe:	00 93 35 00 	sts	0x0035, r16
		STS   SROCR0A            , R16                    ;clear OCR0A            (  2 clocks) 
 602:	00 93 47 00 	sts	0x0047, r16
		STS   SROCR0B            , R16                    ;clear OCR0B            (  2 clocks) 
 606:	00 93 48 00 	sts	0x0048, r16
		STS   SRTCNT0            , R16                    ;clear TCNT0            (  2 clocks) 
 60a:	00 93 46 00 	sts	0x0046, r16
		;save values for future use                                                            
		STS   KerBase+OFB_PRS    , R24                    ;KerBase[5] prescaler   (  2 clocks) 
 60e:	80 93 05 01 	sts	0x0105, r24
		STS   KerBase+OFB_RLD    , R22                    ;KerBase[6] reload val  (  2 clocks) 
 612:	60 93 06 01 	sts	0x0106, r22
        KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 616:	a0 91 22 01 	lds	r26, 0x0122
 61a:	b0 91 23 01 	lds	r27, 0x0123
 61e:	fe 91       	ld	r31, -X
 620:	ee 91       	ld	r30, -X
 622:	1e 91       	ld	r17, -X
 624:	0e 91       	ld	r16, -X
 626:	0d bf       	out	0x3d, r16	; 61
 628:	1e bf       	out	0x3e, r17	; 62
 62a:	a0 93 22 01 	sts	0x0122, r26
 62e:	b0 93 23 01 	sts	0x0123, r27
		RET                                               ;return from subroutine (  4 clocks) 
 632:	08 95       	ret

00000634 <Kernel_Task_Create>:
;used registers          : R16, R17, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)         
;arg registers           : R25:R24(FuncPtr), R22(TaskPriority)                                 
;return registers        : None                                                                
;unsafe access registers : R16, R17, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)         
Kernel_Task_Create:                                       ;total 20.38uS @8MHz    (163 clocks) 
        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 634:	a0 91 22 01 	lds	r26, 0x0122
 638:	b0 91 23 01 	lds	r27, 0x0123
 63c:	0d b7       	in	r16, 0x3d	; 61
 63e:	1e b7       	in	r17, 0x3e	; 62
 640:	0d 93       	st	X+, r16
 642:	1d 93       	st	X+, r17
 644:	ed 93       	st	X+, r30
 646:	fd 93       	st	X+, r31
 648:	a0 93 22 01 	sts	0x0122, r26
 64c:	b0 93 23 01 	sts	0x0123, r27
		LDI   R17                , 0x00                   ;clear reg              (  1 clock ) 
 650:	10 e0       	ldi	r17, 0x00	; 0
		;set priority to KerSchPr+task_id                                                      
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 652:	ea e3       	ldi	r30, 0x3A	; 58
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 654:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 656:	00 91 07 01 	lds	r16, 0x0107
 65a:	e0 0f       	add	r30, r16
 65c:	00 e0       	ldi	r16, 0x00	; 0
 65e:	f0 1f       	adc	r31, r16
		ST    Z                  , R22                    ;save priority          (  2 clocks) 
 660:	60 83       	st	Z, r22
		;set task status to KerSchSts+task_id                                                  
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 662:	e0 e3       	ldi	r30, 0x30	; 48
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 664:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 666:	00 91 07 01 	lds	r16, 0x0107
 66a:	e0 0f       	add	r30, r16
 66c:	00 e0       	ldi	r16, 0x00	; 0
 66e:	f0 1f       	adc	r31, r16
		LDI   R16                , TASK_READY             ;set status as ready    (  1 clock ) 
 670:	01 e0       	ldi	r16, 0x01	; 1
		ST    Z                  , R16                    ;save status            (  2 clocks) 
 672:	00 83       	st	Z, r16
		;stack pointer for current task (KerStack + KER_STK_SZ*(task_id+1) - 1) ->stack top    
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 674:	00 91 07 01 	lds	r16, 0x0107
		MOV   R17                , R16                    ;load task_id           (  1 clock ) 
 678:	10 2f       	mov	r17, r16
		INC   R17                                         ;increment task_id      (  1 clock ) 
 67a:	13 95       	inc	r17
		LDI   R18                , KER_STK_SZ             ;load stack size        (  1 clock ) 
 67c:	20 e8       	ldi	r18, 0x80	; 128
		MUL   R17                , R18                    ;multiply to get offset (  2 clocks) 
 67e:	12 9f       	mul	r17, r18
		MOV   ZL                 , R0                     ;load multiplied low    (  1 clocks) 
 680:	e0 2d       	mov	r30, r0
		MOV   ZH                 , R1                     ;load multiplied high   (  1 clocks) 
 682:	f1 2d       	mov	r31, r1
		SBIW  ZL                 , 0x01                   ;dec multiplied val-1   (  2 clocks) 
 684:	31 97       	sbiw	r30, 0x01	; 1
		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 686:	11 24       	eor	r1, r1
		LDI   R17                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
 688:	18 e5       	ldi	r17, 0x58	; 88
		LDI   R18                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
 68a:	21 e0       	ldi	r18, 0x01	; 1
		ADD   ZL                 , R17                    ;add low bytes          (  1 clock ) 
 68c:	e1 0f       	add	r30, r17
		ADC   ZH                 , R18                    ;add high bytes+carry   (  1 clock ) 
 68e:	f2 1f       	adc	r31, r18
		OUT   IOSPL              , ZL                     ;load SPL               (  1 clock ) 
 690:	ed bf       	out	0x3d, r30	; 61
        OUT   IOSPH              , ZH                     ;load SPH               (  1 clock ) 
 692:	fe bf       	out	0x3e, r31	; 62
		;function argument directly returns word address                                       
	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
 694:	8f 93       	push	r24
		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 696:	9f 93       	push	r25
		;push context to stack of this task                                                    
		KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 698:	0f 92       	push	r0
 69a:	0f b6       	in	r0, 0x3f	; 63
 69c:	0f 92       	push	r0
 69e:	1f 92       	push	r1
 6a0:	11 24       	eor	r1, r1
 6a2:	2f 92       	push	r2
 6a4:	3f 92       	push	r3
 6a6:	4f 92       	push	r4
 6a8:	5f 92       	push	r5
 6aa:	6f 92       	push	r6
 6ac:	7f 92       	push	r7
 6ae:	8f 92       	push	r8
 6b0:	9f 92       	push	r9
 6b2:	af 92       	push	r10
 6b4:	bf 92       	push	r11
 6b6:	cf 92       	push	r12
 6b8:	df 92       	push	r13
 6ba:	ef 92       	push	r14
 6bc:	ff 92       	push	r15
 6be:	0f 93       	push	r16
 6c0:	1f 93       	push	r17
 6c2:	2f 93       	push	r18
 6c4:	3f 93       	push	r19
 6c6:	4f 93       	push	r20
 6c8:	5f 93       	push	r21
 6ca:	6f 93       	push	r22
 6cc:	7f 93       	push	r23
 6ce:	8f 93       	push	r24
 6d0:	9f 93       	push	r25
 6d2:	af 93       	push	r26
 6d4:	bf 93       	push	r27
 6d6:	cf 93       	push	r28
 6d8:	df 93       	push	r29
 6da:	ef 93       	push	r30
 6dc:	ff 93       	push	r31
		;read stack pointer of current task (necessary when restore)                           
		IN    R17                , IOSPL                  ;read SPL               (  1 clock ) 
 6de:	1d b7       	in	r17, 0x3d	; 61
        IN    R18                , IOSPH                  ;read SPH               (  1 clock ) 
 6e0:	2e b7       	in	r18, 0x3e	; 62
		;calculate the address where current task's SP will be stored and store SP             
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 6e2:	00 91 07 01 	lds	r16, 0x0107
		MOV   R19                , R16                    ;copy task_id           (  1 clock ) 
 6e6:	30 2f       	mov	r19, r16
		LSL   R19                                         ;left shift to multiply (  1 clock ) 
 6e8:	33 0f       	add	r19, r19
		LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 6ea:	ee e0       	ldi	r30, 0x0E	; 14
		LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 6ec:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R19                    ;add offset to array    (  1 clock ) 
 6ee:	e3 0f       	add	r30, r19
		LDI   R16                , 0x00                   ;clear reg              (  1 clock ) 
 6f0:	00 e0       	ldi	r16, 0x00	; 0
		ADC   ZH                 , R16                    ;add carry if any       (  1 clock ) 
 6f2:	f0 1f       	adc	r31, r16
		ST    Z+                 , R17                    ;SPL at KerPSp+offset   (  2 clocks) 
 6f4:	11 93       	st	Z+, r17
		ST    Z                  , R18                    ;SPH at KerPSp+offset   (  2 clocks) 
 6f6:	20 83       	st	Z, r18
		;increment task_id                                                                     
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 6f8:	00 91 07 01 	lds	r16, 0x0107
		INC   R16                                         ;increment task_id      (  1 clock ) 
 6fc:	03 95       	inc	r16
		STS   KerBase+OFB_TID    , R16                    ;store task_id          (  2 clocks) 
 6fe:	00 93 07 01 	sts	0x0107, r16
		;increment ntask                                                                       
		LDS   R16                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 702:	00 91 08 01 	lds	r16, 0x0108
		INC   R16                                         ;increment ntask        (  1 clock ) 
 706:	03 95       	inc	r16
		STS   KerBase+OFB_NTSK   , R16                    ;store ntask            (  2 clocks) 
 708:	00 93 08 01 	sts	0x0108, r16
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 70c:	a0 91 22 01 	lds	r26, 0x0122
 710:	b0 91 23 01 	lds	r27, 0x0123
 714:	fe 91       	ld	r31, -X
 716:	ee 91       	ld	r30, -X
 718:	1e 91       	ld	r17, -X
 71a:	0e 91       	ld	r16, -X
 71c:	0d bf       	out	0x3d, r16	; 61
 71e:	1e bf       	out	0x3e, r17	; 62
 720:	a0 93 22 01 	sts	0x0122, r26
 724:	b0 93 23 01 	sts	0x0123, r27
		RET                                               ;return from subroutine (  4 clocks) 
 728:	08 95       	ret

0000072a <Kernel_Start_Tasks>:
;used registers          : R0~R31                                                              
;arg registers           : None                                                                
;return registers        : None                                                                
;unsafe access registers : R16, R17, R18, R24, R25, R30(ZL), R31(ZH)                           
Kernel_Start_Tasks:                                       ;total 11.38uS @8MHz    ( 91 clocks) 
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 72a:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
 72c:	0f ef       	ldi	r16, 0xFF	; 255
 72e:	00 93 09 01 	sts	0x0109, r16
 732:	00 e0       	ldi	r16, 0x00	; 0
 734:	00 93 0a 01 	sts	0x010A, r16
 738:	98 2f       	mov	r25, r24

0000073a <_KER_SCH_LOOP30>:
 73a:	00 93 07 01 	sts	0x0107, r16
 73e:	89 2f       	mov	r24, r25
 740:	e4 e4       	ldi	r30, 0x44	; 68
 742:	f1 e0       	ldi	r31, 0x01	; 1
 744:	00 91 07 01 	lds	r16, 0x0107
 748:	00 0f       	add	r16, r16
 74a:	e0 0f       	add	r30, r16
 74c:	00 e0       	ldi	r16, 0x00	; 0
 74e:	f0 1f       	adc	r31, r16
 750:	00 81       	ld	r16, Z
 752:	11 81       	ldd	r17, Z+1	; 0x01
 754:	20 2f       	mov	r18, r16
 756:	21 2b       	or	r18, r17
 758:	59 f0       	breq	.+22     	; 0x770 <_VAL_NULL31>
 75a:	81 30       	cpi	r24, 0x01	; 1
 75c:	99 f0       	breq	.+38     	; 0x784 <_VAL_NOT_NULL31>
 75e:	21 e0       	ldi	r18, 0x01	; 1
 760:	02 1b       	sub	r16, r18
 762:	20 e0       	ldi	r18, 0x00	; 0
 764:	12 0b       	sbc	r17, r18
 766:	00 83       	st	Z, r16
 768:	11 83       	std	Z+1, r17	; 0x01
 76a:	20 2f       	mov	r18, r16
 76c:	21 2b       	or	r18, r17
 76e:	51 f4       	brne	.+20     	; 0x784 <_VAL_NOT_NULL31>

00000770 <_VAL_NULL31>:
 770:	e0 e3       	ldi	r30, 0x30	; 48
 772:	f1 e0       	ldi	r31, 0x01	; 1
 774:	00 91 07 01 	lds	r16, 0x0107
 778:	e0 0f       	add	r30, r16
 77a:	00 e0       	ldi	r16, 0x00	; 0
 77c:	f0 1f       	adc	r31, r16
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	80 83       	st	Z, r24
 782:	01 c0       	rjmp	.+2      	; 0x786 <_EXIT_SLP_TIME31>

00000784 <_VAL_NOT_NULL31>:
 784:	80 e0       	ldi	r24, 0x00	; 0

00000786 <_EXIT_SLP_TIME31>:
 786:	81 30       	cpi	r24, 0x01	; 1
 788:	91 f4       	brne	.+36     	; 0x7ae <_KER_SCH_NEXT30>
 78a:	ea e3       	ldi	r30, 0x3A	; 58
 78c:	f1 e0       	ldi	r31, 0x01	; 1
 78e:	00 e0       	ldi	r16, 0x00	; 0
 790:	80 91 07 01 	lds	r24, 0x0107
 794:	e8 0f       	add	r30, r24
 796:	f0 1f       	adc	r31, r16
 798:	80 81       	ld	r24, Z
 79a:	00 91 09 01 	lds	r16, 0x0109
 79e:	80 17       	cp	r24, r16
 7a0:	30 f4       	brcc	.+12     	; 0x7ae <_KER_SCH_NEXT30>
 7a2:	80 93 09 01 	sts	0x0109, r24
 7a6:	00 91 07 01 	lds	r16, 0x0107
 7aa:	00 93 0a 01 	sts	0x010A, r16

000007ae <_KER_SCH_NEXT30>:
 7ae:	00 91 07 01 	lds	r16, 0x0107
 7b2:	03 95       	inc	r16
 7b4:	10 91 08 01 	lds	r17, 0x0108
 7b8:	01 17       	cp	r16, r17
 7ba:	08 f4       	brcc	.+2      	; 0x7be <_KER_SCH_EXIT30>
 7bc:	be cf       	rjmp	.-132    	; 0x73a <_KER_SCH_LOOP30>

000007be <_KER_SCH_EXIT30>:
 7be:	00 91 0a 01 	lds	r16, 0x010A
 7c2:	00 93 07 01 	sts	0x0107, r16
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 7c6:	ee e0       	ldi	r30, 0x0E	; 14
 7c8:	f1 e0       	ldi	r31, 0x01	; 1
 7ca:	00 91 07 01 	lds	r16, 0x0107
 7ce:	00 0f       	add	r16, r16
 7d0:	e0 0f       	add	r30, r16
 7d2:	00 e0       	ldi	r16, 0x00	; 0
 7d4:	f0 1f       	adc	r31, r16
 7d6:	00 81       	ld	r16, Z
 7d8:	11 81       	ldd	r17, Z+1	; 0x01
 7da:	0d bf       	out	0x3d, r16	; 61
 7dc:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 7de:	ff 91       	pop	r31
 7e0:	ef 91       	pop	r30
 7e2:	df 91       	pop	r29
 7e4:	cf 91       	pop	r28
 7e6:	bf 91       	pop	r27
 7e8:	af 91       	pop	r26
 7ea:	9f 91       	pop	r25
 7ec:	8f 91       	pop	r24
 7ee:	7f 91       	pop	r23
 7f0:	6f 91       	pop	r22
 7f2:	5f 91       	pop	r21
 7f4:	4f 91       	pop	r20
 7f6:	3f 91       	pop	r19
 7f8:	2f 91       	pop	r18
 7fa:	1f 91       	pop	r17
 7fc:	0f 91       	pop	r16
 7fe:	ff 90       	pop	r15
 800:	ef 90       	pop	r14
 802:	df 90       	pop	r13
 804:	cf 90       	pop	r12
 806:	bf 90       	pop	r11
 808:	af 90       	pop	r10
 80a:	9f 90       	pop	r9
 80c:	8f 90       	pop	r8
 80e:	7f 90       	pop	r7
 810:	6f 90       	pop	r6
 812:	5f 90       	pop	r5
 814:	4f 90       	pop	r4
 816:	3f 90       	pop	r3
 818:	2f 90       	pop	r2
 81a:	1f 90       	pop	r1
 81c:	0f 90       	pop	r0
 81e:	0f be       	out	0x3f, r0	; 63
 820:	0f 90       	pop	r0
 822:	78 94       	sei
		;config timer for system tick                                                          
		KER_TIMER_INIT                                    ;init timer, int enable ( 12 clocks) 
 824:	00 91 05 01 	lds	r16, 0x0105
 828:	10 91 06 01 	lds	r17, 0x0106
 82c:	00 93 45 00 	sts	0x0045, r16
 830:	10 93 46 00 	sts	0x0046, r17
 834:	01 e0       	ldi	r16, 0x01	; 1
 836:	00 93 6e 00 	sts	0x006E, r16
 83a:	78 94       	sei
		;execute return to jump to highest priority task                                       
		RET                                               ;return from subroutine (  4 clocks) 
 83c:	08 95       	ret

0000083e <Kernel_Init>:
;used registers          : R1, R16, R17, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
;arg registers           : None                                                                
;return registers        : None                                                                
;unsafe access registers : R1, R16, R17, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
Kernel_Init:                                              ;total 38.63uS @8MHz    (309 clocks) 
		CLR   R1                                          ;gcc expects            (  1 clock ) 
 83e:	11 24       	eor	r1, r1
        ;store stack top (for MSP) addr to KerSSZ+OFM_MSPI0:1                                  
		LDI   R16                , lo8(KerSSZ+OFM_MSPS)   ;load low address       (  1 clock ) 
 840:	04 e2       	ldi	r16, 0x24	; 36
		LDI   R17                , hi8(KerSSZ+OFM_MSPS)   ;load high address      (  1 clock ) 
 842:	11 e0       	ldi	r17, 0x01	; 1
        STS   KerSSZ+OFM_MSPI+0  , R16                    ;set mspi to stack top  (  2 clocks) 
 844:	00 93 22 01 	sts	0x0122, r16
		STS   KerSSZ+OFM_MSPI+1  , R17                    ;set mspi to stack top  (  2 clocks) 
 848:	10 93 23 01 	sts	0x0123, r17
		KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 84c:	a0 91 22 01 	lds	r26, 0x0122
 850:	b0 91 23 01 	lds	r27, 0x0123
 854:	0d b7       	in	r16, 0x3d	; 61
 856:	1e b7       	in	r17, 0x3e	; 62
 858:	0d 93       	st	X+, r16
 85a:	1d 93       	st	X+, r17
 85c:	ed 93       	st	X+, r30
 85e:	fd 93       	st	X+, r31
 860:	a0 93 22 01 	sts	0x0122, r26
 864:	b0 93 23 01 	sts	0x0123, r27
		;init timer for kernel                                                                 
		LDI   R24                , 0x03                   ;set prescaler          (  1 clock ) 
 868:	83 e0       	ldi	r24, 0x03	; 3
		LDI   R22                , 0x82                   ;set reload val         (  1 clock ) 
 86a:	62 e8       	ldi	r22, 0x82	; 130
		CALL  Kernel_SysTick_Reg_Init                     ;init timer             ( 92 clocks) 
 86c:	0e 94 cb 02 	call	0x596	; 0x596 <Kernel_SysTick_Reg_Init>
		;create idle task at task_id 0, priority 0xFF (lowest)                                 
		LDI   R24                , lo8(Kernel_Task_Idle)  ;load func addr low     (  1 clock ) 
 870:	8c e9       	ldi	r24, 0x9C	; 156
		LDI   R25                , hi8(Kernel_Task_Idle)  ;load func addr high    (  1 clock ) 
 872:	98 e0       	ldi	r25, 0x08	; 8
		LSR   R25                                         ;right shift to divide  (  1 clock ) 
 874:	96 95       	lsr	r25
		ROR   R24                                         ;rotate right th carry  (  1 clock ) 
 876:	87 95       	ror	r24
		LDI   R22                , 0xFF                   ;set max val            (  1 clock ) 
 878:	6f ef       	ldi	r22, 0xFF	; 255
		CALL  Kernel_Task_Create                          ;init idle task         (163 clocks) 
 87a:	0e 94 1a 03 	call	0x634	; 0x634 <Kernel_Task_Create>
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 87e:	a0 91 22 01 	lds	r26, 0x0122
 882:	b0 91 23 01 	lds	r27, 0x0123
 886:	fe 91       	ld	r31, -X
 888:	ee 91       	ld	r30, -X
 88a:	1e 91       	ld	r17, -X
 88c:	0e 91       	ld	r16, -X
 88e:	0d bf       	out	0x3d, r16	; 61
 890:	1e bf       	out	0x3e, r17	; 62
 892:	a0 93 22 01 	sts	0x0122, r26
 896:	b0 93 23 01 	sts	0x0123, r27
		;execute return to jump to task0, pushed while task init                               
		RET                                               ;return from subroutine (  4 clocks) 
 89a:	08 95       	ret

0000089c <Kernel_Task_Idle>:
;arg registers           : None                                                                
;return registers        : None                                                                
;unsafe access registers : None                                                                
Kernel_Task_Idle:                                         ;total 0.5uS @8MHz      (  4 clocks) 
    _IDLE_LOOP:                                           ;forever loop                        
		RJMP  _IDLE_LOOP                                  ;return from subroutine (  4 clocks) 
 89c:	ff cf       	rjmp	.-2      	; 0x89c <Kernel_Task_Idle>

0000089e <Kernel_Task_Sleep>:
;arg registers           : R25:R24(SleepTime)                                                  
;return registers        : None                                                                
;unsafe access registers : R16, R17, R18, R24, R25, R30(ZL), R31(ZH)                           
Kernel_Task_Sleep:                                        ;total 35.5uS @8MHz     (284 clocks) 
        ;save current context                                                                  
        KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
 89e:	0f 92       	push	r0
 8a0:	0f b6       	in	r0, 0x3f	; 63
 8a2:	f8 94       	cli
 8a4:	0f 92       	push	r0
 8a6:	1f 92       	push	r1
 8a8:	11 24       	eor	r1, r1
 8aa:	2f 92       	push	r2
 8ac:	3f 92       	push	r3
 8ae:	4f 92       	push	r4
 8b0:	5f 92       	push	r5
 8b2:	6f 92       	push	r6
 8b4:	7f 92       	push	r7
 8b6:	8f 92       	push	r8
 8b8:	9f 92       	push	r9
 8ba:	af 92       	push	r10
 8bc:	bf 92       	push	r11
 8be:	cf 92       	push	r12
 8c0:	df 92       	push	r13
 8c2:	ef 92       	push	r14
 8c4:	ff 92       	push	r15
 8c6:	0f 93       	push	r16
 8c8:	1f 93       	push	r17
 8ca:	2f 93       	push	r18
 8cc:	3f 93       	push	r19
 8ce:	4f 93       	push	r20
 8d0:	5f 93       	push	r21
 8d2:	6f 93       	push	r22
 8d4:	7f 93       	push	r23
 8d6:	8f 93       	push	r24
 8d8:	9f 93       	push	r25
 8da:	af 93       	push	r26
 8dc:	bf 93       	push	r27
 8de:	cf 93       	push	r28
 8e0:	df 93       	push	r29
 8e2:	ef 93       	push	r30
 8e4:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 8e6:	ee e0       	ldi	r30, 0x0E	; 14
 8e8:	f1 e0       	ldi	r31, 0x01	; 1
 8ea:	00 91 07 01 	lds	r16, 0x0107
 8ee:	00 0f       	add	r16, r16
 8f0:	e0 0f       	add	r30, r16
 8f2:	00 e0       	ldi	r16, 0x00	; 0
 8f4:	f0 1f       	adc	r31, r16
 8f6:	0d b7       	in	r16, 0x3d	; 61
 8f8:	1e b7       	in	r17, 0x3e	; 62
 8fa:	00 83       	st	Z, r16
 8fc:	11 83       	std	Z+1, r17	; 0x01
		;create next task wakeup time (args R25:R24)                                           
		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 8fe:	e4 e4       	ldi	r30, 0x44	; 68
		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 900:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
 902:	00 91 07 01 	lds	r16, 0x0107
 906:	00 0f       	add	r16, r16
 908:	e0 0f       	add	r30, r16
 90a:	00 e0       	ldi	r16, 0x00	; 0
 90c:	f0 1f       	adc	r31, r16
		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
 90e:	80 83       	st	Z, r24
		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 910:	91 83       	std	Z+1, r25	; 0x01
		;update task scheduler status as blocked                                               
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 912:	e0 e3       	ldi	r30, 0x30	; 48
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 914:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
 916:	00 91 07 01 	lds	r16, 0x0107
 91a:	e0 0f       	add	r30, r16
 91c:	00 e0       	ldi	r16, 0x00	; 0
 91e:	f0 1f       	adc	r31, r16
        LDI   R16                , TASK_BLOCKED           ;block task until cnt=0 (  1 clock ) 
 920:	00 e0       	ldi	r16, 0x00	; 0
		STD   Z+0                , R16                    ;save block flag        (  2 clocks) 
 922:	00 83       	st	Z, r16
		;run scheduler, load next task sp, restore context                                     
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 924:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
 926:	0f ef       	ldi	r16, 0xFF	; 255
 928:	00 93 09 01 	sts	0x0109, r16
 92c:	00 e0       	ldi	r16, 0x00	; 0
 92e:	00 93 0a 01 	sts	0x010A, r16
 932:	98 2f       	mov	r25, r24

00000934 <_KER_SCH_LOOP50>:
 934:	00 93 07 01 	sts	0x0107, r16
 938:	89 2f       	mov	r24, r25
 93a:	e4 e4       	ldi	r30, 0x44	; 68
 93c:	f1 e0       	ldi	r31, 0x01	; 1
 93e:	00 91 07 01 	lds	r16, 0x0107
 942:	00 0f       	add	r16, r16
 944:	e0 0f       	add	r30, r16
 946:	00 e0       	ldi	r16, 0x00	; 0
 948:	f0 1f       	adc	r31, r16
 94a:	00 81       	ld	r16, Z
 94c:	11 81       	ldd	r17, Z+1	; 0x01
 94e:	20 2f       	mov	r18, r16
 950:	21 2b       	or	r18, r17
 952:	59 f0       	breq	.+22     	; 0x96a <_VAL_NULL51>
 954:	81 30       	cpi	r24, 0x01	; 1
 956:	99 f0       	breq	.+38     	; 0x97e <_VAL_NOT_NULL51>
 958:	21 e0       	ldi	r18, 0x01	; 1
 95a:	02 1b       	sub	r16, r18
 95c:	20 e0       	ldi	r18, 0x00	; 0
 95e:	12 0b       	sbc	r17, r18
 960:	00 83       	st	Z, r16
 962:	11 83       	std	Z+1, r17	; 0x01
 964:	20 2f       	mov	r18, r16
 966:	21 2b       	or	r18, r17
 968:	51 f4       	brne	.+20     	; 0x97e <_VAL_NOT_NULL51>

0000096a <_VAL_NULL51>:
 96a:	e0 e3       	ldi	r30, 0x30	; 48
 96c:	f1 e0       	ldi	r31, 0x01	; 1
 96e:	00 91 07 01 	lds	r16, 0x0107
 972:	e0 0f       	add	r30, r16
 974:	00 e0       	ldi	r16, 0x00	; 0
 976:	f0 1f       	adc	r31, r16
 978:	81 e0       	ldi	r24, 0x01	; 1
 97a:	80 83       	st	Z, r24
 97c:	01 c0       	rjmp	.+2      	; 0x980 <_EXIT_SLP_TIME51>

0000097e <_VAL_NOT_NULL51>:
 97e:	80 e0       	ldi	r24, 0x00	; 0

00000980 <_EXIT_SLP_TIME51>:
 980:	81 30       	cpi	r24, 0x01	; 1
 982:	91 f4       	brne	.+36     	; 0x9a8 <_KER_SCH_NEXT50>
 984:	ea e3       	ldi	r30, 0x3A	; 58
 986:	f1 e0       	ldi	r31, 0x01	; 1
 988:	00 e0       	ldi	r16, 0x00	; 0
 98a:	80 91 07 01 	lds	r24, 0x0107
 98e:	e8 0f       	add	r30, r24
 990:	f0 1f       	adc	r31, r16
 992:	80 81       	ld	r24, Z
 994:	00 91 09 01 	lds	r16, 0x0109
 998:	80 17       	cp	r24, r16
 99a:	30 f4       	brcc	.+12     	; 0x9a8 <_KER_SCH_NEXT50>
 99c:	80 93 09 01 	sts	0x0109, r24
 9a0:	00 91 07 01 	lds	r16, 0x0107
 9a4:	00 93 0a 01 	sts	0x010A, r16

000009a8 <_KER_SCH_NEXT50>:
 9a8:	00 91 07 01 	lds	r16, 0x0107
 9ac:	03 95       	inc	r16
 9ae:	10 91 08 01 	lds	r17, 0x0108
 9b2:	01 17       	cp	r16, r17
 9b4:	08 f4       	brcc	.+2      	; 0x9b8 <_KER_SCH_EXIT50>
 9b6:	be cf       	rjmp	.-132    	; 0x934 <_KER_SCH_LOOP50>

000009b8 <_KER_SCH_EXIT50>:
 9b8:	00 91 0a 01 	lds	r16, 0x010A
 9bc:	00 93 07 01 	sts	0x0107, r16
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 9c0:	ee e0       	ldi	r30, 0x0E	; 14
 9c2:	f1 e0       	ldi	r31, 0x01	; 1
 9c4:	00 91 07 01 	lds	r16, 0x0107
 9c8:	00 0f       	add	r16, r16
 9ca:	e0 0f       	add	r30, r16
 9cc:	00 e0       	ldi	r16, 0x00	; 0
 9ce:	f0 1f       	adc	r31, r16
 9d0:	00 81       	ld	r16, Z
 9d2:	11 81       	ldd	r17, Z+1	; 0x01
 9d4:	0d bf       	out	0x3d, r16	; 61
 9d6:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 9d8:	ff 91       	pop	r31
 9da:	ef 91       	pop	r30
 9dc:	df 91       	pop	r29
 9de:	cf 91       	pop	r28
 9e0:	bf 91       	pop	r27
 9e2:	af 91       	pop	r26
 9e4:	9f 91       	pop	r25
 9e6:	8f 91       	pop	r24
 9e8:	7f 91       	pop	r23
 9ea:	6f 91       	pop	r22
 9ec:	5f 91       	pop	r21
 9ee:	4f 91       	pop	r20
 9f0:	3f 91       	pop	r19
 9f2:	2f 91       	pop	r18
 9f4:	1f 91       	pop	r17
 9f6:	0f 91       	pop	r16
 9f8:	ff 90       	pop	r15
 9fa:	ef 90       	pop	r14
 9fc:	df 90       	pop	r13
 9fe:	cf 90       	pop	r12
 a00:	bf 90       	pop	r11
 a02:	af 90       	pop	r10
 a04:	9f 90       	pop	r9
 a06:	8f 90       	pop	r8
 a08:	7f 90       	pop	r7
 a0a:	6f 90       	pop	r6
 a0c:	5f 90       	pop	r5
 a0e:	4f 90       	pop	r4
 a10:	3f 90       	pop	r3
 a12:	2f 90       	pop	r2
 a14:	1f 90       	pop	r1
 a16:	0f 90       	pop	r0
 a18:	0f be       	out	0x3f, r0	; 63
 a1a:	0f 90       	pop	r0
 a1c:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
 a1e:	08 95       	ret

00000a20 <Kernel_Task_Sleep_Time_Get>:
;used registers          : R16, R24, R25, R30(ZL), R31(ZH)                                     
;arg registers           : R24(TaskID)                                                         
;return registers        : R25:R24(SleepTime)                                                  
;unsafe access registers : R16, R24, R25, R30(ZL), R31(ZH)                                     
Kernel_Task_Sleep_Time_Get:                               ;total 1.88uS @8MHz     ( 15 clocks) 
		MOV   R16                , R24                    ;copy                   (  1 clock ) 
 a20:	08 2f       	mov	r16, r24
		LSL   R16                                         ;x2                     (  1 clock ) 
 a22:	00 0f       	add	r16, r16
		LDI   R30                , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 a24:	e4 e4       	ldi	r30, 0x44	; 68
		LDI   R31                , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 a26:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 a28:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 a2a:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 a2c:	f0 1f       	adc	r31, r16
		LD    R24                , Z+                     ;load sleep time        (  2 clocks) 
 a2e:	81 91       	ld	r24, Z+
		LD    R25                , Z                      ;load sleep time        (  2 clocks) 
 a30:	90 81       	ld	r25, Z
		RET                                               ;return from subroutine (  4 clocks) 
 a32:	08 95       	ret

00000a34 <Kernel_Task_Status_Get>:
;used registers          : R16, R24, R30(ZL), R31(ZH)                                          
;arg registers           : R24(TaskID)                                                         
;return registers        : R24(TaskSts)                                                        
;unsafe access registers : R16, R24, R30(ZL), R31(ZH)                                          
Kernel_Task_Status_Get:                                   ;total 1.50uS @8MHz     ( 12 clocks) 
		MOV   R16                , R24                    ;copy                   (  1 clock ) 
 a34:	08 2f       	mov	r16, r24
		LDI   R30                , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 a36:	e0 e3       	ldi	r30, 0x30	; 48
		LDI   R31                , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 a38:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 a3a:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 a3c:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 a3e:	f0 1f       	adc	r31, r16
		LD    R24                , Z                      ;load task status       (  2 clocks) 
 a40:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 a42:	08 95       	ret

00000a44 <Kernel_NTask_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(NTask)                                                          
;unsafe access registers : R24                                                                 
Kernel_NTask_Get:                                         ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                 , KerBase+OFB_NTSK      ;load ntask             (  2 clock ) 
 a44:	80 91 08 01 	lds	r24, 0x0108
		RET                                               ;return from subroutine (  4 clocks) 
 a48:	08 95       	ret

00000a4a <Kernel_Task_Prio_Get>:
;arg registers           : R24(TaskID)                                                         
;return registers        : R24(TaskPriority)                                                   
;unsafe access registers : R16, R24, R30(ZL), R31(ZH)                                          
Kernel_Task_Prio_Get:                                     ;total 1.50uS @8MHz     ( 12 clocks) 
		;get priority of the task id, arg (task_id->R24), return R24                           
		MOV   R16                , R24                    ;copy task_id           (  1 clock ) 
 a4a:	08 2f       	mov	r16, r24
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 a4c:	ea e3       	ldi	r30, 0x3A	; 58
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 a4e:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
 a50:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;clear reg              (  1 clock ) 
 a52:	00 e0       	ldi	r16, 0x00	; 0
		ADC   ZH                 , R16                    ;add high byte+carry    (  1 clock ) 
 a54:	f0 1f       	adc	r31, r16
		LD    R24                , Z                      ;load priority          (  2 clocks) 
 a56:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 a58:	08 95       	ret

00000a5a <Kernel_Lowest_Prio_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(LowestPriorityVal)                                              
;unsafe access registers : R24                                                                 
Kernel_Lowest_Prio_Get:                                   ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
 a5a:	80 91 09 01 	lds	r24, 0x0109
		RET                                               ;return from subroutine (  4 clocks) 
 a5e:	08 95       	ret

00000a60 <Kernel_High_Prio_Task_ID_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(HighstPriorityTaskID)->UserTaskID (Excluding Idle Task)         
;unsafe access registers : R24                                                                 
Kernel_High_Prio_Task_ID_Get:                             ;total 0.88uS @8MHz     (  7 clocks) 
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 a60:	80 91 0a 01 	lds	r24, 0x010A
		DEC   R24                                         ;decrement by 1         (  1 clock ) 
 a64:	8a 95       	dec	r24
		RET                                               ;return from subroutine (  4 clocks) 
 a66:	08 95       	ret

00000a68 <Kernel_Abs_High_Prio_Task_ID_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(HighstPriorityTaskID)->AbsoluteTaskID (Including Idle Task)     
;unsafe access registers : R24                                                                 
Kernel_Abs_High_Prio_Task_ID_Get:                         ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 a68:	80 91 0a 01 	lds	r24, 0x010A
		RET                                               ;return from subroutine (  4 clocks) 
 a6c:	08 95       	ret

00000a6e <Kernel_CPU_Usage_Get>:
;arg registers           : None                                                                
;return registers        : R24(CurrentCpuUsage)->In percentage                                 
;unsafe access registers : R24                                                                 
Kernel_CPU_Usage_Get:                                     ;total 0.75uS @8MHz     (  6 clocks) 
		;get cpu usage, return R24                                                             
		LDS   R24                , KerBase+OFB_USAGE      ;load cpu usage         (  2 clocks) 
 a6e:	80 91 0d 01 	lds	r24, 0x010D
		RET                                               ;return from subroutine (  4 clocks) 
 a72:	08 95       	ret

00000a74 <Debug_Init>:


;;===================================debug init starting====================================;; 
Debug_Init:                                               ;total 2.38uS @8MHz     ( 19 clocks) 
        ;init registers for UART0 (Arg R25:R24->UBRRH:UBRRL)                                   
		LDI   R16                , (1<<1)                 ;mask U2x               (  1 clock ) 
 a74:	02 e0       	ldi	r16, 0x02	; 2
		STS   SRUCSR0A           , R16                    ;load val to UCSR0A     (  2 clocks) 
 a76:	00 93 c0 00 	sts	0x00C0, r16
		MOV   R16                , R25                    ;copy R25->baud rate H  (  1 clock ) 
 a7a:	09 2f       	mov	r16, r25
		STS   SRUBRR0H           , R16                    ;load val to UBRR0H     (  2 clocks) 
 a7c:	00 93 c5 00 	sts	0x00C5, r16
		MOV   R16                , R24                    ;copy R24->baud rate L  (  1 clock ) 
 a80:	08 2f       	mov	r16, r24
		STS   SRUBRR0L           , R16                    ;load val to UBRR0L     (  2 clocks) 
 a82:	00 93 c4 00 	sts	0x00C4, r16
		LDI   R16                , (1<<1)|(1<<2)          ;config 8 data bit      (  1 clock ) 
 a86:	06 e0       	ldi	r16, 0x06	; 6
		STS   SRUCSR0C           , R16                    ;load val to UCSR0C     (  2 clocks) 
 a88:	00 93 c2 00 	sts	0x00C2, r16
		LDI   R16                , (1<<3)                 ;enable tx              (  1 clock ) 
 a8c:	08 e0       	ldi	r16, 0x08	; 8
		STS   SRUCSR0B           , R16                    ;load val to UCSR0B     (  2 clocks) 
 a8e:	00 93 c1 00 	sts	0x00C1, r16
        RET                                               ;return from subroutine (  4 clocks) 
 a92:	08 95       	ret

00000a94 <Debug_Tx_Byte>:


;;====================================debug tx starting=====================================;; 
Debug_Tx_Byte:                                            ;total 2.00uS+LT @8MHz  ( 16 clocks) 
		;write single byte to data register (Arg R24)                                          
		PUSH  R16                                         ;save reg               (  2 clocks) 
 a94:	0f 93       	push	r16
		STS   SRUDR0             , R24                    ;load val to UDR0       (  2 clocks) 
 a96:	80 93 c6 00 	sts	0x00C6, r24

00000a9a <__UDRE0_CLEARED>:
                                                                                               
    __UDRE0_CLEARED:                                      ;undefined loop wrt ck               
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16     (  2 clocks) 
 a9a:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x05                   ;skip if UDRE0 is set   (  2 clocks) 
 a9e:	05 ff       	sbrs	r16, 5
		RJMP  __UDRE0_CLEARED                             ;wait until UDRE0 is set(  2 clocks) 
 aa0:	fc cf       	rjmp	.-8      	; 0xa9a <__UDRE0_CLEARED>
		POP   R16                                         ;restore reg            (  2 clocks) 
 aa2:	0f 91       	pop	r16
        RET                                               ;return from subroutine (  4 clocks) 
 aa4:	08 95       	ret

00000aa6 <Debug_Tx_Word>:


;;==================================debug tx word starting==================================;; 
Debug_Tx_Word:                                            ;total 2.00uS+LT @8MHz  ( 16 clocks) 
		;write 2 bytes, (Arg R24, R25), Args retained                                          
		PUSH  R24                                         ;save reg               (  2 clocks) 
 aa6:	8f 93       	push	r24
		MOV   R24                , R25                    ;copy reg               (  1 clock ) 
 aa8:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte                               ;send via uart          ( 21 clocks) 
 aaa:	0e 94 4a 05 	call	0xa94	; 0xa94 <Debug_Tx_Byte>
        POP   R24                                         ;restore reg            (  2 clocks) 
 aae:	8f 91       	pop	r24
		CALL  Debug_Tx_Byte                               ;send via uart          ( 21 clocks) 
 ab0:	0e 94 4a 05 	call	0xa94	; 0xa94 <Debug_Tx_Byte>
        RET                                               ;return from subroutine (  4 clocks) 
 ab4:	08 95       	ret

00000ab6 <Debug_Tx_Byte_Conf>:


;;================================debug tx confirm starting=================================;; 
Debug_Tx_Byte_Conf:                                       ;total 2.63uS+LT @8MHz  ( 21 clocks) 
        ;write 1 byte, (Arg R24), Args retained                                                
		PUSH  R16                                         ;save reg               (  2 clocks) 
 ab6:	0f 93       	push	r16
		STS   SRUDR0             , R24                    ;load val to UDR0,      (  2 clocks) 
 ab8:	80 93 c6 00 	sts	0x00C6, r24

00000abc <__TXC0_CLEARED>:
    __TXC0_CLEARED:                                                                            
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,    (  2 clocks) 
 abc:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x06                   ;skip if TXC0 is set,   (  2 clocks) 
 ac0:	06 ff       	sbrs	r16, 6
		RJMP  __TXC0_CLEARED                              ;wait until TXC0 is set (  2 clocks) 
 ac2:	fc cf       	rjmp	.-8      	; 0xabc <__TXC0_CLEARED>
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,    (  2 clocks) 
 ac4:	00 91 c0 00 	lds	r16, 0x00C0
		ORI   R16                , (1<<6)                 ;mask bit 6,            (  1 clock ) 
 ac8:	00 64       	ori	r16, 0x40	; 64
		STS   SRUCSR0A           , R16                    ;write reg with bit msk (  2 clocks) 
 aca:	00 93 c0 00 	sts	0x00C0, r16
		POP   R16                                         ;restore reg            (  2 clocks) 
 ace:	0f 91       	pop	r16
        RET                                               ;return from subroutine (  4 clocks) 
 ad0:	08 95       	ret

00000ad2 <Debug_Tx_Word_Conf>:


;;==============================debug tx word confirm starting==============================;; 
Debug_Tx_Word_Conf:                                       ;total 6.38uS+LT @8MHz  ( 51 clocks) 
        ;write 2 bytes, (Arg R24, R25), Args retained                                          
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 ad2:	0e 94 5b 05 	call	0xab6	; 0xab6 <Debug_Tx_Byte_Conf>
		PUSH  R24                                         ;save reg               (  2 clocks) 
 ad6:	8f 93       	push	r24
		MOV   R24                , R25                    ;copy R25 to R24        (  1 clock ) 
 ad8:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 ada:	0e 94 5b 05 	call	0xab6	; 0xab6 <Debug_Tx_Byte_Conf>
		POP   R24                                         ;restore reg            (  2 clocks) 
 ade:	8f 91       	pop	r24
        RET                                               ;return from subroutine (  4 clocks) 
 ae0:	08 95       	ret

00000ae2 <Debug_Tx_DWord_Conf>:


;;==============================debug tx dword confirm starting=============================;; 
Debug_Tx_DWord_Conf:                                      ;total 12.38uS+LT @8MHz ( 99 clocks) 
        ;write 4 bytes, (Arg R22-R25), Args retained                                           
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks) 
 ae2:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R22                    ;copy R22 to R24          (1 clock ) 
 ae6:	86 2f       	mov	r24, r22
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 ae8:	0e 94 5b 05 	call	0xab6	; 0xab6 <Debug_Tx_Byte_Conf>
		MOV   R24                , R23                    ;copy R23 to R24          (1 clock ) 
 aec:	87 2f       	mov	r24, r23
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 aee:	0e 94 5b 05 	call	0xab6	; 0xab6 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24              (2 clocks) 
 af2:	80 91 4a 00 	lds	r24, 0x004A
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 af6:	0e 94 5b 05 	call	0xab6	; 0xab6 <Debug_Tx_Byte_Conf>
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks) 
 afa:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R25                    ;copy R22 to R24          (1 clock ) 
 afe:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 b00:	0e 94 5b 05 	call	0xab6	; 0xab6 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24 val,         (2 clocks) 
 b04:	80 91 4a 00 	lds	r24, 0x004A
        RET                                               ;return from subroutine,  (4 clocks) 
 b08:	08 95       	ret

00000b0a <Debug_Tx_From_RAM>:


;;=============================debug tx confirm from ram starting===========================;; 
Debug_Tx_From_RAM:                                        ;total 4.38uS+LT @8MHz  ( 35 clocks) 
        ;print data from RAM address (Arg R24-R25)                                             
		MOV   R16                , R30                    ;copy R30 to R16          (1 clock ) 
 b0a:	0e 2f       	mov	r16, r30
		MOV   R17                , R31                    ;copy R31 to R17          (1 clock ) 
 b0c:	1f 2f       	mov	r17, r31
		MOV   R18                , R24                    ;copy R24 to R18          (1 clock ) 
 b0e:	28 2f       	mov	r18, r24
		MOV   R30                , R24                    ;copy R22 to R24          (1 clock ) 
 b10:	e8 2f       	mov	r30, r24
		MOV   R31                , R25                    ;copy R22 to R24          (1 clock ) 
 b12:	f9 2f       	mov	r31, r25
		LD    R24                , Z                      ;load val to R24          (2 clocks) 
 b14:	80 81       	ld	r24, Z
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 b16:	0e 94 5b 05 	call	0xab6	; 0xab6 <Debug_Tx_Byte_Conf>
		MOV   R30                , R16                    ;copy R16 to R30          (1 clock ) 
 b1a:	e0 2f       	mov	r30, r16
		MOV   R31                , R17                    ;copy R17 to R31          (1 clock ) 
 b1c:	f1 2f       	mov	r31, r17
		MOV   R24                , R18                    ;copy R18 to R24          (1 clock ) 
 b1e:	82 2f       	mov	r24, r18
        RET                                               ;return from subroutine,  (4 clocks) 
 b20:	08 95       	ret

00000b22 <Debug_Tx_RAM_Area>:

;;=============================debug tx confirm ram area starting===========================;; 
Debug_Tx_RAM_Area:                                        ;5.5uS+LT x R22 @8MHz   ( 44 clocks) 
        ;print data from RAM address (arguments R24:R25, R22)                                  
	__DUMP_BYTES:                                                                              
	    CALL  Debug_Tx_From_RAM                           ;send via uart from ram              
 b22:	0e 94 85 05 	call	0xb0a	; 0xb0a <Debug_Tx_From_RAM>
		SUBI  R24                , 0x01                   ;decrement from LSByte               
 b26:	81 50       	subi	r24, 0x01	; 1
        SBCI  R25                , 0x00                   ;decrement if carry                  
 b28:	90 40       	sbci	r25, 0x00	; 0
		SUBI  R22                , 0x01                   ;decrement                           
 b2a:	61 50       	subi	r22, 0x01	; 1
		BRNE  __DUMP_BYTES                                                                     
 b2c:	d1 f7       	brne	.-12     	; 0xb22 <Debug_Tx_RAM_Area>
        RET                                               ;return from subroutine,  (4 clocks) 
 b2e:	08 95       	ret

00000b30 <__udivmodsi4>:
 b30:	a1 e2       	ldi	r26, 0x21	; 33
 b32:	1a 2e       	mov	r1, r26
 b34:	aa 1b       	sub	r26, r26
 b36:	bb 1b       	sub	r27, r27
 b38:	fd 01       	movw	r30, r26
 b3a:	0d c0       	rjmp	.+26     	; 0xb56 <__udivmodsi4_ep>

00000b3c <__udivmodsi4_loop>:
 b3c:	aa 1f       	adc	r26, r26
 b3e:	bb 1f       	adc	r27, r27
 b40:	ee 1f       	adc	r30, r30
 b42:	ff 1f       	adc	r31, r31
 b44:	a2 17       	cp	r26, r18
 b46:	b3 07       	cpc	r27, r19
 b48:	e4 07       	cpc	r30, r20
 b4a:	f5 07       	cpc	r31, r21
 b4c:	20 f0       	brcs	.+8      	; 0xb56 <__udivmodsi4_ep>
 b4e:	a2 1b       	sub	r26, r18
 b50:	b3 0b       	sbc	r27, r19
 b52:	e4 0b       	sbc	r30, r20
 b54:	f5 0b       	sbc	r31, r21

00000b56 <__udivmodsi4_ep>:
 b56:	66 1f       	adc	r22, r22
 b58:	77 1f       	adc	r23, r23
 b5a:	88 1f       	adc	r24, r24
 b5c:	99 1f       	adc	r25, r25
 b5e:	1a 94       	dec	r1
 b60:	69 f7       	brne	.-38     	; 0xb3c <__udivmodsi4_loop>
 b62:	60 95       	com	r22
 b64:	70 95       	com	r23
 b66:	80 95       	com	r24
 b68:	90 95       	com	r25
 b6a:	9b 01       	movw	r18, r22
 b6c:	ac 01       	movw	r20, r24
 b6e:	bd 01       	movw	r22, r26
 b70:	cf 01       	movw	r24, r30
 b72:	08 95       	ret

00000b74 <_exit>:
 b74:	f8 94       	cli

00000b76 <__stop_program>:
 b76:	ff cf       	rjmp	.-2      	; 0xb76 <__stop_program>
