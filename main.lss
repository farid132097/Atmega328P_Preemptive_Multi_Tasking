
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000556  00800100  00800100  00000a6a  2**0
                  ALLOC
  2 .stab         00000b58  00000000  00000000  00000a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000006c  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00001630  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000bd  00000000  00000000  00001670  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000188  00000000  00000000  0000172d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000080  00000000  00000000  000018b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000391  00000000  00000000  00001935  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001cc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000010e  00000000  00000000  00001d88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 c1 01 	jmp	0x382	; 0x382 <__vector_16>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	00 00       	nop
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 00       	nop
  76:	00 00       	nop
  78:	00 00       	nop
  7a:	00 00       	nop
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 00       	nop
  82:	00 00       	nop
  84:	00 00       	nop
  86:	00 00       	nop
  88:	7c c1       	rjmp	.+760    	; 0x382 <__vector_16>

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61
  96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  9a:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:
 

    
int main(void) {
    
	Kernel_Init();
  a2:	0e 94 7d 03 	call	0x6fa	; 0x6fa <Kernel_Init>

	Kernel_Task_Create(Tasks_Task1,  3);
  a6:	8b e9       	ldi	r24, 0x9B	; 155
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	63 e0       	ldi	r22, 0x03	; 3
  ac:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task2,  0);
  b0:	85 e7       	ldi	r24, 0x75	; 117
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task3,  2);
  ba:	8f e4       	ldi	r24, 0x4F	; 79
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	62 e0       	ldi	r22, 0x02	; 2
  c0:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task4,  1);
  c4:	89 e2       	ldi	r24, 0x29	; 41
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task5,  4);
  ce:	83 e0       	ldi	r24, 0x03	; 3
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	64 e0       	ldi	r22, 0x04	; 4
  d4:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task6,  6);
  d8:	83 ee       	ldi	r24, 0xE3	; 227
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	66 e0       	ldi	r22, 0x06	; 6
  de:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task7,  5);
  e2:	83 ec       	ldi	r24, 0xC3	; 195
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	65 e0       	ldi	r22, 0x05	; 5
  e8:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task8,  8);
  ec:	83 ea       	ldi	r24, 0xA3	; 163
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	68 e0       	ldi	r22, 0x08	; 8
  f2:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task9,  7);
  f6:	83 e8       	ldi	r24, 0x83	; 131
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	67 e0       	ldi	r22, 0x07	; 7
  fc:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <Kernel_Task_Create>
	
	Kernel_Start_Tasks();
 100:	0e 94 45 03 	call	0x68a	; 0x68a <Kernel_Start_Tasks>
 104:	ff cf       	rjmp	.-2      	; 0x104 <SRUDR0+0x3e>

00000106 <Tasks_Task9>:
  }
}

void Tasks_Task9(void){
  
  Debug_Init(0);
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 9b 04 	call	0x936	; 0x936 <Debug_Init>
  
  while(1){
    
	  Debug_Tx_Byte(9);
 10e:	89 e0       	ldi	r24, 0x09	; 9
 110:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(9));
 114:	89 e0       	ldi	r24, 0x09	; 9
 116:	0e 94 75 04 	call	0x8ea	; 0x8ea <Kernel_Task_Sleep_Time_Get>
 11a:	0e 94 b4 04 	call	0x968	; 0x968 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(9));
 11e:	89 e0       	ldi	r24, 0x09	; 9
 120:	0e 94 7f 04 	call	0x8fe	; 0x8fe <Kernel_Task_Status_Get>
 124:	80 5e       	subi	r24, 0xE0	; 224
 126:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 12a:	0e 94 98 04 	call	0x930	; 0x930 <Kernel_Abs_High_Prio_Task_ID_Get>
 12e:	80 5f       	subi	r24, 0xF0	; 240
 130:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 134:	0e 94 91 04 	call	0x922	; 0x922 <Kernel_Lowest_Prio_Get>
 138:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Kernel_Task_Sleep(90);
 13c:	8a e5       	ldi	r24, 0x5A	; 90
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 b4 03 	call	0x768	; 0x768 <Kernel_Task_Sleep>
 144:	e4 cf       	rjmp	.-56     	; 0x10e <Tasks_Task9+0x8>

00000146 <Tasks_Task8>:
  }
}

void Tasks_Task8(void){
  
  Debug_Init(0);
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 9b 04 	call	0x936	; 0x936 <Debug_Init>
  
  while(1){
    
	  Debug_Tx_Byte(8);
 14e:	88 e0       	ldi	r24, 0x08	; 8
 150:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(8));
 154:	88 e0       	ldi	r24, 0x08	; 8
 156:	0e 94 75 04 	call	0x8ea	; 0x8ea <Kernel_Task_Sleep_Time_Get>
 15a:	0e 94 b4 04 	call	0x968	; 0x968 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(8));
 15e:	88 e0       	ldi	r24, 0x08	; 8
 160:	0e 94 7f 04 	call	0x8fe	; 0x8fe <Kernel_Task_Status_Get>
 164:	80 5e       	subi	r24, 0xE0	; 224
 166:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 16a:	0e 94 98 04 	call	0x930	; 0x930 <Kernel_Abs_High_Prio_Task_ID_Get>
 16e:	80 5f       	subi	r24, 0xF0	; 240
 170:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 174:	0e 94 91 04 	call	0x922	; 0x922 <Kernel_Lowest_Prio_Get>
 178:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Kernel_Task_Sleep(80);
 17c:	80 e5       	ldi	r24, 0x50	; 80
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 b4 03 	call	0x768	; 0x768 <Kernel_Task_Sleep>
 184:	e4 cf       	rjmp	.-56     	; 0x14e <Tasks_Task8+0x8>

00000186 <Tasks_Task7>:
  }
}

void Tasks_Task7(void){
  
  Debug_Init(0);
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 9b 04 	call	0x936	; 0x936 <Debug_Init>
  
  while(1){
    
	  Debug_Tx_Byte(7);
 18e:	87 e0       	ldi	r24, 0x07	; 7
 190:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(7));
 194:	87 e0       	ldi	r24, 0x07	; 7
 196:	0e 94 75 04 	call	0x8ea	; 0x8ea <Kernel_Task_Sleep_Time_Get>
 19a:	0e 94 b4 04 	call	0x968	; 0x968 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(7));
 19e:	87 e0       	ldi	r24, 0x07	; 7
 1a0:	0e 94 7f 04 	call	0x8fe	; 0x8fe <Kernel_Task_Status_Get>
 1a4:	80 5e       	subi	r24, 0xE0	; 224
 1a6:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 1aa:	0e 94 98 04 	call	0x930	; 0x930 <Kernel_Abs_High_Prio_Task_ID_Get>
 1ae:	80 5f       	subi	r24, 0xF0	; 240
 1b0:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 1b4:	0e 94 91 04 	call	0x922	; 0x922 <Kernel_Lowest_Prio_Get>
 1b8:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Kernel_Task_Sleep(70);
 1bc:	86 e4       	ldi	r24, 0x46	; 70
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 b4 03 	call	0x768	; 0x768 <Kernel_Task_Sleep>
 1c4:	e4 cf       	rjmp	.-56     	; 0x18e <Tasks_Task7+0x8>

000001c6 <Tasks_Task6>:
  }
}

void Tasks_Task6(void){
  
  Debug_Init(0);
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 9b 04 	call	0x936	; 0x936 <Debug_Init>
  
  while(1){
    
    Debug_Tx_Byte(6);
 1ce:	86 e0       	ldi	r24, 0x06	; 6
 1d0:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(6));
 1d4:	86 e0       	ldi	r24, 0x06	; 6
 1d6:	0e 94 75 04 	call	0x8ea	; 0x8ea <Kernel_Task_Sleep_Time_Get>
 1da:	0e 94 b4 04 	call	0x968	; 0x968 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(6));
 1de:	86 e0       	ldi	r24, 0x06	; 6
 1e0:	0e 94 7f 04 	call	0x8fe	; 0x8fe <Kernel_Task_Status_Get>
 1e4:	80 5e       	subi	r24, 0xE0	; 224
 1e6:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 1ea:	0e 94 98 04 	call	0x930	; 0x930 <Kernel_Abs_High_Prio_Task_ID_Get>
 1ee:	80 5f       	subi	r24, 0xF0	; 240
 1f0:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 1f4:	0e 94 91 04 	call	0x922	; 0x922 <Kernel_Lowest_Prio_Get>
 1f8:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Kernel_Task_Sleep(60);
 1fc:	8c e3       	ldi	r24, 0x3C	; 60
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 b4 03 	call	0x768	; 0x768 <Kernel_Task_Sleep>
 204:	e4 cf       	rjmp	.-56     	; 0x1ce <Tasks_Task6+0x8>

00000206 <Tasks_Task5>:
    Kernel_Task_Sleep(40);
	
  }
}

void Tasks_Task5(void){
 206:	1f 93       	push	r17
  
  DDRC |= (1<<5);
 208:	3d 9a       	sbi	0x07, 5	; 7

  Debug_Init(0);
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 9b 04 	call	0x936	; 0x936 <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<5);
 212:	10 e2       	ldi	r17, 0x20	; 32
 214:	88 b1       	in	r24, 0x08	; 8
 216:	81 27       	eor	r24, r17
 218:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(5);
 21a:	85 e0       	ldi	r24, 0x05	; 5
 21c:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(5));
 220:	85 e0       	ldi	r24, 0x05	; 5
 222:	0e 94 75 04 	call	0x8ea	; 0x8ea <Kernel_Task_Sleep_Time_Get>
 226:	0e 94 b4 04 	call	0x968	; 0x968 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(5));
 22a:	85 e0       	ldi	r24, 0x05	; 5
 22c:	0e 94 7f 04 	call	0x8fe	; 0x8fe <Kernel_Task_Status_Get>
 230:	80 5e       	subi	r24, 0xE0	; 224
 232:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 236:	0e 94 98 04 	call	0x930	; 0x930 <Kernel_Abs_High_Prio_Task_ID_Get>
 23a:	80 5f       	subi	r24, 0xF0	; 240
 23c:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 240:	0e 94 91 04 	call	0x922	; 0x922 <Kernel_Lowest_Prio_Get>
 244:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Kernel_Task_Sleep(50);
 248:	82 e3       	ldi	r24, 0x32	; 50
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 b4 03 	call	0x768	; 0x768 <Kernel_Task_Sleep>
 250:	e1 cf       	rjmp	.-62     	; 0x214 <Tasks_Task5+0xe>

00000252 <Tasks_Task4>:
    Kernel_Task_Sleep(30);
	
  }
}

void Tasks_Task4(void){
 252:	1f 93       	push	r17
  
  DDRC |= (1<<4);
 254:	3c 9a       	sbi	0x07, 4	; 7

  Debug_Init(0);
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 9b 04 	call	0x936	; 0x936 <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<4);
 25e:	10 e1       	ldi	r17, 0x10	; 16
 260:	88 b1       	in	r24, 0x08	; 8
 262:	81 27       	eor	r24, r17
 264:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(4);
 266:	84 e0       	ldi	r24, 0x04	; 4
 268:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(4));
 26c:	84 e0       	ldi	r24, 0x04	; 4
 26e:	0e 94 75 04 	call	0x8ea	; 0x8ea <Kernel_Task_Sleep_Time_Get>
 272:	0e 94 b4 04 	call	0x968	; 0x968 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(4));
 276:	84 e0       	ldi	r24, 0x04	; 4
 278:	0e 94 7f 04 	call	0x8fe	; 0x8fe <Kernel_Task_Status_Get>
 27c:	80 5e       	subi	r24, 0xE0	; 224
 27e:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 282:	0e 94 98 04 	call	0x930	; 0x930 <Kernel_Abs_High_Prio_Task_ID_Get>
 286:	80 5f       	subi	r24, 0xF0	; 240
 288:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 28c:	0e 94 91 04 	call	0x922	; 0x922 <Kernel_Lowest_Prio_Get>
 290:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Kernel_Task_Sleep(40);
 294:	88 e2       	ldi	r24, 0x28	; 40
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 b4 03 	call	0x768	; 0x768 <Kernel_Task_Sleep>
 29c:	e1 cf       	rjmp	.-62     	; 0x260 <Tasks_Task4+0xe>

0000029e <Tasks_Task3>:
    Kernel_Task_Sleep(20);
	
  }
}

void Tasks_Task3(void){
 29e:	1f 93       	push	r17
  
  DDRC |= (1<<3);
 2a0:	3b 9a       	sbi	0x07, 3	; 7

  Debug_Init(0);
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 9b 04 	call	0x936	; 0x936 <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<3);
 2aa:	18 e0       	ldi	r17, 0x08	; 8
 2ac:	88 b1       	in	r24, 0x08	; 8
 2ae:	81 27       	eor	r24, r17
 2b0:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(3);
 2b2:	83 e0       	ldi	r24, 0x03	; 3
 2b4:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(3));
 2b8:	83 e0       	ldi	r24, 0x03	; 3
 2ba:	0e 94 75 04 	call	0x8ea	; 0x8ea <Kernel_Task_Sleep_Time_Get>
 2be:	0e 94 b4 04 	call	0x968	; 0x968 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(3));
 2c2:	83 e0       	ldi	r24, 0x03	; 3
 2c4:	0e 94 7f 04 	call	0x8fe	; 0x8fe <Kernel_Task_Status_Get>
 2c8:	80 5e       	subi	r24, 0xE0	; 224
 2ca:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 2ce:	0e 94 98 04 	call	0x930	; 0x930 <Kernel_Abs_High_Prio_Task_ID_Get>
 2d2:	80 5f       	subi	r24, 0xF0	; 240
 2d4:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 2d8:	0e 94 91 04 	call	0x922	; 0x922 <Kernel_Lowest_Prio_Get>
 2dc:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Kernel_Task_Sleep(30);
 2e0:	8e e1       	ldi	r24, 0x1E	; 30
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 b4 03 	call	0x768	; 0x768 <Kernel_Task_Sleep>
 2e8:	e1 cf       	rjmp	.-62     	; 0x2ac <Tasks_Task3+0xe>

000002ea <Tasks_Task2>:
    Kernel_Task_Sleep(10);
    
  }
}

void Tasks_Task2(void){
 2ea:	1f 93       	push	r17
  
  DDRC |= (1<<2);
 2ec:	3a 9a       	sbi	0x07, 2	; 7

  Debug_Init(0);
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 9b 04 	call	0x936	; 0x936 <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<2);
 2f6:	14 e0       	ldi	r17, 0x04	; 4
 2f8:	88 b1       	in	r24, 0x08	; 8
 2fa:	81 27       	eor	r24, r17
 2fc:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(2);
 2fe:	82 e0       	ldi	r24, 0x02	; 2
 300:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(2));
 304:	82 e0       	ldi	r24, 0x02	; 2
 306:	0e 94 75 04 	call	0x8ea	; 0x8ea <Kernel_Task_Sleep_Time_Get>
 30a:	0e 94 b4 04 	call	0x968	; 0x968 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(2));
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	0e 94 7f 04 	call	0x8fe	; 0x8fe <Kernel_Task_Status_Get>
 314:	80 5e       	subi	r24, 0xE0	; 224
 316:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 31a:	0e 94 98 04 	call	0x930	; 0x930 <Kernel_Abs_High_Prio_Task_ID_Get>
 31e:	80 5f       	subi	r24, 0xF0	; 240
 320:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 324:	0e 94 91 04 	call	0x922	; 0x922 <Kernel_Lowest_Prio_Get>
 328:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Kernel_Task_Sleep(20);
 32c:	84 e1       	ldi	r24, 0x14	; 20
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 b4 03 	call	0x768	; 0x768 <Kernel_Task_Sleep>
 334:	e1 cf       	rjmp	.-62     	; 0x2f8 <Tasks_Task2+0xe>

00000336 <Tasks_Task1>:
#include <util/delay.h>
#include "kernel.h"
#include "tasks.h"
#include "debug.h"

void Tasks_Task1(void){
 336:	1f 93       	push	r17
  
  DDRC |= (1<<1);
 338:	39 9a       	sbi	0x07, 1	; 7

  Debug_Init(0);
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	0e 94 9b 04 	call	0x936	; 0x936 <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<1);
 342:	12 e0       	ldi	r17, 0x02	; 2
 344:	88 b1       	in	r24, 0x08	; 8
 346:	81 27       	eor	r24, r17
 348:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(1);
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	0e 94 75 04 	call	0x8ea	; 0x8ea <Kernel_Task_Sleep_Time_Get>
 356:	0e 94 b4 04 	call	0x968	; 0x968 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	0e 94 7f 04 	call	0x8fe	; 0x8fe <Kernel_Task_Status_Get>
 360:	80 5e       	subi	r24, 0xE0	; 224
 362:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 366:	0e 94 98 04 	call	0x930	; 0x930 <Kernel_Abs_High_Prio_Task_ID_Get>
 36a:	80 5f       	subi	r24, 0xF0	; 240
 36c:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 370:	0e 94 91 04 	call	0x922	; 0x922 <Kernel_Lowest_Prio_Get>
 374:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
    Kernel_Task_Sleep(10);
 378:	8a e0       	ldi	r24, 0x0A	; 10
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 b4 03 	call	0x768	; 0x768 <Kernel_Task_Sleep>
 380:	e1 cf       	rjmp	.-62     	; 0x344 <Tasks_Task1+0xe>

00000382 <__vector_16>:


;;=================================ISR execution starting===================================;; 
.global  __vector_16                                                                           
    __vector_16:                                          ;total 26.13uS @8MHz    (211 clocks) 
	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 382:	5d 9a       	sbi	0x0b, 5	; 11
        KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 384:	0f 92       	push	r0
 386:	0f b6       	in	r0, 0x3f	; 63
 388:	0f 92       	push	r0
 38a:	1f 92       	push	r1
 38c:	11 24       	eor	r1, r1
 38e:	2f 92       	push	r2
 390:	3f 92       	push	r3
 392:	4f 92       	push	r4
 394:	5f 92       	push	r5
 396:	6f 92       	push	r6
 398:	7f 92       	push	r7
 39a:	8f 92       	push	r8
 39c:	9f 92       	push	r9
 39e:	af 92       	push	r10
 3a0:	bf 92       	push	r11
 3a2:	cf 92       	push	r12
 3a4:	df 92       	push	r13
 3a6:	ef 92       	push	r14
 3a8:	ff 92       	push	r15
 3aa:	0f 93       	push	r16
 3ac:	1f 93       	push	r17
 3ae:	2f 93       	push	r18
 3b0:	3f 93       	push	r19
 3b2:	4f 93       	push	r20
 3b4:	5f 93       	push	r21
 3b6:	6f 93       	push	r22
 3b8:	7f 93       	push	r23
 3ba:	8f 93       	push	r24
 3bc:	9f 93       	push	r25
 3be:	af 93       	push	r26
 3c0:	bf 93       	push	r27
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	ef 93       	push	r30
 3c8:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 3ca:	1d b7       	in	r17, 0x3d	; 61
 3cc:	2e b7       	in	r18, 0x3e	; 62
 3ce:	ec e0       	ldi	r30, 0x0C	; 12
 3d0:	f1 e0       	ldi	r31, 0x01	; 1
 3d2:	00 91 07 01 	lds	r16, 0x0107
 3d6:	00 0f       	add	r16, r16
 3d8:	e0 0f       	add	r30, r16
 3da:	00 e0       	ldi	r16, 0x00	; 0
 3dc:	f0 1f       	adc	r31, r16
 3de:	10 83       	st	Z, r17
 3e0:	21 83       	std	Z+1, r18	; 0x01
		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 3e2:	00 91 06 01 	lds	r16, 0x0106
 3e6:	00 93 46 00 	sts	0x0046, r16
		KER_TICK_INCREMENT                                ;increment tick counter ( 27 clocks) 
 3ea:	00 91 00 01 	lds	r16, 0x0100
 3ee:	03 95       	inc	r16
 3f0:	00 93 00 01 	sts	0x0100, r16
 3f4:	10 e0       	ldi	r17, 0x00	; 0
 3f6:	00 91 01 01 	lds	r16, 0x0101
 3fa:	01 1f       	adc	r16, r17
 3fc:	00 93 01 01 	sts	0x0101, r16
 400:	00 91 02 01 	lds	r16, 0x0102
 404:	01 1f       	adc	r16, r17
 406:	00 93 02 01 	sts	0x0102, r16
 40a:	00 91 03 01 	lds	r16, 0x0103
 40e:	01 1f       	adc	r16, r17
 410:	00 93 03 01 	sts	0x0103, r16
 414:	00 91 04 01 	lds	r16, 0x0104
 418:	01 1f       	adc	r16, r17
 41a:	00 93 04 01 	sts	0x0104, r16
		LDI    R24               , SCH_MODE_HANDLER       ;set sch mode           (  1 clock ) 
 41e:	80 e0       	ldi	r24, 0x00	; 0
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 14 clocks) 
 420:	0f ef       	ldi	r16, 0xFF	; 255
 422:	00 93 09 01 	sts	0x0109, r16
 426:	00 e0       	ldi	r16, 0x00	; 0
 428:	00 93 0a 01 	sts	0x010A, r16
 42c:	98 2f       	mov	r25, r24

0000042e <_KER_SCH_LOOP8>:
 42e:	00 93 07 01 	sts	0x0107, r16
 432:	89 2f       	mov	r24, r25
 434:	e2 e4       	ldi	r30, 0x42	; 66
 436:	f1 e0       	ldi	r31, 0x01	; 1
 438:	00 91 07 01 	lds	r16, 0x0107
 43c:	00 0f       	add	r16, r16
 43e:	e0 0f       	add	r30, r16
 440:	00 e0       	ldi	r16, 0x00	; 0
 442:	f0 1f       	adc	r31, r16
 444:	00 81       	ld	r16, Z
 446:	11 81       	ldd	r17, Z+1	; 0x01
 448:	20 2f       	mov	r18, r16
 44a:	21 2b       	or	r18, r17
 44c:	59 f0       	breq	.+22     	; 0x464 <_VAL_NULL9>
 44e:	81 30       	cpi	r24, 0x01	; 1
 450:	99 f0       	breq	.+38     	; 0x478 <_VAL_NOT_NULL9>
 452:	21 e0       	ldi	r18, 0x01	; 1
 454:	02 1b       	sub	r16, r18
 456:	20 e0       	ldi	r18, 0x00	; 0
 458:	12 0b       	sbc	r17, r18
 45a:	00 83       	st	Z, r16
 45c:	11 83       	std	Z+1, r17	; 0x01
 45e:	20 2f       	mov	r18, r16
 460:	21 2b       	or	r18, r17
 462:	51 f4       	brne	.+20     	; 0x478 <_VAL_NOT_NULL9>

00000464 <_VAL_NULL9>:
 464:	ee e2       	ldi	r30, 0x2E	; 46
 466:	f1 e0       	ldi	r31, 0x01	; 1
 468:	00 91 07 01 	lds	r16, 0x0107
 46c:	e0 0f       	add	r30, r16
 46e:	00 e0       	ldi	r16, 0x00	; 0
 470:	f0 1f       	adc	r31, r16
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	80 83       	st	Z, r24
 476:	01 c0       	rjmp	.+2      	; 0x47a <_EXIT_SLP_TIME9>

00000478 <_VAL_NOT_NULL9>:
 478:	80 e0       	ldi	r24, 0x00	; 0

0000047a <_EXIT_SLP_TIME9>:
 47a:	81 30       	cpi	r24, 0x01	; 1
 47c:	91 f4       	brne	.+36     	; 0x4a2 <_KER_SCH_NEXT8>
 47e:	e8 e3       	ldi	r30, 0x38	; 56
 480:	f1 e0       	ldi	r31, 0x01	; 1
 482:	00 e0       	ldi	r16, 0x00	; 0
 484:	80 91 07 01 	lds	r24, 0x0107
 488:	e8 0f       	add	r30, r24
 48a:	f0 1f       	adc	r31, r16
 48c:	80 81       	ld	r24, Z
 48e:	00 91 09 01 	lds	r16, 0x0109
 492:	80 17       	cp	r24, r16
 494:	30 f4       	brcc	.+12     	; 0x4a2 <_KER_SCH_NEXT8>
 496:	80 93 09 01 	sts	0x0109, r24
 49a:	00 91 07 01 	lds	r16, 0x0107
 49e:	00 93 0a 01 	sts	0x010A, r16

000004a2 <_KER_SCH_NEXT8>:
 4a2:	00 91 07 01 	lds	r16, 0x0107
 4a6:	03 95       	inc	r16
 4a8:	10 91 08 01 	lds	r17, 0x0108
 4ac:	01 17       	cp	r16, r17
 4ae:	08 f4       	brcc	.+2      	; 0x4b2 <_KER_SCH_EXIT8>
 4b0:	be cf       	rjmp	.-132    	; 0x42e <_KER_SCH_LOOP8>

000004b2 <_KER_SCH_EXIT8>:
 4b2:	00 91 0a 01 	lds	r16, 0x010A
 4b6:	00 93 07 01 	sts	0x0107, r16
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 4ba:	ec e0       	ldi	r30, 0x0C	; 12
 4bc:	f1 e0       	ldi	r31, 0x01	; 1
 4be:	00 91 07 01 	lds	r16, 0x0107
 4c2:	00 0f       	add	r16, r16
 4c4:	e0 0f       	add	r30, r16
 4c6:	00 e0       	ldi	r16, 0x00	; 0
 4c8:	f0 1f       	adc	r31, r16
 4ca:	00 81       	ld	r16, Z
 4cc:	11 81       	ldd	r17, Z+1	; 0x01
 4ce:	0d bf       	out	0x3d, r16	; 61
 4d0:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
 4d2:	ff 91       	pop	r31
 4d4:	ef 91       	pop	r30
 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	bf 91       	pop	r27
 4dc:	af 91       	pop	r26
 4de:	9f 91       	pop	r25
 4e0:	8f 91       	pop	r24
 4e2:	7f 91       	pop	r23
 4e4:	6f 91       	pop	r22
 4e6:	5f 91       	pop	r21
 4e8:	4f 91       	pop	r20
 4ea:	3f 91       	pop	r19
 4ec:	2f 91       	pop	r18
 4ee:	1f 91       	pop	r17
 4f0:	0f 91       	pop	r16
 4f2:	ff 90       	pop	r15
 4f4:	ef 90       	pop	r14
 4f6:	df 90       	pop	r13
 4f8:	cf 90       	pop	r12
 4fa:	bf 90       	pop	r11
 4fc:	af 90       	pop	r10
 4fe:	9f 90       	pop	r9
 500:	8f 90       	pop	r8
 502:	7f 90       	pop	r7
 504:	6f 90       	pop	r6
 506:	5f 90       	pop	r5
 508:	4f 90       	pop	r4
 50a:	3f 90       	pop	r3
 50c:	2f 90       	pop	r2
 50e:	1f 90       	pop	r1
 510:	0f 90       	pop	r0
 512:	0f be       	out	0x3f, r0	; 63
 514:	0f 90       	pop	r0
	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 516:	5d 98       	cbi	0x0b, 5	; 11
		RETI                                              ;return from interrupt  (  4 clocks) 
 518:	18 95       	reti

0000051a <Kernel_SysTick_Reg_Init>:


;;================================SysTick reg init starting=================================;; 
Kernel_SysTick_Reg_Init:                                  ;total 10.5uS @8MHz     ( 84 clocks) 
        ;arg1 -> prescaler R24, arg2 -> reload val R22                                         
        CLI                                               ;disable global int     (  1 clock ) 
 51a:	f8 94       	cli
		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 51c:	5d 98       	cbi	0x0b, 5	; 11
 51e:	55 9a       	sbi	0x0a, 5	; 10
        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 520:	a0 91 20 01 	lds	r26, 0x0120
 524:	b0 91 21 01 	lds	r27, 0x0121
 528:	0d b7       	in	r16, 0x3d	; 61
 52a:	1e b7       	in	r17, 0x3e	; 62
 52c:	0d 93       	st	X+, r16
 52e:	1d 93       	st	X+, r17
 530:	ed 93       	st	X+, r30
 532:	fd 93       	st	X+, r31
 534:	a0 93 20 01 	sts	0x0120, r26
 538:	b0 93 21 01 	sts	0x0121, r27
		;clear reg                                                                             
		LDI   R16                , 0x00                   ;set 0x00 to R16        (  1 clock ) 
 53c:	00 e0       	ldi	r16, 0x00	; 0
		;clear tick counter                                                                    
		STS   KerBase+OFB_TICK0  , R16                    ;clear  KerBase[0]      (  2 clocks) 
 53e:	00 93 00 01 	sts	0x0100, r16
		STS   KerBase+OFB_TICK1  , R16                    ;clear  KerBase[1]      (  2 clocks) 
 542:	00 93 01 01 	sts	0x0101, r16
		STS   KerBase+OFB_TICK2  , R16                    ;clear  KerBase[2]      (  2 clocks) 
 546:	00 93 02 01 	sts	0x0102, r16
		STS   KerBase+OFB_TICK3  , R16                    ;clear  KerBase[3]      (  2 clocks) 
 54a:	00 93 03 01 	sts	0x0103, r16
		STS   KerBase+OFB_TICK4  , R16                    ;clear  KerBase[4]      (  2 clocks) 
 54e:	00 93 04 01 	sts	0x0104, r16
		;clear system registers                                                                
		STS   KerBase+OFB_PRS    , R16                    ;clear  KerBase[5]      (  2 clocks) 
 552:	00 93 05 01 	sts	0x0105, r16
		STS   KerBase+OFB_RLD    , R16                    ;clear  KerBase[6]      (  2 clocks) 
 556:	00 93 06 01 	sts	0x0106, r16
		STS   KerBase+OFB_TID    , R16                    ;clear  KerBase[7]      (  2 clocks) 
 55a:	00 93 07 01 	sts	0x0107, r16
		STS   KerBase+OFB_NTSK   , R16                    ;clear  KerBase[8]      (  2 clocks) 
 55e:	00 93 08 01 	sts	0x0108, r16
        STS   KerBase+OFB_PTID   , R16                    ;clear  KerBase[9]      (  2 clocks) 
 562:	00 93 0a 01 	sts	0x010A, r16
		;clear all timer registers                                                             
		STS   SRTCCR0A           , R16                    ;clear TCCR0A           (  2 clocks) 
 566:	00 93 44 00 	sts	0x0044, r16
		STS   SRTCCR0B           , R16                    ;clear TCCR0B           (  2 clocks) 
 56a:	00 93 45 00 	sts	0x0045, r16
		STS   SRTIMSK0           , R16                    ;clear TIMSK0           (  2 clocks) 
 56e:	00 93 6e 00 	sts	0x006E, r16
		STS   SRTIFR0            , R16                    ;clear TIFR0            (  2 clocks) 
 572:	00 93 35 00 	sts	0x0035, r16
		STS   SROCR0A            , R16                    ;clear OCR0A            (  2 clocks) 
 576:	00 93 47 00 	sts	0x0047, r16
		STS   SROCR0B            , R16                    ;clear OCR0B            (  2 clocks) 
 57a:	00 93 48 00 	sts	0x0048, r16
		STS   SRTCNT0            , R16                    ;clear TCNT0            (  2 clocks) 
 57e:	00 93 46 00 	sts	0x0046, r16
		;save values for future use                                                            
		STS   KerBase+OFB_PRS    , R24                    ;KerBase[5] prescaler   (  2 clocks) 
 582:	80 93 05 01 	sts	0x0105, r24
		STS   KerBase+OFB_RLD    , R22                    ;KerBase[6] reload val  (  2 clocks) 
 586:	60 93 06 01 	sts	0x0106, r22
        KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 58a:	a0 91 20 01 	lds	r26, 0x0120
 58e:	b0 91 21 01 	lds	r27, 0x0121
 592:	fe 91       	ld	r31, -X
 594:	ee 91       	ld	r30, -X
 596:	1e 91       	ld	r17, -X
 598:	0e 91       	ld	r16, -X
 59a:	0d bf       	out	0x3d, r16	; 61
 59c:	1e bf       	out	0x3e, r17	; 62
 59e:	a0 93 20 01 	sts	0x0120, r26
 5a2:	b0 93 21 01 	sts	0x0121, r27
		RET                                               ;return from subroutine (  4 clocks) 
 5a6:	08 95       	ret

000005a8 <Kernel_Task_Create>:


;;===============================kernel task create starting================================;; 
Kernel_Task_Create:                                       ;total 19.86uS @8MHz    (162 clocks) 
        ;func_ptr->R25:R24, task_priority->R22                                                 
        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 5a8:	a0 91 20 01 	lds	r26, 0x0120
 5ac:	b0 91 21 01 	lds	r27, 0x0121
 5b0:	0d b7       	in	r16, 0x3d	; 61
 5b2:	1e b7       	in	r17, 0x3e	; 62
 5b4:	0d 93       	st	X+, r16
 5b6:	1d 93       	st	X+, r17
 5b8:	ed 93       	st	X+, r30
 5ba:	fd 93       	st	X+, r31
 5bc:	a0 93 20 01 	sts	0x0120, r26
 5c0:	b0 93 21 01 	sts	0x0121, r27
		;across this function, R16 will be used as task_id                                     
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 5c4:	00 91 07 01 	lds	r16, 0x0107
		LDI   R17                , 0x00                   ;clear reg              (  1 clock ) 
 5c8:	10 e0       	ldi	r17, 0x00	; 0
		;set priority to KerSchPr+task_id                                                      
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 5ca:	e8 e3       	ldi	r30, 0x38	; 56
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 5cc:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
 5ce:	e0 0f       	add	r30, r16
		ADC   ZH                 , R17                    ;add high byte+carry    (  1 clock ) 
 5d0:	f1 1f       	adc	r31, r17
		ST    Z                  , R22                    ;save priority          (  2 clocks) 
 5d2:	60 83       	st	Z, r22
		;stack pointer for current task (KerStack + KER_STK_SZ*(task_id+1) - 1) ->stack top    
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 5d4:	00 91 07 01 	lds	r16, 0x0107
		MOV   R17                , R16                    ;load task_id           (  1 clock ) 
 5d8:	10 2f       	mov	r17, r16
		INC   R17                                         ;increment task_id      (  1 clock ) 
 5da:	13 95       	inc	r17
		LDI   R18                , KER_STK_SZ             ;load stack size        (  1 clock ) 
 5dc:	20 e8       	ldi	r18, 0x80	; 128
		MUL   R17                , R18                    ;multiply to get offset (  2 clocks) 
 5de:	12 9f       	mul	r17, r18
		MOV   ZL                 , R0                     ;load multiplied low    (  1 clocks) 
 5e0:	e0 2d       	mov	r30, r0
		MOV   ZH                 , R1                     ;load multiplied high   (  1 clocks) 
 5e2:	f1 2d       	mov	r31, r1
		SBIW  ZL                 , 0x01                   ;dec multiplied val-1   (  2 clocks) 
 5e4:	31 97       	sbiw	r30, 0x01	; 1
		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 5e6:	11 24       	eor	r1, r1
		LDI   R17                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
 5e8:	16 e5       	ldi	r17, 0x56	; 86
		LDI   R18                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
 5ea:	21 e0       	ldi	r18, 0x01	; 1
		ADD   ZL                 , R17                    ;add low bytes          (  1 clock ) 
 5ec:	e1 0f       	add	r30, r17
		ADC   ZH                 , R18                    ;add high bytes+carry   (  1 clock ) 
 5ee:	f2 1f       	adc	r31, r18
		OUT   IOSPL              , ZL                     ;load SPL               (  1 clock ) 
 5f0:	ed bf       	out	0x3d, r30	; 61
        OUT   IOSPH              , ZH                     ;load SPH               (  1 clock ) 
 5f2:	fe bf       	out	0x3e, r31	; 62
		;function argument directly returns word address                                       
	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
 5f4:	8f 93       	push	r24
		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 5f6:	9f 93       	push	r25
		;push context to stack of this task                                                    
		KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 5f8:	0f 92       	push	r0
 5fa:	0f b6       	in	r0, 0x3f	; 63
 5fc:	0f 92       	push	r0
 5fe:	1f 92       	push	r1
 600:	11 24       	eor	r1, r1
 602:	2f 92       	push	r2
 604:	3f 92       	push	r3
 606:	4f 92       	push	r4
 608:	5f 92       	push	r5
 60a:	6f 92       	push	r6
 60c:	7f 92       	push	r7
 60e:	8f 92       	push	r8
 610:	9f 92       	push	r9
 612:	af 92       	push	r10
 614:	bf 92       	push	r11
 616:	cf 92       	push	r12
 618:	df 92       	push	r13
 61a:	ef 92       	push	r14
 61c:	ff 92       	push	r15
 61e:	0f 93       	push	r16
 620:	1f 93       	push	r17
 622:	2f 93       	push	r18
 624:	3f 93       	push	r19
 626:	4f 93       	push	r20
 628:	5f 93       	push	r21
 62a:	6f 93       	push	r22
 62c:	7f 93       	push	r23
 62e:	8f 93       	push	r24
 630:	9f 93       	push	r25
 632:	af 93       	push	r26
 634:	bf 93       	push	r27
 636:	cf 93       	push	r28
 638:	df 93       	push	r29
 63a:	ef 93       	push	r30
 63c:	ff 93       	push	r31
		;read stack pointer of current task (necessary when restore)                           
		IN    R17                , IOSPL                  ;read SPL               (  1 clock ) 
 63e:	1d b7       	in	r17, 0x3d	; 61
        IN    R18                , IOSPH                  ;read SPH               (  1 clock ) 
 640:	2e b7       	in	r18, 0x3e	; 62
		;calculate the address where current task's SP will be stored and store SP             
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 642:	00 91 07 01 	lds	r16, 0x0107
		MOV   R19                , R16                    ;copy task_id           (  1 clock ) 
 646:	30 2f       	mov	r19, r16
		LSL   R19                                         ;left shift to multiply (  1 clock ) 
 648:	33 0f       	add	r19, r19
		LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 64a:	ec e0       	ldi	r30, 0x0C	; 12
		LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 64c:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R19                    ;add offset to array    (  1 clock ) 
 64e:	e3 0f       	add	r30, r19
		LDI   R16                , 0x00                   ;clear reg              (  1 clock ) 
 650:	00 e0       	ldi	r16, 0x00	; 0
		ADC   ZH                 , R16                    ;add carry if any       (  1 clock ) 
 652:	f0 1f       	adc	r31, r16
		ST    Z+                 , R17                    ;SPL at KerPSp+offset   (  2 clocks) 
 654:	11 93       	st	Z+, r17
		ST    Z                  , R18                    ;SPH at KerPSp+offset   (  2 clocks) 
 656:	20 83       	st	Z, r18
		;increment task_id                                                                     
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 658:	00 91 07 01 	lds	r16, 0x0107
		INC   R16                                         ;increment task_id      (  1 clock ) 
 65c:	03 95       	inc	r16
		STS   KerBase+OFB_TID    , R16                    ;store task_id          (  2 clocks) 
 65e:	00 93 07 01 	sts	0x0107, r16
		;increment ntask                                                                       
		LDS   R16                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 662:	00 91 08 01 	lds	r16, 0x0108
		INC   R16                                         ;increment ntask        (  1 clock ) 
 666:	03 95       	inc	r16
		STS   KerBase+OFB_NTSK   , R16                    ;store ntask            (  2 clocks) 
 668:	00 93 08 01 	sts	0x0108, r16
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 66c:	a0 91 20 01 	lds	r26, 0x0120
 670:	b0 91 21 01 	lds	r27, 0x0121
 674:	fe 91       	ld	r31, -X
 676:	ee 91       	ld	r30, -X
 678:	1e 91       	ld	r17, -X
 67a:	0e 91       	ld	r16, -X
 67c:	0d bf       	out	0x3d, r16	; 61
 67e:	1e bf       	out	0x3e, r17	; 62
 680:	a0 93 20 01 	sts	0x0120, r26
 684:	b0 93 21 01 	sts	0x0121, r27
		RET                                               ;return from subroutine (  4 clocks) 
 688:	08 95       	ret

0000068a <Kernel_Start_Tasks>:


;;=================================kernel start tasks starting==============================;; 
Kernel_Start_Tasks:                                       ;total 12.88uS @8MHz    (103 clocks) 
		;clear task_id                                                                         
		LDI   R16                , 0x00                   ;load task_id           (  2 clocks) 
 68a:	00 e0       	ldi	r16, 0x00	; 0
		STS   KerBase+OFB_TID    , R16                    ;store task_id          (  2 clocks) 
 68c:	00 93 07 01 	sts	0x0107, r16
		;load ZP with addr+offset                                                              
		LDI   ZL                 , lo8(KerPSP+0x00)       ;fetch ZPL KerPSP->TID0 (  1 clock ) 
 690:	ec e0       	ldi	r30, 0x0C	; 12
		LDI   ZH                 , hi8(KerPSP+0x00)       ;fetch ZPH KerPSP->TID0 (  1 clock ) 
 692:	f1 e0       	ldi	r31, 0x01	; 1
		;load task_id 0 task's SP                                                              
		LD    R16                , Z+                     ;load val from Z, inc Z (  2 clocks) 
 694:	01 91       	ld	r16, Z+
		LD    R17                , Z                      ;load val from Z+1      (  2 clocks) 
 696:	10 81       	ld	r17, Z
        ;set task_id=0 task's SP                                                               
		OUT   IOSPL              , R16                    ;load SPL               (  1 clock ) 
 698:	0d bf       	out	0x3d, r16	; 61
        OUT   IOSPH              , R17                    ;load SPH               (  1 clock ) 
 69a:	1e bf       	out	0x3e, r17	; 62
        ;forcefully restore context, in ISR it will be stored automatically                    
		KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
 69c:	ff 91       	pop	r31
 69e:	ef 91       	pop	r30
 6a0:	df 91       	pop	r29
 6a2:	cf 91       	pop	r28
 6a4:	bf 91       	pop	r27
 6a6:	af 91       	pop	r26
 6a8:	9f 91       	pop	r25
 6aa:	8f 91       	pop	r24
 6ac:	7f 91       	pop	r23
 6ae:	6f 91       	pop	r22
 6b0:	5f 91       	pop	r21
 6b2:	4f 91       	pop	r20
 6b4:	3f 91       	pop	r19
 6b6:	2f 91       	pop	r18
 6b8:	1f 91       	pop	r17
 6ba:	0f 91       	pop	r16
 6bc:	ff 90       	pop	r15
 6be:	ef 90       	pop	r14
 6c0:	df 90       	pop	r13
 6c2:	cf 90       	pop	r12
 6c4:	bf 90       	pop	r11
 6c6:	af 90       	pop	r10
 6c8:	9f 90       	pop	r9
 6ca:	8f 90       	pop	r8
 6cc:	7f 90       	pop	r7
 6ce:	6f 90       	pop	r6
 6d0:	5f 90       	pop	r5
 6d2:	4f 90       	pop	r4
 6d4:	3f 90       	pop	r3
 6d6:	2f 90       	pop	r2
 6d8:	1f 90       	pop	r1
 6da:	0f 90       	pop	r0
 6dc:	0f be       	out	0x3f, r0	; 63
 6de:	0f 90       	pop	r0
		;config timer for system tick                                                          
		KER_TIMER_INIT                                    ;init timer, int enable ( 12 clocks) 
 6e0:	00 91 05 01 	lds	r16, 0x0105
 6e4:	10 91 06 01 	lds	r17, 0x0106
 6e8:	00 93 45 00 	sts	0x0045, r16
 6ec:	10 93 46 00 	sts	0x0046, r17
 6f0:	01 e0       	ldi	r16, 0x01	; 1
 6f2:	00 93 6e 00 	sts	0x006E, r16
 6f6:	78 94       	sei
		;execute return to jump to task0, pushed while task init                               
		RET                                               ;return from subroutine (  4 clocks) 
 6f8:	08 95       	ret

000006fa <Kernel_Init>:


;;===================================kernel init starting===================================;; 
Kernel_Init:                                              ;total 37.00uS @8MHz    (296 clocks) 
		;save necessary registers and MSP                                                      
		CLR   R1                                          ;gcc expects            (  1 clock ) 
 6fa:	11 24       	eor	r1, r1
        ;store stack top (for MSP) addr to KerSSZ+OFM_MSPI0:1                                  
		LDI   R16                , lo8(KerSSZ+OFM_MSPS)   ;load low address       (  1 clock ) 
 6fc:	02 e2       	ldi	r16, 0x22	; 34
		LDI   R17                , hi8(KerSSZ+OFM_MSPS)   ;load high address      (  1 clock ) 
 6fe:	11 e0       	ldi	r17, 0x01	; 1
        STS   KerSSZ+OFM_MSPI+0  , R16                    ;set mspi to stack top  (  2 clocks) 
 700:	00 93 20 01 	sts	0x0120, r16
		STS   KerSSZ+OFM_MSPI+1  , R17                    ;set mspi to stack top  (  2 clocks) 
 704:	10 93 21 01 	sts	0x0121, r17
		KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 708:	a0 91 20 01 	lds	r26, 0x0120
 70c:	b0 91 21 01 	lds	r27, 0x0121
 710:	0d b7       	in	r16, 0x3d	; 61
 712:	1e b7       	in	r17, 0x3e	; 62
 714:	0d 93       	st	X+, r16
 716:	1d 93       	st	X+, r17
 718:	ed 93       	st	X+, r30
 71a:	fd 93       	st	X+, r31
 71c:	a0 93 20 01 	sts	0x0120, r26
 720:	b0 93 21 01 	sts	0x0121, r27
		;init timer for kernel                                                                 
		LDI   R24                , 0x03                   ;set prescaler          (  1 clock ) 
 724:	83 e0       	ldi	r24, 0x03	; 3
		LDI   R22                , 0x82                   ;set reload val         (  1 clock ) 
 726:	62 e8       	ldi	r22, 0x82	; 130
		CALL  Kernel_SysTick_Reg_Init                     ;init timer             ( 84 clocks) 
 728:	0e 94 8d 02 	call	0x51a	; 0x51a <Kernel_SysTick_Reg_Init>
		;create idle task at task_id 0, priority 0xFF (lowest)                                 
		LDI   R24                , lo8(Kernel_Task_Idle)  ;load func addr low     (  1 clock ) 
 72c:	88 e5       	ldi	r24, 0x58	; 88
		LDI   R25                , hi8(Kernel_Task_Idle)  ;load func addr high    (  1 clock ) 
 72e:	97 e0       	ldi	r25, 0x07	; 7
		LSR   R25                                         ;right shift to divide  (  1 clock ) 
 730:	96 95       	lsr	r25
		ROR   R24                                         ;rotate right th carry  (  1 clock ) 
 732:	87 95       	ror	r24
		LDI   R22                , 0xFF                   ;set max val            (  1 clock ) 
 734:	6f ef       	ldi	r22, 0xFF	; 255
		CALL  Kernel_Task_Create                          ;init idle task         (159 clocks) 
 736:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <Kernel_Task_Create>
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 73a:	a0 91 20 01 	lds	r26, 0x0120
 73e:	b0 91 21 01 	lds	r27, 0x0121
 742:	fe 91       	ld	r31, -X
 744:	ee 91       	ld	r30, -X
 746:	1e 91       	ld	r17, -X
 748:	0e 91       	ld	r16, -X
 74a:	0d bf       	out	0x3d, r16	; 61
 74c:	1e bf       	out	0x3e, r17	; 62
 74e:	a0 93 20 01 	sts	0x0120, r26
 752:	b0 93 21 01 	sts	0x0121, r27
		;execute return to jump to task0, pushed while task init                               
		RET                                               ;return from subroutine (  4 clocks) 
 756:	08 95       	ret

00000758 <Kernel_Task_Idle>:



;;=================================kernel idle task starting================================;; 
Kernel_Task_Idle:                                         ;total 0.5uS @8MHz      (  4 clocks) 
        LDI   R25                , 0x00                   ;set UBRRH              (  1 clock ) 
 758:	90 e0       	ldi	r25, 0x00	; 0
        LDI   R24                , 0x00                   ;set UBRRL              (  1 clock ) 
 75a:	80 e0       	ldi	r24, 0x00	; 0
        CALL  Debug_Init                                  ;debug init             ( 19 clocks) 
 75c:	0e 94 9b 04 	call	0x936	; 0x936 <Debug_Init>

00000760 <_IDLE_LOOP>:
    _IDLE_LOOP:                                           ;forever loop                        
	    LDI   R24                , 0x23                   ;load val               (  1 clock ) 
 760:	83 e2       	ldi	r24, 0x23	; 35
		CALL  Debug_Tx_Byte                                                                    
 762:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
		RJMP  _IDLE_LOOP                                  ;return from subroutine (  4 clocks) 
 766:	fc cf       	rjmp	.-8      	; 0x760 <_IDLE_LOOP>

00000768 <Kernel_Task_Sleep>:


;;================================kernel task sleep starting================================;; 
Kernel_Task_Sleep:                                                                             
        ;save current context                                                                  
        KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
 768:	0f 92       	push	r0
 76a:	0f b6       	in	r0, 0x3f	; 63
 76c:	f8 94       	cli
 76e:	0f 92       	push	r0
 770:	1f 92       	push	r1
 772:	11 24       	eor	r1, r1
 774:	2f 92       	push	r2
 776:	3f 92       	push	r3
 778:	4f 92       	push	r4
 77a:	5f 92       	push	r5
 77c:	6f 92       	push	r6
 77e:	7f 92       	push	r7
 780:	8f 92       	push	r8
 782:	9f 92       	push	r9
 784:	af 92       	push	r10
 786:	bf 92       	push	r11
 788:	cf 92       	push	r12
 78a:	df 92       	push	r13
 78c:	ef 92       	push	r14
 78e:	ff 92       	push	r15
 790:	0f 93       	push	r16
 792:	1f 93       	push	r17
 794:	2f 93       	push	r18
 796:	3f 93       	push	r19
 798:	4f 93       	push	r20
 79a:	5f 93       	push	r21
 79c:	6f 93       	push	r22
 79e:	7f 93       	push	r23
 7a0:	8f 93       	push	r24
 7a2:	9f 93       	push	r25
 7a4:	af 93       	push	r26
 7a6:	bf 93       	push	r27
 7a8:	cf 93       	push	r28
 7aa:	df 93       	push	r29
 7ac:	ef 93       	push	r30
 7ae:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 7b0:	1d b7       	in	r17, 0x3d	; 61
 7b2:	2e b7       	in	r18, 0x3e	; 62
 7b4:	ec e0       	ldi	r30, 0x0C	; 12
 7b6:	f1 e0       	ldi	r31, 0x01	; 1
 7b8:	00 91 07 01 	lds	r16, 0x0107
 7bc:	00 0f       	add	r16, r16
 7be:	e0 0f       	add	r30, r16
 7c0:	00 e0       	ldi	r16, 0x00	; 0
 7c2:	f0 1f       	adc	r31, r16
 7c4:	10 83       	st	Z, r17
 7c6:	21 83       	std	Z+1, r18	; 0x01
		;create next task wakeup time (args R25:R24)                                           
		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 7c8:	e2 e4       	ldi	r30, 0x42	; 66
		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 7ca:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
 7cc:	00 91 07 01 	lds	r16, 0x0107
 7d0:	00 0f       	add	r16, r16
 7d2:	e0 0f       	add	r30, r16
 7d4:	00 e0       	ldi	r16, 0x00	; 0
 7d6:	f0 1f       	adc	r31, r16
		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
 7d8:	80 83       	st	Z, r24
		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 7da:	91 83       	std	Z+1, r25	; 0x01
		;update task scheduler status as blocked                                               
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 7dc:	ee e2       	ldi	r30, 0x2E	; 46
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 7de:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
 7e0:	00 91 07 01 	lds	r16, 0x0107
 7e4:	e0 0f       	add	r30, r16
 7e6:	00 e0       	ldi	r16, 0x00	; 0
 7e8:	f0 1f       	adc	r31, r16
        LDI   R16                , TASK_BLOCK             ;block task until cnt=0 (  1 clock ) 
 7ea:	00 e0       	ldi	r16, 0x00	; 0
		STD   Z+0                , R16                    ;save block flag        (  2 clocks) 
 7ec:	00 83       	st	Z, r16
		;run scheduler, load next task sp, restore context                                     
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 7ee:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 14 clocks) 
 7f0:	0f ef       	ldi	r16, 0xFF	; 255
 7f2:	00 93 09 01 	sts	0x0109, r16
 7f6:	00 e0       	ldi	r16, 0x00	; 0
 7f8:	00 93 0a 01 	sts	0x010A, r16
 7fc:	98 2f       	mov	r25, r24

000007fe <_KER_SCH_LOOP40>:
 7fe:	00 93 07 01 	sts	0x0107, r16
 802:	89 2f       	mov	r24, r25
 804:	e2 e4       	ldi	r30, 0x42	; 66
 806:	f1 e0       	ldi	r31, 0x01	; 1
 808:	00 91 07 01 	lds	r16, 0x0107
 80c:	00 0f       	add	r16, r16
 80e:	e0 0f       	add	r30, r16
 810:	00 e0       	ldi	r16, 0x00	; 0
 812:	f0 1f       	adc	r31, r16
 814:	00 81       	ld	r16, Z
 816:	11 81       	ldd	r17, Z+1	; 0x01
 818:	20 2f       	mov	r18, r16
 81a:	21 2b       	or	r18, r17
 81c:	59 f0       	breq	.+22     	; 0x834 <_VAL_NULL41>
 81e:	81 30       	cpi	r24, 0x01	; 1
 820:	99 f0       	breq	.+38     	; 0x848 <_VAL_NOT_NULL41>
 822:	21 e0       	ldi	r18, 0x01	; 1
 824:	02 1b       	sub	r16, r18
 826:	20 e0       	ldi	r18, 0x00	; 0
 828:	12 0b       	sbc	r17, r18
 82a:	00 83       	st	Z, r16
 82c:	11 83       	std	Z+1, r17	; 0x01
 82e:	20 2f       	mov	r18, r16
 830:	21 2b       	or	r18, r17
 832:	51 f4       	brne	.+20     	; 0x848 <_VAL_NOT_NULL41>

00000834 <_VAL_NULL41>:
 834:	ee e2       	ldi	r30, 0x2E	; 46
 836:	f1 e0       	ldi	r31, 0x01	; 1
 838:	00 91 07 01 	lds	r16, 0x0107
 83c:	e0 0f       	add	r30, r16
 83e:	00 e0       	ldi	r16, 0x00	; 0
 840:	f0 1f       	adc	r31, r16
 842:	81 e0       	ldi	r24, 0x01	; 1
 844:	80 83       	st	Z, r24
 846:	01 c0       	rjmp	.+2      	; 0x84a <_EXIT_SLP_TIME41>

00000848 <_VAL_NOT_NULL41>:
 848:	80 e0       	ldi	r24, 0x00	; 0

0000084a <_EXIT_SLP_TIME41>:
 84a:	81 30       	cpi	r24, 0x01	; 1
 84c:	91 f4       	brne	.+36     	; 0x872 <_KER_SCH_NEXT40>
 84e:	e8 e3       	ldi	r30, 0x38	; 56
 850:	f1 e0       	ldi	r31, 0x01	; 1
 852:	00 e0       	ldi	r16, 0x00	; 0
 854:	80 91 07 01 	lds	r24, 0x0107
 858:	e8 0f       	add	r30, r24
 85a:	f0 1f       	adc	r31, r16
 85c:	80 81       	ld	r24, Z
 85e:	00 91 09 01 	lds	r16, 0x0109
 862:	80 17       	cp	r24, r16
 864:	30 f4       	brcc	.+12     	; 0x872 <_KER_SCH_NEXT40>
 866:	80 93 09 01 	sts	0x0109, r24
 86a:	00 91 07 01 	lds	r16, 0x0107
 86e:	00 93 0a 01 	sts	0x010A, r16

00000872 <_KER_SCH_NEXT40>:
 872:	00 91 07 01 	lds	r16, 0x0107
 876:	03 95       	inc	r16
 878:	10 91 08 01 	lds	r17, 0x0108
 87c:	01 17       	cp	r16, r17
 87e:	08 f4       	brcc	.+2      	; 0x882 <_KER_SCH_EXIT40>
 880:	be cf       	rjmp	.-132    	; 0x7fe <_KER_SCH_LOOP40>

00000882 <_KER_SCH_EXIT40>:
 882:	00 91 0a 01 	lds	r16, 0x010A
 886:	00 93 07 01 	sts	0x0107, r16
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 88a:	ec e0       	ldi	r30, 0x0C	; 12
 88c:	f1 e0       	ldi	r31, 0x01	; 1
 88e:	00 91 07 01 	lds	r16, 0x0107
 892:	00 0f       	add	r16, r16
 894:	e0 0f       	add	r30, r16
 896:	00 e0       	ldi	r16, 0x00	; 0
 898:	f0 1f       	adc	r31, r16
 89a:	00 81       	ld	r16, Z
 89c:	11 81       	ldd	r17, Z+1	; 0x01
 89e:	0d bf       	out	0x3d, r16	; 61
 8a0:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 8a2:	ff 91       	pop	r31
 8a4:	ef 91       	pop	r30
 8a6:	df 91       	pop	r29
 8a8:	cf 91       	pop	r28
 8aa:	bf 91       	pop	r27
 8ac:	af 91       	pop	r26
 8ae:	9f 91       	pop	r25
 8b0:	8f 91       	pop	r24
 8b2:	7f 91       	pop	r23
 8b4:	6f 91       	pop	r22
 8b6:	5f 91       	pop	r21
 8b8:	4f 91       	pop	r20
 8ba:	3f 91       	pop	r19
 8bc:	2f 91       	pop	r18
 8be:	1f 91       	pop	r17
 8c0:	0f 91       	pop	r16
 8c2:	ff 90       	pop	r15
 8c4:	ef 90       	pop	r14
 8c6:	df 90       	pop	r13
 8c8:	cf 90       	pop	r12
 8ca:	bf 90       	pop	r11
 8cc:	af 90       	pop	r10
 8ce:	9f 90       	pop	r9
 8d0:	8f 90       	pop	r8
 8d2:	7f 90       	pop	r7
 8d4:	6f 90       	pop	r6
 8d6:	5f 90       	pop	r5
 8d8:	4f 90       	pop	r4
 8da:	3f 90       	pop	r3
 8dc:	2f 90       	pop	r2
 8de:	1f 90       	pop	r1
 8e0:	0f 90       	pop	r0
 8e2:	0f be       	out	0x3f, r0	; 63
 8e4:	0f 90       	pop	r0
 8e6:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
 8e8:	08 95       	ret

000008ea <Kernel_Task_Sleep_Time_Get>:


;;===========================kernel task sleep time get starting============================;; 
Kernel_Task_Sleep_Time_Get:                                                                    
		;get remaining sleep time (ms), arg R24, return R25:R24                                
		MOV   R16                , R24                    ;copy                   (  1 clock ) 
 8ea:	08 2f       	mov	r16, r24
		LSL   R16                                         ;x2                     (  1 clock ) 
 8ec:	00 0f       	add	r16, r16
		LDI   R30                , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 8ee:	e2 e4       	ldi	r30, 0x42	; 66
		LDI   R31                , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 8f0:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 8f2:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 8f4:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 8f6:	f0 1f       	adc	r31, r16
		LD    R24                , Z+                     ;load sleep time        (  2 clocks) 
 8f8:	81 91       	ld	r24, Z+
		LD    R25                , Z                      ;load sleep time        (  2 clocks) 
 8fa:	90 81       	ld	r25, Z
		RET                                               ;return from subroutine (  4 clocks) 
 8fc:	08 95       	ret

000008fe <Kernel_Task_Status_Get>:


;;==============================kernel task status get starting=============================;; 
Kernel_Task_Status_Get:                                                                        
		;get task status ->ready/blocked, arg R24, return R24                                  
		MOV   R16                , R24                    ;copy                   (  1 clock ) 
 8fe:	08 2f       	mov	r16, r24
		LDI   R30                , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 900:	ee e2       	ldi	r30, 0x2E	; 46
		LDI   R31                , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 902:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 904:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 906:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 908:	f0 1f       	adc	r31, r16
		LD    R24                , Z                      ;load task status       (  2 clocks) 
 90a:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 90c:	08 95       	ret

0000090e <Kernel_NTask_Get>:



;;================================kernel ntask get starting=================================;; 
Kernel_NTask_Get:                                         ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                 , KerBase+OFB_NTSK      ;load ntask             (  2 clock ) 
 90e:	80 91 08 01 	lds	r24, 0x0108
		RET                                               ;return from subroutine (  4 clocks) 
 912:	08 95       	ret

00000914 <Kernel_Task_Prio_Get>:


;;=============================kernel task priority get starting============================;; 
Kernel_Task_Prio_Get:                                     ;total 1.38uS @8MHz     ( 11 clocks) 
		;get priority of the task id, arg (task_id->R24), return R24                           
		MOV   R16                , R24                    ;copy task_id           (  1 clock ) 
 914:	08 2f       	mov	r16, r24
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 916:	e8 e3       	ldi	r30, 0x38	; 56
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 918:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
 91a:	e0 0f       	add	r30, r16
		ADC   ZH                 , R1                     ;add high byte+carry    (  1 clock ) 
 91c:	f1 1d       	adc	r31, r1
		LD    R24                , Z                      ;load priority          (  2 clocks) 
 91e:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 920:	08 95       	ret

00000922 <Kernel_Lowest_Prio_Get>:


;;============================kernel lowest priority get starting===========================;; 
Kernel_Lowest_Prio_Get:                                   ;total 0.75uS @8MHz     (  6 clocks) 
		;get lowest priority, return R24                                                       
		LDS   R24                , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
 922:	80 91 09 01 	lds	r24, 0x0109
		RET                                               ;return from subroutine (  4 clocks) 
 926:	08 95       	ret

00000928 <Kernel_High_Prio_Task_ID_Get>:


;;===========================kernel high priority task id starting==========================;; 
Kernel_High_Prio_Task_ID_Get:                                                                  
		;internal idle task id = 0, app task start from task id 1, return R24                  
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 928:	80 91 0a 01 	lds	r24, 0x010A
		DEC   R24                                         ;decrement by 1         (  1 clock ) 
 92c:	8a 95       	dec	r24
		RET                                               ;return from subroutine (  4 clocks) 
 92e:	08 95       	ret

00000930 <Kernel_Abs_High_Prio_Task_ID_Get>:


;;=========================kernel abs high priority task id starting========================;; 
Kernel_Abs_High_Prio_Task_ID_Get:                                                              
		;get highest priority task id, return R24                                              
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 930:	80 91 0a 01 	lds	r24, 0x010A
		RET                                               ;return from subroutine (  4 clocks) 
 934:	08 95       	ret

00000936 <Debug_Init>:


;;===================================debug init starting====================================;; 
Debug_Init:                                               ;total 2.38uS @8MHz     ( 19 clocks) 
        ;init registers for UART0 (Arg R25:R24->UBRRH:UBRRL)                                   
		LDI   R16                , (1<<1)                 ;mask U2x               (  1 clock ) 
 936:	02 e0       	ldi	r16, 0x02	; 2
		STS   SRUCSR0A           , R16                    ;load val to UCSR0A     (  2 clocks) 
 938:	00 93 c0 00 	sts	0x00C0, r16
		MOV   R16                , R25                    ;copy R25->baud rate H  (  1 clock ) 
 93c:	09 2f       	mov	r16, r25
		STS   SRUBRR0H           , R16                    ;load val to UBRR0H     (  2 clocks) 
 93e:	00 93 c5 00 	sts	0x00C5, r16
		MOV   R16                , R24                    ;copy R24->baud rate L  (  1 clock ) 
 942:	08 2f       	mov	r16, r24
		STS   SRUBRR0L           , R16                    ;load val to UBRR0L     (  2 clocks) 
 944:	00 93 c4 00 	sts	0x00C4, r16
		LDI   R16                , (1<<1)|(1<<2)          ;config 8 data bit      (  1 clock ) 
 948:	06 e0       	ldi	r16, 0x06	; 6
		STS   SRUCSR0C           , R16                    ;load val to UCSR0C     (  2 clocks) 
 94a:	00 93 c2 00 	sts	0x00C2, r16
		LDI   R16                , (1<<3)                 ;enable tx              (  1 clock ) 
 94e:	08 e0       	ldi	r16, 0x08	; 8
		STS   SRUCSR0B           , R16                    ;load val to UCSR0B     (  2 clocks) 
 950:	00 93 c1 00 	sts	0x00C1, r16
        RET                                               ;return from subroutine (  4 clocks) 
 954:	08 95       	ret

00000956 <Debug_Tx_Byte>:


;;====================================debug tx starting=====================================;; 
Debug_Tx_Byte:                                            ;total 2.00uS+LT @8MHz  ( 16 clocks) 
		;write single byte to data register (Arg R24)                                          
		PUSH  R16                                         ;save reg               (  2 clocks) 
 956:	0f 93       	push	r16
		STS   SRUDR0             , R24                    ;load val to UDR0       (  2 clocks) 
 958:	80 93 c6 00 	sts	0x00C6, r24

0000095c <__UDRE0_CLEARED>:
                                                                                               
    __UDRE0_CLEARED:                                      ;undefined loop wrt ck               
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16     (  2 clocks) 
 95c:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x05                   ;skip if UDRE0 is set   (  2 clocks) 
 960:	05 ff       	sbrs	r16, 5
		RJMP  __UDRE0_CLEARED                             ;wait until UDRE0 is set(  2 clocks) 
 962:	fc cf       	rjmp	.-8      	; 0x95c <__UDRE0_CLEARED>
		POP   R16                                         ;restore reg            (  2 clocks) 
 964:	0f 91       	pop	r16
        RET                                               ;return from subroutine (  4 clocks) 
 966:	08 95       	ret

00000968 <Debug_Tx_Word>:


;;==================================debug tx word starting==================================;; 
Debug_Tx_Word:                                            ;total 2.00uS+LT @8MHz  ( 16 clocks) 
		;write 2 bytes, (Arg R24, R25), Args retained                                          
		PUSH  R24                                         ;save reg               (  2 clocks) 
 968:	8f 93       	push	r24
		MOV   R24                , R25                    ;copy reg               (  1 clock ) 
 96a:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte                               ;send via uart          ( 21 clocks) 
 96c:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
        POP   R24                                         ;restore reg            (  2 clocks) 
 970:	8f 91       	pop	r24
		CALL  Debug_Tx_Byte                               ;send via uart          ( 21 clocks) 
 972:	0e 94 ab 04 	call	0x956	; 0x956 <Debug_Tx_Byte>
        RET                                               ;return from subroutine (  4 clocks) 
 976:	08 95       	ret

00000978 <Debug_Tx_Byte_Conf>:


;;================================debug tx confirm starting=================================;; 
Debug_Tx_Byte_Conf:                                       ;total 2.63uS+LT @8MHz  ( 21 clocks) 
        ;write 1 byte, (Arg R24), Args retained                                                
		PUSH  R16                                         ;save reg               (  2 clocks) 
 978:	0f 93       	push	r16
		STS   SRUDR0             , R24                    ;load val to UDR0,      (  2 clocks) 
 97a:	80 93 c6 00 	sts	0x00C6, r24

0000097e <__TXC0_CLEARED>:
    __TXC0_CLEARED:                                                                            
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,    (  2 clocks) 
 97e:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x06                   ;skip if TXC0 is set,   (  2 clocks) 
 982:	06 ff       	sbrs	r16, 6
		RJMP  __TXC0_CLEARED                              ;wait until TXC0 is set (  2 clocks) 
 984:	fc cf       	rjmp	.-8      	; 0x97e <__TXC0_CLEARED>
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,    (  2 clocks) 
 986:	00 91 c0 00 	lds	r16, 0x00C0
		ORI   R16                , (1<<6)                 ;mask bit 6,            (  1 clock ) 
 98a:	00 64       	ori	r16, 0x40	; 64
		STS   SRUCSR0A           , R16                    ;write reg with bit msk (  2 clocks) 
 98c:	00 93 c0 00 	sts	0x00C0, r16
		POP   R16                                         ;restore reg            (  2 clocks) 
 990:	0f 91       	pop	r16
        RET                                               ;return from subroutine (  4 clocks) 
 992:	08 95       	ret

00000994 <Debug_Tx_Word_Conf>:


;;==============================debug tx word confirm starting==============================;; 
Debug_Tx_Word_Conf:                                       ;total 6.38uS+LT @8MHz  ( 51 clocks) 
        ;write 2 bytes, (Arg R24, R25), Args retained                                          
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 994:	0e 94 bc 04 	call	0x978	; 0x978 <Debug_Tx_Byte_Conf>
		PUSH  R24                                         ;save reg               (  2 clocks) 
 998:	8f 93       	push	r24
		MOV   R24                , R25                    ;copy R25 to R24        (  1 clock ) 
 99a:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 99c:	0e 94 bc 04 	call	0x978	; 0x978 <Debug_Tx_Byte_Conf>
		POP   R24                                         ;restore reg            (  2 clocks) 
 9a0:	8f 91       	pop	r24
        RET                                               ;return from subroutine (  4 clocks) 
 9a2:	08 95       	ret

000009a4 <Debug_Tx_DWord_Conf>:


;;==============================debug tx dword confirm starting=============================;; 
Debug_Tx_DWord_Conf:                                      ;total 12.38uS+LT @8MHz ( 99 clocks) 
        ;write 4 bytes, (Arg R22-R25), Args retained                                           
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks) 
 9a4:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R22                    ;copy R22 to R24          (1 clock ) 
 9a8:	86 2f       	mov	r24, r22
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 9aa:	0e 94 bc 04 	call	0x978	; 0x978 <Debug_Tx_Byte_Conf>
		MOV   R24                , R23                    ;copy R23 to R24          (1 clock ) 
 9ae:	87 2f       	mov	r24, r23
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 9b0:	0e 94 bc 04 	call	0x978	; 0x978 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24              (2 clocks) 
 9b4:	80 91 4a 00 	lds	r24, 0x004A
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 9b8:	0e 94 bc 04 	call	0x978	; 0x978 <Debug_Tx_Byte_Conf>
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks) 
 9bc:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R25                    ;copy R22 to R24          (1 clock ) 
 9c0:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 9c2:	0e 94 bc 04 	call	0x978	; 0x978 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24 val,         (2 clocks) 
 9c6:	80 91 4a 00 	lds	r24, 0x004A
        RET                                               ;return from subroutine,  (4 clocks) 
 9ca:	08 95       	ret

000009cc <Debug_Tx_From_RAM>:


;;=============================debug tx confirm from ram starting===========================;; 
Debug_Tx_From_RAM:                                        ;total 4.38uS+LT @8MHz  ( 35 clocks) 
        ;print data from RAM address (Arg R24-R25)                                             
		MOV   R16                , R30                    ;copy R30 to R16          (1 clock ) 
 9cc:	0e 2f       	mov	r16, r30
		MOV   R17                , R31                    ;copy R31 to R17          (1 clock ) 
 9ce:	1f 2f       	mov	r17, r31
		MOV   R18                , R24                    ;copy R24 to R18          (1 clock ) 
 9d0:	28 2f       	mov	r18, r24
		MOV   R30                , R24                    ;copy R22 to R24          (1 clock ) 
 9d2:	e8 2f       	mov	r30, r24
		MOV   R31                , R25                    ;copy R22 to R24          (1 clock ) 
 9d4:	f9 2f       	mov	r31, r25
		LD    R24                , Z                      ;load val to R24          (2 clocks) 
 9d6:	80 81       	ld	r24, Z
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 9d8:	0e 94 bc 04 	call	0x978	; 0x978 <Debug_Tx_Byte_Conf>
		MOV   R30                , R16                    ;copy R16 to R30          (1 clock ) 
 9dc:	e0 2f       	mov	r30, r16
		MOV   R31                , R17                    ;copy R17 to R31          (1 clock ) 
 9de:	f1 2f       	mov	r31, r17
		MOV   R24                , R18                    ;copy R18 to R24          (1 clock ) 
 9e0:	82 2f       	mov	r24, r18
        RET                                               ;return from subroutine,  (4 clocks) 
 9e2:	08 95       	ret

000009e4 <Debug_Tx_RAM_Area>:

;;=============================debug tx confirm ram area starting===========================;; 
Debug_Tx_RAM_Area:                                        ;5.5uS+LT x R22 @8MHz   ( 44 clocks) 
        ;print data from RAM address (arguments R24:R25, R22)                                  
	__DUMP_BYTES:                                                                              
	    CALL  Debug_Tx_From_RAM                           ;send via uart from ram              
 9e4:	0e 94 e6 04 	call	0x9cc	; 0x9cc <Debug_Tx_From_RAM>
		SUBI  R24                , 0x01                   ;decrement from LSByte               
 9e8:	81 50       	subi	r24, 0x01	; 1
        SBCI  R25                , 0x00                   ;decrement if carry                  
 9ea:	90 40       	sbci	r25, 0x00	; 0
		SUBI  R22                , 0x01                   ;decrement                           
 9ec:	61 50       	subi	r22, 0x01	; 1
		BRNE  __DUMP_BYTES                                                                     
 9ee:	d1 f7       	brne	.-12     	; 0x9e4 <Debug_Tx_RAM_Area>
        RET                                               ;return from subroutine,  (4 clocks) 
 9f0:	08 95       	ret

000009f2 <_exit>:
 9f2:	f8 94       	cli

000009f4 <__stop_program>:
 9f4:	ff cf       	rjmp	.-2      	; 0x9f4 <__stop_program>
