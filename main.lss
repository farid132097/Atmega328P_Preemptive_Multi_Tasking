
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000082c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000546  00800100  00800100  000008a0  2**0
                  ALLOC
  2 .stab         00000d44  00000000  00000000  000008a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000006e  00000000  00000000  000015e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00001652  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000bd  00000000  00000000  00001692  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000243  00000000  00000000  0000174f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000b3  00000000  00000000  00001992  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a2  00000000  00000000  00001a45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001ce8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000116  00000000  00000000  00001da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000168  00000000  00000000  00001ebe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__vector_16>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	00 00       	nop
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 00       	nop
  76:	00 00       	nop
  78:	00 00       	nop
  7a:	00 00       	nop
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 00       	nop
  82:	00 00       	nop
  84:	00 00       	nop
  86:	00 00       	nop
  88:	19 c1       	rjmp	.+562    	; 0x2bc <__vector_16>

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61
  96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  9a:	0c 94 14 04 	jmp	0x828	; 0x828 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:
 


int main(void) {
    
	Kernel_Init();
  a2:	0e 94 09 03 	call	0x612	; 0x612 <Kernel_Init>
	//Kernel_SysTick_Reg_Init(0x03, 0x82);
	
	Kernel_Task_Create(Tasks_Task0,  0);
  a6:	85 e4       	ldi	r24, 0x45	; 69
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	0e 94 76 02 	call	0x4ec	; 0x4ec <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task1,  1);
  b0:	85 e2       	ldi	r24, 0x25	; 37
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	61 e0       	ldi	r22, 0x01	; 1
  b6:	0e 94 76 02 	call	0x4ec	; 0x4ec <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task2,  2);
  ba:	85 e0       	ldi	r24, 0x05	; 5
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	62 e0       	ldi	r22, 0x02	; 2
  c0:	0e 94 76 02 	call	0x4ec	; 0x4ec <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task3,  3);
  c4:	8c ee       	ldi	r24, 0xEC	; 236
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	63 e0       	ldi	r22, 0x03	; 3
  ca:	0e 94 76 02 	call	0x4ec	; 0x4ec <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task4,  4);
  ce:	83 ed       	ldi	r24, 0xD3	; 211
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	64 e0       	ldi	r22, 0x04	; 4
  d4:	0e 94 76 02 	call	0x4ec	; 0x4ec <Kernel_Task_Create>
	
	//Kernel_Task_Create(Tasks_Task6,  3);
	//Kernel_Task_Create(Tasks_Task7,  1);
	//Kernel_Task_Create(Tasks_Task8,  7);
	
	Kernel_Start_Tasks();
  d8:	0e 94 cd 02 	call	0x59a	; 0x59a <Kernel_Start_Tasks>
  dc:	ff cf       	rjmp	.-2      	; 0xdc <SRUDR0+0x16>

000000de <Tasks_Task8>:
	  Kernel_Task_Sleep(38);
	
  }
}

void Tasks_Task8(void){
  de:	0f 93       	push	r16
  e0:	1f 93       	push	r17
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  
  Debug_Init(0);
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 b2 03 	call	0x764	; 0x764 <Debug_Init>
  ee:	c0 ef       	ldi	r28, 0xF0	; 240
  f0:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t val = 240;
  
  while(1){
    
	  Debug_Tx_Byte_Conf(8);
  f2:	88 e0       	ldi	r24, 0x08	; 8
  f4:	0e 94 cb 03 	call	0x796	; 0x796 <Debug_Tx_Byte_Conf>
	  Debug_Tx_Word_Conf(val--);
  f8:	8e 01       	movw	r16, r28
  fa:	01 50       	subi	r16, 0x01	; 1
  fc:	10 40       	sbci	r17, 0x00	; 0
  fe:	ce 01       	movw	r24, r28
 100:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <Debug_Tx_Word_Conf>
	  Kernel_Task_Sleep(42);
 104:	8a e2       	ldi	r24, 0x2A	; 42
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 18 03 	call	0x630	; 0x630 <Kernel_Task_Sleep>
 10c:	e8 01       	movw	r28, r16
 10e:	f1 cf       	rjmp	.-30     	; 0xf2 <Tasks_Task8+0x14>

00000110 <Tasks_Task7>:
	  Kernel_Task_Sleep(31);
	
  }
}

void Tasks_Task7(void){
 110:	0f 93       	push	r16
 112:	1f 93       	push	r17
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
  
  Debug_Init(0);
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 b2 03 	call	0x764	; 0x764 <Debug_Init>
 120:	cc ed       	ldi	r28, 0xDC	; 220
 122:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t val = 220;
  
  while(1){
    
	  Debug_Tx_Byte_Conf(7);
 124:	87 e0       	ldi	r24, 0x07	; 7
 126:	0e 94 cb 03 	call	0x796	; 0x796 <Debug_Tx_Byte_Conf>
	  Debug_Tx_Word_Conf(val--);
 12a:	8e 01       	movw	r16, r28
 12c:	01 50       	subi	r16, 0x01	; 1
 12e:	10 40       	sbci	r17, 0x00	; 0
 130:	ce 01       	movw	r24, r28
 132:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <Debug_Tx_Word_Conf>
	  Kernel_Task_Sleep(38);
 136:	86 e2       	ldi	r24, 0x26	; 38
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 18 03 	call	0x630	; 0x630 <Kernel_Task_Sleep>
 13e:	e8 01       	movw	r28, r16
 140:	f1 cf       	rjmp	.-30     	; 0x124 <Tasks_Task7+0x14>

00000142 <Tasks_Task6>:
	  Kernel_Task_Sleep(29);
	
  }
}

void Tasks_Task6(void){
 142:	0f 93       	push	r16
 144:	1f 93       	push	r17
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
  
  Debug_Init(0);
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 b2 03 	call	0x764	; 0x764 <Debug_Init>
 152:	c8 ec       	ldi	r28, 0xC8	; 200
 154:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t val = 200;
  
  while(1){
    
	  Debug_Tx_Byte_Conf(6);
 156:	86 e0       	ldi	r24, 0x06	; 6
 158:	0e 94 cb 03 	call	0x796	; 0x796 <Debug_Tx_Byte_Conf>
	  Debug_Tx_Word_Conf(val--);
 15c:	8e 01       	movw	r16, r28
 15e:	01 50       	subi	r16, 0x01	; 1
 160:	10 40       	sbci	r17, 0x00	; 0
 162:	ce 01       	movw	r24, r28
 164:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <Debug_Tx_Word_Conf>
	  Kernel_Task_Sleep(31);
 168:	8f e1       	ldi	r24, 0x1F	; 31
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 18 03 	call	0x630	; 0x630 <Kernel_Task_Sleep>
 170:	e8 01       	movw	r28, r16
 172:	f1 cf       	rjmp	.-30     	; 0x156 <Tasks_Task6+0x14>

00000174 <Tasks_Task5>:
	  Kernel_Task_Sleep(26);
	
  }
}

void Tasks_Task5(void){
 174:	0f 93       	push	r16
 176:	1f 93       	push	r17
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
  
  Debug_Init(0);
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 b2 03 	call	0x764	; 0x764 <Debug_Init>
 184:	c4 eb       	ldi	r28, 0xB4	; 180
 186:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t val = 180;
  
  while(1){
    
    Debug_Tx_Byte_Conf(5);
 188:	85 e0       	ldi	r24, 0x05	; 5
 18a:	0e 94 cb 03 	call	0x796	; 0x796 <Debug_Tx_Byte_Conf>
	  Debug_Tx_Word_Conf(val--);
 18e:	8e 01       	movw	r16, r28
 190:	01 50       	subi	r16, 0x01	; 1
 192:	10 40       	sbci	r17, 0x00	; 0
 194:	ce 01       	movw	r24, r28
 196:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <Debug_Tx_Word_Conf>
	  Kernel_Task_Sleep(29);
 19a:	8d e1       	ldi	r24, 0x1D	; 29
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 18 03 	call	0x630	; 0x630 <Kernel_Task_Sleep>
 1a2:	e8 01       	movw	r28, r16
 1a4:	f1 cf       	rjmp	.-30     	; 0x188 <Tasks_Task5+0x14>

000001a6 <Tasks_Task4>:
	  Kernel_Task_Sleep(24);
	
  }
}

void Tasks_Task4(void){
 1a6:	0f 93       	push	r16
 1a8:	1f 93       	push	r17
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
  
  Debug_Init(0);
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 b2 03 	call	0x764	; 0x764 <Debug_Init>
 1b6:	c0 ea       	ldi	r28, 0xA0	; 160
 1b8:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t val = 160;
  
  while(1){
    
	
	  Debug_Tx_Byte_Conf(4);
 1ba:	84 e0       	ldi	r24, 0x04	; 4
 1bc:	0e 94 cb 03 	call	0x796	; 0x796 <Debug_Tx_Byte_Conf>
	  Debug_Tx_Word_Conf(val--);
 1c0:	8e 01       	movw	r16, r28
 1c2:	01 50       	subi	r16, 0x01	; 1
 1c4:	10 40       	sbci	r17, 0x00	; 0
 1c6:	ce 01       	movw	r24, r28
 1c8:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <Debug_Tx_Word_Conf>
	  Kernel_Task_Sleep(26);
 1cc:	8a e1       	ldi	r24, 0x1A	; 26
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 18 03 	call	0x630	; 0x630 <Kernel_Task_Sleep>
 1d4:	e8 01       	movw	r28, r16
 1d6:	f1 cf       	rjmp	.-30     	; 0x1ba <Tasks_Task4+0x14>

000001d8 <Tasks_Task3>:
	  Kernel_Task_Sleep(17);
	
  }
}

void Tasks_Task3(void){
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
  
  Debug_Init(0);
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 b2 03 	call	0x764	; 0x764 <Debug_Init>
 1e8:	cc e8       	ldi	r28, 0x8C	; 140
 1ea:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t val = 140;
  
  while(1){
    
	  Debug_Tx_Byte_Conf(3);
 1ec:	83 e0       	ldi	r24, 0x03	; 3
 1ee:	0e 94 cb 03 	call	0x796	; 0x796 <Debug_Tx_Byte_Conf>
	  Debug_Tx_Word_Conf(val--);
 1f2:	8e 01       	movw	r16, r28
 1f4:	01 50       	subi	r16, 0x01	; 1
 1f6:	10 40       	sbci	r17, 0x00	; 0
 1f8:	ce 01       	movw	r24, r28
 1fa:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <Debug_Tx_Word_Conf>
	  Kernel_Task_Sleep(24);
 1fe:	88 e1       	ldi	r24, 0x18	; 24
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 18 03 	call	0x630	; 0x630 <Kernel_Task_Sleep>
 206:	e8 01       	movw	r28, r16
 208:	f1 cf       	rjmp	.-30     	; 0x1ec <Tasks_Task3+0x14>

0000020a <Tasks_Task2>:
	  Kernel_Task_Sleep(5);
	
  }
}

void Tasks_Task2(void){
 20a:	ff 92       	push	r15
 20c:	0f 93       	push	r16
 20e:	1f 93       	push	r17
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
  
  Debug_Init(0);
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 b2 03 	call	0x764	; 0x764 <Debug_Init>
  DDRD |= (1<<6);
 21c:	56 9a       	sbi	0x0a, 6	; 10
 21e:	c8 e7       	ldi	r28, 0x78	; 120
 220:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t val = 120;
  
  while(1){
    
    PORTD ^= (1<<6);
 222:	80 e4       	ldi	r24, 0x40	; 64
 224:	f8 2e       	mov	r15, r24
 226:	8b b1       	in	r24, 0x0b	; 11
 228:	8f 25       	eor	r24, r15
 22a:	8b b9       	out	0x0b, r24	; 11
	  Debug_Tx_Byte_Conf(2);
 22c:	82 e0       	ldi	r24, 0x02	; 2
 22e:	0e 94 cb 03 	call	0x796	; 0x796 <Debug_Tx_Byte_Conf>
    Debug_Tx_Word_Conf(val--);
 232:	8e 01       	movw	r16, r28
 234:	01 50       	subi	r16, 0x01	; 1
 236:	10 40       	sbci	r17, 0x00	; 0
 238:	ce 01       	movw	r24, r28
 23a:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <Debug_Tx_Word_Conf>
	  Kernel_Task_Sleep(17);
 23e:	81 e1       	ldi	r24, 0x11	; 17
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 18 03 	call	0x630	; 0x630 <Kernel_Task_Sleep>
 246:	e8 01       	movw	r28, r16
 248:	ee cf       	rjmp	.-36     	; 0x226 <Tasks_Task2+0x1c>

0000024a <Tasks_Task1>:
	  Debug_Tx_Word_Conf(val--);
    Kernel_Task_Sleep(2);
  }
}

void Tasks_Task1(void){
 24a:	ff 92       	push	r15
 24c:	0f 93       	push	r16
 24e:	1f 93       	push	r17
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
  
  Debug_Init(0);
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 b2 03 	call	0x764	; 0x764 <Debug_Init>
  DDRD |= (1<<5);
 25c:	55 9a       	sbi	0x0a, 5	; 10
 25e:	c4 e6       	ldi	r28, 0x64	; 100
 260:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t val = 100;
  
  while(1){
    
    PORTD ^= (1<<5);
 262:	90 e2       	ldi	r25, 0x20	; 32
 264:	f9 2e       	mov	r15, r25
 266:	8b b1       	in	r24, 0x0b	; 11
 268:	8f 25       	eor	r24, r15
 26a:	8b b9       	out	0x0b, r24	; 11
	  Debug_Tx_Byte_Conf(1);
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	0e 94 cb 03 	call	0x796	; 0x796 <Debug_Tx_Byte_Conf>
	  Debug_Tx_Word_Conf(val--);
 272:	8e 01       	movw	r16, r28
 274:	01 50       	subi	r16, 0x01	; 1
 276:	10 40       	sbci	r17, 0x00	; 0
 278:	ce 01       	movw	r24, r28
 27a:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <Debug_Tx_Word_Conf>
	  Kernel_Task_Sleep(5);
 27e:	85 e0       	ldi	r24, 0x05	; 5
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 18 03 	call	0x630	; 0x630 <Kernel_Task_Sleep>
 286:	e8 01       	movw	r28, r16
 288:	ee cf       	rjmp	.-36     	; 0x266 <Tasks_Task1+0x1c>

0000028a <Tasks_Task0>:
#include "tasks.h"
#include "debug.h"



void Tasks_Task0(void){
 28a:	0f 93       	push	r16
 28c:	1f 93       	push	r17
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
  
  Debug_Init(0);
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 b2 03 	call	0x764	; 0x764 <Debug_Init>
 29a:	c0 e5       	ldi	r28, 0x50	; 80
 29c:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t val = 80;

  while(1){
    Debug_Tx_Byte_Conf(0);
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	0e 94 cb 03 	call	0x796	; 0x796 <Debug_Tx_Byte_Conf>
	  Debug_Tx_Word_Conf(val--);
 2a4:	8e 01       	movw	r16, r28
 2a6:	01 50       	subi	r16, 0x01	; 1
 2a8:	10 40       	sbci	r17, 0x00	; 0
 2aa:	ce 01       	movw	r24, r28
 2ac:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <Debug_Tx_Word_Conf>
    Kernel_Task_Sleep(2);
 2b0:	82 e0       	ldi	r24, 0x02	; 2
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 18 03 	call	0x630	; 0x630 <Kernel_Task_Sleep>
 2b8:	e8 01       	movw	r28, r16
 2ba:	f1 cf       	rjmp	.-30     	; 0x29e <Tasks_Task0+0x14>

000002bc <__vector_16>:


;;=================================ISR execution starting===================================;; 
.global  __vector_16
    __vector_16:                                          ;total 26.13uS @8MHz    (211 clocks) 
	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 2bc:	29 9a       	sbi	0x05, 1	; 5
        KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	1f 92       	push	r1
 2c6:	11 24       	eor	r1, r1
 2c8:	2f 92       	push	r2
 2ca:	3f 92       	push	r3
 2cc:	4f 92       	push	r4
 2ce:	5f 92       	push	r5
 2d0:	6f 92       	push	r6
 2d2:	7f 92       	push	r7
 2d4:	8f 92       	push	r8
 2d6:	9f 92       	push	r9
 2d8:	af 92       	push	r10
 2da:	bf 92       	push	r11
 2dc:	cf 92       	push	r12
 2de:	df 92       	push	r13
 2e0:	ef 92       	push	r14
 2e2:	ff 92       	push	r15
 2e4:	0f 93       	push	r16
 2e6:	1f 93       	push	r17
 2e8:	2f 93       	push	r18
 2ea:	3f 93       	push	r19
 2ec:	4f 93       	push	r20
 2ee:	5f 93       	push	r21
 2f0:	6f 93       	push	r22
 2f2:	7f 93       	push	r23
 2f4:	8f 93       	push	r24
 2f6:	9f 93       	push	r25
 2f8:	af 93       	push	r26
 2fa:	bf 93       	push	r27
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	ef 93       	push	r30
 302:	ff 93       	push	r31
		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 304:	00 91 06 01 	lds	r16, 0x0106
 308:	00 93 46 00 	sts	0x0046, r16
		KER_TICK_INCREMENT                                ;increment tick counter ( 27 clocks) 
 30c:	00 91 00 01 	lds	r16, 0x0100
 310:	03 95       	inc	r16
 312:	00 93 00 01 	sts	0x0100, r16
 316:	00 91 01 01 	lds	r16, 0x0101
 31a:	01 1d       	adc	r16, r1
 31c:	00 93 01 01 	sts	0x0101, r16
 320:	00 91 02 01 	lds	r16, 0x0102
 324:	01 1d       	adc	r16, r1
 326:	00 93 02 01 	sts	0x0102, r16
 32a:	00 91 03 01 	lds	r16, 0x0103
 32e:	01 1d       	adc	r16, r1
 330:	00 93 03 01 	sts	0x0103, r16
 334:	00 91 04 01 	lds	r16, 0x0104
 338:	01 1d       	adc	r16, r1
 33a:	00 93 04 01 	sts	0x0104, r16
        KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 33e:	0d b7       	in	r16, 0x3d	; 61
 340:	1e b7       	in	r17, 0x3e	; 62
 342:	20 91 07 01 	lds	r18, 0x0107
 346:	22 0f       	add	r18, r18
 348:	ea e0       	ldi	r30, 0x0A	; 10
 34a:	f1 e0       	ldi	r31, 0x01	; 1
 34c:	e2 0f       	add	r30, r18
 34e:	f1 1d       	adc	r31, r1
 350:	01 93       	st	Z+, r16
 352:	10 83       	st	Z, r17
		
		KER_DEC_SLP_TIMEOUT                               ;decrement of sleep time
 354:	00 91 08 01 	lds	r16, 0x0108

00000358 <_UPDATE_TASK_READY5>:
 358:	0a 95       	dec	r16
 35a:	20 2f       	mov	r18, r16
 35c:	22 0f       	add	r18, r18
 35e:	e2 e3       	ldi	r30, 0x32	; 50
 360:	f1 e0       	ldi	r31, 0x01	; 1
 362:	e2 0f       	add	r30, r18
 364:	f1 1d       	adc	r31, r1
 366:	a1 91       	ld	r26, Z+
 368:	b0 81       	ld	r27, Z
 36a:	2a 2f       	mov	r18, r26
 36c:	2b 2b       	or	r18, r27
 36e:	41 f0       	breq	.+16     	; 0x380 <_VAL_NULL5>
 370:	11 97       	sbiw	r26, 0x01	; 1
 372:	b0 83       	st	Z, r27
 374:	a2 93       	st	-Z, r26
 376:	2a 2f       	mov	r18, r26
 378:	2b 2b       	or	r18, r27
 37a:	11 f0       	breq	.+4      	; 0x380 <_VAL_NULL5>
 37c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <_LOOP5>

00000380 <_VAL_NULL5>:
 380:	ee e1       	ldi	r30, 0x1E	; 30
 382:	f1 e0       	ldi	r31, 0x01	; 1
 384:	e0 0f       	add	r30, r16
 386:	f1 1d       	adc	r31, r1
 388:	21 e0       	ldi	r18, 0x01	; 1
 38a:	20 83       	st	Z, r18

0000038c <_LOOP5>:
 38c:	00 30       	cpi	r16, 0x00	; 0
 38e:	21 f7       	brne	.-56     	; 0x358 <_UPDATE_TASK_READY5>
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 14 clocks) 
 390:	00 91 08 01 	lds	r16, 0x0108

00000394 <_CH_TASK_READY6>:
 394:	0a 95       	dec	r16
 396:	10 2f       	mov	r17, r16
 398:	ee e1       	ldi	r30, 0x1E	; 30
 39a:	f1 e0       	ldi	r31, 0x01	; 1
 39c:	e1 0f       	add	r30, r17
 39e:	f1 1d       	adc	r31, r1
 3a0:	10 81       	ld	r17, Z
 3a2:	11 30       	cpi	r17, 0x01	; 1
 3a4:	21 f0       	breq	.+8      	; 0x3ae <_NEXT_TASK_FOUND6>

000003a6 <_LOOP_CNT6>:
 3a6:	00 30       	cpi	r16, 0x00	; 0
 3a8:	a9 f7       	brne	.-22     	; 0x394 <_CH_TASK_READY6>
 3aa:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <_IDLE_TASK6>

000003ae <_NEXT_TASK_FOUND6>:
 3ae:	00 93 07 01 	sts	0x0107, r16
 3b2:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <_EXIT6>

000003b6 <_IDLE_TASK6>:
 3b6:	00 e0       	ldi	r16, 0x00	; 0
 3b8:	00 93 07 01 	sts	0x0107, r16

000003bc <_EXIT6>:
	    
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 3bc:	00 91 07 01 	lds	r16, 0x0107
 3c0:	00 0f       	add	r16, r16
 3c2:	ea e0       	ldi	r30, 0x0A	; 10
 3c4:	f1 e0       	ldi	r31, 0x01	; 1
 3c6:	e0 0f       	add	r30, r16
 3c8:	f1 1d       	adc	r31, r1
 3ca:	01 91       	ld	r16, Z+
 3cc:	10 81       	ld	r17, Z
 3ce:	0d bf       	out	0x3d, r16	; 61
 3d0:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 3d2:	ff 91       	pop	r31
 3d4:	ef 91       	pop	r30
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	bf 91       	pop	r27
 3dc:	af 91       	pop	r26
 3de:	9f 91       	pop	r25
 3e0:	8f 91       	pop	r24
 3e2:	7f 91       	pop	r23
 3e4:	6f 91       	pop	r22
 3e6:	5f 91       	pop	r21
 3e8:	4f 91       	pop	r20
 3ea:	3f 91       	pop	r19
 3ec:	2f 91       	pop	r18
 3ee:	1f 91       	pop	r17
 3f0:	0f 91       	pop	r16
 3f2:	ff 90       	pop	r15
 3f4:	ef 90       	pop	r14
 3f6:	df 90       	pop	r13
 3f8:	cf 90       	pop	r12
 3fa:	bf 90       	pop	r11
 3fc:	af 90       	pop	r10
 3fe:	9f 90       	pop	r9
 400:	8f 90       	pop	r8
 402:	7f 90       	pop	r7
 404:	6f 90       	pop	r6
 406:	5f 90       	pop	r5
 408:	4f 90       	pop	r4
 40a:	3f 90       	pop	r3
 40c:	2f 90       	pop	r2
 40e:	1f 90       	pop	r1
 410:	0f 90       	pop	r0
 412:	0f be       	out	0x3f, r0	; 63
 414:	0f 90       	pop	r0
	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 416:	29 98       	cbi	0x05, 1	; 5
		RETI                                              ;return from interrupt  (  4 clocks) 
 418:	18 95       	reti

0000041a <Kernel_SysTick_Reg_Init>:


;;================================SysTick reg init starting=================================;; 
Kernel_SysTick_Reg_Init:                                  ;total operation        ( 55 clocks) 
        ;arg1 -> prescaler R24, arg2 -> reload val R22
        CLI                                               ;disable global int,    (  1 clock )
 41a:	f8 94       	cli
        PUSH  R30
 41c:	ef 93       	push	r30
		PUSH  R31
 41e:	ff 93       	push	r31
		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 420:	21 9a       	sbi	0x04, 1	; 4
 422:	29 98       	cbi	0x05, 1	; 5
		LDI   R16                , 0x00                   ;set 0x00 to R16,       (  1 clock ) 
 424:	00 e0       	ldi	r16, 0x00	; 0
		
		;clear tick counter
		STS   KerBase+OFF_TICK0  , R16                    ;clear  KerBase[0]      (  2 clocks) 
 426:	00 93 00 01 	sts	0x0100, r16
		STS   KerBase+OFF_TICK1  , R16                    ;clear  KerBase[1]      (  2 clocks) 
 42a:	00 93 01 01 	sts	0x0101, r16
		STS   KerBase+OFF_TICK2  , R16                    ;clear  KerBase[2]      (  2 clocks) 
 42e:	00 93 02 01 	sts	0x0102, r16
		STS   KerBase+OFF_TICK3  , R16                    ;clear  KerBase[3]      (  2 clocks) 
 432:	00 93 03 01 	sts	0x0103, r16
		STS   KerBase+OFF_TICK4  , R16                    ;clear  KerBase[4]      (  2 clocks) 
 436:	00 93 04 01 	sts	0x0104, r16
		
		;clear prescaler
		STS   KerBase+OFF_PRS    , R16                    ;clear  KerBase[5]      (  2 clocks) 
 43a:	00 93 05 01 	sts	0x0105, r16
		
		;clear reload value
		STS   KerBase+OFF_RLD    , R16                    ;clear  KerBase[6]      (  2 clocks) 
 43e:	00 93 06 01 	sts	0x0106, r16
		
		;clear task id
		STS   KerBase+OFF_TID    , R16                    ;clear  KerBase[7]      (  2 clocks) 
 442:	00 93 07 01 	sts	0x0107, r16
		
		;clear ntask
		STS   KerBase+OFF_NTSK   , R16                    ;clear  KerBase[8]      (  2 clocks) 
 446:	00 93 08 01 	sts	0x0108, r16
		
		;reserved, not used
        STS   KerBase+0x09       , R16                    ;clear  KerBase[9]      (  2 clocks) 
 44a:	00 93 09 01 	sts	0x0109, r16
		
		;clear all timer registers
		STS   SRTCCR0A           , R16                    ;clear TCCR0A           (  2 clocks) 
 44e:	00 93 44 00 	sts	0x0044, r16
		STS   SRTCCR0B           , R16                    ;clear TCCR0B           (  2 clocks) 
 452:	00 93 45 00 	sts	0x0045, r16
		STS   SRTIMSK0           , R16                    ;clear TIMSK0           (  2 clocks) 
 456:	00 93 6e 00 	sts	0x006E, r16
		STS   SRTIFR0            , R16                    ;clear TIFR0            (  2 clocks) 
 45a:	00 93 35 00 	sts	0x0035, r16
		STS   SROCR0A            , R16                    ;clear OCR0A            (  2 clocks) 
 45e:	00 93 47 00 	sts	0x0047, r16
		STS   SROCR0B            , R16                    ;clear OCR0B            (  2 clocks) 
 462:	00 93 48 00 	sts	0x0048, r16
		STS   SRTCNT0            , R16                    ;clear TCNT0            (  2 clocks) 
 466:	00 93 46 00 	sts	0x0046, r16
		
		;store prescaler value
		MOV   R16                , R24                    ;prescaler from arg1    (  1 clock ) 
 46a:	08 2f       	mov	r16, r24
		STS   KerBase+OFF_PRS    , R16                    ;KerBase[5] prescaler   (  2 clocks) 
 46c:	00 93 05 01 	sts	0x0105, r16
        
		;store reload value
		MOV   R16                , R22                    ;reload val from arg2   (  1 clock ) 
 470:	06 2f       	mov	r16, r22
		STS   KerBase+OFF_RLD    , R16                    ;KerBase[6] reload val  (  2 clocks) 
 472:	00 93 06 01 	sts	0x0106, r16
		POP   R31
 476:	ff 91       	pop	r31
		POP   R30
 478:	ef 91       	pop	r30
		
		RET                                               ;return from subroutine (  4 clocks) 
 47a:	08 95       	ret

0000047c <Kernel_SysTick_Val_Get>:

;;===============================SysTick value get starting=================================;; 
Kernel_SysTick_Val_Get:                                   ;total operation        ( 42 clocks) 
    _READ_AGAIN:
	    ;first read & store to actual return registers
		LDS   R18		         , KerBase+OFF_TICK0      ;byte0 (LSB)            (  2 clocks) 
 47c:	20 91 00 01 	lds	r18, 0x0100
		LDS   R19		         , KerBase+OFF_TICK1      ;byte1                  (  2 clocks) 
 480:	30 91 01 01 	lds	r19, 0x0101
		LDS   R20		         , KerBase+OFF_TICK2      ;byte2                  (  2 clocks) 
 484:	40 91 02 01 	lds	r20, 0x0102
		LDS   R21		         , KerBase+OFF_TICK3      ;byte3                  (  2 clocks) 
 488:	50 91 03 01 	lds	r21, 0x0103
		LDS   R22		         , KerBase+OFF_TICK4      ;byte4 (MSB)            (  2 clocks) 
 48c:	60 91 04 01 	lds	r22, 0x0104
		
		;second read to scratch registers
		LDS   R26		         , KerBase+OFF_TICK0      ;byte0 (LSB)            (  2 clocks) 
 490:	a0 91 00 01 	lds	r26, 0x0100
		LDS   R27		         , KerBase+OFF_TICK1      ;byte1                  (  2 clocks) 
 494:	b0 91 01 01 	lds	r27, 0x0101
		LDS   R30		         , KerBase+OFF_TICK2      ;byte2                  (  2 clocks) 
 498:	e0 91 02 01 	lds	r30, 0x0102
		LDS   R31		         , KerBase+OFF_TICK3      ;byte3                  (  2 clocks) 
 49c:	f0 91 03 01 	lds	r31, 0x0103
		LDS   R0		         , KerBase+OFF_TICK4      ;byte4 (MSB)            (  2 clocks) 
 4a0:	00 90 04 01 	lds	r0, 0x0104
		
		;compare all pairs
		CP    R18                , R26                    ;compare                (  1 clock ) 
 4a4:	2a 17       	cp	r18, r26
		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 4a6:	51 f7       	brne	.-44     	; 0x47c <Kernel_SysTick_Val_Get>
		CP    R19                , R27                    ;compare                (  1 clock ) 
 4a8:	3b 17       	cp	r19, r27
		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 4aa:	41 f7       	brne	.-48     	; 0x47c <Kernel_SysTick_Val_Get>
		CP    R20                , R30                    ;compare                (  1 clock ) 
 4ac:	4e 17       	cp	r20, r30
		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 4ae:	31 f7       	brne	.-52     	; 0x47c <Kernel_SysTick_Val_Get>
		CP    R21                , R31                    ;compare                (  1 clock ) 
 4b0:	5f 17       	cp	r21, r31
		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 4b2:	21 f7       	brne	.-56     	; 0x47c <Kernel_SysTick_Val_Get>
		CP    R22                , R0                     ;compare                (  1 clock ) 
 4b4:	60 15       	cp	r22, r0
		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 4b6:	11 f7       	brne	.-60     	; 0x47c <Kernel_SysTick_Val_Get>
		
		;only 5 bytes data are taken, force clear 3 high bytes (64bit return R25:R18)
		LDI   R23		         , 0x00                   ;byte5 -> R23           (  1 clocks) 
 4b8:	70 e0       	ldi	r23, 0x00	; 0
		LDI   R24		         , 0x00                   ;byte6 -> R24           (  1 clocks) 
 4ba:	80 e0       	ldi	r24, 0x00	; 0
		LDI   R25		         , 0x00                   ;byte7 -> R25           (  1 clocks) 
 4bc:	90 e0       	ldi	r25, 0x00	; 0
		RET                                               ;return from subroutine (  4 clocks) 
 4be:	08 95       	ret

000004c0 <Kernel_SysTick_Val_Safely_Get>:



;;============================SysTick value safely get starting=============================;; 
Kernel_SysTick_Val_Safely_Get:                            ;total operation        ( 20 clocks) 
        IN    R2                 , IOSREG                 ;save SREG              (  1 clock ) 
 4c0:	2f b6       	in	r2, 0x3f	; 63
        CLI                                               ;disable interrupts     (  1 clock ) 
 4c2:	f8 94       	cli
		LDS   R18		         , KerBase+OFF_TICK0      ;byte0 -> R18 (LSB)     (  2 clocks) 
 4c4:	20 91 00 01 	lds	r18, 0x0100
		LDS   R19		         , KerBase+OFF_TICK1      ;byte1 -> R19           (  2 clocks) 
 4c8:	30 91 01 01 	lds	r19, 0x0101
		LDS   R20		         , KerBase+OFF_TICK2      ;byte2 -> R20           (  2 clocks) 
 4cc:	40 91 02 01 	lds	r20, 0x0102
		LDS   R21		         , KerBase+OFF_TICK3      ;byte3 -> R21           (  2 clocks) 
 4d0:	50 91 03 01 	lds	r21, 0x0103
		LDS   R22		         , KerBase+OFF_TICK4      ;byte4 -> R22           (  2 clocks) 
 4d4:	60 91 04 01 	lds	r22, 0x0104
		LDI   R23		         , 0x00                   ;byte5 -> R23           (  1 clocks) 
 4d8:	70 e0       	ldi	r23, 0x00	; 0
		LDI   R24		         , 0x00                   ;byte6 -> R24           (  1 clocks) 
 4da:	80 e0       	ldi	r24, 0x00	; 0
		LDI   R25		         , 0x00                   ;byte7 -> R25 (MSB)     (  1 clocks) 
 4dc:	90 e0       	ldi	r25, 0x00	; 0
		OUT   IOSREG             , R2          		      ;restore SREG           (  1 clock ) 
 4de:	2f be       	out	0x3f, r2	; 63
		RET                                               ;return from subroutine (  4 clocks) 
 4e0:	08 95       	ret

000004e2 <Kernel_Interrupt_Sts_Get>:



;;==============================interrupt status get starting===============================;; 
Kernel_Interrupt_Sts_Get:                                 ;total operation        ( 10 clocks) 
        LDI   R24		         , 0x00                   ;clear R24              (  1 clock ) 
 4e2:	80 e0       	ldi	r24, 0x00	; 0
        IN    R16		         , IOSREG                 ;save SREG in R16       (  1 clock ) 
 4e4:	0f b7       	in	r16, 0x3f	; 63
		SBRC  R16		         , 0x07                   ;check I flag->bit7     (  3 clocks) 
 4e6:	07 fd       	sbrc	r16, 7
		LDI   R24		         , 0x01                   ;set R24 to 1           (  1 clock ) 
 4e8:	81 e0       	ldi	r24, 0x01	; 1
		RET                                               ;return from subroutine (  4 clocks) 
 4ea:	08 95       	ret

000004ec <Kernel_Task_Create>:

;;================================kernel task init starting=================================;; 
Kernel_Task_Create:                                       ;total operation        (130 clocks) 
        ;func_ptr->R25:R24, task_priority->R22 
        ;save main SP & Z pointer 
        IN    R2                 , IOSPL                  ;save SPL of MSP        (  1 clock ) 
 4ec:	2d b6       	in	r2, 0x3d	; 61
        IN    R3                 , IOSPH                  ;save SPH of MSP        (  1 clock ) 
 4ee:	3e b6       	in	r3, 0x3e	; 62
        MOV   R4                 , R30                    ;save ZPL               (  1 clock ) 
 4f0:	4e 2e       	mov	r4, r30
		MOV   R5                 , R31                    ;save ZPH               (  1 clock ) 
 4f2:	5f 2e       	mov	r5, r31
        
		;across this function, R16 will be used as task_id 
		LDS   R16                , KerBase+OFF_TID        ;load task_id           (  2 clocks) 
 4f4:	00 91 07 01 	lds	r16, 0x0107
		
		;set priority to KerSchPr+task_id
		LDI   R30                , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 4f8:	e8 e2       	ldi	r30, 0x28	; 40
		LDI   R31                , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 4fa:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 4fc:	e0 0f       	add	r30, r16
		ADC   R31                , R1                     ;add high byte+carry    (  1 clock ) 
 4fe:	f1 1d       	adc	r31, r1
		ST    Z                  , R20                    ;save priority          (  2 clocks) 
 500:	40 83       	st	Z, r20
		
		;increment ntask
		LDS   R17                , KerBase+OFF_NTSK       ;load ntask             (  2 clocks) 
 502:	10 91 08 01 	lds	r17, 0x0108
		INC   R17                                         ;increment ntask        (  1 clock ) 
 506:	13 95       	inc	r17
		STS   KerBase+OFF_NTSK   , R17                    ;store ntask            (  2 clocks) 
 508:	10 93 08 01 	sts	0x0108, r17
		
		;stack pointer for current task (KerStack + KER_STK_SZ*(ker_ind+1) - 1) ->stack top 
		MOV   R17                , R16                    ;load task_id           (  1 clock )
 50c:	10 2f       	mov	r17, r16
		INC   R17                                         ;increment task_id      (  1 clock ) 
 50e:	13 95       	inc	r17
		LDI   R18                , KER_STK_SZ             ;load stack size        (  1 clock ) 
 510:	20 e8       	ldi	r18, 0x80	; 128
		MUL   R17                , R18                    ;multiply to get offset (  2 clocks) 
 512:	12 9f       	mul	r17, r18
		MOV   R30                , R0                     ;load multiplied low    (  1 clocks) 
 514:	e0 2d       	mov	r30, r0
		MOV   R31                , R1                     ;load multiplied high   (  1 clocks) 
 516:	f1 2d       	mov	r31, r1
		SBIW  R30                , 0x01                   ;dec multiplied val     (  2 clocks) 
 518:	31 97       	sbiw	r30, 0x01	; 1
		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 51a:	11 24       	eor	r1, r1
		LDI   R17                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
 51c:	16 e4       	ldi	r17, 0x46	; 70
		LDI   R18                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
 51e:	21 e0       	ldi	r18, 0x01	; 1
		ADD   R30                , R17                    ;add low bytes          (  1 clock ) 
 520:	e1 0f       	add	r30, r17
		ADC   R31                , R18                    ;add high bytes+carry   (  1 clock ) 
 522:	f2 1f       	adc	r31, r18
		OUT   IOSPL              , R30                    ;load SPL               (  1 clock ) 
 524:	ed bf       	out	0x3d, r30	; 61
        OUT   IOSPH              , R31                    ;load SPH               (  1 clock ) 
 526:	fe bf       	out	0x3e, r31	; 62
		
		;function argument directly returns word address
	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
 528:	8f 93       	push	r24
		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 52a:	9f 93       	push	r25
		
		;push context to stack of this task
		KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 52c:	0f 92       	push	r0
 52e:	0f b6       	in	r0, 0x3f	; 63
 530:	0f 92       	push	r0
 532:	1f 92       	push	r1
 534:	11 24       	eor	r1, r1
 536:	2f 92       	push	r2
 538:	3f 92       	push	r3
 53a:	4f 92       	push	r4
 53c:	5f 92       	push	r5
 53e:	6f 92       	push	r6
 540:	7f 92       	push	r7
 542:	8f 92       	push	r8
 544:	9f 92       	push	r9
 546:	af 92       	push	r10
 548:	bf 92       	push	r11
 54a:	cf 92       	push	r12
 54c:	df 92       	push	r13
 54e:	ef 92       	push	r14
 550:	ff 92       	push	r15
 552:	0f 93       	push	r16
 554:	1f 93       	push	r17
 556:	2f 93       	push	r18
 558:	3f 93       	push	r19
 55a:	4f 93       	push	r20
 55c:	5f 93       	push	r21
 55e:	6f 93       	push	r22
 560:	7f 93       	push	r23
 562:	8f 93       	push	r24
 564:	9f 93       	push	r25
 566:	af 93       	push	r26
 568:	bf 93       	push	r27
 56a:	cf 93       	push	r28
 56c:	df 93       	push	r29
 56e:	ef 93       	push	r30
 570:	ff 93       	push	r31
		
		;read stack pointer of current task (necessary when restore)
		IN    R17                , IOSPL                  ;read SPL               (  1 clock ) 
 572:	1d b7       	in	r17, 0x3d	; 61
        IN    R18                , IOSPH                  ;read SPH               (  1 clock ) 
 574:	2e b7       	in	r18, 0x3e	; 62
		
		;calculate the address where current task's SP will be stored and store SP
		MOV   R19                , R16                    ;fetch task_id from arg (  1 clock ) 
 576:	30 2f       	mov	r19, r16
		LSL   R19                                         ;left shift to multiply (  1 clock ) 
 578:	33 0f       	add	r19, r19
		LDI   R30                , lo8(KerSP)             ;fetch base pos low     (  1 clock ) 
 57a:	ea e0       	ldi	r30, 0x0A	; 10
		LDI   R31                , hi8(KerSP)             ;fetch base pos high    (  1 clock ) 
 57c:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R19                    ;add offset to array    (  1 clock ) 
 57e:	e3 0f       	add	r30, r19
		ADC   R31                , R1                     ;add carry if any       (  1 clock ) 
 580:	f1 1d       	adc	r31, r1
		ST    Z+                 , R17                    ;SPL at KerSp+offset    (  2 clocks) 
 582:	11 93       	st	Z+, r17
		ST    z                  , R18                    ;SPH at KerSp+offset    (  2 clocks) 
 584:	20 83       	st	Z, r18
		
		;increment task_id
		LDS   R17                , KerBase+OFF_TID        ;load task_id           (  2 clocks) 
 586:	10 91 07 01 	lds	r17, 0x0107
		INC   R17                                         ;increment task_id      (  1 clock ) 
 58a:	13 95       	inc	r17
		STS   KerBase+OFF_TID    , R17                    ;store task_id          (  2 clocks) 
 58c:	10 93 07 01 	sts	0x0107, r17
		
		;load Main SP, restore Z pointer
		OUT   IOSPL              , R2                     ;load SPL               (  1 clock ) 
 590:	2d be       	out	0x3d, r2	; 61
        OUT   IOSPH              , R3                     ;load SPH               (  1 clock ) 
 592:	3e be       	out	0x3e, r3	; 62
		MOV   R30                , R4                     ;push ZPL               (  1 clock ) 
 594:	e4 2d       	mov	r30, r4
		MOV   R31                , R5                     ;push ZPL               (  1 clock ) 
 596:	f5 2d       	mov	r31, r5
		
		RET                                               ;return from subroutine (  4 clocks) 
 598:	08 95       	ret

0000059a <Kernel_Start_Tasks>:

;;===================================kernel task starting===================================;; 
Kernel_Start_Tasks:
		;start executing from task0
		;save ZP
		MOV   R4                 , R30                    ;save ZPL               (  2 clocks) 
 59a:	4e 2e       	mov	r4, r30
		MOV   R5                 , R31                    ;save ZPH               (  2 clocks) 
 59c:	5f 2e       	mov	r5, r31
		
		;clear task_id
		LDI   R16                , 0x00                   ;load task_id           (  2 clocks) 
 59e:	00 e0       	ldi	r16, 0x00	; 0
		STS   KerBase+OFF_TID    , R16                    ;store task_id          (  2 clocks) 
 5a0:	00 93 07 01 	sts	0x0107, r16
		
		;load ZP with addr+offset
		LDI   R30                , lo8(KerSP+0x00)        ;fetch ZPL KerSP->TID0  (  1 clock ) 
 5a4:	ea e0       	ldi	r30, 0x0A	; 10
		LDI   R31                , hi8(KerSP+0x00)        ;fetch ZPH KerSP->TID0  (  1 clock ) 
 5a6:	f1 e0       	ldi	r31, 0x01	; 1
		
		;load TID0 task's SP
		LD    R16                , Z+                     ;load val from Z, inc Z (  2 clocks) 
 5a8:	01 91       	ld	r16, Z+
		LD    R17                , Z                      ;load val from Z+1      (  2 clocks) 
 5aa:	10 81       	ld	r17, Z
		
		;set TID0 task's SP
		OUT   IOSPL              , R16                    ;load SPL               (  1 clock ) 
 5ac:	0d bf       	out	0x3d, r16	; 61
        OUT   IOSPH              , R17                    ;load SPH               (  1 clock ) 
 5ae:	1e bf       	out	0x3e, r17	; 62
        
        ;forcefully restore context, in ISR it will be stored automatically
		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 5b0:	ff 91       	pop	r31
 5b2:	ef 91       	pop	r30
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	bf 91       	pop	r27
 5ba:	af 91       	pop	r26
 5bc:	9f 91       	pop	r25
 5be:	8f 91       	pop	r24
 5c0:	7f 91       	pop	r23
 5c2:	6f 91       	pop	r22
 5c4:	5f 91       	pop	r21
 5c6:	4f 91       	pop	r20
 5c8:	3f 91       	pop	r19
 5ca:	2f 91       	pop	r18
 5cc:	1f 91       	pop	r17
 5ce:	0f 91       	pop	r16
 5d0:	ff 90       	pop	r15
 5d2:	ef 90       	pop	r14
 5d4:	df 90       	pop	r13
 5d6:	cf 90       	pop	r12
 5d8:	bf 90       	pop	r11
 5da:	af 90       	pop	r10
 5dc:	9f 90       	pop	r9
 5de:	8f 90       	pop	r8
 5e0:	7f 90       	pop	r7
 5e2:	6f 90       	pop	r6
 5e4:	5f 90       	pop	r5
 5e6:	4f 90       	pop	r4
 5e8:	3f 90       	pop	r3
 5ea:	2f 90       	pop	r2
 5ec:	1f 90       	pop	r1
 5ee:	0f 90       	pop	r0
 5f0:	0f be       	out	0x3f, r0	; 63
 5f2:	0f 90       	pop	r0
		
		;restore ZP
		MOV   R30                , R4                     ;restore ZPL            (  2 clocks) 
 5f4:	e4 2d       	mov	r30, r4
		MOV   R31                , R5                     ;restore ZPL            (  2 clocks) 
 5f6:	f5 2d       	mov	r31, r5
		
		LDS   R16		         , KerBase+OFF_PRS        ;load prescaler         (  2 clocks) 
 5f8:	00 91 05 01 	lds	r16, 0x0105
		LDS   R17		         , KerBase+OFF_RLD        ;load reload val        (  2 clocks) 
 5fc:	10 91 06 01 	lds	r17, 0x0106
		STS   SRTCCR0B           , R16                    ;prescaler-> TCCR0B     (  2 clocks) 
 600:	00 93 45 00 	sts	0x0045, r16
		STS   SRTCNT0            , R17                    ;reload val-> TCNT0     (  2 clocks) 
 604:	10 93 46 00 	sts	0x0046, r17
		LDI   R16                , 0x01                   ;bit mask TOIE0         (  1 clock ) 
 608:	01 e0       	ldi	r16, 0x01	; 1
		STS   SRTIMSK0           , R16                    ;set to TIMSK0          (  2 clocks) 
 60a:	00 93 6e 00 	sts	0x006E, r16

		;need to save global interrupt enabled in each tasks context
		SEI                                               ;force enable interrupt (  1 clock ) 
 60e:	78 94       	sei
		
		;execute return to jump to task0, pushed while task init
		RET                                               ;return from subroutine (  4 clocks) 
 610:	08 95       	ret

00000612 <Kernel_Init>:

;;===================================kernel task starting===================================;; 
Kernel_Init:
		;start executing from task0
		;save ZP
		MOV   R4                 , R30                    ;save ZPL               (  2 clocks) 
 612:	4e 2e       	mov	r4, r30
		MOV   R5                 , R31                    ;save ZPH               (  2 clocks) 
 614:	5f 2e       	mov	r5, r31
		
		;init timer for kernel 
		LDI   R24                , 0x03                   ;set prescaler          (  1 clock ) 
 616:	83 e0       	ldi	r24, 0x03	; 3
		LDI   R22                , 0x82                   ;set reload val         (  1 clock ) 
 618:	62 e8       	ldi	r22, 0x82	; 130
		CALL  Kernel_SysTick_Reg_Init                     ;init timer             ( 55 clocks) 
 61a:	0e 94 0d 02 	call	0x41a	; 0x41a <Kernel_SysTick_Reg_Init>
		
		LDI   R24                , lo8(Kernel_Task_Idle)  ;load func addr low     (  1 clock )
 61e:	8e e2       	ldi	r24, 0x2E	; 46
		LDI   R25                , hi8(Kernel_Task_Idle)  ;load func addr high    (  1 clock )
 620:	96 e0       	ldi	r25, 0x06	; 6
		LSR   R25                                         ;right shift to divide  (  1 clock )
 622:	96 95       	lsr	r25
		ROR   R24                                         ;rotate right th carry  (  1 clock )
 624:	87 95       	ror	r24
		LDI   R22                , 0
 626:	60 e0       	ldi	r22, 0x00	; 0
		CALL  Kernel_Task_Create                          ;init idle task         (130 clocks) 
 628:	0e 94 76 02 	call	0x4ec	; 0x4ec <Kernel_Task_Create>
		
		;execute return to jump to task0, pushed while task init
		RET                                               ;return from subroutine (  4 clocks) 
 62c:	08 95       	ret

0000062e <Kernel_Task_Idle>:


;;=================================kernel idle task starting================================;; 
Kernel_Task_Idle:                                         ;jumps to this function when idle
    _IDLE_LOOP:                                           ;forever loop
		RJMP  _IDLE_LOOP                                  ;return from subroutine (  4 clocks) 
 62e:	ff cf       	rjmp	.-2      	; 0x62e <Kernel_Task_Idle>

00000630 <Kernel_Task_Sleep>:


;;================================kernel task delay starting================================;; 
Kernel_Task_Sleep:
        ;save current context
        KER_CONTEXT_SAVE_YEILD                            ;save context           ( 68 clocks) 
 630:	0f 92       	push	r0
 632:	0f b6       	in	r0, 0x3f	; 63
 634:	f8 94       	cli
 636:	0f 92       	push	r0
 638:	1f 92       	push	r1
 63a:	11 24       	eor	r1, r1
 63c:	2f 92       	push	r2
 63e:	3f 92       	push	r3
 640:	4f 92       	push	r4
 642:	5f 92       	push	r5
 644:	6f 92       	push	r6
 646:	7f 92       	push	r7
 648:	8f 92       	push	r8
 64a:	9f 92       	push	r9
 64c:	af 92       	push	r10
 64e:	bf 92       	push	r11
 650:	cf 92       	push	r12
 652:	df 92       	push	r13
 654:	ef 92       	push	r14
 656:	ff 92       	push	r15
 658:	0f 93       	push	r16
 65a:	1f 93       	push	r17
 65c:	2f 93       	push	r18
 65e:	3f 93       	push	r19
 660:	4f 93       	push	r20
 662:	5f 93       	push	r21
 664:	6f 93       	push	r22
 666:	7f 93       	push	r23
 668:	8f 93       	push	r24
 66a:	9f 93       	push	r25
 66c:	af 93       	push	r26
 66e:	bf 93       	push	r27
 670:	cf 93       	push	r28
 672:	df 93       	push	r29
 674:	ef 93       	push	r30
 676:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks)
 678:	0d b7       	in	r16, 0x3d	; 61
 67a:	1e b7       	in	r17, 0x3e	; 62
 67c:	20 91 07 01 	lds	r18, 0x0107
 680:	22 0f       	add	r18, r18
 682:	ea e0       	ldi	r30, 0x0A	; 10
 684:	f1 e0       	ldi	r31, 0x01	; 1
 686:	e2 0f       	add	r30, r18
 688:	f1 1d       	adc	r31, r1
 68a:	01 93       	st	Z+, r16
 68c:	10 83       	st	Z, r17
		
		;create next task wakeup time (args R25:R24)
		LDS   R16                , KerBase+OFF_TID        ;load tak_id            (  2 clocks) 
 68e:	00 91 07 01 	lds	r16, 0x0107
		MOV   R17                , R16                    ;copy                   (  1 clock ) 
 692:	10 2f       	mov	r17, r16
		LSL   R17                                         ;x2                     (  1 clock ) 
 694:	11 0f       	add	r17, r17
		LDI   R30                , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 696:	e2 e3       	ldi	r30, 0x32	; 50
		LDI   R31                , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 698:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R17                    ;add low bytes          (  1 clock ) 
 69a:	e1 0f       	add	r30, r17
		LDI   R17                , 0x00                   ;load 0                 (  1 clock ) 
 69c:	10 e0       	ldi	r17, 0x00	; 0
		ADC   R31                , R17                    ;add high byte+carry    (  1 clock ) 
 69e:	f1 1f       	adc	r31, r17
		ST    Z+                 , R24                    ;save sleep time        (  2 clocks) 
 6a0:	81 93       	st	Z+, r24
		ST    Z                  , R25                    ;save sleep time        (  2 clocks) 
 6a2:	90 83       	st	Z, r25
		
		;update task scheduler status as blocked
		LDI   R30                , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 6a4:	ee e1       	ldi	r30, 0x1E	; 30
		LDI   R31                , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 6a6:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 6a8:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 6aa:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 6ac:	f0 1f       	adc	r31, r16
        LDI   R16                , TASK_BLOCK             ;block task until cnt=0 (  1 clock ) 
 6ae:	00 e0       	ldi	r16, 0x00	; 0
		ST    Z                  , R16                    ;save block flag        (  2 clocks) 
 6b0:	00 83       	st	Z, r16
		
		;run scheduler, load next task sp, restore context
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 14 clocks) 
 6b2:	00 91 08 01 	lds	r16, 0x0108

000006b6 <_CH_TASK_READY15>:
 6b6:	0a 95       	dec	r16
 6b8:	10 2f       	mov	r17, r16
 6ba:	ee e1       	ldi	r30, 0x1E	; 30
 6bc:	f1 e0       	ldi	r31, 0x01	; 1
 6be:	e1 0f       	add	r30, r17
 6c0:	f1 1d       	adc	r31, r1
 6c2:	10 81       	ld	r17, Z
 6c4:	11 30       	cpi	r17, 0x01	; 1
 6c6:	21 f0       	breq	.+8      	; 0x6d0 <_NEXT_TASK_FOUND15>

000006c8 <_LOOP_CNT15>:
 6c8:	00 30       	cpi	r16, 0x00	; 0
 6ca:	a9 f7       	brne	.-22     	; 0x6b6 <_CH_TASK_READY15>
 6cc:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <_IDLE_TASK15>

000006d0 <_NEXT_TASK_FOUND15>:
 6d0:	00 93 07 01 	sts	0x0107, r16
 6d4:	0c 94 6f 03 	jmp	0x6de	; 0x6de <_EXIT15>

000006d8 <_IDLE_TASK15>:
 6d8:	00 e0       	ldi	r16, 0x00	; 0
 6da:	00 93 07 01 	sts	0x0107, r16

000006de <_EXIT15>:
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 6de:	00 91 07 01 	lds	r16, 0x0107
 6e2:	00 0f       	add	r16, r16
 6e4:	ea e0       	ldi	r30, 0x0A	; 10
 6e6:	f1 e0       	ldi	r31, 0x01	; 1
 6e8:	e0 0f       	add	r30, r16
 6ea:	f1 1d       	adc	r31, r1
 6ec:	01 91       	ld	r16, Z+
 6ee:	10 81       	ld	r17, Z
 6f0:	0d bf       	out	0x3d, r16	; 61
 6f2:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE_YEILD                         ;restore context        ( 67 clocks) 
 6f4:	ff 91       	pop	r31
 6f6:	ef 91       	pop	r30
 6f8:	df 91       	pop	r29
 6fa:	cf 91       	pop	r28
 6fc:	bf 91       	pop	r27
 6fe:	af 91       	pop	r26
 700:	9f 91       	pop	r25
 702:	8f 91       	pop	r24
 704:	7f 91       	pop	r23
 706:	6f 91       	pop	r22
 708:	5f 91       	pop	r21
 70a:	4f 91       	pop	r20
 70c:	3f 91       	pop	r19
 70e:	2f 91       	pop	r18
 710:	1f 91       	pop	r17
 712:	0f 91       	pop	r16
 714:	ff 90       	pop	r15
 716:	ef 90       	pop	r14
 718:	df 90       	pop	r13
 71a:	cf 90       	pop	r12
 71c:	bf 90       	pop	r11
 71e:	af 90       	pop	r10
 720:	9f 90       	pop	r9
 722:	8f 90       	pop	r8
 724:	7f 90       	pop	r7
 726:	6f 90       	pop	r6
 728:	5f 90       	pop	r5
 72a:	4f 90       	pop	r4
 72c:	3f 90       	pop	r3
 72e:	2f 90       	pop	r2
 730:	1f 90       	pop	r1
 732:	0f 90       	pop	r0
 734:	0f be       	out	0x3f, r0	; 63
 736:	0f 90       	pop	r0
 738:	78 94       	sei
		
		RET                                               ;return from subroutine (  4 clocks) 
 73a:	08 95       	ret

0000073c <Kernel_Task_Sleep_Time_Get>:


;;================================kernel task delay starting================================;; 
Kernel_Task_Sleep_Time_Get:
		;create next task wakeup time
		LDS   R16                , KerBase+OFF_TID        ;load tak_id            (  2 clocks) 
 73c:	00 91 07 01 	lds	r16, 0x0107
		LSL   R16                                         ;x2                     (  1 clock ) 
 740:	00 0f       	add	r16, r16
		LDI   R30                , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 742:	e2 e3       	ldi	r30, 0x32	; 50
		LDI   R31                , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 744:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 746:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 748:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 74a:	f0 1f       	adc	r31, r16
		LD    R24                , Z+                     ;load sleep time        (  2 clocks) 
 74c:	81 91       	ld	r24, Z+
		LD    R25                , Z                      ;load sleep time        (  2 clocks) 
 74e:	90 81       	ld	r25, Z
		RET                                               ;return from subroutine (  4 clocks) 
 750:	08 95       	ret

00000752 <Kernel_Task_Sts_Get>:


;;================================kernel task delay starting================================;; 
Kernel_Task_Sts_Get:
		;create next task wakeup time
		LDS   R16                , KerBase+OFF_TID        ;load tak_id            (  2 clocks) 
 752:	00 91 07 01 	lds	r16, 0x0107
		LDI   R30                , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 756:	ee e1       	ldi	r30, 0x1E	; 30
		LDI   R31                , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 758:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 75a:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 75c:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 75e:	f0 1f       	adc	r31, r16
		LD    R24                , Z                      ;load sleep time        (  2 clocks) 
 760:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 762:	08 95       	ret

00000764 <Debug_Init>:
.global  Debug_Print_TSK

;;========================================Debug Init========================================;;
Debug_Init:
        ;init registers for UART0
		LDI   R16                , (1<<1)                 ;mask U2x,                (1 clock )
 764:	02 e0       	ldi	r16, 0x02	; 2
		STS   SRUCSR0A           , R16                    ;load val to UCSR0A,      (2 clocks)
 766:	00 93 c0 00 	sts	0x00C0, r16
		MOV   R16                , R25                    ;clear R16,               (1 clock )
 76a:	09 2f       	mov	r16, r25
		STS   SRUBRR0H           , R16                    ;load val to UBRR0H,      (2 clocks)
 76c:	00 93 c5 00 	sts	0x00C5, r16
		MOV   R16                , R24                    ;set 0x03, 250k baud,     (1 clock )
 770:	08 2f       	mov	r16, r24
		STS   SRUBRR0L           , R16                    ;load val to UBRR0L,      (2 clocks)
 772:	00 93 c4 00 	sts	0x00C4, r16
		LDI   R16                , (1<<1)|(1<<2)          ;config 8 data bit        (1 clock )
 776:	06 e0       	ldi	r16, 0x06	; 6
		STS   SRUCSR0C           , R16                    ;load val to UCSR0C,      (2 clocks)
 778:	00 93 c2 00 	sts	0x00C2, r16
		LDI   R16                , (1<<3)                 ;enable tx,               (1 clock )
 77c:	08 e0       	ldi	r16, 0x08	; 8
		STS   SRUCSR0B           , R16                    ;load val to UCSR0B,      (2 clocks)
 77e:	00 93 c1 00 	sts	0x00C1, r16
        RET                                               ;return from subroutine,  (4 clocks) 
 782:	08 95       	ret

00000784 <Debug_Tx_Byte>:


;;=========================================Debug Tx=========================================;;
Debug_Tx_Byte:
		;write single byte to data register (Arg R24)
		PUSH  R16                                         ;save reg               (  2 clocks)
 784:	0f 93       	push	r16
		STS   SRUDR0             , R24                    ;load val to UDR0,      (  2 clocks)
 786:	80 93 c6 00 	sts	0x00C6, r24

0000078a <__UDRE0_CLEARED>:
		
    __UDRE0_CLEARED:
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,    (  2 clocks)
 78a:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x05                   ;skip if UDRE0 is set,  (  2 clocks)
 78e:	05 ff       	sbrs	r16, 5
		RJMP  __UDRE0_CLEARED                             ;wait until UDRE0 is set(  2 clocks)
 790:	fc cf       	rjmp	.-8      	; 0x78a <__UDRE0_CLEARED>
		POP   R16                                         ;restore reg            (  2 clocks)
 792:	0f 91       	pop	r16
        RET                                               ;return from subroutine,(  4 clocks) 
 794:	08 95       	ret

00000796 <Debug_Tx_Byte_Conf>:


;;=========================================Debug Tx=========================================;;
Debug_Tx_Byte_Conf:                                       ;untdetermined->loop    ( 23 clocks) 
        ;write 1 byte, (Arg R24), Args retained
		PUSH  R16                                         ;save reg               (  2 clocks)
 796:	0f 93       	push	r16
		STS   SRUDR0             , R24                    ;load val to UDR0,      (  2 clocks)
 798:	80 93 c6 00 	sts	0x00C6, r24

0000079c <__TXC0_CLEARED>:
		
    __TXC0_CLEARED:
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,    (  2 clocks)
 79c:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x06                   ;skip if TXC0 is set,   (  2 clocks)
 7a0:	06 ff       	sbrs	r16, 6
		RJMP  __TXC0_CLEARED                              ;wait until TXC0 is set (  2 clocks)
 7a2:	fc cf       	rjmp	.-8      	; 0x79c <__TXC0_CLEARED>
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,    (  2 clocks)
 7a4:	00 91 c0 00 	lds	r16, 0x00C0
		ORI   R16                , (1<<6)                 ;mask bit 6,            (  1 clock )
 7a8:	00 64       	ori	r16, 0x40	; 64
		STS   SRUCSR0A           , R16                    ;write reg with bit msk (  2 clocks)
 7aa:	00 93 c0 00 	sts	0x00C0, r16
		POP   R16                                         ;restore reg            (  2 clocks)
 7ae:	0f 91       	pop	r16
        RET                                               ;return from subroutine (  4 clocks) 
 7b0:	08 95       	ret

000007b2 <Debug_Tx_Word_Conf>:


;;======================================Debug Tx Word=======================================;;
Debug_Tx_Word_Conf:
        ;write 2 bytes, (Arg R24, R25), Args retained
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 7b2:	0e 94 cb 03 	call	0x796	; 0x796 <Debug_Tx_Byte_Conf>
		PUSH  R24                                         ;save reg               (  2 clocks)
 7b6:	8f 93       	push	r24
		MOV   R24                , R25                    ;copy R25 to R24        (  1 clock )
 7b8:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 7ba:	0e 94 cb 03 	call	0x796	; 0x796 <Debug_Tx_Byte_Conf>
		POP   R24                                         ;restore reg            (  2 clocks)
 7be:	8f 91       	pop	r24
        RET                                               ;return from subroutine (  4 clocks) 
 7c0:	08 95       	ret

000007c2 <Debug_Tx_DWord_Conf>:

;;=====================================Debug Tx DWord=======================================;;
Debug_Tx_DWord_Conf:
        ;write 4 bytes, (Arg R22-R25), Args retained
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks)
 7c2:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R22                    ;copy R22 to R24          (1 clock )
 7c6:	86 2f       	mov	r24, r22
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 7c8:	0e 94 cb 03 	call	0x796	; 0x796 <Debug_Tx_Byte_Conf>
		MOV   R24                , R23                    ;copy R23 to R24          (1 clock )
 7cc:	87 2f       	mov	r24, r23
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 7ce:	0e 94 cb 03 	call	0x796	; 0x796 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24              (2 clocks)
 7d2:	80 91 4a 00 	lds	r24, 0x004A
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 7d6:	0e 94 cb 03 	call	0x796	; 0x796 <Debug_Tx_Byte_Conf>
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks)
 7da:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R25                    ;copy R22 to R24          (1 clock )
 7de:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 7e0:	0e 94 cb 03 	call	0x796	; 0x796 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24 val,         (2 clocks)
 7e4:	80 91 4a 00 	lds	r24, 0x004A
        RET                                               ;return from subroutine,  (4 clocks) 
 7e8:	08 95       	ret

000007ea <Debug_Tx_From_RAM>:


;;===================================Debug Tx From RAM======================================;;
Debug_Tx_From_RAM:
        ;print data from RAM address (Arg R24-R25)
		MOV   R16                , R30                    ;copy R30 to R16          (1 clock )
 7ea:	0e 2f       	mov	r16, r30
		MOV   R17                , R31                    ;copy R31 to R17          (1 clock )
 7ec:	1f 2f       	mov	r17, r31
		MOV   R18                , R24                    ;copy R24 to R18          (1 clock )
 7ee:	28 2f       	mov	r18, r24
		MOV   R30                , R24                    ;copy R22 to R24          (1 clock )
 7f0:	e8 2f       	mov	r30, r24
		MOV   R31                , R25                    ;copy R22 to R24          (1 clock )
 7f2:	f9 2f       	mov	r31, r25
		LD    R24                , Z                      ;load val to R24          (2 clocks)
 7f4:	80 81       	ld	r24, Z
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 7f6:	0e 94 cb 03 	call	0x796	; 0x796 <Debug_Tx_Byte_Conf>
		MOV   R30                , R16                    ;copy R16 to R30          (1 clock )
 7fa:	e0 2f       	mov	r30, r16
		MOV   R31                , R17                    ;copy R17 to R31          (1 clock )
 7fc:	f1 2f       	mov	r31, r17
		MOV   R24                , R18                    ;copy R18 to R24          (1 clock )
 7fe:	82 2f       	mov	r24, r18
        RET                                               ;return from subroutine,  (4 clocks) 
 800:	08 95       	ret

00000802 <Debug_Tx_RAM_Area>:

;;===================================Debug Tx RAM Area======================================;;
Debug_Tx_RAM_Area:
        ;print data from RAM address (arguments R24:R25, R22)
	__DUMP_BYTES:
	    CALL  Debug_Tx_From_RAM                           ;send via uart from ram
 802:	0e 94 f5 03 	call	0x7ea	; 0x7ea <Debug_Tx_From_RAM>
		SUBI  R24                , 0x01                   ;decrement from LSByte
 806:	81 50       	subi	r24, 0x01	; 1
        SBCI  R25                , 0x00                   ;decrement if carry
 808:	90 40       	sbci	r25, 0x00	; 0
		SUBI  R22                , 0x01                   ;decrement
 80a:	61 50       	subi	r22, 0x01	; 1
		BRNE  __DUMP_BYTES
 80c:	d1 f7       	brne	.-12     	; 0x802 <Debug_Tx_RAM_Area>
        RET                                               ;return from subroutine,  (4 clocks) 
 80e:	08 95       	ret

00000810 <Debug_Print_TSK>:


;;=====================================Debug Dummy Print====================================;;
Debug_Print_TSK:
        ;write 4 bytes, (Arg R22-R25), Args retained
		MOV   R16                , R24                    ;copy R24 to R16          (1 clock )
 810:	08 2f       	mov	r16, r24
		;LDI   R17                , 48                     ;load 48 to reg           (1 clock )
		;ADD   R16                , R17                    ;to convert val to char   (1 clock )
		LDI   R22                , 'T'                    ;copy char                (1 clock )
 812:	64 e5       	ldi	r22, 0x54	; 84
		LDI   R23                , 'S'                    ;copy char                (1 clock )
 814:	73 e5       	ldi	r23, 0x53	; 83
		LDI   R24                , 'k'                    ;copy char                (1 clock )
 816:	8b e6       	ldi	r24, 0x6B	; 107
		MOV   R25                , R16                    ;copy char                (1 clock )
 818:	90 2f       	mov	r25, r16
		CALL  Debug_Tx_DWord_Conf                         ;send via uart
 81a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <Debug_Tx_DWord_Conf>
		LDI   R24                , '\r'                   ;copy char                (1 clock )
 81e:	8d e0       	ldi	r24, 0x0D	; 13
		LDI   R25                , '\n'                   ;copy char                (1 clock )
 820:	9a e0       	ldi	r25, 0x0A	; 10
		CALL  Debug_Tx_Word_Conf                          ;send via uart
 822:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <Debug_Tx_Word_Conf>
        RET                                               ;return from subroutine,  (4 clocks) 
 826:	08 95       	ret

00000828 <_exit>:
 828:	f8 94       	cli

0000082a <__stop_program>:
 82a:	ff cf       	rjmp	.-2      	; 0x82a <__stop_program>
