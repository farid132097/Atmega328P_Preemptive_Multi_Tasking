
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000558  00800100  00800100  00000d5e  2**0
                  ALLOC
  2 .stab         00000c90  00000000  00000000  00000d60  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000006e  00000000  00000000  000019f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00001a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000bd  00000000  00000000  00001a9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000002bb  00000000  00000000  00001b5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000109  00000000  00000000  00001e16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000398  00000000  00000000  00001f1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  000022b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000123  00000000  00000000  00002378  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000249b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__vector_16>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	00 00       	nop
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 00       	nop
  76:	00 00       	nop
  78:	00 00       	nop
  7a:	00 00       	nop
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 00       	nop
  82:	00 00       	nop
  84:	00 00       	nop
  86:	00 00       	nop
  88:	8e c1       	rjmp	.+796    	; 0x3a6 <__vector_16>

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61
  96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  9a:	0c 94 73 06 	jmp	0xce6	; 0xce6 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:


    
int main(void) {
    
	Kernel_Init();
  a2:	0e 94 0b 04 	call	0x816	; 0x816 <Kernel_Init>

	Kernel_Task_Create(Tasks_Task1,  0);
  a6:	87 e1       	ldi	r24, 0x17	; 23
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	0e 94 06 03 	call	0x60c	; 0x60c <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task2,  3);
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	63 e0       	ldi	r22, 0x03	; 3
  b6:	0e 94 06 03 	call	0x60c	; 0x60c <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task3,  2);
  ba:	89 ee       	ldi	r24, 0xE9	; 233
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	62 e0       	ldi	r22, 0x02	; 2
  c0:	0e 94 06 03 	call	0x60c	; 0x60c <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task4,  1);
  c4:	82 ed       	ldi	r24, 0xD2	; 210
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	0e 94 06 03 	call	0x60c	; 0x60c <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task5,  4);
  ce:	8b eb       	ldi	r24, 0xBB	; 187
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	64 e0       	ldi	r22, 0x04	; 4
  d4:	0e 94 06 03 	call	0x60c	; 0x60c <Kernel_Task_Create>
	//Kernel_Task_Create(Tasks_Task6,  6);
	//Kernel_Task_Create(Tasks_Task7,  5);
	//Kernel_Task_Create(Tasks_Task8,  8);
	//Kernel_Task_Create(Tasks_Task9,  7);
	
	Kernel_Start_Tasks();
  d8:	0e 94 81 03 	call	0x702	; 0x702 <Kernel_Start_Tasks>
  dc:	ff cf       	rjmp	.-2      	; 0xdc <SRUDR0+0x16>

000000de <Tasks_Task9>:
    #endif
	
  }
}

void Tasks_Task9(void){
  de:	1f 93       	push	r17
  
  Debug_Init(0);
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <Debug_Init>
  e8:	10 e0       	ldi	r17, 0x00	; 0
  ea:	04 c0       	rjmp	.+8      	; 0xf4 <Tasks_Task9+0x16>
    Kernel_Task_Constant_Latency_Sleep();

    #else

	  for(uint8_t i=0;i<200;i++){
      Debug_Tx_Byte('9');
  ec:	89 e3       	ldi	r24, 0x39	; 57
  ee:	0e 94 03 06 	call	0xc06	; 0xc06 <Debug_Tx_Byte>
    }
    Kernel_Task_Constant_Latency_Sleep();

    #else

	  for(uint8_t i=0;i<200;i++){
  f2:	1f 5f       	subi	r17, 0xFF	; 255
  f4:	18 3c       	cpi	r17, 0xC8	; 200
  f6:	d0 f3       	brcs	.-12     	; 0xec <Tasks_Task9+0xe>
      Debug_Tx_Byte('9');
    }
    Kernel_Task_Sleep(90); 
  f8:	8a e5       	ldi	r24, 0x5A	; 90
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 3b 04 	call	0x876	; 0x876 <Kernel_Task_Sleep>
 100:	10 e0       	ldi	r17, 0x00	; 0
 102:	f4 cf       	rjmp	.-24     	; 0xec <Tasks_Task9+0xe>

00000104 <Tasks_Task8>:
    #endif
	
  }
}

void Tasks_Task8(void){
 104:	1f 93       	push	r17
  
  Debug_Init(0);
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <Debug_Init>
 10e:	10 e0       	ldi	r17, 0x00	; 0
 110:	04 c0       	rjmp	.+8      	; 0x11a <Tasks_Task8+0x16>
    Kernel_Task_Constant_Latency_Sleep();

    #else

	  for(uint8_t i=0;i<200;i++){
      Debug_Tx_Byte('8');
 112:	88 e3       	ldi	r24, 0x38	; 56
 114:	0e 94 03 06 	call	0xc06	; 0xc06 <Debug_Tx_Byte>
    }
    Kernel_Task_Constant_Latency_Sleep();

    #else

	  for(uint8_t i=0;i<200;i++){
 118:	1f 5f       	subi	r17, 0xFF	; 255
 11a:	18 3c       	cpi	r17, 0xC8	; 200
 11c:	d0 f3       	brcs	.-12     	; 0x112 <Tasks_Task8+0xe>
      Debug_Tx_Byte('8');
    }
    Kernel_Task_Sleep(80); 
 11e:	80 e5       	ldi	r24, 0x50	; 80
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 3b 04 	call	0x876	; 0x876 <Kernel_Task_Sleep>
 126:	10 e0       	ldi	r17, 0x00	; 0
 128:	f4 cf       	rjmp	.-24     	; 0x112 <Tasks_Task8+0xe>

0000012a <Tasks_Task7>:
    #endif
	
  }
}

void Tasks_Task7(void){
 12a:	1f 93       	push	r17
  
  Debug_Init(0);
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <Debug_Init>
 134:	10 e0       	ldi	r17, 0x00	; 0
 136:	04 c0       	rjmp	.+8      	; 0x140 <Tasks_Task7+0x16>
    Kernel_Task_Constant_Latency_Sleep();

    #else

	  for(uint8_t i=0;i<200;i++){
      Debug_Tx_Byte('7');
 138:	87 e3       	ldi	r24, 0x37	; 55
 13a:	0e 94 03 06 	call	0xc06	; 0xc06 <Debug_Tx_Byte>
    }
    Kernel_Task_Constant_Latency_Sleep();

    #else

	  for(uint8_t i=0;i<200;i++){
 13e:	1f 5f       	subi	r17, 0xFF	; 255
 140:	18 3c       	cpi	r17, 0xC8	; 200
 142:	d0 f3       	brcs	.-12     	; 0x138 <Tasks_Task7+0xe>
      Debug_Tx_Byte('7');
    }
    Kernel_Task_Sleep(70); 
 144:	86 e4       	ldi	r24, 0x46	; 70
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 3b 04 	call	0x876	; 0x876 <Kernel_Task_Sleep>
 14c:	10 e0       	ldi	r17, 0x00	; 0
 14e:	f4 cf       	rjmp	.-24     	; 0x138 <Tasks_Task7+0xe>

00000150 <Tasks_Task6>:
    #endif
	
  }
}

void Tasks_Task6(void){
 150:	1f 93       	push	r17
  
  Debug_Init(0);
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <Debug_Init>
 15a:	10 e0       	ldi	r17, 0x00	; 0
 15c:	04 c0       	rjmp	.+8      	; 0x166 <Tasks_Task6+0x16>
    Kernel_Task_Constant_Latency_Sleep();

    #else

    for(uint8_t i=0;i<200;i++){
      Debug_Tx_Byte('6');
 15e:	86 e3       	ldi	r24, 0x36	; 54
 160:	0e 94 03 06 	call	0xc06	; 0xc06 <Debug_Tx_Byte>
    }
    Kernel_Task_Constant_Latency_Sleep();

    #else

    for(uint8_t i=0;i<200;i++){
 164:	1f 5f       	subi	r17, 0xFF	; 255
 166:	18 3c       	cpi	r17, 0xC8	; 200
 168:	d0 f3       	brcs	.-12     	; 0x15e <Tasks_Task6+0xe>
      Debug_Tx_Byte('6');
    }
    Kernel_Task_Sleep(60); 
 16a:	8c e3       	ldi	r24, 0x3C	; 60
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 3b 04 	call	0x876	; 0x876 <Kernel_Task_Sleep>
 172:	10 e0       	ldi	r17, 0x00	; 0
 174:	f4 cf       	rjmp	.-24     	; 0x15e <Tasks_Task6+0xe>

00000176 <Tasks_Task5>:
    #endif
	
  }
}

void Tasks_Task5(void){
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
  
  DDRC |= (1<<5);
 17a:	3d 9a       	sbi	0x07, 5	; 7

  Debug_Init(0);
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <Debug_Init>
    }
    Kernel_Task_Constant_Latency_Sleep();

    #else

    PORTC ^= (1<<5);
 184:	00 e2       	ldi	r16, 0x20	; 32
 186:	88 b1       	in	r24, 0x08	; 8
 188:	80 27       	eor	r24, r16
 18a:	88 b9       	out	0x08, r24	; 8
 18c:	10 e0       	ldi	r17, 0x00	; 0
	  for(uint8_t i=0;i<200;i++){
      Debug_Tx_Byte('5');
 18e:	85 e3       	ldi	r24, 0x35	; 53
 190:	0e 94 03 06 	call	0xc06	; 0xc06 <Debug_Tx_Byte>
    Kernel_Task_Constant_Latency_Sleep();

    #else

    PORTC ^= (1<<5);
	  for(uint8_t i=0;i<200;i++){
 194:	1f 5f       	subi	r17, 0xFF	; 255
 196:	18 3c       	cpi	r17, 0xC8	; 200
 198:	d1 f7       	brne	.-12     	; 0x18e <Tasks_Task5+0x18>
      Debug_Tx_Byte('5');
    }
    Kernel_Task_Sleep(50); 
 19a:	82 e3       	ldi	r24, 0x32	; 50
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 3b 04 	call	0x876	; 0x876 <Kernel_Task_Sleep>
 1a2:	f1 cf       	rjmp	.-30     	; 0x186 <Tasks_Task5+0x10>

000001a4 <Tasks_Task4>:
    #endif
	
  }
}

void Tasks_Task4(void){
 1a4:	0f 93       	push	r16
 1a6:	1f 93       	push	r17
  
  DDRC |= (1<<4);
 1a8:	3c 9a       	sbi	0x07, 4	; 7

  Debug_Init(0);
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <Debug_Init>
    }
    Kernel_Task_Constant_Latency_Sleep(); 

    #else

    PORTC ^= (1<<4);
 1b2:	00 e1       	ldi	r16, 0x10	; 16
 1b4:	88 b1       	in	r24, 0x08	; 8
 1b6:	80 27       	eor	r24, r16
 1b8:	88 b9       	out	0x08, r24	; 8
 1ba:	10 e0       	ldi	r17, 0x00	; 0
	  for(uint8_t i=0;i<200;i++){
      Debug_Tx_Byte('4');
 1bc:	84 e3       	ldi	r24, 0x34	; 52
 1be:	0e 94 03 06 	call	0xc06	; 0xc06 <Debug_Tx_Byte>
    Kernel_Task_Constant_Latency_Sleep(); 

    #else

    PORTC ^= (1<<4);
	  for(uint8_t i=0;i<200;i++){
 1c2:	1f 5f       	subi	r17, 0xFF	; 255
 1c4:	18 3c       	cpi	r17, 0xC8	; 200
 1c6:	d1 f7       	brne	.-12     	; 0x1bc <Tasks_Task4+0x18>
      Debug_Tx_Byte('4');
    }
    Kernel_Task_Sleep(40); 
 1c8:	88 e2       	ldi	r24, 0x28	; 40
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 3b 04 	call	0x876	; 0x876 <Kernel_Task_Sleep>
 1d0:	f1 cf       	rjmp	.-30     	; 0x1b4 <Tasks_Task4+0x10>

000001d2 <Tasks_Task3>:
    #endif
	
  }
}

void Tasks_Task3(void){
 1d2:	0f 93       	push	r16
 1d4:	1f 93       	push	r17
  
  DDRC |= (1<<3);
 1d6:	3b 9a       	sbi	0x07, 3	; 7

  Debug_Init(0);
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <Debug_Init>
    }
    Kernel_Task_Constant_Latency_Sleep();

    #else

    PORTC ^= (1<<3);
 1e0:	08 e0       	ldi	r16, 0x08	; 8
 1e2:	88 b1       	in	r24, 0x08	; 8
 1e4:	80 27       	eor	r24, r16
 1e6:	88 b9       	out	0x08, r24	; 8
 1e8:	10 e0       	ldi	r17, 0x00	; 0
	  for(uint8_t i=0;i<200;i++){
      Debug_Tx_Byte('3');
 1ea:	83 e3       	ldi	r24, 0x33	; 51
 1ec:	0e 94 03 06 	call	0xc06	; 0xc06 <Debug_Tx_Byte>
    Kernel_Task_Constant_Latency_Sleep();

    #else

    PORTC ^= (1<<3);
	  for(uint8_t i=0;i<200;i++){
 1f0:	1f 5f       	subi	r17, 0xFF	; 255
 1f2:	18 3c       	cpi	r17, 0xC8	; 200
 1f4:	d1 f7       	brne	.-12     	; 0x1ea <Tasks_Task3+0x18>
      Debug_Tx_Byte('3');
    }
    Kernel_Task_Sleep(30);
 1f6:	8e e1       	ldi	r24, 0x1E	; 30
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 3b 04 	call	0x876	; 0x876 <Kernel_Task_Sleep>
 1fe:	f1 cf       	rjmp	.-30     	; 0x1e2 <Tasks_Task3+0x10>

00000200 <Tasks_Task2>:
    Kernel_Task_Sleep(10);
    
  }
}

void Tasks_Task2(void){
 200:	0f 93       	push	r16
 202:	1f 93       	push	r17
  
  DDRC |= (1<<2);
 204:	3a 9a       	sbi	0x07, 2	; 7

  Debug_Init(0);
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <Debug_Init>
    }
    Kernel_Task_Constant_Latency_Sleep();

    #else

    PORTC ^= (1<<2);
 20e:	04 e0       	ldi	r16, 0x04	; 4
 210:	88 b1       	in	r24, 0x08	; 8
 212:	80 27       	eor	r24, r16
 214:	88 b9       	out	0x08, r24	; 8
 216:	10 e0       	ldi	r17, 0x00	; 0
    for(uint8_t i=0;i<200;i++){
      Debug_Tx_Byte('2');
 218:	82 e3       	ldi	r24, 0x32	; 50
 21a:	0e 94 03 06 	call	0xc06	; 0xc06 <Debug_Tx_Byte>
    Kernel_Task_Constant_Latency_Sleep();

    #else

    PORTC ^= (1<<2);
    for(uint8_t i=0;i<200;i++){
 21e:	1f 5f       	subi	r17, 0xFF	; 255
 220:	18 3c       	cpi	r17, 0xC8	; 200
 222:	d1 f7       	brne	.-12     	; 0x218 <Tasks_Task2+0x18>
      Debug_Tx_Byte('2');
    }
    Kernel_Task_Sleep(20);
 224:	84 e1       	ldi	r24, 0x14	; 20
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 3b 04 	call	0x876	; 0x876 <Kernel_Task_Sleep>
 22c:	f1 cf       	rjmp	.-30     	; 0x210 <Tasks_Task2+0x10>

0000022e <Tasks_Task1>:
#include "debug.h"


//#define  CONSTANT_LAT_TEST

void Tasks_Task1(void){
 22e:	9f 92       	push	r9
 230:	af 92       	push	r10
 232:	bf 92       	push	r11
 234:	cf 92       	push	r12
 236:	df 92       	push	r13
 238:	ef 92       	push	r14
 23a:	ff 92       	push	r15
 23c:	0f 93       	push	r16
 23e:	1f 93       	push	r17
 240:	df 93       	push	r29
 242:	cf 93       	push	r28
 244:	cd b7       	in	r28, 0x3d	; 61
 246:	de b7       	in	r29, 0x3e	; 62
 248:	2a 97       	sbiw	r28, 0x0a	; 10
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	f8 94       	cli
 24e:	de bf       	out	0x3e, r29	; 62
 250:	0f be       	out	0x3f, r0	; 63
 252:	cd bf       	out	0x3d, r28	; 61
  
  uint32_t vcc=0, temp;
  uint8_t  val[10];
  val[0]='v';
 254:	86 e7       	ldi	r24, 0x76	; 118
 256:	89 83       	std	Y+1, r24	; 0x01
  val[1]='d';
 258:	84 e6       	ldi	r24, 0x64	; 100
 25a:	8a 83       	std	Y+2, r24	; 0x02
  val[2]='d';
 25c:	8b 83       	std	Y+3, r24	; 0x03
  val[3]=' ';
 25e:	80 e2       	ldi	r24, 0x20	; 32
 260:	8c 83       	std	Y+4, r24	; 0x04
  val[8]='\r';
 262:	8d e0       	ldi	r24, 0x0D	; 13
 264:	89 87       	std	Y+9, r24	; 0x09
  val[9]='\n';
 266:	8a e0       	ldi	r24, 0x0A	; 10
 268:	8a 87       	std	Y+10, r24	; 0x0a

  DDRC |= (1<<1);
 26a:	39 9a       	sbi	0x07, 1	; 7
  Debug_Init(0);
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <Debug_Init>

  ADMUX  =0x00;
 274:	10 92 7c 00 	sts	0x007C, r1
  ADCSRA =0x00;
 278:	10 92 7a 00 	sts	0x007A, r1
  ADMUX |=(1<<REFS0)|(1<<MUX1) |(1<<MUX2) |(1<<MUX3);
 27c:	80 91 7c 00 	lds	r24, 0x007C
 280:	8e 64       	ori	r24, 0x4E	; 78
 282:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA|=(1<<ADPS0)|(1<<ADPS2);
 286:	80 91 7a 00 	lds	r24, 0x007A
 28a:	85 60       	ori	r24, 0x05	; 5
 28c:	80 93 7a 00 	sts	0x007A, r24
  ADCSRA|=(1<<ADEN) ;
 290:	80 91 7a 00 	lds	r24, 0x007A
 294:	80 68       	ori	r24, 0x80	; 128
 296:	80 93 7a 00 	sts	0x007A, r24
  Kernel_Task_Sleep(5);
 29a:	85 e0       	ldi	r24, 0x05	; 5
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 3b 04 	call	0x876	; 0x876 <Kernel_Task_Sleep>
  
  while(1){
    
    PORTC ^= (1<<1);
 2a2:	92 e0       	ldi	r25, 0x02	; 2
 2a4:	99 2e       	mov	r9, r25
    vcc   = temp;

    val[4] = (vcc/1000)%10 + 48;
    val[5] = (vcc/100)%10 + 48;
    val[6] = (vcc/10)%10 + 48;
    val[7] = (vcc/1)%10 + 48;
 2a6:	5e 01       	movw	r10, r28
 2a8:	08 94       	sec
 2aa:	a1 1c       	adc	r10, r1
 2ac:	b1 1c       	adc	r11, r1
    
    for(uint8_t i=0;i<10;i++){
 2ae:	8b e0       	ldi	r24, 0x0B	; 11
 2b0:	c8 2e       	mov	r12, r24
 2b2:	d1 2c       	mov	r13, r1
 2b4:	cc 0e       	add	r12, r28
 2b6:	dd 1e       	adc	r13, r29
  ADCSRA|=(1<<ADEN) ;
  Kernel_Task_Sleep(5);
  
  while(1){
    
    PORTC ^= (1<<1);
 2b8:	88 b1       	in	r24, 0x08	; 8
 2ba:	89 25       	eor	r24, r9
 2bc:	88 b9       	out	0x08, r24	; 8
    
    ADCSRA |= (1<<ADSC);
 2be:	80 91 7a 00 	lds	r24, 0x007A
 2c2:	80 64       	ori	r24, 0x40	; 64
 2c4:	80 93 7a 00 	sts	0x007A, r24
    while((ADCSRA & (1<<ADIF))==0);
 2c8:	80 91 7a 00 	lds	r24, 0x007A
 2cc:	84 ff       	sbrs	r24, 4
 2ce:	fc cf       	rjmp	.-8      	; 0x2c8 <Tasks_Task1+0x9a>
    vcc = ADCW;
 2d0:	20 91 78 00 	lds	r18, 0x0078
 2d4:	30 91 79 00 	lds	r19, 0x0079
    ADCSRA |= (1<<ADIF);
 2d8:	80 91 7a 00 	lds	r24, 0x007A
 2dc:	80 61       	ori	r24, 0x10	; 16
 2de:	80 93 7a 00 	sts	0x007A, r24
    temp  = 1126400; //1024*1100
    temp /= vcc;
 2e2:	40 e0       	ldi	r20, 0x00	; 0
 2e4:	50 e0       	ldi	r21, 0x00	; 0
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	70 e3       	ldi	r23, 0x30	; 48
 2ea:	81 e1       	ldi	r24, 0x11	; 17
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 51 06 	call	0xca2	; 0xca2 <__udivmodsi4>
 2f2:	12 2f       	mov	r17, r18
 2f4:	03 2f       	mov	r16, r19
 2f6:	f4 2e       	mov	r15, r20
 2f8:	e5 2e       	mov	r14, r21
    vcc   = temp;

    val[4] = (vcc/1000)%10 + 48;
 2fa:	62 2f       	mov	r22, r18
 2fc:	73 2f       	mov	r23, r19
 2fe:	84 2f       	mov	r24, r20
 300:	95 2f       	mov	r25, r21
 302:	28 ee       	ldi	r18, 0xE8	; 232
 304:	33 e0       	ldi	r19, 0x03	; 3
 306:	40 e0       	ldi	r20, 0x00	; 0
 308:	50 e0       	ldi	r21, 0x00	; 0
 30a:	0e 94 51 06 	call	0xca2	; 0xca2 <__udivmodsi4>
 30e:	ca 01       	movw	r24, r20
 310:	b9 01       	movw	r22, r18
 312:	2a e0       	ldi	r18, 0x0A	; 10
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	40 e0       	ldi	r20, 0x00	; 0
 318:	50 e0       	ldi	r21, 0x00	; 0
 31a:	0e 94 51 06 	call	0xca2	; 0xca2 <__udivmodsi4>
 31e:	60 5d       	subi	r22, 0xD0	; 208
 320:	6d 83       	std	Y+5, r22	; 0x05
    val[5] = (vcc/100)%10 + 48;
 322:	61 2f       	mov	r22, r17
 324:	70 2f       	mov	r23, r16
 326:	8f 2d       	mov	r24, r15
 328:	9e 2d       	mov	r25, r14
 32a:	24 e6       	ldi	r18, 0x64	; 100
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	40 e0       	ldi	r20, 0x00	; 0
 330:	50 e0       	ldi	r21, 0x00	; 0
 332:	0e 94 51 06 	call	0xca2	; 0xca2 <__udivmodsi4>
 336:	ca 01       	movw	r24, r20
 338:	b9 01       	movw	r22, r18
 33a:	2a e0       	ldi	r18, 0x0A	; 10
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	40 e0       	ldi	r20, 0x00	; 0
 340:	50 e0       	ldi	r21, 0x00	; 0
 342:	0e 94 51 06 	call	0xca2	; 0xca2 <__udivmodsi4>
 346:	60 5d       	subi	r22, 0xD0	; 208
 348:	6e 83       	std	Y+6, r22	; 0x06
    val[6] = (vcc/10)%10 + 48;
 34a:	61 2f       	mov	r22, r17
 34c:	70 2f       	mov	r23, r16
 34e:	8f 2d       	mov	r24, r15
 350:	9e 2d       	mov	r25, r14
 352:	2a e0       	ldi	r18, 0x0A	; 10
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	40 e0       	ldi	r20, 0x00	; 0
 358:	50 e0       	ldi	r21, 0x00	; 0
 35a:	0e 94 51 06 	call	0xca2	; 0xca2 <__udivmodsi4>
 35e:	ca 01       	movw	r24, r20
 360:	b9 01       	movw	r22, r18
 362:	2a e0       	ldi	r18, 0x0A	; 10
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	40 e0       	ldi	r20, 0x00	; 0
 368:	50 e0       	ldi	r21, 0x00	; 0
 36a:	0e 94 51 06 	call	0xca2	; 0xca2 <__udivmodsi4>
 36e:	60 5d       	subi	r22, 0xD0	; 208
 370:	6f 83       	std	Y+7, r22	; 0x07
    val[7] = (vcc/1)%10 + 48;
 372:	61 2f       	mov	r22, r17
 374:	70 2f       	mov	r23, r16
 376:	8f 2d       	mov	r24, r15
 378:	9e 2d       	mov	r25, r14
 37a:	2a e0       	ldi	r18, 0x0A	; 10
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	40 e0       	ldi	r20, 0x00	; 0
 380:	50 e0       	ldi	r21, 0x00	; 0
 382:	0e 94 51 06 	call	0xca2	; 0xca2 <__udivmodsi4>
 386:	60 5d       	subi	r22, 0xD0	; 208
 388:	68 87       	std	Y+8, r22	; 0x08
 38a:	85 01       	movw	r16, r10
    
    for(uint8_t i=0;i<10;i++){
      Debug_Tx_Byte( val[i] );
 38c:	f8 01       	movw	r30, r16
 38e:	81 91       	ld	r24, Z+
 390:	8f 01       	movw	r16, r30
 392:	0e 94 03 06 	call	0xc06	; 0xc06 <Debug_Tx_Byte>
    val[4] = (vcc/1000)%10 + 48;
    val[5] = (vcc/100)%10 + 48;
    val[6] = (vcc/10)%10 + 48;
    val[7] = (vcc/1)%10 + 48;
    
    for(uint8_t i=0;i<10;i++){
 396:	0c 15       	cp	r16, r12
 398:	1d 05       	cpc	r17, r13
 39a:	c1 f7       	brne	.-16     	; 0x38c <Tasks_Task1+0x15e>
      Debug_Tx_Byte( val[i] );
    }
    Kernel_Task_Sleep(10);
 39c:	8a e0       	ldi	r24, 0x0A	; 10
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 3b 04 	call	0x876	; 0x876 <Kernel_Task_Sleep>
 3a4:	89 cf       	rjmp	.-238    	; 0x2b8 <Tasks_Task1+0x8a>

000003a6 <__vector_16>:


;;=================================ISR execution starting===================================;; 
.global  __vector_16                                                                           
    __vector_16:                                          ;total 40.00uS @8MHz    (320 clocks) 
	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 3a6:	5d 9a       	sbi	0x0b, 5	; 11
        KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 3a8:	0f 92       	push	r0
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	0f 92       	push	r0
 3ae:	1f 92       	push	r1
 3b0:	11 24       	eor	r1, r1
 3b2:	2f 92       	push	r2
 3b4:	3f 92       	push	r3
 3b6:	4f 92       	push	r4
 3b8:	5f 92       	push	r5
 3ba:	6f 92       	push	r6
 3bc:	7f 92       	push	r7
 3be:	8f 92       	push	r8
 3c0:	9f 92       	push	r9
 3c2:	af 92       	push	r10
 3c4:	bf 92       	push	r11
 3c6:	cf 92       	push	r12
 3c8:	df 92       	push	r13
 3ca:	ef 92       	push	r14
 3cc:	ff 92       	push	r15
 3ce:	0f 93       	push	r16
 3d0:	1f 93       	push	r17
 3d2:	2f 93       	push	r18
 3d4:	3f 93       	push	r19
 3d6:	4f 93       	push	r20
 3d8:	5f 93       	push	r21
 3da:	6f 93       	push	r22
 3dc:	7f 93       	push	r23
 3de:	8f 93       	push	r24
 3e0:	9f 93       	push	r25
 3e2:	af 93       	push	r26
 3e4:	bf 93       	push	r27
 3e6:	cf 93       	push	r28
 3e8:	df 93       	push	r29
 3ea:	ef 93       	push	r30
 3ec:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 3ee:	ee e0       	ldi	r30, 0x0E	; 14
 3f0:	f1 e0       	ldi	r31, 0x01	; 1
 3f2:	00 91 07 01 	lds	r16, 0x0107
 3f6:	00 0f       	add	r16, r16
 3f8:	e0 0f       	add	r30, r16
 3fa:	00 e0       	ldi	r16, 0x00	; 0
 3fc:	f0 1f       	adc	r31, r16
 3fe:	0d b7       	in	r16, 0x3d	; 61
 400:	1e b7       	in	r17, 0x3e	; 62
 402:	00 83       	st	Z, r16
 404:	11 83       	std	Z+1, r17	; 0x01
		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 406:	00 91 06 01 	lds	r16, 0x0106
 40a:	00 93 46 00 	sts	0x0046, r16
		KER_TICK_INCREMENT                                ;increment tick counter ( 26 clocks) 
 40e:	00 91 00 01 	lds	r16, 0x0100
 412:	03 95       	inc	r16
 414:	00 93 00 01 	sts	0x0100, r16
 418:	10 e0       	ldi	r17, 0x00	; 0
 41a:	00 91 01 01 	lds	r16, 0x0101
 41e:	01 1f       	adc	r16, r17
 420:	00 93 01 01 	sts	0x0101, r16
 424:	00 91 02 01 	lds	r16, 0x0102
 428:	01 1f       	adc	r16, r17
 42a:	00 93 02 01 	sts	0x0102, r16
 42e:	00 91 03 01 	lds	r16, 0x0103
 432:	01 1f       	adc	r16, r17
 434:	00 93 03 01 	sts	0x0103, r16
 438:	00 91 04 01 	lds	r16, 0x0104
 43c:	01 1f       	adc	r16, r17
 43e:	00 93 04 01 	sts	0x0104, r16
		LDI    R24               , SCH_MODE_HANDLER       ;set sch mode           (  1 clock ) 
 442:	80 e0       	ldi	r24, 0x00	; 0
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
 444:	0f ef       	ldi	r16, 0xFF	; 255
 446:	00 93 09 01 	sts	0x0109, r16
 44a:	00 e0       	ldi	r16, 0x00	; 0
 44c:	00 93 0a 01 	sts	0x010A, r16
 450:	98 2f       	mov	r25, r24

00000452 <_KER_SCH_LOOP8>:
 452:	00 93 07 01 	sts	0x0107, r16
 456:	89 2f       	mov	r24, r25
 458:	e4 e4       	ldi	r30, 0x44	; 68
 45a:	f1 e0       	ldi	r31, 0x01	; 1
 45c:	00 91 07 01 	lds	r16, 0x0107
 460:	00 0f       	add	r16, r16
 462:	e0 0f       	add	r30, r16
 464:	00 e0       	ldi	r16, 0x00	; 0
 466:	f0 1f       	adc	r31, r16
 468:	00 81       	ld	r16, Z
 46a:	11 81       	ldd	r17, Z+1	; 0x01
 46c:	20 2f       	mov	r18, r16
 46e:	21 2b       	or	r18, r17
 470:	59 f0       	breq	.+22     	; 0x488 <_VAL_NULL9>
 472:	81 30       	cpi	r24, 0x01	; 1
 474:	99 f0       	breq	.+38     	; 0x49c <_VAL_NOT_NULL9>
 476:	21 e0       	ldi	r18, 0x01	; 1
 478:	02 1b       	sub	r16, r18
 47a:	20 e0       	ldi	r18, 0x00	; 0
 47c:	12 0b       	sbc	r17, r18
 47e:	00 83       	st	Z, r16
 480:	11 83       	std	Z+1, r17	; 0x01
 482:	20 2f       	mov	r18, r16
 484:	21 2b       	or	r18, r17
 486:	51 f4       	brne	.+20     	; 0x49c <_VAL_NOT_NULL9>

00000488 <_VAL_NULL9>:
 488:	e0 e3       	ldi	r30, 0x30	; 48
 48a:	f1 e0       	ldi	r31, 0x01	; 1
 48c:	00 91 07 01 	lds	r16, 0x0107
 490:	e0 0f       	add	r30, r16
 492:	00 e0       	ldi	r16, 0x00	; 0
 494:	f0 1f       	adc	r31, r16
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	80 83       	st	Z, r24
 49a:	01 c0       	rjmp	.+2      	; 0x49e <_EXIT_SLP_TIME9>

0000049c <_VAL_NOT_NULL9>:
 49c:	80 e0       	ldi	r24, 0x00	; 0

0000049e <_EXIT_SLP_TIME9>:
 49e:	81 30       	cpi	r24, 0x01	; 1
 4a0:	91 f4       	brne	.+36     	; 0x4c6 <_KER_SCH_NEXT8>
 4a2:	ea e3       	ldi	r30, 0x3A	; 58
 4a4:	f1 e0       	ldi	r31, 0x01	; 1
 4a6:	00 e0       	ldi	r16, 0x00	; 0
 4a8:	80 91 07 01 	lds	r24, 0x0107
 4ac:	e8 0f       	add	r30, r24
 4ae:	f0 1f       	adc	r31, r16
 4b0:	80 81       	ld	r24, Z
 4b2:	00 91 09 01 	lds	r16, 0x0109
 4b6:	80 17       	cp	r24, r16
 4b8:	30 f4       	brcc	.+12     	; 0x4c6 <_KER_SCH_NEXT8>
 4ba:	80 93 09 01 	sts	0x0109, r24
 4be:	00 91 07 01 	lds	r16, 0x0107
 4c2:	00 93 0a 01 	sts	0x010A, r16

000004c6 <_KER_SCH_NEXT8>:
 4c6:	00 91 07 01 	lds	r16, 0x0107
 4ca:	03 95       	inc	r16
 4cc:	10 91 08 01 	lds	r17, 0x0108
 4d0:	01 17       	cp	r16, r17
 4d2:	08 f4       	brcc	.+2      	; 0x4d6 <_KER_SCH_EXIT8>
 4d4:	be cf       	rjmp	.-132    	; 0x452 <_KER_SCH_LOOP8>

000004d6 <_KER_SCH_EXIT8>:
 4d6:	00 91 0a 01 	lds	r16, 0x010A
 4da:	00 93 07 01 	sts	0x0107, r16
		KER_CPU_USAGE                                     ;calc cpu usage         ( 26 clocks) 
 4de:	00 91 07 01 	lds	r16, 0x0107
 4e2:	00 23       	and	r16, r16
 4e4:	29 f0       	breq	.+10     	; 0x4f0 <_KER_USG_TICK13>
 4e6:	00 91 0c 01 	lds	r16, 0x010C
 4ea:	03 95       	inc	r16
 4ec:	00 93 0c 01 	sts	0x010C, r16

000004f0 <_KER_USG_TICK13>:
 4f0:	00 91 0b 01 	lds	r16, 0x010B
 4f4:	03 95       	inc	r16
 4f6:	04 36       	cpi	r16, 0x64	; 100
 4f8:	40 f0       	brcs	.+16     	; 0x50a <_KER_USG_UTC_SV13>
 4fa:	00 e0       	ldi	r16, 0x00	; 0
 4fc:	10 91 0c 01 	lds	r17, 0x010C
 500:	10 93 0d 01 	sts	0x010D, r17
 504:	10 e0       	ldi	r17, 0x00	; 0
 506:	10 93 0c 01 	sts	0x010C, r17

0000050a <_KER_USG_UTC_SV13>:
 50a:	00 93 0b 01 	sts	0x010B, r16
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 50e:	ee e0       	ldi	r30, 0x0E	; 14
 510:	f1 e0       	ldi	r31, 0x01	; 1
 512:	00 91 07 01 	lds	r16, 0x0107
 516:	00 0f       	add	r16, r16
 518:	e0 0f       	add	r30, r16
 51a:	00 e0       	ldi	r16, 0x00	; 0
 51c:	f0 1f       	adc	r31, r16
 51e:	00 81       	ld	r16, Z
 520:	11 81       	ldd	r17, Z+1	; 0x01
 522:	0d bf       	out	0x3d, r16	; 61
 524:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
 526:	ff 91       	pop	r31
 528:	ef 91       	pop	r30
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	bf 91       	pop	r27
 530:	af 91       	pop	r26
 532:	9f 91       	pop	r25
 534:	8f 91       	pop	r24
 536:	7f 91       	pop	r23
 538:	6f 91       	pop	r22
 53a:	5f 91       	pop	r21
 53c:	4f 91       	pop	r20
 53e:	3f 91       	pop	r19
 540:	2f 91       	pop	r18
 542:	1f 91       	pop	r17
 544:	0f 91       	pop	r16
 546:	ff 90       	pop	r15
 548:	ef 90       	pop	r14
 54a:	df 90       	pop	r13
 54c:	cf 90       	pop	r12
 54e:	bf 90       	pop	r11
 550:	af 90       	pop	r10
 552:	9f 90       	pop	r9
 554:	8f 90       	pop	r8
 556:	7f 90       	pop	r7
 558:	6f 90       	pop	r6
 55a:	5f 90       	pop	r5
 55c:	4f 90       	pop	r4
 55e:	3f 90       	pop	r3
 560:	2f 90       	pop	r2
 562:	1f 90       	pop	r1
 564:	0f 90       	pop	r0
 566:	0f be       	out	0x3f, r0	; 63
 568:	0f 90       	pop	r0
	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 56a:	5d 98       	cbi	0x0b, 5	; 11
		RETI                                              ;return from interrupt  (  4 clocks) 
 56c:	18 95       	reti

0000056e <Kernel_SysTick_Reg_Init>:
;used registers          : R16, R17, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
;arg registers           : R24(Prescaler), R22(ReloadVal)                                      
;return registers        : None                                                                
;unsafe access registers : R16, R17, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
Kernel_SysTick_Reg_Init:                                  ;total 11.5uS @8MHz     ( 92 clocks) 
        CLI                                               ;disable global int     (  1 clock ) 
 56e:	f8 94       	cli
		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 570:	5d 98       	cbi	0x0b, 5	; 11
 572:	55 9a       	sbi	0x0a, 5	; 10
        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 574:	a0 91 22 01 	lds	r26, 0x0122
 578:	b0 91 23 01 	lds	r27, 0x0123
 57c:	0d b7       	in	r16, 0x3d	; 61
 57e:	1e b7       	in	r17, 0x3e	; 62
 580:	0d 93       	st	X+, r16
 582:	1d 93       	st	X+, r17
 584:	ed 93       	st	X+, r30
 586:	fd 93       	st	X+, r31
 588:	a0 93 22 01 	sts	0x0122, r26
 58c:	b0 93 23 01 	sts	0x0123, r27
		;clear reg                                                                             
		LDI   R16                , 0x00                   ;set 0x00 to R16        (  1 clock ) 
 590:	00 e0       	ldi	r16, 0x00	; 0
		;clear tick counter                                                                    
		STS   KerBase+OFB_TICK0  , R16                    ;clear  KerBase[0]      (  2 clocks) 
 592:	00 93 00 01 	sts	0x0100, r16
		STS   KerBase+OFB_TICK1  , R16                    ;clear  KerBase[1]      (  2 clocks) 
 596:	00 93 01 01 	sts	0x0101, r16
		STS   KerBase+OFB_TICK2  , R16                    ;clear  KerBase[2]      (  2 clocks) 
 59a:	00 93 02 01 	sts	0x0102, r16
		STS   KerBase+OFB_TICK3  , R16                    ;clear  KerBase[3]      (  2 clocks) 
 59e:	00 93 03 01 	sts	0x0103, r16
		STS   KerBase+OFB_TICK4  , R16                    ;clear  KerBase[4]      (  2 clocks) 
 5a2:	00 93 04 01 	sts	0x0104, r16
		;clear system registers                                                                
		STS   KerBase+OFB_PRS    , R16                    ;clear  KerBase[5]      (  2 clocks) 
 5a6:	00 93 05 01 	sts	0x0105, r16
		STS   KerBase+OFB_RLD    , R16                    ;clear  KerBase[6]      (  2 clocks) 
 5aa:	00 93 06 01 	sts	0x0106, r16
		STS   KerBase+OFB_TID    , R16                    ;clear  KerBase[7]      (  2 clocks) 
 5ae:	00 93 07 01 	sts	0x0107, r16
		STS   KerBase+OFB_NTSK   , R16                    ;clear  KerBase[8]      (  2 clocks) 
 5b2:	00 93 08 01 	sts	0x0108, r16
		STS   KerBase+OFB_LPR    , R16                    ;clear  KerBase[9]      (  2 clocks) 
 5b6:	00 93 09 01 	sts	0x0109, r16
        STS   KerBase+OFB_PTID   , R16                    ;clear  KerBase[10]     (  2 clocks) 
 5ba:	00 93 0a 01 	sts	0x010A, r16
		STS   KerBase+OFB_UTC    , R16                    ;clear  KerBase[11]     (  2 clocks) 
 5be:	00 93 0b 01 	sts	0x010B, r16
		STS   KerBase+OFB_UATC   , R16                    ;clear  KerBase[12]     (  2 clocks) 
 5c2:	00 93 0c 01 	sts	0x010C, r16
		STS   KerBase+OFB_USAGE  , R16                    ;clear  KerBase[13]     (  2 clocks) 
 5c6:	00 93 0d 01 	sts	0x010D, r16
		;clear all timer registers                                                             
		STS   SRTCCR0A           , R16                    ;clear TCCR0A           (  2 clocks) 
 5ca:	00 93 44 00 	sts	0x0044, r16
		STS   SRTCCR0B           , R16                    ;clear TCCR0B           (  2 clocks) 
 5ce:	00 93 45 00 	sts	0x0045, r16
		STS   SRTIMSK0           , R16                    ;clear TIMSK0           (  2 clocks) 
 5d2:	00 93 6e 00 	sts	0x006E, r16
		STS   SRTIFR0            , R16                    ;clear TIFR0            (  2 clocks) 
 5d6:	00 93 35 00 	sts	0x0035, r16
		STS   SROCR0A            , R16                    ;clear OCR0A            (  2 clocks) 
 5da:	00 93 47 00 	sts	0x0047, r16
		STS   SROCR0B            , R16                    ;clear OCR0B            (  2 clocks) 
 5de:	00 93 48 00 	sts	0x0048, r16
		STS   SRTCNT0            , R16                    ;clear TCNT0            (  2 clocks) 
 5e2:	00 93 46 00 	sts	0x0046, r16
		;save values for future use                                                            
		STS   KerBase+OFB_PRS    , R24                    ;KerBase[5] prescaler   (  2 clocks) 
 5e6:	80 93 05 01 	sts	0x0105, r24
		STS   KerBase+OFB_RLD    , R22                    ;KerBase[6] reload val  (  2 clocks) 
 5ea:	60 93 06 01 	sts	0x0106, r22
        KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 5ee:	a0 91 22 01 	lds	r26, 0x0122
 5f2:	b0 91 23 01 	lds	r27, 0x0123
 5f6:	fe 91       	ld	r31, -X
 5f8:	ee 91       	ld	r30, -X
 5fa:	1e 91       	ld	r17, -X
 5fc:	0e 91       	ld	r16, -X
 5fe:	0d bf       	out	0x3d, r16	; 61
 600:	1e bf       	out	0x3e, r17	; 62
 602:	a0 93 22 01 	sts	0x0122, r26
 606:	b0 93 23 01 	sts	0x0123, r27
		RET                                               ;return from subroutine (  4 clocks) 
 60a:	08 95       	ret

0000060c <Kernel_Task_Create>:
;used registers          : R16, R17, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)         
;arg registers           : R25:R24(FuncPtr), R22(TaskPriority)                                 
;return registers        : None                                                                
;unsafe access registers : R16, R17, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)         
Kernel_Task_Create:                                       ;total 20.38uS @8MHz    (163 clocks) 
        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 60c:	a0 91 22 01 	lds	r26, 0x0122
 610:	b0 91 23 01 	lds	r27, 0x0123
 614:	0d b7       	in	r16, 0x3d	; 61
 616:	1e b7       	in	r17, 0x3e	; 62
 618:	0d 93       	st	X+, r16
 61a:	1d 93       	st	X+, r17
 61c:	ed 93       	st	X+, r30
 61e:	fd 93       	st	X+, r31
 620:	a0 93 22 01 	sts	0x0122, r26
 624:	b0 93 23 01 	sts	0x0123, r27
		LDI   R17                , 0x00                   ;clear reg              (  1 clock ) 
 628:	10 e0       	ldi	r17, 0x00	; 0
		;set priority to KerSchPr+task_id                                                      
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 62a:	ea e3       	ldi	r30, 0x3A	; 58
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 62c:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 62e:	00 91 07 01 	lds	r16, 0x0107
 632:	e0 0f       	add	r30, r16
 634:	00 e0       	ldi	r16, 0x00	; 0
 636:	f0 1f       	adc	r31, r16
		ST    Z                  , R22                    ;save priority          (  2 clocks) 
 638:	60 83       	st	Z, r22
		;set task status to KerSchSts+task_id                                                  
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 63a:	e0 e3       	ldi	r30, 0x30	; 48
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 63c:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 63e:	00 91 07 01 	lds	r16, 0x0107
 642:	e0 0f       	add	r30, r16
 644:	00 e0       	ldi	r16, 0x00	; 0
 646:	f0 1f       	adc	r31, r16
		LDI   R16                , TASK_READY             ;set status as ready    (  1 clock ) 
 648:	01 e0       	ldi	r16, 0x01	; 1
		ST    Z                  , R16                    ;save status            (  2 clocks) 
 64a:	00 83       	st	Z, r16
		;stack pointer for current task (KerStack + KER_STK_SZ*(task_id+1) - 1) ->stack top    
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 64c:	00 91 07 01 	lds	r16, 0x0107
		MOV   R17                , R16                    ;load task_id           (  1 clock ) 
 650:	10 2f       	mov	r17, r16
		INC   R17                                         ;increment task_id      (  1 clock ) 
 652:	13 95       	inc	r17
		LDI   R18                , KER_STK_SZ             ;load stack size        (  1 clock ) 
 654:	20 e8       	ldi	r18, 0x80	; 128
		MUL   R17                , R18                    ;multiply to get offset (  2 clocks) 
 656:	12 9f       	mul	r17, r18
		MOV   ZL                 , R0                     ;load multiplied low    (  1 clocks) 
 658:	e0 2d       	mov	r30, r0
		MOV   ZH                 , R1                     ;load multiplied high   (  1 clocks) 
 65a:	f1 2d       	mov	r31, r1
		SBIW  ZL                 , 0x01                   ;dec multiplied val-1   (  2 clocks) 
 65c:	31 97       	sbiw	r30, 0x01	; 1
		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 65e:	11 24       	eor	r1, r1
		LDI   R17                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
 660:	18 e5       	ldi	r17, 0x58	; 88
		LDI   R18                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
 662:	21 e0       	ldi	r18, 0x01	; 1
		ADD   ZL                 , R17                    ;add low bytes          (  1 clock ) 
 664:	e1 0f       	add	r30, r17
		ADC   ZH                 , R18                    ;add high bytes+carry   (  1 clock ) 
 666:	f2 1f       	adc	r31, r18
		OUT   IOSPL              , ZL                     ;load SPL               (  1 clock ) 
 668:	ed bf       	out	0x3d, r30	; 61
        OUT   IOSPH              , ZH                     ;load SPH               (  1 clock ) 
 66a:	fe bf       	out	0x3e, r31	; 62
		;function argument directly returns word address                                       
	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
 66c:	8f 93       	push	r24
		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 66e:	9f 93       	push	r25
		;push context to stack of this task                                                    
		KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 670:	0f 92       	push	r0
 672:	0f b6       	in	r0, 0x3f	; 63
 674:	0f 92       	push	r0
 676:	1f 92       	push	r1
 678:	11 24       	eor	r1, r1
 67a:	2f 92       	push	r2
 67c:	3f 92       	push	r3
 67e:	4f 92       	push	r4
 680:	5f 92       	push	r5
 682:	6f 92       	push	r6
 684:	7f 92       	push	r7
 686:	8f 92       	push	r8
 688:	9f 92       	push	r9
 68a:	af 92       	push	r10
 68c:	bf 92       	push	r11
 68e:	cf 92       	push	r12
 690:	df 92       	push	r13
 692:	ef 92       	push	r14
 694:	ff 92       	push	r15
 696:	0f 93       	push	r16
 698:	1f 93       	push	r17
 69a:	2f 93       	push	r18
 69c:	3f 93       	push	r19
 69e:	4f 93       	push	r20
 6a0:	5f 93       	push	r21
 6a2:	6f 93       	push	r22
 6a4:	7f 93       	push	r23
 6a6:	8f 93       	push	r24
 6a8:	9f 93       	push	r25
 6aa:	af 93       	push	r26
 6ac:	bf 93       	push	r27
 6ae:	cf 93       	push	r28
 6b0:	df 93       	push	r29
 6b2:	ef 93       	push	r30
 6b4:	ff 93       	push	r31
		;read stack pointer of current task (necessary when restore)                           
		IN    R17                , IOSPL                  ;read SPL               (  1 clock ) 
 6b6:	1d b7       	in	r17, 0x3d	; 61
        IN    R18                , IOSPH                  ;read SPH               (  1 clock ) 
 6b8:	2e b7       	in	r18, 0x3e	; 62
		;calculate the address where current task's SP will be stored and store SP             
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 6ba:	00 91 07 01 	lds	r16, 0x0107
		MOV   R19                , R16                    ;copy task_id           (  1 clock ) 
 6be:	30 2f       	mov	r19, r16
		LSL   R19                                         ;left shift to multiply (  1 clock ) 
 6c0:	33 0f       	add	r19, r19
		LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 6c2:	ee e0       	ldi	r30, 0x0E	; 14
		LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 6c4:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R19                    ;add offset to array    (  1 clock ) 
 6c6:	e3 0f       	add	r30, r19
		LDI   R16                , 0x00                   ;clear reg              (  1 clock ) 
 6c8:	00 e0       	ldi	r16, 0x00	; 0
		ADC   ZH                 , R16                    ;add carry if any       (  1 clock ) 
 6ca:	f0 1f       	adc	r31, r16
		ST    Z+                 , R17                    ;SPL at KerPSp+offset   (  2 clocks) 
 6cc:	11 93       	st	Z+, r17
		ST    Z                  , R18                    ;SPH at KerPSp+offset   (  2 clocks) 
 6ce:	20 83       	st	Z, r18
		;increment task_id                                                                     
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 6d0:	00 91 07 01 	lds	r16, 0x0107
		INC   R16                                         ;increment task_id      (  1 clock ) 
 6d4:	03 95       	inc	r16
		STS   KerBase+OFB_TID    , R16                    ;store task_id          (  2 clocks) 
 6d6:	00 93 07 01 	sts	0x0107, r16
		;increment ntask                                                                       
		LDS   R16                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 6da:	00 91 08 01 	lds	r16, 0x0108
		INC   R16                                         ;increment ntask        (  1 clock ) 
 6de:	03 95       	inc	r16
		STS   KerBase+OFB_NTSK   , R16                    ;store ntask            (  2 clocks) 
 6e0:	00 93 08 01 	sts	0x0108, r16
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 6e4:	a0 91 22 01 	lds	r26, 0x0122
 6e8:	b0 91 23 01 	lds	r27, 0x0123
 6ec:	fe 91       	ld	r31, -X
 6ee:	ee 91       	ld	r30, -X
 6f0:	1e 91       	ld	r17, -X
 6f2:	0e 91       	ld	r16, -X
 6f4:	0d bf       	out	0x3d, r16	; 61
 6f6:	1e bf       	out	0x3e, r17	; 62
 6f8:	a0 93 22 01 	sts	0x0122, r26
 6fc:	b0 93 23 01 	sts	0x0123, r27
		RET                                               ;return from subroutine (  4 clocks) 
 700:	08 95       	ret

00000702 <Kernel_Start_Tasks>:
;used registers          : R0~R31                                                              
;arg registers           : None                                                                
;return registers        : None                                                                
;unsafe access registers : R16, R17, R18, R24, R25, R30(ZL), R31(ZH)                           
Kernel_Start_Tasks:                                       ;total 11.38uS @8MHz    ( 91 clocks) 
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 702:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
 704:	0f ef       	ldi	r16, 0xFF	; 255
 706:	00 93 09 01 	sts	0x0109, r16
 70a:	00 e0       	ldi	r16, 0x00	; 0
 70c:	00 93 0a 01 	sts	0x010A, r16
 710:	98 2f       	mov	r25, r24

00000712 <_KER_SCH_LOOP30>:
 712:	00 93 07 01 	sts	0x0107, r16
 716:	89 2f       	mov	r24, r25
 718:	e4 e4       	ldi	r30, 0x44	; 68
 71a:	f1 e0       	ldi	r31, 0x01	; 1
 71c:	00 91 07 01 	lds	r16, 0x0107
 720:	00 0f       	add	r16, r16
 722:	e0 0f       	add	r30, r16
 724:	00 e0       	ldi	r16, 0x00	; 0
 726:	f0 1f       	adc	r31, r16
 728:	00 81       	ld	r16, Z
 72a:	11 81       	ldd	r17, Z+1	; 0x01
 72c:	20 2f       	mov	r18, r16
 72e:	21 2b       	or	r18, r17
 730:	59 f0       	breq	.+22     	; 0x748 <_VAL_NULL31>
 732:	81 30       	cpi	r24, 0x01	; 1
 734:	99 f0       	breq	.+38     	; 0x75c <_VAL_NOT_NULL31>
 736:	21 e0       	ldi	r18, 0x01	; 1
 738:	02 1b       	sub	r16, r18
 73a:	20 e0       	ldi	r18, 0x00	; 0
 73c:	12 0b       	sbc	r17, r18
 73e:	00 83       	st	Z, r16
 740:	11 83       	std	Z+1, r17	; 0x01
 742:	20 2f       	mov	r18, r16
 744:	21 2b       	or	r18, r17
 746:	51 f4       	brne	.+20     	; 0x75c <_VAL_NOT_NULL31>

00000748 <_VAL_NULL31>:
 748:	e0 e3       	ldi	r30, 0x30	; 48
 74a:	f1 e0       	ldi	r31, 0x01	; 1
 74c:	00 91 07 01 	lds	r16, 0x0107
 750:	e0 0f       	add	r30, r16
 752:	00 e0       	ldi	r16, 0x00	; 0
 754:	f0 1f       	adc	r31, r16
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	80 83       	st	Z, r24
 75a:	01 c0       	rjmp	.+2      	; 0x75e <_EXIT_SLP_TIME31>

0000075c <_VAL_NOT_NULL31>:
 75c:	80 e0       	ldi	r24, 0x00	; 0

0000075e <_EXIT_SLP_TIME31>:
 75e:	81 30       	cpi	r24, 0x01	; 1
 760:	91 f4       	brne	.+36     	; 0x786 <_KER_SCH_NEXT30>
 762:	ea e3       	ldi	r30, 0x3A	; 58
 764:	f1 e0       	ldi	r31, 0x01	; 1
 766:	00 e0       	ldi	r16, 0x00	; 0
 768:	80 91 07 01 	lds	r24, 0x0107
 76c:	e8 0f       	add	r30, r24
 76e:	f0 1f       	adc	r31, r16
 770:	80 81       	ld	r24, Z
 772:	00 91 09 01 	lds	r16, 0x0109
 776:	80 17       	cp	r24, r16
 778:	30 f4       	brcc	.+12     	; 0x786 <_KER_SCH_NEXT30>
 77a:	80 93 09 01 	sts	0x0109, r24
 77e:	00 91 07 01 	lds	r16, 0x0107
 782:	00 93 0a 01 	sts	0x010A, r16

00000786 <_KER_SCH_NEXT30>:
 786:	00 91 07 01 	lds	r16, 0x0107
 78a:	03 95       	inc	r16
 78c:	10 91 08 01 	lds	r17, 0x0108
 790:	01 17       	cp	r16, r17
 792:	08 f4       	brcc	.+2      	; 0x796 <_KER_SCH_EXIT30>
 794:	be cf       	rjmp	.-132    	; 0x712 <_KER_SCH_LOOP30>

00000796 <_KER_SCH_EXIT30>:
 796:	00 91 0a 01 	lds	r16, 0x010A
 79a:	00 93 07 01 	sts	0x0107, r16
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 79e:	ee e0       	ldi	r30, 0x0E	; 14
 7a0:	f1 e0       	ldi	r31, 0x01	; 1
 7a2:	00 91 07 01 	lds	r16, 0x0107
 7a6:	00 0f       	add	r16, r16
 7a8:	e0 0f       	add	r30, r16
 7aa:	00 e0       	ldi	r16, 0x00	; 0
 7ac:	f0 1f       	adc	r31, r16
 7ae:	00 81       	ld	r16, Z
 7b0:	11 81       	ldd	r17, Z+1	; 0x01
 7b2:	0d bf       	out	0x3d, r16	; 61
 7b4:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 7b6:	ff 91       	pop	r31
 7b8:	ef 91       	pop	r30
 7ba:	df 91       	pop	r29
 7bc:	cf 91       	pop	r28
 7be:	bf 91       	pop	r27
 7c0:	af 91       	pop	r26
 7c2:	9f 91       	pop	r25
 7c4:	8f 91       	pop	r24
 7c6:	7f 91       	pop	r23
 7c8:	6f 91       	pop	r22
 7ca:	5f 91       	pop	r21
 7cc:	4f 91       	pop	r20
 7ce:	3f 91       	pop	r19
 7d0:	2f 91       	pop	r18
 7d2:	1f 91       	pop	r17
 7d4:	0f 91       	pop	r16
 7d6:	ff 90       	pop	r15
 7d8:	ef 90       	pop	r14
 7da:	df 90       	pop	r13
 7dc:	cf 90       	pop	r12
 7de:	bf 90       	pop	r11
 7e0:	af 90       	pop	r10
 7e2:	9f 90       	pop	r9
 7e4:	8f 90       	pop	r8
 7e6:	7f 90       	pop	r7
 7e8:	6f 90       	pop	r6
 7ea:	5f 90       	pop	r5
 7ec:	4f 90       	pop	r4
 7ee:	3f 90       	pop	r3
 7f0:	2f 90       	pop	r2
 7f2:	1f 90       	pop	r1
 7f4:	0f 90       	pop	r0
 7f6:	0f be       	out	0x3f, r0	; 63
 7f8:	0f 90       	pop	r0
 7fa:	78 94       	sei
		;config timer for system tick                                                          
		KER_TIMER_INIT                                    ;init timer, int enable ( 12 clocks) 
 7fc:	00 91 05 01 	lds	r16, 0x0105
 800:	10 91 06 01 	lds	r17, 0x0106
 804:	00 93 45 00 	sts	0x0045, r16
 808:	10 93 46 00 	sts	0x0046, r17
 80c:	01 e0       	ldi	r16, 0x01	; 1
 80e:	00 93 6e 00 	sts	0x006E, r16
 812:	78 94       	sei
		;execute return to jump to highest priority task                                       
		RET                                               ;return from subroutine (  4 clocks) 
 814:	08 95       	ret

00000816 <Kernel_Init>:
;used registers          : R1, R16, R17, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
;arg registers           : None                                                                
;return registers        : None                                                                
;unsafe access registers : R1, R16, R17, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
Kernel_Init:                                              ;total 38.63uS @8MHz    (309 clocks) 
		CLR   R1                                          ;gcc expects            (  1 clock ) 
 816:	11 24       	eor	r1, r1
        ;store stack top (for MSP) addr to KerSSZ+OFM_MSPI0:1                                  
		LDI   R16                , lo8(KerSSZ+OFM_MSPS)   ;load low address       (  1 clock ) 
 818:	04 e2       	ldi	r16, 0x24	; 36
		LDI   R17                , hi8(KerSSZ+OFM_MSPS)   ;load high address      (  1 clock ) 
 81a:	11 e0       	ldi	r17, 0x01	; 1
        STS   KerSSZ+OFM_MSPI+0  , R16                    ;set mspi to stack top  (  2 clocks) 
 81c:	00 93 22 01 	sts	0x0122, r16
		STS   KerSSZ+OFM_MSPI+1  , R17                    ;set mspi to stack top  (  2 clocks) 
 820:	10 93 23 01 	sts	0x0123, r17
		KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 824:	a0 91 22 01 	lds	r26, 0x0122
 828:	b0 91 23 01 	lds	r27, 0x0123
 82c:	0d b7       	in	r16, 0x3d	; 61
 82e:	1e b7       	in	r17, 0x3e	; 62
 830:	0d 93       	st	X+, r16
 832:	1d 93       	st	X+, r17
 834:	ed 93       	st	X+, r30
 836:	fd 93       	st	X+, r31
 838:	a0 93 22 01 	sts	0x0122, r26
 83c:	b0 93 23 01 	sts	0x0123, r27
		;init timer for kernel                                                                 
		LDI   R24                , 0x03                   ;set prescaler          (  1 clock ) 
 840:	83 e0       	ldi	r24, 0x03	; 3
		LDI   R22                , 0x82                   ;set reload val         (  1 clock ) 
 842:	62 e8       	ldi	r22, 0x82	; 130
		CALL  Kernel_SysTick_Reg_Init                     ;init timer             ( 92 clocks) 
 844:	0e 94 b7 02 	call	0x56e	; 0x56e <Kernel_SysTick_Reg_Init>
		;create idle task at task_id 0, priority 0xFF (lowest)                                 
		LDI   R24                , lo8(Kernel_Task_Idle)  ;load func addr low     (  1 clock ) 
 848:	84 e7       	ldi	r24, 0x74	; 116
		LDI   R25                , hi8(Kernel_Task_Idle)  ;load func addr high    (  1 clock ) 
 84a:	98 e0       	ldi	r25, 0x08	; 8
		LSR   R25                                         ;right shift to divide  (  1 clock ) 
 84c:	96 95       	lsr	r25
		ROR   R24                                         ;rotate right th carry  (  1 clock ) 
 84e:	87 95       	ror	r24
		LDI   R22                , 0xFF                   ;set max val            (  1 clock ) 
 850:	6f ef       	ldi	r22, 0xFF	; 255
		CALL  Kernel_Task_Create                          ;init idle task         (163 clocks) 
 852:	0e 94 06 03 	call	0x60c	; 0x60c <Kernel_Task_Create>
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 856:	a0 91 22 01 	lds	r26, 0x0122
 85a:	b0 91 23 01 	lds	r27, 0x0123
 85e:	fe 91       	ld	r31, -X
 860:	ee 91       	ld	r30, -X
 862:	1e 91       	ld	r17, -X
 864:	0e 91       	ld	r16, -X
 866:	0d bf       	out	0x3d, r16	; 61
 868:	1e bf       	out	0x3e, r17	; 62
 86a:	a0 93 22 01 	sts	0x0122, r26
 86e:	b0 93 23 01 	sts	0x0123, r27
		;execute return to jump to task0, pushed while task init                               
		RET                                               ;return from subroutine (  4 clocks) 
 872:	08 95       	ret

00000874 <Kernel_Task_Idle>:
;arg registers           : None                                                                
;return registers        : None                                                                
;unsafe access registers : None                                                                
Kernel_Task_Idle:                                         ;total 0.5uS @8MHz      (  4 clocks) 
    _IDLE_LOOP:                                           ;forever loop                        
		RJMP  _IDLE_LOOP                                  ;return from subroutine (  4 clocks) 
 874:	ff cf       	rjmp	.-2      	; 0x874 <Kernel_Task_Idle>

00000876 <Kernel_Task_Sleep>:
;arg registers           : R25:R24(SleepTime)                                                  
;return registers        : None                                                                
;unsafe access registers : R16, R17, R18, R24, R25, R30(ZL), R31(ZH)                           
Kernel_Task_Sleep:                                        ;total 35.5uS @8MHz     (284 clocks) 
        ;save current context                                                                  
        KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
 876:	0f 92       	push	r0
 878:	0f b6       	in	r0, 0x3f	; 63
 87a:	f8 94       	cli
 87c:	0f 92       	push	r0
 87e:	1f 92       	push	r1
 880:	11 24       	eor	r1, r1
 882:	2f 92       	push	r2
 884:	3f 92       	push	r3
 886:	4f 92       	push	r4
 888:	5f 92       	push	r5
 88a:	6f 92       	push	r6
 88c:	7f 92       	push	r7
 88e:	8f 92       	push	r8
 890:	9f 92       	push	r9
 892:	af 92       	push	r10
 894:	bf 92       	push	r11
 896:	cf 92       	push	r12
 898:	df 92       	push	r13
 89a:	ef 92       	push	r14
 89c:	ff 92       	push	r15
 89e:	0f 93       	push	r16
 8a0:	1f 93       	push	r17
 8a2:	2f 93       	push	r18
 8a4:	3f 93       	push	r19
 8a6:	4f 93       	push	r20
 8a8:	5f 93       	push	r21
 8aa:	6f 93       	push	r22
 8ac:	7f 93       	push	r23
 8ae:	8f 93       	push	r24
 8b0:	9f 93       	push	r25
 8b2:	af 93       	push	r26
 8b4:	bf 93       	push	r27
 8b6:	cf 93       	push	r28
 8b8:	df 93       	push	r29
 8ba:	ef 93       	push	r30
 8bc:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 8be:	ee e0       	ldi	r30, 0x0E	; 14
 8c0:	f1 e0       	ldi	r31, 0x01	; 1
 8c2:	00 91 07 01 	lds	r16, 0x0107
 8c6:	00 0f       	add	r16, r16
 8c8:	e0 0f       	add	r30, r16
 8ca:	00 e0       	ldi	r16, 0x00	; 0
 8cc:	f0 1f       	adc	r31, r16
 8ce:	0d b7       	in	r16, 0x3d	; 61
 8d0:	1e b7       	in	r17, 0x3e	; 62
 8d2:	00 83       	st	Z, r16
 8d4:	11 83       	std	Z+1, r17	; 0x01
		;create next task wakeup time (args R25:R24)                                           
		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 8d6:	e4 e4       	ldi	r30, 0x44	; 68
		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 8d8:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
 8da:	00 91 07 01 	lds	r16, 0x0107
 8de:	00 0f       	add	r16, r16
 8e0:	e0 0f       	add	r30, r16
 8e2:	00 e0       	ldi	r16, 0x00	; 0
 8e4:	f0 1f       	adc	r31, r16
		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
 8e6:	80 83       	st	Z, r24
		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 8e8:	91 83       	std	Z+1, r25	; 0x01
		;update task scheduler status as blocked                                               
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 8ea:	e0 e3       	ldi	r30, 0x30	; 48
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 8ec:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
 8ee:	00 91 07 01 	lds	r16, 0x0107
 8f2:	e0 0f       	add	r30, r16
 8f4:	00 e0       	ldi	r16, 0x00	; 0
 8f6:	f0 1f       	adc	r31, r16
        LDI   R16                , TASK_BLOCKED           ;block task until cnt=0 (  1 clock ) 
 8f8:	00 e0       	ldi	r16, 0x00	; 0
		STD   Z+0                , R16                    ;save block flag        (  2 clocks) 
 8fa:	00 83       	st	Z, r16
		;run scheduler, load next task sp, restore context                                     
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 8fc:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
 8fe:	0f ef       	ldi	r16, 0xFF	; 255
 900:	00 93 09 01 	sts	0x0109, r16
 904:	00 e0       	ldi	r16, 0x00	; 0
 906:	00 93 0a 01 	sts	0x010A, r16
 90a:	98 2f       	mov	r25, r24

0000090c <_KER_SCH_LOOP50>:
 90c:	00 93 07 01 	sts	0x0107, r16
 910:	89 2f       	mov	r24, r25
 912:	e4 e4       	ldi	r30, 0x44	; 68
 914:	f1 e0       	ldi	r31, 0x01	; 1
 916:	00 91 07 01 	lds	r16, 0x0107
 91a:	00 0f       	add	r16, r16
 91c:	e0 0f       	add	r30, r16
 91e:	00 e0       	ldi	r16, 0x00	; 0
 920:	f0 1f       	adc	r31, r16
 922:	00 81       	ld	r16, Z
 924:	11 81       	ldd	r17, Z+1	; 0x01
 926:	20 2f       	mov	r18, r16
 928:	21 2b       	or	r18, r17
 92a:	59 f0       	breq	.+22     	; 0x942 <_VAL_NULL51>
 92c:	81 30       	cpi	r24, 0x01	; 1
 92e:	99 f0       	breq	.+38     	; 0x956 <_VAL_NOT_NULL51>
 930:	21 e0       	ldi	r18, 0x01	; 1
 932:	02 1b       	sub	r16, r18
 934:	20 e0       	ldi	r18, 0x00	; 0
 936:	12 0b       	sbc	r17, r18
 938:	00 83       	st	Z, r16
 93a:	11 83       	std	Z+1, r17	; 0x01
 93c:	20 2f       	mov	r18, r16
 93e:	21 2b       	or	r18, r17
 940:	51 f4       	brne	.+20     	; 0x956 <_VAL_NOT_NULL51>

00000942 <_VAL_NULL51>:
 942:	e0 e3       	ldi	r30, 0x30	; 48
 944:	f1 e0       	ldi	r31, 0x01	; 1
 946:	00 91 07 01 	lds	r16, 0x0107
 94a:	e0 0f       	add	r30, r16
 94c:	00 e0       	ldi	r16, 0x00	; 0
 94e:	f0 1f       	adc	r31, r16
 950:	81 e0       	ldi	r24, 0x01	; 1
 952:	80 83       	st	Z, r24
 954:	01 c0       	rjmp	.+2      	; 0x958 <_EXIT_SLP_TIME51>

00000956 <_VAL_NOT_NULL51>:
 956:	80 e0       	ldi	r24, 0x00	; 0

00000958 <_EXIT_SLP_TIME51>:
 958:	81 30       	cpi	r24, 0x01	; 1
 95a:	91 f4       	brne	.+36     	; 0x980 <_KER_SCH_NEXT50>
 95c:	ea e3       	ldi	r30, 0x3A	; 58
 95e:	f1 e0       	ldi	r31, 0x01	; 1
 960:	00 e0       	ldi	r16, 0x00	; 0
 962:	80 91 07 01 	lds	r24, 0x0107
 966:	e8 0f       	add	r30, r24
 968:	f0 1f       	adc	r31, r16
 96a:	80 81       	ld	r24, Z
 96c:	00 91 09 01 	lds	r16, 0x0109
 970:	80 17       	cp	r24, r16
 972:	30 f4       	brcc	.+12     	; 0x980 <_KER_SCH_NEXT50>
 974:	80 93 09 01 	sts	0x0109, r24
 978:	00 91 07 01 	lds	r16, 0x0107
 97c:	00 93 0a 01 	sts	0x010A, r16

00000980 <_KER_SCH_NEXT50>:
 980:	00 91 07 01 	lds	r16, 0x0107
 984:	03 95       	inc	r16
 986:	10 91 08 01 	lds	r17, 0x0108
 98a:	01 17       	cp	r16, r17
 98c:	08 f4       	brcc	.+2      	; 0x990 <_KER_SCH_EXIT50>
 98e:	be cf       	rjmp	.-132    	; 0x90c <_KER_SCH_LOOP50>

00000990 <_KER_SCH_EXIT50>:
 990:	00 91 0a 01 	lds	r16, 0x010A
 994:	00 93 07 01 	sts	0x0107, r16
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 998:	ee e0       	ldi	r30, 0x0E	; 14
 99a:	f1 e0       	ldi	r31, 0x01	; 1
 99c:	00 91 07 01 	lds	r16, 0x0107
 9a0:	00 0f       	add	r16, r16
 9a2:	e0 0f       	add	r30, r16
 9a4:	00 e0       	ldi	r16, 0x00	; 0
 9a6:	f0 1f       	adc	r31, r16
 9a8:	00 81       	ld	r16, Z
 9aa:	11 81       	ldd	r17, Z+1	; 0x01
 9ac:	0d bf       	out	0x3d, r16	; 61
 9ae:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 9b0:	ff 91       	pop	r31
 9b2:	ef 91       	pop	r30
 9b4:	df 91       	pop	r29
 9b6:	cf 91       	pop	r28
 9b8:	bf 91       	pop	r27
 9ba:	af 91       	pop	r26
 9bc:	9f 91       	pop	r25
 9be:	8f 91       	pop	r24
 9c0:	7f 91       	pop	r23
 9c2:	6f 91       	pop	r22
 9c4:	5f 91       	pop	r21
 9c6:	4f 91       	pop	r20
 9c8:	3f 91       	pop	r19
 9ca:	2f 91       	pop	r18
 9cc:	1f 91       	pop	r17
 9ce:	0f 91       	pop	r16
 9d0:	ff 90       	pop	r15
 9d2:	ef 90       	pop	r14
 9d4:	df 90       	pop	r13
 9d6:	cf 90       	pop	r12
 9d8:	bf 90       	pop	r11
 9da:	af 90       	pop	r10
 9dc:	9f 90       	pop	r9
 9de:	8f 90       	pop	r8
 9e0:	7f 90       	pop	r7
 9e2:	6f 90       	pop	r6
 9e4:	5f 90       	pop	r5
 9e6:	4f 90       	pop	r4
 9e8:	3f 90       	pop	r3
 9ea:	2f 90       	pop	r2
 9ec:	1f 90       	pop	r1
 9ee:	0f 90       	pop	r0
 9f0:	0f be       	out	0x3f, r0	; 63
 9f2:	0f 90       	pop	r0
 9f4:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
 9f6:	08 95       	ret

000009f8 <Kernel_Task_Constant_Latency>:
;arg registers           : R25:R24(SleepTime)                                                  
;return registers        : None                                                                
;unsafe access registers : R16, R24, R25, R30(ZL), R31(ZH)                                     
Kernel_Task_Constant_Latency:                             ;total 35.5uS @8MHz     ( 26 clocks) 
		;create next task wakeup time (args R25:R24)                                           
		CLI                                               ;disable interrupt      (  1 clock ) 
 9f8:	f8 94       	cli
		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 9fa:	e4 e4       	ldi	r30, 0x44	; 68
		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 9fc:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
 9fe:	00 91 07 01 	lds	r16, 0x0107
 a02:	00 0f       	add	r16, r16
 a04:	e0 0f       	add	r30, r16
 a06:	00 e0       	ldi	r16, 0x00	; 0
 a08:	f0 1f       	adc	r31, r16
		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
 a0a:	80 83       	st	Z, r24
		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 a0c:	91 83       	std	Z+1, r25	; 0x01
		;update task scheduler status as constant latency                                      
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 a0e:	e0 e3       	ldi	r30, 0x30	; 48
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 a10:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
 a12:	00 91 07 01 	lds	r16, 0x0107
 a16:	e0 0f       	add	r30, r16
 a18:	00 e0       	ldi	r16, 0x00	; 0
 a1a:	f0 1f       	adc	r31, r16
        LDI   R16                , TASK_CONS_LAT          ;save as cons_lat       (  1 clock ) 
 a1c:	04 e0       	ldi	r16, 0x04	; 4
		STD   Z+0                , R16                    ;save block flag        (  2 clocks) 
 a1e:	00 83       	st	Z, r16
		SEI                                               ;enable interrupt       (  1 clock ) 
 a20:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
 a22:	08 95       	ret

00000a24 <Kernel_Task_Constant_Latency_Sleep>:
;arg registers           : R25:R24(SleepTime)                                                  
;return registers        : None                                                                
;unsafe access registers : R16, R24, R25, R30(ZL), R31(ZH)                                     
Kernel_Task_Constant_Latency_Sleep:                       ;total 35.5uS @8MHz     ( 26 clocks) 
		;save current context                                                                  
        KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
 a24:	0f 92       	push	r0
 a26:	0f b6       	in	r0, 0x3f	; 63
 a28:	f8 94       	cli
 a2a:	0f 92       	push	r0
 a2c:	1f 92       	push	r1
 a2e:	11 24       	eor	r1, r1
 a30:	2f 92       	push	r2
 a32:	3f 92       	push	r3
 a34:	4f 92       	push	r4
 a36:	5f 92       	push	r5
 a38:	6f 92       	push	r6
 a3a:	7f 92       	push	r7
 a3c:	8f 92       	push	r8
 a3e:	9f 92       	push	r9
 a40:	af 92       	push	r10
 a42:	bf 92       	push	r11
 a44:	cf 92       	push	r12
 a46:	df 92       	push	r13
 a48:	ef 92       	push	r14
 a4a:	ff 92       	push	r15
 a4c:	0f 93       	push	r16
 a4e:	1f 93       	push	r17
 a50:	2f 93       	push	r18
 a52:	3f 93       	push	r19
 a54:	4f 93       	push	r20
 a56:	5f 93       	push	r21
 a58:	6f 93       	push	r22
 a5a:	7f 93       	push	r23
 a5c:	8f 93       	push	r24
 a5e:	9f 93       	push	r25
 a60:	af 93       	push	r26
 a62:	bf 93       	push	r27
 a64:	cf 93       	push	r28
 a66:	df 93       	push	r29
 a68:	ef 93       	push	r30
 a6a:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 a6c:	ee e0       	ldi	r30, 0x0E	; 14
 a6e:	f1 e0       	ldi	r31, 0x01	; 1
 a70:	00 91 07 01 	lds	r16, 0x0107
 a74:	00 0f       	add	r16, r16
 a76:	e0 0f       	add	r30, r16
 a78:	00 e0       	ldi	r16, 0x00	; 0
 a7a:	f0 1f       	adc	r31, r16
 a7c:	0d b7       	in	r16, 0x3d	; 61
 a7e:	1e b7       	in	r17, 0x3e	; 62
 a80:	00 83       	st	Z, r16
 a82:	11 83       	std	Z+1, r17	; 0x01
		;update task scheduler status as blocked                                               
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 a84:	e0 e3       	ldi	r30, 0x30	; 48
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 a86:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
 a88:	00 91 07 01 	lds	r16, 0x0107
 a8c:	e0 0f       	add	r30, r16
 a8e:	00 e0       	ldi	r16, 0x00	; 0
 a90:	f0 1f       	adc	r31, r16
        LDI   R16                , TASK_BLOCKED           ;block task until cnt=0 (  1 clock ) 
 a92:	00 e0       	ldi	r16, 0x00	; 0
		STD   Z+0                , R16                    ;save block flag        (  2 clocks) 
 a94:	00 83       	st	Z, r16
		;run scheduler, load next task sp, restore context                                     
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 a96:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
 a98:	0f ef       	ldi	r16, 0xFF	; 255
 a9a:	00 93 09 01 	sts	0x0109, r16
 a9e:	00 e0       	ldi	r16, 0x00	; 0
 aa0:	00 93 0a 01 	sts	0x010A, r16
 aa4:	98 2f       	mov	r25, r24

00000aa6 <_KER_SCH_LOOP68>:
 aa6:	00 93 07 01 	sts	0x0107, r16
 aaa:	89 2f       	mov	r24, r25
 aac:	e4 e4       	ldi	r30, 0x44	; 68
 aae:	f1 e0       	ldi	r31, 0x01	; 1
 ab0:	00 91 07 01 	lds	r16, 0x0107
 ab4:	00 0f       	add	r16, r16
 ab6:	e0 0f       	add	r30, r16
 ab8:	00 e0       	ldi	r16, 0x00	; 0
 aba:	f0 1f       	adc	r31, r16
 abc:	00 81       	ld	r16, Z
 abe:	11 81       	ldd	r17, Z+1	; 0x01
 ac0:	20 2f       	mov	r18, r16
 ac2:	21 2b       	or	r18, r17
 ac4:	59 f0       	breq	.+22     	; 0xadc <_VAL_NULL69>
 ac6:	81 30       	cpi	r24, 0x01	; 1
 ac8:	99 f0       	breq	.+38     	; 0xaf0 <_VAL_NOT_NULL69>
 aca:	21 e0       	ldi	r18, 0x01	; 1
 acc:	02 1b       	sub	r16, r18
 ace:	20 e0       	ldi	r18, 0x00	; 0
 ad0:	12 0b       	sbc	r17, r18
 ad2:	00 83       	st	Z, r16
 ad4:	11 83       	std	Z+1, r17	; 0x01
 ad6:	20 2f       	mov	r18, r16
 ad8:	21 2b       	or	r18, r17
 ada:	51 f4       	brne	.+20     	; 0xaf0 <_VAL_NOT_NULL69>

00000adc <_VAL_NULL69>:
 adc:	e0 e3       	ldi	r30, 0x30	; 48
 ade:	f1 e0       	ldi	r31, 0x01	; 1
 ae0:	00 91 07 01 	lds	r16, 0x0107
 ae4:	e0 0f       	add	r30, r16
 ae6:	00 e0       	ldi	r16, 0x00	; 0
 ae8:	f0 1f       	adc	r31, r16
 aea:	81 e0       	ldi	r24, 0x01	; 1
 aec:	80 83       	st	Z, r24
 aee:	01 c0       	rjmp	.+2      	; 0xaf2 <_EXIT_SLP_TIME69>

00000af0 <_VAL_NOT_NULL69>:
 af0:	80 e0       	ldi	r24, 0x00	; 0

00000af2 <_EXIT_SLP_TIME69>:
 af2:	81 30       	cpi	r24, 0x01	; 1
 af4:	91 f4       	brne	.+36     	; 0xb1a <_KER_SCH_NEXT68>
 af6:	ea e3       	ldi	r30, 0x3A	; 58
 af8:	f1 e0       	ldi	r31, 0x01	; 1
 afa:	00 e0       	ldi	r16, 0x00	; 0
 afc:	80 91 07 01 	lds	r24, 0x0107
 b00:	e8 0f       	add	r30, r24
 b02:	f0 1f       	adc	r31, r16
 b04:	80 81       	ld	r24, Z
 b06:	00 91 09 01 	lds	r16, 0x0109
 b0a:	80 17       	cp	r24, r16
 b0c:	30 f4       	brcc	.+12     	; 0xb1a <_KER_SCH_NEXT68>
 b0e:	80 93 09 01 	sts	0x0109, r24
 b12:	00 91 07 01 	lds	r16, 0x0107
 b16:	00 93 0a 01 	sts	0x010A, r16

00000b1a <_KER_SCH_NEXT68>:
 b1a:	00 91 07 01 	lds	r16, 0x0107
 b1e:	03 95       	inc	r16
 b20:	10 91 08 01 	lds	r17, 0x0108
 b24:	01 17       	cp	r16, r17
 b26:	08 f4       	brcc	.+2      	; 0xb2a <_KER_SCH_EXIT68>
 b28:	be cf       	rjmp	.-132    	; 0xaa6 <_KER_SCH_LOOP68>

00000b2a <_KER_SCH_EXIT68>:
 b2a:	00 91 0a 01 	lds	r16, 0x010A
 b2e:	00 93 07 01 	sts	0x0107, r16
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 b32:	ee e0       	ldi	r30, 0x0E	; 14
 b34:	f1 e0       	ldi	r31, 0x01	; 1
 b36:	00 91 07 01 	lds	r16, 0x0107
 b3a:	00 0f       	add	r16, r16
 b3c:	e0 0f       	add	r30, r16
 b3e:	00 e0       	ldi	r16, 0x00	; 0
 b40:	f0 1f       	adc	r31, r16
 b42:	00 81       	ld	r16, Z
 b44:	11 81       	ldd	r17, Z+1	; 0x01
 b46:	0d bf       	out	0x3d, r16	; 61
 b48:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 b4a:	ff 91       	pop	r31
 b4c:	ef 91       	pop	r30
 b4e:	df 91       	pop	r29
 b50:	cf 91       	pop	r28
 b52:	bf 91       	pop	r27
 b54:	af 91       	pop	r26
 b56:	9f 91       	pop	r25
 b58:	8f 91       	pop	r24
 b5a:	7f 91       	pop	r23
 b5c:	6f 91       	pop	r22
 b5e:	5f 91       	pop	r21
 b60:	4f 91       	pop	r20
 b62:	3f 91       	pop	r19
 b64:	2f 91       	pop	r18
 b66:	1f 91       	pop	r17
 b68:	0f 91       	pop	r16
 b6a:	ff 90       	pop	r15
 b6c:	ef 90       	pop	r14
 b6e:	df 90       	pop	r13
 b70:	cf 90       	pop	r12
 b72:	bf 90       	pop	r11
 b74:	af 90       	pop	r10
 b76:	9f 90       	pop	r9
 b78:	8f 90       	pop	r8
 b7a:	7f 90       	pop	r7
 b7c:	6f 90       	pop	r6
 b7e:	5f 90       	pop	r5
 b80:	4f 90       	pop	r4
 b82:	3f 90       	pop	r3
 b84:	2f 90       	pop	r2
 b86:	1f 90       	pop	r1
 b88:	0f 90       	pop	r0
 b8a:	0f be       	out	0x3f, r0	; 63
 b8c:	0f 90       	pop	r0
 b8e:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
 b90:	08 95       	ret

00000b92 <Kernel_Task_Sleep_Time_Get>:
;used registers          : R16, R24, R25, R30(ZL), R31(ZH)                                     
;arg registers           : R24(TaskID)                                                         
;return registers        : R25:R24(SleepTime)                                                  
;unsafe access registers : R16, R24, R25, R30(ZL), R31(ZH)                                     
Kernel_Task_Sleep_Time_Get:                               ;total 1.88uS @8MHz     ( 15 clocks) 
		MOV   R16                , R24                    ;copy                   (  1 clock ) 
 b92:	08 2f       	mov	r16, r24
		LSL   R16                                         ;x2                     (  1 clock ) 
 b94:	00 0f       	add	r16, r16
		LDI   R30                , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 b96:	e4 e4       	ldi	r30, 0x44	; 68
		LDI   R31                , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 b98:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 b9a:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 b9c:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 b9e:	f0 1f       	adc	r31, r16
		LD    R24                , Z+                     ;load sleep time        (  2 clocks) 
 ba0:	81 91       	ld	r24, Z+
		LD    R25                , Z                      ;load sleep time        (  2 clocks) 
 ba2:	90 81       	ld	r25, Z
		RET                                               ;return from subroutine (  4 clocks) 
 ba4:	08 95       	ret

00000ba6 <Kernel_Task_Status_Get>:
;used registers          : R16, R24, R30(ZL), R31(ZH)                                          
;arg registers           : R24(TaskID)                                                         
;return registers        : R24(TaskSts)                                                        
;unsafe access registers : R16, R24, R30(ZL), R31(ZH)                                          
Kernel_Task_Status_Get:                                   ;total 1.50uS @8MHz     ( 12 clocks) 
		MOV   R16                , R24                    ;copy                   (  1 clock ) 
 ba6:	08 2f       	mov	r16, r24
		LDI   R30                , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 ba8:	e0 e3       	ldi	r30, 0x30	; 48
		LDI   R31                , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 baa:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 bac:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 bae:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 bb0:	f0 1f       	adc	r31, r16
		LD    R24                , Z                      ;load task status       (  2 clocks) 
 bb2:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 bb4:	08 95       	ret

00000bb6 <Kernel_NTask_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(NTask)                                                          
;unsafe access registers : R24                                                                 
Kernel_NTask_Get:                                         ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                 , KerBase+OFB_NTSK      ;load ntask             (  2 clock ) 
 bb6:	80 91 08 01 	lds	r24, 0x0108
		RET                                               ;return from subroutine (  4 clocks) 
 bba:	08 95       	ret

00000bbc <Kernel_Task_Prio_Get>:
;arg registers           : R24(TaskID)                                                         
;return registers        : R24(TaskPriority)                                                   
;unsafe access registers : R16, R24, R30(ZL), R31(ZH)                                          
Kernel_Task_Prio_Get:                                     ;total 1.50uS @8MHz     ( 12 clocks) 
		;get priority of the task id, arg (task_id->R24), return R24                           
		MOV   R16                , R24                    ;copy task_id           (  1 clock ) 
 bbc:	08 2f       	mov	r16, r24
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 bbe:	ea e3       	ldi	r30, 0x3A	; 58
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 bc0:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
 bc2:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;clear reg              (  1 clock ) 
 bc4:	00 e0       	ldi	r16, 0x00	; 0
		ADC   ZH                 , R16                    ;add high byte+carry    (  1 clock ) 
 bc6:	f0 1f       	adc	r31, r16
		LD    R24                , Z                      ;load priority          (  2 clocks) 
 bc8:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 bca:	08 95       	ret

00000bcc <Kernel_Lowest_Prio_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(LowestPriorityVal)                                              
;unsafe access registers : R24                                                                 
Kernel_Lowest_Prio_Get:                                   ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
 bcc:	80 91 09 01 	lds	r24, 0x0109
		RET                                               ;return from subroutine (  4 clocks) 
 bd0:	08 95       	ret

00000bd2 <Kernel_High_Prio_Task_ID_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(HighstPriorityTaskID)->UserTaskID (Excluding Idle Task)         
;unsafe access registers : R24                                                                 
Kernel_High_Prio_Task_ID_Get:                             ;total 0.88uS @8MHz     (  7 clocks) 
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 bd2:	80 91 0a 01 	lds	r24, 0x010A
		DEC   R24                                         ;decrement by 1         (  1 clock ) 
 bd6:	8a 95       	dec	r24
		RET                                               ;return from subroutine (  4 clocks) 
 bd8:	08 95       	ret

00000bda <Kernel_Abs_High_Prio_Task_ID_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(HighstPriorityTaskID)->AbsoluteTaskID (Including Idle Task)     
;unsafe access registers : R24                                                                 
Kernel_Abs_High_Prio_Task_ID_Get:                         ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 bda:	80 91 0a 01 	lds	r24, 0x010A
		RET                                               ;return from subroutine (  4 clocks) 
 bde:	08 95       	ret

00000be0 <Kernel_CPU_Usage_Get>:
;arg registers           : None                                                                
;return registers        : R24(CurrentCpuUsage)->In percentage                                 
;unsafe access registers : R24                                                                 
Kernel_CPU_Usage_Get:                                     ;total 0.75uS @8MHz     (  6 clocks) 
		;get cpu usage, return R24                                                             
		LDS   R24                , KerBase+OFB_USAGE      ;load cpu usage         (  2 clocks) 
 be0:	80 91 0d 01 	lds	r24, 0x010D
		RET                                               ;return from subroutine (  4 clocks) 
 be4:	08 95       	ret

00000be6 <Debug_Init>:


;;===================================debug init starting====================================;; 
Debug_Init:                                               ;total 2.38uS @8MHz     ( 19 clocks) 
        ;init registers for UART0 (Arg R25:R24->UBRRH:UBRRL)                                   
		LDI   R16                , (1<<1)                 ;mask U2x               (  1 clock ) 
 be6:	02 e0       	ldi	r16, 0x02	; 2
		STS   SRUCSR0A           , R16                    ;load val to UCSR0A     (  2 clocks) 
 be8:	00 93 c0 00 	sts	0x00C0, r16
		MOV   R16                , R25                    ;copy R25->baud rate H  (  1 clock ) 
 bec:	09 2f       	mov	r16, r25
		STS   SRUBRR0H           , R16                    ;load val to UBRR0H     (  2 clocks) 
 bee:	00 93 c5 00 	sts	0x00C5, r16
		MOV   R16                , R24                    ;copy R24->baud rate L  (  1 clock ) 
 bf2:	08 2f       	mov	r16, r24
		STS   SRUBRR0L           , R16                    ;load val to UBRR0L     (  2 clocks) 
 bf4:	00 93 c4 00 	sts	0x00C4, r16
		LDI   R16                , (1<<1)|(1<<2)          ;config 8 data bit      (  1 clock ) 
 bf8:	06 e0       	ldi	r16, 0x06	; 6
		STS   SRUCSR0C           , R16                    ;load val to UCSR0C     (  2 clocks) 
 bfa:	00 93 c2 00 	sts	0x00C2, r16
		LDI   R16                , (1<<3)                 ;enable tx              (  1 clock ) 
 bfe:	08 e0       	ldi	r16, 0x08	; 8
		STS   SRUCSR0B           , R16                    ;load val to UCSR0B     (  2 clocks) 
 c00:	00 93 c1 00 	sts	0x00C1, r16
        RET                                               ;return from subroutine (  4 clocks) 
 c04:	08 95       	ret

00000c06 <Debug_Tx_Byte>:


;;====================================debug tx starting=====================================;; 
Debug_Tx_Byte:                                            ;total 2.00uS+LT @8MHz  ( 16 clocks) 
		;write single byte to data register (Arg R24)                                          
		PUSH  R16                                         ;save reg               (  2 clocks) 
 c06:	0f 93       	push	r16
		STS   SRUDR0             , R24                    ;load val to UDR0       (  2 clocks) 
 c08:	80 93 c6 00 	sts	0x00C6, r24

00000c0c <__UDRE0_CLEARED>:
                                                                                               
    __UDRE0_CLEARED:                                      ;undefined loop wrt ck               
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16     (  2 clocks) 
 c0c:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x05                   ;skip if UDRE0 is set   (  2 clocks) 
 c10:	05 ff       	sbrs	r16, 5
		RJMP  __UDRE0_CLEARED                             ;wait until UDRE0 is set(  2 clocks) 
 c12:	fc cf       	rjmp	.-8      	; 0xc0c <__UDRE0_CLEARED>
		POP   R16                                         ;restore reg            (  2 clocks) 
 c14:	0f 91       	pop	r16
        RET                                               ;return from subroutine (  4 clocks) 
 c16:	08 95       	ret

00000c18 <Debug_Tx_Word>:


;;==================================debug tx word starting==================================;; 
Debug_Tx_Word:                                            ;total 2.00uS+LT @8MHz  ( 16 clocks) 
		;write 2 bytes, (Arg R24, R25), Args retained                                          
		PUSH  R24                                         ;save reg               (  2 clocks) 
 c18:	8f 93       	push	r24
		MOV   R24                , R25                    ;copy reg               (  1 clock ) 
 c1a:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte                               ;send via uart          ( 21 clocks) 
 c1c:	0e 94 03 06 	call	0xc06	; 0xc06 <Debug_Tx_Byte>
        POP   R24                                         ;restore reg            (  2 clocks) 
 c20:	8f 91       	pop	r24
		CALL  Debug_Tx_Byte                               ;send via uart          ( 21 clocks) 
 c22:	0e 94 03 06 	call	0xc06	; 0xc06 <Debug_Tx_Byte>
        RET                                               ;return from subroutine (  4 clocks) 
 c26:	08 95       	ret

00000c28 <Debug_Tx_Byte_Conf>:


;;================================debug tx confirm starting=================================;; 
Debug_Tx_Byte_Conf:                                       ;total 2.63uS+LT @8MHz  ( 21 clocks) 
        ;write 1 byte, (Arg R24), Args retained                                                
		PUSH  R16                                         ;save reg               (  2 clocks) 
 c28:	0f 93       	push	r16
		STS   SRUDR0             , R24                    ;load val to UDR0,      (  2 clocks) 
 c2a:	80 93 c6 00 	sts	0x00C6, r24

00000c2e <__TXC0_CLEARED>:
    __TXC0_CLEARED:                                                                            
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,    (  2 clocks) 
 c2e:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x06                   ;skip if TXC0 is set,   (  2 clocks) 
 c32:	06 ff       	sbrs	r16, 6
		RJMP  __TXC0_CLEARED                              ;wait until TXC0 is set (  2 clocks) 
 c34:	fc cf       	rjmp	.-8      	; 0xc2e <__TXC0_CLEARED>
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,    (  2 clocks) 
 c36:	00 91 c0 00 	lds	r16, 0x00C0
		ORI   R16                , (1<<6)                 ;mask bit 6,            (  1 clock ) 
 c3a:	00 64       	ori	r16, 0x40	; 64
		STS   SRUCSR0A           , R16                    ;write reg with bit msk (  2 clocks) 
 c3c:	00 93 c0 00 	sts	0x00C0, r16
		POP   R16                                         ;restore reg            (  2 clocks) 
 c40:	0f 91       	pop	r16
        RET                                               ;return from subroutine (  4 clocks) 
 c42:	08 95       	ret

00000c44 <Debug_Tx_Word_Conf>:


;;==============================debug tx word confirm starting==============================;; 
Debug_Tx_Word_Conf:                                       ;total 6.38uS+LT @8MHz  ( 51 clocks) 
        ;write 2 bytes, (Arg R24, R25), Args retained                                          
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 c44:	0e 94 14 06 	call	0xc28	; 0xc28 <Debug_Tx_Byte_Conf>
		PUSH  R24                                         ;save reg               (  2 clocks) 
 c48:	8f 93       	push	r24
		MOV   R24                , R25                    ;copy R25 to R24        (  1 clock ) 
 c4a:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 c4c:	0e 94 14 06 	call	0xc28	; 0xc28 <Debug_Tx_Byte_Conf>
		POP   R24                                         ;restore reg            (  2 clocks) 
 c50:	8f 91       	pop	r24
        RET                                               ;return from subroutine (  4 clocks) 
 c52:	08 95       	ret

00000c54 <Debug_Tx_DWord_Conf>:


;;==============================debug tx dword confirm starting=============================;; 
Debug_Tx_DWord_Conf:                                      ;total 12.38uS+LT @8MHz ( 99 clocks) 
        ;write 4 bytes, (Arg R22-R25), Args retained                                           
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks) 
 c54:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R22                    ;copy R22 to R24          (1 clock ) 
 c58:	86 2f       	mov	r24, r22
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 c5a:	0e 94 14 06 	call	0xc28	; 0xc28 <Debug_Tx_Byte_Conf>
		MOV   R24                , R23                    ;copy R23 to R24          (1 clock ) 
 c5e:	87 2f       	mov	r24, r23
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 c60:	0e 94 14 06 	call	0xc28	; 0xc28 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24              (2 clocks) 
 c64:	80 91 4a 00 	lds	r24, 0x004A
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 c68:	0e 94 14 06 	call	0xc28	; 0xc28 <Debug_Tx_Byte_Conf>
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks) 
 c6c:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R25                    ;copy R22 to R24          (1 clock ) 
 c70:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 c72:	0e 94 14 06 	call	0xc28	; 0xc28 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24 val,         (2 clocks) 
 c76:	80 91 4a 00 	lds	r24, 0x004A
        RET                                               ;return from subroutine,  (4 clocks) 
 c7a:	08 95       	ret

00000c7c <Debug_Tx_From_RAM>:


;;=============================debug tx confirm from ram starting===========================;; 
Debug_Tx_From_RAM:                                        ;total 4.38uS+LT @8MHz  ( 35 clocks) 
        ;print data from RAM address (Arg R24-R25)                                             
		MOV   R16                , R30                    ;copy R30 to R16          (1 clock ) 
 c7c:	0e 2f       	mov	r16, r30
		MOV   R17                , R31                    ;copy R31 to R17          (1 clock ) 
 c7e:	1f 2f       	mov	r17, r31
		MOV   R18                , R24                    ;copy R24 to R18          (1 clock ) 
 c80:	28 2f       	mov	r18, r24
		MOV   R30                , R24                    ;copy R22 to R24          (1 clock ) 
 c82:	e8 2f       	mov	r30, r24
		MOV   R31                , R25                    ;copy R22 to R24          (1 clock ) 
 c84:	f9 2f       	mov	r31, r25
		LD    R24                , Z                      ;load val to R24          (2 clocks) 
 c86:	80 81       	ld	r24, Z
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 c88:	0e 94 14 06 	call	0xc28	; 0xc28 <Debug_Tx_Byte_Conf>
		MOV   R30                , R16                    ;copy R16 to R30          (1 clock ) 
 c8c:	e0 2f       	mov	r30, r16
		MOV   R31                , R17                    ;copy R17 to R31          (1 clock ) 
 c8e:	f1 2f       	mov	r31, r17
		MOV   R24                , R18                    ;copy R18 to R24          (1 clock ) 
 c90:	82 2f       	mov	r24, r18
        RET                                               ;return from subroutine,  (4 clocks) 
 c92:	08 95       	ret

00000c94 <Debug_Tx_RAM_Area>:

;;=============================debug tx confirm ram area starting===========================;; 
Debug_Tx_RAM_Area:                                        ;5.5uS+LT x R22 @8MHz   ( 44 clocks) 
        ;print data from RAM address (arguments R24:R25, R22)                                  
	__DUMP_BYTES:                                                                              
	    CALL  Debug_Tx_From_RAM                           ;send via uart from ram              
 c94:	0e 94 3e 06 	call	0xc7c	; 0xc7c <Debug_Tx_From_RAM>
		SUBI  R24                , 0x01                   ;decrement from LSByte               
 c98:	81 50       	subi	r24, 0x01	; 1
        SBCI  R25                , 0x00                   ;decrement if carry                  
 c9a:	90 40       	sbci	r25, 0x00	; 0
		SUBI  R22                , 0x01                   ;decrement                           
 c9c:	61 50       	subi	r22, 0x01	; 1
		BRNE  __DUMP_BYTES                                                                     
 c9e:	d1 f7       	brne	.-12     	; 0xc94 <Debug_Tx_RAM_Area>
        RET                                               ;return from subroutine,  (4 clocks) 
 ca0:	08 95       	ret

00000ca2 <__udivmodsi4>:
 ca2:	a1 e2       	ldi	r26, 0x21	; 33
 ca4:	1a 2e       	mov	r1, r26
 ca6:	aa 1b       	sub	r26, r26
 ca8:	bb 1b       	sub	r27, r27
 caa:	fd 01       	movw	r30, r26
 cac:	0d c0       	rjmp	.+26     	; 0xcc8 <__udivmodsi4_ep>

00000cae <__udivmodsi4_loop>:
 cae:	aa 1f       	adc	r26, r26
 cb0:	bb 1f       	adc	r27, r27
 cb2:	ee 1f       	adc	r30, r30
 cb4:	ff 1f       	adc	r31, r31
 cb6:	a2 17       	cp	r26, r18
 cb8:	b3 07       	cpc	r27, r19
 cba:	e4 07       	cpc	r30, r20
 cbc:	f5 07       	cpc	r31, r21
 cbe:	20 f0       	brcs	.+8      	; 0xcc8 <__udivmodsi4_ep>
 cc0:	a2 1b       	sub	r26, r18
 cc2:	b3 0b       	sbc	r27, r19
 cc4:	e4 0b       	sbc	r30, r20
 cc6:	f5 0b       	sbc	r31, r21

00000cc8 <__udivmodsi4_ep>:
 cc8:	66 1f       	adc	r22, r22
 cca:	77 1f       	adc	r23, r23
 ccc:	88 1f       	adc	r24, r24
 cce:	99 1f       	adc	r25, r25
 cd0:	1a 94       	dec	r1
 cd2:	69 f7       	brne	.-38     	; 0xcae <__udivmodsi4_loop>
 cd4:	60 95       	com	r22
 cd6:	70 95       	com	r23
 cd8:	80 95       	com	r24
 cda:	90 95       	com	r25
 cdc:	9b 01       	movw	r18, r22
 cde:	ac 01       	movw	r20, r24
 ce0:	bd 01       	movw	r22, r26
 ce2:	cf 01       	movw	r24, r30
 ce4:	08 95       	ret

00000ce6 <_exit>:
 ce6:	f8 94       	cli

00000ce8 <__stop_program>:
 ce8:	ff cf       	rjmp	.-2      	; 0xce8 <__stop_program>
