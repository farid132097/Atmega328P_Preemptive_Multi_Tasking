
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000190  00800100  00800100  00000468  2**0
                  ALLOC
  2 .stab         00000768  00000000  00000000  00000468  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000006c  00000000  00000000  00000bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000005d  00000000  00000000  00000c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000022e  00000000  00000000  00000cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000108  00000000  00000000  00000f07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000225  00000000  00000000  0000100f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  00001234  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000109  00000000  00000000  00001294  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000078  00000000  00000000  0000139d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00001415  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_16>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	00 00       	nop
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 00       	nop
  76:	00 00       	nop
  78:	00 00       	nop
  7a:	00 00       	nop
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 00       	nop
  82:	00 00       	nop
  84:	00 00       	nop
  86:	00 00       	nop
  88:	41 c0       	rjmp	.+130    	; 0x10c <__vector_16>

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61
  96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  9a:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:

int main(void) {
    
	
	//Debug_Init();
	Kernel_SysTick_Reg_Init(1000);
  a2:	88 ee       	ldi	r24, 0xE8	; 232
  a4:	93 e0       	ldi	r25, 0x03	; 3
  a6:	0e 94 0d 01 	call	0x21a	; 0x21a <Kernel_SysTick_Reg_Init>
	Kernel_Task0_Init();
  aa:	0e 94 54 01 	call	0x2a8	; 0x2a8 <Kernel_Task0_Init>
	Kernel_Task1_Init();
  ae:	0e 94 8f 01 	call	0x31e	; 0x31e <Kernel_Task1_Init>
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <main+0x10>

000000b4 <Tasks_Task0>:
#include "kernel.h"
#include "tasks.h"


void Tasks_Task0(void){
  DDRD |= (1<<5);
  b4:	55 9a       	sbi	0x0a, 5	; 10
  
  while(1){
    PORTD ^= (1<<5);
  b6:	40 e2       	ldi	r20, 0x20	; 32
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b8:	28 ec       	ldi	r18, 0xC8	; 200
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	8b b1       	in	r24, 0x0b	; 11
  be:	84 27       	eor	r24, r20
  c0:	8b b9       	out	0x0b, r24	; 11
  c2:	84 ef       	ldi	r24, 0xF4	; 244
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	f9 01       	movw	r30, r18
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <SRUDR0+0x2>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ce:	d9 f7       	brne	.-10     	; 0xc6 <SRUDR0>
  d0:	f5 cf       	rjmp	.-22     	; 0xbc <Tasks_Task0+0x8>

000000d2 <Tasks_Task1>:
	_delay_ms(50);
  }
}

void Tasks_Task1(void){
  DDRD |= (1<<6);
  d2:	56 9a       	sbi	0x0a, 6	; 10
  
  while(1){
    PORTD ^= (1<<6);
  d4:	40 e4       	ldi	r20, 0x40	; 64
  d6:	28 ec       	ldi	r18, 0xC8	; 200
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	8b b1       	in	r24, 0x0b	; 11
  dc:	84 27       	eor	r24, r20
  de:	8b b9       	out	0x0b, r24	; 11
  e0:	88 e5       	ldi	r24, 0x58	; 88
  e2:	92 e0       	ldi	r25, 0x02	; 2
  e4:	f9 01       	movw	r30, r18
  e6:	31 97       	sbiw	r30, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <Tasks_Task1+0x14>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ec:	d9 f7       	brne	.-10     	; 0xe4 <Tasks_Task1+0x12>
  ee:	f5 cf       	rjmp	.-22     	; 0xda <Tasks_Task1+0x8>

000000f0 <Tasks_Task2>:
	_delay_ms(60);
  }
}

void Tasks_Task2(void){
  DDRD |= (1<<7);
  f0:	57 9a       	sbi	0x0a, 7	; 10
  f2:	28 ec       	ldi	r18, 0xC8	; 200
  f4:	30 e0       	ldi	r19, 0x00	; 0
  
  while(1){
    PORTD ^= (1<<7);
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	80 58       	subi	r24, 0x80	; 128
  fa:	8b b9       	out	0x0b, r24	; 11
  fc:	8c eb       	ldi	r24, 0xBC	; 188
  fe:	92 e0       	ldi	r25, 0x02	; 2
 100:	f9 01       	movw	r30, r18
 102:	31 97       	sbiw	r30, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <Tasks_Task2+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 106:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 108:	d9 f7       	brne	.-10     	; 0x100 <Tasks_Task2+0x10>
 10a:	f5 cf       	rjmp	.-22     	; 0xf6 <Tasks_Task2+0x6>

0000010c <__vector_16>:


;;===================================ISR execution start====================================;;
.global  __vector_16
    __vector_16:                                          ;total operation        (208 clocks)
	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 10c:	29 9a       	sbi	0x05, 1	; 5
        KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	1f 92       	push	r1
 116:	11 24       	eor	r1, r1
 118:	2f 92       	push	r2
 11a:	3f 92       	push	r3
 11c:	4f 92       	push	r4
 11e:	5f 92       	push	r5
 120:	6f 92       	push	r6
 122:	7f 92       	push	r7
 124:	8f 92       	push	r8
 126:	9f 92       	push	r9
 128:	af 92       	push	r10
 12a:	bf 92       	push	r11
 12c:	cf 92       	push	r12
 12e:	df 92       	push	r13
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	2f 93       	push	r18
 13a:	3f 93       	push	r19
 13c:	4f 93       	push	r20
 13e:	5f 93       	push	r21
 140:	6f 93       	push	r22
 142:	7f 93       	push	r23
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
 148:	af 93       	push	r26
 14a:	bf 93       	push	r27
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	ef 93       	push	r30
 152:	ff 93       	push	r31
		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 154:	00 91 08 01 	lds	r16, 0x0108
 158:	00 93 46 00 	sts	0x0046, r16
		KER_TICK_INCREMENT                                ;increment tick counter ( 27 clocks) 
 15c:	01 e0       	ldi	r16, 0x01	; 1
 15e:	10 91 00 01 	lds	r17, 0x0100
 162:	10 0f       	add	r17, r16
 164:	10 93 00 01 	sts	0x0100, r17
 168:	00 e0       	ldi	r16, 0x00	; 0
 16a:	10 91 01 01 	lds	r17, 0x0101
 16e:	10 1f       	adc	r17, r16
 170:	10 93 01 01 	sts	0x0101, r17
 174:	10 91 02 01 	lds	r17, 0x0102
 178:	10 1f       	adc	r17, r16
 17a:	10 93 02 01 	sts	0x0102, r17
 17e:	10 91 03 01 	lds	r17, 0x0103
 182:	10 1f       	adc	r17, r16
 184:	10 93 03 01 	sts	0x0103, r17
 188:	10 91 04 01 	lds	r17, 0x0104
 18c:	10 1f       	adc	r17, r16
 18e:	10 93 04 01 	sts	0x0104, r17
		KER_TASK_SWITCH                                   ;task switching         ( 38 clocks) 
 192:	8d b7       	in	r24, 0x3d	; 61
 194:	9e b7       	in	r25, 0x3e	; 62
 196:	00 91 06 01 	lds	r16, 0x0106
 19a:	00 0f       	add	r16, r16
 19c:	ea e0       	ldi	r30, 0x0A	; 10
 19e:	f1 e0       	ldi	r31, 0x01	; 1
 1a0:	e0 0f       	add	r30, r16
 1a2:	00 e0       	ldi	r16, 0x00	; 0
 1a4:	f0 1f       	adc	r31, r16
 1a6:	81 93       	st	Z+, r24
 1a8:	90 83       	st	Z, r25
 1aa:	00 91 06 01 	lds	r16, 0x0106
 1ae:	03 95       	inc	r16
 1b0:	12 e0       	ldi	r17, 0x02	; 2

000001b2 <_MOD_CONT>:
 1b2:	01 17       	cp	r16, r17
 1b4:	10 f0       	brcs	.+4      	; 0x1ba <_MOD_DONE>
 1b6:	01 1b       	sub	r16, r17
 1b8:	fc cf       	rjmp	.-8      	; 0x1b2 <_MOD_CONT>

000001ba <_MOD_DONE>:
 1ba:	00 93 06 01 	sts	0x0106, r16
 1be:	00 0f       	add	r16, r16
 1c0:	ea e0       	ldi	r30, 0x0A	; 10
 1c2:	f1 e0       	ldi	r31, 0x01	; 1
 1c4:	e0 0f       	add	r30, r16
 1c6:	00 e0       	ldi	r16, 0x00	; 0
 1c8:	f0 1f       	adc	r31, r16
 1ca:	81 91       	ld	r24, Z+
 1cc:	90 81       	ld	r25, Z
 1ce:	8d bf       	out	0x3d, r24	; 61
 1d0:	9e bf       	out	0x3e, r25	; 62
		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 1d2:	ff 91       	pop	r31
 1d4:	ef 91       	pop	r30
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	bf 91       	pop	r27
 1dc:	af 91       	pop	r26
 1de:	9f 91       	pop	r25
 1e0:	8f 91       	pop	r24
 1e2:	7f 91       	pop	r23
 1e4:	6f 91       	pop	r22
 1e6:	5f 91       	pop	r21
 1e8:	4f 91       	pop	r20
 1ea:	3f 91       	pop	r19
 1ec:	2f 91       	pop	r18
 1ee:	1f 91       	pop	r17
 1f0:	0f 91       	pop	r16
 1f2:	ff 90       	pop	r15
 1f4:	ef 90       	pop	r14
 1f6:	df 90       	pop	r13
 1f8:	cf 90       	pop	r12
 1fa:	bf 90       	pop	r11
 1fc:	af 90       	pop	r10
 1fe:	9f 90       	pop	r9
 200:	8f 90       	pop	r8
 202:	7f 90       	pop	r7
 204:	6f 90       	pop	r6
 206:	5f 90       	pop	r5
 208:	4f 90       	pop	r4
 20a:	3f 90       	pop	r3
 20c:	2f 90       	pop	r2
 20e:	1f 90       	pop	r1
 210:	0f 90       	pop	r0
 212:	0f be       	out	0x3f, r0	; 63
 214:	0f 90       	pop	r0
	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 216:	29 98       	cbi	0x05, 1	; 5
		RETI                                              ;return from interrupt  (  4 clocks) 
 218:	18 95       	reti

0000021a <Kernel_SysTick_Reg_Init>:



;;==================================SysTick reg init start==================================;;
Kernel_SysTick_Reg_Init:                                  ;total operation        ( 50 clocks)
        CLI                                               ;disable global int,    (  1 clock ) 
 21a:	f8 94       	cli
		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 21c:	21 9a       	sbi	0x04, 1	; 4
 21e:	29 98       	cbi	0x05, 1	; 5
		LDI   R16                , 0x00                   ;set 0x00 to R16,       (  1 clock ) 
 220:	00 e0       	ldi	r16, 0x00	; 0
		STS   Kernel+0x00        , R16                    ;clear  kernel[0]       (  2 clocks) 
 222:	00 93 00 01 	sts	0x0100, r16
		STS   Kernel+0x01        , R16                    ;clear  kernel[1]       (  2 clocks) 
 226:	00 93 01 01 	sts	0x0101, r16
		STS   Kernel+0x02        , R16                    ;clear  kernel[2]       (  2 clocks) 
 22a:	00 93 02 01 	sts	0x0102, r16
		STS   Kernel+0x03        , R16                    ;clear  kernel[3]       (  2 clocks) 
 22e:	00 93 03 01 	sts	0x0103, r16
		STS   Kernel+0x04        , R16                    ;clear  kernel[4]       (  2 clocks) 
 232:	00 93 04 01 	sts	0x0104, r16
		STS   Kernel+0x05        , R16                    ;clear  kernel[5]       (  2 clocks) 
 236:	00 93 05 01 	sts	0x0105, r16
		STS   Kernel+0x06        , R16                    ;clear  kernel[6]       (  2 clocks) 
 23a:	00 93 06 01 	sts	0x0106, r16
		STS   Kernel+0x07        , R16                    ;clear  kernel[7]       (  2 clocks) 
 23e:	00 93 07 01 	sts	0x0107, r16
		STS   Kernel+0x08        , R16                    ;clear  kernel[8]       (  2 clocks) 
 242:	00 93 08 01 	sts	0x0108, r16
		LDI   R16                , 0x00                   ;store r16 with 0       (  1 clock ) 
 246:	00 e0       	ldi	r16, 0x00	; 0
		STS   SRTCCR0A           , R16                    ;clear TCCR0A           (  2 clocks) 
 248:	00 93 44 00 	sts	0x0044, r16
		STS   SRTCCR0B           , R16                    ;clear TCCR0B           (  2 clocks) 
 24c:	00 93 45 00 	sts	0x0045, r16
		STS   SRTIMSK0           , R16                    ;clear TIMSK0           (  2 clocks) 
 250:	00 93 6e 00 	sts	0x006E, r16
		STS   SRTIFR0            , R16                    ;clear TIFR0            (  2 clocks) 
 254:	00 93 35 00 	sts	0x0035, r16
		STS   SROCR0A            , R16                    ;clear OCR0A            (  2 clocks) 
 258:	00 93 47 00 	sts	0x0047, r16
		STS   SROCR0B            , R16                    ;clear OCR0B            (  2 clocks) 
 25c:	00 93 48 00 	sts	0x0048, r16
		STS   SRTCNT0            , R16                    ;clear TCNT0            (  2 clocks) 
 260:	00 93 46 00 	sts	0x0046, r16
		LDI   R16                , KER_PRS                ;prescaler 64           (  1 clock ) 
 264:	03 e0       	ldi	r16, 0x03	; 3
		STS   SRTCCR0B           , R16                    ;set to TCCR0B          (  2 clocks)
 266:	00 93 45 00 	sts	0x0045, r16
		LDI   R16                , KER_RLD                ;reload value (130)     (  1 clock ) 
 26a:	02 e8       	ldi	r16, 0x82	; 130
		STS   Kernel+0x08        , R16                    ;Kernel[5] reload value (  2 clocks) 
 26c:	00 93 08 01 	sts	0x0108, r16
		STS   SRTCNT0            , R16                    ;set to TCNT0           (  2 clocks) 
 270:	00 93 46 00 	sts	0x0046, r16
		LDI   R16                , 0x01                   ;bit mask TOIE0         (  1 clock ) 
 274:	01 e0       	ldi	r16, 0x01	; 1
		STS   SRTIMSK0           , R16                    ;set to TIMSK0          (  2 clocks) 
 276:	00 93 6e 00 	sts	0x006E, r16
		RET                                               ;return from subroutine (  4 clocks) 
 27a:	08 95       	ret

0000027c <Kernel_SysTick_Val_Get>:



;;=================================SysTick value get start==================================;;
Kernel_SysTick_Val_Get:                                   ;total operation        ( 20 clocks)
        IN    R16                , IOSREG                 ;save SREG              (  1 clock ) 
 27c:	0f b7       	in	r16, 0x3f	; 63
        CLI                                               ;disable interrupts     (  1 clock ) 
 27e:	f8 94       	cli
		LDS   R18		         , Kernel+0x00            ;byte0 -> R18 (LSB)     (  2 clocks) 
 280:	20 91 00 01 	lds	r18, 0x0100
		LDS   R19		         , Kernel+0x01            ;byte1 -> R19           (  2 clocks) 
 284:	30 91 01 01 	lds	r19, 0x0101
		LDS   R20		         , Kernel+0x02            ;byte2 -> R20           (  2 clocks) 
 288:	40 91 02 01 	lds	r20, 0x0102
		LDS   R21		         , Kernel+0x03            ;byte3 -> R21           (  2 clocks) 
 28c:	50 91 03 01 	lds	r21, 0x0103
		LDS   R22		         , Kernel+0x04            ;byte4 -> R22           (  2 clocks) 
 290:	60 91 04 01 	lds	r22, 0x0104
		LDI   R23		         , 0x00                   ;byte5 -> R23           (  1 clocks) 
 294:	70 e0       	ldi	r23, 0x00	; 0
		LDI   R24		         , 0x00                   ;byte6 -> R24           (  1 clocks) 
 296:	80 e0       	ldi	r24, 0x00	; 0
		LDI   R25		         , 0x00                   ;byte7 -> R25 (MSB)     (  1 clocks) 
 298:	90 e0       	ldi	r25, 0x00	; 0
		OUT   IOSREG             , R16          		  ;restore SREG           (  1 clock )
 29a:	0f bf       	out	0x3f, r16	; 63
		RET                                               ;return from subroutine (  4 clocks) 
 29c:	08 95       	ret

0000029e <Kernel_Interrupt_Sts_Get>:



;;===============================interrupt status get start=================================;;
Kernel_Interrupt_Sts_Get:                                 ;total operation        ( 10 clocks)
        LDI   R24		         , 0x00                   ;clear R24              (  1 clock ) 
 29e:	80 e0       	ldi	r24, 0x00	; 0
        IN    R16		         , IOSREG                 ;save SREG in R16       (  1 clock )
 2a0:	0f b7       	in	r16, 0x3f	; 63
		SBRC  R16		         , 0x07                   ;check I flag->bit7     (  3 clocks)
 2a2:	07 fd       	sbrc	r16, 7
		LDI   R24		         , 0x01                   ;set R24 to 1           (  1 clock ) 
 2a4:	81 e0       	ldi	r24, 0x01	; 1
		RET                                               ;return from subroutine (  4 clocks) 
 2a6:	08 95       	ret

000002a8 <Kernel_Task0_Init>:
;;====================================Kernel Task0 Init=====================================;;
Kernel_Task0_Init:
        ;init stack for task0
		
		;save MSP
		IN    R2                 , IOSPL
 2a8:	2d b6       	in	r2, 0x3d	; 61
		IN    R3                 , IOSPH
 2aa:	3e b6       	in	r3, 0x3e	; 62
		
		;set stack for task0
		LDI   R16                , lo8(ker_stk0+KER_STZ)  ;fetch top SPL0,          (1 clock )
 2ac:	00 e9       	ldi	r16, 0x90	; 144
		LDI   R17                , hi8(ker_stk0+KER_STZ)  ;fetch top SPH0,          (1 clock )
 2ae:	11 e0       	ldi	r17, 0x01	; 1
		OUT   IOSPL              , R16                    ;load SPL                 (1 clock )
 2b0:	0d bf       	out	0x3d, r16	; 61
        OUT   IOSPH              , R17                    ;load SPH                 (1 clock )
 2b2:	1e bf       	out	0x3e, r17	; 62
		
		;psuh return address of task0
		LDI   R16                , lo8(Tasks_Task0)       ;fetch task address low   (1 clock )
 2b4:	04 eb       	ldi	r16, 0xB4	; 180
		LDI   R17                , hi8(Tasks_Task0)       ;fetch task address high  (1 clock )
 2b6:	10 e0       	ldi	r17, 0x00	; 0
		LSR   R17                                         ;right shift high byte    (1 clock )
 2b8:	16 95       	lsr	r17
		ROR   R16                                         ;rotate right th carry    (1 clock )
 2ba:	07 95       	ror	r16
		PUSH  R16                                         ;push word addr low       (2 clocks)
 2bc:	0f 93       	push	r16
		PUSH  R17                                         ;push word addr high      (2 clocks) 
 2be:	1f 93       	push	r17
		
        KER_CONTEXT_SAVE
 2c0:	0f 92       	push	r0
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	0f 92       	push	r0
 2c6:	1f 92       	push	r1
 2c8:	11 24       	eor	r1, r1
 2ca:	2f 92       	push	r2
 2cc:	3f 92       	push	r3
 2ce:	4f 92       	push	r4
 2d0:	5f 92       	push	r5
 2d2:	6f 92       	push	r6
 2d4:	7f 92       	push	r7
 2d6:	8f 92       	push	r8
 2d8:	9f 92       	push	r9
 2da:	af 92       	push	r10
 2dc:	bf 92       	push	r11
 2de:	cf 92       	push	r12
 2e0:	df 92       	push	r13
 2e2:	ef 92       	push	r14
 2e4:	ff 92       	push	r15
 2e6:	0f 93       	push	r16
 2e8:	1f 93       	push	r17
 2ea:	2f 93       	push	r18
 2ec:	3f 93       	push	r19
 2ee:	4f 93       	push	r20
 2f0:	5f 93       	push	r21
 2f2:	6f 93       	push	r22
 2f4:	7f 93       	push	r23
 2f6:	8f 93       	push	r24
 2f8:	9f 93       	push	r25
 2fa:	af 93       	push	r26
 2fc:	bf 93       	push	r27
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	ef 93       	push	r30
 304:	ff 93       	push	r31
		
		;save PSP of task0
        IN    R16                , IOSPL                  ;read SPL                 (1 clock )
 306:	0d b7       	in	r16, 0x3d	; 61
        IN    R17                , IOSPH                  ;read SPH                 (1 clock )
 308:	1e b7       	in	r17, 0x3e	; 62
        STS   ker_stp + 0        , R16                    ;set stp of task0         (2 clocks) 
 30a:	00 93 0a 01 	sts	0x010A, r16
        STS   ker_stp + 1        , R17                    ;set stp of task0         (2 clocks) 
 30e:	10 93 0b 01 	sts	0x010B, r17
		
		;set task index -> 0
		LDI   R16                , 0x00                   ;set R16 to 0x00          (1 clock )
 312:	00 e0       	ldi	r16, 0x00	; 0
		STS   Kernel+0x06        , R16                    ;set task index = 0       (2 clocks) 
 314:	00 93 06 01 	sts	0x0106, r16
		
		;restore MSP
		OUT   IOSPL              , R2                     ;load SPL                 (1 clock )
 318:	2d be       	out	0x3d, r2	; 61
        OUT   IOSPH              , R3                     ;load SPH                 (1 clock )
 31a:	3e be       	out	0x3e, r3	; 62
        RET                                               ;return from subroutine   (4 clocks) 
 31c:	08 95       	ret

0000031e <Kernel_Task1_Init>:
		;save MSP
		;IN    R2                 , IOSPL
		;IN    R3                 , IOSPH
		
		;set stack for task1
		LDI   R16                , lo8(ker_stk1+KER_STZ)  ;fetch top SPL1,          (1 clock )
 31e:	00 e1       	ldi	r16, 0x10	; 16
		LDI   R17                , hi8(ker_stk1+KER_STZ)  ;fetch top SPH1,          (1 clock )
 320:	12 e0       	ldi	r17, 0x02	; 2
		OUT   IOSPL              , R16                    ;load SPL                 (1 clock )
 322:	0d bf       	out	0x3d, r16	; 61
        OUT   IOSPH              , R17                    ;load SPH                 (1 clock )
 324:	1e bf       	out	0x3e, r17	; 62
		
		;psuh return address of task1
		LDI   R16                , lo8(Tasks_Task1)       ;fetch task address low   (1 clock )
 326:	02 ed       	ldi	r16, 0xD2	; 210
		LDI   R17                , hi8(Tasks_Task1)       ;fetch task address high  (1 clock )
 328:	10 e0       	ldi	r17, 0x00	; 0
		LSR   R17                                         ;right shift high byte    (1 clock )
 32a:	16 95       	lsr	r17
		ROR   R16                                         ;rotate right th carry    (1 clock )
 32c:	07 95       	ror	r16
		PUSH  R16                                         ;push word addr low       (2 clocks)
 32e:	0f 93       	push	r16
		PUSH  R17                                         ;push word addr high      (2 clocks) 
 330:	1f 93       	push	r17
		
        ;KER_CNTXT_SV
		
		;save PSP of task1
        IN    R16                , IOSPL                  ;read SPL                 (1 clock )
 332:	0d b7       	in	r16, 0x3d	; 61
        IN    R17                , IOSPH                  ;read SPH                 (1 clock )
 334:	1e b7       	in	r17, 0x3e	; 62
        STS   ker_stp + 2        , R16                    ;set stp of task1         (2 clocks) 
 336:	00 93 0c 01 	sts	0x010C, r16
        STS   ker_stp + 3        , R17                    ;set stp of task1         (2 clocks) 
 33a:	10 93 0d 01 	sts	0x010D, r17
		
		;set task index -> 1
		LDI   R16                , 0x01                   ;set R16 to 0x01          (1 clock )
 33e:	01 e0       	ldi	r16, 0x01	; 1
		STS   Kernel+0x06        , R16                    ;set task index = 1       (2 clocks) 
 340:	00 93 06 01 	sts	0x0106, r16
		
		;restore MSP
		;OUT   IOSPL              , R2                     ;load SPL                 (1 clock )
        ;OUT   IOSPH              , R3                     ;load SPH                 (1 clock )
		SEI
 344:	78 94       	sei
        RET                                               ;return from subroutine   (4 clocks)  
 346:	08 95       	ret

00000348 <Debug_Init>:


;;========================================Debug Init========================================;;
Debug_Init:
        ;init registers for UART0
		LDI   R16                , (1<<1)                 ;mask U2x,                (1 clock )
 348:	02 e0       	ldi	r16, 0x02	; 2
		STS   SRUCSR0A           , R16                    ;load val to UCSR0A,      (2 clocks)
 34a:	00 93 c0 00 	sts	0x00C0, r16
		LDI   R16                , 0x00                   ;clear R16,               (1 clock )
 34e:	00 e0       	ldi	r16, 0x00	; 0
		STS   SRUBRR0H           , R16                    ;load val to UBRR0H,      (2 clocks)
 350:	00 93 c5 00 	sts	0x00C5, r16
		LDI   R16                , 0x03                   ;set 0x03, 250k baud,     (1 clock )
 354:	03 e0       	ldi	r16, 0x03	; 3
		STS   SRUBRR0L           , R16                    ;load val to UBRR0L,      (2 clocks)
 356:	00 93 c4 00 	sts	0x00C4, r16
		LDI   R16                , (1<<1)|(1<<2)          ;config 8 data bit        (1 clock )
 35a:	06 e0       	ldi	r16, 0x06	; 6
		STS   SRUCSR0C           , R16                    ;load val to UCSR0C,      (2 clocks)
 35c:	00 93 c2 00 	sts	0x00C2, r16
		LDI   R16                , (1<<3)                 ;enable tx,               (1 clock )
 360:	08 e0       	ldi	r16, 0x08	; 8
		STS   SRUCSR0B           , R16                    ;load val to UCSR0B,      (2 clocks)
 362:	00 93 c1 00 	sts	0x00C1, r16
        RET                                               ;return from subroutine,  (4 clocks) 
 366:	08 95       	ret

00000368 <Debug_Tx_Byte>:


;;=========================================Debug Tx=========================================;;
Debug_Tx_Byte:
		;write single byte to data register (Arg R24)
		STS   SRGPIOR0           , R16                    ;store R16 val,           (2 clocks)
 368:	00 93 3e 00 	sts	0x003E, r16
		STS   SRUDR0             , R24                    ;load val to UDR0,        (2 clocks)
 36c:	80 93 c6 00 	sts	0x00C6, r24

00000370 <__UDRE0_CLEARED>:
		
    __UDRE0_CLEARED:
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,      (2 clocks)
 370:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x05                   ;skip if UDRE0 is set,    (2 clocks)
 374:	05 ff       	sbrs	r16, 5
		RJMP  __UDRE0_CLEARED                             ;wait until UDRE0 is set, (2 clocks)
 376:	fc cf       	rjmp	.-8      	; 0x370 <__UDRE0_CLEARED>
		LDS   R16                , SRGPIOR0               ;restore R16 val,         (2 clocks)
 378:	00 91 3e 00 	lds	r16, 0x003E
        RET                                               ;return from subroutine,  (4 clocks) 
 37c:	08 95       	ret

0000037e <Debug_Tx_Byte_Conf>:


;;=========================================Debug Tx=========================================;;
Debug_Tx_Byte_Conf:
        ;write single byte to data register and wait until tx is complete (Arg R24)
		STS   SRGPIOR0           , R16                    ;store R16 val,           (2 clocks)
 37e:	00 93 3e 00 	sts	0x003E, r16
		STS   SRUDR0             , R24                    ;load val to UDR0,        (2 clocks)
 382:	80 93 c6 00 	sts	0x00C6, r24

00000386 <__TXC0_CLEARED>:
		
    __TXC0_CLEARED:
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,      (2 clocks)
 386:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x06                   ;skip if TXC0 is set,     (2 clocks)
 38a:	06 ff       	sbrs	r16, 6
		RJMP  __TXC0_CLEARED                              ;wait until TXC0 is set,  (2 clocks)
 38c:	fc cf       	rjmp	.-8      	; 0x386 <__TXC0_CLEARED>
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,      (2 clocks)
 38e:	00 91 c0 00 	lds	r16, 0x00C0
		ORI   R16                , (1<<6)                 ;mask bit 6,              (1 clock )
 392:	00 64       	ori	r16, 0x40	; 64
		STS   SRUCSR0A           , R16                    ;load val to UCSR0B,      (2 clocks)
 394:	00 93 c0 00 	sts	0x00C0, r16
		LDS   R16                , SRGPIOR0               ;restore R16 val,         (2 clocks)
 398:	00 91 3e 00 	lds	r16, 0x003E
        RET                                               ;return from subroutine,  (4 clocks) 
 39c:	08 95       	ret

0000039e <Debug_Tx_Word_Conf>:

;;======================================Debug Tx Word=======================================;;
Debug_Tx_Word_Conf:
        ;write 2 bytes to data register and wait until tx is complete (Arg R24, R25)
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 39e:	0e 94 bf 01 	call	0x37e	; 0x37e <Debug_Tx_Byte_Conf>
		MOV   R24                , R25                    ;copy R25 to R24          (1 clock )
 3a2:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 3a4:	0e 94 bf 01 	call	0x37e	; 0x37e <Debug_Tx_Byte_Conf>
        RET                                               ;return from subroutine,  (4 clocks) 
 3a8:	08 95       	ret

000003aa <Debug_Tx_DWord_Conf>:

;;=====================================Debug Tx DWord=======================================;;
Debug_Tx_DWord_Conf:
        ;write 4 bytes to data register and wait until tx is complete (Arg R22-R25)
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks)
 3aa:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R22                    ;copy R22 to R24          (1 clock )
 3ae:	86 2f       	mov	r24, r22
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 3b0:	0e 94 bf 01 	call	0x37e	; 0x37e <Debug_Tx_Byte_Conf>
		MOV   R24                , R23                    ;copy R23 to R24          (1 clock )
 3b4:	87 2f       	mov	r24, r23
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 3b6:	0e 94 bf 01 	call	0x37e	; 0x37e <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24              (2 clocks)
 3ba:	80 91 4a 00 	lds	r24, 0x004A
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 3be:	0e 94 bf 01 	call	0x37e	; 0x37e <Debug_Tx_Byte_Conf>
		MOV   R24                , R25                    ;copy R22 to R24          (1 clock )
 3c2:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 3c4:	0e 94 bf 01 	call	0x37e	; 0x37e <Debug_Tx_Byte_Conf>
        RET                                               ;return from subroutine,  (4 clocks) 
 3c8:	08 95       	ret

000003ca <Debug_Tx_From_RAM>:


;;===================================Debug Tx From RAM======================================;;
Debug_Tx_From_RAM:
        ;print data from RAM address (Arg R24-R25)
		MOV   R16                , R30                    ;copy R30 to R16          (1 clock )
 3ca:	0e 2f       	mov	r16, r30
		MOV   R17                , R31                    ;copy R31 to R17          (1 clock )
 3cc:	1f 2f       	mov	r17, r31
		MOV   R18                , R24                    ;copy R24 to R18          (1 clock )
 3ce:	28 2f       	mov	r18, r24
		MOV   R30                , R24                    ;copy R22 to R24          (1 clock )
 3d0:	e8 2f       	mov	r30, r24
		MOV   R31                , R25                    ;copy R22 to R24          (1 clock )
 3d2:	f9 2f       	mov	r31, r25
		LD    R24                , Z                      ;load val to R24          (2 clocks)
 3d4:	80 81       	ld	r24, Z
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 3d6:	0e 94 bf 01 	call	0x37e	; 0x37e <Debug_Tx_Byte_Conf>
		MOV   R30                , R16                    ;copy R16 to R30          (1 clock )
 3da:	e0 2f       	mov	r30, r16
		MOV   R31                , R17                    ;copy R17 to R31          (1 clock )
 3dc:	f1 2f       	mov	r31, r17
		MOV   R24                , R18                    ;copy R18 to R24          (1 clock )
 3de:	82 2f       	mov	r24, r18
        RET                                               ;return from subroutine,  (4 clocks) 
 3e0:	08 95       	ret

000003e2 <Debug_Tx_RAM_Area>:

;;===================================Debug Tx RAM Area======================================;;
Debug_Tx_RAM_Area:
        ;print data from RAM address (arguments R24:R25, R22)
	__DUMP_BYTES:
	    CALL  Debug_Tx_From_RAM                           ;send via uart from ram
 3e2:	0e 94 e5 01 	call	0x3ca	; 0x3ca <Debug_Tx_From_RAM>
		SUBI  R24                , 0x01                   ;decrement from LSByte
 3e6:	81 50       	subi	r24, 0x01	; 1
        SBCI  R25                , 0x00                   ;decrement if carry
 3e8:	90 40       	sbci	r25, 0x00	; 0
		SUBI  R22                , 0x01                   ;decrement
 3ea:	61 50       	subi	r22, 0x01	; 1
		BRNE  __DUMP_BYTES
 3ec:	d1 f7       	brne	.-12     	; 0x3e2 <Debug_Tx_RAM_Area>
        RET                                               ;return from subroutine,  (4 clocks) 
 3ee:	08 95       	ret

000003f0 <_exit>:
 3f0:	f8 94       	cli

000003f2 <__stop_program>:
 3f2:	ff cf       	rjmp	.-2      	; 0x3f2 <__stop_program>
