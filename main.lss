
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d2a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000558  00800100  00800100  00000d9e  2**0
                  ALLOC
  2 .stab         00000c90  00000000  00000000  00000da0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000006e  00000000  00000000  00001a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00001a9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000bd  00000000  00000000  00001ade  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000188  00000000  00000000  00001b9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000080  00000000  00000000  00001d23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000431  00000000  00000000  00001da3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  000021d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000010d  00000000  00000000  00002294  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <__vector_16>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	00 00       	nop
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 00       	nop
  76:	00 00       	nop
  78:	00 00       	nop
  7a:	00 00       	nop
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 00       	nop
  82:	00 00       	nop
  84:	00 00       	nop
  86:	00 00       	nop
  88:	b4 c1       	rjmp	.+872    	; 0x3f2 <__vector_16>

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61
  96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  9a:	0c 94 93 06 	jmp	0xd26	; 0xd26 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:


    
int main(void) {
    
	Kernel_Init();
  a2:	0e 94 3f 04 	call	0x87e	; 0x87e <Kernel_Init>

	Kernel_Task_Create(Tasks_Task1,  0);
  a6:	8b ec       	ldi	r24, 0xCB	; 203
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	0e 94 33 03 	call	0x666	; 0x666 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task2,  3);
  b0:	8f e9       	ldi	r24, 0x9F	; 159
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	63 e0       	ldi	r22, 0x03	; 3
  b6:	0e 94 33 03 	call	0x666	; 0x666 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task3,  2);
  ba:	83 e7       	ldi	r24, 0x73	; 115
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	62 e0       	ldi	r22, 0x02	; 2
  c0:	0e 94 33 03 	call	0x666	; 0x666 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task4,  1);
  c4:	87 e4       	ldi	r24, 0x47	; 71
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	0e 94 33 03 	call	0x666	; 0x666 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task5,  4);
  ce:	8b e1       	ldi	r24, 0x1B	; 27
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	64 e0       	ldi	r22, 0x04	; 4
  d4:	0e 94 33 03 	call	0x666	; 0x666 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task6,  6);
  d8:	85 ef       	ldi	r24, 0xF5	; 245
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	66 e0       	ldi	r22, 0x06	; 6
  de:	0e 94 33 03 	call	0x666	; 0x666 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task7,  5);
  e2:	8f ec       	ldi	r24, 0xCF	; 207
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	65 e0       	ldi	r22, 0x05	; 5
  e8:	0e 94 33 03 	call	0x666	; 0x666 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task8,  8);
  ec:	89 ea       	ldi	r24, 0xA9	; 169
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	68 e0       	ldi	r22, 0x08	; 8
  f2:	0e 94 33 03 	call	0x666	; 0x666 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task9,  7);
  f6:	83 e8       	ldi	r24, 0x83	; 131
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	67 e0       	ldi	r22, 0x07	; 7
  fc:	0e 94 33 03 	call	0x666	; 0x666 <Kernel_Task_Create>
	
	Kernel_Start_Tasks();
 100:	0e 94 ae 03 	call	0x75c	; 0x75c <Kernel_Start_Tasks>
 104:	ff cf       	rjmp	.-2      	; 0x104 <SRUDR0+0x3e>

00000106 <Tasks_Task9>:
  }
}

void Tasks_Task9(void){
  
  Debug_Init(0);
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 35 06 	call	0xc6a	; 0xc6a <Debug_Init>
  
  while(1){
    
	  Debug_Tx_Byte(9);
 10e:	89 e0       	ldi	r24, 0x09	; 9
 110:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(9));
 114:	89 e0       	ldi	r24, 0x09	; 9
 116:	0e 94 0b 06 	call	0xc16	; 0xc16 <Kernel_Task_Sleep_Time_Get>
 11a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(9));
 11e:	89 e0       	ldi	r24, 0x09	; 9
 120:	0e 94 15 06 	call	0xc2a	; 0xc2a <Kernel_Task_Status_Get>
 124:	80 5e       	subi	r24, 0xE0	; 224
 126:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 12a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <Kernel_Abs_High_Prio_Task_ID_Get>
 12e:	80 5f       	subi	r24, 0xF0	; 240
 130:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 134:	0e 94 28 06 	call	0xc50	; 0xc50 <Kernel_Lowest_Prio_Get>
 138:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte('\r');
 13c:	8d e0       	ldi	r24, 0x0D	; 13
 13e:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte('\n');
 142:	8a e0       	ldi	r24, 0x0A	; 10
 144:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Kernel_Task_Sleep(90);
 148:	8a e5       	ldi	r24, 0x5A	; 90
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 6f 04 	call	0x8de	; 0x8de <Kernel_Task_Sleep>
 150:	de cf       	rjmp	.-68     	; 0x10e <Tasks_Task9+0x8>

00000152 <Tasks_Task8>:
  }
}

void Tasks_Task8(void){
  
  Debug_Init(0);
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 35 06 	call	0xc6a	; 0xc6a <Debug_Init>
  
  while(1){
    
	  Debug_Tx_Byte(8);
 15a:	88 e0       	ldi	r24, 0x08	; 8
 15c:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(8));
 160:	88 e0       	ldi	r24, 0x08	; 8
 162:	0e 94 0b 06 	call	0xc16	; 0xc16 <Kernel_Task_Sleep_Time_Get>
 166:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(8));
 16a:	88 e0       	ldi	r24, 0x08	; 8
 16c:	0e 94 15 06 	call	0xc2a	; 0xc2a <Kernel_Task_Status_Get>
 170:	80 5e       	subi	r24, 0xE0	; 224
 172:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 176:	0e 94 2f 06 	call	0xc5e	; 0xc5e <Kernel_Abs_High_Prio_Task_ID_Get>
 17a:	80 5f       	subi	r24, 0xF0	; 240
 17c:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 180:	0e 94 28 06 	call	0xc50	; 0xc50 <Kernel_Lowest_Prio_Get>
 184:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte('\r');
 188:	8d e0       	ldi	r24, 0x0D	; 13
 18a:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte('\n');
 18e:	8a e0       	ldi	r24, 0x0A	; 10
 190:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Kernel_Task_Sleep(80);
 194:	80 e5       	ldi	r24, 0x50	; 80
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 6f 04 	call	0x8de	; 0x8de <Kernel_Task_Sleep>
 19c:	de cf       	rjmp	.-68     	; 0x15a <Tasks_Task8+0x8>

0000019e <Tasks_Task7>:
  }
}

void Tasks_Task7(void){
  
  Debug_Init(0);
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 35 06 	call	0xc6a	; 0xc6a <Debug_Init>
  
  while(1){
    
	  Debug_Tx_Byte(7);
 1a6:	87 e0       	ldi	r24, 0x07	; 7
 1a8:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(7));
 1ac:	87 e0       	ldi	r24, 0x07	; 7
 1ae:	0e 94 0b 06 	call	0xc16	; 0xc16 <Kernel_Task_Sleep_Time_Get>
 1b2:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(7));
 1b6:	87 e0       	ldi	r24, 0x07	; 7
 1b8:	0e 94 15 06 	call	0xc2a	; 0xc2a <Kernel_Task_Status_Get>
 1bc:	80 5e       	subi	r24, 0xE0	; 224
 1be:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 1c2:	0e 94 2f 06 	call	0xc5e	; 0xc5e <Kernel_Abs_High_Prio_Task_ID_Get>
 1c6:	80 5f       	subi	r24, 0xF0	; 240
 1c8:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 1cc:	0e 94 28 06 	call	0xc50	; 0xc50 <Kernel_Lowest_Prio_Get>
 1d0:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte('\r');
 1d4:	8d e0       	ldi	r24, 0x0D	; 13
 1d6:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte('\n');
 1da:	8a e0       	ldi	r24, 0x0A	; 10
 1dc:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Kernel_Task_Sleep(70);
 1e0:	86 e4       	ldi	r24, 0x46	; 70
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 6f 04 	call	0x8de	; 0x8de <Kernel_Task_Sleep>
 1e8:	de cf       	rjmp	.-68     	; 0x1a6 <Tasks_Task7+0x8>

000001ea <Tasks_Task6>:
  }
}

void Tasks_Task6(void){
  
  Debug_Init(0);
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 35 06 	call	0xc6a	; 0xc6a <Debug_Init>
  
  while(1){
    
    Debug_Tx_Byte(6);
 1f2:	86 e0       	ldi	r24, 0x06	; 6
 1f4:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(6));
 1f8:	86 e0       	ldi	r24, 0x06	; 6
 1fa:	0e 94 0b 06 	call	0xc16	; 0xc16 <Kernel_Task_Sleep_Time_Get>
 1fe:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(6));
 202:	86 e0       	ldi	r24, 0x06	; 6
 204:	0e 94 15 06 	call	0xc2a	; 0xc2a <Kernel_Task_Status_Get>
 208:	80 5e       	subi	r24, 0xE0	; 224
 20a:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 20e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <Kernel_Abs_High_Prio_Task_ID_Get>
 212:	80 5f       	subi	r24, 0xF0	; 240
 214:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 218:	0e 94 28 06 	call	0xc50	; 0xc50 <Kernel_Lowest_Prio_Get>
 21c:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte('\r');
 220:	8d e0       	ldi	r24, 0x0D	; 13
 222:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte('\n');
 226:	8a e0       	ldi	r24, 0x0A	; 10
 228:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Kernel_Task_Sleep(60);
 22c:	8c e3       	ldi	r24, 0x3C	; 60
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 6f 04 	call	0x8de	; 0x8de <Kernel_Task_Sleep>
 234:	de cf       	rjmp	.-68     	; 0x1f2 <Tasks_Task6+0x8>

00000236 <Tasks_Task5>:
    Kernel_Task_Sleep(40);
	
  }
}

void Tasks_Task5(void){
 236:	1f 93       	push	r17
  
  DDRC |= (1<<5);
 238:	3d 9a       	sbi	0x07, 5	; 7

  Debug_Init(0);
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 35 06 	call	0xc6a	; 0xc6a <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<5);
 242:	10 e2       	ldi	r17, 0x20	; 32
 244:	88 b1       	in	r24, 0x08	; 8
 246:	81 27       	eor	r24, r17
 248:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(5);
 24a:	85 e0       	ldi	r24, 0x05	; 5
 24c:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(5));
 250:	85 e0       	ldi	r24, 0x05	; 5
 252:	0e 94 0b 06 	call	0xc16	; 0xc16 <Kernel_Task_Sleep_Time_Get>
 256:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(5));
 25a:	85 e0       	ldi	r24, 0x05	; 5
 25c:	0e 94 15 06 	call	0xc2a	; 0xc2a <Kernel_Task_Status_Get>
 260:	80 5e       	subi	r24, 0xE0	; 224
 262:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 266:	0e 94 2f 06 	call	0xc5e	; 0xc5e <Kernel_Abs_High_Prio_Task_ID_Get>
 26a:	80 5f       	subi	r24, 0xF0	; 240
 26c:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 270:	0e 94 28 06 	call	0xc50	; 0xc50 <Kernel_Lowest_Prio_Get>
 274:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte('\r');
 278:	8d e0       	ldi	r24, 0x0D	; 13
 27a:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte('\n');
 27e:	8a e0       	ldi	r24, 0x0A	; 10
 280:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Kernel_Task_Sleep(50);
 284:	82 e3       	ldi	r24, 0x32	; 50
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 6f 04 	call	0x8de	; 0x8de <Kernel_Task_Sleep>
 28c:	db cf       	rjmp	.-74     	; 0x244 <Tasks_Task5+0xe>

0000028e <Tasks_Task4>:
    Kernel_Task_Sleep(30);
	
  }
}

void Tasks_Task4(void){
 28e:	1f 93       	push	r17
  
  DDRC |= (1<<4);
 290:	3c 9a       	sbi	0x07, 4	; 7

  Debug_Init(0);
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 35 06 	call	0xc6a	; 0xc6a <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<4);
 29a:	10 e1       	ldi	r17, 0x10	; 16
 29c:	88 b1       	in	r24, 0x08	; 8
 29e:	81 27       	eor	r24, r17
 2a0:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(4);
 2a2:	84 e0       	ldi	r24, 0x04	; 4
 2a4:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(4));
 2a8:	84 e0       	ldi	r24, 0x04	; 4
 2aa:	0e 94 0b 06 	call	0xc16	; 0xc16 <Kernel_Task_Sleep_Time_Get>
 2ae:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(4));
 2b2:	84 e0       	ldi	r24, 0x04	; 4
 2b4:	0e 94 15 06 	call	0xc2a	; 0xc2a <Kernel_Task_Status_Get>
 2b8:	80 5e       	subi	r24, 0xE0	; 224
 2ba:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 2be:	0e 94 2f 06 	call	0xc5e	; 0xc5e <Kernel_Abs_High_Prio_Task_ID_Get>
 2c2:	80 5f       	subi	r24, 0xF0	; 240
 2c4:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 2c8:	0e 94 28 06 	call	0xc50	; 0xc50 <Kernel_Lowest_Prio_Get>
 2cc:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte('\r');
 2d0:	8d e0       	ldi	r24, 0x0D	; 13
 2d2:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte('\n');
 2d6:	8a e0       	ldi	r24, 0x0A	; 10
 2d8:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Kernel_Task_Sleep(40);
 2dc:	88 e2       	ldi	r24, 0x28	; 40
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 6f 04 	call	0x8de	; 0x8de <Kernel_Task_Sleep>
 2e4:	db cf       	rjmp	.-74     	; 0x29c <Tasks_Task4+0xe>

000002e6 <Tasks_Task3>:
    Kernel_Task_Sleep(20);
	
  }
}

void Tasks_Task3(void){
 2e6:	1f 93       	push	r17
  
  DDRC |= (1<<3);
 2e8:	3b 9a       	sbi	0x07, 3	; 7

  Debug_Init(0);
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 35 06 	call	0xc6a	; 0xc6a <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<3);
 2f2:	18 e0       	ldi	r17, 0x08	; 8
 2f4:	88 b1       	in	r24, 0x08	; 8
 2f6:	81 27       	eor	r24, r17
 2f8:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(3);
 2fa:	83 e0       	ldi	r24, 0x03	; 3
 2fc:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(3));
 300:	83 e0       	ldi	r24, 0x03	; 3
 302:	0e 94 0b 06 	call	0xc16	; 0xc16 <Kernel_Task_Sleep_Time_Get>
 306:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(3));
 30a:	83 e0       	ldi	r24, 0x03	; 3
 30c:	0e 94 15 06 	call	0xc2a	; 0xc2a <Kernel_Task_Status_Get>
 310:	80 5e       	subi	r24, 0xE0	; 224
 312:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 316:	0e 94 2f 06 	call	0xc5e	; 0xc5e <Kernel_Abs_High_Prio_Task_ID_Get>
 31a:	80 5f       	subi	r24, 0xF0	; 240
 31c:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 320:	0e 94 28 06 	call	0xc50	; 0xc50 <Kernel_Lowest_Prio_Get>
 324:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte('\r');
 328:	8d e0       	ldi	r24, 0x0D	; 13
 32a:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte('\n');
 32e:	8a e0       	ldi	r24, 0x0A	; 10
 330:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Kernel_Task_Sleep(30);
 334:	8e e1       	ldi	r24, 0x1E	; 30
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 6f 04 	call	0x8de	; 0x8de <Kernel_Task_Sleep>
 33c:	db cf       	rjmp	.-74     	; 0x2f4 <Tasks_Task3+0xe>

0000033e <Tasks_Task2>:
    Kernel_Task_Constant_Latency_Sleep();
    
  }
}

void Tasks_Task2(void){
 33e:	1f 93       	push	r17
  
  DDRC |= (1<<2);
 340:	3a 9a       	sbi	0x07, 2	; 7

  Debug_Init(0);
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 35 06 	call	0xc6a	; 0xc6a <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<2);
 34a:	14 e0       	ldi	r17, 0x04	; 4
 34c:	88 b1       	in	r24, 0x08	; 8
 34e:	81 27       	eor	r24, r17
 350:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(2);
 352:	82 e0       	ldi	r24, 0x02	; 2
 354:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(2));
 358:	82 e0       	ldi	r24, 0x02	; 2
 35a:	0e 94 0b 06 	call	0xc16	; 0xc16 <Kernel_Task_Sleep_Time_Get>
 35e:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(2));
 362:	82 e0       	ldi	r24, 0x02	; 2
 364:	0e 94 15 06 	call	0xc2a	; 0xc2a <Kernel_Task_Status_Get>
 368:	80 5e       	subi	r24, 0xE0	; 224
 36a:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 36e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <Kernel_Abs_High_Prio_Task_ID_Get>
 372:	80 5f       	subi	r24, 0xF0	; 240
 374:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 378:	0e 94 28 06 	call	0xc50	; 0xc50 <Kernel_Lowest_Prio_Get>
 37c:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte('\r');
 380:	8d e0       	ldi	r24, 0x0D	; 13
 382:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte('\n');
 386:	8a e0       	ldi	r24, 0x0A	; 10
 388:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Kernel_Task_Sleep(20);
 38c:	84 e1       	ldi	r24, 0x14	; 20
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	0e 94 6f 04 	call	0x8de	; 0x8de <Kernel_Task_Sleep>
 394:	db cf       	rjmp	.-74     	; 0x34c <Tasks_Task2+0xe>

00000396 <Tasks_Task1>:
#include <util/delay.h>
#include "kernel.h"
#include "tasks.h"
#include "debug.h"

void Tasks_Task1(void){
 396:	1f 93       	push	r17
  
  DDRC |= (1<<1);
 398:	39 9a       	sbi	0x07, 1	; 7

  Debug_Init(0);
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 35 06 	call	0xc6a	; 0xc6a <Debug_Init>
  
  while(1){
    
    Kernel_Task_Constant_Latency(10);
    PORTC ^= (1<<1);
 3a2:	12 e0       	ldi	r17, 0x02	; 2

  Debug_Init(0);
  
  while(1){
    
    Kernel_Task_Constant_Latency(10);
 3a4:	8a e0       	ldi	r24, 0x0A	; 10
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 37 05 	call	0xa6e	; 0xa6e <Kernel_Task_Constant_Latency>
    PORTC ^= (1<<1);
 3ac:	88 b1       	in	r24, 0x08	; 8
 3ae:	81 27       	eor	r24, r17
 3b0:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(1);
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	0e 94 0b 06 	call	0xc16	; 0xc16 <Kernel_Task_Sleep_Time_Get>
 3be:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	0e 94 15 06 	call	0xc2a	; 0xc2a <Kernel_Task_Status_Get>
 3c8:	80 5e       	subi	r24, 0xE0	; 224
 3ca:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 3ce:	0e 94 2f 06 	call	0xc5e	; 0xc5e <Kernel_Abs_High_Prio_Task_ID_Get>
 3d2:	80 5f       	subi	r24, 0xF0	; 240
 3d4:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 3d8:	0e 94 28 06 	call	0xc50	; 0xc50 <Kernel_Lowest_Prio_Get>
 3dc:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte('\r');
 3e0:	8d e0       	ldi	r24, 0x0D	; 13
 3e2:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    Debug_Tx_Byte('\n');
 3e6:	8a e0       	ldi	r24, 0x0A	; 10
 3e8:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
    //Kernel_Task_Sleep(10);

    Kernel_Task_Constant_Latency_Sleep();
 3ec:	0e 94 4d 05 	call	0xa9a	; 0xa9a <Kernel_Task_Constant_Latency_Sleep>
 3f0:	d9 cf       	rjmp	.-78     	; 0x3a4 <Tasks_Task1+0xe>

000003f2 <__vector_16>:


;;=================================ISR execution starting===================================;; 
.global  __vector_16                                                                           
    __vector_16:                                          ;total 40.00uS @8MHz    (320 clocks) 
	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 3f2:	5d 9a       	sbi	0x0b, 5	; 11
        KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 3f4:	0f 92       	push	r0
 3f6:	0f b6       	in	r0, 0x3f	; 63
 3f8:	0f 92       	push	r0
 3fa:	1f 92       	push	r1
 3fc:	11 24       	eor	r1, r1
 3fe:	2f 92       	push	r2
 400:	3f 92       	push	r3
 402:	4f 92       	push	r4
 404:	5f 92       	push	r5
 406:	6f 92       	push	r6
 408:	7f 92       	push	r7
 40a:	8f 92       	push	r8
 40c:	9f 92       	push	r9
 40e:	af 92       	push	r10
 410:	bf 92       	push	r11
 412:	cf 92       	push	r12
 414:	df 92       	push	r13
 416:	ef 92       	push	r14
 418:	ff 92       	push	r15
 41a:	0f 93       	push	r16
 41c:	1f 93       	push	r17
 41e:	2f 93       	push	r18
 420:	3f 93       	push	r19
 422:	4f 93       	push	r20
 424:	5f 93       	push	r21
 426:	6f 93       	push	r22
 428:	7f 93       	push	r23
 42a:	8f 93       	push	r24
 42c:	9f 93       	push	r25
 42e:	af 93       	push	r26
 430:	bf 93       	push	r27
 432:	cf 93       	push	r28
 434:	df 93       	push	r29
 436:	ef 93       	push	r30
 438:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 43a:	ee e0       	ldi	r30, 0x0E	; 14
 43c:	f1 e0       	ldi	r31, 0x01	; 1
 43e:	00 91 07 01 	lds	r16, 0x0107
 442:	00 0f       	add	r16, r16
 444:	e0 0f       	add	r30, r16
 446:	00 e0       	ldi	r16, 0x00	; 0
 448:	f0 1f       	adc	r31, r16
 44a:	0d b7       	in	r16, 0x3d	; 61
 44c:	1e b7       	in	r17, 0x3e	; 62
 44e:	00 83       	st	Z, r16
 450:	11 83       	std	Z+1, r17	; 0x01
		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 452:	00 91 06 01 	lds	r16, 0x0106
 456:	00 93 46 00 	sts	0x0046, r16
		KER_TICK_INCREMENT                                ;increment tick counter ( 26 clocks) 
 45a:	00 91 00 01 	lds	r16, 0x0100
 45e:	03 95       	inc	r16
 460:	00 93 00 01 	sts	0x0100, r16
 464:	10 e0       	ldi	r17, 0x00	; 0
 466:	00 91 01 01 	lds	r16, 0x0101
 46a:	01 1f       	adc	r16, r17
 46c:	00 93 01 01 	sts	0x0101, r16
 470:	00 91 02 01 	lds	r16, 0x0102
 474:	01 1f       	adc	r16, r17
 476:	00 93 02 01 	sts	0x0102, r16
 47a:	00 91 03 01 	lds	r16, 0x0103
 47e:	01 1f       	adc	r16, r17
 480:	00 93 03 01 	sts	0x0103, r16
 484:	00 91 04 01 	lds	r16, 0x0104
 488:	01 1f       	adc	r16, r17
 48a:	00 93 04 01 	sts	0x0104, r16
		LDI    R24               , SCH_MODE_HANDLER       ;set sch mode           (  1 clock ) 
 48e:	80 e0       	ldi	r24, 0x00	; 0
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
 490:	0f ef       	ldi	r16, 0xFF	; 255
 492:	00 93 09 01 	sts	0x0109, r16
 496:	00 e0       	ldi	r16, 0x00	; 0
 498:	00 93 0a 01 	sts	0x010A, r16
 49c:	98 2f       	mov	r25, r24

0000049e <_KER_SCH_LOOP8>:
 49e:	00 93 07 01 	sts	0x0107, r16
 4a2:	89 2f       	mov	r24, r25
 4a4:	e4 e4       	ldi	r30, 0x44	; 68
 4a6:	f1 e0       	ldi	r31, 0x01	; 1
 4a8:	00 91 07 01 	lds	r16, 0x0107
 4ac:	00 0f       	add	r16, r16
 4ae:	e0 0f       	add	r30, r16
 4b0:	00 e0       	ldi	r16, 0x00	; 0
 4b2:	f0 1f       	adc	r31, r16
 4b4:	00 81       	ld	r16, Z
 4b6:	11 81       	ldd	r17, Z+1	; 0x01
 4b8:	20 2f       	mov	r18, r16
 4ba:	21 2b       	or	r18, r17
 4bc:	59 f0       	breq	.+22     	; 0x4d4 <_VAL_NULL9>
 4be:	81 30       	cpi	r24, 0x01	; 1
 4c0:	99 f0       	breq	.+38     	; 0x4e8 <_VAL_NOT_NULL9>
 4c2:	21 e0       	ldi	r18, 0x01	; 1
 4c4:	02 1b       	sub	r16, r18
 4c6:	20 e0       	ldi	r18, 0x00	; 0
 4c8:	12 0b       	sbc	r17, r18
 4ca:	00 83       	st	Z, r16
 4cc:	11 83       	std	Z+1, r17	; 0x01
 4ce:	20 2f       	mov	r18, r16
 4d0:	21 2b       	or	r18, r17
 4d2:	51 f4       	brne	.+20     	; 0x4e8 <_VAL_NOT_NULL9>

000004d4 <_VAL_NULL9>:
 4d4:	e0 e3       	ldi	r30, 0x30	; 48
 4d6:	f1 e0       	ldi	r31, 0x01	; 1
 4d8:	00 91 07 01 	lds	r16, 0x0107
 4dc:	e0 0f       	add	r30, r16
 4de:	00 e0       	ldi	r16, 0x00	; 0
 4e0:	f0 1f       	adc	r31, r16
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	80 83       	st	Z, r24
 4e6:	08 c0       	rjmp	.+16     	; 0x4f8 <_EXIT_SLP_TIME9>

000004e8 <_VAL_NOT_NULL9>:
 4e8:	e0 e3       	ldi	r30, 0x30	; 48
 4ea:	f1 e0       	ldi	r31, 0x01	; 1
 4ec:	00 91 07 01 	lds	r16, 0x0107
 4f0:	e0 0f       	add	r30, r16
 4f2:	00 e0       	ldi	r16, 0x00	; 0
 4f4:	f0 1f       	adc	r31, r16
 4f6:	80 81       	ld	r24, Z

000004f8 <_EXIT_SLP_TIME9>:
 4f8:	81 30       	cpi	r24, 0x01	; 1
 4fa:	91 f4       	brne	.+36     	; 0x520 <_KER_SCH_NEXT8>
 4fc:	ea e3       	ldi	r30, 0x3A	; 58
 4fe:	f1 e0       	ldi	r31, 0x01	; 1
 500:	00 e0       	ldi	r16, 0x00	; 0
 502:	80 91 07 01 	lds	r24, 0x0107
 506:	e8 0f       	add	r30, r24
 508:	f0 1f       	adc	r31, r16
 50a:	80 81       	ld	r24, Z
 50c:	00 91 09 01 	lds	r16, 0x0109
 510:	80 17       	cp	r24, r16
 512:	30 f4       	brcc	.+12     	; 0x520 <_KER_SCH_NEXT8>
 514:	80 93 09 01 	sts	0x0109, r24
 518:	00 91 07 01 	lds	r16, 0x0107
 51c:	00 93 0a 01 	sts	0x010A, r16

00000520 <_KER_SCH_NEXT8>:
 520:	00 91 07 01 	lds	r16, 0x0107
 524:	03 95       	inc	r16
 526:	10 91 08 01 	lds	r17, 0x0108
 52a:	01 17       	cp	r16, r17
 52c:	08 f4       	brcc	.+2      	; 0x530 <_KER_SCH_EXIT8>
 52e:	b7 cf       	rjmp	.-146    	; 0x49e <_KER_SCH_LOOP8>

00000530 <_KER_SCH_EXIT8>:
 530:	00 91 0a 01 	lds	r16, 0x010A
 534:	00 93 07 01 	sts	0x0107, r16
		KER_CPU_USAGE                                     ;calc cpu usage         ( 26 clocks) 
 538:	00 91 07 01 	lds	r16, 0x0107
 53c:	00 23       	and	r16, r16
 53e:	29 f0       	breq	.+10     	; 0x54a <_KER_USG_TICK14>
 540:	00 91 0c 01 	lds	r16, 0x010C
 544:	03 95       	inc	r16
 546:	00 93 0c 01 	sts	0x010C, r16

0000054a <_KER_USG_TICK14>:
 54a:	00 91 0b 01 	lds	r16, 0x010B
 54e:	03 95       	inc	r16
 550:	04 36       	cpi	r16, 0x64	; 100
 552:	40 f0       	brcs	.+16     	; 0x564 <_KER_USG_UTC_SV14>
 554:	00 e0       	ldi	r16, 0x00	; 0
 556:	10 91 0c 01 	lds	r17, 0x010C
 55a:	10 93 0d 01 	sts	0x010D, r17
 55e:	10 e0       	ldi	r17, 0x00	; 0
 560:	10 93 0c 01 	sts	0x010C, r17

00000564 <_KER_USG_UTC_SV14>:
 564:	00 93 0b 01 	sts	0x010B, r16
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 568:	ee e0       	ldi	r30, 0x0E	; 14
 56a:	f1 e0       	ldi	r31, 0x01	; 1
 56c:	00 91 07 01 	lds	r16, 0x0107
 570:	00 0f       	add	r16, r16
 572:	e0 0f       	add	r30, r16
 574:	00 e0       	ldi	r16, 0x00	; 0
 576:	f0 1f       	adc	r31, r16
 578:	00 81       	ld	r16, Z
 57a:	11 81       	ldd	r17, Z+1	; 0x01
 57c:	0d bf       	out	0x3d, r16	; 61
 57e:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
 580:	ff 91       	pop	r31
 582:	ef 91       	pop	r30
 584:	df 91       	pop	r29
 586:	cf 91       	pop	r28
 588:	bf 91       	pop	r27
 58a:	af 91       	pop	r26
 58c:	9f 91       	pop	r25
 58e:	8f 91       	pop	r24
 590:	7f 91       	pop	r23
 592:	6f 91       	pop	r22
 594:	5f 91       	pop	r21
 596:	4f 91       	pop	r20
 598:	3f 91       	pop	r19
 59a:	2f 91       	pop	r18
 59c:	1f 91       	pop	r17
 59e:	0f 91       	pop	r16
 5a0:	ff 90       	pop	r15
 5a2:	ef 90       	pop	r14
 5a4:	df 90       	pop	r13
 5a6:	cf 90       	pop	r12
 5a8:	bf 90       	pop	r11
 5aa:	af 90       	pop	r10
 5ac:	9f 90       	pop	r9
 5ae:	8f 90       	pop	r8
 5b0:	7f 90       	pop	r7
 5b2:	6f 90       	pop	r6
 5b4:	5f 90       	pop	r5
 5b6:	4f 90       	pop	r4
 5b8:	3f 90       	pop	r3
 5ba:	2f 90       	pop	r2
 5bc:	1f 90       	pop	r1
 5be:	0f 90       	pop	r0
 5c0:	0f be       	out	0x3f, r0	; 63
 5c2:	0f 90       	pop	r0
	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 5c4:	5d 98       	cbi	0x0b, 5	; 11
		RETI                                              ;return from interrupt  (  4 clocks) 
 5c6:	18 95       	reti

000005c8 <Kernel_SysTick_Reg_Init>:
;used registers          : R16, R17, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
;arg registers           : R24(Prescaler), R22(ReloadVal)                                      
;return registers        : None                                                                
;unsafe access registers : R16, R17, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
Kernel_SysTick_Reg_Init:                                  ;total 11.5uS @8MHz     ( 92 clocks) 
        CLI                                               ;disable global int     (  1 clock ) 
 5c8:	f8 94       	cli
		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 5ca:	5d 98       	cbi	0x0b, 5	; 11
 5cc:	55 9a       	sbi	0x0a, 5	; 10
        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 5ce:	a0 91 22 01 	lds	r26, 0x0122
 5d2:	b0 91 23 01 	lds	r27, 0x0123
 5d6:	0d b7       	in	r16, 0x3d	; 61
 5d8:	1e b7       	in	r17, 0x3e	; 62
 5da:	0d 93       	st	X+, r16
 5dc:	1d 93       	st	X+, r17
 5de:	ed 93       	st	X+, r30
 5e0:	fd 93       	st	X+, r31
 5e2:	a0 93 22 01 	sts	0x0122, r26
 5e6:	b0 93 23 01 	sts	0x0123, r27
		;clear reg                                                                             
		LDI   R16                , 0x00                   ;set 0x00 to R16        (  1 clock ) 
 5ea:	00 e0       	ldi	r16, 0x00	; 0
		;clear tick counter                                                                    
		STS   KerBase+OFB_TICK0  , R16                    ;clear  KerBase[0]      (  2 clocks) 
 5ec:	00 93 00 01 	sts	0x0100, r16
		STS   KerBase+OFB_TICK1  , R16                    ;clear  KerBase[1]      (  2 clocks) 
 5f0:	00 93 01 01 	sts	0x0101, r16
		STS   KerBase+OFB_TICK2  , R16                    ;clear  KerBase[2]      (  2 clocks) 
 5f4:	00 93 02 01 	sts	0x0102, r16
		STS   KerBase+OFB_TICK3  , R16                    ;clear  KerBase[3]      (  2 clocks) 
 5f8:	00 93 03 01 	sts	0x0103, r16
		STS   KerBase+OFB_TICK4  , R16                    ;clear  KerBase[4]      (  2 clocks) 
 5fc:	00 93 04 01 	sts	0x0104, r16
		;clear system registers                                                                
		STS   KerBase+OFB_PRS    , R16                    ;clear  KerBase[5]      (  2 clocks) 
 600:	00 93 05 01 	sts	0x0105, r16
		STS   KerBase+OFB_RLD    , R16                    ;clear  KerBase[6]      (  2 clocks) 
 604:	00 93 06 01 	sts	0x0106, r16
		STS   KerBase+OFB_TID    , R16                    ;clear  KerBase[7]      (  2 clocks) 
 608:	00 93 07 01 	sts	0x0107, r16
		STS   KerBase+OFB_NTSK   , R16                    ;clear  KerBase[8]      (  2 clocks) 
 60c:	00 93 08 01 	sts	0x0108, r16
		STS   KerBase+OFB_LPR    , R16                    ;clear  KerBase[9]      (  2 clocks) 
 610:	00 93 09 01 	sts	0x0109, r16
        STS   KerBase+OFB_PTID   , R16                    ;clear  KerBase[10]     (  2 clocks) 
 614:	00 93 0a 01 	sts	0x010A, r16
		STS   KerBase+OFB_UTC    , R16                    ;clear  KerBase[11]     (  2 clocks) 
 618:	00 93 0b 01 	sts	0x010B, r16
		STS   KerBase+OFB_UATC   , R16                    ;clear  KerBase[12]     (  2 clocks) 
 61c:	00 93 0c 01 	sts	0x010C, r16
		STS   KerBase+OFB_USAGE  , R16                    ;clear  KerBase[13]     (  2 clocks) 
 620:	00 93 0d 01 	sts	0x010D, r16
		;clear all timer registers                                                             
		STS   SRTCCR0A           , R16                    ;clear TCCR0A           (  2 clocks) 
 624:	00 93 44 00 	sts	0x0044, r16
		STS   SRTCCR0B           , R16                    ;clear TCCR0B           (  2 clocks) 
 628:	00 93 45 00 	sts	0x0045, r16
		STS   SRTIMSK0           , R16                    ;clear TIMSK0           (  2 clocks) 
 62c:	00 93 6e 00 	sts	0x006E, r16
		STS   SRTIFR0            , R16                    ;clear TIFR0            (  2 clocks) 
 630:	00 93 35 00 	sts	0x0035, r16
		STS   SROCR0A            , R16                    ;clear OCR0A            (  2 clocks) 
 634:	00 93 47 00 	sts	0x0047, r16
		STS   SROCR0B            , R16                    ;clear OCR0B            (  2 clocks) 
 638:	00 93 48 00 	sts	0x0048, r16
		STS   SRTCNT0            , R16                    ;clear TCNT0            (  2 clocks) 
 63c:	00 93 46 00 	sts	0x0046, r16
		;save values for future use                                                            
		STS   KerBase+OFB_PRS    , R24                    ;KerBase[5] prescaler   (  2 clocks) 
 640:	80 93 05 01 	sts	0x0105, r24
		STS   KerBase+OFB_RLD    , R22                    ;KerBase[6] reload val  (  2 clocks) 
 644:	60 93 06 01 	sts	0x0106, r22
        KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 648:	a0 91 22 01 	lds	r26, 0x0122
 64c:	b0 91 23 01 	lds	r27, 0x0123
 650:	fe 91       	ld	r31, -X
 652:	ee 91       	ld	r30, -X
 654:	1e 91       	ld	r17, -X
 656:	0e 91       	ld	r16, -X
 658:	0d bf       	out	0x3d, r16	; 61
 65a:	1e bf       	out	0x3e, r17	; 62
 65c:	a0 93 22 01 	sts	0x0122, r26
 660:	b0 93 23 01 	sts	0x0123, r27
		RET                                               ;return from subroutine (  4 clocks) 
 664:	08 95       	ret

00000666 <Kernel_Task_Create>:
;used registers          : R16, R17, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)         
;arg registers           : R25:R24(FuncPtr), R22(TaskPriority)                                 
;return registers        : None                                                                
;unsafe access registers : R16, R17, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)         
Kernel_Task_Create:                                       ;total 20.38uS @8MHz    (163 clocks) 
        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 666:	a0 91 22 01 	lds	r26, 0x0122
 66a:	b0 91 23 01 	lds	r27, 0x0123
 66e:	0d b7       	in	r16, 0x3d	; 61
 670:	1e b7       	in	r17, 0x3e	; 62
 672:	0d 93       	st	X+, r16
 674:	1d 93       	st	X+, r17
 676:	ed 93       	st	X+, r30
 678:	fd 93       	st	X+, r31
 67a:	a0 93 22 01 	sts	0x0122, r26
 67e:	b0 93 23 01 	sts	0x0123, r27
		LDI   R17                , 0x00                   ;clear reg              (  1 clock ) 
 682:	10 e0       	ldi	r17, 0x00	; 0
		;set priority to KerSchPr+task_id                                                      
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 684:	ea e3       	ldi	r30, 0x3A	; 58
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 686:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 688:	00 91 07 01 	lds	r16, 0x0107
 68c:	e0 0f       	add	r30, r16
 68e:	00 e0       	ldi	r16, 0x00	; 0
 690:	f0 1f       	adc	r31, r16
		ST    Z                  , R22                    ;save priority          (  2 clocks) 
 692:	60 83       	st	Z, r22
		;set task status to KerSchSts+task_id                                                  
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 694:	e0 e3       	ldi	r30, 0x30	; 48
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 696:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 698:	00 91 07 01 	lds	r16, 0x0107
 69c:	e0 0f       	add	r30, r16
 69e:	00 e0       	ldi	r16, 0x00	; 0
 6a0:	f0 1f       	adc	r31, r16
		LDI   R16                , TASK_READY             ;set status as ready    (  1 clock ) 
 6a2:	01 e0       	ldi	r16, 0x01	; 1
		ST    Z                  , R16                    ;save status            (  2 clocks) 
 6a4:	00 83       	st	Z, r16
		;stack pointer for current task (KerStack + KER_STK_SZ*(task_id+1) - 1) ->stack top    
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 6a6:	00 91 07 01 	lds	r16, 0x0107
		MOV   R17                , R16                    ;load task_id           (  1 clock ) 
 6aa:	10 2f       	mov	r17, r16
		INC   R17                                         ;increment task_id      (  1 clock ) 
 6ac:	13 95       	inc	r17
		LDI   R18                , KER_STK_SZ             ;load stack size        (  1 clock ) 
 6ae:	20 e8       	ldi	r18, 0x80	; 128
		MUL   R17                , R18                    ;multiply to get offset (  2 clocks) 
 6b0:	12 9f       	mul	r17, r18
		MOV   ZL                 , R0                     ;load multiplied low    (  1 clocks) 
 6b2:	e0 2d       	mov	r30, r0
		MOV   ZH                 , R1                     ;load multiplied high   (  1 clocks) 
 6b4:	f1 2d       	mov	r31, r1
		SBIW  ZL                 , 0x01                   ;dec multiplied val-1   (  2 clocks) 
 6b6:	31 97       	sbiw	r30, 0x01	; 1
		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 6b8:	11 24       	eor	r1, r1
		LDI   R17                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
 6ba:	18 e5       	ldi	r17, 0x58	; 88
		LDI   R18                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
 6bc:	21 e0       	ldi	r18, 0x01	; 1
		ADD   ZL                 , R17                    ;add low bytes          (  1 clock ) 
 6be:	e1 0f       	add	r30, r17
		ADC   ZH                 , R18                    ;add high bytes+carry   (  1 clock ) 
 6c0:	f2 1f       	adc	r31, r18
		OUT   IOSPL              , ZL                     ;load SPL               (  1 clock ) 
 6c2:	ed bf       	out	0x3d, r30	; 61
        OUT   IOSPH              , ZH                     ;load SPH               (  1 clock ) 
 6c4:	fe bf       	out	0x3e, r31	; 62
		;function argument directly returns word address                                       
	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
 6c6:	8f 93       	push	r24
		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 6c8:	9f 93       	push	r25
		;push context to stack of this task                                                    
		KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 6ca:	0f 92       	push	r0
 6cc:	0f b6       	in	r0, 0x3f	; 63
 6ce:	0f 92       	push	r0
 6d0:	1f 92       	push	r1
 6d2:	11 24       	eor	r1, r1
 6d4:	2f 92       	push	r2
 6d6:	3f 92       	push	r3
 6d8:	4f 92       	push	r4
 6da:	5f 92       	push	r5
 6dc:	6f 92       	push	r6
 6de:	7f 92       	push	r7
 6e0:	8f 92       	push	r8
 6e2:	9f 92       	push	r9
 6e4:	af 92       	push	r10
 6e6:	bf 92       	push	r11
 6e8:	cf 92       	push	r12
 6ea:	df 92       	push	r13
 6ec:	ef 92       	push	r14
 6ee:	ff 92       	push	r15
 6f0:	0f 93       	push	r16
 6f2:	1f 93       	push	r17
 6f4:	2f 93       	push	r18
 6f6:	3f 93       	push	r19
 6f8:	4f 93       	push	r20
 6fa:	5f 93       	push	r21
 6fc:	6f 93       	push	r22
 6fe:	7f 93       	push	r23
 700:	8f 93       	push	r24
 702:	9f 93       	push	r25
 704:	af 93       	push	r26
 706:	bf 93       	push	r27
 708:	cf 93       	push	r28
 70a:	df 93       	push	r29
 70c:	ef 93       	push	r30
 70e:	ff 93       	push	r31
		;read stack pointer of current task (necessary when restore)                           
		IN    R17                , IOSPL                  ;read SPL               (  1 clock ) 
 710:	1d b7       	in	r17, 0x3d	; 61
        IN    R18                , IOSPH                  ;read SPH               (  1 clock ) 
 712:	2e b7       	in	r18, 0x3e	; 62
		;calculate the address where current task's SP will be stored and store SP             
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 714:	00 91 07 01 	lds	r16, 0x0107
		MOV   R19                , R16                    ;copy task_id           (  1 clock ) 
 718:	30 2f       	mov	r19, r16
		LSL   R19                                         ;left shift to multiply (  1 clock ) 
 71a:	33 0f       	add	r19, r19
		LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 71c:	ee e0       	ldi	r30, 0x0E	; 14
		LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 71e:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R19                    ;add offset to array    (  1 clock ) 
 720:	e3 0f       	add	r30, r19
		LDI   R16                , 0x00                   ;clear reg              (  1 clock ) 
 722:	00 e0       	ldi	r16, 0x00	; 0
		ADC   ZH                 , R16                    ;add carry if any       (  1 clock ) 
 724:	f0 1f       	adc	r31, r16
		ST    Z+                 , R17                    ;SPL at KerPSp+offset   (  2 clocks) 
 726:	11 93       	st	Z+, r17
		ST    Z                  , R18                    ;SPH at KerPSp+offset   (  2 clocks) 
 728:	20 83       	st	Z, r18
		;increment task_id                                                                     
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 72a:	00 91 07 01 	lds	r16, 0x0107
		INC   R16                                         ;increment task_id      (  1 clock ) 
 72e:	03 95       	inc	r16
		STS   KerBase+OFB_TID    , R16                    ;store task_id          (  2 clocks) 
 730:	00 93 07 01 	sts	0x0107, r16
		;increment ntask                                                                       
		LDS   R16                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 734:	00 91 08 01 	lds	r16, 0x0108
		INC   R16                                         ;increment ntask        (  1 clock ) 
 738:	03 95       	inc	r16
		STS   KerBase+OFB_NTSK   , R16                    ;store ntask            (  2 clocks) 
 73a:	00 93 08 01 	sts	0x0108, r16
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 73e:	a0 91 22 01 	lds	r26, 0x0122
 742:	b0 91 23 01 	lds	r27, 0x0123
 746:	fe 91       	ld	r31, -X
 748:	ee 91       	ld	r30, -X
 74a:	1e 91       	ld	r17, -X
 74c:	0e 91       	ld	r16, -X
 74e:	0d bf       	out	0x3d, r16	; 61
 750:	1e bf       	out	0x3e, r17	; 62
 752:	a0 93 22 01 	sts	0x0122, r26
 756:	b0 93 23 01 	sts	0x0123, r27
		RET                                               ;return from subroutine (  4 clocks) 
 75a:	08 95       	ret

0000075c <Kernel_Start_Tasks>:
;used registers          : R0~R31                                                              
;arg registers           : None                                                                
;return registers        : None                                                                
;unsafe access registers : R16, R17, R18, R24, R25, R30(ZL), R31(ZH)                           
Kernel_Start_Tasks:                                       ;total 11.38uS @8MHz    ( 91 clocks) 
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 75c:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
 75e:	0f ef       	ldi	r16, 0xFF	; 255
 760:	00 93 09 01 	sts	0x0109, r16
 764:	00 e0       	ldi	r16, 0x00	; 0
 766:	00 93 0a 01 	sts	0x010A, r16
 76a:	98 2f       	mov	r25, r24

0000076c <_KER_SCH_LOOP31>:
 76c:	00 93 07 01 	sts	0x0107, r16
 770:	89 2f       	mov	r24, r25
 772:	e4 e4       	ldi	r30, 0x44	; 68
 774:	f1 e0       	ldi	r31, 0x01	; 1
 776:	00 91 07 01 	lds	r16, 0x0107
 77a:	00 0f       	add	r16, r16
 77c:	e0 0f       	add	r30, r16
 77e:	00 e0       	ldi	r16, 0x00	; 0
 780:	f0 1f       	adc	r31, r16
 782:	00 81       	ld	r16, Z
 784:	11 81       	ldd	r17, Z+1	; 0x01
 786:	20 2f       	mov	r18, r16
 788:	21 2b       	or	r18, r17
 78a:	59 f0       	breq	.+22     	; 0x7a2 <_VAL_NULL32>
 78c:	81 30       	cpi	r24, 0x01	; 1
 78e:	99 f0       	breq	.+38     	; 0x7b6 <_VAL_NOT_NULL32>
 790:	21 e0       	ldi	r18, 0x01	; 1
 792:	02 1b       	sub	r16, r18
 794:	20 e0       	ldi	r18, 0x00	; 0
 796:	12 0b       	sbc	r17, r18
 798:	00 83       	st	Z, r16
 79a:	11 83       	std	Z+1, r17	; 0x01
 79c:	20 2f       	mov	r18, r16
 79e:	21 2b       	or	r18, r17
 7a0:	51 f4       	brne	.+20     	; 0x7b6 <_VAL_NOT_NULL32>

000007a2 <_VAL_NULL32>:
 7a2:	e0 e3       	ldi	r30, 0x30	; 48
 7a4:	f1 e0       	ldi	r31, 0x01	; 1
 7a6:	00 91 07 01 	lds	r16, 0x0107
 7aa:	e0 0f       	add	r30, r16
 7ac:	00 e0       	ldi	r16, 0x00	; 0
 7ae:	f0 1f       	adc	r31, r16
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	80 83       	st	Z, r24
 7b4:	08 c0       	rjmp	.+16     	; 0x7c6 <_EXIT_SLP_TIME32>

000007b6 <_VAL_NOT_NULL32>:
 7b6:	e0 e3       	ldi	r30, 0x30	; 48
 7b8:	f1 e0       	ldi	r31, 0x01	; 1
 7ba:	00 91 07 01 	lds	r16, 0x0107
 7be:	e0 0f       	add	r30, r16
 7c0:	00 e0       	ldi	r16, 0x00	; 0
 7c2:	f0 1f       	adc	r31, r16
 7c4:	80 81       	ld	r24, Z

000007c6 <_EXIT_SLP_TIME32>:
 7c6:	81 30       	cpi	r24, 0x01	; 1
 7c8:	91 f4       	brne	.+36     	; 0x7ee <_KER_SCH_NEXT31>
 7ca:	ea e3       	ldi	r30, 0x3A	; 58
 7cc:	f1 e0       	ldi	r31, 0x01	; 1
 7ce:	00 e0       	ldi	r16, 0x00	; 0
 7d0:	80 91 07 01 	lds	r24, 0x0107
 7d4:	e8 0f       	add	r30, r24
 7d6:	f0 1f       	adc	r31, r16
 7d8:	80 81       	ld	r24, Z
 7da:	00 91 09 01 	lds	r16, 0x0109
 7de:	80 17       	cp	r24, r16
 7e0:	30 f4       	brcc	.+12     	; 0x7ee <_KER_SCH_NEXT31>
 7e2:	80 93 09 01 	sts	0x0109, r24
 7e6:	00 91 07 01 	lds	r16, 0x0107
 7ea:	00 93 0a 01 	sts	0x010A, r16

000007ee <_KER_SCH_NEXT31>:
 7ee:	00 91 07 01 	lds	r16, 0x0107
 7f2:	03 95       	inc	r16
 7f4:	10 91 08 01 	lds	r17, 0x0108
 7f8:	01 17       	cp	r16, r17
 7fa:	08 f4       	brcc	.+2      	; 0x7fe <_KER_SCH_EXIT31>
 7fc:	b7 cf       	rjmp	.-146    	; 0x76c <_KER_SCH_LOOP31>

000007fe <_KER_SCH_EXIT31>:
 7fe:	00 91 0a 01 	lds	r16, 0x010A
 802:	00 93 07 01 	sts	0x0107, r16
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 806:	ee e0       	ldi	r30, 0x0E	; 14
 808:	f1 e0       	ldi	r31, 0x01	; 1
 80a:	00 91 07 01 	lds	r16, 0x0107
 80e:	00 0f       	add	r16, r16
 810:	e0 0f       	add	r30, r16
 812:	00 e0       	ldi	r16, 0x00	; 0
 814:	f0 1f       	adc	r31, r16
 816:	00 81       	ld	r16, Z
 818:	11 81       	ldd	r17, Z+1	; 0x01
 81a:	0d bf       	out	0x3d, r16	; 61
 81c:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 81e:	ff 91       	pop	r31
 820:	ef 91       	pop	r30
 822:	df 91       	pop	r29
 824:	cf 91       	pop	r28
 826:	bf 91       	pop	r27
 828:	af 91       	pop	r26
 82a:	9f 91       	pop	r25
 82c:	8f 91       	pop	r24
 82e:	7f 91       	pop	r23
 830:	6f 91       	pop	r22
 832:	5f 91       	pop	r21
 834:	4f 91       	pop	r20
 836:	3f 91       	pop	r19
 838:	2f 91       	pop	r18
 83a:	1f 91       	pop	r17
 83c:	0f 91       	pop	r16
 83e:	ff 90       	pop	r15
 840:	ef 90       	pop	r14
 842:	df 90       	pop	r13
 844:	cf 90       	pop	r12
 846:	bf 90       	pop	r11
 848:	af 90       	pop	r10
 84a:	9f 90       	pop	r9
 84c:	8f 90       	pop	r8
 84e:	7f 90       	pop	r7
 850:	6f 90       	pop	r6
 852:	5f 90       	pop	r5
 854:	4f 90       	pop	r4
 856:	3f 90       	pop	r3
 858:	2f 90       	pop	r2
 85a:	1f 90       	pop	r1
 85c:	0f 90       	pop	r0
 85e:	0f be       	out	0x3f, r0	; 63
 860:	0f 90       	pop	r0
 862:	78 94       	sei
		;config timer for system tick                                                          
		KER_TIMER_INIT                                    ;init timer, int enable ( 12 clocks) 
 864:	00 91 05 01 	lds	r16, 0x0105
 868:	10 91 06 01 	lds	r17, 0x0106
 86c:	00 93 45 00 	sts	0x0045, r16
 870:	10 93 46 00 	sts	0x0046, r17
 874:	01 e0       	ldi	r16, 0x01	; 1
 876:	00 93 6e 00 	sts	0x006E, r16
 87a:	78 94       	sei
		;execute return to jump to highest priority task                                       
		RET                                               ;return from subroutine (  4 clocks) 
 87c:	08 95       	ret

0000087e <Kernel_Init>:
;used registers          : R1, R16, R17, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
;arg registers           : None                                                                
;return registers        : None                                                                
;unsafe access registers : R1, R16, R17, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
Kernel_Init:                                              ;total 38.63uS @8MHz    (309 clocks) 
		CLR   R1                                          ;gcc expects            (  1 clock ) 
 87e:	11 24       	eor	r1, r1
        ;store stack top (for MSP) addr to KerSSZ+OFM_MSPI0:1                                  
		LDI   R16                , lo8(KerSSZ+OFM_MSPS)   ;load low address       (  1 clock ) 
 880:	04 e2       	ldi	r16, 0x24	; 36
		LDI   R17                , hi8(KerSSZ+OFM_MSPS)   ;load high address      (  1 clock ) 
 882:	11 e0       	ldi	r17, 0x01	; 1
        STS   KerSSZ+OFM_MSPI+0  , R16                    ;set mspi to stack top  (  2 clocks) 
 884:	00 93 22 01 	sts	0x0122, r16
		STS   KerSSZ+OFM_MSPI+1  , R17                    ;set mspi to stack top  (  2 clocks) 
 888:	10 93 23 01 	sts	0x0123, r17
		KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 88c:	a0 91 22 01 	lds	r26, 0x0122
 890:	b0 91 23 01 	lds	r27, 0x0123
 894:	0d b7       	in	r16, 0x3d	; 61
 896:	1e b7       	in	r17, 0x3e	; 62
 898:	0d 93       	st	X+, r16
 89a:	1d 93       	st	X+, r17
 89c:	ed 93       	st	X+, r30
 89e:	fd 93       	st	X+, r31
 8a0:	a0 93 22 01 	sts	0x0122, r26
 8a4:	b0 93 23 01 	sts	0x0123, r27
		;init timer for kernel                                                                 
		LDI   R24                , 0x03                   ;set prescaler          (  1 clock ) 
 8a8:	83 e0       	ldi	r24, 0x03	; 3
		LDI   R22                , 0x82                   ;set reload val         (  1 clock ) 
 8aa:	62 e8       	ldi	r22, 0x82	; 130
		CALL  Kernel_SysTick_Reg_Init                     ;init timer             ( 92 clocks) 
 8ac:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <Kernel_SysTick_Reg_Init>
		;create idle task at task_id 0, priority 0xFF (lowest)                                 
		LDI   R24                , lo8(Kernel_Task_Idle)  ;load func addr low     (  1 clock ) 
 8b0:	8c ed       	ldi	r24, 0xDC	; 220
		LDI   R25                , hi8(Kernel_Task_Idle)  ;load func addr high    (  1 clock ) 
 8b2:	98 e0       	ldi	r25, 0x08	; 8
		LSR   R25                                         ;right shift to divide  (  1 clock ) 
 8b4:	96 95       	lsr	r25
		ROR   R24                                         ;rotate right th carry  (  1 clock ) 
 8b6:	87 95       	ror	r24
		LDI   R22                , 0xFF                   ;set max val            (  1 clock ) 
 8b8:	6f ef       	ldi	r22, 0xFF	; 255
		CALL  Kernel_Task_Create                          ;init idle task         (163 clocks) 
 8ba:	0e 94 33 03 	call	0x666	; 0x666 <Kernel_Task_Create>
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 8be:	a0 91 22 01 	lds	r26, 0x0122
 8c2:	b0 91 23 01 	lds	r27, 0x0123
 8c6:	fe 91       	ld	r31, -X
 8c8:	ee 91       	ld	r30, -X
 8ca:	1e 91       	ld	r17, -X
 8cc:	0e 91       	ld	r16, -X
 8ce:	0d bf       	out	0x3d, r16	; 61
 8d0:	1e bf       	out	0x3e, r17	; 62
 8d2:	a0 93 22 01 	sts	0x0122, r26
 8d6:	b0 93 23 01 	sts	0x0123, r27
		;execute return to jump to task0, pushed while task init                               
		RET                                               ;return from subroutine (  4 clocks) 
 8da:	08 95       	ret

000008dc <Kernel_Task_Idle>:
;arg registers           : None                                                                
;return registers        : None                                                                
;unsafe access registers : None                                                                
Kernel_Task_Idle:                                         ;total 0.5uS @8MHz      (  4 clocks) 
    _IDLE_LOOP:                                           ;forever loop                        
		RJMP  _IDLE_LOOP                                  ;return from subroutine (  4 clocks) 
 8dc:	ff cf       	rjmp	.-2      	; 0x8dc <Kernel_Task_Idle>

000008de <Kernel_Task_Sleep>:
;arg registers           : R25:R24(SleepTime)                                                  
;return registers        : None                                                                
;unsafe access registers : R16, R17, R18, R24, R25, R30(ZL), R31(ZH)                           
Kernel_Task_Sleep:                                        ;total 35.5uS @8MHz     (284 clocks) 
        ;save current context                                                                  
        KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
 8de:	0f 92       	push	r0
 8e0:	0f b6       	in	r0, 0x3f	; 63
 8e2:	f8 94       	cli
 8e4:	0f 92       	push	r0
 8e6:	1f 92       	push	r1
 8e8:	11 24       	eor	r1, r1
 8ea:	2f 92       	push	r2
 8ec:	3f 92       	push	r3
 8ee:	4f 92       	push	r4
 8f0:	5f 92       	push	r5
 8f2:	6f 92       	push	r6
 8f4:	7f 92       	push	r7
 8f6:	8f 92       	push	r8
 8f8:	9f 92       	push	r9
 8fa:	af 92       	push	r10
 8fc:	bf 92       	push	r11
 8fe:	cf 92       	push	r12
 900:	df 92       	push	r13
 902:	ef 92       	push	r14
 904:	ff 92       	push	r15
 906:	0f 93       	push	r16
 908:	1f 93       	push	r17
 90a:	2f 93       	push	r18
 90c:	3f 93       	push	r19
 90e:	4f 93       	push	r20
 910:	5f 93       	push	r21
 912:	6f 93       	push	r22
 914:	7f 93       	push	r23
 916:	8f 93       	push	r24
 918:	9f 93       	push	r25
 91a:	af 93       	push	r26
 91c:	bf 93       	push	r27
 91e:	cf 93       	push	r28
 920:	df 93       	push	r29
 922:	ef 93       	push	r30
 924:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 926:	ee e0       	ldi	r30, 0x0E	; 14
 928:	f1 e0       	ldi	r31, 0x01	; 1
 92a:	00 91 07 01 	lds	r16, 0x0107
 92e:	00 0f       	add	r16, r16
 930:	e0 0f       	add	r30, r16
 932:	00 e0       	ldi	r16, 0x00	; 0
 934:	f0 1f       	adc	r31, r16
 936:	0d b7       	in	r16, 0x3d	; 61
 938:	1e b7       	in	r17, 0x3e	; 62
 93a:	00 83       	st	Z, r16
 93c:	11 83       	std	Z+1, r17	; 0x01
		;create next task wakeup time (args R25:R24)                                           
		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 93e:	e4 e4       	ldi	r30, 0x44	; 68
		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 940:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
 942:	00 91 07 01 	lds	r16, 0x0107
 946:	00 0f       	add	r16, r16
 948:	e0 0f       	add	r30, r16
 94a:	00 e0       	ldi	r16, 0x00	; 0
 94c:	f0 1f       	adc	r31, r16
		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
 94e:	80 83       	st	Z, r24
		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 950:	91 83       	std	Z+1, r25	; 0x01
		;update task scheduler status as blocked                                               
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 952:	e0 e3       	ldi	r30, 0x30	; 48
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 954:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
 956:	00 91 07 01 	lds	r16, 0x0107
 95a:	e0 0f       	add	r30, r16
 95c:	00 e0       	ldi	r16, 0x00	; 0
 95e:	f0 1f       	adc	r31, r16
        LDI   R16                , TASK_BLOCKED           ;block task until cnt=0 (  1 clock ) 
 960:	00 e0       	ldi	r16, 0x00	; 0
		STD   Z+0                , R16                    ;save block flag        (  2 clocks) 
 962:	00 83       	st	Z, r16
		;run scheduler, load next task sp, restore context                                     
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 964:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
 966:	0f ef       	ldi	r16, 0xFF	; 255
 968:	00 93 09 01 	sts	0x0109, r16
 96c:	00 e0       	ldi	r16, 0x00	; 0
 96e:	00 93 0a 01 	sts	0x010A, r16
 972:	98 2f       	mov	r25, r24

00000974 <_KER_SCH_LOOP52>:
 974:	00 93 07 01 	sts	0x0107, r16
 978:	89 2f       	mov	r24, r25
 97a:	e4 e4       	ldi	r30, 0x44	; 68
 97c:	f1 e0       	ldi	r31, 0x01	; 1
 97e:	00 91 07 01 	lds	r16, 0x0107
 982:	00 0f       	add	r16, r16
 984:	e0 0f       	add	r30, r16
 986:	00 e0       	ldi	r16, 0x00	; 0
 988:	f0 1f       	adc	r31, r16
 98a:	00 81       	ld	r16, Z
 98c:	11 81       	ldd	r17, Z+1	; 0x01
 98e:	20 2f       	mov	r18, r16
 990:	21 2b       	or	r18, r17
 992:	59 f0       	breq	.+22     	; 0x9aa <_VAL_NULL53>
 994:	81 30       	cpi	r24, 0x01	; 1
 996:	99 f0       	breq	.+38     	; 0x9be <_VAL_NOT_NULL53>
 998:	21 e0       	ldi	r18, 0x01	; 1
 99a:	02 1b       	sub	r16, r18
 99c:	20 e0       	ldi	r18, 0x00	; 0
 99e:	12 0b       	sbc	r17, r18
 9a0:	00 83       	st	Z, r16
 9a2:	11 83       	std	Z+1, r17	; 0x01
 9a4:	20 2f       	mov	r18, r16
 9a6:	21 2b       	or	r18, r17
 9a8:	51 f4       	brne	.+20     	; 0x9be <_VAL_NOT_NULL53>

000009aa <_VAL_NULL53>:
 9aa:	e0 e3       	ldi	r30, 0x30	; 48
 9ac:	f1 e0       	ldi	r31, 0x01	; 1
 9ae:	00 91 07 01 	lds	r16, 0x0107
 9b2:	e0 0f       	add	r30, r16
 9b4:	00 e0       	ldi	r16, 0x00	; 0
 9b6:	f0 1f       	adc	r31, r16
 9b8:	81 e0       	ldi	r24, 0x01	; 1
 9ba:	80 83       	st	Z, r24
 9bc:	08 c0       	rjmp	.+16     	; 0x9ce <_EXIT_SLP_TIME53>

000009be <_VAL_NOT_NULL53>:
 9be:	e0 e3       	ldi	r30, 0x30	; 48
 9c0:	f1 e0       	ldi	r31, 0x01	; 1
 9c2:	00 91 07 01 	lds	r16, 0x0107
 9c6:	e0 0f       	add	r30, r16
 9c8:	00 e0       	ldi	r16, 0x00	; 0
 9ca:	f0 1f       	adc	r31, r16
 9cc:	80 81       	ld	r24, Z

000009ce <_EXIT_SLP_TIME53>:
 9ce:	81 30       	cpi	r24, 0x01	; 1
 9d0:	91 f4       	brne	.+36     	; 0x9f6 <_KER_SCH_NEXT52>
 9d2:	ea e3       	ldi	r30, 0x3A	; 58
 9d4:	f1 e0       	ldi	r31, 0x01	; 1
 9d6:	00 e0       	ldi	r16, 0x00	; 0
 9d8:	80 91 07 01 	lds	r24, 0x0107
 9dc:	e8 0f       	add	r30, r24
 9de:	f0 1f       	adc	r31, r16
 9e0:	80 81       	ld	r24, Z
 9e2:	00 91 09 01 	lds	r16, 0x0109
 9e6:	80 17       	cp	r24, r16
 9e8:	30 f4       	brcc	.+12     	; 0x9f6 <_KER_SCH_NEXT52>
 9ea:	80 93 09 01 	sts	0x0109, r24
 9ee:	00 91 07 01 	lds	r16, 0x0107
 9f2:	00 93 0a 01 	sts	0x010A, r16

000009f6 <_KER_SCH_NEXT52>:
 9f6:	00 91 07 01 	lds	r16, 0x0107
 9fa:	03 95       	inc	r16
 9fc:	10 91 08 01 	lds	r17, 0x0108
 a00:	01 17       	cp	r16, r17
 a02:	08 f4       	brcc	.+2      	; 0xa06 <_KER_SCH_EXIT52>
 a04:	b7 cf       	rjmp	.-146    	; 0x974 <_KER_SCH_LOOP52>

00000a06 <_KER_SCH_EXIT52>:
 a06:	00 91 0a 01 	lds	r16, 0x010A
 a0a:	00 93 07 01 	sts	0x0107, r16
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 a0e:	ee e0       	ldi	r30, 0x0E	; 14
 a10:	f1 e0       	ldi	r31, 0x01	; 1
 a12:	00 91 07 01 	lds	r16, 0x0107
 a16:	00 0f       	add	r16, r16
 a18:	e0 0f       	add	r30, r16
 a1a:	00 e0       	ldi	r16, 0x00	; 0
 a1c:	f0 1f       	adc	r31, r16
 a1e:	00 81       	ld	r16, Z
 a20:	11 81       	ldd	r17, Z+1	; 0x01
 a22:	0d bf       	out	0x3d, r16	; 61
 a24:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 a26:	ff 91       	pop	r31
 a28:	ef 91       	pop	r30
 a2a:	df 91       	pop	r29
 a2c:	cf 91       	pop	r28
 a2e:	bf 91       	pop	r27
 a30:	af 91       	pop	r26
 a32:	9f 91       	pop	r25
 a34:	8f 91       	pop	r24
 a36:	7f 91       	pop	r23
 a38:	6f 91       	pop	r22
 a3a:	5f 91       	pop	r21
 a3c:	4f 91       	pop	r20
 a3e:	3f 91       	pop	r19
 a40:	2f 91       	pop	r18
 a42:	1f 91       	pop	r17
 a44:	0f 91       	pop	r16
 a46:	ff 90       	pop	r15
 a48:	ef 90       	pop	r14
 a4a:	df 90       	pop	r13
 a4c:	cf 90       	pop	r12
 a4e:	bf 90       	pop	r11
 a50:	af 90       	pop	r10
 a52:	9f 90       	pop	r9
 a54:	8f 90       	pop	r8
 a56:	7f 90       	pop	r7
 a58:	6f 90       	pop	r6
 a5a:	5f 90       	pop	r5
 a5c:	4f 90       	pop	r4
 a5e:	3f 90       	pop	r3
 a60:	2f 90       	pop	r2
 a62:	1f 90       	pop	r1
 a64:	0f 90       	pop	r0
 a66:	0f be       	out	0x3f, r0	; 63
 a68:	0f 90       	pop	r0
 a6a:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
 a6c:	08 95       	ret

00000a6e <Kernel_Task_Constant_Latency>:
;arg registers           : R25:R24(SleepTime)                                                  
;return registers        : None                                                                
;unsafe access registers : R16, R24, R25, R30(ZL), R31(ZH)                                     
Kernel_Task_Constant_Latency:                             ;total 35.5uS @8MHz     ( 26 clocks) 
		;create next task wakeup time (args R25:R24)                                           
		CLI                                               ;disable interrupt      (  1 clock ) 
 a6e:	f8 94       	cli
		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 a70:	e4 e4       	ldi	r30, 0x44	; 68
		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 a72:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
 a74:	00 91 07 01 	lds	r16, 0x0107
 a78:	00 0f       	add	r16, r16
 a7a:	e0 0f       	add	r30, r16
 a7c:	00 e0       	ldi	r16, 0x00	; 0
 a7e:	f0 1f       	adc	r31, r16
		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
 a80:	80 83       	st	Z, r24
		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 a82:	91 83       	std	Z+1, r25	; 0x01
		;update task scheduler status as constant latency                                      
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 a84:	e0 e3       	ldi	r30, 0x30	; 48
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 a86:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
 a88:	00 91 07 01 	lds	r16, 0x0107
 a8c:	e0 0f       	add	r30, r16
 a8e:	00 e0       	ldi	r16, 0x00	; 0
 a90:	f0 1f       	adc	r31, r16
        LDI   R16                , TASK_CONS_LAT          ;save as cons_lat       (  1 clock ) 
 a92:	04 e0       	ldi	r16, 0x04	; 4
		STD   Z+0                , R16                    ;save block flag        (  2 clocks) 
 a94:	00 83       	st	Z, r16
		SEI                                               ;enable interrupt       (  1 clock ) 
 a96:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
 a98:	08 95       	ret

00000a9a <Kernel_Task_Constant_Latency_Sleep>:
;arg registers           : R25:R24(SleepTime)                                                  
;return registers        : None                                                                
;unsafe access registers : R16, R24, R25, R30(ZL), R31(ZH)                                     
Kernel_Task_Constant_Latency_Sleep:                       ;total 35.5uS @8MHz     ( 26 clocks) 
		;save current context                                                                  
        KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
 a9a:	0f 92       	push	r0
 a9c:	0f b6       	in	r0, 0x3f	; 63
 a9e:	f8 94       	cli
 aa0:	0f 92       	push	r0
 aa2:	1f 92       	push	r1
 aa4:	11 24       	eor	r1, r1
 aa6:	2f 92       	push	r2
 aa8:	3f 92       	push	r3
 aaa:	4f 92       	push	r4
 aac:	5f 92       	push	r5
 aae:	6f 92       	push	r6
 ab0:	7f 92       	push	r7
 ab2:	8f 92       	push	r8
 ab4:	9f 92       	push	r9
 ab6:	af 92       	push	r10
 ab8:	bf 92       	push	r11
 aba:	cf 92       	push	r12
 abc:	df 92       	push	r13
 abe:	ef 92       	push	r14
 ac0:	ff 92       	push	r15
 ac2:	0f 93       	push	r16
 ac4:	1f 93       	push	r17
 ac6:	2f 93       	push	r18
 ac8:	3f 93       	push	r19
 aca:	4f 93       	push	r20
 acc:	5f 93       	push	r21
 ace:	6f 93       	push	r22
 ad0:	7f 93       	push	r23
 ad2:	8f 93       	push	r24
 ad4:	9f 93       	push	r25
 ad6:	af 93       	push	r26
 ad8:	bf 93       	push	r27
 ada:	cf 93       	push	r28
 adc:	df 93       	push	r29
 ade:	ef 93       	push	r30
 ae0:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 ae2:	ee e0       	ldi	r30, 0x0E	; 14
 ae4:	f1 e0       	ldi	r31, 0x01	; 1
 ae6:	00 91 07 01 	lds	r16, 0x0107
 aea:	00 0f       	add	r16, r16
 aec:	e0 0f       	add	r30, r16
 aee:	00 e0       	ldi	r16, 0x00	; 0
 af0:	f0 1f       	adc	r31, r16
 af2:	0d b7       	in	r16, 0x3d	; 61
 af4:	1e b7       	in	r17, 0x3e	; 62
 af6:	00 83       	st	Z, r16
 af8:	11 83       	std	Z+1, r17	; 0x01
		;update task scheduler status as blocked                                               
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 afa:	e0 e3       	ldi	r30, 0x30	; 48
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 afc:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
 afe:	00 91 07 01 	lds	r16, 0x0107
 b02:	e0 0f       	add	r30, r16
 b04:	00 e0       	ldi	r16, 0x00	; 0
 b06:	f0 1f       	adc	r31, r16
        LDI   R16                , TASK_BLOCKED           ;block task until cnt=0 (  1 clock ) 
 b08:	00 e0       	ldi	r16, 0x00	; 0
		STD   Z+0                , R16                    ;save block flag        (  2 clocks) 
 b0a:	00 83       	st	Z, r16
		;run scheduler, load next task sp, restore context                                     
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 b0c:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
 b0e:	0f ef       	ldi	r16, 0xFF	; 255
 b10:	00 93 09 01 	sts	0x0109, r16
 b14:	00 e0       	ldi	r16, 0x00	; 0
 b16:	00 93 0a 01 	sts	0x010A, r16
 b1a:	98 2f       	mov	r25, r24

00000b1c <_KER_SCH_LOOP71>:
 b1c:	00 93 07 01 	sts	0x0107, r16
 b20:	89 2f       	mov	r24, r25
 b22:	e4 e4       	ldi	r30, 0x44	; 68
 b24:	f1 e0       	ldi	r31, 0x01	; 1
 b26:	00 91 07 01 	lds	r16, 0x0107
 b2a:	00 0f       	add	r16, r16
 b2c:	e0 0f       	add	r30, r16
 b2e:	00 e0       	ldi	r16, 0x00	; 0
 b30:	f0 1f       	adc	r31, r16
 b32:	00 81       	ld	r16, Z
 b34:	11 81       	ldd	r17, Z+1	; 0x01
 b36:	20 2f       	mov	r18, r16
 b38:	21 2b       	or	r18, r17
 b3a:	59 f0       	breq	.+22     	; 0xb52 <_VAL_NULL72>
 b3c:	81 30       	cpi	r24, 0x01	; 1
 b3e:	99 f0       	breq	.+38     	; 0xb66 <_VAL_NOT_NULL72>
 b40:	21 e0       	ldi	r18, 0x01	; 1
 b42:	02 1b       	sub	r16, r18
 b44:	20 e0       	ldi	r18, 0x00	; 0
 b46:	12 0b       	sbc	r17, r18
 b48:	00 83       	st	Z, r16
 b4a:	11 83       	std	Z+1, r17	; 0x01
 b4c:	20 2f       	mov	r18, r16
 b4e:	21 2b       	or	r18, r17
 b50:	51 f4       	brne	.+20     	; 0xb66 <_VAL_NOT_NULL72>

00000b52 <_VAL_NULL72>:
 b52:	e0 e3       	ldi	r30, 0x30	; 48
 b54:	f1 e0       	ldi	r31, 0x01	; 1
 b56:	00 91 07 01 	lds	r16, 0x0107
 b5a:	e0 0f       	add	r30, r16
 b5c:	00 e0       	ldi	r16, 0x00	; 0
 b5e:	f0 1f       	adc	r31, r16
 b60:	81 e0       	ldi	r24, 0x01	; 1
 b62:	80 83       	st	Z, r24
 b64:	08 c0       	rjmp	.+16     	; 0xb76 <_EXIT_SLP_TIME72>

00000b66 <_VAL_NOT_NULL72>:
 b66:	e0 e3       	ldi	r30, 0x30	; 48
 b68:	f1 e0       	ldi	r31, 0x01	; 1
 b6a:	00 91 07 01 	lds	r16, 0x0107
 b6e:	e0 0f       	add	r30, r16
 b70:	00 e0       	ldi	r16, 0x00	; 0
 b72:	f0 1f       	adc	r31, r16
 b74:	80 81       	ld	r24, Z

00000b76 <_EXIT_SLP_TIME72>:
 b76:	81 30       	cpi	r24, 0x01	; 1
 b78:	91 f4       	brne	.+36     	; 0xb9e <_KER_SCH_NEXT71>
 b7a:	ea e3       	ldi	r30, 0x3A	; 58
 b7c:	f1 e0       	ldi	r31, 0x01	; 1
 b7e:	00 e0       	ldi	r16, 0x00	; 0
 b80:	80 91 07 01 	lds	r24, 0x0107
 b84:	e8 0f       	add	r30, r24
 b86:	f0 1f       	adc	r31, r16
 b88:	80 81       	ld	r24, Z
 b8a:	00 91 09 01 	lds	r16, 0x0109
 b8e:	80 17       	cp	r24, r16
 b90:	30 f4       	brcc	.+12     	; 0xb9e <_KER_SCH_NEXT71>
 b92:	80 93 09 01 	sts	0x0109, r24
 b96:	00 91 07 01 	lds	r16, 0x0107
 b9a:	00 93 0a 01 	sts	0x010A, r16

00000b9e <_KER_SCH_NEXT71>:
 b9e:	00 91 07 01 	lds	r16, 0x0107
 ba2:	03 95       	inc	r16
 ba4:	10 91 08 01 	lds	r17, 0x0108
 ba8:	01 17       	cp	r16, r17
 baa:	08 f4       	brcc	.+2      	; 0xbae <_KER_SCH_EXIT71>
 bac:	b7 cf       	rjmp	.-146    	; 0xb1c <_KER_SCH_LOOP71>

00000bae <_KER_SCH_EXIT71>:
 bae:	00 91 0a 01 	lds	r16, 0x010A
 bb2:	00 93 07 01 	sts	0x0107, r16
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 bb6:	ee e0       	ldi	r30, 0x0E	; 14
 bb8:	f1 e0       	ldi	r31, 0x01	; 1
 bba:	00 91 07 01 	lds	r16, 0x0107
 bbe:	00 0f       	add	r16, r16
 bc0:	e0 0f       	add	r30, r16
 bc2:	00 e0       	ldi	r16, 0x00	; 0
 bc4:	f0 1f       	adc	r31, r16
 bc6:	00 81       	ld	r16, Z
 bc8:	11 81       	ldd	r17, Z+1	; 0x01
 bca:	0d bf       	out	0x3d, r16	; 61
 bcc:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 bce:	ff 91       	pop	r31
 bd0:	ef 91       	pop	r30
 bd2:	df 91       	pop	r29
 bd4:	cf 91       	pop	r28
 bd6:	bf 91       	pop	r27
 bd8:	af 91       	pop	r26
 bda:	9f 91       	pop	r25
 bdc:	8f 91       	pop	r24
 bde:	7f 91       	pop	r23
 be0:	6f 91       	pop	r22
 be2:	5f 91       	pop	r21
 be4:	4f 91       	pop	r20
 be6:	3f 91       	pop	r19
 be8:	2f 91       	pop	r18
 bea:	1f 91       	pop	r17
 bec:	0f 91       	pop	r16
 bee:	ff 90       	pop	r15
 bf0:	ef 90       	pop	r14
 bf2:	df 90       	pop	r13
 bf4:	cf 90       	pop	r12
 bf6:	bf 90       	pop	r11
 bf8:	af 90       	pop	r10
 bfa:	9f 90       	pop	r9
 bfc:	8f 90       	pop	r8
 bfe:	7f 90       	pop	r7
 c00:	6f 90       	pop	r6
 c02:	5f 90       	pop	r5
 c04:	4f 90       	pop	r4
 c06:	3f 90       	pop	r3
 c08:	2f 90       	pop	r2
 c0a:	1f 90       	pop	r1
 c0c:	0f 90       	pop	r0
 c0e:	0f be       	out	0x3f, r0	; 63
 c10:	0f 90       	pop	r0
 c12:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
 c14:	08 95       	ret

00000c16 <Kernel_Task_Sleep_Time_Get>:
;used registers          : R16, R24, R25, R30(ZL), R31(ZH)                                     
;arg registers           : R24(TaskID)                                                         
;return registers        : R25:R24(SleepTime)                                                  
;unsafe access registers : R16, R24, R25, R30(ZL), R31(ZH)                                     
Kernel_Task_Sleep_Time_Get:                               ;total 1.88uS @8MHz     ( 15 clocks) 
		MOV   R16                , R24                    ;copy                   (  1 clock ) 
 c16:	08 2f       	mov	r16, r24
		LSL   R16                                         ;x2                     (  1 clock ) 
 c18:	00 0f       	add	r16, r16
		LDI   R30                , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 c1a:	e4 e4       	ldi	r30, 0x44	; 68
		LDI   R31                , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 c1c:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 c1e:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 c20:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 c22:	f0 1f       	adc	r31, r16
		LD    R24                , Z+                     ;load sleep time        (  2 clocks) 
 c24:	81 91       	ld	r24, Z+
		LD    R25                , Z                      ;load sleep time        (  2 clocks) 
 c26:	90 81       	ld	r25, Z
		RET                                               ;return from subroutine (  4 clocks) 
 c28:	08 95       	ret

00000c2a <Kernel_Task_Status_Get>:
;used registers          : R16, R24, R30(ZL), R31(ZH)                                          
;arg registers           : R24(TaskID)                                                         
;return registers        : R24(TaskSts)                                                        
;unsafe access registers : R16, R24, R30(ZL), R31(ZH)                                          
Kernel_Task_Status_Get:                                   ;total 1.50uS @8MHz     ( 12 clocks) 
		MOV   R16                , R24                    ;copy                   (  1 clock ) 
 c2a:	08 2f       	mov	r16, r24
		LDI   R30                , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 c2c:	e0 e3       	ldi	r30, 0x30	; 48
		LDI   R31                , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 c2e:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 c30:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 c32:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 c34:	f0 1f       	adc	r31, r16
		LD    R24                , Z                      ;load task status       (  2 clocks) 
 c36:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 c38:	08 95       	ret

00000c3a <Kernel_NTask_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(NTask)                                                          
;unsafe access registers : R24                                                                 
Kernel_NTask_Get:                                         ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                 , KerBase+OFB_NTSK      ;load ntask             (  2 clock ) 
 c3a:	80 91 08 01 	lds	r24, 0x0108
		RET                                               ;return from subroutine (  4 clocks) 
 c3e:	08 95       	ret

00000c40 <Kernel_Task_Prio_Get>:
;arg registers           : R24(TaskID)                                                         
;return registers        : R24(TaskPriority)                                                   
;unsafe access registers : R16, R24, R30(ZL), R31(ZH)                                          
Kernel_Task_Prio_Get:                                     ;total 1.50uS @8MHz     ( 12 clocks) 
		;get priority of the task id, arg (task_id->R24), return R24                           
		MOV   R16                , R24                    ;copy task_id           (  1 clock ) 
 c40:	08 2f       	mov	r16, r24
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 c42:	ea e3       	ldi	r30, 0x3A	; 58
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 c44:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
 c46:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;clear reg              (  1 clock ) 
 c48:	00 e0       	ldi	r16, 0x00	; 0
		ADC   ZH                 , R16                    ;add high byte+carry    (  1 clock ) 
 c4a:	f0 1f       	adc	r31, r16
		LD    R24                , Z                      ;load priority          (  2 clocks) 
 c4c:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 c4e:	08 95       	ret

00000c50 <Kernel_Lowest_Prio_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(LowestPriorityVal)                                              
;unsafe access registers : R24                                                                 
Kernel_Lowest_Prio_Get:                                   ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
 c50:	80 91 09 01 	lds	r24, 0x0109
		RET                                               ;return from subroutine (  4 clocks) 
 c54:	08 95       	ret

00000c56 <Kernel_High_Prio_Task_ID_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(HighstPriorityTaskID)->UserTaskID (Excluding Idle Task)         
;unsafe access registers : R24                                                                 
Kernel_High_Prio_Task_ID_Get:                             ;total 0.88uS @8MHz     (  7 clocks) 
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 c56:	80 91 0a 01 	lds	r24, 0x010A
		DEC   R24                                         ;decrement by 1         (  1 clock ) 
 c5a:	8a 95       	dec	r24
		RET                                               ;return from subroutine (  4 clocks) 
 c5c:	08 95       	ret

00000c5e <Kernel_Abs_High_Prio_Task_ID_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(HighstPriorityTaskID)->AbsoluteTaskID (Including Idle Task)     
;unsafe access registers : R24                                                                 
Kernel_Abs_High_Prio_Task_ID_Get:                         ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 c5e:	80 91 0a 01 	lds	r24, 0x010A
		RET                                               ;return from subroutine (  4 clocks) 
 c62:	08 95       	ret

00000c64 <Kernel_CPU_Usage_Get>:
;arg registers           : None                                                                
;return registers        : R24(CurrentCpuUsage)->In percentage                                 
;unsafe access registers : R24                                                                 
Kernel_CPU_Usage_Get:                                     ;total 0.75uS @8MHz     (  6 clocks) 
		;get cpu usage, return R24                                                             
		LDS   R24                , KerBase+OFB_USAGE      ;load cpu usage         (  2 clocks) 
 c64:	80 91 0d 01 	lds	r24, 0x010D
		RET                                               ;return from subroutine (  4 clocks) 
 c68:	08 95       	ret

00000c6a <Debug_Init>:


;;===================================debug init starting====================================;; 
Debug_Init:                                               ;total 2.38uS @8MHz     ( 19 clocks) 
        ;init registers for UART0 (Arg R25:R24->UBRRH:UBRRL)                                   
		LDI   R16                , (1<<1)                 ;mask U2x               (  1 clock ) 
 c6a:	02 e0       	ldi	r16, 0x02	; 2
		STS   SRUCSR0A           , R16                    ;load val to UCSR0A     (  2 clocks) 
 c6c:	00 93 c0 00 	sts	0x00C0, r16
		MOV   R16                , R25                    ;copy R25->baud rate H  (  1 clock ) 
 c70:	09 2f       	mov	r16, r25
		STS   SRUBRR0H           , R16                    ;load val to UBRR0H     (  2 clocks) 
 c72:	00 93 c5 00 	sts	0x00C5, r16
		MOV   R16                , R24                    ;copy R24->baud rate L  (  1 clock ) 
 c76:	08 2f       	mov	r16, r24
		STS   SRUBRR0L           , R16                    ;load val to UBRR0L     (  2 clocks) 
 c78:	00 93 c4 00 	sts	0x00C4, r16
		LDI   R16                , (1<<1)|(1<<2)          ;config 8 data bit      (  1 clock ) 
 c7c:	06 e0       	ldi	r16, 0x06	; 6
		STS   SRUCSR0C           , R16                    ;load val to UCSR0C     (  2 clocks) 
 c7e:	00 93 c2 00 	sts	0x00C2, r16
		LDI   R16                , (1<<3)                 ;enable tx              (  1 clock ) 
 c82:	08 e0       	ldi	r16, 0x08	; 8
		STS   SRUCSR0B           , R16                    ;load val to UCSR0B     (  2 clocks) 
 c84:	00 93 c1 00 	sts	0x00C1, r16
        RET                                               ;return from subroutine (  4 clocks) 
 c88:	08 95       	ret

00000c8a <Debug_Tx_Byte>:


;;====================================debug tx starting=====================================;; 
Debug_Tx_Byte:                                            ;total 2.00uS+LT @8MHz  ( 16 clocks) 
		;write single byte to data register (Arg R24)                                          
		PUSH  R16                                         ;save reg               (  2 clocks) 
 c8a:	0f 93       	push	r16
		STS   SRUDR0             , R24                    ;load val to UDR0       (  2 clocks) 
 c8c:	80 93 c6 00 	sts	0x00C6, r24

00000c90 <__UDRE0_CLEARED>:
                                                                                               
    __UDRE0_CLEARED:                                      ;undefined loop wrt ck               
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16     (  2 clocks) 
 c90:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x05                   ;skip if UDRE0 is set   (  2 clocks) 
 c94:	05 ff       	sbrs	r16, 5
		RJMP  __UDRE0_CLEARED                             ;wait until UDRE0 is set(  2 clocks) 
 c96:	fc cf       	rjmp	.-8      	; 0xc90 <__UDRE0_CLEARED>
		POP   R16                                         ;restore reg            (  2 clocks) 
 c98:	0f 91       	pop	r16
        RET                                               ;return from subroutine (  4 clocks) 
 c9a:	08 95       	ret

00000c9c <Debug_Tx_Word>:


;;==================================debug tx word starting==================================;; 
Debug_Tx_Word:                                            ;total 2.00uS+LT @8MHz  ( 16 clocks) 
		;write 2 bytes, (Arg R24, R25), Args retained                                          
		PUSH  R24                                         ;save reg               (  2 clocks) 
 c9c:	8f 93       	push	r24
		MOV   R24                , R25                    ;copy reg               (  1 clock ) 
 c9e:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte                               ;send via uart          ( 21 clocks) 
 ca0:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
        POP   R24                                         ;restore reg            (  2 clocks) 
 ca4:	8f 91       	pop	r24
		CALL  Debug_Tx_Byte                               ;send via uart          ( 21 clocks) 
 ca6:	0e 94 45 06 	call	0xc8a	; 0xc8a <Debug_Tx_Byte>
        RET                                               ;return from subroutine (  4 clocks) 
 caa:	08 95       	ret

00000cac <Debug_Tx_Byte_Conf>:


;;================================debug tx confirm starting=================================;; 
Debug_Tx_Byte_Conf:                                       ;total 2.63uS+LT @8MHz  ( 21 clocks) 
        ;write 1 byte, (Arg R24), Args retained                                                
		PUSH  R16                                         ;save reg               (  2 clocks) 
 cac:	0f 93       	push	r16
		STS   SRUDR0             , R24                    ;load val to UDR0,      (  2 clocks) 
 cae:	80 93 c6 00 	sts	0x00C6, r24

00000cb2 <__TXC0_CLEARED>:
    __TXC0_CLEARED:                                                                            
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,    (  2 clocks) 
 cb2:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x06                   ;skip if TXC0 is set,   (  2 clocks) 
 cb6:	06 ff       	sbrs	r16, 6
		RJMP  __TXC0_CLEARED                              ;wait until TXC0 is set (  2 clocks) 
 cb8:	fc cf       	rjmp	.-8      	; 0xcb2 <__TXC0_CLEARED>
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,    (  2 clocks) 
 cba:	00 91 c0 00 	lds	r16, 0x00C0
		ORI   R16                , (1<<6)                 ;mask bit 6,            (  1 clock ) 
 cbe:	00 64       	ori	r16, 0x40	; 64
		STS   SRUCSR0A           , R16                    ;write reg with bit msk (  2 clocks) 
 cc0:	00 93 c0 00 	sts	0x00C0, r16
		POP   R16                                         ;restore reg            (  2 clocks) 
 cc4:	0f 91       	pop	r16
        RET                                               ;return from subroutine (  4 clocks) 
 cc6:	08 95       	ret

00000cc8 <Debug_Tx_Word_Conf>:


;;==============================debug tx word confirm starting==============================;; 
Debug_Tx_Word_Conf:                                       ;total 6.38uS+LT @8MHz  ( 51 clocks) 
        ;write 2 bytes, (Arg R24, R25), Args retained                                          
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 cc8:	0e 94 56 06 	call	0xcac	; 0xcac <Debug_Tx_Byte_Conf>
		PUSH  R24                                         ;save reg               (  2 clocks) 
 ccc:	8f 93       	push	r24
		MOV   R24                , R25                    ;copy R25 to R24        (  1 clock ) 
 cce:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 cd0:	0e 94 56 06 	call	0xcac	; 0xcac <Debug_Tx_Byte_Conf>
		POP   R24                                         ;restore reg            (  2 clocks) 
 cd4:	8f 91       	pop	r24
        RET                                               ;return from subroutine (  4 clocks) 
 cd6:	08 95       	ret

00000cd8 <Debug_Tx_DWord_Conf>:


;;==============================debug tx dword confirm starting=============================;; 
Debug_Tx_DWord_Conf:                                      ;total 12.38uS+LT @8MHz ( 99 clocks) 
        ;write 4 bytes, (Arg R22-R25), Args retained                                           
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks) 
 cd8:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R22                    ;copy R22 to R24          (1 clock ) 
 cdc:	86 2f       	mov	r24, r22
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 cde:	0e 94 56 06 	call	0xcac	; 0xcac <Debug_Tx_Byte_Conf>
		MOV   R24                , R23                    ;copy R23 to R24          (1 clock ) 
 ce2:	87 2f       	mov	r24, r23
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 ce4:	0e 94 56 06 	call	0xcac	; 0xcac <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24              (2 clocks) 
 ce8:	80 91 4a 00 	lds	r24, 0x004A
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 cec:	0e 94 56 06 	call	0xcac	; 0xcac <Debug_Tx_Byte_Conf>
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks) 
 cf0:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R25                    ;copy R22 to R24          (1 clock ) 
 cf4:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 cf6:	0e 94 56 06 	call	0xcac	; 0xcac <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24 val,         (2 clocks) 
 cfa:	80 91 4a 00 	lds	r24, 0x004A
        RET                                               ;return from subroutine,  (4 clocks) 
 cfe:	08 95       	ret

00000d00 <Debug_Tx_From_RAM>:


;;=============================debug tx confirm from ram starting===========================;; 
Debug_Tx_From_RAM:                                        ;total 4.38uS+LT @8MHz  ( 35 clocks) 
        ;print data from RAM address (Arg R24-R25)                                             
		MOV   R16                , R30                    ;copy R30 to R16          (1 clock ) 
 d00:	0e 2f       	mov	r16, r30
		MOV   R17                , R31                    ;copy R31 to R17          (1 clock ) 
 d02:	1f 2f       	mov	r17, r31
		MOV   R18                , R24                    ;copy R24 to R18          (1 clock ) 
 d04:	28 2f       	mov	r18, r24
		MOV   R30                , R24                    ;copy R22 to R24          (1 clock ) 
 d06:	e8 2f       	mov	r30, r24
		MOV   R31                , R25                    ;copy R22 to R24          (1 clock ) 
 d08:	f9 2f       	mov	r31, r25
		LD    R24                , Z                      ;load val to R24          (2 clocks) 
 d0a:	80 81       	ld	r24, Z
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 d0c:	0e 94 56 06 	call	0xcac	; 0xcac <Debug_Tx_Byte_Conf>
		MOV   R30                , R16                    ;copy R16 to R30          (1 clock ) 
 d10:	e0 2f       	mov	r30, r16
		MOV   R31                , R17                    ;copy R17 to R31          (1 clock ) 
 d12:	f1 2f       	mov	r31, r17
		MOV   R24                , R18                    ;copy R18 to R24          (1 clock ) 
 d14:	82 2f       	mov	r24, r18
        RET                                               ;return from subroutine,  (4 clocks) 
 d16:	08 95       	ret

00000d18 <Debug_Tx_RAM_Area>:

;;=============================debug tx confirm ram area starting===========================;; 
Debug_Tx_RAM_Area:                                        ;5.5uS+LT x R22 @8MHz   ( 44 clocks) 
        ;print data from RAM address (arguments R24:R25, R22)                                  
	__DUMP_BYTES:                                                                              
	    CALL  Debug_Tx_From_RAM                           ;send via uart from ram              
 d18:	0e 94 80 06 	call	0xd00	; 0xd00 <Debug_Tx_From_RAM>
		SUBI  R24                , 0x01                   ;decrement from LSByte               
 d1c:	81 50       	subi	r24, 0x01	; 1
        SBCI  R25                , 0x00                   ;decrement if carry                  
 d1e:	90 40       	sbci	r25, 0x00	; 0
		SUBI  R22                , 0x01                   ;decrement                           
 d20:	61 50       	subi	r22, 0x01	; 1
		BRNE  __DUMP_BYTES                                                                     
 d22:	d1 f7       	brne	.-12     	; 0xd18 <Debug_Tx_RAM_Area>
        RET                                               ;return from subroutine,  (4 clocks) 
 d24:	08 95       	ret

00000d26 <_exit>:
 d26:	f8 94       	cli

00000d28 <__stop_program>:
 d28:	ff cf       	rjmp	.-2      	; 0xd28 <__stop_program>
