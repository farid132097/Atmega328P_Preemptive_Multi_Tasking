
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a64  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000546  00800100  00800100  00000ad8  2**0
                  ALLOC
  2 .stab         00000cc0  00000000  00000000  00000ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000006d  00000000  00000000  00001798  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00001805  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000dd  00000000  00000000  00001845  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000002a4  00000000  00000000  00001922  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000f3  00000000  00000000  00001bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000030c  00000000  00000000  00001cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00001fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000142  00000000  00000000  000020a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000236  00000000  00000000  000021ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 17 02 	jmp	0x42e	; 0x42e <__vector_16>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	00 00       	nop
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 00       	nop
  76:	00 00       	nop
  78:	00 00       	nop
  7a:	00 00       	nop
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 00       	nop
  82:	00 00       	nop
  84:	00 00       	nop
  86:	00 00       	nop
  88:	d2 c1       	rjmp	.+932    	; 0x42e <__vector_16>

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61
  96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  9a:	0c 94 30 05 	jmp	0xa60	; 0xa60 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:


int main(void) {
    
	
	Kernel_SysTick_Reg_Init(0x03, 0x82);
  a2:	83 e0       	ldi	r24, 0x03	; 3
  a4:	62 e8       	ldi	r22, 0x82	; 130
  a6:	0e 94 c6 02 	call	0x58c	; 0x58c <Kernel_SysTick_Reg_Init>
	
	Kernel_Task_Create(Tasks_Task0,  0);
  aa:	8a e8       	ldi	r24, 0x8A	; 138
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	60 e0       	ldi	r22, 0x00	; 0
  b0:	0e 94 2d 03 	call	0x65a	; 0x65a <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task9,  0);
  b4:	8b e8       	ldi	r24, 0x8B	; 139
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	0e 94 2d 03 	call	0x65a	; 0x65a <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task2,  0);
  be:	8a e3       	ldi	r24, 0x3A	; 58
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	0e 94 2d 03 	call	0x65a	; 0x65a <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task3,  0);
  c8:	81 e2       	ldi	r24, 0x21	; 33
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	0e 94 2d 03 	call	0x65a	; 0x65a <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task4,  0);
  d2:	88 e0       	ldi	r24, 0x08	; 8
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	0e 94 2d 03 	call	0x65a	; 0x65a <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task5,  0);
  dc:	8f ee       	ldi	r24, 0xEF	; 239
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	0e 94 2d 03 	call	0x65a	; 0x65a <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task6,  0);
  e6:	86 ed       	ldi	r24, 0xD6	; 214
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	0e 94 2d 03 	call	0x65a	; 0x65a <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task7,  0);
  f0:	8d eb       	ldi	r24, 0xBD	; 189
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	0e 94 2d 03 	call	0x65a	; 0x65a <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task8,  0);
  fa:	84 ea       	ldi	r24, 0xA4	; 164
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	0e 94 2d 03 	call	0x65a	; 0x65a <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task1,  0);
 104:	8a e5       	ldi	r24, 0x5A	; 90
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	0e 94 2d 03 	call	0x65a	; 0x65a <Kernel_Task_Create>
	
	Kernel_Start_Tasks();
 10e:	0e 94 81 03 	call	0x702	; 0x702 <Kernel_Start_Tasks>
 112:	ff cf       	rjmp	.-2      	; 0x112 <SRUDR0+0x4c>

00000114 <Tasks_Task0>:
  while( curr < next ){
    curr = Kernel_SysTick_Val_Get();
  }
}

void Tasks_Task0(void){
 114:	ff cf       	rjmp	.-2      	; 0x114 <Tasks_Task0>

00000116 <Tasks_Task9>:
	Kernel_Task_Sleep(42);
	
  }
}

void Tasks_Task9(void){
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
  
  Debug_Init(0);
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 c8 04 	call	0x990	; 0x990 <Debug_Init>
 126:	c4 e0       	ldi	r28, 0x04	; 4
 128:	d1 e0       	ldi	r29, 0x01	; 1
  uint16_t val = 260;
  
  while(1){
    
	Debug_Tx_Byte_Conf(9);
 12a:	89 e0       	ldi	r24, 0x09	; 9
 12c:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <Debug_Tx_Byte_Conf>
	Debug_Tx_Word_Conf(val--);
 130:	8e 01       	movw	r16, r28
 132:	01 50       	subi	r16, 0x01	; 1
 134:	10 40       	sbci	r17, 0x00	; 0
 136:	ce 01       	movw	r24, r28
 138:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <Debug_Tx_Word_Conf>
	Kernel_Task_Sleep(44);
 13c:	8c e2       	ldi	r24, 0x2C	; 44
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 ba 03 	call	0x774	; 0x774 <Kernel_Task_Sleep>
 144:	e8 01       	movw	r28, r16
 146:	f1 cf       	rjmp	.-30     	; 0x12a <Tasks_Task9+0x14>

00000148 <Tasks_Task8>:
	Kernel_Task_Sleep(38);
	
  }
}

void Tasks_Task8(void){
 148:	0f 93       	push	r16
 14a:	1f 93       	push	r17
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
  
  Debug_Init(0);
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 c8 04 	call	0x990	; 0x990 <Debug_Init>
 158:	c0 ef       	ldi	r28, 0xF0	; 240
 15a:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t val = 240;
  
  while(1){
    
	Debug_Tx_Byte_Conf(8);
 15c:	88 e0       	ldi	r24, 0x08	; 8
 15e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <Debug_Tx_Byte_Conf>
	Debug_Tx_Word_Conf(val--);
 162:	8e 01       	movw	r16, r28
 164:	01 50       	subi	r16, 0x01	; 1
 166:	10 40       	sbci	r17, 0x00	; 0
 168:	ce 01       	movw	r24, r28
 16a:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <Debug_Tx_Word_Conf>
	Kernel_Task_Sleep(42);
 16e:	8a e2       	ldi	r24, 0x2A	; 42
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 ba 03 	call	0x774	; 0x774 <Kernel_Task_Sleep>
 176:	e8 01       	movw	r28, r16
 178:	f1 cf       	rjmp	.-30     	; 0x15c <Tasks_Task8+0x14>

0000017a <Tasks_Task7>:
	Kernel_Task_Sleep(31);
	
  }
}

void Tasks_Task7(void){
 17a:	0f 93       	push	r16
 17c:	1f 93       	push	r17
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
  
  Debug_Init(0);
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 c8 04 	call	0x990	; 0x990 <Debug_Init>
 18a:	cc ed       	ldi	r28, 0xDC	; 220
 18c:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t val = 220;
  
  while(1){
    
	Debug_Tx_Byte_Conf(7);
 18e:	87 e0       	ldi	r24, 0x07	; 7
 190:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <Debug_Tx_Byte_Conf>
	Debug_Tx_Word_Conf(val--);
 194:	8e 01       	movw	r16, r28
 196:	01 50       	subi	r16, 0x01	; 1
 198:	10 40       	sbci	r17, 0x00	; 0
 19a:	ce 01       	movw	r24, r28
 19c:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <Debug_Tx_Word_Conf>
	Kernel_Task_Sleep(38);
 1a0:	86 e2       	ldi	r24, 0x26	; 38
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 ba 03 	call	0x774	; 0x774 <Kernel_Task_Sleep>
 1a8:	e8 01       	movw	r28, r16
 1aa:	f1 cf       	rjmp	.-30     	; 0x18e <Tasks_Task7+0x14>

000001ac <Tasks_Task6>:
	Kernel_Task_Sleep(29);
	
  }
}

void Tasks_Task6(void){
 1ac:	0f 93       	push	r16
 1ae:	1f 93       	push	r17
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
  
  Debug_Init(0);
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 c8 04 	call	0x990	; 0x990 <Debug_Init>
 1bc:	c8 ec       	ldi	r28, 0xC8	; 200
 1be:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t val = 200;
  
  while(1){
    
	Debug_Tx_Byte_Conf(6);
 1c0:	86 e0       	ldi	r24, 0x06	; 6
 1c2:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <Debug_Tx_Byte_Conf>
	Debug_Tx_Word_Conf(val--);
 1c6:	8e 01       	movw	r16, r28
 1c8:	01 50       	subi	r16, 0x01	; 1
 1ca:	10 40       	sbci	r17, 0x00	; 0
 1cc:	ce 01       	movw	r24, r28
 1ce:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <Debug_Tx_Word_Conf>
	Kernel_Task_Sleep(31);
 1d2:	8f e1       	ldi	r24, 0x1F	; 31
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 ba 03 	call	0x774	; 0x774 <Kernel_Task_Sleep>
 1da:	e8 01       	movw	r28, r16
 1dc:	f1 cf       	rjmp	.-30     	; 0x1c0 <Tasks_Task6+0x14>

000001de <Tasks_Task5>:
	Kernel_Task_Sleep(26);
	
  }
}

void Tasks_Task5(void){
 1de:	0f 93       	push	r16
 1e0:	1f 93       	push	r17
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
  
  Debug_Init(0);
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 c8 04 	call	0x990	; 0x990 <Debug_Init>
 1ee:	c4 eb       	ldi	r28, 0xB4	; 180
 1f0:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t val = 180;
  
  while(1){
    
    Debug_Tx_Byte_Conf(5);
 1f2:	85 e0       	ldi	r24, 0x05	; 5
 1f4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <Debug_Tx_Byte_Conf>
	Debug_Tx_Word_Conf(val--);
 1f8:	8e 01       	movw	r16, r28
 1fa:	01 50       	subi	r16, 0x01	; 1
 1fc:	10 40       	sbci	r17, 0x00	; 0
 1fe:	ce 01       	movw	r24, r28
 200:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <Debug_Tx_Word_Conf>
	Kernel_Task_Sleep(29);
 204:	8d e1       	ldi	r24, 0x1D	; 29
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 ba 03 	call	0x774	; 0x774 <Kernel_Task_Sleep>
 20c:	e8 01       	movw	r28, r16
 20e:	f1 cf       	rjmp	.-30     	; 0x1f2 <Tasks_Task5+0x14>

00000210 <Tasks_Task4>:
	Kernel_Task_Sleep(24);
	
  }
}

void Tasks_Task4(void){
 210:	0f 93       	push	r16
 212:	1f 93       	push	r17
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
  
  Debug_Init(0);
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 c8 04 	call	0x990	; 0x990 <Debug_Init>
 220:	c0 ea       	ldi	r28, 0xA0	; 160
 222:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t val = 160;
  
  while(1){
    
	Debug_Tx_Byte_Conf(4);
 224:	84 e0       	ldi	r24, 0x04	; 4
 226:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <Debug_Tx_Byte_Conf>
	Debug_Tx_Word_Conf(val--);
 22a:	8e 01       	movw	r16, r28
 22c:	01 50       	subi	r16, 0x01	; 1
 22e:	10 40       	sbci	r17, 0x00	; 0
 230:	ce 01       	movw	r24, r28
 232:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <Debug_Tx_Word_Conf>
	Kernel_Task_Sleep(26);
 236:	8a e1       	ldi	r24, 0x1A	; 26
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 ba 03 	call	0x774	; 0x774 <Kernel_Task_Sleep>
 23e:	e8 01       	movw	r28, r16
 240:	f1 cf       	rjmp	.-30     	; 0x224 <Tasks_Task4+0x14>

00000242 <Tasks_Task3>:
	
	
  }
}

void Tasks_Task3(void){
 242:	0f 93       	push	r16
 244:	1f 93       	push	r17
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
  
  Debug_Init(0);
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 c8 04 	call	0x990	; 0x990 <Debug_Init>
 252:	cc e8       	ldi	r28, 0x8C	; 140
 254:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t val = 140;
  
  while(1){
    
	Debug_Tx_Byte_Conf(3);
 256:	83 e0       	ldi	r24, 0x03	; 3
 258:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <Debug_Tx_Byte_Conf>
	Debug_Tx_Word_Conf(val--);
 25c:	8e 01       	movw	r16, r28
 25e:	01 50       	subi	r16, 0x01	; 1
 260:	10 40       	sbci	r17, 0x00	; 0
 262:	ce 01       	movw	r24, r28
 264:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <Debug_Tx_Word_Conf>
	Kernel_Task_Sleep(24);
 268:	88 e1       	ldi	r24, 0x18	; 24
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 ba 03 	call	0x774	; 0x774 <Kernel_Task_Sleep>
 270:	e8 01       	movw	r28, r16
 272:	f1 cf       	rjmp	.-30     	; 0x256 <Tasks_Task3+0x14>

00000274 <Tasks_Task2>:
	
	
  }
}

void Tasks_Task2(void){
 274:	ff 92       	push	r15
 276:	0f 93       	push	r16
 278:	1f 93       	push	r17
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
  
  Debug_Init(0);
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 c8 04 	call	0x990	; 0x990 <Debug_Init>
  DDRD |= (1<<6);
 286:	56 9a       	sbi	0x0a, 6	; 10
 288:	c8 e7       	ldi	r28, 0x78	; 120
 28a:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t val = 120;
  
  while(1){
    
    PORTD ^= (1<<6);
 28c:	80 e4       	ldi	r24, 0x40	; 64
 28e:	f8 2e       	mov	r15, r24
 290:	8b b1       	in	r24, 0x0b	; 11
 292:	8f 25       	eor	r24, r15
 294:	8b b9       	out	0x0b, r24	; 11
	Debug_Tx_Byte_Conf(2);
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <Debug_Tx_Byte_Conf>
    Debug_Tx_Word_Conf(val--);
 29c:	8e 01       	movw	r16, r28
 29e:	01 50       	subi	r16, 0x01	; 1
 2a0:	10 40       	sbci	r17, 0x00	; 0
 2a2:	ce 01       	movw	r24, r28
 2a4:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <Debug_Tx_Word_Conf>
	Kernel_Task_Sleep(17);
 2a8:	81 e1       	ldi	r24, 0x11	; 17
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 ba 03 	call	0x774	; 0x774 <Kernel_Task_Sleep>
 2b0:	e8 01       	movw	r28, r16
 2b2:	ee cf       	rjmp	.-36     	; 0x290 <Tasks_Task2+0x1c>

000002b4 <Tasks_Task1>:
    
	
  }
}

void Tasks_Task1(void){
 2b4:	ff 92       	push	r15
 2b6:	0f 93       	push	r16
 2b8:	1f 93       	push	r17
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
  
  Debug_Init(0);
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 c8 04 	call	0x990	; 0x990 <Debug_Init>
  DDRD |= (1<<5);
 2c6:	55 9a       	sbi	0x0a, 5	; 10
 2c8:	c4 e6       	ldi	r28, 0x64	; 100
 2ca:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t val = 100;
  
  while(1){
    
    PORTD ^= (1<<5);
 2cc:	90 e2       	ldi	r25, 0x20	; 32
 2ce:	f9 2e       	mov	r15, r25
 2d0:	8b b1       	in	r24, 0x0b	; 11
 2d2:	8f 25       	eor	r24, r15
 2d4:	8b b9       	out	0x0b, r24	; 11
	Debug_Tx_Byte_Conf(1);
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <Debug_Tx_Byte_Conf>
	Debug_Tx_Word_Conf(val--);
 2dc:	8e 01       	movw	r16, r28
 2de:	01 50       	subi	r16, 0x01	; 1
 2e0:	10 40       	sbci	r17, 0x00	; 0
 2e2:	ce 01       	movw	r24, r28
 2e4:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <Debug_Tx_Word_Conf>
	Kernel_Task_Sleep(10);
 2e8:	8a e0       	ldi	r24, 0x0A	; 10
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 ba 03 	call	0x774	; 0x774 <Kernel_Task_Sleep>
 2f0:	e8 01       	movw	r28, r16
 2f2:	ee cf       	rjmp	.-36     	; 0x2d0 <Tasks_Task1+0x1c>

000002f4 <Tasks_Delay>:
#include "tasks.h"
#include "debug.h"



void Tasks_Delay(uint16_t val){
 2f4:	5f 92       	push	r5
 2f6:	6f 92       	push	r6
 2f8:	7f 92       	push	r7
 2fa:	8f 92       	push	r8
 2fc:	9f 92       	push	r9
 2fe:	af 92       	push	r10
 300:	bf 92       	push	r11
 302:	cf 92       	push	r12
 304:	df 92       	push	r13
 306:	ef 92       	push	r14
 308:	ff 92       	push	r15
 30a:	0f 93       	push	r16
 30c:	1f 93       	push	r17
 30e:	8c 01       	movw	r16, r24
  uint64_t curr = 0, next = 0;
  curr = Kernel_SysTick_Val_Get();
 310:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Kernel_SysTick_Val_Get>
 314:	62 2e       	mov	r6, r18
 316:	83 2e       	mov	r8, r19
 318:	c4 2e       	mov	r12, r20
 31a:	e5 2e       	mov	r14, r21
 31c:	f6 2e       	mov	r15, r22
 31e:	b7 2f       	mov	r27, r23
  next = curr + val;
 320:	20 e0       	ldi	r18, 0x00	; 0
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	40 e0       	ldi	r20, 0x00	; 0
 326:	50 e0       	ldi	r21, 0x00	; 0
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	50 2e       	mov	r5, r16
 32e:	56 0c       	add	r5, r6
 330:	a1 e0       	ldi	r26, 0x01	; 1
 332:	50 16       	cp	r5, r16
 334:	08 f0       	brcs	.+2      	; 0x338 <Tasks_Delay+0x44>
 336:	a0 e0       	ldi	r26, 0x00	; 0
 338:	e1 2f       	mov	r30, r17
 33a:	e8 0d       	add	r30, r8
 33c:	f1 e0       	ldi	r31, 0x01	; 1
 33e:	e1 17       	cp	r30, r17
 340:	08 f0       	brcs	.+2      	; 0x344 <Tasks_Delay+0x50>
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	7a 2e       	mov	r7, r26
 346:	7e 0e       	add	r7, r30
 348:	a1 e0       	ldi	r26, 0x01	; 1
 34a:	7e 16       	cp	r7, r30
 34c:	08 f0       	brcs	.+2      	; 0x350 <Tasks_Delay+0x5c>
 34e:	a0 e0       	ldi	r26, 0x00	; 0
 350:	fa 2b       	or	r31, r26
 352:	e1 e0       	ldi	r30, 0x01	; 1
 354:	c2 16       	cp	r12, r18
 356:	08 f0       	brcs	.+2      	; 0x35a <Tasks_Delay+0x66>
 358:	e0 e0       	ldi	r30, 0x00	; 0
 35a:	9f 2e       	mov	r9, r31
 35c:	9c 0c       	add	r9, r12
 35e:	f1 e0       	ldi	r31, 0x01	; 1
 360:	9c 14       	cp	r9, r12
 362:	08 f0       	brcs	.+2      	; 0x366 <Tasks_Delay+0x72>
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	ef 2b       	or	r30, r31
 368:	f1 e0       	ldi	r31, 0x01	; 1
 36a:	e3 16       	cp	r14, r19
 36c:	08 f0       	brcs	.+2      	; 0x370 <Tasks_Delay+0x7c>
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	ae 2e       	mov	r10, r30
 372:	ae 0c       	add	r10, r14
 374:	e1 e0       	ldi	r30, 0x01	; 1
 376:	ae 14       	cp	r10, r14
 378:	08 f0       	brcs	.+2      	; 0x37c <Tasks_Delay+0x88>
 37a:	e0 e0       	ldi	r30, 0x00	; 0
 37c:	fe 2b       	or	r31, r30
 37e:	e1 e0       	ldi	r30, 0x01	; 1
 380:	f4 16       	cp	r15, r20
 382:	08 f0       	brcs	.+2      	; 0x386 <Tasks_Delay+0x92>
 384:	e0 e0       	ldi	r30, 0x00	; 0
 386:	bf 2e       	mov	r11, r31
 388:	bf 0c       	add	r11, r15
 38a:	f1 e0       	ldi	r31, 0x01	; 1
 38c:	bf 14       	cp	r11, r15
 38e:	08 f0       	brcs	.+2      	; 0x392 <Tasks_Delay+0x9e>
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	ef 2b       	or	r30, r31
 394:	f1 e0       	ldi	r31, 0x01	; 1
 396:	b5 17       	cp	r27, r21
 398:	08 f0       	brcs	.+2      	; 0x39c <Tasks_Delay+0xa8>
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	de 2e       	mov	r13, r30
 39e:	db 0e       	add	r13, r27
 3a0:	e1 e0       	ldi	r30, 0x01	; 1
 3a2:	db 16       	cp	r13, r27
 3a4:	08 f0       	brcs	.+2      	; 0x3a8 <Tasks_Delay+0xb4>
 3a6:	e0 e0       	ldi	r30, 0x00	; 0
 3a8:	fe 2b       	or	r31, r30
 3aa:	a1 e0       	ldi	r26, 0x01	; 1
 3ac:	86 17       	cp	r24, r22
 3ae:	08 f0       	brcs	.+2      	; 0x3b2 <Tasks_Delay+0xbe>
 3b0:	a0 e0       	ldi	r26, 0x00	; 0
 3b2:	0f 2f       	mov	r16, r31
 3b4:	08 0f       	add	r16, r24
 3b6:	e1 e0       	ldi	r30, 0x01	; 1
 3b8:	08 17       	cp	r16, r24
 3ba:	08 f0       	brcs	.+2      	; 0x3be <Tasks_Delay+0xca>
 3bc:	e0 e0       	ldi	r30, 0x00	; 0
 3be:	1a 2f       	mov	r17, r26
 3c0:	1e 2b       	or	r17, r30
 3c2:	19 0f       	add	r17, r25
 3c4:	08 c0       	rjmp	.+16     	; 0x3d6 <Tasks_Delay+0xe2>
  while( curr < next ){
    curr = Kernel_SysTick_Val_Get();
 3c6:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Kernel_SysTick_Val_Get>
 3ca:	62 2e       	mov	r6, r18
 3cc:	83 2e       	mov	r8, r19
 3ce:	c4 2e       	mov	r12, r20
 3d0:	e5 2e       	mov	r14, r21
 3d2:	f6 2e       	mov	r15, r22
 3d4:	b7 2f       	mov	r27, r23

void Tasks_Delay(uint16_t val){
  uint64_t curr = 0, next = 0;
  curr = Kernel_SysTick_Val_Get();
  next = curr + val;
  while( curr < next ){
 3d6:	91 17       	cp	r25, r17
 3d8:	b0 f3       	brcs	.-20     	; 0x3c6 <Tasks_Delay+0xd2>
 3da:	19 17       	cp	r17, r25
 3dc:	d1 f4       	brne	.+52     	; 0x412 <KER_TR+0x2a>
 3de:	80 17       	cp	r24, r16
 3e0:	90 f3       	brcs	.-28     	; 0x3c6 <Tasks_Delay+0xd2>
 3e2:	08 17       	cp	r16, r24
 3e4:	b1 f4       	brne	.+44     	; 0x412 <KER_TR+0x2a>
 3e6:	bd 15       	cp	r27, r13
 3e8:	70 f3       	brcs	.-36     	; 0x3c6 <Tasks_Delay+0xd2>
 3ea:	db 16       	cp	r13, r27
 3ec:	91 f4       	brne	.+36     	; 0x412 <KER_TR+0x2a>
 3ee:	fb 14       	cp	r15, r11
 3f0:	50 f3       	brcs	.-44     	; 0x3c6 <Tasks_Delay+0xd2>
 3f2:	bf 14       	cp	r11, r15
 3f4:	71 f4       	brne	.+28     	; 0x412 <KER_TR+0x2a>
 3f6:	ea 14       	cp	r14, r10
 3f8:	30 f3       	brcs	.-52     	; 0x3c6 <Tasks_Delay+0xd2>
 3fa:	ae 14       	cp	r10, r14
 3fc:	51 f4       	brne	.+20     	; 0x412 <KER_TR+0x2a>
 3fe:	c9 14       	cp	r12, r9
 400:	10 f3       	brcs	.-60     	; 0x3c6 <Tasks_Delay+0xd2>
 402:	9c 14       	cp	r9, r12
 404:	31 f4       	brne	.+12     	; 0x412 <KER_TR+0x2a>
 406:	87 14       	cp	r8, r7
 408:	f0 f2       	brcs	.-68     	; 0x3c6 <Tasks_Delay+0xd2>
 40a:	78 14       	cp	r7, r8
 40c:	11 f4       	brne	.+4      	; 0x412 <KER_TR+0x2a>
 40e:	65 14       	cp	r6, r5
 410:	d0 f2       	brcs	.-76     	; 0x3c6 <Tasks_Delay+0xd2>
    curr = Kernel_SysTick_Val_Get();
  }
}
 412:	1f 91       	pop	r17
 414:	0f 91       	pop	r16
 416:	ff 90       	pop	r15
 418:	ef 90       	pop	r14
 41a:	df 90       	pop	r13
 41c:	cf 90       	pop	r12
 41e:	bf 90       	pop	r11
 420:	af 90       	pop	r10
 422:	9f 90       	pop	r9
 424:	8f 90       	pop	r8
 426:	7f 90       	pop	r7
 428:	6f 90       	pop	r6
 42a:	5f 90       	pop	r5
 42c:	08 95       	ret

0000042e <__vector_16>:


;;=================================ISR execution starting===================================;; 
.global  __vector_16
    __vector_16:                                          ;total 26.13uS @8MHz    (211 clocks) 
	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 42e:	29 9a       	sbi	0x05, 1	; 5
        KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 430:	0f 92       	push	r0
 432:	0f b6       	in	r0, 0x3f	; 63
 434:	0f 92       	push	r0
 436:	1f 92       	push	r1
 438:	11 24       	eor	r1, r1
 43a:	2f 92       	push	r2
 43c:	3f 92       	push	r3
 43e:	4f 92       	push	r4
 440:	5f 92       	push	r5
 442:	6f 92       	push	r6
 444:	7f 92       	push	r7
 446:	8f 92       	push	r8
 448:	9f 92       	push	r9
 44a:	af 92       	push	r10
 44c:	bf 92       	push	r11
 44e:	cf 92       	push	r12
 450:	df 92       	push	r13
 452:	ef 92       	push	r14
 454:	ff 92       	push	r15
 456:	0f 93       	push	r16
 458:	1f 93       	push	r17
 45a:	2f 93       	push	r18
 45c:	3f 93       	push	r19
 45e:	4f 93       	push	r20
 460:	5f 93       	push	r21
 462:	6f 93       	push	r22
 464:	7f 93       	push	r23
 466:	8f 93       	push	r24
 468:	9f 93       	push	r25
 46a:	af 93       	push	r26
 46c:	bf 93       	push	r27
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	ef 93       	push	r30
 474:	ff 93       	push	r31
		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 476:	00 91 06 01 	lds	r16, 0x0106
 47a:	00 93 46 00 	sts	0x0046, r16
		KER_TICK_INCREMENT                                ;increment tick counter ( 27 clocks) 
 47e:	00 91 00 01 	lds	r16, 0x0100
 482:	03 95       	inc	r16
 484:	00 93 00 01 	sts	0x0100, r16
 488:	00 91 01 01 	lds	r16, 0x0101
 48c:	01 1d       	adc	r16, r1
 48e:	00 93 01 01 	sts	0x0101, r16
 492:	00 91 02 01 	lds	r16, 0x0102
 496:	01 1d       	adc	r16, r1
 498:	00 93 02 01 	sts	0x0102, r16
 49c:	00 91 03 01 	lds	r16, 0x0103
 4a0:	01 1d       	adc	r16, r1
 4a2:	00 93 03 01 	sts	0x0103, r16
 4a6:	00 91 04 01 	lds	r16, 0x0104
 4aa:	01 1d       	adc	r16, r1
 4ac:	00 93 04 01 	sts	0x0104, r16
        KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 4b0:	0d b7       	in	r16, 0x3d	; 61
 4b2:	1e b7       	in	r17, 0x3e	; 62
 4b4:	20 91 07 01 	lds	r18, 0x0107
 4b8:	22 0f       	add	r18, r18
 4ba:	ea e0       	ldi	r30, 0x0A	; 10
 4bc:	f1 e0       	ldi	r31, 0x01	; 1
 4be:	e2 0f       	add	r30, r18
 4c0:	f1 1d       	adc	r31, r1
 4c2:	01 93       	st	Z+, r16
 4c4:	10 83       	st	Z, r17
		
		KER_DEC_SLP_TIMEOUT                               ;decrement of sleep time
 4c6:	00 91 08 01 	lds	r16, 0x0108

000004ca <_UPDATE_TASK_READY5>:
 4ca:	0a 95       	dec	r16
 4cc:	20 2f       	mov	r18, r16
 4ce:	22 0f       	add	r18, r18
 4d0:	e2 e3       	ldi	r30, 0x32	; 50
 4d2:	f1 e0       	ldi	r31, 0x01	; 1
 4d4:	e2 0f       	add	r30, r18
 4d6:	f1 1d       	adc	r31, r1
 4d8:	a1 91       	ld	r26, Z+
 4da:	b0 81       	ld	r27, Z
 4dc:	2a 2f       	mov	r18, r26
 4de:	2b 2b       	or	r18, r27
 4e0:	41 f0       	breq	.+16     	; 0x4f2 <_VAL_NULL5>
 4e2:	11 97       	sbiw	r26, 0x01	; 1
 4e4:	b0 83       	st	Z, r27
 4e6:	a2 93       	st	-Z, r26
 4e8:	2a 2f       	mov	r18, r26
 4ea:	2b 2b       	or	r18, r27
 4ec:	11 f0       	breq	.+4      	; 0x4f2 <_VAL_NULL5>
 4ee:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <_LOOP5>

000004f2 <_VAL_NULL5>:
 4f2:	ee e1       	ldi	r30, 0x1E	; 30
 4f4:	f1 e0       	ldi	r31, 0x01	; 1
 4f6:	e0 0f       	add	r30, r16
 4f8:	f1 1d       	adc	r31, r1
 4fa:	21 e0       	ldi	r18, 0x01	; 1
 4fc:	20 83       	st	Z, r18

000004fe <_LOOP5>:
 4fe:	00 30       	cpi	r16, 0x00	; 0
 500:	21 f7       	brne	.-56     	; 0x4ca <_UPDATE_TASK_READY5>
		KER_RUN_SCHEDULER                                 ;run task if ready
 502:	00 91 08 01 	lds	r16, 0x0108

00000506 <_CH_TASK_READY6>:
 506:	0a 95       	dec	r16
 508:	10 2f       	mov	r17, r16
 50a:	ee e1       	ldi	r30, 0x1E	; 30
 50c:	f1 e0       	ldi	r31, 0x01	; 1
 50e:	e1 0f       	add	r30, r17
 510:	f1 1d       	adc	r31, r1
 512:	10 81       	ld	r17, Z
 514:	11 30       	cpi	r17, 0x01	; 1
 516:	21 f0       	breq	.+8      	; 0x520 <_NEXT_TASK_FOUND6>

00000518 <_LOOP_CNT6>:
 518:	00 30       	cpi	r16, 0x00	; 0
 51a:	a9 f7       	brne	.-22     	; 0x506 <_CH_TASK_READY6>
 51c:	0c 94 94 02 	jmp	0x528	; 0x528 <_IDLE_TASK6>

00000520 <_NEXT_TASK_FOUND6>:
 520:	00 93 07 01 	sts	0x0107, r16
 524:	0c 94 97 02 	jmp	0x52e	; 0x52e <_EXIT6>

00000528 <_IDLE_TASK6>:
 528:	00 e0       	ldi	r16, 0x00	; 0
 52a:	00 93 07 01 	sts	0x0107, r16

0000052e <_EXIT6>:
	    
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 52e:	00 91 07 01 	lds	r16, 0x0107
 532:	00 0f       	add	r16, r16
 534:	ea e0       	ldi	r30, 0x0A	; 10
 536:	f1 e0       	ldi	r31, 0x01	; 1
 538:	e0 0f       	add	r30, r16
 53a:	f1 1d       	adc	r31, r1
 53c:	01 91       	ld	r16, Z+
 53e:	10 81       	ld	r17, Z
 540:	0d bf       	out	0x3d, r16	; 61
 542:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 544:	ff 91       	pop	r31
 546:	ef 91       	pop	r30
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	bf 91       	pop	r27
 54e:	af 91       	pop	r26
 550:	9f 91       	pop	r25
 552:	8f 91       	pop	r24
 554:	7f 91       	pop	r23
 556:	6f 91       	pop	r22
 558:	5f 91       	pop	r21
 55a:	4f 91       	pop	r20
 55c:	3f 91       	pop	r19
 55e:	2f 91       	pop	r18
 560:	1f 91       	pop	r17
 562:	0f 91       	pop	r16
 564:	ff 90       	pop	r15
 566:	ef 90       	pop	r14
 568:	df 90       	pop	r13
 56a:	cf 90       	pop	r12
 56c:	bf 90       	pop	r11
 56e:	af 90       	pop	r10
 570:	9f 90       	pop	r9
 572:	8f 90       	pop	r8
 574:	7f 90       	pop	r7
 576:	6f 90       	pop	r6
 578:	5f 90       	pop	r5
 57a:	4f 90       	pop	r4
 57c:	3f 90       	pop	r3
 57e:	2f 90       	pop	r2
 580:	1f 90       	pop	r1
 582:	0f 90       	pop	r0
 584:	0f be       	out	0x3f, r0	; 63
 586:	0f 90       	pop	r0
	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 588:	29 98       	cbi	0x05, 1	; 5
		RETI                                              ;return from interrupt  (  4 clocks) 
 58a:	18 95       	reti

0000058c <Kernel_SysTick_Reg_Init>:



;;================================SysTick reg init starting=================================;; 
Kernel_SysTick_Reg_Init:                                  ;total operation        ( 55 clocks) 
        CLI                                               ;disable global int,    (  1 clock ) 
 58c:	f8 94       	cli
		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 58e:	21 9a       	sbi	0x04, 1	; 4
 590:	29 98       	cbi	0x05, 1	; 5
		LDI   R16                , 0x00                   ;set 0x00 to R16,       (  1 clock ) 
 592:	00 e0       	ldi	r16, 0x00	; 0
		
		;clear tick counter
		STS   KerBase+OFF_TICK0  , R16                    ;clear  KerBase[0]      (  2 clocks) 
 594:	00 93 00 01 	sts	0x0100, r16
		STS   KerBase+OFF_TICK1  , R16                    ;clear  KerBase[1]      (  2 clocks) 
 598:	00 93 01 01 	sts	0x0101, r16
		STS   KerBase+OFF_TICK2  , R16                    ;clear  KerBase[2]      (  2 clocks) 
 59c:	00 93 02 01 	sts	0x0102, r16
		STS   KerBase+OFF_TICK3  , R16                    ;clear  KerBase[3]      (  2 clocks) 
 5a0:	00 93 03 01 	sts	0x0103, r16
		STS   KerBase+OFF_TICK4  , R16                    ;clear  KerBase[4]      (  2 clocks) 
 5a4:	00 93 04 01 	sts	0x0104, r16
		
		;clear prescaler
		STS   KerBase+OFF_PRS    , R16                    ;clear  KerBase[5]      (  2 clocks) 
 5a8:	00 93 05 01 	sts	0x0105, r16
		
		;clear reload value
		STS   KerBase+OFF_RLD    , R16                    ;clear  KerBase[6]      (  2 clocks) 
 5ac:	00 93 06 01 	sts	0x0106, r16
		
		;clear task id
		STS   KerBase+OFF_TID    , R16                    ;clear  KerBase[7]      (  2 clocks) 
 5b0:	00 93 07 01 	sts	0x0107, r16
		
		;clear ntask
		STS   KerBase+OFF_NTSK   , R16                    ;clear  KerBase[8]      (  2 clocks) 
 5b4:	00 93 08 01 	sts	0x0108, r16
		
		;reserved, not used
        STS   KerBase+0x09       , R16                    ;clear  KerBase[9]      (  2 clocks) 
 5b8:	00 93 09 01 	sts	0x0109, r16
		
		;clear all timer registers
		STS   SRTCCR0A           , R16                    ;clear TCCR0A           (  2 clocks) 
 5bc:	00 93 44 00 	sts	0x0044, r16
		STS   SRTCCR0B           , R16                    ;clear TCCR0B           (  2 clocks) 
 5c0:	00 93 45 00 	sts	0x0045, r16
		STS   SRTIMSK0           , R16                    ;clear TIMSK0           (  2 clocks) 
 5c4:	00 93 6e 00 	sts	0x006E, r16
		STS   SRTIFR0            , R16                    ;clear TIFR0            (  2 clocks) 
 5c8:	00 93 35 00 	sts	0x0035, r16
		STS   SROCR0A            , R16                    ;clear OCR0A            (  2 clocks) 
 5cc:	00 93 47 00 	sts	0x0047, r16
		STS   SROCR0B            , R16                    ;clear OCR0B            (  2 clocks) 
 5d0:	00 93 48 00 	sts	0x0048, r16
		STS   SRTCNT0            , R16                    ;clear TCNT0            (  2 clocks) 
 5d4:	00 93 46 00 	sts	0x0046, r16
		
		;store prescaler value
		MOV   R16                , R24                    ;prescaler from arg1    (  1 clock ) 
 5d8:	08 2f       	mov	r16, r24
		STS   KerBase+OFF_PRS    , R16                    ;KerBase[5] prescaler   (  2 clocks) 
 5da:	00 93 05 01 	sts	0x0105, r16
        
		;store reload value
		MOV   R16                , R22                    ;reload val from arg2   (  1 clock ) 
 5de:	06 2f       	mov	r16, r22
		STS   KerBase+OFF_RLD    , R16                    ;KerBase[6] reload val  (  2 clocks) 
 5e0:	00 93 06 01 	sts	0x0106, r16
		
		RET                                               ;return from subroutine (  4 clocks) 
 5e4:	08 95       	ret

000005e6 <Kernel_SysTick_Val_Get>:

;;===============================SysTick value get starting=================================;; 
Kernel_SysTick_Val_Get:                                   ;total operation        ( 42 clocks) 
    _READ_AGAIN:
	    ;first read & store to actual return registers
		LDS   R18		         , KerBase+OFF_TICK0      ;byte0 (LSB)            (  2 clocks) 
 5e6:	20 91 00 01 	lds	r18, 0x0100
		LDS   R19		         , KerBase+OFF_TICK1      ;byte1                  (  2 clocks) 
 5ea:	30 91 01 01 	lds	r19, 0x0101
		LDS   R20		         , KerBase+OFF_TICK2      ;byte2                  (  2 clocks) 
 5ee:	40 91 02 01 	lds	r20, 0x0102
		LDS   R21		         , KerBase+OFF_TICK3      ;byte3                  (  2 clocks) 
 5f2:	50 91 03 01 	lds	r21, 0x0103
		LDS   R22		         , KerBase+OFF_TICK4      ;byte4 (MSB)            (  2 clocks) 
 5f6:	60 91 04 01 	lds	r22, 0x0104
		
		;second read to scratch registers
		LDS   R26		         , KerBase+OFF_TICK0      ;byte0 (LSB)            (  2 clocks) 
 5fa:	a0 91 00 01 	lds	r26, 0x0100
		LDS   R27		         , KerBase+OFF_TICK1      ;byte1                  (  2 clocks) 
 5fe:	b0 91 01 01 	lds	r27, 0x0101
		LDS   R30		         , KerBase+OFF_TICK2      ;byte2                  (  2 clocks) 
 602:	e0 91 02 01 	lds	r30, 0x0102
		LDS   R31		         , KerBase+OFF_TICK3      ;byte3                  (  2 clocks) 
 606:	f0 91 03 01 	lds	r31, 0x0103
		LDS   R0		         , KerBase+OFF_TICK4      ;byte4 (MSB)            (  2 clocks) 
 60a:	00 90 04 01 	lds	r0, 0x0104
		
		;compare all pairs
		CP    R18                , R26                    ;compare                (  1 clock ) 
 60e:	2a 17       	cp	r18, r26
		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 610:	51 f7       	brne	.-44     	; 0x5e6 <Kernel_SysTick_Val_Get>
		CP    R19                , R27                    ;compare                (  1 clock ) 
 612:	3b 17       	cp	r19, r27
		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 614:	41 f7       	brne	.-48     	; 0x5e6 <Kernel_SysTick_Val_Get>
		CP    R20                , R30                    ;compare                (  1 clock ) 
 616:	4e 17       	cp	r20, r30
		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 618:	31 f7       	brne	.-52     	; 0x5e6 <Kernel_SysTick_Val_Get>
		CP    R21                , R31                    ;compare                (  1 clock ) 
 61a:	5f 17       	cp	r21, r31
		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 61c:	21 f7       	brne	.-56     	; 0x5e6 <Kernel_SysTick_Val_Get>
		CP    R22                , R0                     ;compare                (  1 clock ) 
 61e:	60 15       	cp	r22, r0
		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 620:	11 f7       	brne	.-60     	; 0x5e6 <Kernel_SysTick_Val_Get>
		
		;only 5 bytes data are taken, force clear 3 high bytes (64bit return R25:R18)
		LDI   R23		         , 0x00                   ;byte5 -> R23           (  1 clocks) 
 622:	70 e0       	ldi	r23, 0x00	; 0
		LDI   R24		         , 0x00                   ;byte6 -> R24           (  1 clocks) 
 624:	80 e0       	ldi	r24, 0x00	; 0
		LDI   R25		         , 0x00                   ;byte7 -> R25           (  1 clocks) 
 626:	90 e0       	ldi	r25, 0x00	; 0
		RET                                               ;return from subroutine (  4 clocks) 
 628:	08 95       	ret

0000062a <Kernel_SysTick_Val_Safely_Get>:



;;============================SysTick value safely get starting=============================;; 
Kernel_SysTick_Val_Safely_Get:                            ;total operation        ( 20 clocks) 
        IN    R2                 , IOSREG                 ;save SREG              (  1 clock ) 
 62a:	2f b6       	in	r2, 0x3f	; 63
        CLI                                               ;disable interrupts     (  1 clock ) 
 62c:	f8 94       	cli
		LDS   R18		         , KerBase+OFF_TICK0      ;byte0 -> R18 (LSB)     (  2 clocks) 
 62e:	20 91 00 01 	lds	r18, 0x0100
		LDS   R19		         , KerBase+OFF_TICK1      ;byte1 -> R19           (  2 clocks) 
 632:	30 91 01 01 	lds	r19, 0x0101
		LDS   R20		         , KerBase+OFF_TICK2      ;byte2 -> R20           (  2 clocks) 
 636:	40 91 02 01 	lds	r20, 0x0102
		LDS   R21		         , KerBase+OFF_TICK3      ;byte3 -> R21           (  2 clocks) 
 63a:	50 91 03 01 	lds	r21, 0x0103
		LDS   R22		         , KerBase+OFF_TICK4      ;byte4 -> R22           (  2 clocks) 
 63e:	60 91 04 01 	lds	r22, 0x0104
		LDI   R23		         , 0x00                   ;byte5 -> R23           (  1 clocks) 
 642:	70 e0       	ldi	r23, 0x00	; 0
		LDI   R24		         , 0x00                   ;byte6 -> R24           (  1 clocks) 
 644:	80 e0       	ldi	r24, 0x00	; 0
		LDI   R25		         , 0x00                   ;byte7 -> R25 (MSB)     (  1 clocks) 
 646:	90 e0       	ldi	r25, 0x00	; 0
		OUT   IOSREG             , R2          		      ;restore SREG           (  1 clock ) 
 648:	2f be       	out	0x3f, r2	; 63
		RET                                               ;return from subroutine (  4 clocks) 
 64a:	08 95       	ret

0000064c <Kernel_Interrupt_Sts_Get>:



;;==============================interrupt status get starting===============================;; 
Kernel_Interrupt_Sts_Get:                                 ;total operation        ( 10 clocks) 
        LDI   R24		         , 0x00                   ;clear R24              (  1 clock ) 
 64c:	80 e0       	ldi	r24, 0x00	; 0
        IN    R16		         , IOSREG                 ;save SREG in R16       (  1 clock ) 
 64e:	0f b7       	in	r16, 0x3f	; 63
		SBRC  R16		         , 0x07                   ;check I flag->bit7     (  3 clocks) 
 650:	07 fd       	sbrc	r16, 7
		LDI   R24		         , 0x01                   ;set R24 to 1           (  1 clock ) 
 652:	81 e0       	ldi	r24, 0x01	; 1
		RET                                               ;return from subroutine (  4 clocks) 
 654:	08 95       	ret

00000656 <Kernel_Init>:

;;==================================kernel init starting====================================;; 
Kernel_Init:
        ;func_ptr->R25:R24, task_id->R22, task_priority->R20
        ;save main SP & Z pointer
        IN    R2                 , IOSPL                  ;save SPL of MSP        (  1 clock ) 
 656:	2d b6       	in	r2, 0x3d	; 61
		
		RET                                               ;return from subroutine (  4 clocks) 
 658:	08 95       	ret

0000065a <Kernel_Task_Create>:

;;===============================kernel task create starting================================;; 
Kernel_Task_Create:
        ;func_ptr->R25:R24, task_priority->R22
        ;save main SP & Z pointer
        IN    R2                 , IOSPL                  ;save SPL of MSP        (  1 clock ) 
 65a:	2d b6       	in	r2, 0x3d	; 61
        IN    R3                 , IOSPH                  ;save SPH of MSP        (  1 clock ) 
 65c:	3e b6       	in	r3, 0x3e	; 62
        MOV   R4                 , R30                    ;save ZPL               (  2 clocks) 
 65e:	4e 2e       	mov	r4, r30
		MOV   R5                 , R31                    ;save ZPH               (  2 clocks) 
 660:	5f 2e       	mov	r5, r31
		;ADC   R31                , R16                    ;add offset to array    (  1 clock )
		;LDI   R16                , TASK_READY             ;set TASK_READY         (  1 clock ) 
		;ST    Z                  , R16                    ;update flag            (  2 clocks)
		
		;set priority to KerSchPr
		LDS   R16                , KerBase+OFF_TID        ;load task_id           (  2 clocks) 
 662:	00 91 07 01 	lds	r16, 0x0107
		LDI   R30                , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 666:	e8 e2       	ldi	r30, 0x28	; 40
		LDI   R31                , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 668:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 66a:	e0 0f       	add	r30, r16
		ADC   R31                , R1                     ;add high byte+carry    (  1 clock ) 
 66c:	f1 1d       	adc	r31, r1
		ST    Z                  , R22                    ;save priority          (  2 clocks)
 66e:	60 83       	st	Z, r22
		
		;increment ntask
		LDS   R16                , KerBase+OFF_NTSK       ;load ntask             (  2 clocks) 
 670:	00 91 08 01 	lds	r16, 0x0108
		INC   R16                                         ;increment ntask        (  1 clock ) 
 674:	03 95       	inc	r16
		STS   KerBase+OFF_NTSK   , R16                    ;store ntask            (  2 clocks) 
 676:	00 93 08 01 	sts	0x0108, r16
		
		;set stack pointer for current task (KerStack + KER_STK_SZ*(ker_ind+1) - 1) ->stack top   
		MOV   R16                , R22                    ;load task_id           (  1 clock ) 
 67a:	06 2f       	mov	r16, r22
		INC   R16                                         ;increment task_id      (  1 clock ) 
 67c:	03 95       	inc	r16
		LDI   R17                , KER_STK_SZ             ;load stack size        (  1 clock ) 
 67e:	10 e8       	ldi	r17, 0x80	; 128
		MUL   R16                , R17                    ;multiply to get offset (  2 clocks) 
 680:	01 9f       	mul	r16, r17
		MOV   R30                , R0                     ;load multiplied low    (  2 clocks) 
 682:	e0 2d       	mov	r30, r0
		MOV   R31                , R1                     ;load multiplied high   (  2 clocks) 
 684:	f1 2d       	mov	r31, r1
		SBIW  R30                , 0x01                   ;KER_STK_SZ*(task_id+1)-1  (  2 clocks) 
 686:	31 97       	sbiw	r30, 0x01	; 1
		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 688:	11 24       	eor	r1, r1
		LDI   R16                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
 68a:	06 e4       	ldi	r16, 0x46	; 70
		LDI   R17                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
 68c:	11 e0       	ldi	r17, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 68e:	e0 0f       	add	r30, r16
		ADC   R31                , R17                    ;add high bytes+carry   (  1 clock ) 
 690:	f1 1f       	adc	r31, r17
		OUT   IOSPL              , R30                    ;load SPL               (  1 clock ) 
 692:	ed bf       	out	0x3d, r30	; 61
        OUT   IOSPH              , R31                    ;load SPH               (  1 clock ) 
 694:	fe bf       	out	0x3e, r31	; 62
		
		;function argument directly returns word address
	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
 696:	8f 93       	push	r24
		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 698:	9f 93       	push	r25
		
		SEI                                               ;force enable interrupt (  1 clock ) 
 69a:	78 94       	sei
		
		;push context to stack of this task
		KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 69c:	0f 92       	push	r0
 69e:	0f b6       	in	r0, 0x3f	; 63
 6a0:	0f 92       	push	r0
 6a2:	1f 92       	push	r1
 6a4:	11 24       	eor	r1, r1
 6a6:	2f 92       	push	r2
 6a8:	3f 92       	push	r3
 6aa:	4f 92       	push	r4
 6ac:	5f 92       	push	r5
 6ae:	6f 92       	push	r6
 6b0:	7f 92       	push	r7
 6b2:	8f 92       	push	r8
 6b4:	9f 92       	push	r9
 6b6:	af 92       	push	r10
 6b8:	bf 92       	push	r11
 6ba:	cf 92       	push	r12
 6bc:	df 92       	push	r13
 6be:	ef 92       	push	r14
 6c0:	ff 92       	push	r15
 6c2:	0f 93       	push	r16
 6c4:	1f 93       	push	r17
 6c6:	2f 93       	push	r18
 6c8:	3f 93       	push	r19
 6ca:	4f 93       	push	r20
 6cc:	5f 93       	push	r21
 6ce:	6f 93       	push	r22
 6d0:	7f 93       	push	r23
 6d2:	8f 93       	push	r24
 6d4:	9f 93       	push	r25
 6d6:	af 93       	push	r26
 6d8:	bf 93       	push	r27
 6da:	cf 93       	push	r28
 6dc:	df 93       	push	r29
 6de:	ef 93       	push	r30
 6e0:	ff 93       	push	r31
		
		;read stack pointer of current task (necessary when restore)
		IN    R16                , IOSPL                  ;read SPL               (  1 clock ) 
 6e2:	0d b7       	in	r16, 0x3d	; 61
        IN    R17                , IOSPH                  ;read SPH               (  1 clock ) 
 6e4:	1e b7       	in	r17, 0x3e	; 62
		
		;calculate the address where current task's SP will be stored and store SP
		MOV   R18                , R22                    ;fetch task_id from arg (  1 clock ) 
 6e6:	26 2f       	mov	r18, r22
		LSL   R18                                         ;left shift to multiply (  1 clock ) 
 6e8:	22 0f       	add	r18, r18
		LDI   R30                , lo8(KerSP)             ;fetch base pos low     (  1 clock ) 
 6ea:	ea e0       	ldi	r30, 0x0A	; 10
		LDI   R31                , hi8(KerSP)             ;fetch base pos high    (  1 clock ) 
 6ec:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R18                    ;add offset to array    (  1 clock ) 
 6ee:	e2 0f       	add	r30, r18
		LDI   R18                , 0x00                   ;set 0 to R16           (  1 clock ) 
 6f0:	20 e0       	ldi	r18, 0x00	; 0
		ADC   R31                , R18                    ;add carry if any       (  1 clock ) 
 6f2:	f2 1f       	adc	r31, r18
		ST    Z+                 , R16                    ;SPL at KerSp+offset    (  2 clocks) 
 6f4:	01 93       	st	Z+, r16
		ST    z                  , R17                    ;SPH at KerSp+offset    (  2 clocks) 
 6f6:	10 83       	st	Z, r17
		
		;load Main SP, restore Z pointer
		OUT   IOSPL              , R2                     ;load SPL               (  1 clock ) 
 6f8:	2d be       	out	0x3d, r2	; 61
        OUT   IOSPH              , R3                     ;load SPH               (  1 clock ) 
 6fa:	3e be       	out	0x3e, r3	; 62
		MOV   R30                , R4                     ;push ZPL               (  2 clocks) 
 6fc:	e4 2d       	mov	r30, r4
		MOV   R31                , R5                     ;push ZPL               (  2 clocks) 
 6fe:	f5 2d       	mov	r31, r5
		
		
		RET                                               ;return from subroutine (  4 clocks) 
 700:	08 95       	ret

00000702 <Kernel_Start_Tasks>:

;;===================================kernel task starting===================================;; 
Kernel_Start_Tasks:
		;start executing from task0
		;save ZP
		MOV   R4                 , R30                    ;save ZPL               (  2 clocks) 
 702:	4e 2e       	mov	r4, r30
		MOV   R5                 , R31                    ;save ZPH               (  2 clocks) 
 704:	5f 2e       	mov	r5, r31
		
		;load ZP with addr+offset
		LDI   R30                , lo8(KerSP)             ;fetch ZPL KerSP        (  1 clock ) 
 706:	ea e0       	ldi	r30, 0x0A	; 10
		LDI   R31                , hi8(KerSP)             ;fetch ZPH KerSP        (  1 clock ) 
 708:	f1 e0       	ldi	r31, 0x01	; 1
		
		;load last task's SP
		LD    R16                , Z+                     ;load val from Z, inc Z (  2 clocks) 
 70a:	01 91       	ld	r16, Z+
		LD    R17                , Z                      ;load val from Z+1      (  2 clocks) 
 70c:	10 81       	ld	r17, Z
		
		;set last task's SP
		OUT   IOSPL              , R16                    ;load SPL               (  1 clock ) 
 70e:	0d bf       	out	0x3d, r16	; 61
        OUT   IOSPH              , R17                    ;load SPH               (  1 clock ) 
 710:	1e bf       	out	0x3e, r17	; 62
       
        ;forcefully restore context, in ISR it will be stored automatically
		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 712:	ff 91       	pop	r31
 714:	ef 91       	pop	r30
 716:	df 91       	pop	r29
 718:	cf 91       	pop	r28
 71a:	bf 91       	pop	r27
 71c:	af 91       	pop	r26
 71e:	9f 91       	pop	r25
 720:	8f 91       	pop	r24
 722:	7f 91       	pop	r23
 724:	6f 91       	pop	r22
 726:	5f 91       	pop	r21
 728:	4f 91       	pop	r20
 72a:	3f 91       	pop	r19
 72c:	2f 91       	pop	r18
 72e:	1f 91       	pop	r17
 730:	0f 91       	pop	r16
 732:	ff 90       	pop	r15
 734:	ef 90       	pop	r14
 736:	df 90       	pop	r13
 738:	cf 90       	pop	r12
 73a:	bf 90       	pop	r11
 73c:	af 90       	pop	r10
 73e:	9f 90       	pop	r9
 740:	8f 90       	pop	r8
 742:	7f 90       	pop	r7
 744:	6f 90       	pop	r6
 746:	5f 90       	pop	r5
 748:	4f 90       	pop	r4
 74a:	3f 90       	pop	r3
 74c:	2f 90       	pop	r2
 74e:	1f 90       	pop	r1
 750:	0f 90       	pop	r0
 752:	0f be       	out	0x3f, r0	; 63
 754:	0f 90       	pop	r0
		
		;restore ZP
		MOV   R30                , R4                     ;restore ZPL            (  2 clocks) 
 756:	e4 2d       	mov	r30, r4
		MOV   R31                , R5                     ;restore ZPL            (  2 clocks) 
 758:	f5 2d       	mov	r31, r5
		
		
		LDS   R16		         , KerBase+OFF_PRS        ;load prescaler         (  2 clocks) 
 75a:	00 91 05 01 	lds	r16, 0x0105
		LDS   R17		         , KerBase+OFF_RLD        ;load reload val        (  2 clocks) 
 75e:	10 91 06 01 	lds	r17, 0x0106
		STS   SRTCCR0B           , R16                    ;prescaler-> TCCR0B     (  2 clocks) 
 762:	00 93 45 00 	sts	0x0045, r16
		STS   SRTCNT0            , R17                    ;reload val-> TCNT0     (  2 clocks) 
 766:	10 93 46 00 	sts	0x0046, r17
		LDI   R16                , 0x01                   ;bit mask TOIE0         (  1 clock ) 
 76a:	01 e0       	ldi	r16, 0x01	; 1
		STS   SRTIMSK0           , R16                    ;set to TIMSK0          (  2 clocks) 
 76c:	00 93 6e 00 	sts	0x006E, r16
		
		;execute return to jump to task0, pushed while task init
		RET                                               ;return from subroutine (  4 clocks) 
 770:	08 95       	ret

00000772 <Kernel_Task_Idle>:


;;================================kernel task delay starting================================;; 
Kernel_Task_Idle:
    _IDLE_LOOP:
		RJMP  _IDLE_LOOP                                  ;return from subroutine (  4 clocks) 
 772:	ff cf       	rjmp	.-2      	; 0x772 <Kernel_Task_Idle>

00000774 <Kernel_Task_Sleep>:


;;================================kernel task delay starting================================;; 
Kernel_Task_Sleep:
        ;save current context
        KER_CONTEXT_SAVE_YEILD                            ;save context           ( 68 clocks) 
 774:	0f 92       	push	r0
 776:	0f b6       	in	r0, 0x3f	; 63
 778:	f8 94       	cli
 77a:	0f 92       	push	r0
 77c:	1f 92       	push	r1
 77e:	11 24       	eor	r1, r1
 780:	2f 92       	push	r2
 782:	3f 92       	push	r3
 784:	4f 92       	push	r4
 786:	5f 92       	push	r5
 788:	6f 92       	push	r6
 78a:	7f 92       	push	r7
 78c:	8f 92       	push	r8
 78e:	9f 92       	push	r9
 790:	af 92       	push	r10
 792:	bf 92       	push	r11
 794:	cf 92       	push	r12
 796:	df 92       	push	r13
 798:	ef 92       	push	r14
 79a:	ff 92       	push	r15
 79c:	0f 93       	push	r16
 79e:	1f 93       	push	r17
 7a0:	2f 93       	push	r18
 7a2:	3f 93       	push	r19
 7a4:	4f 93       	push	r20
 7a6:	5f 93       	push	r21
 7a8:	6f 93       	push	r22
 7aa:	7f 93       	push	r23
 7ac:	8f 93       	push	r24
 7ae:	9f 93       	push	r25
 7b0:	af 93       	push	r26
 7b2:	bf 93       	push	r27
 7b4:	cf 93       	push	r28
 7b6:	df 93       	push	r29
 7b8:	ef 93       	push	r30
 7ba:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks)
 7bc:	0d b7       	in	r16, 0x3d	; 61
 7be:	1e b7       	in	r17, 0x3e	; 62
 7c0:	20 91 07 01 	lds	r18, 0x0107
 7c4:	22 0f       	add	r18, r18
 7c6:	ea e0       	ldi	r30, 0x0A	; 10
 7c8:	f1 e0       	ldi	r31, 0x01	; 1
 7ca:	e2 0f       	add	r30, r18
 7cc:	f1 1d       	adc	r31, r1
 7ce:	01 93       	st	Z+, r16
 7d0:	10 83       	st	Z, r17
		
		;create next task wakeup time (args R25:R24)
		LDS   R16                , KerBase+OFF_TID        ;load tak_id            (  2 clocks) 
 7d2:	00 91 07 01 	lds	r16, 0x0107
		MOV   R17                , R16                    ;copy                   (  1 clock ) 
 7d6:	10 2f       	mov	r17, r16
		LSL   R17                                         ;x2                     (  1 clock ) 
 7d8:	11 0f       	add	r17, r17
		LDI   R30                , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 7da:	e2 e3       	ldi	r30, 0x32	; 50
		LDI   R31                , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 7dc:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R17                    ;add low bytes          (  1 clock ) 
 7de:	e1 0f       	add	r30, r17
		LDI   R17                , 0x00                   ;load 0                 (  1 clock ) 
 7e0:	10 e0       	ldi	r17, 0x00	; 0
		ADC   R31                , R17                    ;add high byte+carry    (  1 clock ) 
 7e2:	f1 1f       	adc	r31, r17
		ST    Z+                 , R24                    ;save sleep time        (  2 clocks) 
 7e4:	81 93       	st	Z+, r24
		ST    Z                  , R25                    ;save sleep time        (  2 clocks) 
 7e6:	90 83       	st	Z, r25
		
		;update task scheduler status as blocked
		LDI   R30                , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 7e8:	ee e1       	ldi	r30, 0x1E	; 30
		LDI   R31                , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 7ea:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 7ec:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 7ee:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 7f0:	f0 1f       	adc	r31, r16
        LDI   R16                , TASK_BLOCK             ;block task until cnt=0 (  1 clock ) 
 7f2:	00 e0       	ldi	r16, 0x00	; 0
		ST    Z                  , R16                    ;save block flag        (  2 clocks) 
 7f4:	00 83       	st	Z, r16
		
		;run scheduler, load next task sp, restore context
		KER_RUN_SCHEDULER                                 ;run scheduler for tasks( 14 clocks) 
 7f6:	00 91 08 01 	lds	r16, 0x0108

000007fa <_CH_TASK_READY15>:
 7fa:	0a 95       	dec	r16
 7fc:	10 2f       	mov	r17, r16
 7fe:	ee e1       	ldi	r30, 0x1E	; 30
 800:	f1 e0       	ldi	r31, 0x01	; 1
 802:	e1 0f       	add	r30, r17
 804:	f1 1d       	adc	r31, r1
 806:	10 81       	ld	r17, Z
 808:	11 30       	cpi	r17, 0x01	; 1
 80a:	21 f0       	breq	.+8      	; 0x814 <_NEXT_TASK_FOUND15>

0000080c <_LOOP_CNT15>:
 80c:	00 30       	cpi	r16, 0x00	; 0
 80e:	a9 f7       	brne	.-22     	; 0x7fa <_CH_TASK_READY15>
 810:	0c 94 0e 04 	jmp	0x81c	; 0x81c <_IDLE_TASK15>

00000814 <_NEXT_TASK_FOUND15>:
 814:	00 93 07 01 	sts	0x0107, r16
 818:	0c 94 11 04 	jmp	0x822	; 0x822 <_EXIT15>

0000081c <_IDLE_TASK15>:
 81c:	00 e0       	ldi	r16, 0x00	; 0
 81e:	00 93 07 01 	sts	0x0107, r16

00000822 <_EXIT15>:
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 822:	00 91 07 01 	lds	r16, 0x0107
 826:	00 0f       	add	r16, r16
 828:	ea e0       	ldi	r30, 0x0A	; 10
 82a:	f1 e0       	ldi	r31, 0x01	; 1
 82c:	e0 0f       	add	r30, r16
 82e:	f1 1d       	adc	r31, r1
 830:	01 91       	ld	r16, Z+
 832:	10 81       	ld	r17, Z
 834:	0d bf       	out	0x3d, r16	; 61
 836:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE_YEILD                         ;restore context        ( 67 clocks) 
 838:	ff 91       	pop	r31
 83a:	ef 91       	pop	r30
 83c:	df 91       	pop	r29
 83e:	cf 91       	pop	r28
 840:	bf 91       	pop	r27
 842:	af 91       	pop	r26
 844:	9f 91       	pop	r25
 846:	8f 91       	pop	r24
 848:	7f 91       	pop	r23
 84a:	6f 91       	pop	r22
 84c:	5f 91       	pop	r21
 84e:	4f 91       	pop	r20
 850:	3f 91       	pop	r19
 852:	2f 91       	pop	r18
 854:	1f 91       	pop	r17
 856:	0f 91       	pop	r16
 858:	ff 90       	pop	r15
 85a:	ef 90       	pop	r14
 85c:	df 90       	pop	r13
 85e:	cf 90       	pop	r12
 860:	bf 90       	pop	r11
 862:	af 90       	pop	r10
 864:	9f 90       	pop	r9
 866:	8f 90       	pop	r8
 868:	7f 90       	pop	r7
 86a:	6f 90       	pop	r6
 86c:	5f 90       	pop	r5
 86e:	4f 90       	pop	r4
 870:	3f 90       	pop	r3
 872:	2f 90       	pop	r2
 874:	1f 90       	pop	r1
 876:	0f 90       	pop	r0
 878:	0f be       	out	0x3f, r0	; 63
 87a:	0f 90       	pop	r0
 87c:	78 94       	sei
		
		RET                                               ;return from subroutine (  4 clocks) 
 87e:	08 95       	ret

00000880 <Kernel_Task_Sleep_Time_Get>:


;;================================kernel task delay starting================================;; 
Kernel_Task_Sleep_Time_Get:
		;create next task wakeup time
		LDS   R16                , KerBase+OFF_TID        ;load tak_id            (  2 clocks) 
 880:	00 91 07 01 	lds	r16, 0x0107
		LSL   R16                                         ;x2                     (  1 clock ) 
 884:	00 0f       	add	r16, r16
		LDI   R30                , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 886:	e2 e3       	ldi	r30, 0x32	; 50
		LDI   R31                , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 888:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 88a:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 88c:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 88e:	f0 1f       	adc	r31, r16
		LD    R24                , Z+                     ;load sleep time        (  2 clocks) 
 890:	81 91       	ld	r24, Z+
		LD    R25                , Z                      ;load sleep time        (  2 clocks) 
 892:	90 81       	ld	r25, Z
		RET                                               ;return from subroutine (  4 clocks) 
 894:	08 95       	ret

00000896 <Kernel_Task_Sts_Get>:


;;================================kernel task delay starting================================;; 
Kernel_Task_Sts_Get:
		;create next task wakeup time
		LDS   R16                , KerBase+OFF_TID        ;load tak_id            (  2 clocks) 
 896:	00 91 07 01 	lds	r16, 0x0107
		LDI   R30                , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 89a:	ee e1       	ldi	r30, 0x1E	; 30
		LDI   R31                , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 89c:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 89e:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 8a0:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 8a2:	f0 1f       	adc	r31, r16
		LD    R24                , Z                      ;load sleep time        (  2 clocks) 
 8a4:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 8a6:	08 95       	ret

000008a8 <Kernel_Task_Yeild>:


;;================================kernel task yeild starting================================;; 
Kernel_Task_Yeild:
		;save context, save sp, run scheduler, load next task sp, restore context
		KER_CONTEXT_SAVE_YEILD                            ;save context           ( 68 clocks) 
 8a8:	0f 92       	push	r0
 8aa:	0f b6       	in	r0, 0x3f	; 63
 8ac:	f8 94       	cli
 8ae:	0f 92       	push	r0
 8b0:	1f 92       	push	r1
 8b2:	11 24       	eor	r1, r1
 8b4:	2f 92       	push	r2
 8b6:	3f 92       	push	r3
 8b8:	4f 92       	push	r4
 8ba:	5f 92       	push	r5
 8bc:	6f 92       	push	r6
 8be:	7f 92       	push	r7
 8c0:	8f 92       	push	r8
 8c2:	9f 92       	push	r9
 8c4:	af 92       	push	r10
 8c6:	bf 92       	push	r11
 8c8:	cf 92       	push	r12
 8ca:	df 92       	push	r13
 8cc:	ef 92       	push	r14
 8ce:	ff 92       	push	r15
 8d0:	0f 93       	push	r16
 8d2:	1f 93       	push	r17
 8d4:	2f 93       	push	r18
 8d6:	3f 93       	push	r19
 8d8:	4f 93       	push	r20
 8da:	5f 93       	push	r21
 8dc:	6f 93       	push	r22
 8de:	7f 93       	push	r23
 8e0:	8f 93       	push	r24
 8e2:	9f 93       	push	r25
 8e4:	af 93       	push	r26
 8e6:	bf 93       	push	r27
 8e8:	cf 93       	push	r28
 8ea:	df 93       	push	r29
 8ec:	ef 93       	push	r30
 8ee:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 8f0:	0d b7       	in	r16, 0x3d	; 61
 8f2:	1e b7       	in	r17, 0x3e	; 62
 8f4:	20 91 07 01 	lds	r18, 0x0107
 8f8:	22 0f       	add	r18, r18
 8fa:	ea e0       	ldi	r30, 0x0A	; 10
 8fc:	f1 e0       	ldi	r31, 0x01	; 1
 8fe:	e2 0f       	add	r30, r18
 900:	f1 1d       	adc	r31, r1
 902:	01 93       	st	Z+, r16
 904:	10 83       	st	Z, r17
		KER_RUN_SCHEDULER                                 ;run scheduler for tasks( 14 clocks) 
 906:	00 91 08 01 	lds	r16, 0x0108

0000090a <_CH_TASK_READY20>:
 90a:	0a 95       	dec	r16
 90c:	10 2f       	mov	r17, r16
 90e:	ee e1       	ldi	r30, 0x1E	; 30
 910:	f1 e0       	ldi	r31, 0x01	; 1
 912:	e1 0f       	add	r30, r17
 914:	f1 1d       	adc	r31, r1
 916:	10 81       	ld	r17, Z
 918:	11 30       	cpi	r17, 0x01	; 1
 91a:	21 f0       	breq	.+8      	; 0x924 <_NEXT_TASK_FOUND20>

0000091c <_LOOP_CNT20>:
 91c:	00 30       	cpi	r16, 0x00	; 0
 91e:	a9 f7       	brne	.-22     	; 0x90a <_CH_TASK_READY20>
 920:	0c 94 96 04 	jmp	0x92c	; 0x92c <_IDLE_TASK20>

00000924 <_NEXT_TASK_FOUND20>:
 924:	00 93 07 01 	sts	0x0107, r16
 928:	0c 94 99 04 	jmp	0x932	; 0x932 <_EXIT20>

0000092c <_IDLE_TASK20>:
 92c:	00 e0       	ldi	r16, 0x00	; 0
 92e:	00 93 07 01 	sts	0x0107, r16

00000932 <_EXIT20>:
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 932:	00 91 07 01 	lds	r16, 0x0107
 936:	00 0f       	add	r16, r16
 938:	ea e0       	ldi	r30, 0x0A	; 10
 93a:	f1 e0       	ldi	r31, 0x01	; 1
 93c:	e0 0f       	add	r30, r16
 93e:	f1 1d       	adc	r31, r1
 940:	01 91       	ld	r16, Z+
 942:	10 81       	ld	r17, Z
 944:	0d bf       	out	0x3d, r16	; 61
 946:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 948:	ff 91       	pop	r31
 94a:	ef 91       	pop	r30
 94c:	df 91       	pop	r29
 94e:	cf 91       	pop	r28
 950:	bf 91       	pop	r27
 952:	af 91       	pop	r26
 954:	9f 91       	pop	r25
 956:	8f 91       	pop	r24
 958:	7f 91       	pop	r23
 95a:	6f 91       	pop	r22
 95c:	5f 91       	pop	r21
 95e:	4f 91       	pop	r20
 960:	3f 91       	pop	r19
 962:	2f 91       	pop	r18
 964:	1f 91       	pop	r17
 966:	0f 91       	pop	r16
 968:	ff 90       	pop	r15
 96a:	ef 90       	pop	r14
 96c:	df 90       	pop	r13
 96e:	cf 90       	pop	r12
 970:	bf 90       	pop	r11
 972:	af 90       	pop	r10
 974:	9f 90       	pop	r9
 976:	8f 90       	pop	r8
 978:	7f 90       	pop	r7
 97a:	6f 90       	pop	r6
 97c:	5f 90       	pop	r5
 97e:	4f 90       	pop	r4
 980:	3f 90       	pop	r3
 982:	2f 90       	pop	r2
 984:	1f 90       	pop	r1
 986:	0f 90       	pop	r0
 988:	0f be       	out	0x3f, r0	; 63
 98a:	0f 90       	pop	r0
		SEI                                               ;enable interrupt       (  1 clock ) 
 98c:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
 98e:	08 95       	ret

00000990 <Debug_Init>:
.global  Debug_Print_TSK

;;========================================Debug Init========================================;;
Debug_Init:
        ;init registers for UART0
		LDI   R16                , (1<<1)                 ;mask U2x,                (1 clock )
 990:	02 e0       	ldi	r16, 0x02	; 2
		STS   SRUCSR0A           , R16                    ;load val to UCSR0A,      (2 clocks)
 992:	00 93 c0 00 	sts	0x00C0, r16
		MOV   R16                , R25                    ;clear R16,               (1 clock )
 996:	09 2f       	mov	r16, r25
		STS   SRUBRR0H           , R16                    ;load val to UBRR0H,      (2 clocks)
 998:	00 93 c5 00 	sts	0x00C5, r16
		MOV   R16                , R24                    ;set 0x03, 250k baud,     (1 clock )
 99c:	08 2f       	mov	r16, r24
		STS   SRUBRR0L           , R16                    ;load val to UBRR0L,      (2 clocks)
 99e:	00 93 c4 00 	sts	0x00C4, r16
		LDI   R16                , (1<<1)|(1<<2)          ;config 8 data bit        (1 clock )
 9a2:	06 e0       	ldi	r16, 0x06	; 6
		STS   SRUCSR0C           , R16                    ;load val to UCSR0C,      (2 clocks)
 9a4:	00 93 c2 00 	sts	0x00C2, r16
		LDI   R16                , (1<<3)                 ;enable tx,               (1 clock )
 9a8:	08 e0       	ldi	r16, 0x08	; 8
		STS   SRUCSR0B           , R16                    ;load val to UCSR0B,      (2 clocks)
 9aa:	00 93 c1 00 	sts	0x00C1, r16
        RET                                               ;return from subroutine,  (4 clocks) 
 9ae:	08 95       	ret

000009b0 <Debug_Tx_Byte>:


;;=========================================Debug Tx=========================================;;
Debug_Tx_Byte:
		;write single byte to data register (Arg R24)
		STS   SRGPIOR0           , R16                    ;store R16 val,           (2 clocks)
 9b0:	00 93 3e 00 	sts	0x003E, r16
		STS   SRUDR0             , R24                    ;load val to UDR0,        (2 clocks)
 9b4:	80 93 c6 00 	sts	0x00C6, r24

000009b8 <__UDRE0_CLEARED>:
		
    __UDRE0_CLEARED:
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,      (2 clocks)
 9b8:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x05                   ;skip if UDRE0 is set,    (2 clocks)
 9bc:	05 ff       	sbrs	r16, 5
		RJMP  __UDRE0_CLEARED                             ;wait until UDRE0 is set, (2 clocks)
 9be:	fc cf       	rjmp	.-8      	; 0x9b8 <__UDRE0_CLEARED>
		LDS   R16                , SRGPIOR0               ;restore R16 val,         (2 clocks)
 9c0:	00 91 3e 00 	lds	r16, 0x003E
        RET                                               ;return from subroutine,  (4 clocks) 
 9c4:	08 95       	ret

000009c6 <Debug_Tx_Byte_Conf>:


;;=========================================Debug Tx=========================================;;
Debug_Tx_Byte_Conf:
        ;write 1 byte, (Arg R24), Args retained
		STS   SRGPIOR0           , R16                    ;store R16 val,           (2 clocks)
 9c6:	00 93 3e 00 	sts	0x003E, r16
		STS   SRUDR0             , R24                    ;load val to UDR0,        (2 clocks)
 9ca:	80 93 c6 00 	sts	0x00C6, r24

000009ce <__TXC0_CLEARED>:
		
    __TXC0_CLEARED:
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,      (2 clocks)
 9ce:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x06                   ;skip if TXC0 is set,     (2 clocks)
 9d2:	06 ff       	sbrs	r16, 6
		RJMP  __TXC0_CLEARED                              ;wait until TXC0 is set,  (2 clocks)
 9d4:	fc cf       	rjmp	.-8      	; 0x9ce <__TXC0_CLEARED>
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,      (2 clocks)
 9d6:	00 91 c0 00 	lds	r16, 0x00C0
		ORI   R16                , (1<<6)                 ;mask bit 6,              (1 clock )
 9da:	00 64       	ori	r16, 0x40	; 64
		STS   SRUCSR0A           , R16                    ;load val to UCSR0B,      (2 clocks)
 9dc:	00 93 c0 00 	sts	0x00C0, r16
		LDS   R16                , SRGPIOR0               ;restore R16 val,         (2 clocks)
 9e0:	00 91 3e 00 	lds	r16, 0x003E
        RET                                               ;return from subroutine,  (4 clocks) 
 9e4:	08 95       	ret

000009e6 <Debug_Tx_Word_Conf>:

;;======================================Debug Tx Word=======================================;;
Debug_Tx_Word_Conf:
        ;write 2 bytes, (Arg R24, R25), Args retained
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 9e6:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <Debug_Tx_Byte_Conf>
		STS   SRGPIOR0           , R24                    ;store R24 val,           (2 clocks)
 9ea:	80 93 3e 00 	sts	0x003E, r24
		MOV   R24                , R25                    ;copy R25 to R24          (1 clock )
 9ee:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 9f0:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR0               ;restore R24 val,         (2 clocks)
 9f4:	80 91 3e 00 	lds	r24, 0x003E
        RET                                               ;return from subroutine,  (4 clocks) 
 9f8:	08 95       	ret

000009fa <Debug_Tx_DWord_Conf>:

;;=====================================Debug Tx DWord=======================================;;
Debug_Tx_DWord_Conf:
        ;write 4 bytes, (Arg R22-R25), Args retained
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks)
 9fa:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R22                    ;copy R22 to R24          (1 clock )
 9fe:	86 2f       	mov	r24, r22
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 a00:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <Debug_Tx_Byte_Conf>
		MOV   R24                , R23                    ;copy R23 to R24          (1 clock )
 a04:	87 2f       	mov	r24, r23
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 a06:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24              (2 clocks)
 a0a:	80 91 4a 00 	lds	r24, 0x004A
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 a0e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <Debug_Tx_Byte_Conf>
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks)
 a12:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R25                    ;copy R22 to R24          (1 clock )
 a16:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 a18:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24 val,         (2 clocks)
 a1c:	80 91 4a 00 	lds	r24, 0x004A
        RET                                               ;return from subroutine,  (4 clocks) 
 a20:	08 95       	ret

00000a22 <Debug_Tx_From_RAM>:


;;===================================Debug Tx From RAM======================================;;
Debug_Tx_From_RAM:
        ;print data from RAM address (Arg R24-R25)
		MOV   R16                , R30                    ;copy R30 to R16          (1 clock )
 a22:	0e 2f       	mov	r16, r30
		MOV   R17                , R31                    ;copy R31 to R17          (1 clock )
 a24:	1f 2f       	mov	r17, r31
		MOV   R18                , R24                    ;copy R24 to R18          (1 clock )
 a26:	28 2f       	mov	r18, r24
		MOV   R30                , R24                    ;copy R22 to R24          (1 clock )
 a28:	e8 2f       	mov	r30, r24
		MOV   R31                , R25                    ;copy R22 to R24          (1 clock )
 a2a:	f9 2f       	mov	r31, r25
		LD    R24                , Z                      ;load val to R24          (2 clocks)
 a2c:	80 81       	ld	r24, Z
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 a2e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <Debug_Tx_Byte_Conf>
		MOV   R30                , R16                    ;copy R16 to R30          (1 clock )
 a32:	e0 2f       	mov	r30, r16
		MOV   R31                , R17                    ;copy R17 to R31          (1 clock )
 a34:	f1 2f       	mov	r31, r17
		MOV   R24                , R18                    ;copy R18 to R24          (1 clock )
 a36:	82 2f       	mov	r24, r18
        RET                                               ;return from subroutine,  (4 clocks) 
 a38:	08 95       	ret

00000a3a <Debug_Tx_RAM_Area>:

;;===================================Debug Tx RAM Area======================================;;
Debug_Tx_RAM_Area:
        ;print data from RAM address (arguments R24:R25, R22)
	__DUMP_BYTES:
	    CALL  Debug_Tx_From_RAM                           ;send via uart from ram
 a3a:	0e 94 11 05 	call	0xa22	; 0xa22 <Debug_Tx_From_RAM>
		SUBI  R24                , 0x01                   ;decrement from LSByte
 a3e:	81 50       	subi	r24, 0x01	; 1
        SBCI  R25                , 0x00                   ;decrement if carry
 a40:	90 40       	sbci	r25, 0x00	; 0
		SUBI  R22                , 0x01                   ;decrement
 a42:	61 50       	subi	r22, 0x01	; 1
		BRNE  __DUMP_BYTES
 a44:	d1 f7       	brne	.-12     	; 0xa3a <Debug_Tx_RAM_Area>
        RET                                               ;return from subroutine,  (4 clocks) 
 a46:	08 95       	ret

00000a48 <Debug_Print_TSK>:


;;=====================================Debug Dummy Print====================================;;
Debug_Print_TSK:
        ;write 4 bytes, (Arg R22-R25), Args retained
		MOV   R16                , R24                    ;copy R24 to R16          (1 clock )
 a48:	08 2f       	mov	r16, r24
		;LDI   R17                , 48                     ;load 48 to reg           (1 clock )
		;ADD   R16                , R17                    ;to convert val to char   (1 clock )
		LDI   R22                , 'T'                    ;copy char                (1 clock )
 a4a:	64 e5       	ldi	r22, 0x54	; 84
		LDI   R23                , 'S'                    ;copy char                (1 clock )
 a4c:	73 e5       	ldi	r23, 0x53	; 83
		LDI   R24                , 'k'                    ;copy char                (1 clock )
 a4e:	8b e6       	ldi	r24, 0x6B	; 107
		MOV   R25                , R16                    ;copy char                (1 clock )
 a50:	90 2f       	mov	r25, r16
		CALL  Debug_Tx_DWord_Conf                         ;send via uart
 a52:	0e 94 fd 04 	call	0x9fa	; 0x9fa <Debug_Tx_DWord_Conf>
		LDI   R24                , '\r'                   ;copy char                (1 clock )
 a56:	8d e0       	ldi	r24, 0x0D	; 13
		LDI   R25                , '\n'                   ;copy char                (1 clock )
 a58:	9a e0       	ldi	r25, 0x0A	; 10
		CALL  Debug_Tx_Word_Conf                          ;send via uart
 a5a:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <Debug_Tx_Word_Conf>
        RET                                               ;return from subroutine,  (4 clocks) 
 a5e:	08 95       	ret

00000a60 <_exit>:
 a60:	f8 94       	cli

00000a62 <__stop_program>:
 a62:	ff cf       	rjmp	.-2      	; 0xa62 <__stop_program>
