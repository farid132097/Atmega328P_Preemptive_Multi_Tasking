
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000018ba  0000194e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000585  00800106  00800106  00001954  2**0
                  ALLOC
  3 .stab         00000d5c  00000000  00000000  00001954  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000006c  00000000  00000000  000026b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  0000271c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000007ba  00000000  00000000  0000277c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000017ae  00000000  00000000  00002f36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000404  00000000  00000000  000046e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001309  00000000  00000000  00004ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004f0  00000000  00000000  00005df4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000008ec  00000000  00000000  000062e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000005f7  00000000  00000000  00006bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000078  00000000  00000000  000071c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
       4:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
       8:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
       c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      10:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      14:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      18:	0c 94 96 07 	jmp	0xf2c	; 0xf2c <__vector_6>
      1c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      20:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      24:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      28:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      2c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      30:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      34:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      38:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      3c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      40:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      44:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      48:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      4c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      50:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      54:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      58:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      5c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      60:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	00 00       	nop
      6e:	00 00       	nop
      70:	00 00       	nop
      72:	00 00       	nop
      74:	5b c7       	rjmp	.+3766   	; 0xf2c <__vector_6>
      76:	26 c0       	rjmp	.+76     	; 0xc4 <__bad_interrupt>
      78:	25 c0       	rjmp	.+74     	; 0xc4 <__bad_interrupt>
      7a:	24 c0       	rjmp	.+72     	; 0xc4 <__bad_interrupt>
      7c:	00 00       	nop
      7e:	00 00       	nop
      80:	00 00       	nop
      82:	00 00       	nop
      84:	00 00       	nop
      86:	00 00       	nop
      88:	1d c0       	rjmp	.+58     	; 0xc4 <__bad_interrupt>

0000008a <__ctors_end>:
      8a:	11 24       	eor	r1, r1
      8c:	1f be       	out	0x3f, r1	; 63
      8e:	cf ef       	ldi	r28, 0xFF	; 255
      90:	d8 e0       	ldi	r29, 0x08	; 8
      92:	de bf       	out	0x3e, r29	; 62
      94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_copy_data>:
      96:	11 e0       	ldi	r17, 0x01	; 1
      98:	a0 e0       	ldi	r26, 0x00	; 0
      9a:	b1 e0       	ldi	r27, 0x01	; 1
      9c:	ea eb       	ldi	r30, 0xBA	; 186
      9e:	f8 e1       	ldi	r31, 0x18	; 24
      a0:	02 c0       	rjmp	.+4      	; 0xa6 <.do_copy_data_start>

000000a2 <.do_copy_data_loop>:
      a2:	05 90       	lpm	r0, Z+
      a4:	0d 92       	st	X+, r0

000000a6 <.do_copy_data_start>:
      a6:	a6 30       	cpi	r26, 0x06	; 6
      a8:	b1 07       	cpc	r27, r17
      aa:	d9 f7       	brne	.-10     	; 0xa2 <.do_copy_data_loop>

000000ac <__do_clear_bss>:
      ac:	16 e0       	ldi	r17, 0x06	; 6
      ae:	a6 e0       	ldi	r26, 0x06	; 6
      b0:	b1 e0       	ldi	r27, 0x01	; 1
      b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
      b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
      b6:	ab 38       	cpi	r26, 0x8B	; 139
      b8:	b1 07       	cpc	r27, r17
      ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
      bc:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
      c0:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <_exit>

000000c4 <__bad_interrupt>:
      c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c8 <main>:



int main(void) {
    
	Kernel_Init();
      c8:	0e 94 e7 09 	call	0x13ce	; 0x13ce <Kernel_Init>

	Kernel_Task_Create(Tasks_Task1,  5);
      cc:	8b ec       	ldi	r24, 0xCB	; 203
      ce:	91 e0       	ldi	r25, 0x01	; 1
      d0:	65 e0       	ldi	r22, 0x05	; 5
      d2:	0e 94 dd 08 	call	0x11ba	; 0x11ba <Kernel_Task_Create>
	//Kernel_Task_Create(Tasks_Task5,  0);
	//Kernel_Task_Create(Tasks_Task6,  6);
	//Kernel_Task_Create(Tasks_Task7,  4);
	//Kernel_Task_Create(Tasks_Task8,  8);
	//Kernel_Task_Create(Tasks_Task9,  7);
	Kernel_PreSleep_Hook(Tasks_Disable_Peripherals);
      d6:	82 e7       	ldi	r24, 0x72	; 114
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <Kernel_PreSleep_Hook>
	
	Kernel_Start_Tasks();
      de:	0e 94 55 09 	call	0x12aa	; 0x12aa <Kernel_Start_Tasks>
      e2:	ff cf       	rjmp	.-2      	; 0xe2 <main+0x1a>

000000e4 <Tasks_Disable_Peripherals>:
#include "debug.h"
#include "nrf24l01p.h"

void Tasks_Disable_Peripherals(void){
  
}
      e4:	08 95       	ret

000000e6 <Tasks_Task9>:
  }
}

void Tasks_Task9(void){
  
  Debug_Init(0);
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <Debug_Init>
  
  while(1){
    
	  Debug_Tx_Byte(9);
      ee:	89 e0       	ldi	r24, 0x09	; 9
      f0:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
      f4:	81 e0       	ldi	r24, 0x01	; 1
      f6:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <Kernel_Task_Sleep_Time_Get>
      fa:	0e 94 16 0c 	call	0x182c	; 0x182c <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
      fe:	81 e0       	ldi	r24, 0x01	; 1
     100:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <Kernel_Task_Status_Get>
     104:	80 5e       	subi	r24, 0xE0	; 224
     106:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(9));
     10a:	89 e0       	ldi	r24, 0x09	; 9
     10c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <Kernel_Task_Sleep_Time_Get>
     110:	0e 94 16 0c 	call	0x182c	; 0x182c <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(9));
     114:	89 e0       	ldi	r24, 0x09	; 9
     116:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <Kernel_Task_Status_Get>
     11a:	80 5e       	subi	r24, 0xE0	; 224
     11c:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
     120:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <Kernel_Abs_High_Prio_Task_ID_Get>
     124:	80 5f       	subi	r24, 0xF0	; 240
     126:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
     12a:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <Kernel_Lowest_Prio_Get>
     12e:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    
    Kernel_Task_Sleep(7000/KER_TICK_TIME);
     132:	87 e0       	ldi	r24, 0x07	; 7
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	0e 94 2e 0a 	call	0x145c	; 0x145c <Kernel_Task_Sleep>
     13a:	d9 cf       	rjmp	.-78     	; 0xee <Tasks_Task9+0x8>

0000013c <Tasks_Task8>:
  }
}

void Tasks_Task8(void){
  
  Debug_Init(0);
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <Debug_Init>
  
  while(1){
    
	  Debug_Tx_Byte(8);
     144:	88 e0       	ldi	r24, 0x08	; 8
     146:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <Kernel_Task_Sleep_Time_Get>
     150:	0e 94 16 0c 	call	0x182c	; 0x182c <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <Kernel_Task_Status_Get>
     15a:	80 5e       	subi	r24, 0xE0	; 224
     15c:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(8));
     160:	88 e0       	ldi	r24, 0x08	; 8
     162:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <Kernel_Task_Sleep_Time_Get>
     166:	0e 94 16 0c 	call	0x182c	; 0x182c <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(8));
     16a:	88 e0       	ldi	r24, 0x08	; 8
     16c:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <Kernel_Task_Status_Get>
     170:	80 5e       	subi	r24, 0xE0	; 224
     172:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
     176:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <Kernel_Abs_High_Prio_Task_ID_Get>
     17a:	80 5f       	subi	r24, 0xF0	; 240
     17c:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
     180:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <Kernel_Lowest_Prio_Get>
     184:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    
    Kernel_Task_Sleep(7000/KER_TICK_TIME);
     188:	87 e0       	ldi	r24, 0x07	; 7
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	0e 94 2e 0a 	call	0x145c	; 0x145c <Kernel_Task_Sleep>
     190:	d9 cf       	rjmp	.-78     	; 0x144 <Tasks_Task8+0x8>

00000192 <Tasks_Task7>:
  }
}

void Tasks_Task7(void){
  
  Debug_Init(0);
     192:	80 e0       	ldi	r24, 0x00	; 0
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <Debug_Init>
  
  while(1){

	  Debug_Tx_Byte(7);
     19a:	87 e0       	ldi	r24, 0x07	; 7
     19c:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
     1a0:	81 e0       	ldi	r24, 0x01	; 1
     1a2:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <Kernel_Task_Sleep_Time_Get>
     1a6:	0e 94 16 0c 	call	0x182c	; 0x182c <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <Kernel_Task_Status_Get>
     1b0:	80 5e       	subi	r24, 0xE0	; 224
     1b2:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(7));
     1b6:	87 e0       	ldi	r24, 0x07	; 7
     1b8:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <Kernel_Task_Sleep_Time_Get>
     1bc:	0e 94 16 0c 	call	0x182c	; 0x182c <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(7));
     1c0:	87 e0       	ldi	r24, 0x07	; 7
     1c2:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <Kernel_Task_Status_Get>
     1c6:	80 5e       	subi	r24, 0xE0	; 224
     1c8:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
     1cc:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <Kernel_Abs_High_Prio_Task_ID_Get>
     1d0:	80 5f       	subi	r24, 0xF0	; 240
     1d2:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
     1d6:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <Kernel_Lowest_Prio_Get>
     1da:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    
    Kernel_Task_Sleep(7000/KER_TICK_TIME);
     1de:	87 e0       	ldi	r24, 0x07	; 7
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	0e 94 2e 0a 	call	0x145c	; 0x145c <Kernel_Task_Sleep>
     1e6:	d9 cf       	rjmp	.-78     	; 0x19a <Tasks_Task7+0x8>

000001e8 <Tasks_Task6>:
  }
}

void Tasks_Task6(void){
  
  Debug_Init(0);
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <Debug_Init>
  
  while(1){

    Debug_Tx_Byte(6);
     1f0:	86 e0       	ldi	r24, 0x06	; 6
     1f2:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <Kernel_Task_Sleep_Time_Get>
     1fc:	0e 94 16 0c 	call	0x182c	; 0x182c <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <Kernel_Task_Status_Get>
     206:	80 5e       	subi	r24, 0xE0	; 224
     208:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(6));
     20c:	86 e0       	ldi	r24, 0x06	; 6
     20e:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <Kernel_Task_Sleep_Time_Get>
     212:	0e 94 16 0c 	call	0x182c	; 0x182c <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(6));
     216:	86 e0       	ldi	r24, 0x06	; 6
     218:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <Kernel_Task_Status_Get>
     21c:	80 5e       	subi	r24, 0xE0	; 224
     21e:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
     222:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <Kernel_Abs_High_Prio_Task_ID_Get>
     226:	80 5f       	subi	r24, 0xF0	; 240
     228:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
     22c:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <Kernel_Lowest_Prio_Get>
     230:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    
    Kernel_Task_Sleep(7000/KER_TICK_TIME);
     234:	87 e0       	ldi	r24, 0x07	; 7
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	0e 94 2e 0a 	call	0x145c	; 0x145c <Kernel_Task_Sleep>
     23c:	d9 cf       	rjmp	.-78     	; 0x1f0 <Tasks_Task6+0x8>

0000023e <Tasks_Task5>:

void Tasks_Task5(void){
  
  //DDRC |= (1<<5);

  Debug_Init(0);
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <Debug_Init>
  
  while(1){

    //PORTC ^= (1<<5);

	  Debug_Tx_Byte(5);
     246:	85 e0       	ldi	r24, 0x05	; 5
     248:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <Kernel_Task_Sleep_Time_Get>
     252:	0e 94 16 0c 	call	0x182c	; 0x182c <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <Kernel_Task_Status_Get>
     25c:	80 5e       	subi	r24, 0xE0	; 224
     25e:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(5));
     262:	85 e0       	ldi	r24, 0x05	; 5
     264:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <Kernel_Task_Sleep_Time_Get>
     268:	0e 94 16 0c 	call	0x182c	; 0x182c <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(5));
     26c:	85 e0       	ldi	r24, 0x05	; 5
     26e:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <Kernel_Task_Status_Get>
     272:	80 5e       	subi	r24, 0xE0	; 224
     274:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
     278:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <Kernel_Abs_High_Prio_Task_ID_Get>
     27c:	80 5f       	subi	r24, 0xF0	; 240
     27e:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
     282:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <Kernel_Lowest_Prio_Get>
     286:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    
    Kernel_Task_Sleep(7000/KER_TICK_TIME);
     28a:	87 e0       	ldi	r24, 0x07	; 7
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0e 94 2e 0a 	call	0x145c	; 0x145c <Kernel_Task_Sleep>
     292:	d9 cf       	rjmp	.-78     	; 0x246 <Tasks_Task5+0x8>

00000294 <Tasks_Task4>:

void Tasks_Task4(void){
  
  //DDRC |= (1<<4);

  Debug_Init(0);
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <Debug_Init>
  
  while(1){

    //PORTC ^= (1<<4);

	  Debug_Tx_Byte(4);
     29c:	84 e0       	ldi	r24, 0x04	; 4
     29e:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <Kernel_Task_Sleep_Time_Get>
     2a8:	0e 94 16 0c 	call	0x182c	; 0x182c <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <Kernel_Task_Status_Get>
     2b2:	80 5e       	subi	r24, 0xE0	; 224
     2b4:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(4));
     2b8:	84 e0       	ldi	r24, 0x04	; 4
     2ba:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <Kernel_Task_Sleep_Time_Get>
     2be:	0e 94 16 0c 	call	0x182c	; 0x182c <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(4));
     2c2:	84 e0       	ldi	r24, 0x04	; 4
     2c4:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <Kernel_Task_Status_Get>
     2c8:	80 5e       	subi	r24, 0xE0	; 224
     2ca:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
     2ce:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <Kernel_Abs_High_Prio_Task_ID_Get>
     2d2:	80 5f       	subi	r24, 0xF0	; 240
     2d4:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
     2d8:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <Kernel_Lowest_Prio_Get>
     2dc:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    
    Kernel_Task_Sleep(7000/KER_TICK_TIME);
     2e0:	87 e0       	ldi	r24, 0x07	; 7
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0e 94 2e 0a 	call	0x145c	; 0x145c <Kernel_Task_Sleep>
     2e8:	d9 cf       	rjmp	.-78     	; 0x29c <Tasks_Task4+0x8>

000002ea <Tasks_Task3>:

void Tasks_Task3(void){
  
  //DDRC |= (1<<3);

  Debug_Init(0);
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <Debug_Init>
  
  while(1){

    //PORTC ^= (1<<3);

	  Debug_Tx_Byte(3);
     2f2:	83 e0       	ldi	r24, 0x03	; 3
     2f4:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <Kernel_Task_Sleep_Time_Get>
     2fe:	0e 94 16 0c 	call	0x182c	; 0x182c <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <Kernel_Task_Status_Get>
     308:	80 5e       	subi	r24, 0xE0	; 224
     30a:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(3));
     30e:	83 e0       	ldi	r24, 0x03	; 3
     310:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <Kernel_Task_Sleep_Time_Get>
     314:	0e 94 16 0c 	call	0x182c	; 0x182c <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(3));
     318:	83 e0       	ldi	r24, 0x03	; 3
     31a:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <Kernel_Task_Status_Get>
     31e:	80 5e       	subi	r24, 0xE0	; 224
     320:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
     324:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <Kernel_Abs_High_Prio_Task_ID_Get>
     328:	80 5f       	subi	r24, 0xF0	; 240
     32a:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
     32e:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <Kernel_Lowest_Prio_Get>
     332:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    
    Kernel_Task_Sleep(7000/KER_TICK_TIME);
     336:	87 e0       	ldi	r24, 0x07	; 7
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	0e 94 2e 0a 	call	0x145c	; 0x145c <Kernel_Task_Sleep>
     33e:	d9 cf       	rjmp	.-78     	; 0x2f2 <Tasks_Task3+0x8>

00000340 <Tasks_Task2>:

void Tasks_Task2(void){
  
  //DDRC |= (1<<2);

  Debug_Init(0);
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <Debug_Init>
  while(1){
    

    //PORTC ^= (1<<2);

	  Debug_Tx_Byte(2);
     348:	82 e0       	ldi	r24, 0x02	; 2
     34a:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <Kernel_Task_Sleep_Time_Get>
     354:	0e 94 16 0c 	call	0x182c	; 0x182c <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <Kernel_Task_Status_Get>
     35e:	80 5e       	subi	r24, 0xE0	; 224
     360:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(2));
     364:	82 e0       	ldi	r24, 0x02	; 2
     366:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <Kernel_Task_Sleep_Time_Get>
     36a:	0e 94 16 0c 	call	0x182c	; 0x182c <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(2));
     36e:	82 e0       	ldi	r24, 0x02	; 2
     370:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <Kernel_Task_Status_Get>
     374:	80 5e       	subi	r24, 0xE0	; 224
     376:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
     37a:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <Kernel_Abs_High_Prio_Task_ID_Get>
     37e:	80 5f       	subi	r24, 0xF0	; 240
     380:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
     384:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <Kernel_Lowest_Prio_Get>
     388:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>

    Kernel_Task_Sleep(7000/KER_TICK_TIME);
     38c:	87 e0       	ldi	r24, 0x07	; 7
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	0e 94 2e 0a 	call	0x145c	; 0x145c <Kernel_Task_Sleep>
     394:	d9 cf       	rjmp	.-78     	; 0x348 <Tasks_Task2+0x8>

00000396 <Tasks_Task1>:
void Tasks_Disable_Peripherals(void){
  
}

//will be used with AVR USB V3.0 Board
void Tasks_Task1(void){
     396:	1f 93       	push	r17
  
  //Pull-up for USB bus
  DDRD  &=~ ((1<<3)|(1<<2));
     398:	8a b1       	in	r24, 0x0a	; 10
     39a:	83 7f       	andi	r24, 0xF3	; 243
     39c:	8a b9       	out	0x0a, r24	; 10
  PORTD |=  (1<<3)|(1<<2);
     39e:	8b b1       	in	r24, 0x0b	; 11
     3a0:	8c 60       	ori	r24, 0x0C	; 12
     3a2:	8b b9       	out	0x0b, r24	; 11
  
  //LED pin
  DDRD  |=  (1<<4);
     3a4:	54 9a       	sbi	0x0a, 4	; 10
  PORTD &=~ (1<<4);
     3a6:	5c 98       	cbi	0x0b, 4	; 11
  
  //VsenseEn
  DDRC  |=  (1<<1);
     3a8:	39 9a       	sbi	0x07, 1	; 7
  PORTC &=~ (1<<1);
     3aa:	41 98       	cbi	0x08, 1	; 8
  
  Debug_Init(0);
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <Debug_Init>
  nRF24L01P_Init();
     3b4:	0e 94 0e 07 	call	0xe1c	; 0xe1c <nRF24L01P_Init>
  
  while(1){
    
    //LED on
    PORTD|= (1<<4);
     3b8:	5c 9a       	sbi	0x0b, 4	; 11
     3ba:	10 e0       	ldi	r17, 0x00	; 0

    for(uint8_t i=0;i<200;i++){
      Debug_Tx_Byte(i);
     3bc:	81 2f       	mov	r24, r17
     3be:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
  while(1){
    
    //LED on
    PORTD|= (1<<4);

    for(uint8_t i=0;i<200;i++){
     3c2:	1f 5f       	subi	r17, 0xFF	; 255
     3c4:	18 3c       	cpi	r17, 0xC8	; 200
     3c6:	d1 f7       	brne	.-12     	; 0x3bc <Tasks_Task1+0x26>
      Debug_Tx_Byte(i);
    }

    //LED off
    PORTD&=~(1<<4);
     3c8:	5c 98       	cbi	0x0b, 4	; 11

    Kernel_Task_Sleep(5000/KER_TICK_TIME);
     3ca:	85 e0       	ldi	r24, 0x05	; 5
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	0e 94 2e 0a 	call	0x145c	; 0x145c <Kernel_Task_Sleep>
     3d2:	f2 cf       	rjmp	.-28     	; 0x3b8 <Tasks_Task1+0x22>

000003d4 <nRF24L01P_Struct_Init>:


/* initialize structure of the driver */

void nRF24L01P_Struct_Init(void){
  nRF24L01P.Mode = 0x00;
     3d4:	10 92 60 06 	sts	0x0660, r1
  nRF24L01P.Enable = 0x01;
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	90 93 61 06 	sts	0x0661, r25
  nRF24L01P.TempBuf[0] = 0x00;
     3de:	10 92 62 06 	sts	0x0662, r1
  nRF24L01P.TempBuf[1] = 0x00;
     3e2:	10 92 63 06 	sts	0x0663, r1
  nRF24L01P.Address.Own = 0x01;
     3e6:	90 93 64 06 	sts	0x0664, r25
  nRF24L01P.Address.Dest = 0x02;
     3ea:	82 e0       	ldi	r24, 0x02	; 2
     3ec:	80 93 65 06 	sts	0x0665, r24
  nRF24L01P.Config.RxTicks = 0;
     3f0:	10 92 69 06 	sts	0x0669, r1
     3f4:	10 92 68 06 	sts	0x0668, r1
  nRF24L01P.Config.RxTimeout = 10;
     3f8:	2a e0       	ldi	r18, 0x0A	; 10
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	30 93 67 06 	sts	0x0667, r19
     400:	20 93 66 06 	sts	0x0666, r18
  nRF24L01P.Config.MaxDataLen = 20;
     404:	84 e1       	ldi	r24, 0x14	; 20
     406:	80 93 6a 06 	sts	0x066A, r24
  nRF24L01P.Config.MaxRetry = 10;
     40a:	30 93 6c 06 	sts	0x066C, r19
     40e:	20 93 6b 06 	sts	0x066B, r18
  nRF24L01P.Config.RetryOccured = 0;
     412:	10 92 6e 06 	sts	0x066E, r1
     416:	10 92 6d 06 	sts	0x066D, r1
  nRF24L01P.Packet.TxPID = 0x01;
     41a:	90 93 6f 06 	sts	0x066F, r25
  nRF24L01P.Packet.RxPID = 0x00;
     41e:	10 92 70 06 	sts	0x0670, r1
  nRF24L01P.Packet.LastRxPID = 0x00;
     422:	10 92 71 06 	sts	0x0671, r1
  nRF24L01P.Packet.AckReq = 1;
     426:	90 93 72 06 	sts	0x0672, r25
  nRF24L01P.Blocks.Remaining = 0;
     42a:	10 92 73 06 	sts	0x0673, r1
  nRF24L01P.Blocks.FailedPos = 0;
     42e:	10 92 74 06 	sts	0x0674, r1
  nRF24L01P.SpaceAlloc.CRCLSB = nRF24L01P_PACKET_LEN-1;
     432:	8f e1       	ldi	r24, 0x1F	; 31
     434:	80 93 76 06 	sts	0x0676, r24
  nRF24L01P.SpaceAlloc.CRCMSB = nRF24L01P_PACKET_LEN-2;
     438:	8e e1       	ldi	r24, 0x1E	; 30
     43a:	80 93 75 06 	sts	0x0675, r24
  nRF24L01P.SpaceAlloc.CRCLen = nRF24L01P_PACKET_LEN-2;
     43e:	80 93 7c 06 	sts	0x067C, r24
  nRF24L01P.SpaceAlloc.Len = nRF24L01P_PACKET_LEN-3;
     442:	8d e1       	ldi	r24, 0x1D	; 29
     444:	80 93 77 06 	sts	0x0677, r24
  nRF24L01P.SpaceAlloc.Dest = nRF24L01P_PACKET_LEN-4;
     448:	8c e1       	ldi	r24, 0x1C	; 28
     44a:	80 93 78 06 	sts	0x0678, r24
  nRF24L01P.SpaceAlloc.Own = nRF24L01P_PACKET_LEN-5;
     44e:	8b e1       	ldi	r24, 0x1B	; 27
     450:	80 93 79 06 	sts	0x0679, r24
  nRF24L01P.SpaceAlloc.Ack = nRF24L01P_PACKET_LEN-6;
     454:	8a e1       	ldi	r24, 0x1A	; 26
     456:	80 93 7a 06 	sts	0x067A, r24
  nRF24L01P.SpaceAlloc.PID = nRF24L01P_PACKET_LEN-7;
     45a:	89 e1       	ldi	r24, 0x19	; 25
     45c:	80 93 7b 06 	sts	0x067B, r24
  nRF24L01P.SpaceAlloc.Blocks = nRF24L01P_PACKET_LEN-8;
     460:	88 e1       	ldi	r24, 0x18	; 24
     462:	80 93 7d 06 	sts	0x067D, r24
  nRF24L01P.ErrorTicks = 0;
     466:	10 92 7f 06 	sts	0x067F, r1
     46a:	10 92 7e 06 	sts	0x067E, r1
  nRF24L01P.Error = 0;
     46e:	10 92 80 06 	sts	0x0680, r1
     472:	10 92 81 06 	sts	0x0681, r1
  for(uint8_t i = 0; i < nRF24L01P_ERROR_FLAGS; i++){
    nRF24L01P.Errors[0] = 0;
  }
}
     476:	08 95       	ret

00000478 <nRF24L01P_Set_SCK_DD>:


/* set data direction of associated gpio */

void nRF24L01P_Set_SCK_DD(uint8_t state){
  if(state){
     478:	88 23       	and	r24, r24
     47a:	11 f0       	breq	.+4      	; 0x480 <nRF24L01P_Set_SCK_DD+0x8>
    nRF24L01P_SCK_DDR |= (1<<nRF24L01P_SCK_bp);
     47c:	25 9a       	sbi	0x04, 5	; 4
     47e:	08 95       	ret
  }else{
    nRF24L01P_SCK_DDR &=~(1<<nRF24L01P_SCK_bp);
     480:	25 98       	cbi	0x04, 5	; 4
     482:	08 95       	ret

00000484 <nRF24L01P_Set_MISO_DD>:
  }
}

void nRF24L01P_Set_MISO_DD(uint8_t state){
  if(state){
     484:	88 23       	and	r24, r24
     486:	11 f0       	breq	.+4      	; 0x48c <nRF24L01P_Set_MISO_DD+0x8>
    nRF24L01P_MISO_DDR |= (1<<nRF24L01P_MISO_bp);
     488:	24 9a       	sbi	0x04, 4	; 4
     48a:	08 95       	ret
  }else{
    nRF24L01P_MISO_DDR &=~(1<<nRF24L01P_MISO_bp);
     48c:	24 98       	cbi	0x04, 4	; 4
     48e:	08 95       	ret

00000490 <nRF24L01P_Set_MOSI_DD>:
  }
}

void nRF24L01P_Set_MOSI_DD(uint8_t state){
  if(state){
     490:	88 23       	and	r24, r24
     492:	11 f0       	breq	.+4      	; 0x498 <nRF24L01P_Set_MOSI_DD+0x8>
    nRF24L01P_MOSI_DDR |= (1<<nRF24L01P_MOSI_bp);
     494:	23 9a       	sbi	0x04, 3	; 4
     496:	08 95       	ret
  }else{
    nRF24L01P_MOSI_DDR &=~(1<<nRF24L01P_MOSI_bp);
     498:	23 98       	cbi	0x04, 3	; 4
     49a:	08 95       	ret

0000049c <nRF24L01P_Set_CSN_DD>:
  }
}


void nRF24L01P_Set_CSN_DD(uint8_t state){
  if(state){
     49c:	88 23       	and	r24, r24
     49e:	11 f0       	breq	.+4      	; 0x4a4 <nRF24L01P_Set_CSN_DD+0x8>
    nRF24L01P_CSN_DDR |= (1<<nRF24L01P_CSN_bp);
     4a0:	22 9a       	sbi	0x04, 2	; 4
     4a2:	08 95       	ret
  }else{
    nRF24L01P_CSN_DDR &=~(1<<nRF24L01P_CSN_bp);
     4a4:	22 98       	cbi	0x04, 2	; 4
     4a6:	08 95       	ret

000004a8 <nRF24L01P_Set_CE_DD>:
  }
}

void nRF24L01P_Set_CE_DD(uint8_t state){
  if(state){
     4a8:	88 23       	and	r24, r24
     4aa:	11 f0       	breq	.+4      	; 0x4b0 <nRF24L01P_Set_CE_DD+0x8>
    nRF24L01P_CE_DDR |= (1<<nRF24L01P_CE_bp);
     4ac:	38 9a       	sbi	0x07, 0	; 7
     4ae:	08 95       	ret
  }else{
    nRF24L01P_CE_DDR &=~(1<<nRF24L01P_CE_bp);
     4b0:	38 98       	cbi	0x07, 0	; 7
     4b2:	08 95       	ret

000004b4 <nRF24L01P_Set_SCK>:


/* set output state of associated gpio */

void nRF24L01P_Set_SCK(uint8_t state){
  if(state){
     4b4:	88 23       	and	r24, r24
     4b6:	11 f0       	breq	.+4      	; 0x4bc <nRF24L01P_Set_SCK+0x8>
    nRF24L01P_SCK_PORT |= (1<<nRF24L01P_SCK_bp);
     4b8:	2d 9a       	sbi	0x05, 5	; 5
     4ba:	08 95       	ret
  }else{
    nRF24L01P_SCK_PORT &=~(1<<nRF24L01P_SCK_bp);
     4bc:	2d 98       	cbi	0x05, 5	; 5
     4be:	08 95       	ret

000004c0 <nRF24L01P_Set_MISO>:
  }
}

void nRF24L01P_Set_MISO(uint8_t state){
  if(state){
     4c0:	88 23       	and	r24, r24
     4c2:	11 f0       	breq	.+4      	; 0x4c8 <nRF24L01P_Set_MISO+0x8>
    nRF24L01P_MISO_PORT |= (1<<nRF24L01P_MISO_bp);
     4c4:	2c 9a       	sbi	0x05, 4	; 5
     4c6:	08 95       	ret
  }else{
    nRF24L01P_MISO_PORT &=~(1<<nRF24L01P_MISO_bp);
     4c8:	2c 98       	cbi	0x05, 4	; 5
     4ca:	08 95       	ret

000004cc <nRF24L01P_Set_MOSI>:
  }
}

void nRF24L01P_Set_MOSI(uint8_t state){
  if(state){
     4cc:	88 23       	and	r24, r24
     4ce:	11 f0       	breq	.+4      	; 0x4d4 <nRF24L01P_Set_MOSI+0x8>
    nRF24L01P_MOSI_PORT |= (1<<nRF24L01P_MOSI_bp);
     4d0:	2b 9a       	sbi	0x05, 3	; 5
     4d2:	08 95       	ret
  }else{
    nRF24L01P_MOSI_PORT &=~(1<<nRF24L01P_MOSI_bp);
     4d4:	2b 98       	cbi	0x05, 3	; 5
     4d6:	08 95       	ret

000004d8 <nRF24L01P_Set_CSN>:
  }
}

void nRF24L01P_Set_CSN(uint8_t state){
  if(state){
     4d8:	88 23       	and	r24, r24
     4da:	11 f0       	breq	.+4      	; 0x4e0 <nRF24L01P_Set_CSN+0x8>
    nRF24L01P_CSN_PORT |= (1<<nRF24L01P_CSN_bp);
     4dc:	2a 9a       	sbi	0x05, 2	; 5
     4de:	08 95       	ret
  }else{
    nRF24L01P_CSN_PORT &=~(1<<nRF24L01P_CSN_bp);
     4e0:	2a 98       	cbi	0x05, 2	; 5
     4e2:	08 95       	ret

000004e4 <nRF24L01P_Set_CE>:
  }
}

void nRF24L01P_Set_CE(uint8_t state){
  if(state){
     4e4:	88 23       	and	r24, r24
     4e6:	11 f0       	breq	.+4      	; 0x4ec <nRF24L01P_Set_CE+0x8>
    nRF24L01P_CE_PORT |= (1<<nRF24L01P_CE_bp);
     4e8:	40 9a       	sbi	0x08, 0	; 8
     4ea:	08 95       	ret
  }else{
    nRF24L01P_CE_PORT &=~(1<<nRF24L01P_CE_bp);
     4ec:	40 98       	cbi	0x08, 0	; 8
     4ee:	08 95       	ret

000004f0 <nRF24L01P_GPIO_Enable>:

/* set data direction of associated gpio */

void nRF24L01P_Set_SCK_DD(uint8_t state){
  if(state){
    nRF24L01P_SCK_DDR |= (1<<nRF24L01P_SCK_bp);
     4f0:	25 9a       	sbi	0x04, 5	; 4

void nRF24L01P_Set_MISO_DD(uint8_t state){
  if(state){
    nRF24L01P_MISO_DDR |= (1<<nRF24L01P_MISO_bp);
  }else{
    nRF24L01P_MISO_DDR &=~(1<<nRF24L01P_MISO_bp);
     4f2:	24 98       	cbi	0x04, 4	; 4
  }
}

void nRF24L01P_Set_MOSI_DD(uint8_t state){
  if(state){
    nRF24L01P_MOSI_DDR |= (1<<nRF24L01P_MOSI_bp);
     4f4:	23 9a       	sbi	0x04, 3	; 4
}


void nRF24L01P_Set_CSN_DD(uint8_t state){
  if(state){
    nRF24L01P_CSN_DDR |= (1<<nRF24L01P_CSN_bp);
     4f6:	22 9a       	sbi	0x04, 2	; 4
  }
}

void nRF24L01P_Set_CE_DD(uint8_t state){
  if(state){
    nRF24L01P_CE_DDR |= (1<<nRF24L01P_CE_bp);
     4f8:	38 9a       	sbi	0x07, 0	; 7
  }
}

void nRF24L01P_Set_CSN(uint8_t state){
  if(state){
    nRF24L01P_CSN_PORT |= (1<<nRF24L01P_CSN_bp);
     4fa:	2a 9a       	sbi	0x05, 2	; 5

void nRF24L01P_Set_CE(uint8_t state){
  if(state){
    nRF24L01P_CE_PORT |= (1<<nRF24L01P_CE_bp);
  }else{
    nRF24L01P_CE_PORT &=~(1<<nRF24L01P_CE_bp);
     4fc:	40 98       	cbi	0x08, 0	; 8
  nRF24L01P_Set_CSN_DD(1);
  nRF24L01P_Set_CE_DD(1);
  nRF24L01P_Set_CSN(1);
  nRF24L01P_Set_CE(0);
  #ifdef nRF24L01P_USE_HW_SPI
  DDRB |= (1<<2);
     4fe:	22 9a       	sbi	0x04, 2	; 4
  #endif
}
     500:	08 95       	ret

00000502 <nRF24L01P_GPIO_Disable>:

/* set data direction of associated gpio */

void nRF24L01P_Set_SCK_DD(uint8_t state){
  if(state){
    nRF24L01P_SCK_DDR |= (1<<nRF24L01P_SCK_bp);
     502:	25 9a       	sbi	0x04, 5	; 4
  }
}

void nRF24L01P_Set_MISO_DD(uint8_t state){
  if(state){
    nRF24L01P_MISO_DDR |= (1<<nRF24L01P_MISO_bp);
     504:	24 9a       	sbi	0x04, 4	; 4
  }
}

void nRF24L01P_Set_MOSI_DD(uint8_t state){
  if(state){
    nRF24L01P_MOSI_DDR |= (1<<nRF24L01P_MOSI_bp);
     506:	23 9a       	sbi	0x04, 3	; 4
}


void nRF24L01P_Set_CSN_DD(uint8_t state){
  if(state){
    nRF24L01P_CSN_DDR |= (1<<nRF24L01P_CSN_bp);
     508:	22 9a       	sbi	0x04, 2	; 4
  }
}

void nRF24L01P_Set_CE_DD(uint8_t state){
  if(state){
    nRF24L01P_CE_DDR |= (1<<nRF24L01P_CE_bp);
     50a:	38 9a       	sbi	0x07, 0	; 7

void nRF24L01P_Set_SCK(uint8_t state){
  if(state){
    nRF24L01P_SCK_PORT |= (1<<nRF24L01P_SCK_bp);
  }else{
    nRF24L01P_SCK_PORT &=~(1<<nRF24L01P_SCK_bp);
     50c:	2d 98       	cbi	0x05, 5	; 5

void nRF24L01P_Set_MISO(uint8_t state){
  if(state){
    nRF24L01P_MISO_PORT |= (1<<nRF24L01P_MISO_bp);
  }else{
    nRF24L01P_MISO_PORT &=~(1<<nRF24L01P_MISO_bp);
     50e:	2c 98       	cbi	0x05, 4	; 5

void nRF24L01P_Set_MOSI(uint8_t state){
  if(state){
    nRF24L01P_MOSI_PORT |= (1<<nRF24L01P_MOSI_bp);
  }else{
    nRF24L01P_MOSI_PORT &=~(1<<nRF24L01P_MOSI_bp);
     510:	2b 98       	cbi	0x05, 3	; 5
  }
}

void nRF24L01P_Set_CSN(uint8_t state){
  if(state){
    nRF24L01P_CSN_PORT |= (1<<nRF24L01P_CSN_bp);
     512:	2a 9a       	sbi	0x05, 2	; 5

void nRF24L01P_Set_CE(uint8_t state){
  if(state){
    nRF24L01P_CE_PORT |= (1<<nRF24L01P_CE_bp);
  }else{
    nRF24L01P_CE_PORT &=~(1<<nRF24L01P_CE_bp);
     514:	40 98       	cbi	0x08, 0	; 8
  nRF24L01P_Set_SCK(0);
  nRF24L01P_Set_MISO(0);
  nRF24L01P_Set_MOSI(0);
  nRF24L01P_Set_CSN(1);
  nRF24L01P_Set_CE(0);
}
     516:	08 95       	ret

00000518 <nRF24L01P_SPI_Enable>:

/* configuration of spi for different states */

void nRF24L01P_SPI_Enable(void){
  #ifdef nRF24L01P_USE_HW_SPI
  SPCR = (1<<SPE)|(1<<MSTR);                     
     518:	80 e5       	ldi	r24, 0x50	; 80
     51a:	8c bd       	out	0x2c, r24	; 44
  SPSR = (1<<SPI2X);
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	8d bd       	out	0x2d, r24	; 45
  SPSR = 0;
     520:	1d bc       	out	0x2d, r1	; 45
  #endif
}
     522:	08 95       	ret

00000524 <nRF24L01P_SPI_Disable>:

void nRF24L01P_SPI_Disable(void){
  #ifdef nRF24L01P_USE_HW_SPI
  SPCR = 0x00;                     
     524:	1c bc       	out	0x2c, r1	; 44
  SPSR = 0x00;
     526:	1d bc       	out	0x2d, r1	; 45
  #endif
}
     528:	08 95       	ret

0000052a <nRF24L01P_Enable>:


/* configuration of gpio & spi for different states */

void nRF24L01P_Enable(void){
  nRF24L01P_GPIO_Enable();
     52a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <nRF24L01P_GPIO_Enable>

/* configuration of spi for different states */

void nRF24L01P_SPI_Enable(void){
  #ifdef nRF24L01P_USE_HW_SPI
  SPCR = (1<<SPE)|(1<<MSTR);                     
     52e:	80 e5       	ldi	r24, 0x50	; 80
     530:	8c bd       	out	0x2c, r24	; 44
  SPSR = (1<<SPI2X);
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	8d bd       	out	0x2d, r24	; 45
  SPSR = 0;
     536:	1d bc       	out	0x2d, r1	; 45
/* configuration of gpio & spi for different states */

void nRF24L01P_Enable(void){
  nRF24L01P_GPIO_Enable();
  nRF24L01P_SPI_Enable();
  nRF24L01P.Enable = 1;
     538:	80 93 61 06 	sts	0x0661, r24
}
     53c:	08 95       	ret

0000053e <nRF24L01P_Disable>:
  #endif
}

void nRF24L01P_SPI_Disable(void){
  #ifdef nRF24L01P_USE_HW_SPI
  SPCR = 0x00;                     
     53e:	1c bc       	out	0x2c, r1	; 44
  SPSR = 0x00;
     540:	1d bc       	out	0x2d, r1	; 45
  nRF24L01P.Enable = 1;
}

void nRF24L01P_Disable(void){
  nRF24L01P_SPI_Disable();
  nRF24L01P_GPIO_Disable();
     542:	0e 94 81 02 	call	0x502	; 0x502 <nRF24L01P_GPIO_Disable>
  nRF24L01P.Enable = 0;
     546:	10 92 61 06 	sts	0x0661, r1
}
     54a:	08 95       	ret

0000054c <nRF24L01P_Error_Clear>:


/* error handling */

void nRF24L01P_Error_Clear(void){
  nRF24L01P.Error = 0;
     54c:	10 92 80 06 	sts	0x0680, r1
}
     550:	08 95       	ret

00000552 <nRF24L01P_Error_Clear_Ticks>:

void nRF24L01P_Error_Clear_Ticks(void){
  nRF24L01P.ErrorTicks = 0;
     552:	10 92 7f 06 	sts	0x067F, r1
     556:	10 92 7e 06 	sts	0x067E, r1
}
     55a:	08 95       	ret

0000055c <nRF24L01P_Error_Clear_Buf>:

void nRF24L01P_Error_Clear_Buf(void){
     55c:	e1 e8       	ldi	r30, 0x81	; 129
     55e:	f6 e0       	ldi	r31, 0x06	; 6
  for(uint8_t i = 0; i < nRF24L01P_ERROR_FLAGS; i++){
    nRF24L01P.Errors[i] = 0;
     560:	11 92       	st	Z+, r1
void nRF24L01P_Error_Clear_Ticks(void){
  nRF24L01P.ErrorTicks = 0;
}

void nRF24L01P_Error_Clear_Buf(void){
  for(uint8_t i = 0; i < nRF24L01P_ERROR_FLAGS; i++){
     562:	86 e0       	ldi	r24, 0x06	; 6
     564:	eb 38       	cpi	r30, 0x8B	; 139
     566:	f8 07       	cpc	r31, r24
     568:	d9 f7       	brne	.-10     	; 0x560 <nRF24L01P_Error_Clear_Buf+0x4>
    nRF24L01P.Errors[i] = 0;
  }
}
     56a:	08 95       	ret

0000056c <nRF24L01P_Error_Clear_All>:


/* error handling */

void nRF24L01P_Error_Clear(void){
  nRF24L01P.Error = 0;
     56c:	10 92 80 06 	sts	0x0680, r1
}

void nRF24L01P_Error_Clear_Ticks(void){
  nRF24L01P.ErrorTicks = 0;
     570:	10 92 7f 06 	sts	0x067F, r1
     574:	10 92 7e 06 	sts	0x067E, r1
     578:	e1 e8       	ldi	r30, 0x81	; 129
     57a:	f6 e0       	ldi	r31, 0x06	; 6
}

void nRF24L01P_Error_Clear_Buf(void){
  for(uint8_t i = 0; i < nRF24L01P_ERROR_FLAGS; i++){
    nRF24L01P.Errors[i] = 0;
     57c:	11 92       	st	Z+, r1
void nRF24L01P_Error_Clear_Ticks(void){
  nRF24L01P.ErrorTicks = 0;
}

void nRF24L01P_Error_Clear_Buf(void){
  for(uint8_t i = 0; i < nRF24L01P_ERROR_FLAGS; i++){
     57e:	86 e0       	ldi	r24, 0x06	; 6
     580:	eb 38       	cpi	r30, 0x8B	; 139
     582:	f8 07       	cpc	r31, r24
     584:	d9 f7       	brne	.-10     	; 0x57c <nRF24L01P_Error_Clear_All+0x10>

void nRF24L01P_Error_Clear_All(void){
  nRF24L01P_Error_Clear();
  nRF24L01P_Error_Clear_Ticks();
  nRF24L01P_Error_Clear_Buf();
}
     586:	08 95       	ret

00000588 <nRF24L01P_Error_Set>:

void nRF24L01P_Error_Set(uint8_t val){
  nRF24L01P.Error = val;
     588:	80 93 80 06 	sts	0x0680, r24
}
     58c:	08 95       	ret

0000058e <nRF24L01P_Error_Get>:

uint8_t nRF24L01P_Error_Get(void){
  return nRF24L01P.Error;
}
     58e:	80 91 80 06 	lds	r24, 0x0680
     592:	08 95       	ret

00000594 <nRF24L01P_Error_Get_Index>:

uint8_t nRF24L01P_Error_Get_Index(uint8_t index){
     594:	e0 e6       	ldi	r30, 0x60	; 96
     596:	f6 e0       	ldi	r31, 0x06	; 6
     598:	e8 0f       	add	r30, r24
     59a:	f1 1d       	adc	r31, r1
  return nRF24L01P.Errors[index];
}
     59c:	81 a1       	ldd	r24, Z+33	; 0x21
     59e:	08 95       	ret

000005a0 <nRF24L01P_Error_Timeout>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5a0:	e8 ec       	ldi	r30, 0xC8	; 200
     5a2:	f0 e0       	ldi	r31, 0x00	; 0
     5a4:	31 97       	sbiw	r30, 0x01	; 1
     5a6:	f1 f7       	brne	.-4      	; 0x5a4 <nRF24L01P_Error_Timeout+0x4>

uint8_t nRF24L01P_Error_Timeout(uint16_t ticks){
  _delay_us(100);
  nRF24L01P.ErrorTicks++;
     5a8:	20 91 7e 06 	lds	r18, 0x067E
     5ac:	30 91 7f 06 	lds	r19, 0x067F
     5b0:	2f 5f       	subi	r18, 0xFF	; 255
     5b2:	3f 4f       	sbci	r19, 0xFF	; 255
     5b4:	30 93 7f 06 	sts	0x067F, r19
     5b8:	20 93 7e 06 	sts	0x067E, r18
     5bc:	40 e0       	ldi	r20, 0x00	; 0
     5be:	82 17       	cp	r24, r18
     5c0:	93 07       	cpc	r25, r19
     5c2:	08 f4       	brcc	.+2      	; 0x5c6 <nRF24L01P_Error_Timeout+0x26>
     5c4:	41 e0       	ldi	r20, 0x01	; 1
	return 1;
  }
  else{
    return 0;
  }
}
     5c6:	84 2f       	mov	r24, r20
     5c8:	08 95       	ret

000005ca <nRF24L01P_Error_Free>:

uint8_t nRF24L01P_Error_Free(void){
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	80 91 80 06 	lds	r24, 0x0680
     5d0:	88 23       	and	r24, r24
     5d2:	09 f4       	brne	.+2      	; 0x5d6 <nRF24L01P_Error_Free+0xc>
     5d4:	91 e0       	ldi	r25, 0x01	; 1
    return 1;
  }
  else{
    return 0;
  }
}
     5d6:	89 2f       	mov	r24, r25
     5d8:	08 95       	ret

000005da <nRF24L01P_CRC>:


/* crc calcultions and validation */

uint16_t nRF24L01P_CRC(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
     5da:	36 2f       	mov	r19, r22
     5dc:	20 e0       	ldi	r18, 0x00	; 0
     5de:	28 27       	eor	r18, r24
     5e0:	39 27       	eor	r19, r25
     5e2:	40 e0       	ldi	r20, 0x00	; 0
  for(uint8_t i = 0; i < 8; i++){
    if(crc & 0x8000){
	  crc = (crc<<1)^0x1021;
     5e4:	61 e2       	ldi	r22, 0x21	; 33
     5e6:	70 e1       	ldi	r23, 0x10	; 16
     5e8:	c9 01       	movw	r24, r18
     5ea:	88 0f       	add	r24, r24
     5ec:	99 1f       	adc	r25, r25
/* crc calcultions and validation */

uint16_t nRF24L01P_CRC(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
  for(uint8_t i = 0; i < 8; i++){
    if(crc & 0x8000){
     5ee:	37 ff       	sbrs	r19, 7
     5f0:	04 c0       	rjmp	.+8      	; 0x5fa <nRF24L01P_CRC+0x20>
	  crc = (crc<<1)^0x1021;
     5f2:	9c 01       	movw	r18, r24
     5f4:	26 27       	eor	r18, r22
     5f6:	37 27       	eor	r19, r23
     5f8:	01 c0       	rjmp	.+2      	; 0x5fc <nRF24L01P_CRC+0x22>
	}
    else{
	  crc <<= 1;
     5fa:	9c 01       	movw	r18, r24

/* crc calcultions and validation */

uint16_t nRF24L01P_CRC(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
  for(uint8_t i = 0; i < 8; i++){
     5fc:	4f 5f       	subi	r20, 0xFF	; 255
     5fe:	48 30       	cpi	r20, 0x08	; 8
     600:	99 f7       	brne	.-26     	; 0x5e8 <nRF24L01P_CRC+0xe>
    else{
	  crc <<= 1;
	}
  }
  return crc;
}
     602:	c9 01       	movw	r24, r18
     604:	08 95       	ret

00000606 <nRF24L01P_CRC_Block>:

uint16_t nRF24L01P_CRC_Block(uint8_t *buf, uint8_t len){
     606:	0f 93       	push	r16
     608:	1f 93       	push	r17
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	06 2f       	mov	r16, r22
     610:	ec 01       	movw	r28, r24
     612:	20 e0       	ldi	r18, 0x00	; 0
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	10 e0       	ldi	r17, 0x00	; 0
     618:	06 c0       	rjmp	.+12     	; 0x626 <nRF24L01P_CRC_Block+0x20>
  uint16_t crc = 0;
  for(uint8_t i = 0; i < len; i++){
    crc = nRF24L01P_CRC(crc,buf[i]);
     61a:	c9 01       	movw	r24, r18
     61c:	69 91       	ld	r22, Y+
     61e:	0e 94 ed 02 	call	0x5da	; 0x5da <nRF24L01P_CRC>
     622:	9c 01       	movw	r18, r24
  return crc;
}

uint16_t nRF24L01P_CRC_Block(uint8_t *buf, uint8_t len){
  uint16_t crc = 0;
  for(uint8_t i = 0; i < len; i++){
     624:	1f 5f       	subi	r17, 0xFF	; 255
     626:	10 17       	cp	r17, r16
     628:	c0 f3       	brcs	.-16     	; 0x61a <nRF24L01P_CRC_Block+0x14>
    crc = nRF24L01P_CRC(crc,buf[i]);
  }
  return crc;
}
     62a:	c9 01       	movw	r24, r18
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	1f 91       	pop	r17
     632:	0f 91       	pop	r16
     634:	08 95       	ret

00000636 <nRF24L01P_SPI_Transfer>:



/* spi transfer */

uint8_t nRF24L01P_SPI_Transfer(uint8_t data){
     636:	98 2f       	mov	r25, r24
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     638:	80 91 80 06 	lds	r24, 0x0680
     63c:	88 23       	and	r24, r24
     63e:	69 f4       	brne	.+26     	; 0x65a <nRF24L01P_SPI_Transfer+0x24>

/* spi transfer */

uint8_t nRF24L01P_SPI_Transfer(uint8_t data){
  if(nRF24L01P_Error_Free()){
    SPDR = data;
     640:	9e bd       	out	0x2e, r25	; 46
     642:	90 e0       	ldi	r25, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     644:	2a e1       	ldi	r18, 0x1A	; 26
     646:	0b c0       	rjmp	.+22     	; 0x65e <nRF24L01P_SPI_Transfer+0x28>
     648:	82 2f       	mov	r24, r18
     64a:	8a 95       	dec	r24
     64c:	f1 f7       	brne	.-4      	; 0x64a <nRF24L01P_SPI_Transfer+0x14>
    uint8_t i = 0;
    while(!(SPSR & (1 << SPIF))){
	  _delay_us(10);
	  i++;
     64e:	9f 5f       	subi	r25, 0xFF	; 255
	  if(i > 200){
     650:	99 3c       	cpi	r25, 0xC9	; 201
     652:	29 f4       	brne	.+10     	; 0x65e <nRF24L01P_SPI_Transfer+0x28>
  nRF24L01P_Error_Clear_Ticks();
  nRF24L01P_Error_Clear_Buf();
}

void nRF24L01P_Error_Set(uint8_t val){
  nRF24L01P.Error = val;
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	80 93 80 06 	sts	0x0680, r24
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	08 95       	ret

uint8_t nRF24L01P_SPI_Transfer(uint8_t data){
  if(nRF24L01P_Error_Free()){
    SPDR = data;
    uint8_t i = 0;
    while(!(SPSR & (1 << SPIF))){
     65e:	0d b4       	in	r0, 0x2d	; 45
     660:	07 fe       	sbrs	r0, 7
     662:	f2 cf       	rjmp	.-28     	; 0x648 <nRF24L01P_SPI_Transfer+0x12>
	  if(i > 200){
	    nRF24L01P_Error_Set(0x01);
	    return 0;
	  }
    }
	return SPDR;
     664:	8e b5       	in	r24, 0x2e	; 46
  }else{
    return 0;
  }
}
     666:	08 95       	ret

00000668 <nRF24L01P_ReadWrite_Register>:


/* register read write */

void nRF24L01P_ReadWrite_Register(uint8_t reg, uint8_t rw, uint8_t *data, uint8_t len){
     668:	df 92       	push	r13
     66a:	ef 92       	push	r14
     66c:	ff 92       	push	r15
     66e:	0f 93       	push	r16
     670:	1f 93       	push	r17
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
     676:	18 2f       	mov	r17, r24
     678:	06 2f       	mov	r16, r22
     67a:	f4 2e       	mov	r15, r20
     67c:	e5 2e       	mov	r14, r21
     67e:	d2 2e       	mov	r13, r18
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     680:	80 91 80 06 	lds	r24, 0x0680
     684:	88 23       	and	r24, r24
     686:	59 f5       	brne	.+86     	; 0x6de <nRF24L01P_ReadWrite_Register+0x76>

/* register read write */

void nRF24L01P_ReadWrite_Register(uint8_t reg, uint8_t rw, uint8_t *data, uint8_t len){
  if(nRF24L01P_Error_Free()){
    if(nRF24L01P.Enable == 0){
     688:	80 91 61 06 	lds	r24, 0x0661
     68c:	88 23       	and	r24, r24
     68e:	11 f4       	brne	.+4      	; 0x694 <nRF24L01P_ReadWrite_Register+0x2c>
      nRF24L01P_Enable();
     690:	0e 94 95 02 	call	0x52a	; 0x52a <nRF24L01P_Enable>

void nRF24L01P_Set_CSN(uint8_t state){
  if(state){
    nRF24L01P_CSN_PORT |= (1<<nRF24L01P_CSN_bp);
  }else{
    nRF24L01P_CSN_PORT &=~(1<<nRF24L01P_CSN_bp);
     694:	2a 98       	cbi	0x05, 2	; 5
  if(nRF24L01P_Error_Free()){
    if(nRF24L01P.Enable == 0){
      nRF24L01P_Enable();
    }
    nRF24L01P_Set_CSN(0);
    if(rw == 0){
     696:	00 23       	and	r16, r16
     698:	89 f4       	brne	.+34     	; 0x6bc <nRF24L01P_ReadWrite_Register+0x54>
      reg |= 0x20;
	  nRF24L01P_SPI_Transfer(reg);
     69a:	81 2f       	mov	r24, r17
     69c:	80 62       	ori	r24, 0x20	; 32
     69e:	0e 94 1b 03 	call	0x636	; 0x636 <nRF24L01P_SPI_Transfer>
     6a2:	8f 2d       	mov	r24, r15
     6a4:	9e 2d       	mov	r25, r14
     6a6:	9c 01       	movw	r18, r24
     6a8:	e9 01       	movw	r28, r18
     6aa:	10 e0       	ldi	r17, 0x00	; 0
     6ac:	04 c0       	rjmp	.+8      	; 0x6b6 <nRF24L01P_ReadWrite_Register+0x4e>
	  for(uint8_t i = 0; i < len; i++){
	    nRF24L01P_SPI_Transfer(data[i]);
     6ae:	89 91       	ld	r24, Y+
     6b0:	0e 94 1b 03 	call	0x636	; 0x636 <nRF24L01P_SPI_Transfer>
    }
    nRF24L01P_Set_CSN(0);
    if(rw == 0){
      reg |= 0x20;
	  nRF24L01P_SPI_Transfer(reg);
	  for(uint8_t i = 0; i < len; i++){
     6b4:	1f 5f       	subi	r17, 0xFF	; 255
     6b6:	1d 15       	cp	r17, r13
     6b8:	d0 f3       	brcs	.-12     	; 0x6ae <nRF24L01P_ReadWrite_Register+0x46>
     6ba:	10 c0       	rjmp	.+32     	; 0x6dc <nRF24L01P_ReadWrite_Register+0x74>
	    nRF24L01P_SPI_Transfer(data[i]);
	  }
    }else{
      nRF24L01P_SPI_Transfer(reg);
     6bc:	81 2f       	mov	r24, r17
     6be:	0e 94 1b 03 	call	0x636	; 0x636 <nRF24L01P_SPI_Transfer>
     6c2:	8f 2d       	mov	r24, r15
     6c4:	9e 2d       	mov	r25, r14
     6c6:	9c 01       	movw	r18, r24
     6c8:	e9 01       	movw	r28, r18
     6ca:	10 e0       	ldi	r17, 0x00	; 0
     6cc:	05 c0       	rjmp	.+10     	; 0x6d8 <nRF24L01P_ReadWrite_Register+0x70>
      for(uint8_t i = 0; i < len; i++){
        data[i] = nRF24L01P_SPI_Transfer(0xFF);
     6ce:	8f ef       	ldi	r24, 0xFF	; 255
     6d0:	0e 94 1b 03 	call	0x636	; 0x636 <nRF24L01P_SPI_Transfer>
     6d4:	89 93       	st	Y+, r24
	  for(uint8_t i = 0; i < len; i++){
	    nRF24L01P_SPI_Transfer(data[i]);
	  }
    }else{
      nRF24L01P_SPI_Transfer(reg);
      for(uint8_t i = 0; i < len; i++){
     6d6:	1f 5f       	subi	r17, 0xFF	; 255
     6d8:	1d 15       	cp	r17, r13
     6da:	c8 f3       	brcs	.-14     	; 0x6ce <nRF24L01P_ReadWrite_Register+0x66>
  }
}

void nRF24L01P_Set_CSN(uint8_t state){
  if(state){
    nRF24L01P_CSN_PORT |= (1<<nRF24L01P_CSN_bp);
     6dc:	2a 9a       	sbi	0x05, 2	; 5
        data[i] = nRF24L01P_SPI_Transfer(0xFF);
      }
    }
    nRF24L01P_Set_CSN(1);
  }
}
     6de:	df 91       	pop	r29
     6e0:	cf 91       	pop	r28
     6e2:	1f 91       	pop	r17
     6e4:	0f 91       	pop	r16
     6e6:	ff 90       	pop	r15
     6e8:	ef 90       	pop	r14
     6ea:	df 90       	pop	r13
     6ec:	08 95       	ret

000006ee <nRF24L01P_ReadModifyWrite_Register>:

void nRF24L01P_ReadModifyWrite_Register( uint8_t reg, uint8_t bit_pos, uint8_t bit_val ){
     6ee:	ff 92       	push	r15
     6f0:	0f 93       	push	r16
     6f2:	1f 93       	push	r17
     6f4:	f8 2e       	mov	r15, r24
     6f6:	06 2f       	mov	r16, r22
     6f8:	14 2f       	mov	r17, r20
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     6fa:	80 91 80 06 	lds	r24, 0x0680
     6fe:	88 23       	and	r24, r24
     700:	41 f5       	brne	.+80     	; 0x752 <nRF24L01P_ReadModifyWrite_Register+0x64>
  }
}

void nRF24L01P_ReadModifyWrite_Register( uint8_t reg, uint8_t bit_pos, uint8_t bit_val ){
  if(nRF24L01P_Error_Free()){
    nRF24L01P_ReadWrite_Register( reg, 1, nRF24L01P.TempBuf, 1);
     702:	8f 2d       	mov	r24, r15
     704:	61 e0       	ldi	r22, 0x01	; 1
     706:	42 e6       	ldi	r20, 0x62	; 98
     708:	56 e0       	ldi	r21, 0x06	; 6
     70a:	21 e0       	ldi	r18, 0x01	; 1
     70c:	0e 94 34 03 	call	0x668	; 0x668 <nRF24L01P_ReadWrite_Register>
     710:	20 91 62 06 	lds	r18, 0x0662
    if(bit_val){
     714:	11 23       	and	r17, r17
     716:	59 f0       	breq	.+22     	; 0x72e <nRF24L01P_ReadModifyWrite_Register+0x40>
      nRF24L01P.TempBuf[0]|=(1<<bit_pos);
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	02 c0       	rjmp	.+4      	; 0x722 <nRF24L01P_ReadModifyWrite_Register+0x34>
     71e:	88 0f       	add	r24, r24
     720:	99 1f       	adc	r25, r25
     722:	0a 95       	dec	r16
     724:	e2 f7       	brpl	.-8      	; 0x71e <nRF24L01P_ReadModifyWrite_Register+0x30>
     726:	28 2b       	or	r18, r24
     728:	20 93 62 06 	sts	0x0662, r18
     72c:	0b c0       	rjmp	.+22     	; 0x744 <nRF24L01P_ReadModifyWrite_Register+0x56>
    }else{
      nRF24L01P.TempBuf[0]&=~(1<<bit_pos);
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	02 c0       	rjmp	.+4      	; 0x738 <nRF24L01P_ReadModifyWrite_Register+0x4a>
     734:	88 0f       	add	r24, r24
     736:	99 1f       	adc	r25, r25
     738:	0a 95       	dec	r16
     73a:	e2 f7       	brpl	.-8      	; 0x734 <nRF24L01P_ReadModifyWrite_Register+0x46>
     73c:	80 95       	com	r24
     73e:	82 23       	and	r24, r18
     740:	80 93 62 06 	sts	0x0662, r24
    }
    nRF24L01P_ReadWrite_Register( reg, 0, nRF24L01P.TempBuf, 1 );
     744:	8f 2d       	mov	r24, r15
     746:	60 e0       	ldi	r22, 0x00	; 0
     748:	42 e6       	ldi	r20, 0x62	; 98
     74a:	56 e0       	ldi	r21, 0x06	; 6
     74c:	21 e0       	ldi	r18, 0x01	; 1
     74e:	0e 94 34 03 	call	0x668	; 0x668 <nRF24L01P_ReadWrite_Register>
  }
}
     752:	1f 91       	pop	r17
     754:	0f 91       	pop	r16
     756:	ff 90       	pop	r15
     758:	08 95       	ret

0000075a <nRF24L01P_Flush_Tx_Buf>:


/* tx and rx buffer flush */

void nRF24L01P_Flush_Tx_Buf(void){
  nRF24L01P_ReadWrite_Register( 0xE1, 0, nRF24L01P.TempBuf, 0 );
     75a:	81 ee       	ldi	r24, 0xE1	; 225
     75c:	60 e0       	ldi	r22, 0x00	; 0
     75e:	42 e6       	ldi	r20, 0x62	; 98
     760:	56 e0       	ldi	r21, 0x06	; 6
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	0e 94 34 03 	call	0x668	; 0x668 <nRF24L01P_ReadWrite_Register>
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     768:	80 91 80 06 	lds	r24, 0x0680
     76c:	88 23       	and	r24, r24
     76e:	19 f0       	breq	.+6      	; 0x776 <nRF24L01P_Flush_Tx_Buf+0x1c>
  nRF24L01P_Error_Clear_Ticks();
  nRF24L01P_Error_Clear_Buf();
}

void nRF24L01P_Error_Set(uint8_t val){
  nRF24L01P.Error = val;
     770:	82 e0       	ldi	r24, 0x02	; 2
     772:	80 93 80 06 	sts	0x0680, r24
     776:	08 95       	ret

00000778 <nRF24L01P_Flush_Rx_Buf>:
    nRF24L01P_Error_Set(0x02);
  }
}

void nRF24L01P_Flush_Rx_Buf(void){
  nRF24L01P_ReadWrite_Register( 0xE2, 0, nRF24L01P.TempBuf, 0 );
     778:	82 ee       	ldi	r24, 0xE2	; 226
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	42 e6       	ldi	r20, 0x62	; 98
     77e:	56 e0       	ldi	r21, 0x06	; 6
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	0e 94 34 03 	call	0x668	; 0x668 <nRF24L01P_ReadWrite_Register>
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     786:	80 91 80 06 	lds	r24, 0x0680
     78a:	88 23       	and	r24, r24
     78c:	19 f0       	breq	.+6      	; 0x794 <nRF24L01P_Flush_Rx_Buf+0x1c>
  nRF24L01P_Error_Clear_Ticks();
  nRF24L01P_Error_Clear_Buf();
}

void nRF24L01P_Error_Set(uint8_t val){
  nRF24L01P.Error = val;
     78e:	83 e0       	ldi	r24, 0x03	; 3
     790:	80 93 80 06 	sts	0x0680, r24
     794:	08 95       	ret

00000796 <nRF24L01P_Write_Data_Tx_Buf>:



/* read and write in tx and rx fifo */

void nRF24L01P_Write_Data_Tx_Buf(uint8_t *data){
     796:	ac 01       	movw	r20, r24
  nRF24L01P_ReadWrite_Register( 0xA0, 0, data, nRF24L01P_PACKET_LEN );
     798:	80 ea       	ldi	r24, 0xA0	; 160
     79a:	60 e0       	ldi	r22, 0x00	; 0
     79c:	20 e2       	ldi	r18, 0x20	; 32
     79e:	0e 94 34 03 	call	0x668	; 0x668 <nRF24L01P_ReadWrite_Register>
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     7a2:	80 91 80 06 	lds	r24, 0x0680
     7a6:	88 23       	and	r24, r24
     7a8:	19 f0       	breq	.+6      	; 0x7b0 <nRF24L01P_Write_Data_Tx_Buf+0x1a>
  nRF24L01P_Error_Clear_Ticks();
  nRF24L01P_Error_Clear_Buf();
}

void nRF24L01P_Error_Set(uint8_t val){
  nRF24L01P.Error = val;
     7aa:	84 e0       	ldi	r24, 0x04	; 4
     7ac:	80 93 80 06 	sts	0x0680, r24
     7b0:	08 95       	ret

000007b2 <nRF24L01P_Read_Data_Rx_Buf>:
  if( !nRF24L01P_Error_Free() ){
    nRF24L01P_Error_Set(0x04);
  }
}

void nRF24L01P_Read_Data_Rx_Buf(uint8_t *data){
     7b2:	ac 01       	movw	r20, r24
  nRF24L01P_ReadWrite_Register( 0x61, 1, data, nRF24L01P_PACKET_LEN );
     7b4:	81 e6       	ldi	r24, 0x61	; 97
     7b6:	61 e0       	ldi	r22, 0x01	; 1
     7b8:	20 e2       	ldi	r18, 0x20	; 32
     7ba:	0e 94 34 03 	call	0x668	; 0x668 <nRF24L01P_ReadWrite_Register>
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     7be:	80 91 80 06 	lds	r24, 0x0680
     7c2:	88 23       	and	r24, r24
     7c4:	19 f0       	breq	.+6      	; 0x7cc <nRF24L01P_Read_Data_Rx_Buf+0x1a>
  nRF24L01P_Error_Clear_Ticks();
  nRF24L01P_Error_Clear_Buf();
}

void nRF24L01P_Error_Set(uint8_t val){
  nRF24L01P.Error = val;
     7c6:	85 e0       	ldi	r24, 0x05	; 5
     7c8:	80 93 80 06 	sts	0x0680, r24
     7cc:	08 95       	ret

000007ce <nRF24L01P_Tx_Buf_Empty>:
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     7ce:	80 91 80 06 	lds	r24, 0x0680
     7d2:	88 23       	and	r24, r24
     7d4:	11 f0       	breq	.+4      	; 0x7da <nRF24L01P_Tx_Buf_Empty+0xc>
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	08 95       	ret

/* read tx and rx fifo status */

uint8_t nRF24L01P_Tx_Buf_Empty(void){
  if(nRF24L01P_Error_Free()){
    nRF24L01P.TempBuf[0] = 0;
     7da:	10 92 62 06 	sts	0x0662, r1
    nRF24L01P_ReadWrite_Register( 0x17, 1, nRF24L01P.TempBuf, 1);
     7de:	87 e1       	ldi	r24, 0x17	; 23
     7e0:	61 e0       	ldi	r22, 0x01	; 1
     7e2:	42 e6       	ldi	r20, 0x62	; 98
     7e4:	56 e0       	ldi	r21, 0x06	; 6
     7e6:	21 e0       	ldi	r18, 0x01	; 1
     7e8:	0e 94 34 03 	call	0x668	; 0x668 <nRF24L01P_ReadWrite_Register>
     7ec:	80 91 62 06 	lds	r24, 0x0662
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	64 e0       	ldi	r22, 0x04	; 4
     7f4:	96 95       	lsr	r25
     7f6:	87 95       	ror	r24
     7f8:	6a 95       	dec	r22
     7fa:	e1 f7       	brne	.-8      	; 0x7f4 <nRF24L01P_Tx_Buf_Empty+0x26>
     7fc:	81 70       	andi	r24, 0x01	; 1
      return 0;
    }
  }else{
    return 0;
  }
}
     7fe:	08 95       	ret

00000800 <nRF24L01P_Rx_Buf_Not_Empty>:
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     800:	80 91 80 06 	lds	r24, 0x0680
     804:	88 23       	and	r24, r24
     806:	11 f0       	breq	.+4      	; 0x80c <nRF24L01P_Rx_Buf_Not_Empty+0xc>
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	08 95       	ret
}


uint8_t nRF24L01P_Rx_Buf_Not_Empty(void){
  if(nRF24L01P_Error_Free()){
    nRF24L01P.TempBuf[0] = 0;
     80c:	10 92 62 06 	sts	0x0662, r1
    nRF24L01P_ReadWrite_Register( 0x17, 1, nRF24L01P.TempBuf, 1);
     810:	87 e1       	ldi	r24, 0x17	; 23
     812:	61 e0       	ldi	r22, 0x01	; 1
     814:	42 e6       	ldi	r20, 0x62	; 98
     816:	56 e0       	ldi	r21, 0x06	; 6
     818:	21 e0       	ldi	r18, 0x01	; 1
     81a:	0e 94 34 03 	call	0x668	; 0x668 <nRF24L01P_ReadWrite_Register>
     81e:	80 91 62 06 	lds	r24, 0x0662
     822:	80 95       	com	r24
     824:	81 70       	andi	r24, 0x01	; 1
      return 0;
    }
  }else{
    return 0;
  }
}
     826:	08 95       	ret

00000828 <nRF24L01P_Wait_Tx_Complete>:


uint8_t nRF24L01P_Wait_Tx_Complete(void){
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     82c:	80 91 80 06 	lds	r24, 0x0680
     830:	88 23       	and	r24, r24
     832:	c9 f4       	brne	.+50     	; 0x866 <nRF24L01P_Wait_Tx_Complete+0x3e>
void nRF24L01P_Error_Clear(void){
  nRF24L01P.Error = 0;
}

void nRF24L01P_Error_Clear_Ticks(void){
  nRF24L01P.ErrorTicks = 0;
     834:	10 92 7f 06 	sts	0x067F, r1
     838:	10 92 7e 06 	sts	0x067E, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     83c:	c8 ec       	ldi	r28, 0xC8	; 200
     83e:	d0 e0       	ldi	r29, 0x00	; 0
     840:	14 c0       	rjmp	.+40     	; 0x86a <nRF24L01P_Wait_Tx_Complete+0x42>
     842:	ce 01       	movw	r24, r28
     844:	01 97       	sbiw	r24, 0x01	; 1
     846:	f1 f7       	brne	.-4      	; 0x844 <nRF24L01P_Wait_Tx_Complete+0x1c>
  return nRF24L01P.Errors[index];
}

uint8_t nRF24L01P_Error_Timeout(uint16_t ticks){
  _delay_us(100);
  nRF24L01P.ErrorTicks++;
     848:	80 91 7e 06 	lds	r24, 0x067E
     84c:	90 91 7f 06 	lds	r25, 0x067F
     850:	01 96       	adiw	r24, 0x01	; 1
     852:	90 93 7f 06 	sts	0x067F, r25
     856:	80 93 7e 06 	sts	0x067E, r24
  if(nRF24L01P.ErrorTicks>ticks){
     85a:	85 36       	cpi	r24, 0x65	; 101
     85c:	91 05       	cpc	r25, r1
     85e:	28 f0       	brcs	.+10     	; 0x86a <nRF24L01P_Wait_Tx_Complete+0x42>
  nRF24L01P_Error_Clear_Ticks();
  nRF24L01P_Error_Clear_Buf();
}

void nRF24L01P_Error_Set(uint8_t val){
  nRF24L01P.Error = val;
     860:	86 e0       	ldi	r24, 0x06	; 6
     862:	80 93 80 06 	sts	0x0680, r24
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	05 c0       	rjmp	.+10     	; 0x874 <nRF24L01P_Wait_Tx_Complete+0x4c>


uint8_t nRF24L01P_Wait_Tx_Complete(void){
  if(nRF24L01P_Error_Free()){
    nRF24L01P_Error_Clear_Ticks();
    while( !nRF24L01P_Tx_Buf_Empty() ){
     86a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <nRF24L01P_Tx_Buf_Empty>
     86e:	88 23       	and	r24, r24
     870:	41 f3       	breq	.-48     	; 0x842 <nRF24L01P_Wait_Tx_Complete+0x1a>
     872:	81 e0       	ldi	r24, 0x01	; 1
    }
	return 1;
  }else{
    return 0;
  }
}
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	08 95       	ret

0000087a <nRF24L01P_Mode_Set_DeepSleep>:
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     87a:	80 91 80 06 	lds	r24, 0x0680
     87e:	88 23       	and	r24, r24
     880:	51 f4       	brne	.+20     	; 0x896 <nRF24L01P_Mode_Set_DeepSleep+0x1c>

/* set Modes */

void nRF24L01P_Mode_Set_DeepSleep(void){
  if(nRF24L01P_Error_Free()){
    nRF24L01P.TempBuf[0] = 0x00;
     882:	10 92 62 06 	sts	0x0662, r1
    nRF24L01P_ReadWrite_Register( 0x00, 0, nRF24L01P.TempBuf, 1 );
     886:	60 e0       	ldi	r22, 0x00	; 0
     888:	42 e6       	ldi	r20, 0x62	; 98
     88a:	56 e0       	ldi	r21, 0x06	; 6
     88c:	21 e0       	ldi	r18, 0x01	; 1
     88e:	0e 94 34 03 	call	0x668	; 0x668 <nRF24L01P_ReadWrite_Register>
    nRF24L01P.Mode = 0x00;
     892:	10 92 60 06 	sts	0x0660, r1
  }
  nRF24L01P_Disable();
     896:	0e 94 9f 02 	call	0x53e	; 0x53e <nRF24L01P_Disable>
}
     89a:	08 95       	ret

0000089c <nRF24L01P_Mode_Set_Sleep>:

void nRF24L01P_Mode_Set_Sleep(void){
  if(nRF24L01P.Enable == 0){
     89c:	80 91 61 06 	lds	r24, 0x0661
     8a0:	88 23       	and	r24, r24
     8a2:	11 f4       	brne	.+4      	; 0x8a8 <nRF24L01P_Mode_Set_Sleep+0xc>
    nRF24L01P_Enable();
     8a4:	0e 94 95 02 	call	0x52a	; 0x52a <nRF24L01P_Enable>
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     8a8:	80 91 80 06 	lds	r24, 0x0680
     8ac:	88 23       	and	r24, r24
     8ae:	61 f4       	brne	.+24     	; 0x8c8 <nRF24L01P_Mode_Set_Sleep+0x2c>
void nRF24L01P_Mode_Set_Sleep(void){
  if(nRF24L01P.Enable == 0){
    nRF24L01P_Enable();
  }
  if(nRF24L01P_Error_Free()){
    nRF24L01P.TempBuf[0] = 0x00;
     8b0:	10 92 62 06 	sts	0x0662, r1

void nRF24L01P_Set_CE(uint8_t state){
  if(state){
    nRF24L01P_CE_PORT |= (1<<nRF24L01P_CE_bp);
  }else{
    nRF24L01P_CE_PORT &=~(1<<nRF24L01P_CE_bp);
     8b4:	40 98       	cbi	0x08, 0	; 8
    nRF24L01P_Enable();
  }
  if(nRF24L01P_Error_Free()){
    nRF24L01P.TempBuf[0] = 0x00;
	nRF24L01P_Set_CE(0);
    nRF24L01P_ReadWrite_Register( 0x00, 0, nRF24L01P.TempBuf, 1 );
     8b6:	60 e0       	ldi	r22, 0x00	; 0
     8b8:	42 e6       	ldi	r20, 0x62	; 98
     8ba:	56 e0       	ldi	r21, 0x06	; 6
     8bc:	21 e0       	ldi	r18, 0x01	; 1
     8be:	0e 94 34 03 	call	0x668	; 0x668 <nRF24L01P_ReadWrite_Register>
    nRF24L01P.Mode = 0x01;
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	80 93 60 06 	sts	0x0660, r24
     8c8:	08 95       	ret

000008ca <nRF24L01P_Mode_Set_Rx>:
  }
}

void nRF24L01P_Mode_Set_Rx(void){
  if(nRF24L01P.Enable == 0){
     8ca:	80 91 61 06 	lds	r24, 0x0661
     8ce:	88 23       	and	r24, r24
     8d0:	11 f4       	brne	.+4      	; 0x8d6 <nRF24L01P_Mode_Set_Rx+0xc>
    nRF24L01P_Enable();
     8d2:	0e 94 95 02 	call	0x52a	; 0x52a <nRF24L01P_Enable>
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     8d6:	80 91 80 06 	lds	r24, 0x0680
     8da:	88 23       	and	r24, r24
     8dc:	71 f4       	brne	.+28     	; 0x8fa <nRF24L01P_Mode_Set_Rx+0x30>
void nRF24L01P_Mode_Set_Rx(void){
  if(nRF24L01P.Enable == 0){
    nRF24L01P_Enable();
  }
  if(nRF24L01P_Error_Free()){
    nRF24L01P.TempBuf[0] = 0x73;
     8de:	83 e7       	ldi	r24, 0x73	; 115
     8e0:	80 93 62 06 	sts	0x0662, r24
  }
}

void nRF24L01P_Set_CE(uint8_t state){
  if(state){
    nRF24L01P_CE_PORT |= (1<<nRF24L01P_CE_bp);
     8e4:	40 9a       	sbi	0x08, 0	; 8
    nRF24L01P_Enable();
  }
  if(nRF24L01P_Error_Free()){
    nRF24L01P.TempBuf[0] = 0x73;
    nRF24L01P_Set_CE(1);
    nRF24L01P_ReadWrite_Register( 0x00, 0, nRF24L01P.TempBuf, 1 );
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	60 e0       	ldi	r22, 0x00	; 0
     8ea:	42 e6       	ldi	r20, 0x62	; 98
     8ec:	56 e0       	ldi	r21, 0x06	; 6
     8ee:	21 e0       	ldi	r18, 0x01	; 1
     8f0:	0e 94 34 03 	call	0x668	; 0x668 <nRF24L01P_ReadWrite_Register>
	nRF24L01P.Mode = 0x02;
     8f4:	82 e0       	ldi	r24, 0x02	; 2
     8f6:	80 93 60 06 	sts	0x0660, r24
     8fa:	08 95       	ret

000008fc <nRF24L01P_Mode_Set_Tx>:
  }
}

void nRF24L01P_Mode_Set_Tx(void){
  if(nRF24L01P.Enable == 0){
     8fc:	80 91 61 06 	lds	r24, 0x0661
     900:	88 23       	and	r24, r24
     902:	11 f4       	brne	.+4      	; 0x908 <__stack+0x9>
    nRF24L01P_Enable();
     904:	0e 94 95 02 	call	0x52a	; 0x52a <nRF24L01P_Enable>
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     908:	80 91 80 06 	lds	r24, 0x0680
     90c:	88 23       	and	r24, r24
     90e:	79 f4       	brne	.+30     	; 0x92e <__stack+0x2f>
void nRF24L01P_Mode_Set_Tx(void){
  if(nRF24L01P.Enable == 0){
    nRF24L01P_Enable();
  }
  if(nRF24L01P_Error_Free()){
    nRF24L01P.TempBuf[0] = 0x72;
     910:	82 e7       	ldi	r24, 0x72	; 114
     912:	80 93 62 06 	sts	0x0662, r24

void nRF24L01P_Set_CE(uint8_t state){
  if(state){
    nRF24L01P_CE_PORT |= (1<<nRF24L01P_CE_bp);
  }else{
    nRF24L01P_CE_PORT &=~(1<<nRF24L01P_CE_bp);
     916:	40 98       	cbi	0x08, 0	; 8
    nRF24L01P_Enable();
  }
  if(nRF24L01P_Error_Free()){
    nRF24L01P.TempBuf[0] = 0x72;
    nRF24L01P_Set_CE(0);
    nRF24L01P_ReadWrite_Register( 0x00, 0, nRF24L01P.TempBuf, 1 );
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	42 e6       	ldi	r20, 0x62	; 98
     91e:	56 e0       	ldi	r21, 0x06	; 6
     920:	21 e0       	ldi	r18, 0x01	; 1
     922:	0e 94 34 03 	call	0x668	; 0x668 <nRF24L01P_ReadWrite_Register>
  }
}

void nRF24L01P_Set_CE(uint8_t state){
  if(state){
    nRF24L01P_CE_PORT |= (1<<nRF24L01P_CE_bp);
     926:	40 9a       	sbi	0x08, 0	; 8
  if(nRF24L01P_Error_Free()){
    nRF24L01P.TempBuf[0] = 0x72;
    nRF24L01P_Set_CE(0);
    nRF24L01P_ReadWrite_Register( 0x00, 0, nRF24L01P.TempBuf, 1 );
	nRF24L01P_Set_CE(1);
	nRF24L01P.Mode = 0x03;
     928:	83 e0       	ldi	r24, 0x03	; 3
     92a:	80 93 60 06 	sts	0x0660, r24
     92e:	08 95       	ret

00000930 <nRF24L01P_Mode_Set>:
  }
}

void nRF24L01P_Mode_Set(uint8_t Mode){
     930:	98 2f       	mov	r25, r24
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     932:	80 91 80 06 	lds	r24, 0x0680
     936:	88 23       	and	r24, r24
     938:	b1 f4       	brne	.+44     	; 0x966 <nRF24L01P_Mode_Set+0x36>
  }
}

void nRF24L01P_Mode_Set(uint8_t Mode){
  if(nRF24L01P_Error_Free()){
    if(Mode == 0){
     93a:	99 23       	and	r25, r25
     93c:	19 f4       	brne	.+6      	; 0x944 <nRF24L01P_Mode_Set+0x14>
	  nRF24L01P_Mode_Set_DeepSleep();
     93e:	0e 94 3d 04 	call	0x87a	; 0x87a <nRF24L01P_Mode_Set_DeepSleep>
     942:	08 95       	ret
	}else if(Mode == 1){
     944:	91 30       	cpi	r25, 0x01	; 1
     946:	19 f4       	brne	.+6      	; 0x94e <nRF24L01P_Mode_Set+0x1e>
	  nRF24L01P_Mode_Set_Sleep();
     948:	0e 94 4e 04 	call	0x89c	; 0x89c <nRF24L01P_Mode_Set_Sleep>
     94c:	08 95       	ret
	}else if(Mode == 2){
     94e:	92 30       	cpi	r25, 0x02	; 2
     950:	19 f4       	brne	.+6      	; 0x958 <nRF24L01P_Mode_Set+0x28>
	  nRF24L01P_Mode_Set_Rx();
     952:	0e 94 65 04 	call	0x8ca	; 0x8ca <nRF24L01P_Mode_Set_Rx>
     956:	08 95       	ret
	}else if(Mode == 3){
     958:	93 30       	cpi	r25, 0x03	; 3
     95a:	19 f4       	brne	.+6      	; 0x962 <nRF24L01P_Mode_Set+0x32>
	  nRF24L01P_Mode_Set_Tx();
     95c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <nRF24L01P_Mode_Set_Tx>
     960:	08 95       	ret
	}else{
	  nRF24L01P_Mode_Set_Rx();
     962:	0e 94 65 04 	call	0x8ca	; 0x8ca <nRF24L01P_Mode_Set_Rx>
     966:	08 95       	ret

00000968 <nRF24L01P_Mode_Get>:
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     968:	80 91 80 06 	lds	r24, 0x0680
     96c:	88 23       	and	r24, r24
     96e:	11 f0       	breq	.+4      	; 0x974 <nRF24L01P_Mode_Get+0xc>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	08 95       	ret
  }
}

uint8_t nRF24L01P_Mode_Get(void){
  if(nRF24L01P_Error_Free()){
    nRF24L01P_ReadWrite_Register( 0x00, 1, nRF24L01P.TempBuf, 1 );
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	61 e0       	ldi	r22, 0x01	; 1
     978:	42 e6       	ldi	r20, 0x62	; 98
     97a:	56 e0       	ldi	r21, 0x06	; 6
     97c:	21 e0       	ldi	r18, 0x01	; 1
     97e:	0e 94 34 03 	call	0x668	; 0x668 <nRF24L01P_ReadWrite_Register>
    if(nRF24L01P.TempBuf[0] & (1<<1)){
     982:	80 91 62 06 	lds	r24, 0x0662
     986:	81 ff       	sbrs	r24, 1
     988:	08 c0       	rjmp	.+16     	; 0x99a <nRF24L01P_Mode_Get+0x32>
      if(nRF24L01P.TempBuf[0] & (1<<0)){
     98a:	80 ff       	sbrs	r24, 0
     98c:	02 c0       	rjmp	.+4      	; 0x992 <nRF24L01P_Mode_Get+0x2a>
	    nRF24L01P.Mode = 0x02;
     98e:	82 e0       	ldi	r24, 0x02	; 2
     990:	01 c0       	rjmp	.+2      	; 0x994 <nRF24L01P_Mode_Get+0x2c>
	    return 2; //rx Mode
	  }else{
	    nRF24L01P.Mode = 0x03;
     992:	83 e0       	ldi	r24, 0x03	; 3
     994:	80 93 60 06 	sts	0x0660, r24
     998:	08 95       	ret
	    return 3; //tx Mode
	  }
    }else{
      nRF24L01P.Mode = 0x01;
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	80 93 60 06 	sts	0x0660, r24
      return 1;   //pwr down
    }
  }else{
    return 0;
  }
}
     9a0:	08 95       	ret

000009a2 <nRF24L01P_Channel_Set>:



void nRF24L01P_Channel_Set(uint8_t channel){
     9a2:	98 2f       	mov	r25, r24
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     9a4:	80 91 80 06 	lds	r24, 0x0680
     9a8:	88 23       	and	r24, r24
     9aa:	69 f4       	brne	.+26     	; 0x9c6 <nRF24L01P_Channel_Set+0x24>
void nRF24L01P_Channel_Set(uint8_t channel){
  if(nRF24L01P_Error_Free()){
    if(channel > 120){
      channel = 120;
    }
    nRF24L01P.TempBuf[0] = channel;
     9ac:	89 2f       	mov	r24, r25
     9ae:	99 37       	cpi	r25, 0x79	; 121
     9b0:	08 f0       	brcs	.+2      	; 0x9b4 <nRF24L01P_Channel_Set+0x12>
     9b2:	88 e7       	ldi	r24, 0x78	; 120
     9b4:	80 93 62 06 	sts	0x0662, r24
    nRF24L01P_ReadWrite_Register( 0x05, 0, nRF24L01P.TempBuf, 1 );
     9b8:	85 e0       	ldi	r24, 0x05	; 5
     9ba:	60 e0       	ldi	r22, 0x00	; 0
     9bc:	42 e6       	ldi	r20, 0x62	; 98
     9be:	56 e0       	ldi	r21, 0x06	; 6
     9c0:	21 e0       	ldi	r18, 0x01	; 1
     9c2:	0e 94 34 03 	call	0x668	; 0x668 <nRF24L01P_ReadWrite_Register>
     9c6:	08 95       	ret

000009c8 <nRF24L01P_Channel_Get>:
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     9c8:	80 91 80 06 	lds	r24, 0x0680
     9cc:	88 23       	and	r24, r24
     9ce:	11 f0       	breq	.+4      	; 0x9d4 <nRF24L01P_Channel_Get+0xc>
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	08 95       	ret
  }
}

uint8_t nRF24L01P_Channel_Get(void){
  if(nRF24L01P_Error_Free()){
    nRF24L01P_ReadWrite_Register( 0x05, 1, nRF24L01P.TempBuf, 1 );
     9d4:	85 e0       	ldi	r24, 0x05	; 5
     9d6:	61 e0       	ldi	r22, 0x01	; 1
     9d8:	42 e6       	ldi	r20, 0x62	; 98
     9da:	56 e0       	ldi	r21, 0x06	; 6
     9dc:	21 e0       	ldi	r18, 0x01	; 1
     9de:	0e 94 34 03 	call	0x668	; 0x668 <nRF24L01P_ReadWrite_Register>
    return nRF24L01P.TempBuf[0];
     9e2:	80 91 62 06 	lds	r24, 0x0662
  }else{
    return 0;
  }
}
     9e6:	08 95       	ret

000009e8 <nRF24L01P_Speed_Set>:



void nRF24L01P_Speed_Set(uint8_t index){
  if(index == 0){       //250kbps
     9e8:	88 23       	and	r24, r24
     9ea:	21 f4       	brne	.+8      	; 0x9f4 <nRF24L01P_Speed_Set+0xc>
    nRF24L01P_ReadModifyWrite_Register( 0x06, 5, 1 );
     9ec:	86 e0       	ldi	r24, 0x06	; 6
     9ee:	65 e0       	ldi	r22, 0x05	; 5
     9f0:	41 e0       	ldi	r20, 0x01	; 1
     9f2:	05 c0       	rjmp	.+10     	; 0x9fe <nRF24L01P_Speed_Set+0x16>
    nRF24L01P_ReadModifyWrite_Register( 0x06, 3, 0 );
  }
  else if(index == 1){  //1Mbps
     9f4:	81 30       	cpi	r24, 0x01	; 1
     9f6:	49 f4       	brne	.+18     	; 0xa0a <nRF24L01P_Speed_Set+0x22>
    nRF24L01P_ReadModifyWrite_Register( 0x06, 5, 0 );
     9f8:	86 e0       	ldi	r24, 0x06	; 6
     9fa:	65 e0       	ldi	r22, 0x05	; 5
     9fc:	40 e0       	ldi	r20, 0x00	; 0
     9fe:	0e 94 77 03 	call	0x6ee	; 0x6ee <nRF24L01P_ReadModifyWrite_Register>
    nRF24L01P_ReadModifyWrite_Register( 0x06, 3, 0 );
     a02:	86 e0       	ldi	r24, 0x06	; 6
     a04:	63 e0       	ldi	r22, 0x03	; 3
     a06:	40 e0       	ldi	r20, 0x00	; 0
     a08:	08 c0       	rjmp	.+16     	; 0xa1a <nRF24L01P_Speed_Set+0x32>
  }
  else if(index == 2){  //2Mbps
    nRF24L01P_ReadModifyWrite_Register( 0x06, 5, 0 );
    nRF24L01P_ReadModifyWrite_Register( 0x06, 3, 1 );
  }else{                //2Mbps
    nRF24L01P_ReadModifyWrite_Register( 0x06, 5, 0 );
     a0a:	86 e0       	ldi	r24, 0x06	; 6
     a0c:	65 e0       	ldi	r22, 0x05	; 5
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	0e 94 77 03 	call	0x6ee	; 0x6ee <nRF24L01P_ReadModifyWrite_Register>
    nRF24L01P_ReadModifyWrite_Register( 0x06, 3, 1 );
     a14:	86 e0       	ldi	r24, 0x06	; 6
     a16:	63 e0       	ldi	r22, 0x03	; 3
     a18:	41 e0       	ldi	r20, 0x01	; 1
     a1a:	0e 94 77 03 	call	0x6ee	; 0x6ee <nRF24L01P_ReadModifyWrite_Register>
     a1e:	08 95       	ret

00000a20 <nRF24L01P_Speed_Get>:
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     a20:	80 91 80 06 	lds	r24, 0x0680
     a24:	88 23       	and	r24, r24
     a26:	11 f0       	breq	.+4      	; 0xa2c <nRF24L01P_Speed_Get+0xc>
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	08 95       	ret
  }
}

uint8_t nRF24L01P_Speed_Get(void){
  if(nRF24L01P_Error_Free()){
    nRF24L01P_ReadWrite_Register( 0x06, 1, nRF24L01P.TempBuf, 1 );
     a2c:	86 e0       	ldi	r24, 0x06	; 6
     a2e:	61 e0       	ldi	r22, 0x01	; 1
     a30:	42 e6       	ldi	r20, 0x62	; 98
     a32:	56 e0       	ldi	r21, 0x06	; 6
     a34:	21 e0       	ldi	r18, 0x01	; 1
     a36:	0e 94 34 03 	call	0x668	; 0x668 <nRF24L01P_ReadWrite_Register>
    nRF24L01P.TempBuf[1] = (nRF24L01P.TempBuf[0] >> 3) & 0x01;
     a3a:	90 91 62 06 	lds	r25, 0x0662
    nRF24L01P.TempBuf[0] >>= 4;
    nRF24L01P.TempBuf[0] &= 0x02;
     a3e:	89 2f       	mov	r24, r25
     a40:	82 95       	swap	r24
     a42:	82 70       	andi	r24, 0x02	; 2
     a44:	80 93 62 06 	sts	0x0662, r24
    nRF24L01P.TempBuf[1] |= nRF24L01P.TempBuf[0];
     a48:	96 95       	lsr	r25
     a4a:	96 95       	lsr	r25
     a4c:	96 95       	lsr	r25
     a4e:	91 70       	andi	r25, 0x01	; 1
     a50:	98 2b       	or	r25, r24
     a52:	90 93 63 06 	sts	0x0663, r25
    if      (nRF24L01P.TempBuf[1] == 0x02){
     a56:	92 30       	cpi	r25, 0x02	; 2
     a58:	19 f4       	brne	.+6      	; 0xa60 <nRF24L01P_Speed_Get+0x40>
      nRF24L01P.TempBuf[0] = 0;
     a5a:	10 92 62 06 	sts	0x0662, r1
     a5e:	0a c0       	rjmp	.+20     	; 0xa74 <nRF24L01P_Speed_Get+0x54>
    }else if(nRF24L01P.TempBuf[1] == 0x01){
     a60:	91 30       	cpi	r25, 0x01	; 1
     a62:	19 f4       	brne	.+6      	; 0xa6a <nRF24L01P_Speed_Get+0x4a>
      nRF24L01P.TempBuf[0] = 1;
     a64:	90 93 62 06 	sts	0x0662, r25
     a68:	05 c0       	rjmp	.+10     	; 0xa74 <nRF24L01P_Speed_Get+0x54>
    }else if(nRF24L01P.TempBuf[1] == 0x00){
     a6a:	99 23       	and	r25, r25
     a6c:	19 f4       	brne	.+6      	; 0xa74 <nRF24L01P_Speed_Get+0x54>
      nRF24L01P.TempBuf[0] = 2;
     a6e:	82 e0       	ldi	r24, 0x02	; 2
     a70:	80 93 62 06 	sts	0x0662, r24
    }
    return nRF24L01P.TempBuf[0];
     a74:	80 91 62 06 	lds	r24, 0x0662
  }else{
    return 0;
  }
}
     a78:	08 95       	ret

00000a7a <nRF24L01P_Tx_Power_Set>:



void nRF24L01P_Tx_Power_Set(uint8_t index){
     a7a:	98 2f       	mov	r25, r24
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     a7c:	80 91 80 06 	lds	r24, 0x0680
     a80:	88 23       	and	r24, r24
     a82:	71 f5       	brne	.+92     	; 0xae0 <nRF24L01P_Tx_Power_Set+0x66>



void nRF24L01P_Tx_Power_Set(uint8_t index){
  if(nRF24L01P_Error_Free()){
    if(index == 0){
     a84:	99 23       	and	r25, r25
     a86:	21 f4       	brne	.+8      	; 0xa90 <nRF24L01P_Tx_Power_Set+0x16>
      nRF24L01P_ReadModifyWrite_Register( 0x06, 2, 0 );
     a88:	86 e0       	ldi	r24, 0x06	; 6
     a8a:	62 e0       	ldi	r22, 0x02	; 2
     a8c:	40 e0       	ldi	r20, 0x00	; 0
     a8e:	0b c0       	rjmp	.+22     	; 0xaa6 <nRF24L01P_Tx_Power_Set+0x2c>
      nRF24L01P_ReadModifyWrite_Register( 0x06, 1, 0 );
    }
    else if(index == 1){
     a90:	91 30       	cpi	r25, 0x01	; 1
     a92:	21 f4       	brne	.+8      	; 0xa9c <nRF24L01P_Tx_Power_Set+0x22>
      nRF24L01P_ReadModifyWrite_Register( 0x06, 2, 0 );
     a94:	86 e0       	ldi	r24, 0x06	; 6
     a96:	62 e0       	ldi	r22, 0x02	; 2
     a98:	40 e0       	ldi	r20, 0x00	; 0
     a9a:	10 c0       	rjmp	.+32     	; 0xabc <nRF24L01P_Tx_Power_Set+0x42>
      nRF24L01P_ReadModifyWrite_Register( 0x06, 1, 1 );
    }
    else if(index == 2){
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	49 f4       	brne	.+18     	; 0xab2 <nRF24L01P_Tx_Power_Set+0x38>
      nRF24L01P_ReadModifyWrite_Register( 0x06, 2, 1 );
     aa0:	86 e0       	ldi	r24, 0x06	; 6
     aa2:	62 e0       	ldi	r22, 0x02	; 2
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	0e 94 77 03 	call	0x6ee	; 0x6ee <nRF24L01P_ReadModifyWrite_Register>
      nRF24L01P_ReadModifyWrite_Register( 0x06, 1, 0 );
     aaa:	86 e0       	ldi	r24, 0x06	; 6
     aac:	61 e0       	ldi	r22, 0x01	; 1
     aae:	40 e0       	ldi	r20, 0x00	; 0
     ab0:	0a c0       	rjmp	.+20     	; 0xac6 <nRF24L01P_Tx_Power_Set+0x4c>
    }
    else if(index == 3){
     ab2:	93 30       	cpi	r25, 0x03	; 3
     ab4:	59 f4       	brne	.+22     	; 0xacc <nRF24L01P_Tx_Power_Set+0x52>
      nRF24L01P_ReadModifyWrite_Register( 0x06, 2, 1 );
     ab6:	86 e0       	ldi	r24, 0x06	; 6
     ab8:	62 e0       	ldi	r22, 0x02	; 2
     aba:	41 e0       	ldi	r20, 0x01	; 1
     abc:	0e 94 77 03 	call	0x6ee	; 0x6ee <nRF24L01P_ReadModifyWrite_Register>
      nRF24L01P_ReadModifyWrite_Register( 0x06, 1, 1 );
     ac0:	86 e0       	ldi	r24, 0x06	; 6
     ac2:	61 e0       	ldi	r22, 0x01	; 1
     ac4:	41 e0       	ldi	r20, 0x01	; 1
     ac6:	0e 94 77 03 	call	0x6ee	; 0x6ee <nRF24L01P_ReadModifyWrite_Register>
     aca:	08 95       	ret
    }else{
      nRF24L01P_ReadModifyWrite_Register( 0x06, 2, 1 );
     acc:	86 e0       	ldi	r24, 0x06	; 6
     ace:	62 e0       	ldi	r22, 0x02	; 2
     ad0:	41 e0       	ldi	r20, 0x01	; 1
     ad2:	0e 94 77 03 	call	0x6ee	; 0x6ee <nRF24L01P_ReadModifyWrite_Register>
      nRF24L01P_ReadModifyWrite_Register( 0x06, 1, 1 );
     ad6:	86 e0       	ldi	r24, 0x06	; 6
     ad8:	61 e0       	ldi	r22, 0x01	; 1
     ada:	41 e0       	ldi	r20, 0x01	; 1
     adc:	0e 94 77 03 	call	0x6ee	; 0x6ee <nRF24L01P_ReadModifyWrite_Register>
     ae0:	08 95       	ret

00000ae2 <nRF24L01P_Tx_Power_Get>:
    return 0;
  }
}

uint8_t nRF24L01P_Error_Free(void){
  if(nRF24L01P_Error_Get() == 0){
     ae2:	80 91 80 06 	lds	r24, 0x0680
     ae6:	88 23       	and	r24, r24
     ae8:	11 f0       	breq	.+4      	; 0xaee <nRF24L01P_Tx_Power_Get+0xc>
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	08 95       	ret
  }
}

uint8_t nRF24L01P_Tx_Power_Get(void){
  if(nRF24L01P_Error_Free()){
    nRF24L01P_ReadWrite_Register( 0x06, 1, nRF24L01P.TempBuf, 1 );
     aee:	86 e0       	ldi	r24, 0x06	; 6
     af0:	61 e0       	ldi	r22, 0x01	; 1
     af2:	42 e6       	ldi	r20, 0x62	; 98
     af4:	56 e0       	ldi	r21, 0x06	; 6
     af6:	21 e0       	ldi	r18, 0x01	; 1
     af8:	0e 94 34 03 	call	0x668	; 0x668 <nRF24L01P_ReadWrite_Register>
    nRF24L01P.TempBuf[0] >>= 1;
    nRF24L01P.TempBuf[0] &= 0x03;
     afc:	80 91 62 06 	lds	r24, 0x0662
     b00:	86 95       	lsr	r24
     b02:	83 70       	andi	r24, 0x03	; 3
     b04:	80 93 62 06 	sts	0x0662, r24
    return nRF24L01P.TempBuf[0];
  }else{
    return 0;
  }
}  
     b08:	08 95       	ret

00000b0a <nRF24L01P_Own_Addr_Set>:

void nRF24L01P_Own_Addr_Set(uint8_t addr){
  nRF24L01P.Address.Own=addr;
     b0a:	80 93 64 06 	sts	0x0664, r24
}
     b0e:	08 95       	ret

00000b10 <nRF24L01P_Own_Addr_Get>:

uint8_t nRF24L01P_Own_Addr_Get(void){
  return nRF24L01P.Address.Own;
}
     b10:	80 91 64 06 	lds	r24, 0x0664
     b14:	08 95       	ret

00000b16 <nRF24L01P_Dest_Addr_Set>:

void nRF24L01P_Dest_Addr_Set(uint8_t addr){
  nRF24L01P.Address.Dest=addr;
     b16:	80 93 65 06 	sts	0x0665, r24
}
     b1a:	08 95       	ret

00000b1c <nRF24L01P_Dest_Addr_Get>:

uint8_t nRF24L01P_Dest_Addr_Get(void){
  return nRF24L01P.Address.Dest;
}
     b1c:	80 91 65 06 	lds	r24, 0x0665
     b20:	08 95       	ret

00000b22 <nRF24L01P_RxTicks_Set>:

void nRF24L01P_RxTicks_Set(uint16_t val){
  nRF24L01P.Config.RxTicks=val;
     b22:	90 93 69 06 	sts	0x0669, r25
     b26:	80 93 68 06 	sts	0x0668, r24
}
     b2a:	08 95       	ret

00000b2c <nRF24L01P_RxTicks_Get>:

uint16_t nRF24L01P_RxTicks_Get(void){
  return nRF24L01P.Config.RxTicks;
}
     b2c:	80 91 68 06 	lds	r24, 0x0668
     b30:	90 91 69 06 	lds	r25, 0x0669
     b34:	08 95       	ret

00000b36 <nRF24L01P_RxTimeout_Set>:

void nRF24L01P_RxTimeout_Set(uint16_t val){
  nRF24L01P.Config.RxTimeout=val;
     b36:	90 93 67 06 	sts	0x0667, r25
     b3a:	80 93 66 06 	sts	0x0666, r24
}
     b3e:	08 95       	ret

00000b40 <nRF24L01P_RxTimeout_Get>:

uint16_t nRF24L01P_RxTimeout_Get(void){
  return nRF24L01P.Config.RxTimeout;
}
     b40:	80 91 66 06 	lds	r24, 0x0666
     b44:	90 91 67 06 	lds	r25, 0x0667
     b48:	08 95       	ret

00000b4a <nRF24L01P_MaxRetransmission_Set>:

void nRF24L01P_MaxRetransmission_Set(uint16_t val){
  nRF24L01P.Config.MaxRetry=val;
     b4a:	90 93 6c 06 	sts	0x066C, r25
     b4e:	80 93 6b 06 	sts	0x066B, r24
}
     b52:	08 95       	ret

00000b54 <nRF24L01P_MaxRetransmission_Get>:

uint16_t nRF24L01P_MaxRetransmission_Get(void){
  return nRF24L01P.Config.MaxRetry;
}
     b54:	80 91 6b 06 	lds	r24, 0x066B
     b58:	90 91 6c 06 	lds	r25, 0x066C
     b5c:	08 95       	ret

00000b5e <nRF24L01P_Tx_Basic>:

void nRF24L01P_Tx_Basic(uint8_t *buf, uint8_t len){
     b5e:	ff 92       	push	r15
     b60:	0f 93       	push	r16
     b62:	1f 93       	push	r17
     b64:	8c 01       	movw	r16, r24
     b66:	f6 2e       	mov	r15, r22


/* error handling */

void nRF24L01P_Error_Clear(void){
  nRF24L01P.Error = 0;
     b68:	10 92 80 06 	sts	0x0680, r1
  return nRF24L01P.Config.MaxRetry;
}

void nRF24L01P_Tx_Basic(uint8_t *buf, uint8_t len){
  nRF24L01P_Error_Clear();
  nRF24L01P_Flush_Tx_Buf();
     b6c:	0e 94 ad 03 	call	0x75a	; 0x75a <nRF24L01P_Flush_Tx_Buf>
  buf[nRF24L01P.SpaceAlloc.Blocks] = nRF24L01P.Blocks.Remaining;      //24
     b70:	80 91 7d 06 	lds	r24, 0x067D
     b74:	f8 01       	movw	r30, r16
     b76:	e8 0f       	add	r30, r24
     b78:	f1 1d       	adc	r31, r1
     b7a:	80 91 73 06 	lds	r24, 0x0673
     b7e:	80 83       	st	Z, r24
  buf[nRF24L01P.SpaceAlloc.PID   ] = nRF24L01P.Packet.TxPID;          //25
     b80:	80 91 7b 06 	lds	r24, 0x067B
     b84:	f8 01       	movw	r30, r16
     b86:	e8 0f       	add	r30, r24
     b88:	f1 1d       	adc	r31, r1
     b8a:	80 91 6f 06 	lds	r24, 0x066F
     b8e:	80 83       	st	Z, r24
  buf[nRF24L01P.SpaceAlloc.Ack   ] = nRF24L01P.Packet.AckReq;         //26
     b90:	80 91 7a 06 	lds	r24, 0x067A
     b94:	f8 01       	movw	r30, r16
     b96:	e8 0f       	add	r30, r24
     b98:	f1 1d       	adc	r31, r1
     b9a:	80 91 72 06 	lds	r24, 0x0672
     b9e:	80 83       	st	Z, r24
  buf[nRF24L01P.SpaceAlloc.Own   ] = nRF24L01P.Address.Own;           //27
     ba0:	80 91 79 06 	lds	r24, 0x0679
     ba4:	f8 01       	movw	r30, r16
     ba6:	e8 0f       	add	r30, r24
     ba8:	f1 1d       	adc	r31, r1
     baa:	80 91 64 06 	lds	r24, 0x0664
     bae:	80 83       	st	Z, r24
  buf[nRF24L01P.SpaceAlloc.Dest  ] = nRF24L01P.Address.Dest;          //28
     bb0:	80 91 78 06 	lds	r24, 0x0678
     bb4:	f8 01       	movw	r30, r16
     bb6:	e8 0f       	add	r30, r24
     bb8:	f1 1d       	adc	r31, r1
     bba:	80 91 65 06 	lds	r24, 0x0665
     bbe:	80 83       	st	Z, r24
  buf[nRF24L01P.SpaceAlloc.Len   ] = len;                             //29
     bc0:	80 91 77 06 	lds	r24, 0x0677
     bc4:	f8 01       	movw	r30, r16
     bc6:	e8 0f       	add	r30, r24
     bc8:	f1 1d       	adc	r31, r1
     bca:	f0 82       	st	Z, r15
  uint16_t temp = nRF24L01P_CRC_Block( buf, nRF24L01P.SpaceAlloc.CRCLen );
     bcc:	c8 01       	movw	r24, r16
     bce:	60 91 7c 06 	lds	r22, 0x067C
     bd2:	0e 94 03 03 	call	0x606	; 0x606 <nRF24L01P_CRC_Block>
  buf[nRF24L01P.SpaceAlloc.CRCMSB] = (temp & 0xFF00)>>8;              //30
     bd6:	20 91 75 06 	lds	r18, 0x0675
     bda:	f8 01       	movw	r30, r16
     bdc:	e2 0f       	add	r30, r18
     bde:	f1 1d       	adc	r31, r1
     be0:	90 83       	st	Z, r25
  buf[nRF24L01P.SpaceAlloc.CRCLSB] = (temp & 0x00FF);                 //31
     be2:	90 91 76 06 	lds	r25, 0x0676
     be6:	f8 01       	movw	r30, r16
     be8:	e9 0f       	add	r30, r25
     bea:	f1 1d       	adc	r31, r1
     bec:	80 83       	st	Z, r24
  nRF24L01P_Write_Data_Tx_Buf(buf);
     bee:	c8 01       	movw	r24, r16
     bf0:	0e 94 cb 03 	call	0x796	; 0x796 <nRF24L01P_Write_Data_Tx_Buf>
  nRF24L01P_Mode_Set(3);                                              //tx
     bf4:	83 e0       	ldi	r24, 0x03	; 3
     bf6:	0e 94 98 04 	call	0x930	; 0x930 <nRF24L01P_Mode_Set>
  nRF24L01P_Wait_Tx_Complete(); 
     bfa:	0e 94 14 04 	call	0x828	; 0x828 <nRF24L01P_Wait_Tx_Complete>
  //nRF24L01P_Mode_Set(2);                                            //rx
}
     bfe:	1f 91       	pop	r17
     c00:	0f 91       	pop	r16
     c02:	ff 90       	pop	r15
     c04:	08 95       	ret

00000c06 <nRF24L01P_Rx_Basic>:


uint8_t nRF24L01P_Rx_Basic(uint8_t *buf){
     c06:	cf 92       	push	r12
     c08:	df 92       	push	r13
     c0a:	ef 92       	push	r14
     c0c:	ff 92       	push	r15
     c0e:	0f 93       	push	r16
     c10:	1f 93       	push	r17
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	ec 01       	movw	r28, r24


/* error handling */

void nRF24L01P_Error_Clear(void){
  nRF24L01P.Error = 0;
     c18:	10 92 80 06 	sts	0x0680, r1
uint8_t nRF24L01P_Dest_Addr_Get(void){
  return nRF24L01P.Address.Dest;
}

void nRF24L01P_RxTicks_Set(uint16_t val){
  nRF24L01P.Config.RxTicks=val;
     c1c:	10 92 69 06 	sts	0x0669, r1
     c20:	10 92 68 06 	sts	0x0668, r1
     c24:	78 ec       	ldi	r23, 0xC8	; 200
     c26:	c7 2e       	mov	r12, r23
     c28:	d1 2c       	mov	r13, r1
     c2a:	3c c0       	rjmp	.+120    	; 0xca4 <nRF24L01P_Rx_Basic+0x9e>
uint8_t nRF24L01P_Rx_Basic(uint8_t *buf){
  uint8_t sts=0;
  nRF24L01P_Error_Clear();
  nRF24L01P_RxTicks_Set(0);
  while(nRF24L01P_RxTicks_Get() < nRF24L01P_RxTimeout_Get()){
    if(nRF24L01P_Rx_Buf_Not_Empty()){
     c2c:	0e 94 00 04 	call	0x800	; 0x800 <nRF24L01P_Rx_Buf_Not_Empty>
     c30:	88 23       	and	r24, r24
     c32:	61 f1       	breq	.+88     	; 0xc8c <nRF24L01P_Rx_Basic+0x86>
      nRF24L01P_Read_Data_Rx_Buf(buf);
     c34:	ce 01       	movw	r24, r28
     c36:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <nRF24L01P_Read_Data_Rx_Buf>
	  uint16_t rec_crc=buf[nRF24L01P.SpaceAlloc.CRCMSB];               //30
     c3a:	80 91 75 06 	lds	r24, 0x0675
     c3e:	fe 01       	movw	r30, r28
     c40:	e8 0f       	add	r30, r24
     c42:	f1 1d       	adc	r31, r1
	  rec_crc<<=8;
     c44:	f0 80       	ld	r15, Z
     c46:	ee 24       	eor	r14, r14
	  rec_crc|=buf[nRF24L01P.SpaceAlloc.CRCLSB];                       //31
     c48:	80 91 76 06 	lds	r24, 0x0676
     c4c:	fe 01       	movw	r30, r28
     c4e:	e8 0f       	add	r30, r24
     c50:	f1 1d       	adc	r31, r1
     c52:	00 81       	ld	r16, Z
     c54:	10 e0       	ldi	r17, 0x00	; 0
     c56:	0e 29       	or	r16, r14
     c58:	1f 29       	or	r17, r15
      uint16_t calc_crc=nRF24L01P_CRC_Block(buf, nRF24L01P.SpaceAlloc.CRCLen);
     c5a:	ce 01       	movw	r24, r28
     c5c:	60 91 7c 06 	lds	r22, 0x067C
     c60:	0e 94 03 03 	call	0x606	; 0x606 <nRF24L01P_CRC_Block>
      if(rec_crc == calc_crc){
     c64:	08 17       	cp	r16, r24
     c66:	19 07       	cpc	r17, r25
     c68:	e9 f4       	brne	.+58     	; 0xca4 <nRF24L01P_Rx_Basic+0x9e>
	    nRF24L01P.Packet.RxPID = buf[nRF24L01P.SpaceAlloc.PID];        //25
     c6a:	80 91 7b 06 	lds	r24, 0x067B
     c6e:	fe 01       	movw	r30, r28
     c70:	e8 0f       	add	r30, r24
     c72:	f1 1d       	adc	r31, r1
     c74:	80 81       	ld	r24, Z
     c76:	80 93 70 06 	sts	0x0670, r24
	    nRF24L01P.Blocks.Remaining = buf[nRF24L01P.SpaceAlloc.Blocks]; //24
     c7a:	80 91 7d 06 	lds	r24, 0x067D
     c7e:	c8 0f       	add	r28, r24
     c80:	d1 1d       	adc	r29, r1
     c82:	88 81       	ld	r24, Y
     c84:	80 93 73 06 	sts	0x0673, r24
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	19 c0       	rjmp	.+50     	; 0xcbe <nRF24L01P_Rx_Basic+0xb8>
     c8c:	c6 01       	movw	r24, r12
     c8e:	01 97       	sbiw	r24, 0x01	; 1
     c90:	f1 f7       	brne	.-4      	; 0xc8e <nRF24L01P_Rx_Basic+0x88>
		sts=1;
		break;
	  }
    }else{
      _delay_us(100);
      nRF24L01P.Config.RxTicks++;
     c92:	80 91 68 06 	lds	r24, 0x0668
     c96:	90 91 69 06 	lds	r25, 0x0669
     c9a:	01 96       	adiw	r24, 0x01	; 1
     c9c:	90 93 69 06 	sts	0x0669, r25
     ca0:	80 93 68 06 	sts	0x0668, r24

uint8_t nRF24L01P_Rx_Basic(uint8_t *buf){
  uint8_t sts=0;
  nRF24L01P_Error_Clear();
  nRF24L01P_RxTicks_Set(0);
  while(nRF24L01P_RxTicks_Get() < nRF24L01P_RxTimeout_Get()){
     ca4:	20 91 68 06 	lds	r18, 0x0668
     ca8:	30 91 69 06 	lds	r19, 0x0669
     cac:	80 91 66 06 	lds	r24, 0x0666
     cb0:	90 91 67 06 	lds	r25, 0x0667
     cb4:	28 17       	cp	r18, r24
     cb6:	39 07       	cpc	r19, r25
     cb8:	08 f4       	brcc	.+2      	; 0xcbc <nRF24L01P_Rx_Basic+0xb6>
     cba:	b8 cf       	rjmp	.-144    	; 0xc2c <nRF24L01P_Rx_Basic+0x26>
     cbc:	80 e0       	ldi	r24, 0x00	; 0
      _delay_us(100);
      nRF24L01P.Config.RxTicks++;
	}
  }
  return sts;
}
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	1f 91       	pop	r17
     cc4:	0f 91       	pop	r16
     cc6:	ff 90       	pop	r15
     cc8:	ef 90       	pop	r14
     cca:	df 90       	pop	r13
     ccc:	cf 90       	pop	r12
     cce:	08 95       	ret

00000cd0 <nRF24L01P_Tx_With_Ack>:


uint8_t nRF24L01P_Tx_With_Ack(uint8_t *buf, uint8_t len){
     cd0:	ef 92       	push	r14
     cd2:	ff 92       	push	r15
     cd4:	0f 93       	push	r16
     cd6:	1f 93       	push	r17
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	a0 97       	sbiw	r28, 0x20	; 32
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	f8 94       	cli
     ce6:	de bf       	out	0x3e, r29	; 62
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	cd bf       	out	0x3d, r28	; 61
void nRF24L01P_RxTimeout_Set(uint16_t val){
  nRF24L01P.Config.RxTimeout=val;
}

uint16_t nRF24L01P_RxTimeout_Get(void){
  return nRF24L01P.Config.RxTimeout;
     cec:	e0 90 66 06 	lds	r14, 0x0666
     cf0:	f0 90 67 06 	lds	r15, 0x0667
uint16_t nRF24L01P_RxTicks_Get(void){
  return nRF24L01P.Config.RxTicks;
}

void nRF24L01P_RxTimeout_Set(uint16_t val){
  nRF24L01P.Config.RxTimeout=val;
     cf4:	25 e0       	ldi	r18, 0x05	; 5
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	30 93 67 06 	sts	0x0667, r19
     cfc:	20 93 66 06 	sts	0x0666, r18

uint8_t nRF24L01P_Tx_With_Ack(uint8_t *buf, uint8_t len){
  uint8_t  sts = 0, ack_buf[32];
  uint16_t timeout_mem = nRF24L01P_RxTimeout_Get();
  nRF24L01P_RxTimeout_Set(nRF24L01P_TX_ACK_RCV_TIMEOUT);
  nRF24L01P_Tx_Basic(buf, len);
     d00:	0e 94 af 05 	call	0xb5e	; 0xb5e <nRF24L01P_Tx_Basic>
  if( nRF24L01P.Packet.AckReq ){                    //need to improve ack type
     d04:	80 91 72 06 	lds	r24, 0x0672
     d08:	88 23       	and	r24, r24
     d0a:	a1 f0       	breq	.+40     	; 0xd34 <nRF24L01P_Tx_With_Ack+0x64>
    if( nRF24L01P_Rx_Basic(ack_buf) ){
     d0c:	8e 01       	movw	r16, r28
     d0e:	0f 5f       	subi	r16, 0xFF	; 255
     d10:	1f 4f       	sbci	r17, 0xFF	; 255
     d12:	c8 01       	movw	r24, r16
     d14:	0e 94 03 06 	call	0xc06	; 0xc06 <nRF24L01P_Rx_Basic>
     d18:	88 23       	and	r24, r24
     d1a:	61 f0       	breq	.+24     	; 0xd34 <nRF24L01P_Tx_With_Ack+0x64>
      if( nRF24L01P_Own_Addr_Get() == ack_buf[nRF24L01P.SpaceAlloc.Dest] ){
     d1c:	80 91 78 06 	lds	r24, 0x0678
     d20:	08 0f       	add	r16, r24
     d22:	11 1d       	adc	r17, r1
     d24:	90 91 64 06 	lds	r25, 0x0664
     d28:	f8 01       	movw	r30, r16
     d2a:	80 81       	ld	r24, Z
     d2c:	98 17       	cp	r25, r24
     d2e:	11 f4       	brne	.+4      	; 0xd34 <nRF24L01P_Tx_With_Ack+0x64>
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	01 c0       	rjmp	.+2      	; 0xd36 <nRF24L01P_Tx_With_Ack+0x66>
     d34:	80 e0       	ldi	r24, 0x00	; 0
uint16_t nRF24L01P_RxTicks_Get(void){
  return nRF24L01P.Config.RxTicks;
}

void nRF24L01P_RxTimeout_Set(uint16_t val){
  nRF24L01P.Config.RxTimeout=val;
     d36:	f0 92 67 06 	sts	0x0667, r15
     d3a:	e0 92 66 06 	sts	0x0666, r14
      }
    }
  }
  nRF24L01P_RxTimeout_Set(timeout_mem);
  return sts;
}
     d3e:	a0 96       	adiw	r28, 0x20	; 32
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	cf 91       	pop	r28
     d4c:	df 91       	pop	r29
     d4e:	1f 91       	pop	r17
     d50:	0f 91       	pop	r16
     d52:	ff 90       	pop	r15
     d54:	ef 90       	pop	r14
     d56:	08 95       	ret

00000d58 <nRF24L01P_Rx_With_Ack>:

uint8_t nRF24L01P_Rx_With_Ack(uint8_t *buf){
     d58:	0f 93       	push	r16
     d5a:	1f 93       	push	r17
     d5c:	df 93       	push	r29
     d5e:	cf 93       	push	r28
     d60:	cd b7       	in	r28, 0x3d	; 61
     d62:	de b7       	in	r29, 0x3e	; 62
     d64:	a0 97       	sbiw	r28, 0x20	; 32
     d66:	0f b6       	in	r0, 0x3f	; 63
     d68:	f8 94       	cli
     d6a:	de bf       	out	0x3e, r29	; 62
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	cd bf       	out	0x3d, r28	; 61
     d70:	8c 01       	movw	r16, r24
  uint8_t sts=0, ack_buf[32]="~^~";
     d72:	8e e7       	ldi	r24, 0x7E	; 126
     d74:	9e e5       	ldi	r25, 0x5E	; 94
     d76:	ae e7       	ldi	r26, 0x7E	; 126
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	89 83       	std	Y+1, r24	; 0x01
     d7c:	9a 83       	std	Y+2, r25	; 0x02
     d7e:	ab 83       	std	Y+3, r26	; 0x03
     d80:	bc 83       	std	Y+4, r27	; 0x04
     d82:	fe 01       	movw	r30, r28
     d84:	35 96       	adiw	r30, 0x05	; 5
     d86:	8c e1       	ldi	r24, 0x1C	; 28
     d88:	df 01       	movw	r26, r30
     d8a:	1d 92       	st	X+, r1
     d8c:	8a 95       	dec	r24
     d8e:	e9 f7       	brne	.-6      	; 0xd8a <nRF24L01P_Rx_With_Ack+0x32>
  if( nRF24L01P_Rx_Basic(buf) ){
     d90:	c8 01       	movw	r24, r16
     d92:	0e 94 03 06 	call	0xc06	; 0xc06 <nRF24L01P_Rx_Basic>
     d96:	88 23       	and	r24, r24
     d98:	a9 f1       	breq	.+106    	; 0xe04 <nRF24L01P_Rx_With_Ack+0xac>
    if( ((buf[nRF24L01P.SpaceAlloc.Ack] & 1)==1) && ( nRF24L01P_Own_Addr_Get() == buf[nRF24L01P.SpaceAlloc.Dest]) ){ //check ack type
     d9a:	80 91 7a 06 	lds	r24, 0x067A
     d9e:	f8 01       	movw	r30, r16
     da0:	e8 0f       	add	r30, r24
     da2:	f1 1d       	adc	r31, r1
     da4:	80 81       	ld	r24, Z
     da6:	80 ff       	sbrs	r24, 0
     da8:	2d c0       	rjmp	.+90     	; 0xe04 <nRF24L01P_Rx_With_Ack+0xac>
     daa:	80 91 78 06 	lds	r24, 0x0678
     dae:	f8 01       	movw	r30, r16
     db0:	e8 0f       	add	r30, r24
     db2:	f1 1d       	adc	r31, r1
     db4:	90 91 64 06 	lds	r25, 0x0664
     db8:	80 81       	ld	r24, Z
     dba:	98 17       	cp	r25, r24
     dbc:	19 f5       	brne	.+70     	; 0xe04 <nRF24L01P_Rx_With_Ack+0xac>
     dbe:	88 ee       	ldi	r24, 0xE8	; 232
     dc0:	93 e0       	ldi	r25, 0x03	; 3
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	f1 f7       	brne	.-4      	; 0xdc2 <nRF24L01P_Rx_With_Ack+0x6a>
uint8_t nRF24L01P_Own_Addr_Get(void){
  return nRF24L01P.Address.Own;
}

void nRF24L01P_Dest_Addr_Set(uint8_t addr){
  nRF24L01P.Address.Dest=addr;
     dc6:	80 91 79 06 	lds	r24, 0x0679
     dca:	f8 01       	movw	r30, r16
     dcc:	e8 0f       	add	r30, r24
     dce:	f1 1d       	adc	r31, r1
     dd0:	80 81       	ld	r24, Z
     dd2:	80 93 65 06 	sts	0x0665, r24
  uint8_t sts=0, ack_buf[32]="~^~";
  if( nRF24L01P_Rx_Basic(buf) ){
    if( ((buf[nRF24L01P.SpaceAlloc.Ack] & 1)==1) && ( nRF24L01P_Own_Addr_Get() == buf[nRF24L01P.SpaceAlloc.Dest]) ){ //check ack type
      _delay_us(nRF24L01P_RX_ACK_SEND_DELAY);                                                                                               //check delay
	  nRF24L01P_Dest_Addr_Set(buf[nRF24L01P.SpaceAlloc.Own]);
	  nRF24L01P.Packet.TxPID = buf[nRF24L01P.SpaceAlloc.PID];
     dd6:	80 91 7b 06 	lds	r24, 0x067B
     dda:	f8 01       	movw	r30, r16
     ddc:	e8 0f       	add	r30, r24
     dde:	f1 1d       	adc	r31, r1
     de0:	80 81       	ld	r24, Z
     de2:	80 93 6f 06 	sts	0x066F, r24
	  nRF24L01P.Blocks.Remaining = buf[nRF24L01P.SpaceAlloc.Blocks];
     de6:	80 91 7d 06 	lds	r24, 0x067D
     dea:	08 0f       	add	r16, r24
     dec:	11 1d       	adc	r17, r1
     dee:	f8 01       	movw	r30, r16
     df0:	80 81       	ld	r24, Z
     df2:	80 93 73 06 	sts	0x0673, r24
      nRF24L01P_Tx_Basic(ack_buf, 3);
     df6:	ce 01       	movw	r24, r28
     df8:	01 96       	adiw	r24, 0x01	; 1
     dfa:	63 e0       	ldi	r22, 0x03	; 3
     dfc:	0e 94 af 05 	call	0xb5e	; 0xb5e <nRF24L01P_Tx_Basic>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	01 c0       	rjmp	.+2      	; 0xe06 <nRF24L01P_Rx_With_Ack+0xae>
     e04:	80 e0       	ldi	r24, 0x00	; 0
      sts=1;
    }
  }
  return sts;
}
     e06:	a0 96       	adiw	r28, 0x20	; 32
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	f8 94       	cli
     e0c:	de bf       	out	0x3e, r29	; 62
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	cd bf       	out	0x3d, r28	; 61
     e12:	cf 91       	pop	r28
     e14:	df 91       	pop	r29
     e16:	1f 91       	pop	r17
     e18:	0f 91       	pop	r16
     e1a:	08 95       	ret

00000e1c <nRF24L01P_Init>:

void nRF24L01P_Init(void){
     e1c:	ff 92       	push	r15
     e1e:	0f 93       	push	r16
     e20:	1f 93       	push	r17
  nRF24L01P_Struct_Init();
     e22:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <nRF24L01P_Struct_Init>
  nRF24L01P_Enable();
     e26:	0e 94 95 02 	call	0x52a	; 0x52a <nRF24L01P_Enable>
  nRF24L01P.TempBuf[0] = 0x00;  nRF24L01P_ReadWrite_Register( 0x00, 0, nRF24L01P.TempBuf, 1 );
     e2a:	02 e6       	ldi	r16, 0x62	; 98
     e2c:	16 e0       	ldi	r17, 0x06	; 6
     e2e:	10 92 62 06 	sts	0x0662, r1
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	60 e0       	ldi	r22, 0x00	; 0
     e36:	a8 01       	movw	r20, r16
     e38:	21 e0       	ldi	r18, 0x01	; 1
     e3a:	0e 94 34 03 	call	0x668	; 0x668 <nRF24L01P_ReadWrite_Register>
  nRF24L01P.TempBuf[0] = 0x00;  nRF24L01P_ReadWrite_Register( 0x01, 0, nRF24L01P.TempBuf, 1 );
     e3e:	10 92 62 06 	sts	0x0662, r1
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	60 e0       	ldi	r22, 0x00	; 0
     e46:	a8 01       	movw	r20, r16
     e48:	21 e0       	ldi	r18, 0x01	; 1
     e4a:	0e 94 34 03 	call	0x668	; 0x668 <nRF24L01P_ReadWrite_Register>
  nRF24L01P.TempBuf[0] = 0x03;  nRF24L01P_ReadWrite_Register( 0x02, 0, nRF24L01P.TempBuf, 1 );
     e4e:	83 e0       	ldi	r24, 0x03	; 3
     e50:	80 93 62 06 	sts	0x0662, r24
     e54:	82 e0       	ldi	r24, 0x02	; 2
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	a8 01       	movw	r20, r16
     e5a:	21 e0       	ldi	r18, 0x01	; 1
     e5c:	0e 94 34 03 	call	0x668	; 0x668 <nRF24L01P_ReadWrite_Register>
  nRF24L01P.TempBuf[0] = 0x01;  nRF24L01P_ReadWrite_Register( 0x03, 0, nRF24L01P.TempBuf, 1 );
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	80 93 62 06 	sts	0x0662, r24
     e66:	83 e0       	ldi	r24, 0x03	; 3
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	a8 01       	movw	r20, r16
     e6c:	21 e0       	ldi	r18, 0x01	; 1
     e6e:	0e 94 34 03 	call	0x668	; 0x668 <nRF24L01P_ReadWrite_Register>
  nRF24L01P.TempBuf[0] = 0x00;  nRF24L01P_ReadWrite_Register( 0x04, 0, nRF24L01P.TempBuf, 1 );
     e72:	10 92 62 06 	sts	0x0662, r1
     e76:	84 e0       	ldi	r24, 0x04	; 4
     e78:	60 e0       	ldi	r22, 0x00	; 0
     e7a:	a8 01       	movw	r20, r16
     e7c:	21 e0       	ldi	r18, 0x01	; 1
     e7e:	0e 94 34 03 	call	0x668	; 0x668 <nRF24L01P_ReadWrite_Register>
  nRF24L01P.TempBuf[0] = 0x02;  nRF24L01P_ReadWrite_Register( 0x05, 0, nRF24L01P.TempBuf, 1 );
     e82:	82 e0       	ldi	r24, 0x02	; 2
     e84:	80 93 62 06 	sts	0x0662, r24
     e88:	85 e0       	ldi	r24, 0x05	; 5
     e8a:	60 e0       	ldi	r22, 0x00	; 0
     e8c:	a8 01       	movw	r20, r16
     e8e:	21 e0       	ldi	r18, 0x01	; 1
     e90:	0e 94 34 03 	call	0x668	; 0x668 <nRF24L01P_ReadWrite_Register>
  nRF24L01P.TempBuf[0] = 0x26;  nRF24L01P_ReadWrite_Register( 0x06, 0, nRF24L01P.TempBuf, 1 ); 
     e94:	86 e2       	ldi	r24, 0x26	; 38
     e96:	80 93 62 06 	sts	0x0662, r24
     e9a:	86 e0       	ldi	r24, 0x06	; 6
     e9c:	60 e0       	ldi	r22, 0x00	; 0
     e9e:	a8 01       	movw	r20, r16
     ea0:	21 e0       	ldi	r18, 0x01	; 1
     ea2:	0e 94 34 03 	call	0x668	; 0x668 <nRF24L01P_ReadWrite_Register>
  nRF24L01P.TempBuf[0] = 0x70;  nRF24L01P_ReadWrite_Register( 0x07, 0, nRF24L01P.TempBuf, 1 );
     ea6:	80 e7       	ldi	r24, 0x70	; 112
     ea8:	80 93 62 06 	sts	0x0662, r24
     eac:	87 e0       	ldi	r24, 0x07	; 7
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	a8 01       	movw	r20, r16
     eb2:	21 e0       	ldi	r18, 0x01	; 1
     eb4:	0e 94 34 03 	call	0x668	; 0x668 <nRF24L01P_ReadWrite_Register>
  nRF24L01P.TempBuf[0] = nRF24L01P_PACKET_LEN;  
     eb8:	e0 e2       	ldi	r30, 0x20	; 32
     eba:	fe 2e       	mov	r15, r30
     ebc:	f0 92 62 06 	sts	0x0662, r15
  nRF24L01P_ReadWrite_Register( 0x11, 0, nRF24L01P.TempBuf, 1 );
     ec0:	81 e1       	ldi	r24, 0x11	; 17
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	a8 01       	movw	r20, r16
     ec6:	21 e0       	ldi	r18, 0x01	; 1
     ec8:	0e 94 34 03 	call	0x668	; 0x668 <nRF24L01P_ReadWrite_Register>
  nRF24L01P.TempBuf[0] = nRF24L01P_PACKET_LEN;  
     ecc:	f0 92 62 06 	sts	0x0662, r15
  nRF24L01P_ReadWrite_Register( 0x12, 0, nRF24L01P.TempBuf, 1 );
     ed0:	82 e1       	ldi	r24, 0x12	; 18
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	a8 01       	movw	r20, r16
     ed6:	21 e0       	ldi	r18, 0x01	; 1
     ed8:	0e 94 34 03 	call	0x668	; 0x668 <nRF24L01P_ReadWrite_Register>
  nRF24L01P.TempBuf[0] = 0x00;  nRF24L01P_ReadWrite_Register( 0x1C, 0, nRF24L01P.TempBuf, 1 );
     edc:	10 92 62 06 	sts	0x0662, r1
     ee0:	8c e1       	ldi	r24, 0x1C	; 28
     ee2:	60 e0       	ldi	r22, 0x00	; 0
     ee4:	a8 01       	movw	r20, r16
     ee6:	21 e0       	ldi	r18, 0x01	; 1
     ee8:	0e 94 34 03 	call	0x668	; 0x668 <nRF24L01P_ReadWrite_Register>
  nRF24L01P.TempBuf[0] = 0x00;  nRF24L01P_ReadWrite_Register( 0x1D, 0, nRF24L01P.TempBuf, 1 );
     eec:	10 92 62 06 	sts	0x0662, r1
     ef0:	8d e1       	ldi	r24, 0x1D	; 29
     ef2:	60 e0       	ldi	r22, 0x00	; 0
     ef4:	a8 01       	movw	r20, r16
     ef6:	21 e0       	ldi	r18, 0x01	; 1
     ef8:	0e 94 34 03 	call	0x668	; 0x668 <nRF24L01P_ReadWrite_Register>
  nRF24L01P_ReadWrite_Register( 0x10, 0, (uint8_t*)"ACK00", 5 );
     efc:	00 e0       	ldi	r16, 0x00	; 0
     efe:	11 e0       	ldi	r17, 0x01	; 1
     f00:	80 e1       	ldi	r24, 0x10	; 16
     f02:	60 e0       	ldi	r22, 0x00	; 0
     f04:	a8 01       	movw	r20, r16
     f06:	25 e0       	ldi	r18, 0x05	; 5
     f08:	0e 94 34 03 	call	0x668	; 0x668 <nRF24L01P_ReadWrite_Register>
  nRF24L01P_ReadWrite_Register( 0x0A, 0, (uint8_t*)"ACK00", 5 );
     f0c:	8a e0       	ldi	r24, 0x0A	; 10
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	a8 01       	movw	r20, r16
     f12:	25 e0       	ldi	r18, 0x05	; 5
     f14:	0e 94 34 03 	call	0x668	; 0x668 <nRF24L01P_ReadWrite_Register>
  nRF24L01P_Speed_Set(4);
     f18:	84 e0       	ldi	r24, 0x04	; 4
     f1a:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <nRF24L01P_Speed_Set>
  nRF24L01P_Mode_Set(0);
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	0e 94 98 04 	call	0x930	; 0x930 <nRF24L01P_Mode_Set>
}
     f24:	1f 91       	pop	r17
     f26:	0f 91       	pop	r16
     f28:	ff 90       	pop	r15
     f2a:	08 95       	ret

00000f2c <__vector_6>:
		BRSH   _KER_SCH_NEXT\@                            ;if prio>=lowest prio   (  2 clocks) 
		;found new lowest priority                                                             
		STS    KerBase+OFB_LPR   , R24                    ;save lowest priority   (  2 clocks) 
		LDS    R18               , KerBase+OFB_TID        ;load task id           (  2 clocks) 
		STS    KerBase+OFB_PTID  , R18                    ;save lowest priority   (  2 clocks) 
                                                                                               
     f2c:	5d 9a       	sbi	0x0b, 5	; 11
    _KER_SCH_NEXT\@:                                                                           
     f2e:	20 91 53 00 	lds	r18, 0x0053
     f32:	2e 7f       	andi	r18, 0xFE	; 254
     f34:	20 93 53 00 	sts	0x0053, r18
	    LDS    R18               , KerBase+OFB_TID        ;load task id           (  2 clocks) 
     f38:	0f 92       	push	r0
     f3a:	0f b6       	in	r0, 0x3f	; 63
     f3c:	0f 92       	push	r0
     f3e:	1f 92       	push	r1
     f40:	11 24       	eor	r1, r1
     f42:	2f 92       	push	r2
     f44:	3f 92       	push	r3
     f46:	4f 92       	push	r4
     f48:	5f 92       	push	r5
     f4a:	6f 92       	push	r6
     f4c:	7f 92       	push	r7
     f4e:	8f 92       	push	r8
     f50:	9f 92       	push	r9
     f52:	af 92       	push	r10
     f54:	bf 92       	push	r11
     f56:	cf 92       	push	r12
     f58:	df 92       	push	r13
     f5a:	ef 92       	push	r14
     f5c:	ff 92       	push	r15
     f5e:	0f 93       	push	r16
     f60:	1f 93       	push	r17
     f62:	2f 93       	push	r18
     f64:	3f 93       	push	r19
     f66:	4f 93       	push	r20
     f68:	5f 93       	push	r21
     f6a:	6f 93       	push	r22
     f6c:	7f 93       	push	r23
     f6e:	8f 93       	push	r24
     f70:	9f 93       	push	r25
     f72:	af 93       	push	r26
     f74:	bf 93       	push	r27
     f76:	cf 93       	push	r28
     f78:	df 93       	push	r29
     f7a:	ef 93       	push	r30
     f7c:	ff 93       	push	r31
		INC    R18                                        ;increment by 1         (  1 clock ) 
     f7e:	e6 e1       	ldi	r30, 0x16	; 22
     f80:	f1 e0       	ldi	r31, 0x01	; 1
     f82:	20 91 0d 01 	lds	r18, 0x010D
     f86:	22 0f       	add	r18, r18
     f88:	e2 0f       	add	r30, r18
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	f2 1f       	adc	r31, r18
     f8e:	2d b7       	in	r18, 0x3d	; 61
     f90:	3e b7       	in	r19, 0x3e	; 62
     f92:	20 83       	st	Z, r18
     f94:	31 83       	std	Z+1, r19	; 0x01
		LDS    R19               , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
     f96:	20 91 0c 01 	lds	r18, 0x010C
     f9a:	20 93 46 00 	sts	0x0046, r18
		CP     R18               , R19                    ;compare with ntask     (  2 clocks) 
     f9e:	20 91 06 01 	lds	r18, 0x0106
     fa2:	23 95       	inc	r18
     fa4:	20 93 06 01 	sts	0x0106, r18
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	20 91 07 01 	lds	r18, 0x0107
     fae:	23 1f       	adc	r18, r19
     fb0:	20 93 07 01 	sts	0x0107, r18
     fb4:	20 91 08 01 	lds	r18, 0x0108
     fb8:	23 1f       	adc	r18, r19
     fba:	20 93 08 01 	sts	0x0108, r18
     fbe:	20 91 09 01 	lds	r18, 0x0109
     fc2:	23 1f       	adc	r18, r19
     fc4:	20 93 09 01 	sts	0x0109, r18
     fc8:	20 91 0a 01 	lds	r18, 0x010A
     fcc:	23 1f       	adc	r18, r19
     fce:	20 93 0a 01 	sts	0x010A, r18
		BRSH   _KER_SCH_EXIT\@                            ;if task_id>=ntask      (  2 clocks) 
     fd2:	80 e0       	ldi	r24, 0x00	; 0
		RJMP   _KER_SCH_LOOP\@                            ;jump to entry          (  2 clocks) 
     fd4:	2f ef       	ldi	r18, 0xFF	; 255
     fd6:	20 93 0f 01 	sts	0x010F, r18
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	20 93 10 01 	sts	0x0110, r18
     fe0:	58 2f       	mov	r21, r24

00000fe2 <_KER_SCH_LOOP9>:
     fe2:	20 93 0d 01 	sts	0x010D, r18
     fe6:	85 2f       	mov	r24, r21
     fe8:	ec e4       	ldi	r30, 0x4C	; 76
     fea:	f1 e0       	ldi	r31, 0x01	; 1
     fec:	20 91 0d 01 	lds	r18, 0x010D
     ff0:	22 0f       	add	r18, r18
     ff2:	e2 0f       	add	r30, r18
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	f2 1f       	adc	r31, r18
     ff8:	20 81       	ld	r18, Z
     ffa:	31 81       	ldd	r19, Z+1	; 0x01
     ffc:	42 2f       	mov	r20, r18
     ffe:	43 2b       	or	r20, r19
    1000:	59 f0       	breq	.+22     	; 0x1018 <_VAL_NULL10>
    1002:	81 30       	cpi	r24, 0x01	; 1
    1004:	99 f0       	breq	.+38     	; 0x102c <_VAL_NOT_NULL10>
    1006:	41 e0       	ldi	r20, 0x01	; 1
    1008:	24 1b       	sub	r18, r20
    100a:	40 e0       	ldi	r20, 0x00	; 0
    100c:	34 0b       	sbc	r19, r20
    100e:	20 83       	st	Z, r18
    1010:	31 83       	std	Z+1, r19	; 0x01
    1012:	42 2f       	mov	r20, r18
    1014:	43 2b       	or	r20, r19
    1016:	51 f4       	brne	.+20     	; 0x102c <_VAL_NOT_NULL10>

00001018 <_VAL_NULL10>:
    1018:	e8 e3       	ldi	r30, 0x38	; 56
    101a:	f1 e0       	ldi	r31, 0x01	; 1
    101c:	20 91 0d 01 	lds	r18, 0x010D
    1020:	e2 0f       	add	r30, r18
    1022:	20 e0       	ldi	r18, 0x00	; 0
    1024:	f2 1f       	adc	r31, r18
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	80 83       	st	Z, r24
    102a:	08 c0       	rjmp	.+16     	; 0x103c <_EXIT_SLP_TIME10>

0000102c <_VAL_NOT_NULL10>:
    102c:	e8 e3       	ldi	r30, 0x38	; 56
    102e:	f1 e0       	ldi	r31, 0x01	; 1
    1030:	20 91 0d 01 	lds	r18, 0x010D
    1034:	e2 0f       	add	r30, r18
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	f2 1f       	adc	r31, r18
    103a:	80 81       	ld	r24, Z

0000103c <_EXIT_SLP_TIME10>:
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	19 f0       	breq	.+6      	; 0x1046 <_KER_CALC_PRIO9>
    1040:	84 30       	cpi	r24, 0x04	; 4
    1042:	09 f0       	breq	.+2      	; 0x1046 <_KER_CALC_PRIO9>
    1044:	12 c0       	rjmp	.+36     	; 0x106a <_KER_SCH_NEXT9>

00001046 <_KER_CALC_PRIO9>:
    1046:	e2 e4       	ldi	r30, 0x42	; 66
    1048:	f1 e0       	ldi	r31, 0x01	; 1
    104a:	20 e0       	ldi	r18, 0x00	; 0
    104c:	80 91 0d 01 	lds	r24, 0x010D
    1050:	e8 0f       	add	r30, r24
    1052:	f2 1f       	adc	r31, r18
    1054:	80 81       	ld	r24, Z
    1056:	20 91 0f 01 	lds	r18, 0x010F
    105a:	82 17       	cp	r24, r18
    105c:	30 f4       	brcc	.+12     	; 0x106a <_KER_SCH_NEXT9>
    105e:	80 93 0f 01 	sts	0x010F, r24
    1062:	20 91 0d 01 	lds	r18, 0x010D
    1066:	20 93 10 01 	sts	0x0110, r18

0000106a <_KER_SCH_NEXT9>:
    106a:	20 91 0d 01 	lds	r18, 0x010D
    106e:	23 95       	inc	r18
    1070:	30 91 0e 01 	lds	r19, 0x010E
    1074:	23 17       	cp	r18, r19
    1076:	08 f4       	brcc	.+2      	; 0x107a <_KER_SCH_EXIT9>
    1078:	b4 cf       	rjmp	.-152    	; 0xfe2 <_KER_SCH_LOOP9>

0000107a <_KER_SCH_EXIT9>:
    107a:	20 91 10 01 	lds	r18, 0x0110
    107e:	20 93 0d 01 	sts	0x010D, r18
	_KER_SCH_EXIT\@:                                                                           
    1082:	20 91 0d 01 	lds	r18, 0x010D
    1086:	22 23       	and	r18, r18
    1088:	29 f0       	breq	.+10     	; 0x1094 <_KER_USG_TICK15>
    108a:	20 91 12 01 	lds	r18, 0x0112
    108e:	23 95       	inc	r18
    1090:	20 93 12 01 	sts	0x0112, r18

00001094 <_KER_USG_TICK15>:
    1094:	20 91 11 01 	lds	r18, 0x0111
    1098:	23 95       	inc	r18
    109a:	24 36       	cpi	r18, 0x64	; 100
    109c:	40 f0       	brcs	.+16     	; 0x10ae <_KER_USG_UTC_SV15>
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	30 91 12 01 	lds	r19, 0x0112
    10a4:	30 93 13 01 	sts	0x0113, r19
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	30 93 12 01 	sts	0x0112, r19

000010ae <_KER_USG_UTC_SV15>:
    10ae:	20 93 11 01 	sts	0x0111, r18
        LDS    R18               , KerBase+OFB_PTID       ;load high prio task id (  2 clocks) 
    10b2:	e6 e1       	ldi	r30, 0x16	; 22
    10b4:	f1 e0       	ldi	r31, 0x01	; 1
    10b6:	20 91 0d 01 	lds	r18, 0x010D
    10ba:	22 0f       	add	r18, r18
    10bc:	e2 0f       	add	r30, r18
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	f2 1f       	adc	r31, r18
    10c2:	20 81       	ld	r18, Z
    10c4:	31 81       	ldd	r19, Z+1	; 0x01
    10c6:	2d bf       	out	0x3d, r18	; 61
    10c8:	3e bf       	out	0x3e, r19	; 62
		STS    KerBase+OFB_TID   , R18                    ;for test only          (  2 clocks) 
    10ca:	ff 91       	pop	r31
    10cc:	ef 91       	pop	r30
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	bf 91       	pop	r27
    10d4:	af 91       	pop	r26
    10d6:	9f 91       	pop	r25
    10d8:	8f 91       	pop	r24
    10da:	7f 91       	pop	r23
    10dc:	6f 91       	pop	r22
    10de:	5f 91       	pop	r21
    10e0:	4f 91       	pop	r20
    10e2:	3f 91       	pop	r19
    10e4:	2f 91       	pop	r18
    10e6:	1f 91       	pop	r17
    10e8:	0f 91       	pop	r16
    10ea:	ff 90       	pop	r15
    10ec:	ef 90       	pop	r14
    10ee:	df 90       	pop	r13
    10f0:	cf 90       	pop	r12
    10f2:	bf 90       	pop	r11
    10f4:	af 90       	pop	r10
    10f6:	9f 90       	pop	r9
    10f8:	8f 90       	pop	r8
    10fa:	7f 90       	pop	r7
    10fc:	6f 90       	pop	r6
    10fe:	5f 90       	pop	r5
    1100:	4f 90       	pop	r4
    1102:	3f 90       	pop	r3
    1104:	2f 90       	pop	r2
    1106:	1f 90       	pop	r1
    1108:	0f 90       	pop	r0
    110a:	0f be       	out	0x3f, r0	; 63
    110c:	0f 90       	pop	r0
.endm                                                                                          
    110e:	5d 98       	cbi	0x0b, 5	; 11
;;===================================run scheduler end======================================;; 
    1110:	20 91 60 00 	lds	r18, 0x0060

    1114:	20 64       	ori	r18, 0x40	; 64

    1116:	20 93 60 00 	sts	0x0060, r18

    111a:	18 95       	reti

0000111c <Kernel_SysTick_Reg_Init>:
;used registers          : R18, R19, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
;arg registers           : R24(Prescaler), R22(ReloadVal)                                      
;return registers        : None                                                                
;unsafe access registers : R18, R19, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
Kernel_SysTick_Reg_Init:                                  ;total 11.50uS @8MHz    ( 92 clocks) 
        CLI                                               ;disable global int     (  1 clock ) 
    111c:	f8 94       	cli
		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
    111e:	5d 98       	cbi	0x0b, 5	; 11
    1120:	55 9a       	sbi	0x0a, 5	; 10
        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
    1122:	a0 91 2a 01 	lds	r26, 0x012A
    1126:	b0 91 2b 01 	lds	r27, 0x012B
    112a:	2d b7       	in	r18, 0x3d	; 61
    112c:	3e b7       	in	r19, 0x3e	; 62
    112e:	2d 93       	st	X+, r18
    1130:	3d 93       	st	X+, r19
    1132:	ed 93       	st	X+, r30
    1134:	fd 93       	st	X+, r31
    1136:	a0 93 2a 01 	sts	0x012A, r26
    113a:	b0 93 2b 01 	sts	0x012B, r27
		;clear reg                                                                             
		LDI   R18                , 0x00                   ;set 0x00 to R18        (  1 clock ) 
    113e:	20 e0       	ldi	r18, 0x00	; 0
		;clear tick counter                                                                    
		STS   KerBase+OFB_TICK0  , R18                    ;clear  KerBase[0]      (  2 clocks) 
    1140:	20 93 06 01 	sts	0x0106, r18
		STS   KerBase+OFB_TICK1  , R18                    ;clear  KerBase[1]      (  2 clocks) 
    1144:	20 93 07 01 	sts	0x0107, r18
		STS   KerBase+OFB_TICK2  , R18                    ;clear  KerBase[2]      (  2 clocks) 
    1148:	20 93 08 01 	sts	0x0108, r18
		STS   KerBase+OFB_TICK3  , R18                    ;clear  KerBase[3]      (  2 clocks) 
    114c:	20 93 09 01 	sts	0x0109, r18
		STS   KerBase+OFB_TICK4  , R18                    ;clear  KerBase[4]      (  2 clocks) 
    1150:	20 93 0a 01 	sts	0x010A, r18
		;clear system registers                                                                
		STS   KerBase+OFB_PRS    , R18                    ;clear  KerBase[5]      (  2 clocks) 
    1154:	20 93 0b 01 	sts	0x010B, r18
		STS   KerBase+OFB_RLD    , R18                    ;clear  KerBase[6]      (  2 clocks) 
    1158:	20 93 0c 01 	sts	0x010C, r18
		STS   KerBase+OFB_TID    , R18                    ;clear  KerBase[7]      (  2 clocks) 
    115c:	20 93 0d 01 	sts	0x010D, r18
		STS   KerBase+OFB_NTSK   , R18                    ;clear  KerBase[8]      (  2 clocks) 
    1160:	20 93 0e 01 	sts	0x010E, r18
		STS   KerBase+OFB_LPR    , R18                    ;clear  KerBase[9]      (  2 clocks) 
    1164:	20 93 0f 01 	sts	0x010F, r18
        STS   KerBase+OFB_PTID   , R18                    ;clear  KerBase[10]     (  2 clocks) 
    1168:	20 93 10 01 	sts	0x0110, r18
		STS   KerBase+OFB_UTC    , R18                    ;clear  KerBase[11]     (  2 clocks) 
    116c:	20 93 11 01 	sts	0x0111, r18
		STS   KerBase+OFB_UATC   , R18                    ;clear  KerBase[12]     (  2 clocks) 
    1170:	20 93 12 01 	sts	0x0112, r18
		STS   KerBase+OFB_USAGE  , R18                    ;clear  KerBase[13]     (  2 clocks) 
    1174:	20 93 13 01 	sts	0x0113, r18
		STS   SROCR0A            , R18                    ;clear OCR0A            (  2 clocks) 
		STS   SROCR0B            , R18                    ;clear OCR0B            (  2 clocks) 
		STS   SRTCNT0            , R18                    ;clear TCNT0            (  2 clocks) 
		#endif                                                                                 
        #ifdef KER_WDT_AS_TICK_SRC                                                             
		WDR                                               ;reset wdt              (  1 clock ) 
    1178:	a8 95       	wdr
		LDS   R18                , SRMCUSR                ;copy MCUSR             (  1 clock ) 
    117a:	20 91 54 00 	lds	r18, 0x0054
		ANDI  R18                , 0xFF & (0<<WDRF)       ;clear WDRF             (  1 clock ) 
    117e:	20 70       	andi	r18, 0x00	; 0
		STS   SRMCUSR            , R18                    ;set val                (  1 clock ) 
    1180:	20 93 54 00 	sts	0x0054, r18
		LDS   R18                , SRWDTCSR               ;copy WDTCSR            (  2 clocks) 
    1184:	20 91 60 00 	lds	r18, 0x0060
		ORI   R18                , 0x18                   ;set WDCE,WDE           (  1 clock ) 
    1188:	28 61       	ori	r18, 0x18	; 24
		STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
    118a:	20 93 60 00 	sts	0x0060, r18
		LDI   R18                , 0x00                   ;clear WDE              (  1 clock ) 
    118e:	20 e0       	ldi	r18, 0x00	; 0
		STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
    1190:	20 93 60 00 	sts	0x0060, r18
		STS   SRTCCR2B           , R18                    ;set val to TCCR2B      (  2 clocks) 
		LDI   R18                , 0x00                   ;clear AS2 bit          (  1 clock ) 
		STS   SRASSR             , R18                    ;set val to ASSR        (  2 clocks) 
		#endif                                                                                 
		;save values for future use                                                            
		STS   KerBase+OFB_PRS    , R24                    ;KerBase[5] prescaler   (  2 clocks) 
    1194:	80 93 0b 01 	sts	0x010B, r24
		STS   KerBase+OFB_RLD    , R22                    ;KerBase[6] reload val  (  2 clocks) 
    1198:	60 93 0c 01 	sts	0x010C, r22
        KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
    119c:	a0 91 2a 01 	lds	r26, 0x012A
    11a0:	b0 91 2b 01 	lds	r27, 0x012B
    11a4:	fe 91       	ld	r31, -X
    11a6:	ee 91       	ld	r30, -X
    11a8:	3e 91       	ld	r19, -X
    11aa:	2e 91       	ld	r18, -X
    11ac:	2d bf       	out	0x3d, r18	; 61
    11ae:	3e bf       	out	0x3e, r19	; 62
    11b0:	a0 93 2a 01 	sts	0x012A, r26
    11b4:	b0 93 2b 01 	sts	0x012B, r27
		RET                                               ;return from subroutine (  4 clocks) 
    11b8:	08 95       	ret

000011ba <Kernel_Task_Create>:
;used registers          : R18, R19, R20, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)    
;arg registers           : R25:R24(FuncPtr), R22(TaskPriority)                                 
;return registers        : None                                                                
;unsafe access registers : R18, R19, R20, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)    
Kernel_Task_Create:                                       ;total 21.50uS @8MHz    (172 clocks) 
        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
    11ba:	a0 91 2a 01 	lds	r26, 0x012A
    11be:	b0 91 2b 01 	lds	r27, 0x012B
    11c2:	2d b7       	in	r18, 0x3d	; 61
    11c4:	3e b7       	in	r19, 0x3e	; 62
    11c6:	2d 93       	st	X+, r18
    11c8:	3d 93       	st	X+, r19
    11ca:	ed 93       	st	X+, r30
    11cc:	fd 93       	st	X+, r31
    11ce:	a0 93 2a 01 	sts	0x012A, r26
    11d2:	b0 93 2b 01 	sts	0x012B, r27
		;set priority to KerSchPr+task_id                                                      
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
    11d6:	e2 e4       	ldi	r30, 0x42	; 66
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
    11d8:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
    11da:	20 91 0d 01 	lds	r18, 0x010D
    11de:	e2 0f       	add	r30, r18
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	f2 1f       	adc	r31, r18
		ST    Z                  , R22                    ;save priority          (  2 clocks) 
    11e4:	60 83       	st	Z, r22
		;set task status to KerSchSts+task_id                                                  
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
    11e6:	e8 e3       	ldi	r30, 0x38	; 56
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
    11e8:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
    11ea:	20 91 0d 01 	lds	r18, 0x010D
    11ee:	e2 0f       	add	r30, r18
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	f2 1f       	adc	r31, r18
		LDI   R18                , TASK_READY             ;set status as ready    (  1 clock ) 
    11f4:	21 e0       	ldi	r18, 0x01	; 1
		ST    Z                  , R18                    ;save status            (  2 clocks) 
    11f6:	20 83       	st	Z, r18
		;stack pointer for current task (KerStack + KER_STK_SZ*(task_id+1) - 1) ->stack top    
		LDS   R18                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
    11f8:	20 91 0d 01 	lds	r18, 0x010D
		INC   R18                                         ;increment task_id      (  1 clock ) 
    11fc:	23 95       	inc	r18
		LDI   R19                , KER_STK_SZ             ;load stack size        (  1 clock ) 
    11fe:	30 e8       	ldi	r19, 0x80	; 128
		MUL   R18                , R19                    ;multiply to get offset (  2 clocks) 
    1200:	23 9f       	mul	r18, r19
		MOV   ZL                 , R0                     ;load multiplied low    (  1 clocks) 
    1202:	e0 2d       	mov	r30, r0
		MOV   ZH                 , R1                     ;load multiplied high   (  1 clocks) 
    1204:	f1 2d       	mov	r31, r1
		SBIW  ZL                 , 0x01                   ;dec multiplied val-1   (  2 clocks) 
    1206:	31 97       	sbiw	r30, 0x01	; 1
		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
    1208:	11 24       	eor	r1, r1
		LDI   R18                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
    120a:	20 e6       	ldi	r18, 0x60	; 96
		LDI   R19                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
    120c:	31 e0       	ldi	r19, 0x01	; 1
		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
    120e:	e2 0f       	add	r30, r18
		ADC   ZH                 , R19                    ;add high bytes+carry   (  1 clock ) 
    1210:	f3 1f       	adc	r31, r19
		OUT   IOSPL              , ZL                     ;load SPL               (  1 clock ) 
    1212:	ed bf       	out	0x3d, r30	; 61
        OUT   IOSPH              , ZH                     ;load SPH               (  1 clock ) 
    1214:	fe bf       	out	0x3e, r31	; 62
		;function argument directly returns word address                                       
	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
    1216:	8f 93       	push	r24
		PUSH  R25                                         ;push word addr high    (  2 clocks) 
    1218:	9f 93       	push	r25
		;push context to stack of this task                                                    
		KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
    121a:	0f 92       	push	r0
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	0f 92       	push	r0
    1220:	1f 92       	push	r1
    1222:	11 24       	eor	r1, r1
    1224:	2f 92       	push	r2
    1226:	3f 92       	push	r3
    1228:	4f 92       	push	r4
    122a:	5f 92       	push	r5
    122c:	6f 92       	push	r6
    122e:	7f 92       	push	r7
    1230:	8f 92       	push	r8
    1232:	9f 92       	push	r9
    1234:	af 92       	push	r10
    1236:	bf 92       	push	r11
    1238:	cf 92       	push	r12
    123a:	df 92       	push	r13
    123c:	ef 92       	push	r14
    123e:	ff 92       	push	r15
    1240:	0f 93       	push	r16
    1242:	1f 93       	push	r17
    1244:	2f 93       	push	r18
    1246:	3f 93       	push	r19
    1248:	4f 93       	push	r20
    124a:	5f 93       	push	r21
    124c:	6f 93       	push	r22
    124e:	7f 93       	push	r23
    1250:	8f 93       	push	r24
    1252:	9f 93       	push	r25
    1254:	af 93       	push	r26
    1256:	bf 93       	push	r27
    1258:	cf 93       	push	r28
    125a:	df 93       	push	r29
    125c:	ef 93       	push	r30
    125e:	ff 93       	push	r31
		;read stack pointer of current task (necessary when restore)                           
		IN    R18                , IOSPL                  ;read SPL               (  1 clock ) 
    1260:	2d b7       	in	r18, 0x3d	; 61
        IN    R19                , IOSPH                  ;read SPH               (  1 clock ) 
    1262:	3e b7       	in	r19, 0x3e	; 62
		;calculate the address where current task's SP will be stored and store SP             
		LDS   R20                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
    1264:	40 91 0d 01 	lds	r20, 0x010D
		LSL   R20                                         ;left shift to multiply (  1 clock ) 
    1268:	44 0f       	add	r20, r20
		LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
    126a:	e6 e1       	ldi	r30, 0x16	; 22
		LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
    126c:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R20                    ;add offset to array    (  1 clock ) 
    126e:	e4 0f       	add	r30, r20
		LDI   R20                , 0x00                   ;clear reg              (  1 clock ) 
    1270:	40 e0       	ldi	r20, 0x00	; 0
		ADC   ZH                 , R20                    ;add carry if any       (  1 clock ) 
    1272:	f4 1f       	adc	r31, r20
		ST    Z+                 , R18                    ;SPL at KerPSp+offset   (  2 clocks) 
    1274:	21 93       	st	Z+, r18
		ST    Z                  , R19                    ;SPH at KerPSp+offset   (  2 clocks) 
    1276:	30 83       	st	Z, r19
		;increment task_id                                                                     
		LDS   R18                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
    1278:	20 91 0d 01 	lds	r18, 0x010D
		INC   R18                                         ;increment task_id      (  1 clock ) 
    127c:	23 95       	inc	r18
		STS   KerBase+OFB_TID    , R18                    ;store task_id          (  2 clocks) 
    127e:	20 93 0d 01 	sts	0x010D, r18
		;increment ntask                                                                       
		LDS   R18                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
    1282:	20 91 0e 01 	lds	r18, 0x010E
		INC   R18                                         ;increment ntask        (  1 clock ) 
    1286:	23 95       	inc	r18
		STS   KerBase+OFB_NTSK   , R18                    ;store ntask            (  2 clocks) 
    1288:	20 93 0e 01 	sts	0x010E, r18
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
    128c:	a0 91 2a 01 	lds	r26, 0x012A
    1290:	b0 91 2b 01 	lds	r27, 0x012B
    1294:	fe 91       	ld	r31, -X
    1296:	ee 91       	ld	r30, -X
    1298:	3e 91       	ld	r19, -X
    129a:	2e 91       	ld	r18, -X
    129c:	2d bf       	out	0x3d, r18	; 61
    129e:	3e bf       	out	0x3e, r19	; 62
    12a0:	a0 93 2a 01 	sts	0x012A, r26
    12a4:	b0 93 2b 01 	sts	0x012B, r27
		RET                                               ;return from subroutine (  4 clocks) 
    12a8:	08 95       	ret

000012aa <Kernel_Start_Tasks>:
;used registers          : R0~R31                                                              
;arg registers           : None                                                                
;return registers        : None                                                                
;unsafe access registers : R18, R19, R20, R24, R25, R30(ZL), R31(ZH)                           
Kernel_Start_Tasks:                                       ;total 25.63uS @8MHz    (205 clocks) 
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
    12aa:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
    12ac:	2f ef       	ldi	r18, 0xFF	; 255
    12ae:	20 93 0f 01 	sts	0x010F, r18
    12b2:	20 e0       	ldi	r18, 0x00	; 0
    12b4:	20 93 10 01 	sts	0x0110, r18
    12b8:	58 2f       	mov	r21, r24

000012ba <_KER_SCH_LOOP32>:
    12ba:	20 93 0d 01 	sts	0x010D, r18
    12be:	85 2f       	mov	r24, r21
    12c0:	ec e4       	ldi	r30, 0x4C	; 76
    12c2:	f1 e0       	ldi	r31, 0x01	; 1
    12c4:	20 91 0d 01 	lds	r18, 0x010D
    12c8:	22 0f       	add	r18, r18
    12ca:	e2 0f       	add	r30, r18
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	f2 1f       	adc	r31, r18
    12d0:	20 81       	ld	r18, Z
    12d2:	31 81       	ldd	r19, Z+1	; 0x01
    12d4:	42 2f       	mov	r20, r18
    12d6:	43 2b       	or	r20, r19
    12d8:	59 f0       	breq	.+22     	; 0x12f0 <_VAL_NULL33>
    12da:	81 30       	cpi	r24, 0x01	; 1
    12dc:	99 f0       	breq	.+38     	; 0x1304 <_VAL_NOT_NULL33>
    12de:	41 e0       	ldi	r20, 0x01	; 1
    12e0:	24 1b       	sub	r18, r20
    12e2:	40 e0       	ldi	r20, 0x00	; 0
    12e4:	34 0b       	sbc	r19, r20
    12e6:	20 83       	st	Z, r18
    12e8:	31 83       	std	Z+1, r19	; 0x01
    12ea:	42 2f       	mov	r20, r18
    12ec:	43 2b       	or	r20, r19
    12ee:	51 f4       	brne	.+20     	; 0x1304 <_VAL_NOT_NULL33>

000012f0 <_VAL_NULL33>:
    12f0:	e8 e3       	ldi	r30, 0x38	; 56
    12f2:	f1 e0       	ldi	r31, 0x01	; 1
    12f4:	20 91 0d 01 	lds	r18, 0x010D
    12f8:	e2 0f       	add	r30, r18
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	f2 1f       	adc	r31, r18
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	80 83       	st	Z, r24
    1302:	08 c0       	rjmp	.+16     	; 0x1314 <_EXIT_SLP_TIME33>

00001304 <_VAL_NOT_NULL33>:
    1304:	e8 e3       	ldi	r30, 0x38	; 56
    1306:	f1 e0       	ldi	r31, 0x01	; 1
    1308:	20 91 0d 01 	lds	r18, 0x010D
    130c:	e2 0f       	add	r30, r18
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	f2 1f       	adc	r31, r18
    1312:	80 81       	ld	r24, Z

00001314 <_EXIT_SLP_TIME33>:
    1314:	81 30       	cpi	r24, 0x01	; 1
    1316:	19 f0       	breq	.+6      	; 0x131e <_KER_CALC_PRIO32>
    1318:	84 30       	cpi	r24, 0x04	; 4
    131a:	09 f0       	breq	.+2      	; 0x131e <_KER_CALC_PRIO32>
    131c:	12 c0       	rjmp	.+36     	; 0x1342 <_KER_SCH_NEXT32>

0000131e <_KER_CALC_PRIO32>:
    131e:	e2 e4       	ldi	r30, 0x42	; 66
    1320:	f1 e0       	ldi	r31, 0x01	; 1
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	80 91 0d 01 	lds	r24, 0x010D
    1328:	e8 0f       	add	r30, r24
    132a:	f2 1f       	adc	r31, r18
    132c:	80 81       	ld	r24, Z
    132e:	20 91 0f 01 	lds	r18, 0x010F
    1332:	82 17       	cp	r24, r18
    1334:	30 f4       	brcc	.+12     	; 0x1342 <_KER_SCH_NEXT32>
    1336:	80 93 0f 01 	sts	0x010F, r24
    133a:	20 91 0d 01 	lds	r18, 0x010D
    133e:	20 93 10 01 	sts	0x0110, r18

00001342 <_KER_SCH_NEXT32>:
    1342:	20 91 0d 01 	lds	r18, 0x010D
    1346:	23 95       	inc	r18
    1348:	30 91 0e 01 	lds	r19, 0x010E
    134c:	23 17       	cp	r18, r19
    134e:	08 f4       	brcc	.+2      	; 0x1352 <_KER_SCH_EXIT32>
    1350:	b4 cf       	rjmp	.-152    	; 0x12ba <_KER_SCH_LOOP32>

00001352 <_KER_SCH_EXIT32>:
    1352:	20 91 10 01 	lds	r18, 0x0110
    1356:	20 93 0d 01 	sts	0x010D, r18
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
    135a:	e6 e1       	ldi	r30, 0x16	; 22
    135c:	f1 e0       	ldi	r31, 0x01	; 1
    135e:	20 91 0d 01 	lds	r18, 0x010D
    1362:	22 0f       	add	r18, r18
    1364:	e2 0f       	add	r30, r18
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	f2 1f       	adc	r31, r18
    136a:	20 81       	ld	r18, Z
    136c:	31 81       	ldd	r19, Z+1	; 0x01
    136e:	2d bf       	out	0x3d, r18	; 61
    1370:	3e bf       	out	0x3e, r19	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
    1372:	ff 91       	pop	r31
    1374:	ef 91       	pop	r30
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
    137a:	bf 91       	pop	r27
    137c:	af 91       	pop	r26
    137e:	9f 91       	pop	r25
    1380:	8f 91       	pop	r24
    1382:	7f 91       	pop	r23
    1384:	6f 91       	pop	r22
    1386:	5f 91       	pop	r21
    1388:	4f 91       	pop	r20
    138a:	3f 91       	pop	r19
    138c:	2f 91       	pop	r18
    138e:	1f 91       	pop	r17
    1390:	0f 91       	pop	r16
    1392:	ff 90       	pop	r15
    1394:	ef 90       	pop	r14
    1396:	df 90       	pop	r13
    1398:	cf 90       	pop	r12
    139a:	bf 90       	pop	r11
    139c:	af 90       	pop	r10
    139e:	9f 90       	pop	r9
    13a0:	8f 90       	pop	r8
    13a2:	7f 90       	pop	r7
    13a4:	6f 90       	pop	r6
    13a6:	5f 90       	pop	r5
    13a8:	4f 90       	pop	r4
    13aa:	3f 90       	pop	r3
    13ac:	2f 90       	pop	r2
    13ae:	1f 90       	pop	r1
    13b0:	0f 90       	pop	r0
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	0f 90       	pop	r0
    13b6:	78 94       	sei
		LDI   R18                , 0x01                   ;bit mask TOIE0         (  1 clock ) 
		STS   SRTIMSK0           , R18                    ;set to TIMSK0          (  2 clocks) 
		SEI                                               ;force enable interrupt (  1 clock ) 
		#endif                                                                                 
		                                                                                       
		#ifdef KER_WDT_AS_TICK_SRC                                                             
    13b8:	a8 95       	wdr
    13ba:	20 91 60 00 	lds	r18, 0x0060
    13be:	28 61       	ori	r18, 0x18	; 24
    13c0:	20 93 60 00 	sts	0x0060, r18
		                                                                                       
		#ifdef KER_WDT_TICK_500MS                                                              
		LDI   R18                , 0x45                   ;WDIE, WDPS1, WDPS2     (  1 clock ) 
		#endif                                                                                 
		                                                                                       
		#ifdef KER_WDT_TICK_1000MS                                                             
    13c4:	26 e4       	ldi	r18, 0x46	; 70
    13c6:	20 93 60 00 	sts	0x0060, r18
    13ca:	78 94       	sei
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
		;config timer for system tick                                                          
		KER_TIMER_INIT                                    ;init timer, int enable ( 12 clocks) 
		;execute return to jump to highest priority task                                       
		RET                                               ;return from subroutine (  4 clocks) 
    13cc:	08 95       	ret

000013ce <Kernel_Init>:
;used registers          : R1, R18, R19, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
;arg registers           : None                                                                
;return registers        : None                                                                
;unsafe access registers : R1, R18, R19, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
Kernel_Init:                                              ;total 39.75uS @8MHz    (318 clocks) 
		CLR   R1                                          ;gcc expects            (  1 clock ) 
    13ce:	11 24       	eor	r1, r1
        ;store stack top (for MSP) addr to KerSSZ+OFM_MSPI0:1                                  
		LDI   R18                , lo8(KerSSZ+OFM_MSPS)   ;load low address       (  1 clock ) 
    13d0:	2c e2       	ldi	r18, 0x2C	; 44
		LDI   R19                , hi8(KerSSZ+OFM_MSPS)   ;load high address      (  1 clock ) 
    13d2:	31 e0       	ldi	r19, 0x01	; 1
        STS   KerSSZ+OFM_MSPI+0  , R18                    ;set mspi to stack top  (  2 clocks) 
    13d4:	20 93 2a 01 	sts	0x012A, r18
		STS   KerSSZ+OFM_MSPI+1  , R19                    ;set mspi to stack top  (  2 clocks) 
    13d8:	30 93 2b 01 	sts	0x012B, r19
		KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
    13dc:	a0 91 2a 01 	lds	r26, 0x012A
    13e0:	b0 91 2b 01 	lds	r27, 0x012B
    13e4:	2d b7       	in	r18, 0x3d	; 61
    13e6:	3e b7       	in	r19, 0x3e	; 62
    13e8:	2d 93       	st	X+, r18
    13ea:	3d 93       	st	X+, r19
    13ec:	ed 93       	st	X+, r30
    13ee:	fd 93       	st	X+, r31
    13f0:	a0 93 2a 01 	sts	0x012A, r26
    13f4:	b0 93 2b 01 	sts	0x012B, r27
		;init timer for kernel                                                                 
		LDI   R24                , 0x03                   ;set prescaler          (  1 clock ) 
    13f8:	83 e0       	ldi	r24, 0x03	; 3
		LDI   R22                , 0x82                   ;set reload val         (  1 clock ) 
    13fa:	62 e8       	ldi	r22, 0x82	; 130
		CALL  Kernel_SysTick_Reg_Init                     ;init timer             ( 92 clocks) 
    13fc:	0e 94 8e 08 	call	0x111c	; 0x111c <Kernel_SysTick_Reg_Init>
		;create idle task at task_id 0, priority 0xFF (lowest)                                 
		LDI   R24                , lo8(Kernel_Task_Idle)  ;load func addr low     (  1 clock ) 
    1400:	8c e2       	ldi	r24, 0x2C	; 44
		LDI   R25                , hi8(Kernel_Task_Idle)  ;load func addr high    (  1 clock ) 
    1402:	94 e1       	ldi	r25, 0x14	; 20
		LSR   R25                                         ;right shift to divide  (  1 clock ) 
    1404:	96 95       	lsr	r25
		ROR   R24                                         ;rotate right th carry  (  1 clock ) 
    1406:	87 95       	ror	r24
		LDI   R22                , 0xFF                   ;set max val            (  1 clock ) 
    1408:	6f ef       	ldi	r22, 0xFF	; 255
		CALL  Kernel_Task_Create                          ;init idle task         (172 clocks) 
    140a:	0e 94 dd 08 	call	0x11ba	; 0x11ba <Kernel_Task_Create>
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
    140e:	a0 91 2a 01 	lds	r26, 0x012A
    1412:	b0 91 2b 01 	lds	r27, 0x012B
    1416:	fe 91       	ld	r31, -X
    1418:	ee 91       	ld	r30, -X
    141a:	3e 91       	ld	r19, -X
    141c:	2e 91       	ld	r18, -X
    141e:	2d bf       	out	0x3d, r18	; 61
    1420:	3e bf       	out	0x3e, r19	; 62
    1422:	a0 93 2a 01 	sts	0x012A, r26
    1426:	b0 93 2b 01 	sts	0x012B, r27
		;execute return to jump to task0, pushed while task init                               
		RET                                               ;return from subroutine (  4 clocks) 
    142a:	08 95       	ret

0000142c <Kernel_Task_Idle>:
                                                                                               
		#ifdef KER_SLEEP_MODE_ADC_NR                                                           
		LDI   R18                , 0x02                   ;set SM[2:0] val        (  1 clock ) 
		#endif
                                                                                               
		#ifdef KER_SLEEP_MODE_POWER_DOWN                                                       
    142c:	24 e0       	ldi	r18, 0x04	; 4
    142e:	20 93 53 00 	sts	0x0053, r18
    1432:	20 93 14 01 	sts	0x0114, r18

00001436 <_IDLE_LOOP>:
;return registers        : None                                                                
;unsafe access registers : None                                                                
Kernel_Task_Idle:                                                                              
	    KER_SLEEP_INIT                                    ;sleep init             (  5 clocks) 
    _IDLE_LOOP:                                           ;forever loop                        
	    KER_DISABLE_ANALOG_DOMAIN                         ;disable adc, ac        ( 10 clocks) 
    1436:	20 91 7a 00 	lds	r18, 0x007A
    143a:	2f 7e       	andi	r18, 0xEF	; 239
    143c:	20 93 7a 00 	sts	0x007A, r18
    1440:	20 91 50 00 	lds	r18, 0x0050
    1444:	20 68       	ori	r18, 0x80	; 128
    1446:	20 93 50 00 	sts	0x0050, r18
		#ifdef KER_CALL_FUNC_BEFORE_SLEEP                                                      
		CALL  Kernel_PreSleep_Hook                        ;call func before sleep (  8 clocks) 
    144a:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <Kernel_PreSleep_Hook>
		#endif                                                                                 
	    KER_ENTER_SLEEP                                   ;enter sleep mode       (  6 clocks) 
    144e:	20 91 53 00 	lds	r18, 0x0053
    1452:	21 60       	ori	r18, 0x01	; 1
    1454:	20 93 53 00 	sts	0x0053, r18
    1458:	88 95       	sleep
		RJMP  _IDLE_LOOP                                  ;jump to loop start     (  2 clocks) 
    145a:	ed cf       	rjmp	.-38     	; 0x1436 <_IDLE_LOOP>

0000145c <Kernel_Task_Sleep>:
;arg registers           : R25:R24(SleepTime)                                                  
;return registers        : None                                                                
;unsafe access registers : R18, R19, R20, R24, R25, R30(ZL), R31(ZH)                           
Kernel_Task_Sleep:                                        ;total 37.25uS @8MHz    (298 clocks) 
        ;save current context                                                                  
        KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
    145c:	0f 92       	push	r0
    145e:	0f b6       	in	r0, 0x3f	; 63
    1460:	f8 94       	cli
    1462:	0f 92       	push	r0
    1464:	1f 92       	push	r1
    1466:	11 24       	eor	r1, r1
    1468:	2f 92       	push	r2
    146a:	3f 92       	push	r3
    146c:	4f 92       	push	r4
    146e:	5f 92       	push	r5
    1470:	6f 92       	push	r6
    1472:	7f 92       	push	r7
    1474:	8f 92       	push	r8
    1476:	9f 92       	push	r9
    1478:	af 92       	push	r10
    147a:	bf 92       	push	r11
    147c:	cf 92       	push	r12
    147e:	df 92       	push	r13
    1480:	ef 92       	push	r14
    1482:	ff 92       	push	r15
    1484:	0f 93       	push	r16
    1486:	1f 93       	push	r17
    1488:	2f 93       	push	r18
    148a:	3f 93       	push	r19
    148c:	4f 93       	push	r20
    148e:	5f 93       	push	r21
    1490:	6f 93       	push	r22
    1492:	7f 93       	push	r23
    1494:	8f 93       	push	r24
    1496:	9f 93       	push	r25
    1498:	af 93       	push	r26
    149a:	bf 93       	push	r27
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
    14a0:	ef 93       	push	r30
    14a2:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
    14a4:	e6 e1       	ldi	r30, 0x16	; 22
    14a6:	f1 e0       	ldi	r31, 0x01	; 1
    14a8:	20 91 0d 01 	lds	r18, 0x010D
    14ac:	22 0f       	add	r18, r18
    14ae:	e2 0f       	add	r30, r18
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	f2 1f       	adc	r31, r18
    14b4:	2d b7       	in	r18, 0x3d	; 61
    14b6:	3e b7       	in	r19, 0x3e	; 62
    14b8:	20 83       	st	Z, r18
    14ba:	31 83       	std	Z+1, r19	; 0x01
		;create next task wakeup time (args R25:R24)                                           
		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
    14bc:	ec e4       	ldi	r30, 0x4C	; 76
		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
    14be:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
    14c0:	20 91 0d 01 	lds	r18, 0x010D
    14c4:	22 0f       	add	r18, r18
    14c6:	e2 0f       	add	r30, r18
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	f2 1f       	adc	r31, r18
		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
    14cc:	80 83       	st	Z, r24
		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
    14ce:	91 83       	std	Z+1, r25	; 0x01
		;update task scheduler status as blocked                                               
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
    14d0:	e8 e3       	ldi	r30, 0x38	; 56
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
    14d2:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
    14d4:	20 91 0d 01 	lds	r18, 0x010D
    14d8:	e2 0f       	add	r30, r18
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	f2 1f       	adc	r31, r18
        LDI   R18                , TASK_BLOCKED           ;block task until cnt=0 (  1 clock ) 
    14de:	20 e0       	ldi	r18, 0x00	; 0
		STD   Z+0                , R18                    ;save block flag        (  2 clocks) 
    14e0:	20 83       	st	Z, r18
		;run scheduler, load next task sp, restore context                                     
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
    14e2:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
    14e4:	2f ef       	ldi	r18, 0xFF	; 255
    14e6:	20 93 0f 01 	sts	0x010F, r18
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	20 93 10 01 	sts	0x0110, r18
    14f0:	58 2f       	mov	r21, r24

000014f2 <_KER_SCH_LOOP56>:
    14f2:	20 93 0d 01 	sts	0x010D, r18
    14f6:	85 2f       	mov	r24, r21
    14f8:	ec e4       	ldi	r30, 0x4C	; 76
    14fa:	f1 e0       	ldi	r31, 0x01	; 1
    14fc:	20 91 0d 01 	lds	r18, 0x010D
    1500:	22 0f       	add	r18, r18
    1502:	e2 0f       	add	r30, r18
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	f2 1f       	adc	r31, r18
    1508:	20 81       	ld	r18, Z
    150a:	31 81       	ldd	r19, Z+1	; 0x01
    150c:	42 2f       	mov	r20, r18
    150e:	43 2b       	or	r20, r19
    1510:	59 f0       	breq	.+22     	; 0x1528 <_VAL_NULL57>
    1512:	81 30       	cpi	r24, 0x01	; 1
    1514:	99 f0       	breq	.+38     	; 0x153c <_VAL_NOT_NULL57>
    1516:	41 e0       	ldi	r20, 0x01	; 1
    1518:	24 1b       	sub	r18, r20
    151a:	40 e0       	ldi	r20, 0x00	; 0
    151c:	34 0b       	sbc	r19, r20
    151e:	20 83       	st	Z, r18
    1520:	31 83       	std	Z+1, r19	; 0x01
    1522:	42 2f       	mov	r20, r18
    1524:	43 2b       	or	r20, r19
    1526:	51 f4       	brne	.+20     	; 0x153c <_VAL_NOT_NULL57>

00001528 <_VAL_NULL57>:
    1528:	e8 e3       	ldi	r30, 0x38	; 56
    152a:	f1 e0       	ldi	r31, 0x01	; 1
    152c:	20 91 0d 01 	lds	r18, 0x010D
    1530:	e2 0f       	add	r30, r18
    1532:	20 e0       	ldi	r18, 0x00	; 0
    1534:	f2 1f       	adc	r31, r18
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	80 83       	st	Z, r24
    153a:	08 c0       	rjmp	.+16     	; 0x154c <_EXIT_SLP_TIME57>

0000153c <_VAL_NOT_NULL57>:
    153c:	e8 e3       	ldi	r30, 0x38	; 56
    153e:	f1 e0       	ldi	r31, 0x01	; 1
    1540:	20 91 0d 01 	lds	r18, 0x010D
    1544:	e2 0f       	add	r30, r18
    1546:	20 e0       	ldi	r18, 0x00	; 0
    1548:	f2 1f       	adc	r31, r18
    154a:	80 81       	ld	r24, Z

0000154c <_EXIT_SLP_TIME57>:
    154c:	81 30       	cpi	r24, 0x01	; 1
    154e:	19 f0       	breq	.+6      	; 0x1556 <_KER_CALC_PRIO56>
    1550:	84 30       	cpi	r24, 0x04	; 4
    1552:	09 f0       	breq	.+2      	; 0x1556 <_KER_CALC_PRIO56>
    1554:	12 c0       	rjmp	.+36     	; 0x157a <_KER_SCH_NEXT56>

00001556 <_KER_CALC_PRIO56>:
    1556:	e2 e4       	ldi	r30, 0x42	; 66
    1558:	f1 e0       	ldi	r31, 0x01	; 1
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	80 91 0d 01 	lds	r24, 0x010D
    1560:	e8 0f       	add	r30, r24
    1562:	f2 1f       	adc	r31, r18
    1564:	80 81       	ld	r24, Z
    1566:	20 91 0f 01 	lds	r18, 0x010F
    156a:	82 17       	cp	r24, r18
    156c:	30 f4       	brcc	.+12     	; 0x157a <_KER_SCH_NEXT56>
    156e:	80 93 0f 01 	sts	0x010F, r24
    1572:	20 91 0d 01 	lds	r18, 0x010D
    1576:	20 93 10 01 	sts	0x0110, r18

0000157a <_KER_SCH_NEXT56>:
    157a:	20 91 0d 01 	lds	r18, 0x010D
    157e:	23 95       	inc	r18
    1580:	30 91 0e 01 	lds	r19, 0x010E
    1584:	23 17       	cp	r18, r19
    1586:	08 f4       	brcc	.+2      	; 0x158a <_KER_SCH_EXIT56>
    1588:	b4 cf       	rjmp	.-152    	; 0x14f2 <_KER_SCH_LOOP56>

0000158a <_KER_SCH_EXIT56>:
    158a:	20 91 10 01 	lds	r18, 0x0110
    158e:	20 93 0d 01 	sts	0x010D, r18
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
    1592:	e6 e1       	ldi	r30, 0x16	; 22
    1594:	f1 e0       	ldi	r31, 0x01	; 1
    1596:	20 91 0d 01 	lds	r18, 0x010D
    159a:	22 0f       	add	r18, r18
    159c:	e2 0f       	add	r30, r18
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	f2 1f       	adc	r31, r18
    15a2:	20 81       	ld	r18, Z
    15a4:	31 81       	ldd	r19, Z+1	; 0x01
    15a6:	2d bf       	out	0x3d, r18	; 61
    15a8:	3e bf       	out	0x3e, r19	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
    15aa:	ff 91       	pop	r31
    15ac:	ef 91       	pop	r30
    15ae:	df 91       	pop	r29
    15b0:	cf 91       	pop	r28
    15b2:	bf 91       	pop	r27
    15b4:	af 91       	pop	r26
    15b6:	9f 91       	pop	r25
    15b8:	8f 91       	pop	r24
    15ba:	7f 91       	pop	r23
    15bc:	6f 91       	pop	r22
    15be:	5f 91       	pop	r21
    15c0:	4f 91       	pop	r20
    15c2:	3f 91       	pop	r19
    15c4:	2f 91       	pop	r18
    15c6:	1f 91       	pop	r17
    15c8:	0f 91       	pop	r16
    15ca:	ff 90       	pop	r15
    15cc:	ef 90       	pop	r14
    15ce:	df 90       	pop	r13
    15d0:	cf 90       	pop	r12
    15d2:	bf 90       	pop	r11
    15d4:	af 90       	pop	r10
    15d6:	9f 90       	pop	r9
    15d8:	8f 90       	pop	r8
    15da:	7f 90       	pop	r7
    15dc:	6f 90       	pop	r6
    15de:	5f 90       	pop	r5
    15e0:	4f 90       	pop	r4
    15e2:	3f 90       	pop	r3
    15e4:	2f 90       	pop	r2
    15e6:	1f 90       	pop	r1
    15e8:	0f 90       	pop	r0
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	0f 90       	pop	r0
    15ee:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
    15f0:	08 95       	ret

000015f2 <Kernel_Task_Constant_Latency>:
;arg registers           : R25:R24(SleepTime)                                                  
;return registers        : None                                                                
;unsafe access registers : R18, R24, R25, R30(ZL), R31(ZH)                                     
Kernel_Task_Constant_Latency:                             ;total 3.50uS @8MHz     ( 28 clocks) 
		;create next task wakeup time (args R25:R24)                                           
		CLI                                               ;disable interrupt      (  1 clock ) 
    15f2:	f8 94       	cli
		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
    15f4:	ec e4       	ldi	r30, 0x4C	; 76
		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
    15f6:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
    15f8:	20 91 0d 01 	lds	r18, 0x010D
    15fc:	22 0f       	add	r18, r18
    15fe:	e2 0f       	add	r30, r18
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	f2 1f       	adc	r31, r18
		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
    1604:	80 83       	st	Z, r24
		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
    1606:	91 83       	std	Z+1, r25	; 0x01
		;update task scheduler status as constant latency                                      
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
    1608:	e8 e3       	ldi	r30, 0x38	; 56
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
    160a:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
    160c:	20 91 0d 01 	lds	r18, 0x010D
    1610:	e2 0f       	add	r30, r18
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	f2 1f       	adc	r31, r18
        LDI   R18                , TASK_CONS_LAT          ;save as cons_lat       (  1 clock ) 
    1616:	24 e0       	ldi	r18, 0x04	; 4
		STD   Z+0                , R18                    ;save block flag        (  2 clocks) 
    1618:	20 83       	st	Z, r18
		SEI                                               ;enable interrupt       (  1 clock ) 
    161a:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
    161c:	08 95       	ret

0000161e <Kernel_Task_Constant_Latency_Sleep>:
;arg registers           : R25:R24(SleepTime)                                                  
;return registers        : None                                                                
;unsafe access registers : R18, R19, R20, R24, R25, R30(ZL), R31(ZH)                           
Kernel_Task_Constant_Latency_Sleep:                       ;total 35.75uS @8MHz    (286 clocks) 
		;save current context                                                                  
        KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
    161e:	0f 92       	push	r0
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	f8 94       	cli
    1624:	0f 92       	push	r0
    1626:	1f 92       	push	r1
    1628:	11 24       	eor	r1, r1
    162a:	2f 92       	push	r2
    162c:	3f 92       	push	r3
    162e:	4f 92       	push	r4
    1630:	5f 92       	push	r5
    1632:	6f 92       	push	r6
    1634:	7f 92       	push	r7
    1636:	8f 92       	push	r8
    1638:	9f 92       	push	r9
    163a:	af 92       	push	r10
    163c:	bf 92       	push	r11
    163e:	cf 92       	push	r12
    1640:	df 92       	push	r13
    1642:	ef 92       	push	r14
    1644:	ff 92       	push	r15
    1646:	0f 93       	push	r16
    1648:	1f 93       	push	r17
    164a:	2f 93       	push	r18
    164c:	3f 93       	push	r19
    164e:	4f 93       	push	r20
    1650:	5f 93       	push	r21
    1652:	6f 93       	push	r22
    1654:	7f 93       	push	r23
    1656:	8f 93       	push	r24
    1658:	9f 93       	push	r25
    165a:	af 93       	push	r26
    165c:	bf 93       	push	r27
    165e:	cf 93       	push	r28
    1660:	df 93       	push	r29
    1662:	ef 93       	push	r30
    1664:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
    1666:	e6 e1       	ldi	r30, 0x16	; 22
    1668:	f1 e0       	ldi	r31, 0x01	; 1
    166a:	20 91 0d 01 	lds	r18, 0x010D
    166e:	22 0f       	add	r18, r18
    1670:	e2 0f       	add	r30, r18
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	f2 1f       	adc	r31, r18
    1676:	2d b7       	in	r18, 0x3d	; 61
    1678:	3e b7       	in	r19, 0x3e	; 62
    167a:	20 83       	st	Z, r18
    167c:	31 83       	std	Z+1, r19	; 0x01
		;update task scheduler status as blocked                                               
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
    167e:	e8 e3       	ldi	r30, 0x38	; 56
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
    1680:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
    1682:	20 91 0d 01 	lds	r18, 0x010D
    1686:	e2 0f       	add	r30, r18
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	f2 1f       	adc	r31, r18
        LDI   R18                , TASK_BLOCKED           ;blocked until cnt=0    (  1 clock ) 
    168c:	20 e0       	ldi	r18, 0x00	; 0
		STD   Z+0                , R18                    ;save block flag        (  2 clocks) 
    168e:	20 83       	st	Z, r18
		;run scheduler, load next task sp, restore context                                     
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
    1690:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
    1692:	2f ef       	ldi	r18, 0xFF	; 255
    1694:	20 93 0f 01 	sts	0x010F, r18
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	20 93 10 01 	sts	0x0110, r18
    169e:	58 2f       	mov	r21, r24

000016a0 <_KER_SCH_LOOP75>:
    16a0:	20 93 0d 01 	sts	0x010D, r18
    16a4:	85 2f       	mov	r24, r21
    16a6:	ec e4       	ldi	r30, 0x4C	; 76
    16a8:	f1 e0       	ldi	r31, 0x01	; 1
    16aa:	20 91 0d 01 	lds	r18, 0x010D
    16ae:	22 0f       	add	r18, r18
    16b0:	e2 0f       	add	r30, r18
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	f2 1f       	adc	r31, r18
    16b6:	20 81       	ld	r18, Z
    16b8:	31 81       	ldd	r19, Z+1	; 0x01
    16ba:	42 2f       	mov	r20, r18
    16bc:	43 2b       	or	r20, r19
    16be:	59 f0       	breq	.+22     	; 0x16d6 <_VAL_NULL76>
    16c0:	81 30       	cpi	r24, 0x01	; 1
    16c2:	99 f0       	breq	.+38     	; 0x16ea <_VAL_NOT_NULL76>
    16c4:	41 e0       	ldi	r20, 0x01	; 1
    16c6:	24 1b       	sub	r18, r20
    16c8:	40 e0       	ldi	r20, 0x00	; 0
    16ca:	34 0b       	sbc	r19, r20
    16cc:	20 83       	st	Z, r18
    16ce:	31 83       	std	Z+1, r19	; 0x01
    16d0:	42 2f       	mov	r20, r18
    16d2:	43 2b       	or	r20, r19
    16d4:	51 f4       	brne	.+20     	; 0x16ea <_VAL_NOT_NULL76>

000016d6 <_VAL_NULL76>:
    16d6:	e8 e3       	ldi	r30, 0x38	; 56
    16d8:	f1 e0       	ldi	r31, 0x01	; 1
    16da:	20 91 0d 01 	lds	r18, 0x010D
    16de:	e2 0f       	add	r30, r18
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	f2 1f       	adc	r31, r18
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	80 83       	st	Z, r24
    16e8:	08 c0       	rjmp	.+16     	; 0x16fa <_EXIT_SLP_TIME76>

000016ea <_VAL_NOT_NULL76>:
    16ea:	e8 e3       	ldi	r30, 0x38	; 56
    16ec:	f1 e0       	ldi	r31, 0x01	; 1
    16ee:	20 91 0d 01 	lds	r18, 0x010D
    16f2:	e2 0f       	add	r30, r18
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	f2 1f       	adc	r31, r18
    16f8:	80 81       	ld	r24, Z

000016fa <_EXIT_SLP_TIME76>:
    16fa:	81 30       	cpi	r24, 0x01	; 1
    16fc:	19 f0       	breq	.+6      	; 0x1704 <_KER_CALC_PRIO75>
    16fe:	84 30       	cpi	r24, 0x04	; 4
    1700:	09 f0       	breq	.+2      	; 0x1704 <_KER_CALC_PRIO75>
    1702:	12 c0       	rjmp	.+36     	; 0x1728 <_KER_SCH_NEXT75>

00001704 <_KER_CALC_PRIO75>:
    1704:	e2 e4       	ldi	r30, 0x42	; 66
    1706:	f1 e0       	ldi	r31, 0x01	; 1
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	80 91 0d 01 	lds	r24, 0x010D
    170e:	e8 0f       	add	r30, r24
    1710:	f2 1f       	adc	r31, r18
    1712:	80 81       	ld	r24, Z
    1714:	20 91 0f 01 	lds	r18, 0x010F
    1718:	82 17       	cp	r24, r18
    171a:	30 f4       	brcc	.+12     	; 0x1728 <_KER_SCH_NEXT75>
    171c:	80 93 0f 01 	sts	0x010F, r24
    1720:	20 91 0d 01 	lds	r18, 0x010D
    1724:	20 93 10 01 	sts	0x0110, r18

00001728 <_KER_SCH_NEXT75>:
    1728:	20 91 0d 01 	lds	r18, 0x010D
    172c:	23 95       	inc	r18
    172e:	30 91 0e 01 	lds	r19, 0x010E
    1732:	23 17       	cp	r18, r19
    1734:	08 f4       	brcc	.+2      	; 0x1738 <_KER_SCH_EXIT75>
    1736:	b4 cf       	rjmp	.-152    	; 0x16a0 <_KER_SCH_LOOP75>

00001738 <_KER_SCH_EXIT75>:
    1738:	20 91 10 01 	lds	r18, 0x0110
    173c:	20 93 0d 01 	sts	0x010D, r18
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
    1740:	e6 e1       	ldi	r30, 0x16	; 22
    1742:	f1 e0       	ldi	r31, 0x01	; 1
    1744:	20 91 0d 01 	lds	r18, 0x010D
    1748:	22 0f       	add	r18, r18
    174a:	e2 0f       	add	r30, r18
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	f2 1f       	adc	r31, r18
    1750:	20 81       	ld	r18, Z
    1752:	31 81       	ldd	r19, Z+1	; 0x01
    1754:	2d bf       	out	0x3d, r18	; 61
    1756:	3e bf       	out	0x3e, r19	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
    1758:	ff 91       	pop	r31
    175a:	ef 91       	pop	r30
    175c:	df 91       	pop	r29
    175e:	cf 91       	pop	r28
    1760:	bf 91       	pop	r27
    1762:	af 91       	pop	r26
    1764:	9f 91       	pop	r25
    1766:	8f 91       	pop	r24
    1768:	7f 91       	pop	r23
    176a:	6f 91       	pop	r22
    176c:	5f 91       	pop	r21
    176e:	4f 91       	pop	r20
    1770:	3f 91       	pop	r19
    1772:	2f 91       	pop	r18
    1774:	1f 91       	pop	r17
    1776:	0f 91       	pop	r16
    1778:	ff 90       	pop	r15
    177a:	ef 90       	pop	r14
    177c:	df 90       	pop	r13
    177e:	cf 90       	pop	r12
    1780:	bf 90       	pop	r11
    1782:	af 90       	pop	r10
    1784:	9f 90       	pop	r9
    1786:	8f 90       	pop	r8
    1788:	7f 90       	pop	r7
    178a:	6f 90       	pop	r6
    178c:	5f 90       	pop	r5
    178e:	4f 90       	pop	r4
    1790:	3f 90       	pop	r3
    1792:	2f 90       	pop	r2
    1794:	1f 90       	pop	r1
    1796:	0f 90       	pop	r0
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	0f 90       	pop	r0
    179c:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
    179e:	08 95       	ret

000017a0 <Kernel_PreSleep_Hook>:
;used registers          : R24, R25, R30(ZL), R31(ZH)                                          
;arg registers           : R25:R24(FunctionPtr)                                                
;return registers        : None                                                                
;unsafe access registers : R24, R25, R30(ZL), R31(ZH)                                          
Kernel_PreSleep_Hook:                                     ;total 1.00uS @8MHz     (  8 clocks) 
        MOVW  R30                , R24                    ;move pointer to Z      (  1 clock ) 
    17a0:	fc 01       	movw	r30, r24
		ICALL                                             ;indirect call          (  3 clocks) 
    17a2:	09 95       	icall
		RET                                               ;return from subroutine (  4 clocks) 
    17a4:	08 95       	ret

000017a6 <Kernel_Task_Sleep_Time_Get>:
;used registers          : R18, R24, R25, R30(ZL), R31(ZH)                                     
;arg registers           : R24(TaskID)                                                         
;return registers        : R25:R24(SleepTime)                                                  
;unsafe access registers : R18, R24, R25, R30(ZL), R31(ZH)                                     
Kernel_Task_Sleep_Time_Get:                               ;total 1.88uS @8MHz     ( 15 clocks) 
		MOV   R18                , R24                    ;copy                   (  1 clock ) 
    17a6:	28 2f       	mov	r18, r24
		LSL   R18                                         ;x2                     (  1 clock ) 
    17a8:	22 0f       	add	r18, r18
		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
    17aa:	ec e4       	ldi	r30, 0x4C	; 76
		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
    17ac:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
    17ae:	e2 0f       	add	r30, r18
		LDI   R18                , 0x00                   ;load 0                 (  1 clock ) 
    17b0:	20 e0       	ldi	r18, 0x00	; 0
		ADC   ZH                 , R18                    ;add high byte+carry    (  1 clock ) 
    17b2:	f2 1f       	adc	r31, r18
		LDD   R24                , Z+0                    ;load sleep time        (  2 clocks) 
    17b4:	80 81       	ld	r24, Z
		LDD   R25                , Z+1                    ;load sleep time        (  2 clocks) 
    17b6:	91 81       	ldd	r25, Z+1	; 0x01
		RET                                               ;return from subroutine (  4 clocks) 
    17b8:	08 95       	ret

000017ba <Kernel_Task_Status_Get>:
;used registers          : R18, R24, R30(ZL), R31(ZH)                                          
;arg registers           : R24(TaskID)                                                         
;return registers        : R24(TaskSts)                                                        
;unsafe access registers : R18, R24, R30(ZL), R31(ZH)                                          
Kernel_Task_Status_Get:                                   ;total 1.50uS @8MHz     ( 12 clocks) 
		MOV   R18                , R24                    ;copy                   (  1 clock ) 
    17ba:	28 2f       	mov	r18, r24
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
    17bc:	e8 e3       	ldi	r30, 0x38	; 56
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
    17be:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
    17c0:	e2 0f       	add	r30, r18
		LDI   R18                , 0x00                   ;load 0                 (  1 clock ) 
    17c2:	20 e0       	ldi	r18, 0x00	; 0
		ADC   ZH                 , R18                    ;add high byte+carry    (  1 clock ) 
    17c4:	f2 1f       	adc	r31, r18
		LD    R24                , Z                      ;load task status       (  2 clocks) 
    17c6:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
    17c8:	08 95       	ret

000017ca <Kernel_NTask_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(NTask)                                                          
;unsafe access registers : R24                                                                 
Kernel_NTask_Get:                                         ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                 , KerBase+OFB_NTSK      ;load ntask             (  2 clock ) 
    17ca:	80 91 0e 01 	lds	r24, 0x010E
		RET                                               ;return from subroutine (  4 clocks) 
    17ce:	08 95       	ret

000017d0 <Kernel_Task_Prio_Get>:
;arg registers           : R24(TaskID)                                                         
;return registers        : R24(TaskPriority)                                                   
;unsafe access registers : R18, R24, R30(ZL), R31(ZH)                                          
Kernel_Task_Prio_Get:                                     ;total 1.50uS @8MHz     ( 12 clocks) 
		;get priority of the task id, arg (task_id->R24), return R24                           
		MOV   R18                , R24                    ;copy task_id           (  1 clock ) 
    17d0:	28 2f       	mov	r18, r24
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
    17d2:	e2 e4       	ldi	r30, 0x42	; 66
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
    17d4:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
    17d6:	e2 0f       	add	r30, r18
		LDI   R18                , 0x00                   ;clear reg              (  1 clock ) 
    17d8:	20 e0       	ldi	r18, 0x00	; 0
		ADC   ZH                 , R18                    ;add high byte+carry    (  1 clock ) 
    17da:	f2 1f       	adc	r31, r18
		LD    R24                , Z                      ;load priority          (  2 clocks) 
    17dc:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
    17de:	08 95       	ret

000017e0 <Kernel_Lowest_Prio_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(LowestPriorityVal)                                              
;unsafe access registers : R24                                                                 
Kernel_Lowest_Prio_Get:                                   ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
    17e0:	80 91 0f 01 	lds	r24, 0x010F
		RET                                               ;return from subroutine (  4 clocks) 
    17e4:	08 95       	ret

000017e6 <Kernel_High_Prio_Task_ID_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(HighstPriorityTaskID)->UserTaskID (Excluding Idle Task)         
;unsafe access registers : R24                                                                 
Kernel_High_Prio_Task_ID_Get:                             ;total 0.88uS @8MHz     (  7 clocks) 
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
    17e6:	80 91 10 01 	lds	r24, 0x0110
		DEC   R24                                         ;decrement by 1         (  1 clock ) 
    17ea:	8a 95       	dec	r24
		RET                                               ;return from subroutine (  4 clocks) 
    17ec:	08 95       	ret

000017ee <Kernel_Abs_High_Prio_Task_ID_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(HighstPriorityTaskID)->AbsoluteTaskID (Including Idle Task)     
;unsafe access registers : R24                                                                 
Kernel_Abs_High_Prio_Task_ID_Get:                         ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
    17ee:	80 91 10 01 	lds	r24, 0x0110
		RET                                               ;return from subroutine (  4 clocks) 
    17f2:	08 95       	ret

000017f4 <Kernel_CPU_Usage_Get>:
;arg registers           : None                                                                
;return registers        : R24(CurrentCpuUsage)->In percentage                                 
;unsafe access registers : R24                                                                 
Kernel_CPU_Usage_Get:                                     ;total 0.75uS @8MHz     (  6 clocks) 
		;get cpu usage, return R24                                                             
		LDS   R24                , KerBase+OFB_USAGE      ;load cpu usage         (  2 clocks) 
    17f4:	80 91 13 01 	lds	r24, 0x0113
		RET                                               ;return from subroutine (  4 clocks) 
    17f8:	08 95       	ret

000017fa <Debug_Init>:


;;===================================debug init starting====================================;; 
Debug_Init:                                               ;total 2.38uS @8MHz     ( 19 clocks) 
        ;init registers for UART0 (Arg R25:R24->UBRRH:UBRRL)                                   
		LDI   R18                , (1<<1)                 ;mask U2x               (  1 clock ) 
    17fa:	22 e0       	ldi	r18, 0x02	; 2
		STS   SRUCSR0A           , R18                    ;load val to UCSR0A     (  2 clocks) 
    17fc:	20 93 c0 00 	sts	0x00C0, r18
		MOV   R18                , R25                    ;copy R25->baud rate H  (  1 clock ) 
    1800:	29 2f       	mov	r18, r25
		STS   SRUBRR0H           , R18                    ;load val to UBRR0H     (  2 clocks) 
    1802:	20 93 c5 00 	sts	0x00C5, r18
		MOV   R18                , R24                    ;copy R24->baud rate L  (  1 clock ) 
    1806:	28 2f       	mov	r18, r24
		STS   SRUBRR0L           , R18                    ;load val to UBRR0L     (  2 clocks) 
    1808:	20 93 c4 00 	sts	0x00C4, r18
		LDI   R18                , (1<<1)|(1<<2)          ;config 8 data bit      (  1 clock ) 
    180c:	26 e0       	ldi	r18, 0x06	; 6
		STS   SRUCSR0C           , R18                    ;load val to UCSR0C     (  2 clocks) 
    180e:	20 93 c2 00 	sts	0x00C2, r18
		LDI   R18                , (1<<3)                 ;enable tx              (  1 clock ) 
    1812:	28 e0       	ldi	r18, 0x08	; 8
		STS   SRUCSR0B           , R18                    ;load val to UCSR0B     (  2 clocks) 
    1814:	20 93 c1 00 	sts	0x00C1, r18
        RET                                               ;return from subroutine (  4 clocks) 
    1818:	08 95       	ret

0000181a <Debug_Tx_Byte>:


;;====================================debug tx starting=====================================;; 
Debug_Tx_Byte:                                            ;total 2.00uS+LT @8MHz  ( 16 clocks) 
		;write single byte to data register (Arg R24)                                          
		PUSH  R18                                         ;save reg               (  2 clocks) 
    181a:	2f 93       	push	r18
		STS   SRUDR0             , R24                    ;load val to UDR0       (  2 clocks) 
    181c:	80 93 c6 00 	sts	0x00C6, r24

00001820 <__UDRE0_CLEARED>:
                                                                                               
    __UDRE0_CLEARED:                                      ;undefined loop wrt ck               
		LDS   R18                , SRUCSR0A               ;load UCSR0A to R18     (  2 clocks) 
    1820:	20 91 c0 00 	lds	r18, 0x00C0
		SBRS  R18                , 0x05                   ;skip if UDRE0 is set   (  2 clocks) 
    1824:	25 ff       	sbrs	r18, 5
		RJMP  __UDRE0_CLEARED                             ;wait until UDRE0 is set(  2 clocks) 
    1826:	fc cf       	rjmp	.-8      	; 0x1820 <__UDRE0_CLEARED>
		POP   R18                                         ;restore reg            (  2 clocks) 
    1828:	2f 91       	pop	r18
        RET                                               ;return from subroutine (  4 clocks) 
    182a:	08 95       	ret

0000182c <Debug_Tx_Word>:


;;==================================debug tx word starting==================================;; 
Debug_Tx_Word:                                            ;total 2.00uS+LT @8MHz  ( 16 clocks) 
		;write 2 bytes, (Arg R24, R25), Args retained                                          
		PUSH  R24                                         ;save reg               (  2 clocks) 
    182c:	8f 93       	push	r24
		MOV   R24                , R25                    ;copy reg               (  1 clock ) 
    182e:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte                               ;send via uart          ( 21 clocks) 
    1830:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
        POP   R24                                         ;restore reg            (  2 clocks) 
    1834:	8f 91       	pop	r24
		CALL  Debug_Tx_Byte                               ;send via uart          ( 21 clocks) 
    1836:	0e 94 0d 0c 	call	0x181a	; 0x181a <Debug_Tx_Byte>
        RET                                               ;return from subroutine (  4 clocks) 
    183a:	08 95       	ret

0000183c <Debug_Tx_Byte_Conf>:


;;================================debug tx confirm starting=================================;; 
Debug_Tx_Byte_Conf:                                       ;total 2.63uS+LT @8MHz  ( 21 clocks) 
        ;write 1 byte, (Arg R24), Args retained                                                
		PUSH  R18                                         ;save reg               (  2 clocks) 
    183c:	2f 93       	push	r18
		STS   SRUDR0             , R24                    ;load val to UDR0,      (  2 clocks) 
    183e:	80 93 c6 00 	sts	0x00C6, r24

00001842 <__TXC0_CLEARED>:
    __TXC0_CLEARED:                                                                            
		LDS   R18                , SRUCSR0A               ;load UCSR0A to R18,    (  2 clocks) 
    1842:	20 91 c0 00 	lds	r18, 0x00C0
		SBRS  R18                , 0x06                   ;skip if TXC0 is set,   (  2 clocks) 
    1846:	26 ff       	sbrs	r18, 6
		RJMP  __TXC0_CLEARED                              ;wait until TXC0 is set (  2 clocks) 
    1848:	fc cf       	rjmp	.-8      	; 0x1842 <__TXC0_CLEARED>
		LDS   R18                , SRUCSR0A               ;load UCSR0A to R18,    (  2 clocks) 
    184a:	20 91 c0 00 	lds	r18, 0x00C0
		ORI   R18                , (1<<6)                 ;mask bit 6,            (  1 clock ) 
    184e:	20 64       	ori	r18, 0x40	; 64
		STS   SRUCSR0A           , R18                    ;write reg with bit msk (  2 clocks) 
    1850:	20 93 c0 00 	sts	0x00C0, r18
		POP   R18                                         ;restore reg            (  2 clocks) 
    1854:	2f 91       	pop	r18
        RET                                               ;return from subroutine (  4 clocks) 
    1856:	08 95       	ret

00001858 <Debug_Tx_Word_Conf>:


;;==============================debug tx word confirm starting==============================;; 
Debug_Tx_Word_Conf:                                       ;total 6.38uS+LT @8MHz  ( 51 clocks) 
        ;write 2 bytes, (Arg R24, R25), Args retained                                          
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
    1858:	0e 94 1e 0c 	call	0x183c	; 0x183c <Debug_Tx_Byte_Conf>
		PUSH  R24                                         ;save reg               (  2 clocks) 
    185c:	8f 93       	push	r24
		MOV   R24                , R25                    ;copy R25 to R24        (  1 clock ) 
    185e:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
    1860:	0e 94 1e 0c 	call	0x183c	; 0x183c <Debug_Tx_Byte_Conf>
		POP   R24                                         ;restore reg            (  2 clocks) 
    1864:	8f 91       	pop	r24
        RET                                               ;return from subroutine (  4 clocks) 
    1866:	08 95       	ret

00001868 <Debug_Tx_DWord_Conf>:


;;==============================debug tx dword confirm starting=============================;; 
Debug_Tx_DWord_Conf:                                      ;total 12.38uS+LT @8MHz ( 99 clocks) 
        ;write 4 bytes, (Arg R22-R25), Args retained                                           
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks) 
    1868:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R22                    ;copy R22 to R24          (1 clock ) 
    186c:	86 2f       	mov	r24, r22
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
    186e:	0e 94 1e 0c 	call	0x183c	; 0x183c <Debug_Tx_Byte_Conf>
		MOV   R24                , R23                    ;copy R23 to R24          (1 clock ) 
    1872:	87 2f       	mov	r24, r23
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
    1874:	0e 94 1e 0c 	call	0x183c	; 0x183c <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24              (2 clocks) 
    1878:	80 91 4a 00 	lds	r24, 0x004A
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
    187c:	0e 94 1e 0c 	call	0x183c	; 0x183c <Debug_Tx_Byte_Conf>
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks) 
    1880:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R25                    ;copy R22 to R24          (1 clock ) 
    1884:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
    1886:	0e 94 1e 0c 	call	0x183c	; 0x183c <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24 val,         (2 clocks) 
    188a:	80 91 4a 00 	lds	r24, 0x004A
        RET                                               ;return from subroutine,  (4 clocks) 
    188e:	08 95       	ret

00001890 <Debug_Tx_From_RAM>:


;;=============================debug tx confirm from ram starting===========================;; 
Debug_Tx_From_RAM:                                        ;total 4.38uS+LT @8MHz  ( 35 clocks) 
        ;print data from RAM address (Arg R24-R25)                                             
		MOV   R16                , R30                    ;copy R30 to R16          (1 clock ) 
    1890:	0e 2f       	mov	r16, r30
		MOV   R17                , R31                    ;copy R31 to R17          (1 clock ) 
    1892:	1f 2f       	mov	r17, r31
		MOV   R18                , R24                    ;copy R24 to R18          (1 clock ) 
    1894:	28 2f       	mov	r18, r24
		MOV   R30                , R24                    ;copy R22 to R24          (1 clock ) 
    1896:	e8 2f       	mov	r30, r24
		MOV   R31                , R25                    ;copy R22 to R24          (1 clock ) 
    1898:	f9 2f       	mov	r31, r25
		LD    R24                , Z                      ;load val to R24          (2 clocks) 
    189a:	80 81       	ld	r24, Z
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
    189c:	0e 94 1e 0c 	call	0x183c	; 0x183c <Debug_Tx_Byte_Conf>
		MOV   R30                , R16                    ;copy R16 to R30          (1 clock ) 
    18a0:	e0 2f       	mov	r30, r16
		MOV   R31                , R17                    ;copy R17 to R31          (1 clock ) 
    18a2:	f1 2f       	mov	r31, r17
		MOV   R24                , R18                    ;copy R18 to R24          (1 clock ) 
    18a4:	82 2f       	mov	r24, r18
        RET                                               ;return from subroutine,  (4 clocks) 
    18a6:	08 95       	ret

000018a8 <Debug_Tx_RAM_Area>:

;;=============================debug tx confirm ram area starting===========================;; 
Debug_Tx_RAM_Area:                                        ;5.5uS+LT x R22 @8MHz   ( 44 clocks) 
        ;print data from RAM address (arguments R24:R25, R22)                                  
	__DUMP_BYTES:                                                                              
	    CALL  Debug_Tx_From_RAM                           ;send via uart from ram              
    18a8:	0e 94 48 0c 	call	0x1890	; 0x1890 <Debug_Tx_From_RAM>
		SUBI  R24                , 0x01                   ;decrement from LSByte               
    18ac:	81 50       	subi	r24, 0x01	; 1
        SBCI  R25                , 0x00                   ;decrement if carry                  
    18ae:	90 40       	sbci	r25, 0x00	; 0
		SUBI  R22                , 0x01                   ;decrement                           
    18b0:	61 50       	subi	r22, 0x01	; 1
		BRNE  __DUMP_BYTES                                                                     
    18b2:	d1 f7       	brne	.-12     	; 0x18a8 <Debug_Tx_RAM_Area>
        RET                                               ;return from subroutine,  (4 clocks) 
    18b4:	08 95       	ret

000018b6 <_exit>:
    18b6:	f8 94       	cli

000018b8 <__stop_program>:
    18b8:	ff cf       	rjmp	.-2      	; 0x18b8 <__stop_program>
