
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000018d  00800100  00800100  00000364  2**0
                  ALLOC
  2 .stab         00000bac  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000038  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000001b  00000000  00000000  00000f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000076  00000000  00000000  00000f83  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000041  00000000  00000000  00000ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000060  00000000  00000000  0000103a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000020  00000000  00000000  0000109c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000099  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__vector_16>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	00 00       	nop
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 00       	nop
  76:	00 00       	nop
  78:	00 00       	nop
  7a:	00 00       	nop
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 00       	nop
  82:	00 00       	nop
  84:	00 00       	nop
  86:	00 00       	nop
  88:	13 c0       	rjmp	.+38     	; 0xb0 <__vector_16>

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61
  96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  9a:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:
#include <avr/interrupt.h>
#include "kernel.h"

int main(void) {
    
    Kernel_SysTick_Reg_Init(1000);
  a2:	88 ee       	ldi	r24, 0xE8	; 232
  a4:	93 e0       	ldi	r25, 0x03	; 3
  a6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <Kernel_SysTick_Reg_Init>
	Kernel_Test_Task1();
  aa:	0e 94 25 01 	call	0x24a	; 0x24a <Kernel_Test_Task1>
  ae:	ff cf       	rjmp	.-2      	; 0xae <main+0xc>

000000b0 <__vector_16>:
.global  __vector_16
    __vector_16:
	    
		;;============================if kernel debug enabled===============================;;
	    #ifdef KER_DBG_ENABLE
        SBI   KER_DBG_PORT       , KER_DBG_PIN            ;set gpio,                (2 clocks)
  b0:	29 9a       	sbi	0x05, 1	; 5
		#endif
		
		
		;;==============================context save========================================;;
		;; total 68 clocks for context saving
        PUSH  R0                                          ;save R0,                 (2 clocks)
  b2:	0f 92       	push	r0
		IN    R0                 , IOSREG                 ;load SREG,               (1 clock )
  b4:	0f b6       	in	r0, 0x3f	; 63
		PUSH  R0                                          ;save SREG,               (2 clocks)
  b6:	0f 92       	push	r0
		PUSH  R1                                          ;save R1,                 (2 clocks)   
  b8:	1f 92       	push	r1
		CLR   R1                                          ;clear R1,                (1 clock )
  ba:	11 24       	eor	r1, r1
		PUSH  R2                                          ;save R2,                 (2 clocks)   
  bc:	2f 92       	push	r2
		PUSH  R3                                          ;save R3,                 (2 clocks)   
  be:	3f 92       	push	r3
		PUSH  R4                                          ;save R4,                 (2 clocks)   
  c0:	4f 92       	push	r4
		PUSH  R5                                          ;save R5,                 (2 clocks)   
  c2:	5f 92       	push	r5
		PUSH  R6                                          ;save R6,                 (2 clocks)   
  c4:	6f 92       	push	r6
		PUSH  R7                                          ;save R7,                 (2 clocks)   
  c6:	7f 92       	push	r7
		PUSH  R8                                          ;save R8,                 (2 clocks)   
  c8:	8f 92       	push	r8
		PUSH  R9                                          ;save R9,                 (2 clocks)   
  ca:	9f 92       	push	r9
		PUSH  R10                                         ;save R10,                (2 clocks)   
  cc:	af 92       	push	r10
		PUSH  R11                                         ;save R11,                (2 clocks)  
  ce:	bf 92       	push	r11
		PUSH  R12                                         ;save R12,                (2 clocks)  
  d0:	cf 92       	push	r12
		PUSH  R13                                         ;save R13,                (2 clocks)  
  d2:	df 92       	push	r13
		PUSH  R14                                         ;save R14,                (2 clocks)  
  d4:	ef 92       	push	r14
		PUSH  R15                                         ;save R15,                (2 clocks)  
  d6:	ff 92       	push	r15
		PUSH  R16                                         ;save R16,                (2 clocks)  
  d8:	0f 93       	push	r16
		PUSH  R17                                         ;save R17,                (2 clocks)  
  da:	1f 93       	push	r17
		PUSH  R18                                         ;save R18,                (2 clocks)  
  dc:	2f 93       	push	r18
		PUSH  R19                                         ;save R19,                (2 clocks)  
  de:	3f 93       	push	r19
		PUSH  R20                                         ;save R20,                (2 clocks)  
  e0:	4f 93       	push	r20
		PUSH  R21                                         ;save R21,                (2 clocks)  
  e2:	5f 93       	push	r21
		PUSH  R22                                         ;save R22,                (2 clocks)  
  e4:	6f 93       	push	r22
		PUSH  R23                                         ;save R23,                (2 clocks)  
  e6:	7f 93       	push	r23
		PUSH  R24                                         ;save R24,                (2 clocks)  
  e8:	8f 93       	push	r24
		PUSH  R25                                         ;save R25,                (2 clocks)  
  ea:	9f 93       	push	r25
		PUSH  R26                                         ;save R26,                (2 clocks)  
  ec:	af 93       	push	r26
		PUSH  R27                                         ;save R27,                (2 clocks)  
  ee:	bf 93       	push	r27
		PUSH  R28                                         ;save R28,                (2 clocks)  
  f0:	cf 93       	push	r28
		PUSH  R29                                         ;save R29,                (2 clocks)  
  f2:	df 93       	push	r29
		PUSH  R30                                         ;save R30,                (2 clocks)  
  f4:	ef 93       	push	r30
		PUSH  R31                                         ;save R31,                (2 clocks)  
  f6:	ff 93       	push	r31
		
		
		;;=============================reload counter value=================================;;
		;; total 4 clocks for reloading
		LDS   R17                , Kernel+0x00            ;fetch reload value,      (2 clocks) 
  f8:	10 91 00 01 	lds	r17, 0x0100
		STS   SRTCNT0            , R17                    ;Set value to TCNT0,      (2 clocks) 
  fc:	10 93 46 00 	sts	0x0046, r17
		
		
		;;=============================increment tick counter===============================;;
		;; total 26 clocks for reloading, 40 bit counter
		LDI   R16                , 0x01                   ;load 1 to R16,           (1 clock )
 100:	01 e0       	ldi	r16, 0x01	; 1
		LDS   R0                 , Kernel+0x01            ;load Byte0,              (2 clocks)
 102:	00 90 01 01 	lds	r0, 0x0101
		ADD   R0                 , R16                    ;add 1 with Byte0,        (1 clock )
 106:	00 0e       	add	r0, r16
		STS   Kernel+0x01        , R0                     ;set Byte0,               (2 clocks)
 108:	00 92 01 01 	sts	0x0101, r0
		LDS   R0                 , Kernel+0x02            ;load Byte1,              (2 clocks)
 10c:	00 90 02 01 	lds	r0, 0x0102
		ADC   R0                 , R1                     ;add carry with Byte1,    (1 clock )
 110:	01 1c       	adc	r0, r1
		STS   Kernel+0x02        , R0                     ;set Byte1,               (2 clocks)
 112:	00 92 02 01 	sts	0x0102, r0
		LDS   R0                 , Kernel+0x03            ;load Byte2,              (2 clocks)
 116:	00 90 03 01 	lds	r0, 0x0103
		ADC   R0                 , R1                     ;add carry with Byte2,    (1 clock )
 11a:	01 1c       	adc	r0, r1
		STS   Kernel+0x03        , R0                     ;set Byte2,               (2 clocks)
 11c:	00 92 03 01 	sts	0x0103, r0
		LDS   R0                 , Kernel+0x04            ;load Byte3,              (2 clocks)
 120:	00 90 04 01 	lds	r0, 0x0104
		ADC   R0                 , R1                     ;add carry with Byte3,    (1 clock )
 124:	01 1c       	adc	r0, r1
		STS   Kernel+0x04        , R0                     ;set Byte3,               (2 clocks)
 126:	00 92 04 01 	sts	0x0104, r0
		LDS   R0                 , Kernel+0x05            ;load Byte4,              (2 clocks)
 12a:	00 90 05 01 	lds	r0, 0x0105
		ADC   R0                 , R1                     ;add carry with Byte4,    (1 clock )
 12e:	01 1c       	adc	r0, r1
		STS   Kernel+0x05        , R0                     ;set Byte4,               (2 clocks)
 130:	00 92 05 01 	sts	0x0105, r0
		
		
		
		;;========================check current task index, save SP=========================;;
		;;
	    LDS   R16                , ker_tski               ;fetch task index,        (2 clocks)
 134:	00 91 06 01 	lds	r16, 0x0106
		CPI   R16                , 0                      ;check if val!=0          (1 clock )
 138:	00 30       	cpi	r16, 0x00	; 0
		BRNE  TSK1                                        ;goto saving task1 SP     (2 clocks)
 13a:	81 f4       	brne	.+32     	; 0x15c <TSK1>

0000013c <TSK0>:
		
		
		;;======================save stack pointer0, set task index 1=======================;;
		;;
	TSK0:
	    IN    R24                , IOSPL                  ;fetch SPL0,              (1 clock )
 13c:	8d b7       	in	r24, 0x3d	; 61
		IN    R25                , IOSPH                  ;fetch SPH0,              (1 clock )
 13e:	9e b7       	in	r25, 0x3e	; 62
		STS   ker_stp+0x00       , R24                    ;load  SPL0,              (2 clocks)
 140:	80 93 07 01 	sts	0x0107, r24
		STS   ker_stp+0x01       , R25                    ;load  SPH0,              (2 clocks)
 144:	90 93 08 01 	sts	0x0108, r25
		LDI   R16                , 0x01                   ;set ker_tski to 1,       (1 clock )
 148:	01 e0       	ldi	r16, 0x01	; 1
		STS   ker_tski           , R16                    ;load  ker_tski=1,        (2 clocks)
 14a:	00 93 06 01 	sts	0x0106, r16
		;skip SV_TSK1, switch task by loading task1 SP 
		LDS   R24                , ker_stp+0x02           ;fetch SPL0,              (2 clocks)
 14e:	80 91 09 01 	lds	r24, 0x0109
		LDS   R25                , ker_stp+0x03           ;fetch SPH0,              (2 clocks)
 152:	90 91 0a 01 	lds	r25, 0x010A
		OUT   IOSPL              , R24                    ;load SPL0,               (1 clock )
 156:	8d bf       	out	0x3d, r24	; 61
		OUT   IOSPH              , R25                    ;load SPH0,               (1 clock )
 158:	9e bf       	out	0x3e, r25	; 62
		RJMP  RS_CNTXT                                    ;jump to restore context, (2 clocks)
 15a:	0f c0       	rjmp	.+30     	; 0x17a <RS_CNTXT>

0000015c <TSK1>:
		
		
	    ;;======================save stack pointer1, set task index 0=======================;;
		;;
	TSK1:
	    IN    R24                , IOSPL                  ;fetch SPL0,              (1 clock )
 15c:	8d b7       	in	r24, 0x3d	; 61
		IN    R25                , IOSPH                  ;fetch SPH0,              (1 clock )
 15e:	9e b7       	in	r25, 0x3e	; 62
		STS   ker_stp+0x02       , R24                    ;load  SPL0,              (2 clocks)
 160:	80 93 09 01 	sts	0x0109, r24
		STS   ker_stp+0x03       , R25                    ;load  SPH0,              (2 clocks)
 164:	90 93 0a 01 	sts	0x010A, r25
		LDI   R16                , 0x00                   ;set ker_tski to 0,       (1 clock )
 168:	00 e0       	ldi	r16, 0x00	; 0
		STS   ker_tski           , R16                    ;load  ker_tski=0,        (2 clocks)
 16a:	00 93 06 01 	sts	0x0106, r16
		;switch task by loading task0 SP 
		LDS   R24                , ker_stp+0x00           ;fetch SPL0,              (2 clocks)
 16e:	80 91 07 01 	lds	r24, 0x0107
		LDS   R25                , ker_stp+0x01           ;fetch SPH0,              (2 clocks)
 172:	90 91 08 01 	lds	r25, 0x0108
		OUT   IOSPL              , R24                    ;load SPL0,               (1 clock )
 176:	8d bf       	out	0x3d, r24	; 61
		OUT   IOSPH              , R25                    ;load SPH0,               (1 clock )
 178:	9e bf       	out	0x3e, r25	; 62

0000017a <RS_CNTXT>:
		
		
	RS_CNTXT:
		;;===============================context restore====================================;;
		;; total 68 clocks for context restore
		POP   R31                                         ;restore R31,             (2 clocks) 
 17a:	ff 91       	pop	r31
		POP   R30                                         ;restore R30,             (2 clocks) 
 17c:	ef 91       	pop	r30
		POP   R29                                         ;restore R29,             (2 clocks)
 17e:	df 91       	pop	r29
		POP   R28                                         ;restore R28,             (2 clocks) 
 180:	cf 91       	pop	r28
		POP   R27                                         ;restore R27,             (2 clocks) 
 182:	bf 91       	pop	r27
		POP   R26                                         ;restore R26,             (2 clocks) 
 184:	af 91       	pop	r26
		POP   R25                                         ;restore R25,             (2 clocks) 
 186:	9f 91       	pop	r25
		POP   R24                                         ;restore R24,             (2 clocks) 
 188:	8f 91       	pop	r24
		POP   R23                                         ;restore R23,             (2 clocks) 
 18a:	7f 91       	pop	r23
		POP   R22                                         ;restore R22,             (2 clocks) 
 18c:	6f 91       	pop	r22
		POP   R21                                         ;restore R21,             (2 clocks) 
 18e:	5f 91       	pop	r21
		POP   R20                                         ;restore R20,             (2 clocks) 
 190:	4f 91       	pop	r20
		POP   R19                                         ;restore R19,             (2 clocks) 
 192:	3f 91       	pop	r19
		POP   R18                                         ;restore R18,             (2 clocks) 
 194:	2f 91       	pop	r18
		POP   R17                                         ;restore R17,             (2 clocks) 
 196:	1f 91       	pop	r17
		POP   R16                                         ;restore R16,             (2 clocks) 
 198:	0f 91       	pop	r16
		POP   R15                                         ;restore R15,             (2 clocks) 
 19a:	ff 90       	pop	r15
		POP   R14                                         ;restore R14,             (2 clocks) 
 19c:	ef 90       	pop	r14
		POP   R13                                         ;restore R13,             (2 clocks) 
 19e:	df 90       	pop	r13
		POP   R12                                         ;restore R12,             (2 clocks) 
 1a0:	cf 90       	pop	r12
		POP   R11                                         ;restore R11,             (2 clocks) 
 1a2:	bf 90       	pop	r11
		POP   R10                                         ;restore R10,             (2 clocks) 
 1a4:	af 90       	pop	r10
		POP   R9                                          ;restore R9,              (2 clocks) 
 1a6:	9f 90       	pop	r9
		POP   R8                                          ;restore R8,              (2 clocks) 
 1a8:	8f 90       	pop	r8
		POP   R7                                          ;restore R7,              (2 clocks) 
 1aa:	7f 90       	pop	r7
		POP   R6                                          ;restore R6,              (2 clocks) 
 1ac:	6f 90       	pop	r6
		POP   R5                                          ;restore R5,              (2 clocks) 
 1ae:	5f 90       	pop	r5
		POP   R4                                          ;restore R4,              (2 clocks) 
 1b0:	4f 90       	pop	r4
		POP   R3                                          ;restore R3,              (2 clocks) 
 1b2:	3f 90       	pop	r3
		POP   R2                                          ;restore R2,              (2 clocks) 
 1b4:	2f 90       	pop	r2
		POP   R1                                          ;restore R1,              (2 clocks) 
 1b6:	1f 90       	pop	r1
		POP   R0                                          ;fetch SREG,              (2 clocks) 
 1b8:	0f 90       	pop	r0
		OUT   0x3F               , R0                     ;load SREG,               (1 clock ) 
 1ba:	0f be       	out	0x3f, r0	; 63
		POP   R0                                          ;restore R0,              (2 clocks) 
 1bc:	0f 90       	pop	r0
		
		
		;;============================if kernel debug enabled===============================;;
		#ifdef KER_DBG_ENABLE
		CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear gpio,              (2 clocks)
 1be:	29 98       	cbi	0x05, 1	; 5
		#endif
		
		RETI                                              ;return from interrupt,   (4 clocks) 
 1c0:	18 95       	reti

000001c2 <Kernel_SysTick_Reg_Init>:
;;====================================SysTick Reg Init=======================================;;
;; total 32 clocks for SysTick Reg Init, omited debug gpio config
Kernel_SysTick_Reg_Init:
        
		#ifdef KER_DBG_ENABLE
		SBI   KER_DBG_DDR        , KER_DBG_PIN            ;set bit in DDR,          (2 clocks) 
 1c2:	21 9a       	sbi	0x04, 1	; 4
		CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear port bit,          (2 clocks) 
 1c4:	29 98       	cbi	0x05, 1	; 5
		#endif
		
		
        CLI                                               ;disable global interrupt,(1 clock ) 
 1c6:	f8 94       	cli
		LDI   R16                , 0x00                   ;store r16 with 0,        (1 clock ) 
 1c8:	00 e0       	ldi	r16, 0x00	; 0
		STS   SRTCCR0A           , R16                    ;clear TCCR0A,            (2 clocks) 
 1ca:	00 93 44 00 	sts	0x0044, r16
		STS   SRTCCR0B           , R16                    ;clear TCCR0B,            (2 clocks) 
 1ce:	00 93 45 00 	sts	0x0045, r16
		STS   SRTIMSK0           , R16                    ;clear TIMSK0,            (2 clocks) 
 1d2:	00 93 6e 00 	sts	0x006E, r16
		STS   SRTIFR0            , R16                    ;clear TIFR0,             (2 clocks) 
 1d6:	00 93 35 00 	sts	0x0035, r16
		STS   SROCR0A            , R16                    ;clear OCR0A,             (2 clocks) 
 1da:	00 93 47 00 	sts	0x0047, r16
		STS   SROCR0B            , R16                    ;clear OCR0B,             (2 clocks) 
 1de:	00 93 48 00 	sts	0x0048, r16
		STS   SRTCNT0            , R16                    ;clear TCNT0,             (2 clocks) 
 1e2:	00 93 46 00 	sts	0x0046, r16
		LDI   R16                , KER_PRS                ;prescaler 64,            (1 clock ) 
 1e6:	03 e0       	ldi	r16, 0x03	; 3
		STS   SRTCCR0B           , R16                    ;set to TCCR0B,           (2 clocks)
 1e8:	00 93 45 00 	sts	0x0045, r16
		LDI   R16                , KER_RLD                ;reload value (130),      (1 clock ) 
 1ec:	03 e8       	ldi	r16, 0x83	; 131
		STS   Kernel+0x00        , R16                    ;Kernel[0] reload value,  (2 clocks) 
 1ee:	00 93 00 01 	sts	0x0100, r16
		STS   SRTCNT0            , R16                    ;set to TCNT0,            (2 clocks) 
 1f2:	00 93 46 00 	sts	0x0046, r16
		LDI   R16                , 0x01                   ;store with TOIE0 enabled,(1 clock ) 
 1f6:	01 e0       	ldi	r16, 0x01	; 1
		STS   SRTIMSK0           , R16                    ;set to TIMSK0,           (2 clocks) 
 1f8:	00 93 6e 00 	sts	0x006E, r16
		SEI                                               ;enable global interrupt, (1 clock ) 
 1fc:	78 94       	sei
		RET                                               ;return from subroutine,  (4 clocks) 
 1fe:	08 95       	ret

00000200 <Kernel_SysTick_Val_Get>:

;;===================================SysTick Value Get======================================;;
;; total 20 clocks for SysTick Value Get
;; interrupts disabled for 16 clocks
Kernel_SysTick_Val_Get:
        IN    R17                , IOSREG                 ;Save SREG,               (1 clock ) 
 200:	1f b7       	in	r17, 0x3f	; 63
        CLI                                               ;Disable interrupts,      (1 clock ) 
 202:	f8 94       	cli
		LDS   R18		         , Kernel+0x01            ;Byte0 -> R18 (LSB),      (2 clocks) 
 204:	20 91 01 01 	lds	r18, 0x0101
		LDS   R19		         , Kernel+0x02            ;Byte1 -> R19,            (2 clocks) 
 208:	30 91 02 01 	lds	r19, 0x0102
		LDS   R20		         , Kernel+0x03            ;Byte2 -> R20,            (2 clocks) 
 20c:	40 91 03 01 	lds	r20, 0x0103
		LDS   R21		         , Kernel+0x04            ;Byte3 -> R21,            (2 clocks) 
 210:	50 91 04 01 	lds	r21, 0x0104
		LDS   R22		         , Kernel+0x05            ;Byte4 -> R22 (MSB),      (2 clocks) 
 214:	60 91 05 01 	lds	r22, 0x0105
		CLR   R23                 		                  ;Clear Byte5,             (1 clock )
 218:	77 27       	eor	r23, r23
		CLR   R24						                  ;Clear Byte5,             (1 clock )
 21a:	88 27       	eor	r24, r24
		CLR   R25                                         ;Clear Byte5,             (1 clock )
 21c:	99 27       	eor	r25, r25
		OUT   IOSREG             , R17          		  ;Restore SREG,            (1 clock )
 21e:	1f bf       	out	0x3f, r17	; 63
		RET                                               ;return from subroutine,  (4 clocks) 
 220:	08 95       	ret

00000222 <Kernel_Interrupt_Sts_Get>:


;;=================================Interrupt Status Get=====================================;;
;; total 10 clocks for Interrupt Status Get
Kernel_Interrupt_Sts_Get:
        LDI   R24		         , 0x00                   ;clear R24,               (1 clock ) 
 222:	80 e0       	ldi	r24, 0x00	; 0
        IN    R16		         , IOSREG                 ;save SREG in R16,        (1 clock )
 224:	0f b7       	in	r16, 0x3f	; 63
		SBRC  R16		         , 0x07                   ;check I flag->bit7,      (3 clocks)
 226:	07 fd       	sbrc	r16, 7
		LDI   R24		         , 0x01                   ;set R24 to 1,            (1 clock ) 
 228:	81 e0       	ldi	r24, 0x01	; 1
		RET                                               ;return from subroutine,  (4 clocks) 
 22a:	08 95       	ret

0000022c <Kernel_Test_Task0>:


;;===================================Kernel Test Task0======================================;;
Kernel_Test_Task0:
        ;initialize DDR and Port register, total 4 clocks
        SBI   KER_TSK0_DDR       , KER_TSK0_PIN           ;set bit in DDR,          (2 clocks) 
 22c:	55 9a       	sbi	0x0a, 5	; 10
		CBI   KER_TSK0_PORT      , KER_TSK0_PIN           ;clear port bit,          (2 clocks)
 22e:	5d 98       	cbi	0x0b, 5	; 11

00000230 <LOOP0>:
		 
    LOOP0:
	    ;pin toggle, total 5 clocks
		IN    R16                , KER_TSK0_PORT          ;load PORT val,           (2 clocks)
 230:	0b b1       	in	r16, 0x0b	; 11
		LDI   R17                , (1<<KER_TSK0_PIN)      ;bit mask for port pin    (1 clock )
 232:	10 e2       	ldi	r17, 0x20	; 32
		EOR   R16                , R17                    ;XOR with current val     (1 clock )
 234:	01 27       	eor	r16, r17
		OUT   KER_TSK0_PORT      , R16                    ;set new PORT val,        (1 clock )
 236:	0b b9       	out	0x0b, r16	; 11
		
		;assign delay loop count val, for 30ms 
		LDI   R16                , 0xEB                   ;set loop cnt val,        (1 clock )
 238:	0b ee       	ldi	r16, 0xEB	; 235

0000023a <DLY00>:
		
    DLY00:
	    LDI   R17                , 0xFF                   ;set loop cnt val,        (1 clock )
 23a:	1f ef       	ldi	r17, 0xFF	; 255

0000023c <DLY01>:
		
	DLY01:                                                ;inner loop,127.5uS@8Mhz  (4 clocks)
		NOP                                               ;no operation,            (1 clock )
 23c:	00 00       	nop
		DEC   R17                                         ;decrement R17 val,       (1 clock )
 23e:	1a 95       	dec	r17
		BRNE  DLY01                                       ;if R17 not equal to 0,   (2 clock ) 
 240:	e9 f7       	brne	.-6      	; 0x23c <DLY01>
		DEC   R16                                         ;decrement R16 val,       (1 clock )
 242:	0a 95       	dec	r16
		BRNE  DLY00                                       ;if R16 not equal to 0,   (2 clock ) 
 244:	d1 f7       	brne	.-12     	; 0x23a <DLY00>
		RJMP  LOOP0                                       ;if R16 is 0->jump,       (2 clock ) 
 246:	f4 cf       	rjmp	.-24     	; 0x230 <LOOP0>
		RET                                               ;return from subroutine,  (4 clocks) 
 248:	08 95       	ret

0000024a <Kernel_Test_Task1>:


;;===================================Kernel Test Task1======================================;;
Kernel_Test_Task1:
        ;initialize DDR and Port register, total 4 clocks
        SBI   KER_TSK1_DDR       , KER_TSK1_PIN           ;set bit in DDR,          (2 clocks) 
 24a:	56 9a       	sbi	0x0a, 6	; 10
		CBI   KER_TSK1_PORT      , KER_TSK1_PIN           ;clear port bit,          (2 clocks)
 24c:	5e 98       	cbi	0x0b, 6	; 11

0000024e <LOOP1>:
		 
    LOOP1:
	    ;pin toggle, total 5 clocks
		IN    R16                , KER_TSK1_PORT          ;load PORT val,           (2 clocks)
 24e:	0b b1       	in	r16, 0x0b	; 11
		LDI   R17                , (1<<KER_TSK1_PIN)      ;bit mask for port pin    (1 clock )
 250:	10 e4       	ldi	r17, 0x40	; 64
		EOR   R16                , R17                    ;XOR with current val     (1 clock )
 252:	01 27       	eor	r16, r17
		OUT   KER_TSK1_PORT      , R16                    ;set new PORT val,        (1 clock )
 254:	0b b9       	out	0x0b, r16	; 11
		
		;assign delay loop count val, for 30ms 
		LDI   R16                , 0xEB                   ;set loop cnt val,        (1 clock )
 256:	0b ee       	ldi	r16, 0xEB	; 235

00000258 <DLY10>:
		
    DLY10:
	    LDI   R17                , 0xFF                   ;set loop cnt val,        (1 clock )
 258:	1f ef       	ldi	r17, 0xFF	; 255

0000025a <DLY11>:
		
	DLY11:                                                ;inner loop,127.5uS@8Mhz  (4 clocks)
		NOP                                               ;no operation,            (1 clock )
 25a:	00 00       	nop
		DEC   R17                                         ;decrement R17 val,       (1 clock )
 25c:	1a 95       	dec	r17
		BRNE  DLY11                                       ;if R17 not equal to 0,   (2 clock ) 
 25e:	e9 f7       	brne	.-6      	; 0x25a <DLY11>
		DEC   R16                                         ;decrement R16 val,       (1 clock )
 260:	0a 95       	dec	r16
		BRNE  DLY10                                       ;if R16 not equal to 0,   (2 clock ) 
 262:	d1 f7       	brne	.-12     	; 0x258 <DLY10>
		RJMP  LOOP1                                       ;if R16 is 0->jump,       (2 clock ) 
 264:	f4 cf       	rjmp	.-24     	; 0x24e <LOOP1>
		RET                                               ;return from subroutine,  (4 clocks) 
 266:	08 95       	ret

00000268 <Kernel_Test_Task2>:


;;===================================Kernel Test Task2======================================;;
Kernel_Test_Task2:
        ;initialize DDR and Port register, total 4 clocks
        SBI   KER_TSK2_DDR       , KER_TSK2_PIN           ;set bit in DDR,          (2 clocks) 
 268:	57 9a       	sbi	0x0a, 7	; 10
		CBI   KER_TSK2_PORT      , KER_TSK2_PIN           ;clear port bit,          (2 clocks)
 26a:	5f 98       	cbi	0x0b, 7	; 11

0000026c <LOOP2>:
		 
    LOOP2:
	    ;pin toggle, total 5 clocks
		IN    R16                , KER_TSK2_PORT          ;load PORT val,           (2 clocks)
 26c:	0b b1       	in	r16, 0x0b	; 11
		LDI   R17                , (1<<KER_TSK2_PIN)      ;bit mask for port pin    (1 clock )
 26e:	10 e8       	ldi	r17, 0x80	; 128
		EOR   R16                , R17                    ;XOR with current val     (1 clock )
 270:	01 27       	eor	r16, r17
		OUT   KER_TSK2_PORT      , R16                    ;set new PORT val,        (1 clock )
 272:	0b b9       	out	0x0b, r16	; 11
		
		;assign delay loop count val, for 30ms 
		LDI   R16                , 0xEB                   ;set loop cnt val,        (1 clock )
 274:	0b ee       	ldi	r16, 0xEB	; 235

00000276 <DLY20>:
		
    DLY20:
	    LDI   R17                , 0xFF                   ;set loop cnt val,        (1 clock )
 276:	1f ef       	ldi	r17, 0xFF	; 255

00000278 <DLY21>:
		
	DLY21:                                                ;inner loop, 127.5uS@8Mhz (4 clocks)
		NOP                                               ;no operation,            (1 clock )
 278:	00 00       	nop
		DEC   R17                                         ;decrement R17 val,       (1 clock )
 27a:	1a 95       	dec	r17
		BRNE  DLY21                                       ;if R17 not equal to 0,   (2 clock ) 
 27c:	e9 f7       	brne	.-6      	; 0x278 <DLY21>
		DEC   R16                                         ;decrement R16 val,       (1 clock )
 27e:	0a 95       	dec	r16
		BRNE  DLY20                                       ;if R16 not equal to 0,   (2 clock ) 
 280:	d1 f7       	brne	.-12     	; 0x276 <DLY20>
		RJMP  LOOP2                                       ;if R16 is 0->jump,       (2 clock ) 
 282:	f4 cf       	rjmp	.-24     	; 0x26c <LOOP2>
		RET                                               ;return from subroutine,  (4 clocks) 
 284:	08 95       	ret

00000286 <Kernel_Task0_Init>:


;;====================================Kernel Task0 Init=====================================;;
Kernel_Task1_Init:
        ;init stack for task0
		LDI   R18                , lo8(ker_stk1+KER_STZ)  ;fetch top SPL1,          (1 clock )
 286:	2d e0       	ldi	r18, 0x0D	; 13
		LDI   R19                , hi8(ker_stk1+KER_STZ)  ;fetch top SPH1,          (1 clock )
 288:	32 e0       	ldi	r19, 0x02	; 2
		
		LDI   R16                , lo8(Kernel_Test_Task1) ;fetch task1 entry low    (1 clock )
 28a:	0a e4       	ldi	r16, 0x4A	; 74
		STS   ker_stk1+KER_STZ-1 , R16                    ; Store at address (SP - 1)
 28c:	00 93 0c 02 	sts	0x020C, r16
		
		LDI   R16                , hi8(Kernel_Test_Task1) ; Load high byte of task address
 290:	02 e0       	ldi	r16, 0x02	; 2
		STS   ker_stk1+KER_STZ-2 , R16                    ; Store at address (SP - 2)
 292:	00 93 0b 02 	sts	0x020B, r16
		
		SUBI  R18                , 0x01                   ;subtract 0x01            (1 clock )
 296:	21 50       	subi	r18, 0x01	; 1
		SUBI  R18                , 0x01
 298:	21 50       	subi	r18, 0x01	; 1
		
		OUT   IOSPL              , R18
 29a:	2d bf       	out	0x3d, r18	; 61
        OUT   IOSPH              , R19
 29c:	3e bf       	out	0x3e, r19	; 62
		
		;push task1 entry to stack1
		LDI   R16                , lo8(Kernel_Test_Task1) ;fetch task1 entry low,   (1 clock )
 29e:	0a e4       	ldi	r16, 0x4A	; 74
		PUSH  R16                                         ;push to SPL1,            (1 clock )
 2a0:	0f 93       	push	r16
		LDI   R16                , hi8(Kernel_Test_Task1) ;fetch task1 entry high,  (1 clock )
 2a2:	02 e0       	ldi	r16, 0x02	; 2
		PUSH  R16                                         ;push to SPH1,            (1 clock )
 2a4:	0f 93       	push	r16
		
		
        ;;==============================context save========================================;;
		;; total 68 clocks for context saving
        PUSH  R0                                          ;save R0,                 (2 clocks)
 2a6:	0f 92       	push	r0
		IN    R0                 , IOSREG                 ;load SREG,               (1 clock )
 2a8:	0f b6       	in	r0, 0x3f	; 63
		PUSH  R0                                          ;save SREG,               (2 clocks)
 2aa:	0f 92       	push	r0
		PUSH  R1                                          ;save R1,                 (2 clocks)   
 2ac:	1f 92       	push	r1
		CLR   R1                                          ;clear R1,                (1 clock )
 2ae:	11 24       	eor	r1, r1
		PUSH  R2                                          ;save R2,                 (2 clocks)   
 2b0:	2f 92       	push	r2
		PUSH  R3                                          ;save R3,                 (2 clocks)   
 2b2:	3f 92       	push	r3
		PUSH  R4                                          ;save R4,                 (2 clocks)   
 2b4:	4f 92       	push	r4
		PUSH  R5                                          ;save R5,                 (2 clocks)   
 2b6:	5f 92       	push	r5
		PUSH  R6                                          ;save R6,                 (2 clocks)   
 2b8:	6f 92       	push	r6
		PUSH  R7                                          ;save R7,                 (2 clocks)   
 2ba:	7f 92       	push	r7
		PUSH  R8                                          ;save R8,                 (2 clocks)   
 2bc:	8f 92       	push	r8
		PUSH  R9                                          ;save R9,                 (2 clocks)   
 2be:	9f 92       	push	r9
		PUSH  R10                                         ;save R10,                (2 clocks)   
 2c0:	af 92       	push	r10
		PUSH  R11                                         ;save R11,                (2 clocks)  
 2c2:	bf 92       	push	r11
		PUSH  R12                                         ;save R12,                (2 clocks)  
 2c4:	cf 92       	push	r12
		PUSH  R13                                         ;save R13,                (2 clocks)  
 2c6:	df 92       	push	r13
		PUSH  R14                                         ;save R14,                (2 clocks)  
 2c8:	ef 92       	push	r14
		PUSH  R15                                         ;save R15,                (2 clocks)  
 2ca:	ff 92       	push	r15
		PUSH  R16                                         ;save R16,                (2 clocks)  
 2cc:	0f 93       	push	r16
		PUSH  R17                                         ;save R17,                (2 clocks)  
 2ce:	1f 93       	push	r17
		PUSH  R18                                         ;save R18,                (2 clocks)  
 2d0:	2f 93       	push	r18
		PUSH  R19                                         ;save R19,                (2 clocks)  
 2d2:	3f 93       	push	r19
		PUSH  R20                                         ;save R20,                (2 clocks)  
 2d4:	4f 93       	push	r20
		PUSH  R21                                         ;save R21,                (2 clocks)  
 2d6:	5f 93       	push	r21
		PUSH  R22                                         ;save R22,                (2 clocks)  
 2d8:	6f 93       	push	r22
		PUSH  R23                                         ;save R23,                (2 clocks)  
 2da:	7f 93       	push	r23
		PUSH  R24                                         ;save R24,                (2 clocks)  
 2dc:	8f 93       	push	r24
		PUSH  R25                                         ;save R25,                (2 clocks)  
 2de:	9f 93       	push	r25
		PUSH  R26                                         ;save R26,                (2 clocks)  
 2e0:	af 93       	push	r26
		PUSH  R27                                         ;save R27,                (2 clocks)  
 2e2:	bf 93       	push	r27
		PUSH  R28                                         ;save R28,                (2 clocks)  
 2e4:	cf 93       	push	r28
		PUSH  R29                                         ;save R29,                (2 clocks)  
 2e6:	df 93       	push	r29
		PUSH  R30                                         ;save R30,                (2 clocks)  
 2e8:	ef 93       	push	r30
 2ea:	ff 93       	push	r31

000002ec <_exit>:
 2ec:	f8 94       	cli

000002ee <__stop_program>:
 2ee:	ff cf       	rjmp	.-2      	; 0x2ee <__stop_program>
