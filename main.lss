
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000001a0  00800100  00800100  00000414  2**0
                  ALLOC
  2 .stab         00000eb8  00000000  00000000  00000414  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000038  00000000  00000000  000012cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00001304  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000002c  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000a5  00000000  00000000  00001350  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000070  00000000  00000000  000013f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000a9  00000000  00000000  00001465  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000020  00000000  00000000  00001510  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000a7  00000000  00000000  00001530  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__vector_16>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  58:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  5c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  60:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  64:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	00 00       	nop
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 00       	nop
  76:	00 00       	nop
  78:	00 00       	nop
  7a:	00 00       	nop
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 00       	nop
  82:	00 00       	nop
  84:	00 00       	nop
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__vector_16>

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_clear_bss>:
  96:	12 e0       	ldi	r17, 0x02	; 2
  98:	a0 e0       	ldi	r26, 0x00	; 0
  9a:	b1 e0       	ldi	r27, 0x01	; 1
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	a0 3a       	cpi	r26, 0xA0	; 160
  a2:	b1 07       	cpc	r27, r17
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  aa:	0c 94 ce 01 	jmp	0x39c	; 0x39c <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <main>:

uint64_t cur = 0, next = 0;

int main(void) {
    
	DDRD |= (1<<5);
  b2:	55 9a       	sbi	0x0a, 5	; 10
    Kernel_SysTick_Reg_Init(1000);
  b4:	88 ee       	ldi	r24, 0xE8	; 232
  b6:	93 e0       	ldi	r25, 0x03	; 3
  b8:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <Kernel_SysTick_Reg_Init>
	Kernel_Task0_Init();
  bc:	0e 94 5f 01 	call	0x2be	; 0x2be <Kernel_Task0_Init>
	Kernel_Task1_Init();
  c0:	0e 94 95 01 	call	0x32a	; 0x32a <Kernel_Task1_Init>
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <main+0x12>

000000c6 <__vector_16>:
.global  __vector_16
    __vector_16:
	    
		;;============================if kernel debug enabled===============================;;
	    #ifdef KER_DBG_ENABLE
        SBI   KER_DBG_PORT       , KER_DBG_PIN            ;set gpio,                (2 clocks)
  c6:	29 9a       	sbi	0x05, 1	; 5
		#endif
		
		
		;;==============================context save========================================;;
		;; total 68 clocks for context saving
        PUSH  R0                                          ;save R0,                 (2 clocks)
  c8:	0f 92       	push	r0
		IN    R0                 , IOSREG                 ;load SREG,               (1 clock )
  ca:	0f b6       	in	r0, 0x3f	; 63
		PUSH  R0                                          ;save SREG,               (2 clocks)
  cc:	0f 92       	push	r0
		PUSH  R1                                          ;save R1,                 (2 clocks)   
  ce:	1f 92       	push	r1
		CLR   R1                                          ;clear R1,                (1 clock )
  d0:	11 24       	eor	r1, r1
		PUSH  R2                                          ;save R2,                 (2 clocks)   
  d2:	2f 92       	push	r2
		PUSH  R3                                          ;save R3,                 (2 clocks)   
  d4:	3f 92       	push	r3
		PUSH  R4                                          ;save R4,                 (2 clocks)   
  d6:	4f 92       	push	r4
		PUSH  R5                                          ;save R5,                 (2 clocks)   
  d8:	5f 92       	push	r5
		PUSH  R6                                          ;save R6,                 (2 clocks)   
  da:	6f 92       	push	r6
		PUSH  R7                                          ;save R7,                 (2 clocks)   
  dc:	7f 92       	push	r7
		PUSH  R8                                          ;save R8,                 (2 clocks)   
  de:	8f 92       	push	r8
		PUSH  R9                                          ;save R9,                 (2 clocks)   
  e0:	9f 92       	push	r9
		PUSH  R10                                         ;save R10,                (2 clocks)   
  e2:	af 92       	push	r10
		PUSH  R11                                         ;save R11,                (2 clocks)  
  e4:	bf 92       	push	r11
		PUSH  R12                                         ;save R12,                (2 clocks)  
  e6:	cf 92       	push	r12
		PUSH  R13                                         ;save R13,                (2 clocks)  
  e8:	df 92       	push	r13
		PUSH  R14                                         ;save R14,                (2 clocks)  
  ea:	ef 92       	push	r14
		PUSH  R15                                         ;save R15,                (2 clocks)  
  ec:	ff 92       	push	r15
		PUSH  R16                                         ;save R16,                (2 clocks)  
  ee:	0f 93       	push	r16
		PUSH  R17                                         ;save R17,                (2 clocks)  
  f0:	1f 93       	push	r17
		PUSH  R18                                         ;save R18,                (2 clocks)  
  f2:	2f 93       	push	r18
		PUSH  R19                                         ;save R19,                (2 clocks)  
  f4:	3f 93       	push	r19
		PUSH  R20                                         ;save R20,                (2 clocks)  
  f6:	4f 93       	push	r20
		PUSH  R21                                         ;save R21,                (2 clocks)  
  f8:	5f 93       	push	r21
		PUSH  R22                                         ;save R22,                (2 clocks)  
  fa:	6f 93       	push	r22
		PUSH  R23                                         ;save R23,                (2 clocks)  
  fc:	7f 93       	push	r23
		PUSH  R24                                         ;save R24,                (2 clocks)  
  fe:	8f 93       	push	r24
		PUSH  R25                                         ;save R25,                (2 clocks)  
 100:	9f 93       	push	r25
		PUSH  R26                                         ;save R26,                (2 clocks)  
 102:	af 93       	push	r26
		PUSH  R27                                         ;save R27,                (2 clocks)  
 104:	bf 93       	push	r27
		PUSH  R28                                         ;save R28,                (2 clocks)  
 106:	cf 93       	push	r28
		PUSH  R29                                         ;save R29,                (2 clocks)  
 108:	df 93       	push	r29
		PUSH  R30                                         ;save R30,                (2 clocks)  
 10a:	ef 93       	push	r30
		PUSH  R31                                         ;save R31,                (2 clocks)  
 10c:	ff 93       	push	r31
		
		
		;;=============================reload counter value=================================;;
		;; total 4 clocks for reloading
		LDS   R16                , Kernel+0x08            ;fetch reload value,      (2 clocks) 
 10e:	00 91 18 01 	lds	r16, 0x0118
		STS   SRTCNT0            , R16                    ;Set value to TCNT0,      (2 clocks) 
 112:	00 93 46 00 	sts	0x0046, r16
		
		
		;;=============================increment tick counter===============================;;
		;; total 26 clocks for reloading, 40 bit counter
		LDI   R16                , 0x01                   ;load 1 to R16,           (1 clock )
 116:	01 e0       	ldi	r16, 0x01	; 1
		LDS   R17                , Kernel+0x00            ;load Byte0,              (2 clocks)
 118:	10 91 10 01 	lds	r17, 0x0110
		ADD   R17                , R16                    ;add 1 with Byte0,        (1 clock )
 11c:	10 0f       	add	r17, r16
		STS   Kernel+0x00        , R17                    ;set Byte0,               (2 clocks)
 11e:	10 93 10 01 	sts	0x0110, r17
		LDS   R17                , Kernel+0x01            ;load Byte1,              (2 clocks)
 122:	10 91 11 01 	lds	r17, 0x0111
		ADC   R17                , R1                     ;add carry with Byte1,    (1 clock )
 126:	11 1d       	adc	r17, r1
		STS   Kernel+0x01        , R17                    ;set Byte1,               (2 clocks)
 128:	10 93 11 01 	sts	0x0111, r17
		LDS   R17                , Kernel+0x02            ;load Byte2,              (2 clocks)
 12c:	10 91 12 01 	lds	r17, 0x0112
		ADC   R17                , R1                     ;add carry with Byte2,    (1 clock )
 130:	11 1d       	adc	r17, r1
		STS   Kernel+0x02        , R17                    ;set Byte2,               (2 clocks)
 132:	10 93 12 01 	sts	0x0112, r17
		LDS   R17                , Kernel+0x03            ;load Byte3,              (2 clocks)
 136:	10 91 13 01 	lds	r17, 0x0113
		ADC   R17                , R1                     ;add carry with Byte3,    (1 clock )
 13a:	11 1d       	adc	r17, r1
		STS   Kernel+0x03        , R17                    ;set Byte3,               (2 clocks)
 13c:	10 93 13 01 	sts	0x0113, r17
		LDS   R17                , Kernel+0x04            ;load Byte4,              (2 clocks)
 140:	10 91 14 01 	lds	r17, 0x0114
		ADC   R17                , R1                     ;add carry with Byte4,    (1 clock )
 144:	11 1d       	adc	r17, r1
		STS   Kernel+0x04        , R17                    ;set Byte4,               (2 clocks)
 146:	10 93 14 01 	sts	0x0114, r17
		
		
		;;========================check current task index, save SP=========================;;
		;;
	    LDS   R16                , ker_tski               ;fetch task index,        (2 clocks)
 14a:	00 91 19 01 	lds	r16, 0x0119
		CPI   R16                , 0                      ;check if val!=0          (1 clock )
 14e:	00 30       	cpi	r16, 0x00	; 0
		BRNE  TSK1                                        ;goto saving task1 SP     (2 clocks)
 150:	81 f4       	brne	.+32     	; 0x172 <TSK1>

00000152 <TSK0>:
		
		
		;;======================save stack pointer0, set task index 1=======================;;
		;;
	TSK0:
	    IN    R24                , IOSPL                  ;fetch SPL0,              (1 clock )
 152:	8d b7       	in	r24, 0x3d	; 61
		IN    R25                , IOSPH                  ;fetch SPH0,              (1 clock )
 154:	9e b7       	in	r25, 0x3e	; 62
		STS   ker_stp+0x00       , R24                    ;load  SPL0,              (2 clocks)
 156:	80 93 1a 01 	sts	0x011A, r24
		STS   ker_stp+0x01       , R25                    ;load  SPH0,              (2 clocks)
 15a:	90 93 1b 01 	sts	0x011B, r25
		LDI   R16                , 0x01                   ;set ker_tski to 1,       (1 clock )
 15e:	01 e0       	ldi	r16, 0x01	; 1
		STS   ker_tski           , R16                    ;load  ker_tski=1,        (2 clocks)
 160:	00 93 19 01 	sts	0x0119, r16
		;skip TSK1, switch task by loading task1 SP 
		LDS   R24                , ker_stp+0x02           ;fetch SPL0,              (2 clocks)
 164:	80 91 1c 01 	lds	r24, 0x011C
		LDS   R25                , ker_stp+0x03           ;fetch SPH0,              (2 clocks)
 168:	90 91 1d 01 	lds	r25, 0x011D
		OUT   IOSPL              , R24                    ;load SPL0,               (1 clock )
 16c:	8d bf       	out	0x3d, r24	; 61
		OUT   IOSPH              , R25                    ;load SPH0,               (1 clock )
 16e:	9e bf       	out	0x3e, r25	; 62
		RJMP  RS_CNTXT                                    ;jump to restore context, (2 clocks)
 170:	0f c0       	rjmp	.+30     	; 0x190 <RS_CNTXT>

00000172 <TSK1>:
		
		
	    ;;======================save stack pointer1, set task index 0=======================;;
		;;
	TSK1:
	    IN    R24                , IOSPL                  ;fetch SPL0,              (1 clock )
 172:	8d b7       	in	r24, 0x3d	; 61
		IN    R25                , IOSPH                  ;fetch SPH0,              (1 clock )
 174:	9e b7       	in	r25, 0x3e	; 62
		STS   ker_stp+0x02       , R24                    ;load  SPL0,              (2 clocks)
 176:	80 93 1c 01 	sts	0x011C, r24
		STS   ker_stp+0x03       , R25                    ;load  SPH0,              (2 clocks)
 17a:	90 93 1d 01 	sts	0x011D, r25
		LDI   R16                , 0x00                   ;set ker_tski to 0,       (1 clock )
 17e:	00 e0       	ldi	r16, 0x00	; 0
		STS   ker_tski           , R16                    ;load  ker_tski=0,        (2 clocks)
 180:	00 93 19 01 	sts	0x0119, r16
		;switch task by loading task0 SP 
		LDS   R24                , ker_stp+0x00           ;fetch SPL0,              (2 clocks)
 184:	80 91 1a 01 	lds	r24, 0x011A
		LDS   R25                , ker_stp+0x01           ;fetch SPH0,              (2 clocks)
 188:	90 91 1b 01 	lds	r25, 0x011B
		OUT   IOSPL              , R24                    ;load SPL0,               (1 clock )
 18c:	8d bf       	out	0x3d, r24	; 61
		OUT   IOSPH              , R25                    ;load SPH0,               (1 clock )
 18e:	9e bf       	out	0x3e, r25	; 62

00000190 <RS_CNTXT>:
		
		
	RS_CNTXT:
		;;===============================context restore====================================;;
		;; total 68 clocks for context restore
		POP   R31                                         ;restore R31,             (2 clocks) 
 190:	ff 91       	pop	r31
		POP   R30                                         ;restore R30,             (2 clocks) 
 192:	ef 91       	pop	r30
		POP   R29                                         ;restore R29,             (2 clocks)
 194:	df 91       	pop	r29
		POP   R28                                         ;restore R28,             (2 clocks) 
 196:	cf 91       	pop	r28
		POP   R27                                         ;restore R27,             (2 clocks) 
 198:	bf 91       	pop	r27
		POP   R26                                         ;restore R26,             (2 clocks) 
 19a:	af 91       	pop	r26
		POP   R25                                         ;restore R25,             (2 clocks) 
 19c:	9f 91       	pop	r25
		POP   R24                                         ;restore R24,             (2 clocks) 
 19e:	8f 91       	pop	r24
		POP   R23                                         ;restore R23,             (2 clocks) 
 1a0:	7f 91       	pop	r23
		POP   R22                                         ;restore R22,             (2 clocks) 
 1a2:	6f 91       	pop	r22
		POP   R21                                         ;restore R21,             (2 clocks) 
 1a4:	5f 91       	pop	r21
		POP   R20                                         ;restore R20,             (2 clocks) 
 1a6:	4f 91       	pop	r20
		POP   R19                                         ;restore R19,             (2 clocks) 
 1a8:	3f 91       	pop	r19
		POP   R18                                         ;restore R18,             (2 clocks) 
 1aa:	2f 91       	pop	r18
		POP   R17                                         ;restore R17,             (2 clocks) 
 1ac:	1f 91       	pop	r17
		POP   R16                                         ;restore R16,             (2 clocks) 
 1ae:	0f 91       	pop	r16
		POP   R15                                         ;restore R15,             (2 clocks) 
 1b0:	ff 90       	pop	r15
		POP   R14                                         ;restore R14,             (2 clocks) 
 1b2:	ef 90       	pop	r14
		POP   R13                                         ;restore R13,             (2 clocks) 
 1b4:	df 90       	pop	r13
		POP   R12                                         ;restore R12,             (2 clocks) 
 1b6:	cf 90       	pop	r12
		POP   R11                                         ;restore R11,             (2 clocks) 
 1b8:	bf 90       	pop	r11
		POP   R10                                         ;restore R10,             (2 clocks) 
 1ba:	af 90       	pop	r10
		POP   R9                                          ;restore R9,              (2 clocks) 
 1bc:	9f 90       	pop	r9
		POP   R8                                          ;restore R8,              (2 clocks) 
 1be:	8f 90       	pop	r8
		POP   R7                                          ;restore R7,              (2 clocks) 
 1c0:	7f 90       	pop	r7
		POP   R6                                          ;restore R6,              (2 clocks) 
 1c2:	6f 90       	pop	r6
		POP   R5                                          ;restore R5,              (2 clocks) 
 1c4:	5f 90       	pop	r5
		POP   R4                                          ;restore R4,              (2 clocks) 
 1c6:	4f 90       	pop	r4
		POP   R3                                          ;restore R3,              (2 clocks) 
 1c8:	3f 90       	pop	r3
		POP   R2                                          ;restore R2,              (2 clocks) 
 1ca:	2f 90       	pop	r2
		POP   R1                                          ;restore R1,              (2 clocks) 
 1cc:	1f 90       	pop	r1
		POP   R0                                          ;fetch SREG,              (2 clocks) 
 1ce:	0f 90       	pop	r0
		OUT   0x3F               , R0                     ;load SREG,               (1 clock ) 
 1d0:	0f be       	out	0x3f, r0	; 63
		POP   R0                                          ;restore R0,              (2 clocks) 
 1d2:	0f 90       	pop	r0
		
		
		;;============================if kernel debug enabled===============================;;
		#ifdef KER_DBG_ENABLE
		CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear gpio,              (2 clocks)
 1d4:	29 98       	cbi	0x05, 1	; 5
		#endif
		
		RETI                                              ;return from interrupt,   (4 clocks) 
 1d6:	18 95       	reti

000001d8 <Kernel_SysTick_Reg_Init>:

;;====================================SysTick Reg Init=======================================;;
;; total 32 clocks for SysTick Reg Init, omited debug gpio config
Kernel_SysTick_Reg_Init:
        ;clear all kernel variables
		LDI   R16                , 0x00                   ;set 0x00 to R16,         (1 clock )
 1d8:	00 e0       	ldi	r16, 0x00	; 0
		STS   Kernel+0x00        , R16                    ;clear  kernel[0],        (2 clocks)
 1da:	00 93 10 01 	sts	0x0110, r16
		STS   Kernel+0x01        , R16                    ;clear  kernel[1],        (2 clocks)
 1de:	00 93 11 01 	sts	0x0111, r16
		STS   Kernel+0x02        , R16                    ;clear  kernel[2],        (2 clocks)
 1e2:	00 93 12 01 	sts	0x0112, r16
		STS   Kernel+0x03        , R16                    ;clear  kernel[3],        (2 clocks)
 1e6:	00 93 13 01 	sts	0x0113, r16
		STS   Kernel+0x04        , R16                    ;clear  kernel[4],        (2 clocks)
 1ea:	00 93 14 01 	sts	0x0114, r16
		STS   Kernel+0x05        , R16                    ;clear  kernel[5],        (2 clocks)
 1ee:	00 93 15 01 	sts	0x0115, r16
		STS   Kernel+0x06        , R16                    ;clear  kernel[6],        (2 clocks)
 1f2:	00 93 16 01 	sts	0x0116, r16
		STS   Kernel+0x07        , R16                    ;clear  kernel[7],        (2 clocks)
 1f6:	00 93 17 01 	sts	0x0117, r16
		STS   Kernel+0x08        , R16                    ;clear  kernel[8],        (2 clocks)
 1fa:	00 93 18 01 	sts	0x0118, r16
		
		#ifdef KER_DBG_ENABLE
		SBI   KER_DBG_DDR        , KER_DBG_PIN            ;set bit in DDR,          (2 clocks) 
 1fe:	21 9a       	sbi	0x04, 1	; 4
		CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear port bit,          (2 clocks) 
 200:	29 98       	cbi	0x05, 1	; 5
		#endif
		
		
        CLI                                               ;disable global interrupt,(1 clock ) 
 202:	f8 94       	cli
		LDI   R16                , 0x00                   ;store r16 with 0,        (1 clock ) 
 204:	00 e0       	ldi	r16, 0x00	; 0
		STS   SRTCCR0A           , R16                    ;clear TCCR0A,            (2 clocks) 
 206:	00 93 44 00 	sts	0x0044, r16
		STS   SRTCCR0B           , R16                    ;clear TCCR0B,            (2 clocks) 
 20a:	00 93 45 00 	sts	0x0045, r16
		STS   SRTIMSK0           , R16                    ;clear TIMSK0,            (2 clocks) 
 20e:	00 93 6e 00 	sts	0x006E, r16
		STS   SRTIFR0            , R16                    ;clear TIFR0,             (2 clocks) 
 212:	00 93 35 00 	sts	0x0035, r16
		STS   SROCR0A            , R16                    ;clear OCR0A,             (2 clocks) 
 216:	00 93 47 00 	sts	0x0047, r16
		STS   SROCR0B            , R16                    ;clear OCR0B,             (2 clocks) 
 21a:	00 93 48 00 	sts	0x0048, r16
		STS   SRTCNT0            , R16                    ;clear TCNT0,             (2 clocks) 
 21e:	00 93 46 00 	sts	0x0046, r16
		LDI   R16                , KER_PRS                ;prescaler 64,            (1 clock ) 
 222:	03 e0       	ldi	r16, 0x03	; 3
		STS   SRTCCR0B           , R16                    ;set to TCCR0B,           (2 clocks)
 224:	00 93 45 00 	sts	0x0045, r16
		LDI   R16                , KER_RLD                ;reload value (130),      (1 clock ) 
 228:	02 e8       	ldi	r16, 0x82	; 130
		STS   Kernel+0x08        , R16                    ;Kernel[5] reload value,  (2 clocks) 
 22a:	00 93 18 01 	sts	0x0118, r16
		STS   SRTCNT0            , R16                    ;set to TCNT0,            (2 clocks) 
 22e:	00 93 46 00 	sts	0x0046, r16
		LDI   R16                , 0x01                   ;store with TOIE0 enabled,(1 clock ) 
 232:	01 e0       	ldi	r16, 0x01	; 1
		STS   SRTIMSK0           , R16                    ;set to TIMSK0,           (2 clocks) 
 234:	00 93 6e 00 	sts	0x006E, r16
		SEI                                               ;enable global interrupt, (1 clock ) 
 238:	78 94       	sei
		RET                                               ;return from subroutine,  (4 clocks) 
 23a:	08 95       	ret

0000023c <Kernel_SysTick_Val_Get>:

;;===================================SysTick Value Get======================================;;
;; total 20 clocks for SysTick Value Get
;; interrupts disabled for 16 clocks
Kernel_SysTick_Val_Get:
        IN    R16                , IOSREG                 ;Save SREG,               (1 clock ) 
 23c:	0f b7       	in	r16, 0x3f	; 63
        CLI                                               ;Disable interrupts,      (1 clock ) 
 23e:	f8 94       	cli
		LDS   R18		         , Kernel+0x00            ;Byte0 -> R18 (LSB),      (2 clocks) 
 240:	20 91 10 01 	lds	r18, 0x0110
		LDS   R19		         , Kernel+0x01            ;Byte1 -> R19,            (2 clocks) 
 244:	30 91 11 01 	lds	r19, 0x0111
		LDS   R20		         , Kernel+0x02            ;Byte2 -> R20,            (2 clocks) 
 248:	40 91 12 01 	lds	r20, 0x0112
		LDS   R21		         , Kernel+0x03            ;Byte3 -> R21,            (2 clocks) 
 24c:	50 91 13 01 	lds	r21, 0x0113
		LDS   R22		         , Kernel+0x04            ;Byte4 -> R22,            (2 clocks) 
 250:	60 91 14 01 	lds	r22, 0x0114
		LDI   R23		         , 0x00                   ;Byte4 -> R23,            (1 clocks) 
 254:	70 e0       	ldi	r23, 0x00	; 0
		LDI   R24		         , 0x00                   ;Byte4 -> R24,            (1 clocks) 
 256:	80 e0       	ldi	r24, 0x00	; 0
		LDI   R25		         , 0x00                   ;Byte4 -> R25 (MSB),      (1 clocks) 
 258:	90 e0       	ldi	r25, 0x00	; 0
		OUT   IOSREG             , R16          		  ;Restore SREG,            (1 clock )
 25a:	0f bf       	out	0x3f, r16	; 63
		RET                                               ;return from subroutine,  (4 clocks) 
 25c:	08 95       	ret

0000025e <Kernel_Interrupt_Sts_Get>:


;;=================================Interrupt Status Get=====================================;;
;; total 10 clocks for Interrupt Status Get
Kernel_Interrupt_Sts_Get:
        LDI   R24		         , 0x00                   ;clear R24,               (1 clock ) 
 25e:	80 e0       	ldi	r24, 0x00	; 0
        IN    R16		         , IOSREG                 ;save SREG in R16,        (1 clock )
 260:	0f b7       	in	r16, 0x3f	; 63
		SBRC  R16		         , 0x07                   ;check I flag->bit7,      (3 clocks)
 262:	07 fd       	sbrc	r16, 7
		LDI   R24		         , 0x01                   ;set R24 to 1,            (1 clock ) 
 264:	81 e0       	ldi	r24, 0x01	; 1
		RET                                               ;return from subroutine,  (4 clocks) 
 266:	08 95       	ret

00000268 <Kernel_Test_Task0>:


;;===================================Kernel Test Task0======================================;;
Kernel_Test_Task0:
        ;initialize DDR and Port register, total 4 clocks
        SBI   KER_TSK0_DDR       , KER_TSK0_PIN           ;set bit in DDR,          (2 clocks) 
 268:	55 9a       	sbi	0x0a, 5	; 10
		CBI   KER_TSK0_PORT      , KER_TSK0_PIN           ;clear port bit,          (2 clocks)
 26a:	5d 98       	cbi	0x0b, 5	; 11

0000026c <LOOP0>:
		 
    LOOP0:
	    ;pin toggle, total 5 clocks
		IN    R16                , KER_TSK0_PORT          ;load PORT val,           (2 clocks)
 26c:	0b b1       	in	r16, 0x0b	; 11
		LDI   R17                , (1<<KER_TSK0_PIN)      ;bit mask for port pin    (1 clock )
 26e:	10 e2       	ldi	r17, 0x20	; 32
		EOR   R16                , R17                    ;XOR with current val     (1 clock )
 270:	01 27       	eor	r16, r17
		OUT   KER_TSK0_PORT      , R16                    ;set new PORT val,        (1 clock )
 272:	0b b9       	out	0x0b, r16	; 11
		
		;assign delay loop count val, for 30ms 
		LDI   R16                , 0xEB                   ;set loop cnt val,        (1 clock )
 274:	0b ee       	ldi	r16, 0xEB	; 235

00000276 <DLY00>:
		
    DLY00:
	    LDI   R17                , 0xFF                   ;set loop cnt val,        (1 clock )
 276:	1f ef       	ldi	r17, 0xFF	; 255

00000278 <DLY01>:
		
	DLY01:                                                ;inner loop,127.5uS@8Mhz  (4 clocks)
		NOP                                               ;no operation,            (1 clock )
 278:	00 00       	nop
		DEC   R17                                         ;decrement R17 val,       (1 clock )
 27a:	1a 95       	dec	r17
		BRNE  DLY01                                       ;if R17 not equal to 0,   (2 clock ) 
 27c:	e9 f7       	brne	.-6      	; 0x278 <DLY01>
		DEC   R16                                         ;decrement R16 val,       (1 clock )
 27e:	0a 95       	dec	r16
		BRNE  DLY00                                       ;if R16 not equal to 0,   (2 clock ) 
 280:	d1 f7       	brne	.-12     	; 0x276 <DLY00>
		RJMP  LOOP0                                       ;if R16 is 0->jump,       (2 clock ) 
 282:	f4 cf       	rjmp	.-24     	; 0x26c <LOOP0>
		RET                                               ;return from subroutine,  (4 clocks) 
 284:	08 95       	ret

00000286 <Kernel_Test_Task1>:


;;===================================Kernel Test Task1======================================;;
Kernel_Test_Task1:
        ;initialize DDR and Port register, total 4 clocks
        SBI   KER_TSK1_DDR       , KER_TSK1_PIN           ;set bit in DDR,          (2 clocks) 
 286:	56 9a       	sbi	0x0a, 6	; 10
		CBI   KER_TSK1_PORT      , KER_TSK1_PIN           ;clear port bit,          (2 clocks)
 288:	5e 98       	cbi	0x0b, 6	; 11

0000028a <LOOP1>:
		 
    LOOP1:
	    ;pin toggle, total 5 clocks
		IN    R16                , KER_TSK1_PORT          ;load PORT val,           (2 clocks)
 28a:	0b b1       	in	r16, 0x0b	; 11
		LDI   R17                , (1<<KER_TSK1_PIN)      ;bit mask for port pin    (1 clock )
 28c:	10 e4       	ldi	r17, 0x40	; 64
		EOR   R16                , R17                    ;XOR with current val     (1 clock )
 28e:	01 27       	eor	r16, r17
		OUT   KER_TSK1_PORT      , R16                    ;set new PORT val,        (1 clock )
 290:	0b b9       	out	0x0b, r16	; 11
		
		;assign delay loop count val, for 30ms 
		LDI   R16                , 0xEB                   ;set loop cnt val,        (1 clock )
 292:	0b ee       	ldi	r16, 0xEB	; 235

00000294 <DLY10>:
		
    DLY10:
	    LDI   R17                , 0xFF                   ;set loop cnt val,        (1 clock )
 294:	1f ef       	ldi	r17, 0xFF	; 255

00000296 <DLY11>:
		
	DLY11:                                                ;inner loop,127.5uS@8Mhz  (4 clocks)
		NOP                                               ;no operation,            (1 clock )
 296:	00 00       	nop
		DEC   R17                                         ;decrement R17 val,       (1 clock )
 298:	1a 95       	dec	r17
		BRNE  DLY11                                       ;if R17 not equal to 0,   (2 clock ) 
 29a:	e9 f7       	brne	.-6      	; 0x296 <DLY11>
		DEC   R16                                         ;decrement R16 val,       (1 clock )
 29c:	0a 95       	dec	r16
		BRNE  DLY10                                       ;if R16 not equal to 0,   (2 clock ) 
 29e:	d1 f7       	brne	.-12     	; 0x294 <DLY10>
		RJMP  LOOP1                                       ;if R16 is 0->jump,       (2 clock ) 
 2a0:	f4 cf       	rjmp	.-24     	; 0x28a <LOOP1>

000002a2 <Kernel_Test_Task2>:


;;===================================Kernel Test Task2======================================;;
Kernel_Test_Task2:
        ;initialize DDR and Port register, total 4 clocks
        SBI   KER_TSK2_DDR       , KER_TSK2_PIN           ;set bit in DDR,          (2 clocks) 
 2a2:	57 9a       	sbi	0x0a, 7	; 10
		CBI   KER_TSK2_PORT      , KER_TSK2_PIN           ;clear port bit,          (2 clocks)
 2a4:	5f 98       	cbi	0x0b, 7	; 11

000002a6 <LOOP2>:
		 
    LOOP2:
	    ;pin toggle, total 5 clocks
		IN    R16                , KER_TSK2_PORT          ;load PORT val,           (2 clocks)
 2a6:	0b b1       	in	r16, 0x0b	; 11
		LDI   R17                , (1<<KER_TSK2_PIN)      ;bit mask for port pin    (1 clock )
 2a8:	10 e8       	ldi	r17, 0x80	; 128
		EOR   R16                , R17                    ;XOR with current val     (1 clock )
 2aa:	01 27       	eor	r16, r17
		OUT   KER_TSK2_PORT      , R16                    ;set new PORT val,        (1 clock )
 2ac:	0b b9       	out	0x0b, r16	; 11
		
		;assign delay loop count val, for 30ms 
		LDI   R16                , 0xEB                   ;set loop cnt val,        (1 clock )
 2ae:	0b ee       	ldi	r16, 0xEB	; 235

000002b0 <DLY20>:
		
    DLY20:
	    LDI   R17                , 0xFF                   ;set loop cnt val,        (1 clock )
 2b0:	1f ef       	ldi	r17, 0xFF	; 255

000002b2 <DLY21>:
		
	DLY21:                                                ;inner loop, 127.5uS@8Mhz (4 clocks)
		NOP                                               ;no operation,            (1 clock )
 2b2:	00 00       	nop
		DEC   R17                                         ;decrement R17 val,       (1 clock )
 2b4:	1a 95       	dec	r17
		BRNE  DLY21                                       ;if R17 not equal to 0,   (2 clock ) 
 2b6:	e9 f7       	brne	.-6      	; 0x2b2 <DLY21>
		DEC   R16                                         ;decrement R16 val,       (1 clock )
 2b8:	0a 95       	dec	r16
		BRNE  DLY20                                       ;if R16 not equal to 0,   (2 clock ) 
 2ba:	d1 f7       	brne	.-12     	; 0x2b0 <DLY20>
		RJMP  LOOP2                                       ;if R16 is 0->jump,       (2 clock ) 
 2bc:	f4 cf       	rjmp	.-24     	; 0x2a6 <LOOP2>

000002be <Kernel_Task0_Init>:
    

;;====================================Kernel Task0 Init=====================================;;
Kernel_Task0_Init:
        ;init stack for task0
		LDI   R18                , lo8(ker_stk0+KER_STZ)  ;fetch top SPL1,          (1 clock )
 2be:	20 ea       	ldi	r18, 0xA0	; 160
		LDI   R19                , hi8(ker_stk0+KER_STZ)  ;fetch top SPH1,          (1 clock )
 2c0:	31 e0       	ldi	r19, 0x01	; 1
		
		OUT   IOSPL              , R18
 2c2:	2d bf       	out	0x3d, r18	; 61
        OUT   IOSPH              , R19
 2c4:	3e bf       	out	0x3e, r19	; 62
		
		LDI   R16                , lo8(Kernel_Test_Task0)
 2c6:	08 e6       	ldi	r16, 0x68	; 104
        PUSH  R16
 2c8:	0f 93       	push	r16
        LDI   R16                , hi8(Kernel_Test_Task0)
 2ca:	02 e0       	ldi	r16, 0x02	; 2
        PUSH  R16
 2cc:	0f 93       	push	r16
		
		;push task1 entry to stack1
		LDI   R16                , lo8(Kernel_Test_Task0) ;fetch task1 entry low,   (1 clock )
 2ce:	08 e6       	ldi	r16, 0x68	; 104
		PUSH  R16                                         ;push to SPL1,            (1 clock )
 2d0:	0f 93       	push	r16
		LDI   R16                , hi8(Kernel_Test_Task0) ;fetch task1 entry high,  (1 clock )
 2d2:	02 e0       	ldi	r16, 0x02	; 2
		PUSH  R16                                         ;push to SPH1,            (1 clock )
 2d4:	0f 93       	push	r16
		
		
        ;;==============================context save========================================;;
		;; total 68 clocks for context saving
        PUSH  R0                                          ;save R0,                 (2 clocks)
 2d6:	0f 92       	push	r0
		IN    R0                 , IOSREG                 ;load SREG,               (1 clock )
 2d8:	0f b6       	in	r0, 0x3f	; 63
		PUSH  R0                                          ;save SREG,               (2 clocks)
 2da:	0f 92       	push	r0
		PUSH  R1                                          ;save R1,                 (2 clocks)   
 2dc:	1f 92       	push	r1
		CLR   R1                                          ;clear R1,                (1 clock )
 2de:	11 24       	eor	r1, r1
		PUSH  R2                                          ;save R2,                 (2 clocks)   
 2e0:	2f 92       	push	r2
		PUSH  R3                                          ;save R3,                 (2 clocks)   
 2e2:	3f 92       	push	r3
		PUSH  R4                                          ;save R4,                 (2 clocks)   
 2e4:	4f 92       	push	r4
		PUSH  R5                                          ;save R5,                 (2 clocks)   
 2e6:	5f 92       	push	r5
		PUSH  R6                                          ;save R6,                 (2 clocks)   
 2e8:	6f 92       	push	r6
		PUSH  R7                                          ;save R7,                 (2 clocks)   
 2ea:	7f 92       	push	r7
		PUSH  R8                                          ;save R8,                 (2 clocks)   
 2ec:	8f 92       	push	r8
		PUSH  R9                                          ;save R9,                 (2 clocks)   
 2ee:	9f 92       	push	r9
		PUSH  R10                                         ;save R10,                (2 clocks)   
 2f0:	af 92       	push	r10
		PUSH  R11                                         ;save R11,                (2 clocks)  
 2f2:	bf 92       	push	r11
		PUSH  R12                                         ;save R12,                (2 clocks)  
 2f4:	cf 92       	push	r12
		PUSH  R13                                         ;save R13,                (2 clocks)  
 2f6:	df 92       	push	r13
		PUSH  R14                                         ;save R14,                (2 clocks)  
 2f8:	ef 92       	push	r14
		PUSH  R15                                         ;save R15,                (2 clocks)  
 2fa:	ff 92       	push	r15
		PUSH  R16                                         ;save R16,                (2 clocks)  
 2fc:	0f 93       	push	r16
		PUSH  R17                                         ;save R17,                (2 clocks)  
 2fe:	1f 93       	push	r17
		PUSH  R18                                         ;save R18,                (2 clocks)  
 300:	2f 93       	push	r18
		PUSH  R19                                         ;save R19,                (2 clocks)  
 302:	3f 93       	push	r19
		PUSH  R20                                         ;save R20,                (2 clocks)  
 304:	4f 93       	push	r20
		PUSH  R21                                         ;save R21,                (2 clocks)  
 306:	5f 93       	push	r21
		PUSH  R22                                         ;save R22,                (2 clocks)  
 308:	6f 93       	push	r22
		PUSH  R23                                         ;save R23,                (2 clocks)  
 30a:	7f 93       	push	r23
		PUSH  R24                                         ;save R24,                (2 clocks)  
 30c:	8f 93       	push	r24
		PUSH  R25                                         ;save R25,                (2 clocks)  
 30e:	9f 93       	push	r25
		PUSH  R26                                         ;save R26,                (2 clocks)  
 310:	af 93       	push	r26
		PUSH  R27                                         ;save R27,                (2 clocks)  
 312:	bf 93       	push	r27
		PUSH  R28                                         ;save R28,                (2 clocks)  
 314:	cf 93       	push	r28
		PUSH  R29                                         ;save R29,                (2 clocks)  
 316:	df 93       	push	r29
		PUSH  R30                                         ;save R30,                (2 clocks)  
 318:	ef 93       	push	r30
		PUSH  R31                                         ;save R31,                (2 clocks) 
 31a:	ff 93       	push	r31
		
		;--- Step 5: Save current SP into ker_stp[1] (task1 pointer) ---
        IN    R20, IOSPL
 31c:	4d b7       	in	r20, 0x3d	; 61
        IN    R21, IOSPH
 31e:	5e b7       	in	r21, 0x3e	; 62
        STS   ker_stp + 0        , R20                    ; Task 1 is index 1
 320:	40 93 1a 01 	sts	0x011A, r20
        STS   ker_stp + 1        , R21
 324:	50 93 1b 01 	sts	0x011B, r21
		
		;LDI   R16                , 0x00                   ;set ker_tski to 0,       (1 clock )
		;STS   ker_tski           , R16                    ;load  ker_tski = 0,      (2 clocks)
        RET                                               ;return from subroutine,  (4 clocks) 
 328:	08 95       	ret

0000032a <Kernel_Task1_Init>:


;;====================================Kernel Task0 Init=====================================;;
Kernel_Task1_Init:
        ;init stack for task0
		LDI   R18                , lo8(ker_stk1+KER_STZ)  ;fetch top SPL1,          (1 clock )
 32a:	20 e2       	ldi	r18, 0x20	; 32
		LDI   R19                , hi8(ker_stk1+KER_STZ)  ;fetch top SPH1,          (1 clock )
 32c:	32 e0       	ldi	r19, 0x02	; 2
		
		OUT   IOSPL              , R18
 32e:	2d bf       	out	0x3d, r18	; 61
        OUT   IOSPH              , R19
 330:	3e bf       	out	0x3e, r19	; 62
		
		LDI   R16                , lo8(Kernel_Test_Task1)
 332:	06 e8       	ldi	r16, 0x86	; 134
        PUSH  R16
 334:	0f 93       	push	r16
        LDI   R16                , hi8(Kernel_Test_Task1)
 336:	02 e0       	ldi	r16, 0x02	; 2
        PUSH  R16
 338:	0f 93       	push	r16
		
		;push task1 entry to stack1
		LDI   R16                , lo8(Kernel_Test_Task1) ;fetch task1 entry low,   (1 clock )
 33a:	06 e8       	ldi	r16, 0x86	; 134
		PUSH  R16                                         ;push to SPL1,            (1 clock )
 33c:	0f 93       	push	r16
		LDI   R16                , hi8(Kernel_Test_Task1) ;fetch task1 entry high,  (1 clock )
 33e:	02 e0       	ldi	r16, 0x02	; 2
		PUSH  R16                                         ;push to SPH1,            (1 clock )
 340:	0f 93       	push	r16
		
		
        ;;==============================context save========================================;;
		;; total 68 clocks for context saving
        PUSH  R0                                          ;save R0,                 (2 clocks)
 342:	0f 92       	push	r0
		IN    R0                 , IOSREG                 ;load SREG,               (1 clock )
 344:	0f b6       	in	r0, 0x3f	; 63
		PUSH  R0                                          ;save SREG,               (2 clocks)
 346:	0f 92       	push	r0
		PUSH  R1                                          ;save R1,                 (2 clocks)   
 348:	1f 92       	push	r1
		CLR   R1                                          ;clear R1,                (1 clock )
 34a:	11 24       	eor	r1, r1
		PUSH  R2                                          ;save R2,                 (2 clocks)   
 34c:	2f 92       	push	r2
		PUSH  R3                                          ;save R3,                 (2 clocks)   
 34e:	3f 92       	push	r3
		PUSH  R4                                          ;save R4,                 (2 clocks)   
 350:	4f 92       	push	r4
		PUSH  R5                                          ;save R5,                 (2 clocks)   
 352:	5f 92       	push	r5
		PUSH  R6                                          ;save R6,                 (2 clocks)   
 354:	6f 92       	push	r6
		PUSH  R7                                          ;save R7,                 (2 clocks)   
 356:	7f 92       	push	r7
		PUSH  R8                                          ;save R8,                 (2 clocks)   
 358:	8f 92       	push	r8
		PUSH  R9                                          ;save R9,                 (2 clocks)   
 35a:	9f 92       	push	r9
		PUSH  R10                                         ;save R10,                (2 clocks)   
 35c:	af 92       	push	r10
		PUSH  R11                                         ;save R11,                (2 clocks)  
 35e:	bf 92       	push	r11
		PUSH  R12                                         ;save R12,                (2 clocks)  
 360:	cf 92       	push	r12
		PUSH  R13                                         ;save R13,                (2 clocks)  
 362:	df 92       	push	r13
		PUSH  R14                                         ;save R14,                (2 clocks)  
 364:	ef 92       	push	r14
		PUSH  R15                                         ;save R15,                (2 clocks)  
 366:	ff 92       	push	r15
		PUSH  R16                                         ;save R16,                (2 clocks)  
 368:	0f 93       	push	r16
		PUSH  R17                                         ;save R17,                (2 clocks)  
 36a:	1f 93       	push	r17
		PUSH  R18                                         ;save R18,                (2 clocks)  
 36c:	2f 93       	push	r18
		PUSH  R19                                         ;save R19,                (2 clocks)  
 36e:	3f 93       	push	r19
		PUSH  R20                                         ;save R20,                (2 clocks)  
 370:	4f 93       	push	r20
		PUSH  R21                                         ;save R21,                (2 clocks)  
 372:	5f 93       	push	r21
		PUSH  R22                                         ;save R22,                (2 clocks)  
 374:	6f 93       	push	r22
		PUSH  R23                                         ;save R23,                (2 clocks)  
 376:	7f 93       	push	r23
		PUSH  R24                                         ;save R24,                (2 clocks)  
 378:	8f 93       	push	r24
		PUSH  R25                                         ;save R25,                (2 clocks)  
 37a:	9f 93       	push	r25
		PUSH  R26                                         ;save R26,                (2 clocks)  
 37c:	af 93       	push	r26
		PUSH  R27                                         ;save R27,                (2 clocks)  
 37e:	bf 93       	push	r27
		PUSH  R28                                         ;save R28,                (2 clocks)  
 380:	cf 93       	push	r28
		PUSH  R29                                         ;save R29,                (2 clocks)  
 382:	df 93       	push	r29
		PUSH  R30                                         ;save R30,                (2 clocks)  
 384:	ef 93       	push	r30
		PUSH  R31                                         ;save R31,                (2 clocks) 
 386:	ff 93       	push	r31
		
		;--- Step 5: Save current SP into ker_stp[1] (task1 pointer) ---
        IN    R20, IOSPL
 388:	4d b7       	in	r20, 0x3d	; 61
        IN    R21, IOSPH
 38a:	5e b7       	in	r21, 0x3e	; 62
        STS   ker_stp + 2        , R20                    ; Task 1 is index 1
 38c:	40 93 1c 01 	sts	0x011C, r20
        STS   ker_stp + 3        , R21
 390:	50 93 1d 01 	sts	0x011D, r21
		
		LDI   R16                , 0x01                   ;set ker_tski to 1,       (1 clock )
 394:	01 e0       	ldi	r16, 0x01	; 1
		STS   ker_tski           , R16                    ;load  ker_tski = 1,      (2 clocks)
 396:	00 93 19 01 	sts	0x0119, r16
        RET                                               ;return from subroutine,  (4 clocks) 
 39a:	08 95       	ret

0000039c <_exit>:
 39c:	f8 94       	cli

0000039e <__stop_program>:
 39e:	ff cf       	rjmp	.-2      	; 0x39e <__stop_program>
