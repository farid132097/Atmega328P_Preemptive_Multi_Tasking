
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001004  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000055a  00800100  00800100  00001078  2**0
                  ALLOC
  2 .stab         00000da4  00000000  00000000  00001078  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000006d  00000000  00000000  00001e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00001e89  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000bd  00000000  00000000  00001ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001a9  00000000  00000000  00001f86  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000ba  00000000  00000000  0000212f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000486  00000000  00000000  000021e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00002670  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000115  00000000  00000000  00002730  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__vector_7>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 12 03 	jmp	0x624	; 0x624 <__vector_9>
      28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	00 00       	nop
      6e:	00 00       	nop
      70:	00 00       	nop
      72:	00 00       	nop
      74:	14 c0       	rjmp	.+40     	; 0x9e <__bad_interrupt>
      76:	e3 c1       	rjmp	.+966    	; 0x43e <__vector_7>
      78:	12 c0       	rjmp	.+36     	; 0x9e <__bad_interrupt>
      7a:	d4 c2       	rjmp	.+1448   	; 0x624 <__vector_9>
      7c:	00 00       	nop
      7e:	00 00       	nop
      80:	00 00       	nop
      82:	00 00       	nop
      84:	00 00       	nop
      86:	00 00       	nop
      88:	0a c0       	rjmp	.+20     	; 0x9e <__bad_interrupt>

0000008a <__ctors_end>:
      8a:	11 24       	eor	r1, r1
      8c:	1f be       	out	0x3f, r1	; 63
      8e:	cf ef       	ldi	r28, 0xFF	; 255
      90:	d8 e0       	ldi	r29, 0x08	; 8
      92:	de bf       	out	0x3e, r29	; 62
      94:	cd bf       	out	0x3d, r28	; 61
      96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
      9a:	0c 94 00 08 	jmp	0x1000	; 0x1000 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:



int main(void) {
    
	Kernel_Init();
      a2:	0e 94 91 05 	call	0xb22	; 0xb22 <Kernel_Init>

	Kernel_Task_Create(Tasks_Task1,  5);
      a6:	8b ee       	ldi	r24, 0xEB	; 235
      a8:	91 e0       	ldi	r25, 0x01	; 1
      aa:	65 e0       	ldi	r22, 0x05	; 5
      ac:	0e 94 4f 04 	call	0x89e	; 0x89e <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task2,  1);
      b0:	8e eb       	ldi	r24, 0xBE	; 190
      b2:	91 e0       	ldi	r25, 0x01	; 1
      b4:	61 e0       	ldi	r22, 0x01	; 1
      b6:	0e 94 4f 04 	call	0x89e	; 0x89e <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task3,  2);
      ba:	81 e9       	ldi	r24, 0x91	; 145
      bc:	91 e0       	ldi	r25, 0x01	; 1
      be:	62 e0       	ldi	r22, 0x02	; 2
      c0:	0e 94 4f 04 	call	0x89e	; 0x89e <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task4,  3);
      c4:	84 e6       	ldi	r24, 0x64	; 100
      c6:	91 e0       	ldi	r25, 0x01	; 1
      c8:	63 e0       	ldi	r22, 0x03	; 3
      ca:	0e 94 4f 04 	call	0x89e	; 0x89e <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task5,  0);
      ce:	87 e3       	ldi	r24, 0x37	; 55
      d0:	91 e0       	ldi	r25, 0x01	; 1
      d2:	60 e0       	ldi	r22, 0x00	; 0
      d4:	0e 94 4f 04 	call	0x89e	; 0x89e <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task6,  6);
      d8:	8a e0       	ldi	r24, 0x0A	; 10
      da:	91 e0       	ldi	r25, 0x01	; 1
      dc:	66 e0       	ldi	r22, 0x06	; 6
      de:	0e 94 4f 04 	call	0x89e	; 0x89e <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task7,  4);
      e2:	8d ed       	ldi	r24, 0xDD	; 221
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	64 e0       	ldi	r22, 0x04	; 4
      e8:	0e 94 4f 04 	call	0x89e	; 0x89e <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task8,  8);
      ec:	80 eb       	ldi	r24, 0xB0	; 176
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	68 e0       	ldi	r22, 0x08	; 8
      f2:	0e 94 4f 04 	call	0x89e	; 0x89e <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task9,  7);
      f6:	83 e8       	ldi	r24, 0x83	; 131
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	67 e0       	ldi	r22, 0x07	; 7
      fc:	0e 94 4f 04 	call	0x89e	; 0x89e <Kernel_Task_Create>
	
	Kernel_Start_Tasks();
     100:	0e 94 c7 04 	call	0x98e	; 0x98e <Kernel_Start_Tasks>
     104:	ff cf       	rjmp	.-2      	; 0x104 <SRUDR0+0x3e>

00000106 <Tasks_Task9>:
  }
}

void Tasks_Task9(void){
  
  Debug_Init(0);
     106:	80 e0       	ldi	r24, 0x00	; 0
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	0e 94 a2 07 	call	0xf44	; 0xf44 <Debug_Init>
  
  while(1){

    Kernel_Task_Constant_Latency(3000);
     10e:	88 eb       	ldi	r24, 0xB8	; 184
     110:	9b e0       	ldi	r25, 0x0B	; 11
     112:	0e 94 a1 06 	call	0xd42	; 0xd42 <Kernel_Task_Constant_Latency>
    
	  Debug_Tx_Byte(9);
     116:	89 e0       	ldi	r24, 0x09	; 9
     118:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
     11c:	81 e0       	ldi	r24, 0x01	; 1
     11e:	0e 94 78 07 	call	0xef0	; 0xef0 <Kernel_Task_Sleep_Time_Get>
     122:	0e 94 bb 07 	call	0xf76	; 0xf76 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	0e 94 82 07 	call	0xf04	; 0xf04 <Kernel_Task_Status_Get>
     12c:	80 5e       	subi	r24, 0xE0	; 224
     12e:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(9));
     132:	89 e0       	ldi	r24, 0x09	; 9
     134:	0e 94 78 07 	call	0xef0	; 0xef0 <Kernel_Task_Sleep_Time_Get>
     138:	0e 94 bb 07 	call	0xf76	; 0xf76 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(9));
     13c:	89 e0       	ldi	r24, 0x09	; 9
     13e:	0e 94 82 07 	call	0xf04	; 0xf04 <Kernel_Task_Status_Get>
     142:	80 5e       	subi	r24, 0xE0	; 224
     144:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
     148:	0e 94 9c 07 	call	0xf38	; 0xf38 <Kernel_Abs_High_Prio_Task_ID_Get>
     14c:	80 5f       	subi	r24, 0xF0	; 240
     14e:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
     152:	0e 94 95 07 	call	0xf2a	; 0xf2a <Kernel_Lowest_Prio_Get>
     156:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    
    //Kernel_Task_Sleep(90);
    Kernel_Task_Constant_Latency_Sleep();
     15a:	0e 94 b7 06 	call	0xd6e	; 0xd6e <Kernel_Task_Constant_Latency_Sleep>
     15e:	d7 cf       	rjmp	.-82     	; 0x10e <Tasks_Task9+0x8>

00000160 <Tasks_Task8>:
  }
}

void Tasks_Task8(void){
  
  Debug_Init(0);
     160:	80 e0       	ldi	r24, 0x00	; 0
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	0e 94 a2 07 	call	0xf44	; 0xf44 <Debug_Init>
  
  while(1){

    Kernel_Task_Constant_Latency(3000);
     168:	88 eb       	ldi	r24, 0xB8	; 184
     16a:	9b e0       	ldi	r25, 0x0B	; 11
     16c:	0e 94 a1 06 	call	0xd42	; 0xd42 <Kernel_Task_Constant_Latency>
    
	  Debug_Tx_Byte(8);
     170:	88 e0       	ldi	r24, 0x08	; 8
     172:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	0e 94 78 07 	call	0xef0	; 0xef0 <Kernel_Task_Sleep_Time_Get>
     17c:	0e 94 bb 07 	call	0xf76	; 0xf76 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	0e 94 82 07 	call	0xf04	; 0xf04 <Kernel_Task_Status_Get>
     186:	80 5e       	subi	r24, 0xE0	; 224
     188:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(8));
     18c:	88 e0       	ldi	r24, 0x08	; 8
     18e:	0e 94 78 07 	call	0xef0	; 0xef0 <Kernel_Task_Sleep_Time_Get>
     192:	0e 94 bb 07 	call	0xf76	; 0xf76 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(8));
     196:	88 e0       	ldi	r24, 0x08	; 8
     198:	0e 94 82 07 	call	0xf04	; 0xf04 <Kernel_Task_Status_Get>
     19c:	80 5e       	subi	r24, 0xE0	; 224
     19e:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
     1a2:	0e 94 9c 07 	call	0xf38	; 0xf38 <Kernel_Abs_High_Prio_Task_ID_Get>
     1a6:	80 5f       	subi	r24, 0xF0	; 240
     1a8:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
     1ac:	0e 94 95 07 	call	0xf2a	; 0xf2a <Kernel_Lowest_Prio_Get>
     1b0:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    
    //Kernel_Task_Sleep(80);
    Kernel_Task_Constant_Latency_Sleep();
     1b4:	0e 94 b7 06 	call	0xd6e	; 0xd6e <Kernel_Task_Constant_Latency_Sleep>
     1b8:	d7 cf       	rjmp	.-82     	; 0x168 <Tasks_Task8+0x8>

000001ba <Tasks_Task7>:
  }
}

void Tasks_Task7(void){
  
  Debug_Init(0);
     1ba:	80 e0       	ldi	r24, 0x00	; 0
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	0e 94 a2 07 	call	0xf44	; 0xf44 <Debug_Init>
  
  while(1){

    Kernel_Task_Constant_Latency(3000);
     1c2:	88 eb       	ldi	r24, 0xB8	; 184
     1c4:	9b e0       	ldi	r25, 0x0B	; 11
     1c6:	0e 94 a1 06 	call	0xd42	; 0xd42 <Kernel_Task_Constant_Latency>
    
	  Debug_Tx_Byte(7);
     1ca:	87 e0       	ldi	r24, 0x07	; 7
     1cc:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	0e 94 78 07 	call	0xef0	; 0xef0 <Kernel_Task_Sleep_Time_Get>
     1d6:	0e 94 bb 07 	call	0xf76	; 0xf76 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	0e 94 82 07 	call	0xf04	; 0xf04 <Kernel_Task_Status_Get>
     1e0:	80 5e       	subi	r24, 0xE0	; 224
     1e2:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(7));
     1e6:	87 e0       	ldi	r24, 0x07	; 7
     1e8:	0e 94 78 07 	call	0xef0	; 0xef0 <Kernel_Task_Sleep_Time_Get>
     1ec:	0e 94 bb 07 	call	0xf76	; 0xf76 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(7));
     1f0:	87 e0       	ldi	r24, 0x07	; 7
     1f2:	0e 94 82 07 	call	0xf04	; 0xf04 <Kernel_Task_Status_Get>
     1f6:	80 5e       	subi	r24, 0xE0	; 224
     1f8:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
     1fc:	0e 94 9c 07 	call	0xf38	; 0xf38 <Kernel_Abs_High_Prio_Task_ID_Get>
     200:	80 5f       	subi	r24, 0xF0	; 240
     202:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
     206:	0e 94 95 07 	call	0xf2a	; 0xf2a <Kernel_Lowest_Prio_Get>
     20a:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    
    //Kernel_Task_Sleep(70);
    Kernel_Task_Constant_Latency_Sleep();
     20e:	0e 94 b7 06 	call	0xd6e	; 0xd6e <Kernel_Task_Constant_Latency_Sleep>
     212:	d7 cf       	rjmp	.-82     	; 0x1c2 <Tasks_Task7+0x8>

00000214 <Tasks_Task6>:
  }
}

void Tasks_Task6(void){
  
  Debug_Init(0);
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 a2 07 	call	0xf44	; 0xf44 <Debug_Init>
  
  while(1){

    Kernel_Task_Constant_Latency(3000);
     21c:	88 eb       	ldi	r24, 0xB8	; 184
     21e:	9b e0       	ldi	r25, 0x0B	; 11
     220:	0e 94 a1 06 	call	0xd42	; 0xd42 <Kernel_Task_Constant_Latency>
    
    Debug_Tx_Byte(6);
     224:	86 e0       	ldi	r24, 0x06	; 6
     226:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	0e 94 78 07 	call	0xef0	; 0xef0 <Kernel_Task_Sleep_Time_Get>
     230:	0e 94 bb 07 	call	0xf76	; 0xf76 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	0e 94 82 07 	call	0xf04	; 0xf04 <Kernel_Task_Status_Get>
     23a:	80 5e       	subi	r24, 0xE0	; 224
     23c:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(6));
     240:	86 e0       	ldi	r24, 0x06	; 6
     242:	0e 94 78 07 	call	0xef0	; 0xef0 <Kernel_Task_Sleep_Time_Get>
     246:	0e 94 bb 07 	call	0xf76	; 0xf76 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(6));
     24a:	86 e0       	ldi	r24, 0x06	; 6
     24c:	0e 94 82 07 	call	0xf04	; 0xf04 <Kernel_Task_Status_Get>
     250:	80 5e       	subi	r24, 0xE0	; 224
     252:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
     256:	0e 94 9c 07 	call	0xf38	; 0xf38 <Kernel_Abs_High_Prio_Task_ID_Get>
     25a:	80 5f       	subi	r24, 0xF0	; 240
     25c:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
     260:	0e 94 95 07 	call	0xf2a	; 0xf2a <Kernel_Lowest_Prio_Get>
     264:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    
    //Kernel_Task_Sleep(60);
    Kernel_Task_Constant_Latency_Sleep();
     268:	0e 94 b7 06 	call	0xd6e	; 0xd6e <Kernel_Task_Constant_Latency_Sleep>
     26c:	d7 cf       	rjmp	.-82     	; 0x21c <Tasks_Task6+0x8>

0000026e <Tasks_Task5>:

void Tasks_Task5(void){
  
  //DDRC |= (1<<5);

  Debug_Init(0);
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	0e 94 a2 07 	call	0xf44	; 0xf44 <Debug_Init>
  
  while(1){

    Kernel_Task_Constant_Latency(3000);
     276:	88 eb       	ldi	r24, 0xB8	; 184
     278:	9b e0       	ldi	r25, 0x0B	; 11
     27a:	0e 94 a1 06 	call	0xd42	; 0xd42 <Kernel_Task_Constant_Latency>
    
    //PORTC ^= (1<<5);

	  Debug_Tx_Byte(5);
     27e:	85 e0       	ldi	r24, 0x05	; 5
     280:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	0e 94 78 07 	call	0xef0	; 0xef0 <Kernel_Task_Sleep_Time_Get>
     28a:	0e 94 bb 07 	call	0xf76	; 0xf76 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	0e 94 82 07 	call	0xf04	; 0xf04 <Kernel_Task_Status_Get>
     294:	80 5e       	subi	r24, 0xE0	; 224
     296:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(5));
     29a:	85 e0       	ldi	r24, 0x05	; 5
     29c:	0e 94 78 07 	call	0xef0	; 0xef0 <Kernel_Task_Sleep_Time_Get>
     2a0:	0e 94 bb 07 	call	0xf76	; 0xf76 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(5));
     2a4:	85 e0       	ldi	r24, 0x05	; 5
     2a6:	0e 94 82 07 	call	0xf04	; 0xf04 <Kernel_Task_Status_Get>
     2aa:	80 5e       	subi	r24, 0xE0	; 224
     2ac:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
     2b0:	0e 94 9c 07 	call	0xf38	; 0xf38 <Kernel_Abs_High_Prio_Task_ID_Get>
     2b4:	80 5f       	subi	r24, 0xF0	; 240
     2b6:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
     2ba:	0e 94 95 07 	call	0xf2a	; 0xf2a <Kernel_Lowest_Prio_Get>
     2be:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    
    //Kernel_Task_Sleep(50);
    Kernel_Task_Constant_Latency_Sleep();
     2c2:	0e 94 b7 06 	call	0xd6e	; 0xd6e <Kernel_Task_Constant_Latency_Sleep>
     2c6:	d7 cf       	rjmp	.-82     	; 0x276 <Tasks_Task5+0x8>

000002c8 <Tasks_Task4>:

void Tasks_Task4(void){
  
  //DDRC |= (1<<4);

  Debug_Init(0);
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	0e 94 a2 07 	call	0xf44	; 0xf44 <Debug_Init>
  
  while(1){
    
    Kernel_Task_Constant_Latency(3000);
     2d0:	88 eb       	ldi	r24, 0xB8	; 184
     2d2:	9b e0       	ldi	r25, 0x0B	; 11
     2d4:	0e 94 a1 06 	call	0xd42	; 0xd42 <Kernel_Task_Constant_Latency>

    //PORTC ^= (1<<4);

	  Debug_Tx_Byte(4);
     2d8:	84 e0       	ldi	r24, 0x04	; 4
     2da:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	0e 94 78 07 	call	0xef0	; 0xef0 <Kernel_Task_Sleep_Time_Get>
     2e4:	0e 94 bb 07 	call	0xf76	; 0xf76 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	0e 94 82 07 	call	0xf04	; 0xf04 <Kernel_Task_Status_Get>
     2ee:	80 5e       	subi	r24, 0xE0	; 224
     2f0:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(4));
     2f4:	84 e0       	ldi	r24, 0x04	; 4
     2f6:	0e 94 78 07 	call	0xef0	; 0xef0 <Kernel_Task_Sleep_Time_Get>
     2fa:	0e 94 bb 07 	call	0xf76	; 0xf76 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(4));
     2fe:	84 e0       	ldi	r24, 0x04	; 4
     300:	0e 94 82 07 	call	0xf04	; 0xf04 <Kernel_Task_Status_Get>
     304:	80 5e       	subi	r24, 0xE0	; 224
     306:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
     30a:	0e 94 9c 07 	call	0xf38	; 0xf38 <Kernel_Abs_High_Prio_Task_ID_Get>
     30e:	80 5f       	subi	r24, 0xF0	; 240
     310:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
     314:	0e 94 95 07 	call	0xf2a	; 0xf2a <Kernel_Lowest_Prio_Get>
     318:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    
    //Kernel_Task_Sleep(40);
    Kernel_Task_Constant_Latency_Sleep();
     31c:	0e 94 b7 06 	call	0xd6e	; 0xd6e <Kernel_Task_Constant_Latency_Sleep>
     320:	d7 cf       	rjmp	.-82     	; 0x2d0 <Tasks_Task4+0x8>

00000322 <Tasks_Task3>:

void Tasks_Task3(void){
  
  //DDRC |= (1<<3);

  Debug_Init(0);
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	0e 94 a2 07 	call	0xf44	; 0xf44 <Debug_Init>
  
  while(1){
    
    Kernel_Task_Constant_Latency(3000);
     32a:	88 eb       	ldi	r24, 0xB8	; 184
     32c:	9b e0       	ldi	r25, 0x0B	; 11
     32e:	0e 94 a1 06 	call	0xd42	; 0xd42 <Kernel_Task_Constant_Latency>

    //PORTC ^= (1<<3);

	  Debug_Tx_Byte(3);
     332:	83 e0       	ldi	r24, 0x03	; 3
     334:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	0e 94 78 07 	call	0xef0	; 0xef0 <Kernel_Task_Sleep_Time_Get>
     33e:	0e 94 bb 07 	call	0xf76	; 0xf76 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	0e 94 82 07 	call	0xf04	; 0xf04 <Kernel_Task_Status_Get>
     348:	80 5e       	subi	r24, 0xE0	; 224
     34a:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(3));
     34e:	83 e0       	ldi	r24, 0x03	; 3
     350:	0e 94 78 07 	call	0xef0	; 0xef0 <Kernel_Task_Sleep_Time_Get>
     354:	0e 94 bb 07 	call	0xf76	; 0xf76 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(3));
     358:	83 e0       	ldi	r24, 0x03	; 3
     35a:	0e 94 82 07 	call	0xf04	; 0xf04 <Kernel_Task_Status_Get>
     35e:	80 5e       	subi	r24, 0xE0	; 224
     360:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
     364:	0e 94 9c 07 	call	0xf38	; 0xf38 <Kernel_Abs_High_Prio_Task_ID_Get>
     368:	80 5f       	subi	r24, 0xF0	; 240
     36a:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
     36e:	0e 94 95 07 	call	0xf2a	; 0xf2a <Kernel_Lowest_Prio_Get>
     372:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    
    //Kernel_Task_Sleep(30);
    Kernel_Task_Constant_Latency_Sleep();
     376:	0e 94 b7 06 	call	0xd6e	; 0xd6e <Kernel_Task_Constant_Latency_Sleep>
     37a:	d7 cf       	rjmp	.-82     	; 0x32a <Tasks_Task3+0x8>

0000037c <Tasks_Task2>:

void Tasks_Task2(void){
  
  //DDRC |= (1<<2);

  Debug_Init(0);
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	0e 94 a2 07 	call	0xf44	; 0xf44 <Debug_Init>
  
  while(1){
    
    Kernel_Task_Constant_Latency(3000);
     384:	88 eb       	ldi	r24, 0xB8	; 184
     386:	9b e0       	ldi	r25, 0x0B	; 11
     388:	0e 94 a1 06 	call	0xd42	; 0xd42 <Kernel_Task_Constant_Latency>

    //PORTC ^= (1<<2);

	  Debug_Tx_Byte(2);
     38c:	82 e0       	ldi	r24, 0x02	; 2
     38e:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	0e 94 78 07 	call	0xef0	; 0xef0 <Kernel_Task_Sleep_Time_Get>
     398:	0e 94 bb 07 	call	0xf76	; 0xf76 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	0e 94 82 07 	call	0xf04	; 0xf04 <Kernel_Task_Status_Get>
     3a2:	80 5e       	subi	r24, 0xE0	; 224
     3a4:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(2));
     3a8:	82 e0       	ldi	r24, 0x02	; 2
     3aa:	0e 94 78 07 	call	0xef0	; 0xef0 <Kernel_Task_Sleep_Time_Get>
     3ae:	0e 94 bb 07 	call	0xf76	; 0xf76 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(2));
     3b2:	82 e0       	ldi	r24, 0x02	; 2
     3b4:	0e 94 82 07 	call	0xf04	; 0xf04 <Kernel_Task_Status_Get>
     3b8:	80 5e       	subi	r24, 0xE0	; 224
     3ba:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
     3be:	0e 94 9c 07 	call	0xf38	; 0xf38 <Kernel_Abs_High_Prio_Task_ID_Get>
     3c2:	80 5f       	subi	r24, 0xF0	; 240
     3c4:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
     3c8:	0e 94 95 07 	call	0xf2a	; 0xf2a <Kernel_Lowest_Prio_Get>
     3cc:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>

    //Kernel_Task_Sleep(20);
    Kernel_Task_Constant_Latency_Sleep();
     3d0:	0e 94 b7 06 	call	0xd6e	; 0xd6e <Kernel_Task_Constant_Latency_Sleep>
     3d4:	d7 cf       	rjmp	.-82     	; 0x384 <Tasks_Task2+0x8>

000003d6 <Tasks_Task1>:
#include <util/delay.h>
#include "kernel.h"
#include "tasks.h"
#include "debug.h"

void Tasks_Task1(void){
     3d6:	1f 93       	push	r17
  
  //turn off HDC1080 VDD
  DDRD |= (1<<2);
     3d8:	52 9a       	sbi	0x0a, 2	; 10
  PORTD&=~(1<<2);
     3da:	5a 98       	cbi	0x0b, 2	; 11
  
  //Logic low to SCL & SDA
  DDRC |= (1<<4)|(1<<5);
     3dc:	87 b1       	in	r24, 0x07	; 7
     3de:	80 63       	ori	r24, 0x30	; 48
     3e0:	87 b9       	out	0x07, r24	; 7
  PORTC&=~((1<<4)|(1<<5));
     3e2:	88 b1       	in	r24, 0x08	; 8
     3e4:	8f 7c       	andi	r24, 0xCF	; 207
     3e6:	88 b9       	out	0x08, r24	; 8
  //PORTD&=~(1<<4);

  //DDRC |= (1<<1);


  Debug_Init(0);
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	0e 94 a2 07 	call	0xf44	; 0xf44 <Debug_Init>
    Debug_Tx_Byte(TCCR2B);
    Debug_Tx_Byte(TCNT2);
    Debug_Tx_Byte(TIMSK2);
    Debug_Tx_Byte(TIFR2);
    Debug_Tx_Byte(ASSR);*/
    Kernel_Task_Constant_Latency(60000/KER_TICK_TIME);
     3f0:	88 e5       	ldi	r24, 0x58	; 88
     3f2:	92 e0       	ldi	r25, 0x02	; 2
     3f4:	0e 94 a1 06 	call	0xd42	; 0xd42 <Kernel_Task_Constant_Latency>

    //PORTC ^= (1<<1);
    
    //LED on
    PORTD|= (1<<4);
     3f8:	5c 9a       	sbi	0x0b, 4	; 11

	  Debug_Tx_Byte(1);
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	0e 94 78 07 	call	0xef0	; 0xef0 <Kernel_Task_Sleep_Time_Get>
     406:	0e 94 bb 07 	call	0xf76	; 0xf76 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	0e 94 82 07 	call	0xf04	; 0xf04 <Kernel_Task_Status_Get>
     410:	80 5e       	subi	r24, 0xE0	; 224
     412:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
     416:	0e 94 9c 07 	call	0xf38	; 0xf38 <Kernel_Abs_High_Prio_Task_ID_Get>
     41a:	80 5f       	subi	r24, 0xF0	; 240
     41c:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
     420:	0e 94 95 07 	call	0xf2a	; 0xf2a <Kernel_Lowest_Prio_Get>
     424:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
     428:	10 e0       	ldi	r17, 0x00	; 0
    for(uint8_t i=0;i<200;i++){
      Debug_Tx_Byte(i);
     42a:	81 2f       	mov	r24, r17
     42c:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
	  Debug_Tx_Byte(1);
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
    for(uint8_t i=0;i<200;i++){
     430:	1f 5f       	subi	r17, 0xFF	; 255
     432:	18 3c       	cpi	r17, 0xC8	; 200
     434:	d1 f7       	brne	.-12     	; 0x42a <KER_TR+0x42>
      Debug_Tx_Byte(i);
    }

    //LED off
    PORTD&=~(1<<4);
     436:	5c 98       	cbi	0x0b, 4	; 11

    //Kernel_Task_Sleep(10);
    Kernel_Task_Constant_Latency_Sleep();
     438:	0e 94 b7 06 	call	0xd6e	; 0xd6e <Kernel_Task_Constant_Latency_Sleep>
     43c:	d9 cf       	rjmp	.-78     	; 0x3f0 <KER_TR+0x8>

0000043e <__vector_7>:
#endif                                                                                         

#ifdef  KER_TOSC_AS_TICK_SRC                                                                   
.global  __vector_7                                                                            
    __vector_7:                                           ;total 40.00uS @8MHz    (344 clocks) 
	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
     43e:	5d 9a       	sbi	0x0b, 5	; 11
		KER_EXIT_SLEEP                                    ;exit sleep if enabled  (  5 clocks) 
     440:	20 91 53 00 	lds	r18, 0x0053
     444:	2e 7f       	andi	r18, 0xFE	; 254
     446:	20 93 53 00 	sts	0x0053, r18
        KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
     44a:	0f 92       	push	r0
     44c:	0f b6       	in	r0, 0x3f	; 63
     44e:	0f 92       	push	r0
     450:	1f 92       	push	r1
     452:	11 24       	eor	r1, r1
     454:	2f 92       	push	r2
     456:	3f 92       	push	r3
     458:	4f 92       	push	r4
     45a:	5f 92       	push	r5
     45c:	6f 92       	push	r6
     45e:	7f 92       	push	r7
     460:	8f 92       	push	r8
     462:	9f 92       	push	r9
     464:	af 92       	push	r10
     466:	bf 92       	push	r11
     468:	cf 92       	push	r12
     46a:	df 92       	push	r13
     46c:	ef 92       	push	r14
     46e:	ff 92       	push	r15
     470:	0f 93       	push	r16
     472:	1f 93       	push	r17
     474:	2f 93       	push	r18
     476:	3f 93       	push	r19
     478:	4f 93       	push	r20
     47a:	5f 93       	push	r21
     47c:	6f 93       	push	r22
     47e:	7f 93       	push	r23
     480:	8f 93       	push	r24
     482:	9f 93       	push	r25
     484:	af 93       	push	r26
     486:	bf 93       	push	r27
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	ef 93       	push	r30
     48e:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
     490:	e0 e1       	ldi	r30, 0x10	; 16
     492:	f1 e0       	ldi	r31, 0x01	; 1
     494:	20 91 07 01 	lds	r18, 0x0107
     498:	22 0f       	add	r18, r18
     49a:	e2 0f       	add	r30, r18
     49c:	20 e0       	ldi	r18, 0x00	; 0
     49e:	f2 1f       	adc	r31, r18
     4a0:	2d b7       	in	r18, 0x3d	; 61
     4a2:	3e b7       	in	r19, 0x3e	; 62
     4a4:	20 83       	st	Z, r18
     4a6:	31 83       	std	Z+1, r19	; 0x01
		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
     4a8:	20 91 06 01 	lds	r18, 0x0106
     4ac:	20 93 46 00 	sts	0x0046, r18
		KER_TICK_INCREMENT                                ;increment tick counter ( 26 clocks) 
     4b0:	20 91 00 01 	lds	r18, 0x0100
     4b4:	23 95       	inc	r18
     4b6:	20 93 00 01 	sts	0x0100, r18
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	20 91 01 01 	lds	r18, 0x0101
     4c0:	23 1f       	adc	r18, r19
     4c2:	20 93 01 01 	sts	0x0101, r18
     4c6:	20 91 02 01 	lds	r18, 0x0102
     4ca:	23 1f       	adc	r18, r19
     4cc:	20 93 02 01 	sts	0x0102, r18
     4d0:	20 91 03 01 	lds	r18, 0x0103
     4d4:	23 1f       	adc	r18, r19
     4d6:	20 93 03 01 	sts	0x0103, r18
     4da:	20 91 04 01 	lds	r18, 0x0104
     4de:	23 1f       	adc	r18, r19
     4e0:	20 93 04 01 	sts	0x0104, r18
		LDI    R24               , SCH_MODE_HANDLER       ;set sch mode           (  1 clock ) 
     4e4:	80 e0       	ldi	r24, 0x00	; 0
		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
     4e6:	2f ef       	ldi	r18, 0xFF	; 255
     4e8:	20 93 09 01 	sts	0x0109, r18
     4ec:	20 e0       	ldi	r18, 0x00	; 0
     4ee:	20 93 0a 01 	sts	0x010A, r18
     4f2:	58 2f       	mov	r21, r24

000004f4 <_KER_SCH_LOOP9>:
     4f4:	20 93 07 01 	sts	0x0107, r18
     4f8:	85 2f       	mov	r24, r21
     4fa:	e6 e4       	ldi	r30, 0x46	; 70
     4fc:	f1 e0       	ldi	r31, 0x01	; 1
     4fe:	20 91 07 01 	lds	r18, 0x0107
     502:	22 0f       	add	r18, r18
     504:	e2 0f       	add	r30, r18
     506:	20 e0       	ldi	r18, 0x00	; 0
     508:	f2 1f       	adc	r31, r18
     50a:	20 81       	ld	r18, Z
     50c:	31 81       	ldd	r19, Z+1	; 0x01
     50e:	42 2f       	mov	r20, r18
     510:	43 2b       	or	r20, r19
     512:	59 f0       	breq	.+22     	; 0x52a <_VAL_NULL10>
     514:	81 30       	cpi	r24, 0x01	; 1
     516:	99 f0       	breq	.+38     	; 0x53e <_VAL_NOT_NULL10>
     518:	41 e0       	ldi	r20, 0x01	; 1
     51a:	24 1b       	sub	r18, r20
     51c:	40 e0       	ldi	r20, 0x00	; 0
     51e:	34 0b       	sbc	r19, r20
     520:	20 83       	st	Z, r18
     522:	31 83       	std	Z+1, r19	; 0x01
     524:	42 2f       	mov	r20, r18
     526:	43 2b       	or	r20, r19
     528:	51 f4       	brne	.+20     	; 0x53e <_VAL_NOT_NULL10>

0000052a <_VAL_NULL10>:
     52a:	e2 e3       	ldi	r30, 0x32	; 50
     52c:	f1 e0       	ldi	r31, 0x01	; 1
     52e:	20 91 07 01 	lds	r18, 0x0107
     532:	e2 0f       	add	r30, r18
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	f2 1f       	adc	r31, r18
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	80 83       	st	Z, r24
     53c:	08 c0       	rjmp	.+16     	; 0x54e <_EXIT_SLP_TIME10>

0000053e <_VAL_NOT_NULL10>:
     53e:	e2 e3       	ldi	r30, 0x32	; 50
     540:	f1 e0       	ldi	r31, 0x01	; 1
     542:	20 91 07 01 	lds	r18, 0x0107
     546:	e2 0f       	add	r30, r18
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	f2 1f       	adc	r31, r18
     54c:	80 81       	ld	r24, Z

0000054e <_EXIT_SLP_TIME10>:
     54e:	81 30       	cpi	r24, 0x01	; 1
     550:	19 f0       	breq	.+6      	; 0x558 <_KER_CALC_PRIO9>
     552:	84 30       	cpi	r24, 0x04	; 4
     554:	09 f0       	breq	.+2      	; 0x558 <_KER_CALC_PRIO9>
     556:	12 c0       	rjmp	.+36     	; 0x57c <_KER_SCH_NEXT9>

00000558 <_KER_CALC_PRIO9>:
     558:	ec e3       	ldi	r30, 0x3C	; 60
     55a:	f1 e0       	ldi	r31, 0x01	; 1
     55c:	20 e0       	ldi	r18, 0x00	; 0
     55e:	80 91 07 01 	lds	r24, 0x0107
     562:	e8 0f       	add	r30, r24
     564:	f2 1f       	adc	r31, r18
     566:	80 81       	ld	r24, Z
     568:	20 91 09 01 	lds	r18, 0x0109
     56c:	82 17       	cp	r24, r18
     56e:	30 f4       	brcc	.+12     	; 0x57c <_KER_SCH_NEXT9>
     570:	80 93 09 01 	sts	0x0109, r24
     574:	20 91 07 01 	lds	r18, 0x0107
     578:	20 93 0a 01 	sts	0x010A, r18

0000057c <_KER_SCH_NEXT9>:
     57c:	20 91 07 01 	lds	r18, 0x0107
     580:	23 95       	inc	r18
     582:	30 91 08 01 	lds	r19, 0x0108
     586:	23 17       	cp	r18, r19
     588:	08 f4       	brcc	.+2      	; 0x58c <_KER_SCH_EXIT9>
     58a:	b4 cf       	rjmp	.-152    	; 0x4f4 <_KER_SCH_LOOP9>

0000058c <_KER_SCH_EXIT9>:
     58c:	20 91 0a 01 	lds	r18, 0x010A
     590:	20 93 07 01 	sts	0x0107, r18
		KER_CPU_USAGE                                     ;calc cpu usage         ( 26 clocks) 
     594:	20 91 07 01 	lds	r18, 0x0107
     598:	22 23       	and	r18, r18
     59a:	29 f0       	breq	.+10     	; 0x5a6 <_KER_USG_TICK15>
     59c:	20 91 0c 01 	lds	r18, 0x010C
     5a0:	23 95       	inc	r18
     5a2:	20 93 0c 01 	sts	0x010C, r18

000005a6 <_KER_USG_TICK15>:
     5a6:	20 91 0b 01 	lds	r18, 0x010B
     5aa:	23 95       	inc	r18
     5ac:	24 36       	cpi	r18, 0x64	; 100
     5ae:	40 f0       	brcs	.+16     	; 0x5c0 <_KER_USG_UTC_SV15>
     5b0:	20 e0       	ldi	r18, 0x00	; 0
     5b2:	30 91 0c 01 	lds	r19, 0x010C
     5b6:	30 93 0d 01 	sts	0x010D, r19
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	30 93 0c 01 	sts	0x010C, r19

000005c0 <_KER_USG_UTC_SV15>:
     5c0:	20 93 0b 01 	sts	0x010B, r18
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
     5c4:	e0 e1       	ldi	r30, 0x10	; 16
     5c6:	f1 e0       	ldi	r31, 0x01	; 1
     5c8:	20 91 07 01 	lds	r18, 0x0107
     5cc:	22 0f       	add	r18, r18
     5ce:	e2 0f       	add	r30, r18
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	f2 1f       	adc	r31, r18
     5d4:	20 81       	ld	r18, Z
     5d6:	31 81       	ldd	r19, Z+1	; 0x01
     5d8:	2d bf       	out	0x3d, r18	; 61
     5da:	3e bf       	out	0x3e, r19	; 62
		KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
     5dc:	ff 91       	pop	r31
     5de:	ef 91       	pop	r30
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	bf 91       	pop	r27
     5e6:	af 91       	pop	r26
     5e8:	9f 91       	pop	r25
     5ea:	8f 91       	pop	r24
     5ec:	7f 91       	pop	r23
     5ee:	6f 91       	pop	r22
     5f0:	5f 91       	pop	r21
     5f2:	4f 91       	pop	r20
     5f4:	3f 91       	pop	r19
     5f6:	2f 91       	pop	r18
     5f8:	1f 91       	pop	r17
     5fa:	0f 91       	pop	r16
     5fc:	ff 90       	pop	r15
     5fe:	ef 90       	pop	r14
     600:	df 90       	pop	r13
     602:	cf 90       	pop	r12
     604:	bf 90       	pop	r11
     606:	af 90       	pop	r10
     608:	9f 90       	pop	r9
     60a:	8f 90       	pop	r8
     60c:	7f 90       	pop	r7
     60e:	6f 90       	pop	r6
     610:	5f 90       	pop	r5
     612:	4f 90       	pop	r4
     614:	3f 90       	pop	r3
     616:	2f 90       	pop	r2
     618:	1f 90       	pop	r1
     61a:	0f 90       	pop	r0
     61c:	0f be       	out	0x3f, r0	; 63
     61e:	0f 90       	pop	r0
	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
     620:	5d 98       	cbi	0x0b, 5	; 11
		RETI                                              ;return from interrupt  (  4 clocks) 
     622:	18 95       	reti

00000624 <__vector_9>:
.global  __vector_9                                                                            
    __vector_9:                                           ;total 40.00uS @8MHz    (344 clocks) 
	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
     624:	5d 9a       	sbi	0x0b, 5	; 11
		KER_EXIT_SLEEP                                    ;exit sleep if enabled  (  5 clocks) 
     626:	20 91 53 00 	lds	r18, 0x0053
     62a:	2e 7f       	andi	r18, 0xFE	; 254
     62c:	20 93 53 00 	sts	0x0053, r18
        KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
     630:	0f 92       	push	r0
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	0f 92       	push	r0
     636:	1f 92       	push	r1
     638:	11 24       	eor	r1, r1
     63a:	2f 92       	push	r2
     63c:	3f 92       	push	r3
     63e:	4f 92       	push	r4
     640:	5f 92       	push	r5
     642:	6f 92       	push	r6
     644:	7f 92       	push	r7
     646:	8f 92       	push	r8
     648:	9f 92       	push	r9
     64a:	af 92       	push	r10
     64c:	bf 92       	push	r11
     64e:	cf 92       	push	r12
     650:	df 92       	push	r13
     652:	ef 92       	push	r14
     654:	ff 92       	push	r15
     656:	0f 93       	push	r16
     658:	1f 93       	push	r17
     65a:	2f 93       	push	r18
     65c:	3f 93       	push	r19
     65e:	4f 93       	push	r20
     660:	5f 93       	push	r21
     662:	6f 93       	push	r22
     664:	7f 93       	push	r23
     666:	8f 93       	push	r24
     668:	9f 93       	push	r25
     66a:	af 93       	push	r26
     66c:	bf 93       	push	r27
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	ef 93       	push	r30
     674:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
     676:	e0 e1       	ldi	r30, 0x10	; 16
     678:	f1 e0       	ldi	r31, 0x01	; 1
     67a:	20 91 07 01 	lds	r18, 0x0107
     67e:	22 0f       	add	r18, r18
     680:	e2 0f       	add	r30, r18
     682:	20 e0       	ldi	r18, 0x00	; 0
     684:	f2 1f       	adc	r31, r18
     686:	2d b7       	in	r18, 0x3d	; 61
     688:	3e b7       	in	r19, 0x3e	; 62
     68a:	20 83       	st	Z, r18
     68c:	31 83       	std	Z+1, r19	; 0x01
		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
     68e:	20 91 06 01 	lds	r18, 0x0106
     692:	20 93 46 00 	sts	0x0046, r18
		KER_TICK_INCREMENT                                ;increment tick counter ( 26 clocks) 
     696:	20 91 00 01 	lds	r18, 0x0100
     69a:	23 95       	inc	r18
     69c:	20 93 00 01 	sts	0x0100, r18
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	20 91 01 01 	lds	r18, 0x0101
     6a6:	23 1f       	adc	r18, r19
     6a8:	20 93 01 01 	sts	0x0101, r18
     6ac:	20 91 02 01 	lds	r18, 0x0102
     6b0:	23 1f       	adc	r18, r19
     6b2:	20 93 02 01 	sts	0x0102, r18
     6b6:	20 91 03 01 	lds	r18, 0x0103
     6ba:	23 1f       	adc	r18, r19
     6bc:	20 93 03 01 	sts	0x0103, r18
     6c0:	20 91 04 01 	lds	r18, 0x0104
     6c4:	23 1f       	adc	r18, r19
     6c6:	20 93 04 01 	sts	0x0104, r18
		LDI    R24               , SCH_MODE_HANDLER       ;set sch mode           (  1 clock ) 
     6ca:	80 e0       	ldi	r24, 0x00	; 0
		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
     6cc:	2f ef       	ldi	r18, 0xFF	; 255
     6ce:	20 93 09 01 	sts	0x0109, r18
     6d2:	20 e0       	ldi	r18, 0x00	; 0
     6d4:	20 93 0a 01 	sts	0x010A, r18
     6d8:	58 2f       	mov	r21, r24

000006da <_KER_SCH_LOOP31>:
     6da:	20 93 07 01 	sts	0x0107, r18
     6de:	85 2f       	mov	r24, r21
     6e0:	e6 e4       	ldi	r30, 0x46	; 70
     6e2:	f1 e0       	ldi	r31, 0x01	; 1
     6e4:	20 91 07 01 	lds	r18, 0x0107
     6e8:	22 0f       	add	r18, r18
     6ea:	e2 0f       	add	r30, r18
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	f2 1f       	adc	r31, r18
     6f0:	20 81       	ld	r18, Z
     6f2:	31 81       	ldd	r19, Z+1	; 0x01
     6f4:	42 2f       	mov	r20, r18
     6f6:	43 2b       	or	r20, r19
     6f8:	59 f0       	breq	.+22     	; 0x710 <_VAL_NULL32>
     6fa:	81 30       	cpi	r24, 0x01	; 1
     6fc:	99 f0       	breq	.+38     	; 0x724 <_VAL_NOT_NULL32>
     6fe:	41 e0       	ldi	r20, 0x01	; 1
     700:	24 1b       	sub	r18, r20
     702:	40 e0       	ldi	r20, 0x00	; 0
     704:	34 0b       	sbc	r19, r20
     706:	20 83       	st	Z, r18
     708:	31 83       	std	Z+1, r19	; 0x01
     70a:	42 2f       	mov	r20, r18
     70c:	43 2b       	or	r20, r19
     70e:	51 f4       	brne	.+20     	; 0x724 <_VAL_NOT_NULL32>

00000710 <_VAL_NULL32>:
     710:	e2 e3       	ldi	r30, 0x32	; 50
     712:	f1 e0       	ldi	r31, 0x01	; 1
     714:	20 91 07 01 	lds	r18, 0x0107
     718:	e2 0f       	add	r30, r18
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	f2 1f       	adc	r31, r18
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	80 83       	st	Z, r24
     722:	08 c0       	rjmp	.+16     	; 0x734 <_EXIT_SLP_TIME32>

00000724 <_VAL_NOT_NULL32>:
     724:	e2 e3       	ldi	r30, 0x32	; 50
     726:	f1 e0       	ldi	r31, 0x01	; 1
     728:	20 91 07 01 	lds	r18, 0x0107
     72c:	e2 0f       	add	r30, r18
     72e:	20 e0       	ldi	r18, 0x00	; 0
     730:	f2 1f       	adc	r31, r18
     732:	80 81       	ld	r24, Z

00000734 <_EXIT_SLP_TIME32>:
     734:	81 30       	cpi	r24, 0x01	; 1
     736:	19 f0       	breq	.+6      	; 0x73e <_KER_CALC_PRIO31>
     738:	84 30       	cpi	r24, 0x04	; 4
     73a:	09 f0       	breq	.+2      	; 0x73e <_KER_CALC_PRIO31>
     73c:	12 c0       	rjmp	.+36     	; 0x762 <_KER_SCH_NEXT31>

0000073e <_KER_CALC_PRIO31>:
     73e:	ec e3       	ldi	r30, 0x3C	; 60
     740:	f1 e0       	ldi	r31, 0x01	; 1
     742:	20 e0       	ldi	r18, 0x00	; 0
     744:	80 91 07 01 	lds	r24, 0x0107
     748:	e8 0f       	add	r30, r24
     74a:	f2 1f       	adc	r31, r18
     74c:	80 81       	ld	r24, Z
     74e:	20 91 09 01 	lds	r18, 0x0109
     752:	82 17       	cp	r24, r18
     754:	30 f4       	brcc	.+12     	; 0x762 <_KER_SCH_NEXT31>
     756:	80 93 09 01 	sts	0x0109, r24
     75a:	20 91 07 01 	lds	r18, 0x0107
     75e:	20 93 0a 01 	sts	0x010A, r18

00000762 <_KER_SCH_NEXT31>:
     762:	20 91 07 01 	lds	r18, 0x0107
     766:	23 95       	inc	r18
     768:	30 91 08 01 	lds	r19, 0x0108
     76c:	23 17       	cp	r18, r19
     76e:	08 f4       	brcc	.+2      	; 0x772 <_KER_SCH_EXIT31>
     770:	b4 cf       	rjmp	.-152    	; 0x6da <_KER_SCH_LOOP31>

00000772 <_KER_SCH_EXIT31>:
     772:	20 91 0a 01 	lds	r18, 0x010A
     776:	20 93 07 01 	sts	0x0107, r18
		KER_CPU_USAGE                                     ;calc cpu usage         ( 26 clocks) 
     77a:	20 91 07 01 	lds	r18, 0x0107
     77e:	22 23       	and	r18, r18
     780:	29 f0       	breq	.+10     	; 0x78c <_KER_USG_TICK37>
     782:	20 91 0c 01 	lds	r18, 0x010C
     786:	23 95       	inc	r18
     788:	20 93 0c 01 	sts	0x010C, r18

0000078c <_KER_USG_TICK37>:
     78c:	20 91 0b 01 	lds	r18, 0x010B
     790:	23 95       	inc	r18
     792:	24 36       	cpi	r18, 0x64	; 100
     794:	40 f0       	brcs	.+16     	; 0x7a6 <_KER_USG_UTC_SV37>
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	30 91 0c 01 	lds	r19, 0x010C
     79c:	30 93 0d 01 	sts	0x010D, r19
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	30 93 0c 01 	sts	0x010C, r19

000007a6 <_KER_USG_UTC_SV37>:
     7a6:	20 93 0b 01 	sts	0x010B, r18
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
     7aa:	e0 e1       	ldi	r30, 0x10	; 16
     7ac:	f1 e0       	ldi	r31, 0x01	; 1
     7ae:	20 91 07 01 	lds	r18, 0x0107
     7b2:	22 0f       	add	r18, r18
     7b4:	e2 0f       	add	r30, r18
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	f2 1f       	adc	r31, r18
     7ba:	20 81       	ld	r18, Z
     7bc:	31 81       	ldd	r19, Z+1	; 0x01
     7be:	2d bf       	out	0x3d, r18	; 61
     7c0:	3e bf       	out	0x3e, r19	; 62
		KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
     7c2:	ff 91       	pop	r31
     7c4:	ef 91       	pop	r30
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	bf 91       	pop	r27
     7cc:	af 91       	pop	r26
     7ce:	9f 91       	pop	r25
     7d0:	8f 91       	pop	r24
     7d2:	7f 91       	pop	r23
     7d4:	6f 91       	pop	r22
     7d6:	5f 91       	pop	r21
     7d8:	4f 91       	pop	r20
     7da:	3f 91       	pop	r19
     7dc:	2f 91       	pop	r18
     7de:	1f 91       	pop	r17
     7e0:	0f 91       	pop	r16
     7e2:	ff 90       	pop	r15
     7e4:	ef 90       	pop	r14
     7e6:	df 90       	pop	r13
     7e8:	cf 90       	pop	r12
     7ea:	bf 90       	pop	r11
     7ec:	af 90       	pop	r10
     7ee:	9f 90       	pop	r9
     7f0:	8f 90       	pop	r8
     7f2:	7f 90       	pop	r7
     7f4:	6f 90       	pop	r6
     7f6:	5f 90       	pop	r5
     7f8:	4f 90       	pop	r4
     7fa:	3f 90       	pop	r3
     7fc:	2f 90       	pop	r2
     7fe:	1f 90       	pop	r1
     800:	0f 90       	pop	r0
     802:	0f be       	out	0x3f, r0	; 63
     804:	0f 90       	pop	r0
	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
     806:	5d 98       	cbi	0x0b, 5	; 11
		RETI                                              ;return from interrupt  (  4 clocks) 
     808:	18 95       	reti

0000080a <Kernel_SysTick_Reg_Init>:
;used registers          : R18, R19, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
;arg registers           : R24(Prescaler), R22(ReloadVal)                                      
;return registers        : None                                                                
;unsafe access registers : R18, R19, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
Kernel_SysTick_Reg_Init:                                  ;total 11.50uS @8MHz    ( 92 clocks) 
        CLI                                               ;disable global int     (  1 clock ) 
     80a:	f8 94       	cli
		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
     80c:	5d 98       	cbi	0x0b, 5	; 11
     80e:	55 9a       	sbi	0x0a, 5	; 10
        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
     810:	a0 91 24 01 	lds	r26, 0x0124
     814:	b0 91 25 01 	lds	r27, 0x0125
     818:	2d b7       	in	r18, 0x3d	; 61
     81a:	3e b7       	in	r19, 0x3e	; 62
     81c:	2d 93       	st	X+, r18
     81e:	3d 93       	st	X+, r19
     820:	ed 93       	st	X+, r30
     822:	fd 93       	st	X+, r31
     824:	a0 93 24 01 	sts	0x0124, r26
     828:	b0 93 25 01 	sts	0x0125, r27
		;clear reg                                                                             
		LDI   R18                , 0x00                   ;set 0x00 to R18        (  1 clock ) 
     82c:	20 e0       	ldi	r18, 0x00	; 0
		;clear tick counter                                                                    
		STS   KerBase+OFB_TICK0  , R18                    ;clear  KerBase[0]      (  2 clocks) 
     82e:	20 93 00 01 	sts	0x0100, r18
		STS   KerBase+OFB_TICK1  , R18                    ;clear  KerBase[1]      (  2 clocks) 
     832:	20 93 01 01 	sts	0x0101, r18
		STS   KerBase+OFB_TICK2  , R18                    ;clear  KerBase[2]      (  2 clocks) 
     836:	20 93 02 01 	sts	0x0102, r18
		STS   KerBase+OFB_TICK3  , R18                    ;clear  KerBase[3]      (  2 clocks) 
     83a:	20 93 03 01 	sts	0x0103, r18
		STS   KerBase+OFB_TICK4  , R18                    ;clear  KerBase[4]      (  2 clocks) 
     83e:	20 93 04 01 	sts	0x0104, r18
		;clear system registers                                                                
		STS   KerBase+OFB_PRS    , R18                    ;clear  KerBase[5]      (  2 clocks) 
     842:	20 93 05 01 	sts	0x0105, r18
		STS   KerBase+OFB_RLD    , R18                    ;clear  KerBase[6]      (  2 clocks) 
     846:	20 93 06 01 	sts	0x0106, r18
		STS   KerBase+OFB_TID    , R18                    ;clear  KerBase[7]      (  2 clocks) 
     84a:	20 93 07 01 	sts	0x0107, r18
		STS   KerBase+OFB_NTSK   , R18                    ;clear  KerBase[8]      (  2 clocks) 
     84e:	20 93 08 01 	sts	0x0108, r18
		STS   KerBase+OFB_LPR    , R18                    ;clear  KerBase[9]      (  2 clocks) 
     852:	20 93 09 01 	sts	0x0109, r18
        STS   KerBase+OFB_PTID   , R18                    ;clear  KerBase[10]     (  2 clocks) 
     856:	20 93 0a 01 	sts	0x010A, r18
		STS   KerBase+OFB_UTC    , R18                    ;clear  KerBase[11]     (  2 clocks) 
     85a:	20 93 0b 01 	sts	0x010B, r18
		STS   KerBase+OFB_UATC   , R18                    ;clear  KerBase[12]     (  2 clocks) 
     85e:	20 93 0c 01 	sts	0x010C, r18
		STS   KerBase+OFB_USAGE  , R18                    ;clear  KerBase[13]     (  2 clocks) 
     862:	20 93 0d 01 	sts	0x010D, r18
		STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
		LDI   R18                , 0x00                   ;clear WDE              (  1 clock ) 
		STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
		#endif                                                                                 
		#ifdef KER_TOSC_AS_TICK_SRC                                                            
        LDI   R18                , 0x00                   ;clear interrupt enbits (  1 clock ) 
     866:	20 e0       	ldi	r18, 0x00	; 0
		STS   SRTIMSK2           , R18                    ;set val to TIMSK2      (  2 clocks) 
     868:	20 93 70 00 	sts	0x0070, r18
		LDI   R18                , 0x00                   ;clear reg              (  1 clock ) 
     86c:	20 e0       	ldi	r18, 0x00	; 0
		STS   SRTCCR2B           , R18                    ;set val to TCCR2B      (  2 clocks) 
     86e:	20 93 b1 00 	sts	0x00B1, r18
		LDI   R18                , 0x00                   ;clear AS2 bit          (  1 clock ) 
     872:	20 e0       	ldi	r18, 0x00	; 0
		STS   SRASSR             , R18                    ;set val to ASSR        (  2 clocks) 
     874:	20 93 b6 00 	sts	0x00B6, r18
		#endif                                                                                 
		;save values for future use                                                            
		STS   KerBase+OFB_PRS    , R24                    ;KerBase[5] prescaler   (  2 clocks) 
     878:	80 93 05 01 	sts	0x0105, r24
		STS   KerBase+OFB_RLD    , R22                    ;KerBase[6] reload val  (  2 clocks) 
     87c:	60 93 06 01 	sts	0x0106, r22
        KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
     880:	a0 91 24 01 	lds	r26, 0x0124
     884:	b0 91 25 01 	lds	r27, 0x0125
     888:	fe 91       	ld	r31, -X
     88a:	ee 91       	ld	r30, -X
     88c:	3e 91       	ld	r19, -X
     88e:	2e 91       	ld	r18, -X
     890:	2d bf       	out	0x3d, r18	; 61
     892:	3e bf       	out	0x3e, r19	; 62
     894:	a0 93 24 01 	sts	0x0124, r26
     898:	b0 93 25 01 	sts	0x0125, r27
		RET                                               ;return from subroutine (  4 clocks) 
     89c:	08 95       	ret

0000089e <Kernel_Task_Create>:
;used registers          : R18, R19, R20, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)    
;arg registers           : R25:R24(FuncPtr), R22(TaskPriority)                                 
;return registers        : None                                                                
;unsafe access registers : R18, R19, R20, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)    
Kernel_Task_Create:                                       ;total 21.50uS @8MHz    (172 clocks) 
        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
     89e:	a0 91 24 01 	lds	r26, 0x0124
     8a2:	b0 91 25 01 	lds	r27, 0x0125
     8a6:	2d b7       	in	r18, 0x3d	; 61
     8a8:	3e b7       	in	r19, 0x3e	; 62
     8aa:	2d 93       	st	X+, r18
     8ac:	3d 93       	st	X+, r19
     8ae:	ed 93       	st	X+, r30
     8b0:	fd 93       	st	X+, r31
     8b2:	a0 93 24 01 	sts	0x0124, r26
     8b6:	b0 93 25 01 	sts	0x0125, r27
		;set priority to KerSchPr+task_id                                                      
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
     8ba:	ec e3       	ldi	r30, 0x3C	; 60
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
     8bc:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
     8be:	20 91 07 01 	lds	r18, 0x0107
     8c2:	e2 0f       	add	r30, r18
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	f2 1f       	adc	r31, r18
		ST    Z                  , R22                    ;save priority          (  2 clocks) 
     8c8:	60 83       	st	Z, r22
		;set task status to KerSchSts+task_id                                                  
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
     8ca:	e2 e3       	ldi	r30, 0x32	; 50
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
     8cc:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
     8ce:	20 91 07 01 	lds	r18, 0x0107
     8d2:	e2 0f       	add	r30, r18
     8d4:	20 e0       	ldi	r18, 0x00	; 0
     8d6:	f2 1f       	adc	r31, r18
		LDI   R18                , TASK_READY             ;set status as ready    (  1 clock ) 
     8d8:	21 e0       	ldi	r18, 0x01	; 1
		ST    Z                  , R18                    ;save status            (  2 clocks) 
     8da:	20 83       	st	Z, r18
		;stack pointer for current task (KerStack + KER_STK_SZ*(task_id+1) - 1) ->stack top    
		LDS   R18                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
     8dc:	20 91 07 01 	lds	r18, 0x0107
		INC   R18                                         ;increment task_id      (  1 clock ) 
     8e0:	23 95       	inc	r18
		LDI   R19                , KER_STK_SZ             ;load stack size        (  1 clock ) 
     8e2:	30 e8       	ldi	r19, 0x80	; 128
		MUL   R18                , R19                    ;multiply to get offset (  2 clocks) 
     8e4:	23 9f       	mul	r18, r19
		MOV   ZL                 , R0                     ;load multiplied low    (  1 clocks) 
     8e6:	e0 2d       	mov	r30, r0
		MOV   ZH                 , R1                     ;load multiplied high   (  1 clocks) 
     8e8:	f1 2d       	mov	r31, r1
		SBIW  ZL                 , 0x01                   ;dec multiplied val-1   (  2 clocks) 
     8ea:	31 97       	sbiw	r30, 0x01	; 1
		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
     8ec:	11 24       	eor	r1, r1
		LDI   R18                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
     8ee:	2a e5       	ldi	r18, 0x5A	; 90
		LDI   R19                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
     8f0:	31 e0       	ldi	r19, 0x01	; 1
		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
     8f2:	e2 0f       	add	r30, r18
		ADC   ZH                 , R19                    ;add high bytes+carry   (  1 clock ) 
     8f4:	f3 1f       	adc	r31, r19
		OUT   IOSPL              , ZL                     ;load SPL               (  1 clock ) 
     8f6:	ed bf       	out	0x3d, r30	; 61
        OUT   IOSPH              , ZH                     ;load SPH               (  1 clock ) 
     8f8:	fe bf       	out	0x3e, r31	; 62
		;function argument directly returns word address                                       
	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
     8fa:	8f 93       	push	r24
		PUSH  R25                                         ;push word addr high    (  2 clocks) 
     8fc:	9f 93       	push	r25
		;push context to stack of this task                                                    
		KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
     8fe:	0f 92       	push	r0
     900:	0f b6       	in	r0, 0x3f	; 63
     902:	0f 92       	push	r0
     904:	1f 92       	push	r1
     906:	11 24       	eor	r1, r1
     908:	2f 92       	push	r2
     90a:	3f 92       	push	r3
     90c:	4f 92       	push	r4
     90e:	5f 92       	push	r5
     910:	6f 92       	push	r6
     912:	7f 92       	push	r7
     914:	8f 92       	push	r8
     916:	9f 92       	push	r9
     918:	af 92       	push	r10
     91a:	bf 92       	push	r11
     91c:	cf 92       	push	r12
     91e:	df 92       	push	r13
     920:	ef 92       	push	r14
     922:	ff 92       	push	r15
     924:	0f 93       	push	r16
     926:	1f 93       	push	r17
     928:	2f 93       	push	r18
     92a:	3f 93       	push	r19
     92c:	4f 93       	push	r20
     92e:	5f 93       	push	r21
     930:	6f 93       	push	r22
     932:	7f 93       	push	r23
     934:	8f 93       	push	r24
     936:	9f 93       	push	r25
     938:	af 93       	push	r26
     93a:	bf 93       	push	r27
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	ef 93       	push	r30
     942:	ff 93       	push	r31
		;read stack pointer of current task (necessary when restore)                           
		IN    R18                , IOSPL                  ;read SPL               (  1 clock ) 
     944:	2d b7       	in	r18, 0x3d	; 61
        IN    R19                , IOSPH                  ;read SPH               (  1 clock ) 
     946:	3e b7       	in	r19, 0x3e	; 62
		;calculate the address where current task's SP will be stored and store SP             
		LDS   R20                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
     948:	40 91 07 01 	lds	r20, 0x0107
		LSL   R20                                         ;left shift to multiply (  1 clock ) 
     94c:	44 0f       	add	r20, r20
		LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
     94e:	e0 e1       	ldi	r30, 0x10	; 16
		LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
     950:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R20                    ;add offset to array    (  1 clock ) 
     952:	e4 0f       	add	r30, r20
		LDI   R20                , 0x00                   ;clear reg              (  1 clock ) 
     954:	40 e0       	ldi	r20, 0x00	; 0
		ADC   ZH                 , R20                    ;add carry if any       (  1 clock ) 
     956:	f4 1f       	adc	r31, r20
		ST    Z+                 , R18                    ;SPL at KerPSp+offset   (  2 clocks) 
     958:	21 93       	st	Z+, r18
		ST    Z                  , R19                    ;SPH at KerPSp+offset   (  2 clocks) 
     95a:	30 83       	st	Z, r19
		;increment task_id                                                                     
		LDS   R18                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
     95c:	20 91 07 01 	lds	r18, 0x0107
		INC   R18                                         ;increment task_id      (  1 clock ) 
     960:	23 95       	inc	r18
		STS   KerBase+OFB_TID    , R18                    ;store task_id          (  2 clocks) 
     962:	20 93 07 01 	sts	0x0107, r18
		;increment ntask                                                                       
		LDS   R18                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
     966:	20 91 08 01 	lds	r18, 0x0108
		INC   R18                                         ;increment ntask        (  1 clock ) 
     96a:	23 95       	inc	r18
		STS   KerBase+OFB_NTSK   , R18                    ;store ntask            (  2 clocks) 
     96c:	20 93 08 01 	sts	0x0108, r18
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
     970:	a0 91 24 01 	lds	r26, 0x0124
     974:	b0 91 25 01 	lds	r27, 0x0125
     978:	fe 91       	ld	r31, -X
     97a:	ee 91       	ld	r30, -X
     97c:	3e 91       	ld	r19, -X
     97e:	2e 91       	ld	r18, -X
     980:	2d bf       	out	0x3d, r18	; 61
     982:	3e bf       	out	0x3e, r19	; 62
     984:	a0 93 24 01 	sts	0x0124, r26
     988:	b0 93 25 01 	sts	0x0125, r27
		RET                                               ;return from subroutine (  4 clocks) 
     98c:	08 95       	ret

0000098e <Kernel_Start_Tasks>:
;used registers          : R0~R31                                                              
;arg registers           : None                                                                
;return registers        : None                                                                
;unsafe access registers : R18, R19, R20, R24, R25, R30(ZL), R31(ZH)                           
Kernel_Start_Tasks:                                       ;total 25.63uS @8MHz    (205 clocks) 
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
     98e:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
     990:	2f ef       	ldi	r18, 0xFF	; 255
     992:	20 93 09 01 	sts	0x0109, r18
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	20 93 0a 01 	sts	0x010A, r18
     99c:	58 2f       	mov	r21, r24

0000099e <_KER_SCH_LOOP54>:
     99e:	20 93 07 01 	sts	0x0107, r18
     9a2:	85 2f       	mov	r24, r21
     9a4:	e6 e4       	ldi	r30, 0x46	; 70
     9a6:	f1 e0       	ldi	r31, 0x01	; 1
     9a8:	20 91 07 01 	lds	r18, 0x0107
     9ac:	22 0f       	add	r18, r18
     9ae:	e2 0f       	add	r30, r18
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	f2 1f       	adc	r31, r18
     9b4:	20 81       	ld	r18, Z
     9b6:	31 81       	ldd	r19, Z+1	; 0x01
     9b8:	42 2f       	mov	r20, r18
     9ba:	43 2b       	or	r20, r19
     9bc:	59 f0       	breq	.+22     	; 0x9d4 <_VAL_NULL55>
     9be:	81 30       	cpi	r24, 0x01	; 1
     9c0:	99 f0       	breq	.+38     	; 0x9e8 <_VAL_NOT_NULL55>
     9c2:	41 e0       	ldi	r20, 0x01	; 1
     9c4:	24 1b       	sub	r18, r20
     9c6:	40 e0       	ldi	r20, 0x00	; 0
     9c8:	34 0b       	sbc	r19, r20
     9ca:	20 83       	st	Z, r18
     9cc:	31 83       	std	Z+1, r19	; 0x01
     9ce:	42 2f       	mov	r20, r18
     9d0:	43 2b       	or	r20, r19
     9d2:	51 f4       	brne	.+20     	; 0x9e8 <_VAL_NOT_NULL55>

000009d4 <_VAL_NULL55>:
     9d4:	e2 e3       	ldi	r30, 0x32	; 50
     9d6:	f1 e0       	ldi	r31, 0x01	; 1
     9d8:	20 91 07 01 	lds	r18, 0x0107
     9dc:	e2 0f       	add	r30, r18
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	f2 1f       	adc	r31, r18
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	80 83       	st	Z, r24
     9e6:	08 c0       	rjmp	.+16     	; 0x9f8 <_EXIT_SLP_TIME55>

000009e8 <_VAL_NOT_NULL55>:
     9e8:	e2 e3       	ldi	r30, 0x32	; 50
     9ea:	f1 e0       	ldi	r31, 0x01	; 1
     9ec:	20 91 07 01 	lds	r18, 0x0107
     9f0:	e2 0f       	add	r30, r18
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	f2 1f       	adc	r31, r18
     9f6:	80 81       	ld	r24, Z

000009f8 <_EXIT_SLP_TIME55>:
     9f8:	81 30       	cpi	r24, 0x01	; 1
     9fa:	19 f0       	breq	.+6      	; 0xa02 <_KER_CALC_PRIO54>
     9fc:	84 30       	cpi	r24, 0x04	; 4
     9fe:	09 f0       	breq	.+2      	; 0xa02 <_KER_CALC_PRIO54>
     a00:	12 c0       	rjmp	.+36     	; 0xa26 <_KER_SCH_NEXT54>

00000a02 <_KER_CALC_PRIO54>:
     a02:	ec e3       	ldi	r30, 0x3C	; 60
     a04:	f1 e0       	ldi	r31, 0x01	; 1
     a06:	20 e0       	ldi	r18, 0x00	; 0
     a08:	80 91 07 01 	lds	r24, 0x0107
     a0c:	e8 0f       	add	r30, r24
     a0e:	f2 1f       	adc	r31, r18
     a10:	80 81       	ld	r24, Z
     a12:	20 91 09 01 	lds	r18, 0x0109
     a16:	82 17       	cp	r24, r18
     a18:	30 f4       	brcc	.+12     	; 0xa26 <_KER_SCH_NEXT54>
     a1a:	80 93 09 01 	sts	0x0109, r24
     a1e:	20 91 07 01 	lds	r18, 0x0107
     a22:	20 93 0a 01 	sts	0x010A, r18

00000a26 <_KER_SCH_NEXT54>:
     a26:	20 91 07 01 	lds	r18, 0x0107
     a2a:	23 95       	inc	r18
     a2c:	30 91 08 01 	lds	r19, 0x0108
     a30:	23 17       	cp	r18, r19
     a32:	08 f4       	brcc	.+2      	; 0xa36 <_KER_SCH_EXIT54>
     a34:	b4 cf       	rjmp	.-152    	; 0x99e <_KER_SCH_LOOP54>

00000a36 <_KER_SCH_EXIT54>:
     a36:	20 91 0a 01 	lds	r18, 0x010A
     a3a:	20 93 07 01 	sts	0x0107, r18
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
     a3e:	e0 e1       	ldi	r30, 0x10	; 16
     a40:	f1 e0       	ldi	r31, 0x01	; 1
     a42:	20 91 07 01 	lds	r18, 0x0107
     a46:	22 0f       	add	r18, r18
     a48:	e2 0f       	add	r30, r18
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	f2 1f       	adc	r31, r18
     a4e:	20 81       	ld	r18, Z
     a50:	31 81       	ldd	r19, Z+1	; 0x01
     a52:	2d bf       	out	0x3d, r18	; 61
     a54:	3e bf       	out	0x3e, r19	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
     a56:	ff 91       	pop	r31
     a58:	ef 91       	pop	r30
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	bf 91       	pop	r27
     a60:	af 91       	pop	r26
     a62:	9f 91       	pop	r25
     a64:	8f 91       	pop	r24
     a66:	7f 91       	pop	r23
     a68:	6f 91       	pop	r22
     a6a:	5f 91       	pop	r21
     a6c:	4f 91       	pop	r20
     a6e:	3f 91       	pop	r19
     a70:	2f 91       	pop	r18
     a72:	1f 91       	pop	r17
     a74:	0f 91       	pop	r16
     a76:	ff 90       	pop	r15
     a78:	ef 90       	pop	r14
     a7a:	df 90       	pop	r13
     a7c:	cf 90       	pop	r12
     a7e:	bf 90       	pop	r11
     a80:	af 90       	pop	r10
     a82:	9f 90       	pop	r9
     a84:	8f 90       	pop	r8
     a86:	7f 90       	pop	r7
     a88:	6f 90       	pop	r6
     a8a:	5f 90       	pop	r5
     a8c:	4f 90       	pop	r4
     a8e:	3f 90       	pop	r3
     a90:	2f 90       	pop	r2
     a92:	1f 90       	pop	r1
     a94:	0f 90       	pop	r0
     a96:	0f be       	out	0x3f, r0	; 63
     a98:	0f 90       	pop	r0
     a9a:	78 94       	sei
		                                                                                       
		STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
		SEI                                               ;force enable interrupt (  1 clock ) 
		#endif                                                                                 
                                                                                               
		#ifdef KER_TOSC_AS_TICK_SRC                                                            
     a9c:	20 e0       	ldi	r18, 0x00	; 0
     a9e:	20 93 70 00 	sts	0x0070, r18
     aa2:	20 e2       	ldi	r18, 0x20	; 32
     aa4:	20 93 b6 00 	sts	0x00B6, r18
		LDI   R18                , 0x29                   ;100Hz->clk/8/41        (  1 clock ) 
		#endif                                                                                 
		#ifdef KER_TOSC_TICK_50MS                                                              
		LDI   R18                , 0xCC                   ;20Hz->clk/8/204        (  1 clock ) 
		#endif                                                                                 
		#ifdef KER_TOSC_TICK_100MS                                                             
     aa8:	26 e6       	ldi	r18, 0x66	; 102
		#ifdef KER_TOSC_TICK_500MS                                                             
		LDI   R18                , 0x80                   ;2Hz->clk/128/128       (  1 clock ) 
		#endif                                                                                 
		#ifdef KER_TOSC_TICK_1000MS                                                            
		LDI   R18                , 0x80                   ;1Hz->clk/256/128       (  1 clock ) 
		#endif                                                                                 
     aaa:	20 93 b3 00 	sts	0x00B3, r18
     aae:	20 e0       	ldi	r18, 0x00	; 0
     ab0:	20 93 b4 00 	sts	0x00B4, r18
     ab4:	22 e0       	ldi	r18, 0x02	; 2
     ab6:	20 93 b0 00 	sts	0x00B0, r18
		LDI   R18                , 0x02                   ;100Hz->clk/8/41        (  1 clock ) 
		#endif                                                                                 
		#ifdef KER_TOSC_TICK_50MS                                                              
		LDI   R18                , 0x02                   ;20Hz->clk/8/204        (  1 clock ) 
		#endif                                                                                 
		#ifdef KER_TOSC_TICK_100MS                                                             
     aba:	23 e0       	ldi	r18, 0x03	; 3
		#ifdef KER_TOSC_TICK_500MS                                                             
		LDI   R18                , 0x05                   ;2Hz->clk/128/128       (  1 clock ) 
		#endif                                                                                 
		#ifdef KER_TOSC_TICK_1000MS                                                            
		LDI   R18                , 0x06                   ;1Hz->clk/256/128       (  1 clock ) 
		#endif                                                                                 
     abc:	20 93 b1 00 	sts	0x00B1, r18
     ac0:	20 e0       	ldi	r18, 0x00	; 0
     ac2:	20 93 b2 00 	sts	0x00B2, r18

00000ac6 <_KER_TC2_AUB65>:
     ac6:	20 91 b6 00 	lds	r18, 0x00B6
     aca:	22 70       	andi	r18, 0x02	; 2
     acc:	e1 f7       	brne	.-8      	; 0xac6 <_KER_TC2_AUB65>

00000ace <_KER_TC2_BUB65>:
     ace:	20 91 b6 00 	lds	r18, 0x00B6
     ad2:	21 70       	andi	r18, 0x01	; 1
     ad4:	e1 f7       	brne	.-8      	; 0xace <_KER_TC2_BUB65>

00000ad6 <_KER_OC2_AUB65>:
     ad6:	20 91 b6 00 	lds	r18, 0x00B6
     ada:	28 70       	andi	r18, 0x08	; 8
     adc:	e1 f7       	brne	.-8      	; 0xad6 <_KER_OC2_AUB65>

00000ade <_KER_OC2_BUB65>:
     ade:	20 91 b6 00 	lds	r18, 0x00B6
     ae2:	24 70       	andi	r18, 0x04	; 4
     ae4:	e1 f7       	brne	.-8      	; 0xade <_KER_OC2_BUB65>

00000ae6 <_KER_TC2_UB65>:
     ae6:	20 91 b6 00 	lds	r18, 0x00B6
     aea:	20 71       	andi	r18, 0x10	; 16
     aec:	e1 f7       	brne	.-8      	; 0xae6 <_KER_TC2_UB65>

00000aee <_KER_TC2_TOV265>:
     aee:	20 91 37 00 	lds	r18, 0x0037
     af2:	21 70       	andi	r18, 0x01	; 1
     af4:	19 f0       	breq	.+6      	; 0xafc <_KER_TC2_OCF2A65>
     af6:	21 e0       	ldi	r18, 0x01	; 1
     af8:	20 93 37 00 	sts	0x0037, r18

00000afc <_KER_TC2_OCF2A65>:
     afc:	20 91 37 00 	lds	r18, 0x0037
     b00:	22 70       	andi	r18, 0x02	; 2
     b02:	19 f0       	breq	.+6      	; 0xb0a <_KER_TC2_OCF2B65>
     b04:	22 e0       	ldi	r18, 0x02	; 2
     b06:	20 93 37 00 	sts	0x0037, r18

00000b0a <_KER_TC2_OCF2B65>:
     b0a:	20 91 37 00 	lds	r18, 0x0037
     b0e:	24 70       	andi	r18, 0x04	; 4
     b10:	19 f0       	breq	.+6      	; 0xb18 <_KER_TC2_INTEN65>
     b12:	24 e0       	ldi	r18, 0x04	; 4
     b14:	20 93 37 00 	sts	0x0037, r18

00000b18 <_KER_TC2_INTEN65>:
     b18:	22 e0       	ldi	r18, 0x02	; 2
     b1a:	20 93 70 00 	sts	0x0070, r18
     b1e:	78 94       	sei
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
		;config timer for system tick                                                          
		KER_TIMER_INIT                                    ;init timer, int enable ( 12 clocks) 
		;execute return to jump to highest priority task                                       
		RET                                               ;return from subroutine (  4 clocks) 
     b20:	08 95       	ret

00000b22 <Kernel_Init>:
;used registers          : R1, R18, R19, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
;arg registers           : None                                                                
;return registers        : None                                                                
;unsafe access registers : R1, R18, R19, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
Kernel_Init:                                              ;total 39.75uS @8MHz    (318 clocks) 
		CLR   R1                                          ;gcc expects            (  1 clock ) 
     b22:	11 24       	eor	r1, r1
        ;store stack top (for MSP) addr to KerSSZ+OFM_MSPI0:1                                  
		LDI   R18                , lo8(KerSSZ+OFM_MSPS)   ;load low address       (  1 clock ) 
     b24:	26 e2       	ldi	r18, 0x26	; 38
		LDI   R19                , hi8(KerSSZ+OFM_MSPS)   ;load high address      (  1 clock ) 
     b26:	31 e0       	ldi	r19, 0x01	; 1
        STS   KerSSZ+OFM_MSPI+0  , R18                    ;set mspi to stack top  (  2 clocks) 
     b28:	20 93 24 01 	sts	0x0124, r18
		STS   KerSSZ+OFM_MSPI+1  , R19                    ;set mspi to stack top  (  2 clocks) 
     b2c:	30 93 25 01 	sts	0x0125, r19
		KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
     b30:	a0 91 24 01 	lds	r26, 0x0124
     b34:	b0 91 25 01 	lds	r27, 0x0125
     b38:	2d b7       	in	r18, 0x3d	; 61
     b3a:	3e b7       	in	r19, 0x3e	; 62
     b3c:	2d 93       	st	X+, r18
     b3e:	3d 93       	st	X+, r19
     b40:	ed 93       	st	X+, r30
     b42:	fd 93       	st	X+, r31
     b44:	a0 93 24 01 	sts	0x0124, r26
     b48:	b0 93 25 01 	sts	0x0125, r27
		;init timer for kernel                                                                 
		LDI   R24                , 0x03                   ;set prescaler          (  1 clock ) 
     b4c:	83 e0       	ldi	r24, 0x03	; 3
		LDI   R22                , 0x82                   ;set reload val         (  1 clock ) 
     b4e:	62 e8       	ldi	r22, 0x82	; 130
		CALL  Kernel_SysTick_Reg_Init                     ;init timer             ( 92 clocks) 
     b50:	0e 94 05 04 	call	0x80a	; 0x80a <Kernel_SysTick_Reg_Init>
		;create idle task at task_id 0, priority 0xFF (lowest)                                 
		LDI   R24                , lo8(Kernel_Task_Idle)  ;load func addr low     (  1 clock ) 
     b54:	80 e8       	ldi	r24, 0x80	; 128
		LDI   R25                , hi8(Kernel_Task_Idle)  ;load func addr high    (  1 clock ) 
     b56:	9b e0       	ldi	r25, 0x0B	; 11
		LSR   R25                                         ;right shift to divide  (  1 clock ) 
     b58:	96 95       	lsr	r25
		ROR   R24                                         ;rotate right th carry  (  1 clock ) 
     b5a:	87 95       	ror	r24
		LDI   R22                , 0xFF                   ;set max val            (  1 clock ) 
     b5c:	6f ef       	ldi	r22, 0xFF	; 255
		CALL  Kernel_Task_Create                          ;init idle task         (172 clocks) 
     b5e:	0e 94 4f 04 	call	0x89e	; 0x89e <Kernel_Task_Create>
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
     b62:	a0 91 24 01 	lds	r26, 0x0124
     b66:	b0 91 25 01 	lds	r27, 0x0125
     b6a:	fe 91       	ld	r31, -X
     b6c:	ee 91       	ld	r30, -X
     b6e:	3e 91       	ld	r19, -X
     b70:	2e 91       	ld	r18, -X
     b72:	2d bf       	out	0x3d, r18	; 61
     b74:	3e bf       	out	0x3e, r19	; 62
     b76:	a0 93 24 01 	sts	0x0124, r26
     b7a:	b0 93 25 01 	sts	0x0125, r27
		;execute return to jump to task0, pushed while task init                               
		RET                                               ;return from subroutine (  4 clocks) 
     b7e:	08 95       	ret

00000b80 <Kernel_Task_Idle>:
                                                                                               
		#ifdef KER_SLEEP_MODE_POWER_DOWN                                                       
		LDI   R18                , 0x04                   ;set SM[2:0] val        (  1 clock ) 
        #endif                                                                                 
		                                                                                       
		#ifdef KER_SLEEP_MODE_POWER_SAVE                                                       
     b80:	26 e0       	ldi	r18, 0x06	; 6
     b82:	20 93 53 00 	sts	0x0053, r18
     b86:	20 93 0e 01 	sts	0x010E, r18

00000b8a <_IDLE_LOOP>:
;return registers        : None                                                                
;unsafe access registers : None                                                                
Kernel_Task_Idle:                                                                              
	    KER_SLEEP_INIT                                    ;sleep init             (  5 clocks) 
    _IDLE_LOOP:                                           ;forever loop                        
	    KER_DISABLE_ANALOG_DOMAIN                         ;disable adc, ac        ( 10 clocks) 
     b8a:	20 91 7a 00 	lds	r18, 0x007A
     b8e:	2f 7e       	andi	r18, 0xEF	; 239
     b90:	20 93 7a 00 	sts	0x007A, r18
     b94:	20 91 50 00 	lds	r18, 0x0050
     b98:	20 68       	ori	r18, 0x80	; 128
     b9a:	20 93 50 00 	sts	0x0050, r18
	    KER_ENTER_SLEEP                                   ;enter sleep mode       (  6 clocks) 
     b9e:	20 91 53 00 	lds	r18, 0x0053
     ba2:	21 60       	ori	r18, 0x01	; 1
     ba4:	20 93 53 00 	sts	0x0053, r18
     ba8:	88 95       	sleep
		RJMP  _IDLE_LOOP                                  ;jump to loop start     (  2 clocks) 
     baa:	ef cf       	rjmp	.-34     	; 0xb8a <_IDLE_LOOP>

00000bac <Kernel_Task_Sleep>:
;arg registers           : R25:R24(SleepTime)                                                  
;return registers        : None                                                                
;unsafe access registers : R18, R19, R20, R24, R25, R30(ZL), R31(ZH)                           
Kernel_Task_Sleep:                                        ;total 37.25uS @8MHz    (298 clocks) 
        ;save current context                                                                  
        KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
     bac:	0f 92       	push	r0
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	f8 94       	cli
     bb2:	0f 92       	push	r0
     bb4:	1f 92       	push	r1
     bb6:	11 24       	eor	r1, r1
     bb8:	2f 92       	push	r2
     bba:	3f 92       	push	r3
     bbc:	4f 92       	push	r4
     bbe:	5f 92       	push	r5
     bc0:	6f 92       	push	r6
     bc2:	7f 92       	push	r7
     bc4:	8f 92       	push	r8
     bc6:	9f 92       	push	r9
     bc8:	af 92       	push	r10
     bca:	bf 92       	push	r11
     bcc:	cf 92       	push	r12
     bce:	df 92       	push	r13
     bd0:	ef 92       	push	r14
     bd2:	ff 92       	push	r15
     bd4:	0f 93       	push	r16
     bd6:	1f 93       	push	r17
     bd8:	2f 93       	push	r18
     bda:	3f 93       	push	r19
     bdc:	4f 93       	push	r20
     bde:	5f 93       	push	r21
     be0:	6f 93       	push	r22
     be2:	7f 93       	push	r23
     be4:	8f 93       	push	r24
     be6:	9f 93       	push	r25
     be8:	af 93       	push	r26
     bea:	bf 93       	push	r27
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
     bf0:	ef 93       	push	r30
     bf2:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
     bf4:	e0 e1       	ldi	r30, 0x10	; 16
     bf6:	f1 e0       	ldi	r31, 0x01	; 1
     bf8:	20 91 07 01 	lds	r18, 0x0107
     bfc:	22 0f       	add	r18, r18
     bfe:	e2 0f       	add	r30, r18
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	f2 1f       	adc	r31, r18
     c04:	2d b7       	in	r18, 0x3d	; 61
     c06:	3e b7       	in	r19, 0x3e	; 62
     c08:	20 83       	st	Z, r18
     c0a:	31 83       	std	Z+1, r19	; 0x01
		;create next task wakeup time (args R25:R24)                                           
		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
     c0c:	e6 e4       	ldi	r30, 0x46	; 70
		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
     c0e:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
     c10:	20 91 07 01 	lds	r18, 0x0107
     c14:	22 0f       	add	r18, r18
     c16:	e2 0f       	add	r30, r18
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	f2 1f       	adc	r31, r18
		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
     c1c:	80 83       	st	Z, r24
		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
     c1e:	91 83       	std	Z+1, r25	; 0x01
		;update task scheduler status as blocked                                               
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
     c20:	e2 e3       	ldi	r30, 0x32	; 50
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
     c22:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
     c24:	20 91 07 01 	lds	r18, 0x0107
     c28:	e2 0f       	add	r30, r18
     c2a:	20 e0       	ldi	r18, 0x00	; 0
     c2c:	f2 1f       	adc	r31, r18
        LDI   R18                , TASK_BLOCKED           ;block task until cnt=0 (  1 clock ) 
     c2e:	20 e0       	ldi	r18, 0x00	; 0
		STD   Z+0                , R18                    ;save block flag        (  2 clocks) 
     c30:	20 83       	st	Z, r18
		;run scheduler, load next task sp, restore context                                     
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
     c32:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
     c34:	2f ef       	ldi	r18, 0xFF	; 255
     c36:	20 93 09 01 	sts	0x0109, r18
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	20 93 0a 01 	sts	0x010A, r18
     c40:	58 2f       	mov	r21, r24

00000c42 <_KER_SCH_LOOP78>:
     c42:	20 93 07 01 	sts	0x0107, r18
     c46:	85 2f       	mov	r24, r21
     c48:	e6 e4       	ldi	r30, 0x46	; 70
     c4a:	f1 e0       	ldi	r31, 0x01	; 1
     c4c:	20 91 07 01 	lds	r18, 0x0107
     c50:	22 0f       	add	r18, r18
     c52:	e2 0f       	add	r30, r18
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	f2 1f       	adc	r31, r18
     c58:	20 81       	ld	r18, Z
     c5a:	31 81       	ldd	r19, Z+1	; 0x01
     c5c:	42 2f       	mov	r20, r18
     c5e:	43 2b       	or	r20, r19
     c60:	59 f0       	breq	.+22     	; 0xc78 <_VAL_NULL79>
     c62:	81 30       	cpi	r24, 0x01	; 1
     c64:	99 f0       	breq	.+38     	; 0xc8c <_VAL_NOT_NULL79>
     c66:	41 e0       	ldi	r20, 0x01	; 1
     c68:	24 1b       	sub	r18, r20
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	34 0b       	sbc	r19, r20
     c6e:	20 83       	st	Z, r18
     c70:	31 83       	std	Z+1, r19	; 0x01
     c72:	42 2f       	mov	r20, r18
     c74:	43 2b       	or	r20, r19
     c76:	51 f4       	brne	.+20     	; 0xc8c <_VAL_NOT_NULL79>

00000c78 <_VAL_NULL79>:
     c78:	e2 e3       	ldi	r30, 0x32	; 50
     c7a:	f1 e0       	ldi	r31, 0x01	; 1
     c7c:	20 91 07 01 	lds	r18, 0x0107
     c80:	e2 0f       	add	r30, r18
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	f2 1f       	adc	r31, r18
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	80 83       	st	Z, r24
     c8a:	08 c0       	rjmp	.+16     	; 0xc9c <_EXIT_SLP_TIME79>

00000c8c <_VAL_NOT_NULL79>:
     c8c:	e2 e3       	ldi	r30, 0x32	; 50
     c8e:	f1 e0       	ldi	r31, 0x01	; 1
     c90:	20 91 07 01 	lds	r18, 0x0107
     c94:	e2 0f       	add	r30, r18
     c96:	20 e0       	ldi	r18, 0x00	; 0
     c98:	f2 1f       	adc	r31, r18
     c9a:	80 81       	ld	r24, Z

00000c9c <_EXIT_SLP_TIME79>:
     c9c:	81 30       	cpi	r24, 0x01	; 1
     c9e:	19 f0       	breq	.+6      	; 0xca6 <_KER_CALC_PRIO78>
     ca0:	84 30       	cpi	r24, 0x04	; 4
     ca2:	09 f0       	breq	.+2      	; 0xca6 <_KER_CALC_PRIO78>
     ca4:	12 c0       	rjmp	.+36     	; 0xcca <_KER_SCH_NEXT78>

00000ca6 <_KER_CALC_PRIO78>:
     ca6:	ec e3       	ldi	r30, 0x3C	; 60
     ca8:	f1 e0       	ldi	r31, 0x01	; 1
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	80 91 07 01 	lds	r24, 0x0107
     cb0:	e8 0f       	add	r30, r24
     cb2:	f2 1f       	adc	r31, r18
     cb4:	80 81       	ld	r24, Z
     cb6:	20 91 09 01 	lds	r18, 0x0109
     cba:	82 17       	cp	r24, r18
     cbc:	30 f4       	brcc	.+12     	; 0xcca <_KER_SCH_NEXT78>
     cbe:	80 93 09 01 	sts	0x0109, r24
     cc2:	20 91 07 01 	lds	r18, 0x0107
     cc6:	20 93 0a 01 	sts	0x010A, r18

00000cca <_KER_SCH_NEXT78>:
     cca:	20 91 07 01 	lds	r18, 0x0107
     cce:	23 95       	inc	r18
     cd0:	30 91 08 01 	lds	r19, 0x0108
     cd4:	23 17       	cp	r18, r19
     cd6:	08 f4       	brcc	.+2      	; 0xcda <_KER_SCH_EXIT78>
     cd8:	b4 cf       	rjmp	.-152    	; 0xc42 <_KER_SCH_LOOP78>

00000cda <_KER_SCH_EXIT78>:
     cda:	20 91 0a 01 	lds	r18, 0x010A
     cde:	20 93 07 01 	sts	0x0107, r18
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
     ce2:	e0 e1       	ldi	r30, 0x10	; 16
     ce4:	f1 e0       	ldi	r31, 0x01	; 1
     ce6:	20 91 07 01 	lds	r18, 0x0107
     cea:	22 0f       	add	r18, r18
     cec:	e2 0f       	add	r30, r18
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	f2 1f       	adc	r31, r18
     cf2:	20 81       	ld	r18, Z
     cf4:	31 81       	ldd	r19, Z+1	; 0x01
     cf6:	2d bf       	out	0x3d, r18	; 61
     cf8:	3e bf       	out	0x3e, r19	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
     cfa:	ff 91       	pop	r31
     cfc:	ef 91       	pop	r30
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	bf 91       	pop	r27
     d04:	af 91       	pop	r26
     d06:	9f 91       	pop	r25
     d08:	8f 91       	pop	r24
     d0a:	7f 91       	pop	r23
     d0c:	6f 91       	pop	r22
     d0e:	5f 91       	pop	r21
     d10:	4f 91       	pop	r20
     d12:	3f 91       	pop	r19
     d14:	2f 91       	pop	r18
     d16:	1f 91       	pop	r17
     d18:	0f 91       	pop	r16
     d1a:	ff 90       	pop	r15
     d1c:	ef 90       	pop	r14
     d1e:	df 90       	pop	r13
     d20:	cf 90       	pop	r12
     d22:	bf 90       	pop	r11
     d24:	af 90       	pop	r10
     d26:	9f 90       	pop	r9
     d28:	8f 90       	pop	r8
     d2a:	7f 90       	pop	r7
     d2c:	6f 90       	pop	r6
     d2e:	5f 90       	pop	r5
     d30:	4f 90       	pop	r4
     d32:	3f 90       	pop	r3
     d34:	2f 90       	pop	r2
     d36:	1f 90       	pop	r1
     d38:	0f 90       	pop	r0
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	0f 90       	pop	r0
     d3e:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
     d40:	08 95       	ret

00000d42 <Kernel_Task_Constant_Latency>:
;arg registers           : R25:R24(SleepTime)                                                  
;return registers        : None                                                                
;unsafe access registers : R18, R24, R25, R30(ZL), R31(ZH)                                     
Kernel_Task_Constant_Latency:                             ;total 3.50uS @8MHz     ( 28 clocks) 
		;create next task wakeup time (args R25:R24)                                           
		CLI                                               ;disable interrupt      (  1 clock ) 
     d42:	f8 94       	cli
		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
     d44:	e6 e4       	ldi	r30, 0x46	; 70
		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
     d46:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
     d48:	20 91 07 01 	lds	r18, 0x0107
     d4c:	22 0f       	add	r18, r18
     d4e:	e2 0f       	add	r30, r18
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	f2 1f       	adc	r31, r18
		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
     d54:	80 83       	st	Z, r24
		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
     d56:	91 83       	std	Z+1, r25	; 0x01
		;update task scheduler status as constant latency                                      
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
     d58:	e2 e3       	ldi	r30, 0x32	; 50
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
     d5a:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
     d5c:	20 91 07 01 	lds	r18, 0x0107
     d60:	e2 0f       	add	r30, r18
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	f2 1f       	adc	r31, r18
        LDI   R18                , TASK_CONS_LAT          ;save as cons_lat       (  1 clock ) 
     d66:	24 e0       	ldi	r18, 0x04	; 4
		STD   Z+0                , R18                    ;save block flag        (  2 clocks) 
     d68:	20 83       	st	Z, r18
		SEI                                               ;enable interrupt       (  1 clock ) 
     d6a:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
     d6c:	08 95       	ret

00000d6e <Kernel_Task_Constant_Latency_Sleep>:
;arg registers           : R25:R24(SleepTime)                                                  
;return registers        : None                                                                
;unsafe access registers : R18, R19, R20, R24, R25, R30(ZL), R31(ZH)                           
Kernel_Task_Constant_Latency_Sleep:                       ;total 35.75uS @8MHz    (286 clocks) 
		;save current context                                                                  
        KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
     d6e:	0f 92       	push	r0
     d70:	0f b6       	in	r0, 0x3f	; 63
     d72:	f8 94       	cli
     d74:	0f 92       	push	r0
     d76:	1f 92       	push	r1
     d78:	11 24       	eor	r1, r1
     d7a:	2f 92       	push	r2
     d7c:	3f 92       	push	r3
     d7e:	4f 92       	push	r4
     d80:	5f 92       	push	r5
     d82:	6f 92       	push	r6
     d84:	7f 92       	push	r7
     d86:	8f 92       	push	r8
     d88:	9f 92       	push	r9
     d8a:	af 92       	push	r10
     d8c:	bf 92       	push	r11
     d8e:	cf 92       	push	r12
     d90:	df 92       	push	r13
     d92:	ef 92       	push	r14
     d94:	ff 92       	push	r15
     d96:	0f 93       	push	r16
     d98:	1f 93       	push	r17
     d9a:	2f 93       	push	r18
     d9c:	3f 93       	push	r19
     d9e:	4f 93       	push	r20
     da0:	5f 93       	push	r21
     da2:	6f 93       	push	r22
     da4:	7f 93       	push	r23
     da6:	8f 93       	push	r24
     da8:	9f 93       	push	r25
     daa:	af 93       	push	r26
     dac:	bf 93       	push	r27
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
     db2:	ef 93       	push	r30
     db4:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
     db6:	e0 e1       	ldi	r30, 0x10	; 16
     db8:	f1 e0       	ldi	r31, 0x01	; 1
     dba:	20 91 07 01 	lds	r18, 0x0107
     dbe:	22 0f       	add	r18, r18
     dc0:	e2 0f       	add	r30, r18
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	f2 1f       	adc	r31, r18
     dc6:	2d b7       	in	r18, 0x3d	; 61
     dc8:	3e b7       	in	r19, 0x3e	; 62
     dca:	20 83       	st	Z, r18
     dcc:	31 83       	std	Z+1, r19	; 0x01
		;update task scheduler status as blocked                                               
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
     dce:	e2 e3       	ldi	r30, 0x32	; 50
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
     dd0:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
     dd2:	20 91 07 01 	lds	r18, 0x0107
     dd6:	e2 0f       	add	r30, r18
     dd8:	20 e0       	ldi	r18, 0x00	; 0
     dda:	f2 1f       	adc	r31, r18
        LDI   R18                , TASK_BLOCKED           ;blocked until cnt=0    (  1 clock ) 
     ddc:	20 e0       	ldi	r18, 0x00	; 0
		STD   Z+0                , R18                    ;save block flag        (  2 clocks) 
     dde:	20 83       	st	Z, r18
		;run scheduler, load next task sp, restore context                                     
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
     de0:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
     de2:	2f ef       	ldi	r18, 0xFF	; 255
     de4:	20 93 09 01 	sts	0x0109, r18
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	20 93 0a 01 	sts	0x010A, r18
     dee:	58 2f       	mov	r21, r24

00000df0 <_KER_SCH_LOOP97>:
     df0:	20 93 07 01 	sts	0x0107, r18
     df4:	85 2f       	mov	r24, r21
     df6:	e6 e4       	ldi	r30, 0x46	; 70
     df8:	f1 e0       	ldi	r31, 0x01	; 1
     dfa:	20 91 07 01 	lds	r18, 0x0107
     dfe:	22 0f       	add	r18, r18
     e00:	e2 0f       	add	r30, r18
     e02:	20 e0       	ldi	r18, 0x00	; 0
     e04:	f2 1f       	adc	r31, r18
     e06:	20 81       	ld	r18, Z
     e08:	31 81       	ldd	r19, Z+1	; 0x01
     e0a:	42 2f       	mov	r20, r18
     e0c:	43 2b       	or	r20, r19
     e0e:	59 f0       	breq	.+22     	; 0xe26 <_VAL_NULL98>
     e10:	81 30       	cpi	r24, 0x01	; 1
     e12:	99 f0       	breq	.+38     	; 0xe3a <_VAL_NOT_NULL98>
     e14:	41 e0       	ldi	r20, 0x01	; 1
     e16:	24 1b       	sub	r18, r20
     e18:	40 e0       	ldi	r20, 0x00	; 0
     e1a:	34 0b       	sbc	r19, r20
     e1c:	20 83       	st	Z, r18
     e1e:	31 83       	std	Z+1, r19	; 0x01
     e20:	42 2f       	mov	r20, r18
     e22:	43 2b       	or	r20, r19
     e24:	51 f4       	brne	.+20     	; 0xe3a <_VAL_NOT_NULL98>

00000e26 <_VAL_NULL98>:
     e26:	e2 e3       	ldi	r30, 0x32	; 50
     e28:	f1 e0       	ldi	r31, 0x01	; 1
     e2a:	20 91 07 01 	lds	r18, 0x0107
     e2e:	e2 0f       	add	r30, r18
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	f2 1f       	adc	r31, r18
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	80 83       	st	Z, r24
     e38:	08 c0       	rjmp	.+16     	; 0xe4a <_EXIT_SLP_TIME98>

00000e3a <_VAL_NOT_NULL98>:
     e3a:	e2 e3       	ldi	r30, 0x32	; 50
     e3c:	f1 e0       	ldi	r31, 0x01	; 1
     e3e:	20 91 07 01 	lds	r18, 0x0107
     e42:	e2 0f       	add	r30, r18
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	f2 1f       	adc	r31, r18
     e48:	80 81       	ld	r24, Z

00000e4a <_EXIT_SLP_TIME98>:
     e4a:	81 30       	cpi	r24, 0x01	; 1
     e4c:	19 f0       	breq	.+6      	; 0xe54 <_KER_CALC_PRIO97>
     e4e:	84 30       	cpi	r24, 0x04	; 4
     e50:	09 f0       	breq	.+2      	; 0xe54 <_KER_CALC_PRIO97>
     e52:	12 c0       	rjmp	.+36     	; 0xe78 <_KER_SCH_NEXT97>

00000e54 <_KER_CALC_PRIO97>:
     e54:	ec e3       	ldi	r30, 0x3C	; 60
     e56:	f1 e0       	ldi	r31, 0x01	; 1
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	80 91 07 01 	lds	r24, 0x0107
     e5e:	e8 0f       	add	r30, r24
     e60:	f2 1f       	adc	r31, r18
     e62:	80 81       	ld	r24, Z
     e64:	20 91 09 01 	lds	r18, 0x0109
     e68:	82 17       	cp	r24, r18
     e6a:	30 f4       	brcc	.+12     	; 0xe78 <_KER_SCH_NEXT97>
     e6c:	80 93 09 01 	sts	0x0109, r24
     e70:	20 91 07 01 	lds	r18, 0x0107
     e74:	20 93 0a 01 	sts	0x010A, r18

00000e78 <_KER_SCH_NEXT97>:
     e78:	20 91 07 01 	lds	r18, 0x0107
     e7c:	23 95       	inc	r18
     e7e:	30 91 08 01 	lds	r19, 0x0108
     e82:	23 17       	cp	r18, r19
     e84:	08 f4       	brcc	.+2      	; 0xe88 <_KER_SCH_EXIT97>
     e86:	b4 cf       	rjmp	.-152    	; 0xdf0 <_KER_SCH_LOOP97>

00000e88 <_KER_SCH_EXIT97>:
     e88:	20 91 0a 01 	lds	r18, 0x010A
     e8c:	20 93 07 01 	sts	0x0107, r18
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
     e90:	e0 e1       	ldi	r30, 0x10	; 16
     e92:	f1 e0       	ldi	r31, 0x01	; 1
     e94:	20 91 07 01 	lds	r18, 0x0107
     e98:	22 0f       	add	r18, r18
     e9a:	e2 0f       	add	r30, r18
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	f2 1f       	adc	r31, r18
     ea0:	20 81       	ld	r18, Z
     ea2:	31 81       	ldd	r19, Z+1	; 0x01
     ea4:	2d bf       	out	0x3d, r18	; 61
     ea6:	3e bf       	out	0x3e, r19	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
     ea8:	ff 91       	pop	r31
     eaa:	ef 91       	pop	r30
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	bf 91       	pop	r27
     eb2:	af 91       	pop	r26
     eb4:	9f 91       	pop	r25
     eb6:	8f 91       	pop	r24
     eb8:	7f 91       	pop	r23
     eba:	6f 91       	pop	r22
     ebc:	5f 91       	pop	r21
     ebe:	4f 91       	pop	r20
     ec0:	3f 91       	pop	r19
     ec2:	2f 91       	pop	r18
     ec4:	1f 91       	pop	r17
     ec6:	0f 91       	pop	r16
     ec8:	ff 90       	pop	r15
     eca:	ef 90       	pop	r14
     ecc:	df 90       	pop	r13
     ece:	cf 90       	pop	r12
     ed0:	bf 90       	pop	r11
     ed2:	af 90       	pop	r10
     ed4:	9f 90       	pop	r9
     ed6:	8f 90       	pop	r8
     ed8:	7f 90       	pop	r7
     eda:	6f 90       	pop	r6
     edc:	5f 90       	pop	r5
     ede:	4f 90       	pop	r4
     ee0:	3f 90       	pop	r3
     ee2:	2f 90       	pop	r2
     ee4:	1f 90       	pop	r1
     ee6:	0f 90       	pop	r0
     ee8:	0f be       	out	0x3f, r0	; 63
     eea:	0f 90       	pop	r0
     eec:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
     eee:	08 95       	ret

00000ef0 <Kernel_Task_Sleep_Time_Get>:
;used registers          : R18, R24, R25, R30(ZL), R31(ZH)                                     
;arg registers           : R24(TaskID)                                                         
;return registers        : R25:R24(SleepTime)                                                  
;unsafe access registers : R18, R24, R25, R30(ZL), R31(ZH)                                     
Kernel_Task_Sleep_Time_Get:                               ;total 1.88uS @8MHz     ( 15 clocks) 
		MOV   R18                , R24                    ;copy                   (  1 clock ) 
     ef0:	28 2f       	mov	r18, r24
		LSL   R18                                         ;x2                     (  1 clock ) 
     ef2:	22 0f       	add	r18, r18
		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
     ef4:	e6 e4       	ldi	r30, 0x46	; 70
		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
     ef6:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
     ef8:	e2 0f       	add	r30, r18
		LDI   R18                , 0x00                   ;load 0                 (  1 clock ) 
     efa:	20 e0       	ldi	r18, 0x00	; 0
		ADC   ZH                 , R18                    ;add high byte+carry    (  1 clock ) 
     efc:	f2 1f       	adc	r31, r18
		LDD   R24                , Z+0                    ;load sleep time        (  2 clocks) 
     efe:	80 81       	ld	r24, Z
		LDD   R25                , Z+1                    ;load sleep time        (  2 clocks) 
     f00:	91 81       	ldd	r25, Z+1	; 0x01
		RET                                               ;return from subroutine (  4 clocks) 
     f02:	08 95       	ret

00000f04 <Kernel_Task_Status_Get>:
;used registers          : R18, R24, R30(ZL), R31(ZH)                                          
;arg registers           : R24(TaskID)                                                         
;return registers        : R24(TaskSts)                                                        
;unsafe access registers : R18, R24, R30(ZL), R31(ZH)                                          
Kernel_Task_Status_Get:                                   ;total 1.50uS @8MHz     ( 12 clocks) 
		MOV   R18                , R24                    ;copy                   (  1 clock ) 
     f04:	28 2f       	mov	r18, r24
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
     f06:	e2 e3       	ldi	r30, 0x32	; 50
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
     f08:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
     f0a:	e2 0f       	add	r30, r18
		LDI   R18                , 0x00                   ;load 0                 (  1 clock ) 
     f0c:	20 e0       	ldi	r18, 0x00	; 0
		ADC   ZH                 , R18                    ;add high byte+carry    (  1 clock ) 
     f0e:	f2 1f       	adc	r31, r18
		LD    R24                , Z                      ;load task status       (  2 clocks) 
     f10:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
     f12:	08 95       	ret

00000f14 <Kernel_NTask_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(NTask)                                                          
;unsafe access registers : R24                                                                 
Kernel_NTask_Get:                                         ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                 , KerBase+OFB_NTSK      ;load ntask             (  2 clock ) 
     f14:	80 91 08 01 	lds	r24, 0x0108
		RET                                               ;return from subroutine (  4 clocks) 
     f18:	08 95       	ret

00000f1a <Kernel_Task_Prio_Get>:
;arg registers           : R24(TaskID)                                                         
;return registers        : R24(TaskPriority)                                                   
;unsafe access registers : R18, R24, R30(ZL), R31(ZH)                                          
Kernel_Task_Prio_Get:                                     ;total 1.50uS @8MHz     ( 12 clocks) 
		;get priority of the task id, arg (task_id->R24), return R24                           
		MOV   R18                , R24                    ;copy task_id           (  1 clock ) 
     f1a:	28 2f       	mov	r18, r24
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
     f1c:	ec e3       	ldi	r30, 0x3C	; 60
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
     f1e:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
     f20:	e2 0f       	add	r30, r18
		LDI   R18                , 0x00                   ;clear reg              (  1 clock ) 
     f22:	20 e0       	ldi	r18, 0x00	; 0
		ADC   ZH                 , R18                    ;add high byte+carry    (  1 clock ) 
     f24:	f2 1f       	adc	r31, r18
		LD    R24                , Z                      ;load priority          (  2 clocks) 
     f26:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
     f28:	08 95       	ret

00000f2a <Kernel_Lowest_Prio_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(LowestPriorityVal)                                              
;unsafe access registers : R24                                                                 
Kernel_Lowest_Prio_Get:                                   ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
     f2a:	80 91 09 01 	lds	r24, 0x0109
		RET                                               ;return from subroutine (  4 clocks) 
     f2e:	08 95       	ret

00000f30 <Kernel_High_Prio_Task_ID_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(HighstPriorityTaskID)->UserTaskID (Excluding Idle Task)         
;unsafe access registers : R24                                                                 
Kernel_High_Prio_Task_ID_Get:                             ;total 0.88uS @8MHz     (  7 clocks) 
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
     f30:	80 91 0a 01 	lds	r24, 0x010A
		DEC   R24                                         ;decrement by 1         (  1 clock ) 
     f34:	8a 95       	dec	r24
		RET                                               ;return from subroutine (  4 clocks) 
     f36:	08 95       	ret

00000f38 <Kernel_Abs_High_Prio_Task_ID_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(HighstPriorityTaskID)->AbsoluteTaskID (Including Idle Task)     
;unsafe access registers : R24                                                                 
Kernel_Abs_High_Prio_Task_ID_Get:                         ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
     f38:	80 91 0a 01 	lds	r24, 0x010A
		RET                                               ;return from subroutine (  4 clocks) 
     f3c:	08 95       	ret

00000f3e <Kernel_CPU_Usage_Get>:
;arg registers           : None                                                                
;return registers        : R24(CurrentCpuUsage)->In percentage                                 
;unsafe access registers : R24                                                                 
Kernel_CPU_Usage_Get:                                     ;total 0.75uS @8MHz     (  6 clocks) 
		;get cpu usage, return R24                                                             
		LDS   R24                , KerBase+OFB_USAGE      ;load cpu usage         (  2 clocks) 
     f3e:	80 91 0d 01 	lds	r24, 0x010D
		RET                                               ;return from subroutine (  4 clocks) 
     f42:	08 95       	ret

00000f44 <Debug_Init>:


;;===================================debug init starting====================================;; 
Debug_Init:                                               ;total 2.38uS @8MHz     ( 19 clocks) 
        ;init registers for UART0 (Arg R25:R24->UBRRH:UBRRL)                                   
		LDI   R18                , (1<<1)                 ;mask U2x               (  1 clock ) 
     f44:	22 e0       	ldi	r18, 0x02	; 2
		STS   SRUCSR0A           , R18                    ;load val to UCSR0A     (  2 clocks) 
     f46:	20 93 c0 00 	sts	0x00C0, r18
		MOV   R18                , R25                    ;copy R25->baud rate H  (  1 clock ) 
     f4a:	29 2f       	mov	r18, r25
		STS   SRUBRR0H           , R18                    ;load val to UBRR0H     (  2 clocks) 
     f4c:	20 93 c5 00 	sts	0x00C5, r18
		MOV   R18                , R24                    ;copy R24->baud rate L  (  1 clock ) 
     f50:	28 2f       	mov	r18, r24
		STS   SRUBRR0L           , R18                    ;load val to UBRR0L     (  2 clocks) 
     f52:	20 93 c4 00 	sts	0x00C4, r18
		LDI   R18                , (1<<1)|(1<<2)          ;config 8 data bit      (  1 clock ) 
     f56:	26 e0       	ldi	r18, 0x06	; 6
		STS   SRUCSR0C           , R18                    ;load val to UCSR0C     (  2 clocks) 
     f58:	20 93 c2 00 	sts	0x00C2, r18
		LDI   R18                , (1<<3)                 ;enable tx              (  1 clock ) 
     f5c:	28 e0       	ldi	r18, 0x08	; 8
		STS   SRUCSR0B           , R18                    ;load val to UCSR0B     (  2 clocks) 
     f5e:	20 93 c1 00 	sts	0x00C1, r18
        RET                                               ;return from subroutine (  4 clocks) 
     f62:	08 95       	ret

00000f64 <Debug_Tx_Byte>:


;;====================================debug tx starting=====================================;; 
Debug_Tx_Byte:                                            ;total 2.00uS+LT @8MHz  ( 16 clocks) 
		;write single byte to data register (Arg R24)                                          
		PUSH  R18                                         ;save reg               (  2 clocks) 
     f64:	2f 93       	push	r18
		STS   SRUDR0             , R24                    ;load val to UDR0       (  2 clocks) 
     f66:	80 93 c6 00 	sts	0x00C6, r24

00000f6a <__UDRE0_CLEARED>:
                                                                                               
    __UDRE0_CLEARED:                                      ;undefined loop wrt ck               
		LDS   R18                , SRUCSR0A               ;load UCSR0A to R18     (  2 clocks) 
     f6a:	20 91 c0 00 	lds	r18, 0x00C0
		SBRS  R18                , 0x05                   ;skip if UDRE0 is set   (  2 clocks) 
     f6e:	25 ff       	sbrs	r18, 5
		RJMP  __UDRE0_CLEARED                             ;wait until UDRE0 is set(  2 clocks) 
     f70:	fc cf       	rjmp	.-8      	; 0xf6a <__UDRE0_CLEARED>
		POP   R18                                         ;restore reg            (  2 clocks) 
     f72:	2f 91       	pop	r18
        RET                                               ;return from subroutine (  4 clocks) 
     f74:	08 95       	ret

00000f76 <Debug_Tx_Word>:


;;==================================debug tx word starting==================================;; 
Debug_Tx_Word:                                            ;total 2.00uS+LT @8MHz  ( 16 clocks) 
		;write 2 bytes, (Arg R24, R25), Args retained                                          
		PUSH  R24                                         ;save reg               (  2 clocks) 
     f76:	8f 93       	push	r24
		MOV   R24                , R25                    ;copy reg               (  1 clock ) 
     f78:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte                               ;send via uart          ( 21 clocks) 
     f7a:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
        POP   R24                                         ;restore reg            (  2 clocks) 
     f7e:	8f 91       	pop	r24
		CALL  Debug_Tx_Byte                               ;send via uart          ( 21 clocks) 
     f80:	0e 94 b2 07 	call	0xf64	; 0xf64 <Debug_Tx_Byte>
        RET                                               ;return from subroutine (  4 clocks) 
     f84:	08 95       	ret

00000f86 <Debug_Tx_Byte_Conf>:


;;================================debug tx confirm starting=================================;; 
Debug_Tx_Byte_Conf:                                       ;total 2.63uS+LT @8MHz  ( 21 clocks) 
        ;write 1 byte, (Arg R24), Args retained                                                
		PUSH  R18                                         ;save reg               (  2 clocks) 
     f86:	2f 93       	push	r18
		STS   SRUDR0             , R24                    ;load val to UDR0,      (  2 clocks) 
     f88:	80 93 c6 00 	sts	0x00C6, r24

00000f8c <__TXC0_CLEARED>:
    __TXC0_CLEARED:                                                                            
		LDS   R18                , SRUCSR0A               ;load UCSR0A to R18,    (  2 clocks) 
     f8c:	20 91 c0 00 	lds	r18, 0x00C0
		SBRS  R18                , 0x06                   ;skip if TXC0 is set,   (  2 clocks) 
     f90:	26 ff       	sbrs	r18, 6
		RJMP  __TXC0_CLEARED                              ;wait until TXC0 is set (  2 clocks) 
     f92:	fc cf       	rjmp	.-8      	; 0xf8c <__TXC0_CLEARED>
		LDS   R18                , SRUCSR0A               ;load UCSR0A to R18,    (  2 clocks) 
     f94:	20 91 c0 00 	lds	r18, 0x00C0
		ORI   R18                , (1<<6)                 ;mask bit 6,            (  1 clock ) 
     f98:	20 64       	ori	r18, 0x40	; 64
		STS   SRUCSR0A           , R18                    ;write reg with bit msk (  2 clocks) 
     f9a:	20 93 c0 00 	sts	0x00C0, r18
		POP   R18                                         ;restore reg            (  2 clocks) 
     f9e:	2f 91       	pop	r18
        RET                                               ;return from subroutine (  4 clocks) 
     fa0:	08 95       	ret

00000fa2 <Debug_Tx_Word_Conf>:


;;==============================debug tx word confirm starting==============================;; 
Debug_Tx_Word_Conf:                                       ;total 6.38uS+LT @8MHz  ( 51 clocks) 
        ;write 2 bytes, (Arg R24, R25), Args retained                                          
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
     fa2:	0e 94 c3 07 	call	0xf86	; 0xf86 <Debug_Tx_Byte_Conf>
		PUSH  R24                                         ;save reg               (  2 clocks) 
     fa6:	8f 93       	push	r24
		MOV   R24                , R25                    ;copy R25 to R24        (  1 clock ) 
     fa8:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
     faa:	0e 94 c3 07 	call	0xf86	; 0xf86 <Debug_Tx_Byte_Conf>
		POP   R24                                         ;restore reg            (  2 clocks) 
     fae:	8f 91       	pop	r24
        RET                                               ;return from subroutine (  4 clocks) 
     fb0:	08 95       	ret

00000fb2 <Debug_Tx_DWord_Conf>:


;;==============================debug tx dword confirm starting=============================;; 
Debug_Tx_DWord_Conf:                                      ;total 12.38uS+LT @8MHz ( 99 clocks) 
        ;write 4 bytes, (Arg R22-R25), Args retained                                           
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks) 
     fb2:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R22                    ;copy R22 to R24          (1 clock ) 
     fb6:	86 2f       	mov	r24, r22
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
     fb8:	0e 94 c3 07 	call	0xf86	; 0xf86 <Debug_Tx_Byte_Conf>
		MOV   R24                , R23                    ;copy R23 to R24          (1 clock ) 
     fbc:	87 2f       	mov	r24, r23
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
     fbe:	0e 94 c3 07 	call	0xf86	; 0xf86 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24              (2 clocks) 
     fc2:	80 91 4a 00 	lds	r24, 0x004A
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
     fc6:	0e 94 c3 07 	call	0xf86	; 0xf86 <Debug_Tx_Byte_Conf>
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks) 
     fca:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R25                    ;copy R22 to R24          (1 clock ) 
     fce:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
     fd0:	0e 94 c3 07 	call	0xf86	; 0xf86 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24 val,         (2 clocks) 
     fd4:	80 91 4a 00 	lds	r24, 0x004A
        RET                                               ;return from subroutine,  (4 clocks) 
     fd8:	08 95       	ret

00000fda <Debug_Tx_From_RAM>:


;;=============================debug tx confirm from ram starting===========================;; 
Debug_Tx_From_RAM:                                        ;total 4.38uS+LT @8MHz  ( 35 clocks) 
        ;print data from RAM address (Arg R24-R25)                                             
		MOV   R16                , R30                    ;copy R30 to R16          (1 clock ) 
     fda:	0e 2f       	mov	r16, r30
		MOV   R17                , R31                    ;copy R31 to R17          (1 clock ) 
     fdc:	1f 2f       	mov	r17, r31
		MOV   R18                , R24                    ;copy R24 to R18          (1 clock ) 
     fde:	28 2f       	mov	r18, r24
		MOV   R30                , R24                    ;copy R22 to R24          (1 clock ) 
     fe0:	e8 2f       	mov	r30, r24
		MOV   R31                , R25                    ;copy R22 to R24          (1 clock ) 
     fe2:	f9 2f       	mov	r31, r25
		LD    R24                , Z                      ;load val to R24          (2 clocks) 
     fe4:	80 81       	ld	r24, Z
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
     fe6:	0e 94 c3 07 	call	0xf86	; 0xf86 <Debug_Tx_Byte_Conf>
		MOV   R30                , R16                    ;copy R16 to R30          (1 clock ) 
     fea:	e0 2f       	mov	r30, r16
		MOV   R31                , R17                    ;copy R17 to R31          (1 clock ) 
     fec:	f1 2f       	mov	r31, r17
		MOV   R24                , R18                    ;copy R18 to R24          (1 clock ) 
     fee:	82 2f       	mov	r24, r18
        RET                                               ;return from subroutine,  (4 clocks) 
     ff0:	08 95       	ret

00000ff2 <Debug_Tx_RAM_Area>:

;;=============================debug tx confirm ram area starting===========================;; 
Debug_Tx_RAM_Area:                                        ;5.5uS+LT x R22 @8MHz   ( 44 clocks) 
        ;print data from RAM address (arguments R24:R25, R22)                                  
	__DUMP_BYTES:                                                                              
	    CALL  Debug_Tx_From_RAM                           ;send via uart from ram              
     ff2:	0e 94 ed 07 	call	0xfda	; 0xfda <Debug_Tx_From_RAM>
		SUBI  R24                , 0x01                   ;decrement from LSByte               
     ff6:	81 50       	subi	r24, 0x01	; 1
        SBCI  R25                , 0x00                   ;decrement if carry                  
     ff8:	90 40       	sbci	r25, 0x00	; 0
		SUBI  R22                , 0x01                   ;decrement                           
     ffa:	61 50       	subi	r22, 0x01	; 1
		BRNE  __DUMP_BYTES                                                                     
     ffc:	d1 f7       	brne	.-12     	; 0xff2 <Debug_Tx_RAM_Area>
        RET                                               ;return from subroutine,  (4 clocks) 
     ffe:	08 95       	ret

00001000 <_exit>:
    1000:	f8 94       	cli

00001002 <__stop_program>:
    1002:	ff cf       	rjmp	.-2      	; 0x1002 <__stop_program>
