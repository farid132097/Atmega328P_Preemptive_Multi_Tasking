
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000450  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000192  00800100  00800100  000004c4  2**0
                  ALLOC
  2 .stab         00000a98  00000000  00000000  000004c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000006c  00000000  00000000  00000f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000005d  00000000  00000000  00001008  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000022e  00000000  00000000  00001065  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000108  00000000  00000000  00001293  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000225  00000000  00000000  0000139b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  000015c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000109  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000078  00000000  00000000  00001729  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000017a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_16>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	00 00       	nop
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 00       	nop
  76:	00 00       	nop
  78:	00 00       	nop
  7a:	00 00       	nop
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 00       	nop
  82:	00 00       	nop
  84:	00 00       	nop
  86:	00 00       	nop
  88:	41 c0       	rjmp	.+130    	; 0x10c <__vector_16>

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61
  96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  9a:	0c 94 26 02 	jmp	0x44c	; 0x44c <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:

int main(void) {
    
	
	//Debug_Init();
	Kernel_SysTick_Reg_Init(1000);
  a2:	88 ee       	ldi	r24, 0xE8	; 232
  a4:	93 e0       	ldi	r25, 0x03	; 3
  a6:	0e 94 11 01 	call	0x222	; 0x222 <Kernel_SysTick_Reg_Init>
	Kernel_Task0_Init();
  aa:	0e 94 82 01 	call	0x304	; 0x304 <Kernel_Task0_Init>
	Kernel_Task1_Init();
  ae:	0e 94 bd 01 	call	0x37a	; 0x37a <Kernel_Task1_Init>
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <main+0x10>

000000b4 <Tasks_Task0>:
#include <util/delay.h>
#include "kernel.h"
#include "tasks.h"

void Tasks_Task0(void){
  DDRD |= (1<<5);
  b4:	55 9a       	sbi	0x0a, 5	; 10
  
  while(1){
    PORTD ^= (1<<5);
  b6:	40 e2       	ldi	r20, 0x20	; 32
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b8:	28 ec       	ldi	r18, 0xC8	; 200
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	8b b1       	in	r24, 0x0b	; 11
  be:	84 27       	eor	r24, r20
  c0:	8b b9       	out	0x0b, r24	; 11
  c2:	84 ef       	ldi	r24, 0xF4	; 244
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	f9 01       	movw	r30, r18
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <SRUDR0+0x2>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ce:	d9 f7       	brne	.-10     	; 0xc6 <SRUDR0>
  d0:	f5 cf       	rjmp	.-22     	; 0xbc <Tasks_Task0+0x8>

000000d2 <Tasks_Task1>:
	_delay_ms(50);
  }
}

void Tasks_Task1(void){
  DDRD |= (1<<6);
  d2:	56 9a       	sbi	0x0a, 6	; 10
  
  while(1){
    PORTD ^= (1<<6);
  d4:	40 e4       	ldi	r20, 0x40	; 64
  d6:	28 ec       	ldi	r18, 0xC8	; 200
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	8b b1       	in	r24, 0x0b	; 11
  dc:	84 27       	eor	r24, r20
  de:	8b b9       	out	0x0b, r24	; 11
  e0:	88 e5       	ldi	r24, 0x58	; 88
  e2:	92 e0       	ldi	r25, 0x02	; 2
  e4:	f9 01       	movw	r30, r18
  e6:	31 97       	sbiw	r30, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <Tasks_Task1+0x14>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ec:	d9 f7       	brne	.-10     	; 0xe4 <Tasks_Task1+0x12>
  ee:	f5 cf       	rjmp	.-22     	; 0xda <Tasks_Task1+0x8>

000000f0 <Tasks_Task2>:
	_delay_ms(60);
  }
}

void Tasks_Task2(void){
  DDRD |= (1<<7);
  f0:	57 9a       	sbi	0x0a, 7	; 10
  f2:	28 ec       	ldi	r18, 0xC8	; 200
  f4:	30 e0       	ldi	r19, 0x00	; 0
  
  while(1){
    PORTD ^= (1<<7);
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	80 58       	subi	r24, 0x80	; 128
  fa:	8b b9       	out	0x0b, r24	; 11
  fc:	8c eb       	ldi	r24, 0xBC	; 188
  fe:	92 e0       	ldi	r25, 0x02	; 2
 100:	f9 01       	movw	r30, r18
 102:	31 97       	sbiw	r30, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <Tasks_Task2+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 106:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 108:	d9 f7       	brne	.-10     	; 0x100 <Tasks_Task2+0x10>
 10a:	f5 cf       	rjmp	.-22     	; 0xf6 <Tasks_Task2+0x6>

0000010c <__vector_16>:
.global  __vector_16
    __vector_16:
	    
		;;============================if kernel debug enabled===============================;;
	    #ifdef KER_DBG_ENABLE
        SBI   KER_DBG_PORT       , KER_DBG_PIN            ;set gpio,                (2 clocks)
 10c:	29 9a       	sbi	0x05, 1	; 5
		
		
		;;==============================context save========================================;;
		;; total 68 clocks for context saving
		#ifdef KER_CNTXT_SV_ISR
        KER_CNTXT_SV
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	1f 92       	push	r1
 116:	11 24       	eor	r1, r1
 118:	2f 92       	push	r2
 11a:	3f 92       	push	r3
 11c:	4f 92       	push	r4
 11e:	5f 92       	push	r5
 120:	6f 92       	push	r6
 122:	7f 92       	push	r7
 124:	8f 92       	push	r8
 126:	9f 92       	push	r9
 128:	af 92       	push	r10
 12a:	bf 92       	push	r11
 12c:	cf 92       	push	r12
 12e:	df 92       	push	r13
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	2f 93       	push	r18
 13a:	3f 93       	push	r19
 13c:	4f 93       	push	r20
 13e:	5f 93       	push	r21
 140:	6f 93       	push	r22
 142:	7f 93       	push	r23
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
 148:	af 93       	push	r26
 14a:	bf 93       	push	r27
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	ef 93       	push	r30
 152:	ff 93       	push	r31
		#endif
		
		;;=============================reload counter value=================================;;
		;; total 4 clocks for reloading
		LDS   R16                , Kernel+0x08            ;fetch reload value,      (2 clocks) 
 154:	00 91 08 01 	lds	r16, 0x0108
		STS   SRTCNT0            , R16                    ;Set value to TCNT0,      (2 clocks) 
 158:	00 93 46 00 	sts	0x0046, r16
		
		
		;;=============================increment tick counter===============================;;
		;; total 27 clocks for reloading, 40 bit counter
		KER_TICK_INC
 15c:	01 e0       	ldi	r16, 0x01	; 1
 15e:	10 91 00 01 	lds	r17, 0x0100
 162:	10 0f       	add	r17, r16
 164:	10 93 00 01 	sts	0x0100, r17
 168:	00 e0       	ldi	r16, 0x00	; 0
 16a:	10 91 01 01 	lds	r17, 0x0101
 16e:	10 1f       	adc	r17, r16
 170:	10 93 01 01 	sts	0x0101, r17
 174:	10 91 02 01 	lds	r17, 0x0102
 178:	10 1f       	adc	r17, r16
 17a:	10 93 02 01 	sts	0x0102, r17
 17e:	10 91 03 01 	lds	r17, 0x0103
 182:	10 1f       	adc	r17, r16
 184:	10 93 03 01 	sts	0x0103, r17
 188:	10 91 04 01 	lds	r17, 0x0104
 18c:	10 1f       	adc	r17, r16
 18e:	10 93 04 01 	sts	0x0104, r17
		
		
		;;========================check current task index, save SP=========================;;
		;;
		#ifdef KER_TSK_SW_ISR
	    LDS   R16                , ker_tski               ;fetch task index,        (2 clocks)
 192:	00 91 0a 01 	lds	r16, 0x010A
		CPI   R16                , 0                      ;check if val!=0          (1 clock )
 196:	00 30       	cpi	r16, 0x00	; 0
		BRNE  TSK1                                        ;goto saving task1 SP     (2 clocks)
 198:	81 f4       	brne	.+32     	; 0x1ba <TSK1>

0000019a <TSK0>:
		
		
		;;======================save stack pointer0, set task index 1=======================;;
		;;
	TSK0:
	    IN    R24                , IOSPL                  ;fetch SPL0,              (1 clock )
 19a:	8d b7       	in	r24, 0x3d	; 61
		IN    R25                , IOSPH                  ;fetch SPH0,              (1 clock )
 19c:	9e b7       	in	r25, 0x3e	; 62
		STS   ker_stp+0x00       , R24                    ;load  SPL0,              (2 clocks)
 19e:	80 93 0c 01 	sts	0x010C, r24
		STS   ker_stp+0x01       , R25                    ;load  SPH0,              (2 clocks)
 1a2:	90 93 0d 01 	sts	0x010D, r25
		LDI   R16                , 0x01                   ;set ker_tski to 1,       (1 clock )
 1a6:	01 e0       	ldi	r16, 0x01	; 1
		STS   ker_tski           , R16                    ;load  ker_tski=1,        (2 clocks)
 1a8:	00 93 0a 01 	sts	0x010A, r16
		LDS   R24                , ker_stp+0x02           ;fetch SPL0,              (2 clocks)
 1ac:	80 91 0e 01 	lds	r24, 0x010E
		LDS   R25                , ker_stp+0x03           ;fetch SPH0,              (2 clocks)
 1b0:	90 91 0f 01 	lds	r25, 0x010F
		OUT   IOSPL              , R24                    ;load SPL0,               (1 clock )
 1b4:	8d bf       	out	0x3d, r24	; 61
		OUT   IOSPH              , R25                    ;load SPH0,               (1 clock )
 1b6:	9e bf       	out	0x3e, r25	; 62
		RJMP  RS_CNTXT                                    ;jump to restore context, (2 clocks)
 1b8:	10 c0       	rjmp	.+32     	; 0x1da <RS_CNTXT>

000001ba <TSK1>:
		
		
	    ;;======================save stack pointer1, set task index 0=======================;;
		;;
	TSK1:
	    IN    R24                , IOSPL                  ;fetch SPL0,              (1 clock )
 1ba:	8d b7       	in	r24, 0x3d	; 61
		IN    R25                , IOSPH                  ;fetch SPH0,              (1 clock )
 1bc:	9e b7       	in	r25, 0x3e	; 62
		STS   ker_stp+0x02       , R24                    ;load  SPL0,              (2 clocks)
 1be:	80 93 0e 01 	sts	0x010E, r24
		STS   ker_stp+0x03       , R25                    ;load  SPH0,              (2 clocks)
 1c2:	90 93 0f 01 	sts	0x010F, r25
		LDI   R16                , 0x00                   ;set ker_tski to 0,       (1 clock )
 1c6:	00 e0       	ldi	r16, 0x00	; 0
		STS   ker_tski           , R16                    ;load  ker_tski=0,        (2 clocks)
 1c8:	00 93 0a 01 	sts	0x010A, r16
		LDS   R24                , ker_stp+0x00           ;fetch SPL0,              (2 clocks)
 1cc:	80 91 0c 01 	lds	r24, 0x010C
		LDS   R25                , ker_stp+0x01           ;fetch SPH0,              (2 clocks)
 1d0:	90 91 0d 01 	lds	r25, 0x010D
		OUT   IOSPL              , R24                    ;load SPL0,               (1 clock )
 1d4:	8d bf       	out	0x3d, r24	; 61
		OUT   IOSPH              , R25                    ;load SPH0,               (1 clock )
 1d6:	9e bf       	out	0x3e, r25	; 62
		RJMP  RS_CNTXT                                    ;jump to restore context, (2 clocks)
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <RS_CNTXT>

000001da <RS_CNTXT>:
		
	RS_CNTXT:
		;;===============================context restore====================================;;
		;; total 68 clocks for context restore
		#ifdef KER_CNTXT_RS_ISR
		KER_CNTXT_RS
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	bf 91       	pop	r27
 1e4:	af 91       	pop	r26
 1e6:	9f 91       	pop	r25
 1e8:	8f 91       	pop	r24
 1ea:	7f 91       	pop	r23
 1ec:	6f 91       	pop	r22
 1ee:	5f 91       	pop	r21
 1f0:	4f 91       	pop	r20
 1f2:	3f 91       	pop	r19
 1f4:	2f 91       	pop	r18
 1f6:	1f 91       	pop	r17
 1f8:	0f 91       	pop	r16
 1fa:	ff 90       	pop	r15
 1fc:	ef 90       	pop	r14
 1fe:	df 90       	pop	r13
 200:	cf 90       	pop	r12
 202:	bf 90       	pop	r11
 204:	af 90       	pop	r10
 206:	9f 90       	pop	r9
 208:	8f 90       	pop	r8
 20a:	7f 90       	pop	r7
 20c:	6f 90       	pop	r6
 20e:	5f 90       	pop	r5
 210:	4f 90       	pop	r4
 212:	3f 90       	pop	r3
 214:	2f 90       	pop	r2
 216:	1f 90       	pop	r1
 218:	0f 90       	pop	r0
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	0f 90       	pop	r0
		#endif
		
		;;============================if kernel debug enabled===============================;;
		#ifdef KER_DBG_ENABLE
		CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear gpio,              (2 clocks)
 21e:	29 98       	cbi	0x05, 1	; 5
		#endif
		
		RETI                                              ;return from interrupt,   (4 clocks) 
 220:	18 95       	reti

00000222 <Kernel_SysTick_Reg_Init>:

;;====================================SysTick Reg Init=======================================;;
;; total 32 clocks for SysTick Reg Init, omited debug gpio config
Kernel_SysTick_Reg_Init:
        ;clear all kernel variables
		LDI   R16                , 0x00                   ;set 0x00 to R16,         (1 clock )
 222:	00 e0       	ldi	r16, 0x00	; 0
		STS   Kernel+0x00        , R16                    ;clear  kernel[0],        (2 clocks)
 224:	00 93 00 01 	sts	0x0100, r16
		STS   Kernel+0x01        , R16                    ;clear  kernel[1],        (2 clocks)
 228:	00 93 01 01 	sts	0x0101, r16
		STS   Kernel+0x02        , R16                    ;clear  kernel[2],        (2 clocks)
 22c:	00 93 02 01 	sts	0x0102, r16
		STS   Kernel+0x03        , R16                    ;clear  kernel[3],        (2 clocks)
 230:	00 93 03 01 	sts	0x0103, r16
		STS   Kernel+0x04        , R16                    ;clear  kernel[4],        (2 clocks)
 234:	00 93 04 01 	sts	0x0104, r16
		STS   Kernel+0x05        , R16                    ;clear  kernel[5],        (2 clocks)
 238:	00 93 05 01 	sts	0x0105, r16
		STS   Kernel+0x06        , R16                    ;clear  kernel[6],        (2 clocks)
 23c:	00 93 06 01 	sts	0x0106, r16
		STS   Kernel+0x07        , R16                    ;clear  kernel[7],        (2 clocks)
 240:	00 93 07 01 	sts	0x0107, r16
		STS   Kernel+0x08        , R16                    ;clear  kernel[8],        (2 clocks)
 244:	00 93 08 01 	sts	0x0108, r16
		
		#ifdef KER_DBG_ENABLE
		SBI   KER_DBG_DDR        , KER_DBG_PIN            ;set bit in DDR,          (2 clocks) 
 248:	21 9a       	sbi	0x04, 1	; 4
		CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear port bit,          (2 clocks) 
 24a:	29 98       	cbi	0x05, 1	; 5
		#endif
		
		
        CLI                                               ;disable global interrupt,(1 clock ) 
 24c:	f8 94       	cli
		LDI   R16                , 0x00                   ;store r16 with 0,        (1 clock ) 
 24e:	00 e0       	ldi	r16, 0x00	; 0
		STS   SRTCCR0A           , R16                    ;clear TCCR0A,            (2 clocks) 
 250:	00 93 44 00 	sts	0x0044, r16
		STS   SRTCCR0B           , R16                    ;clear TCCR0B,            (2 clocks) 
 254:	00 93 45 00 	sts	0x0045, r16
		STS   SRTIMSK0           , R16                    ;clear TIMSK0,            (2 clocks) 
 258:	00 93 6e 00 	sts	0x006E, r16
		STS   SRTIFR0            , R16                    ;clear TIFR0,             (2 clocks) 
 25c:	00 93 35 00 	sts	0x0035, r16
		STS   SROCR0A            , R16                    ;clear OCR0A,             (2 clocks) 
 260:	00 93 47 00 	sts	0x0047, r16
		STS   SROCR0B            , R16                    ;clear OCR0B,             (2 clocks) 
 264:	00 93 48 00 	sts	0x0048, r16
		STS   SRTCNT0            , R16                    ;clear TCNT0,             (2 clocks) 
 268:	00 93 46 00 	sts	0x0046, r16
		LDI   R16                , KER_PRS                ;prescaler 64,            (1 clock ) 
 26c:	03 e0       	ldi	r16, 0x03	; 3
		STS   SRTCCR0B           , R16                    ;set to TCCR0B,           (2 clocks)
 26e:	00 93 45 00 	sts	0x0045, r16
		LDI   R16                , KER_RLD                ;reload value (130),      (1 clock ) 
 272:	02 e8       	ldi	r16, 0x82	; 130
		STS   Kernel+0x08        , R16                    ;Kernel[5] reload value,  (2 clocks) 
 274:	00 93 08 01 	sts	0x0108, r16
		STS   SRTCNT0            , R16                    ;set to TCNT0,            (2 clocks) 
 278:	00 93 46 00 	sts	0x0046, r16
		LDI   R16                , 0x01                   ;store with TOIE0 enabled,(1 clock ) 
 27c:	01 e0       	ldi	r16, 0x01	; 1
		STS   SRTIMSK0           , R16                    ;set to TIMSK0,           (2 clocks) 
 27e:	00 93 6e 00 	sts	0x006E, r16
		;SEI                                               ;enable global interrupt, (1 clock ) 
		RET                                               ;return from subroutine,  (4 clocks) 
 282:	08 95       	ret

00000284 <Kernel_SysTick_Val_Get>:

;;===================================SysTick Value Get======================================;;
;; total 20 clocks for SysTick Value Get
;; interrupts disabled for 16 clocks
Kernel_SysTick_Val_Get:
        IN    R16                , IOSREG                 ;Save SREG,               (1 clock ) 
 284:	0f b7       	in	r16, 0x3f	; 63
        CLI                                               ;Disable interrupts,      (1 clock ) 
 286:	f8 94       	cli
		LDS   R18		         , Kernel+0x00            ;Byte0 -> R18 (LSB),      (2 clocks) 
 288:	20 91 00 01 	lds	r18, 0x0100
		LDS   R19		         , Kernel+0x01            ;Byte1 -> R19,            (2 clocks) 
 28c:	30 91 01 01 	lds	r19, 0x0101
		LDS   R20		         , Kernel+0x02            ;Byte2 -> R20,            (2 clocks) 
 290:	40 91 02 01 	lds	r20, 0x0102
		LDS   R21		         , Kernel+0x03            ;Byte3 -> R21,            (2 clocks) 
 294:	50 91 03 01 	lds	r21, 0x0103
		LDS   R22		         , Kernel+0x04            ;Byte4 -> R22,            (2 clocks) 
 298:	60 91 04 01 	lds	r22, 0x0104
		LDI   R23		         , 0x00                   ;Byte5 -> R23,            (1 clocks) 
 29c:	70 e0       	ldi	r23, 0x00	; 0
		LDI   R24		         , 0x00                   ;Byte6 -> R24,            (1 clocks) 
 29e:	80 e0       	ldi	r24, 0x00	; 0
		LDI   R25		         , 0x00                   ;Byte7 -> R25 (MSB),      (1 clocks) 
 2a0:	90 e0       	ldi	r25, 0x00	; 0
		OUT   IOSREG             , R16          		  ;Restore SREG,            (1 clock )
 2a2:	0f bf       	out	0x3f, r16	; 63
		RET                                               ;return from subroutine,  (4 clocks) 
 2a4:	08 95       	ret

000002a6 <Kernel_Interrupt_Sts_Get>:


;;=================================Interrupt Status Get=====================================;;
;; total 10 clocks for Interrupt Status Get
Kernel_Interrupt_Sts_Get:
        LDI   R24		         , 0x00                   ;clear R24,               (1 clock ) 
 2a6:	80 e0       	ldi	r24, 0x00	; 0
        IN    R16		         , IOSREG                 ;save SREG in R16,        (1 clock )
 2a8:	0f b7       	in	r16, 0x3f	; 63
		SBRC  R16		         , 0x07                   ;check I flag->bit7,      (3 clocks)
 2aa:	07 fd       	sbrc	r16, 7
		LDI   R24		         , 0x01                   ;set R24 to 1,            (1 clock ) 
 2ac:	81 e0       	ldi	r24, 0x01	; 1
		RET                                               ;return from subroutine,  (4 clocks) 
 2ae:	08 95       	ret

000002b0 <Kernel_Test_Task0>:


;;===================================Kernel Test Task0======================================;;
Kernel_Test_Task0:
        ;initialize DDR and Port register, total 4 clocks
        SBI   KER_TSK0_DDR       , KER_TSK0_PIN           ;set bit in DDR,          (2 clocks) 
 2b0:	55 9a       	sbi	0x0a, 5	; 10
		CBI   KER_TSK0_PORT      , KER_TSK0_PIN           ;clear port bit,          (2 clocks)
 2b2:	5d 98       	cbi	0x0b, 5	; 11

000002b4 <LOOP0>:
		 
    LOOP0:
	    ;pin toggle, total 5 clocks
		IN    R16                , KER_TSK0_PORT          ;load PORT val,           (2 clocks)
 2b4:	0b b1       	in	r16, 0x0b	; 11
		LDI   R17                , (1<<KER_TSK0_PIN)      ;bit mask for port pin    (1 clock )
 2b6:	10 e2       	ldi	r17, 0x20	; 32
		EOR   R16                , R17                    ;XOR with current val     (1 clock )
 2b8:	01 27       	eor	r16, r17
		OUT   KER_TSK0_PORT      , R16                    ;set new PORT val,        (1 clock )
 2ba:	0b b9       	out	0x0b, r16	; 11
		
		;assign delay loop count val, for 30ms 
		LDI   R16                , 0xEB                   ;set loop cnt val,        (1 clock )
 2bc:	0b ee       	ldi	r16, 0xEB	; 235

000002be <DLY00>:
		
    DLY00:
	    LDI   R17                , 0xFF                   ;set loop cnt val,        (1 clock )
 2be:	1f ef       	ldi	r17, 0xFF	; 255

000002c0 <DLY01>:
		
	DLY01:                                                ;inner loop,127.5uS@8Mhz  (4 clocks)
		NOP                                               ;no operation,            (1 clock )
 2c0:	00 00       	nop
		DEC   R17                                         ;decrement R17 val,       (1 clock )
 2c2:	1a 95       	dec	r17
		BRNE  DLY01                                       ;if R17 not equal to 0,   (2 clock ) 
 2c4:	e9 f7       	brne	.-6      	; 0x2c0 <DLY01>
		DEC   R16                                         ;decrement R16 val,       (1 clock )
 2c6:	0a 95       	dec	r16
		BRNE  DLY00                                       ;if R16 not equal to 0,   (2 clock ) 
 2c8:	d1 f7       	brne	.-12     	; 0x2be <DLY00>
		RJMP  LOOP0                                       ;if R16 is 0->jump,       (2 clock )  
 2ca:	f4 cf       	rjmp	.-24     	; 0x2b4 <LOOP0>

000002cc <Kernel_Test_Task1>:


;;===================================Kernel Test Task1======================================;;
Kernel_Test_Task1:
        ;initialize DDR and Port register, total 4 clocks
        SBI   KER_TSK1_DDR       , KER_TSK1_PIN           ;set bit in DDR,          (2 clocks) 
 2cc:	56 9a       	sbi	0x0a, 6	; 10
		CBI   KER_TSK1_PORT      , KER_TSK1_PIN           ;clear port bit,          (2 clocks)
 2ce:	5e 98       	cbi	0x0b, 6	; 11

000002d0 <LOOP1>:
		 
    LOOP1:
	    ;pin toggle, total 5 clocks
		IN    R16                , KER_TSK1_PORT          ;load PORT val,           (2 clocks)
 2d0:	0b b1       	in	r16, 0x0b	; 11
		LDI   R17                , (1<<KER_TSK1_PIN)      ;bit mask for port pin    (1 clock )
 2d2:	10 e4       	ldi	r17, 0x40	; 64
		EOR   R16                , R17                    ;XOR with current val     (1 clock )
 2d4:	01 27       	eor	r16, r17
		OUT   KER_TSK1_PORT      , R16                    ;set new PORT val,        (1 clock )
 2d6:	0b b9       	out	0x0b, r16	; 11
		
		;assign delay loop count val, for 20ms 
		LDI   R16                , 0x9D                   ;set loop cnt val,        (1 clock )
 2d8:	0d e9       	ldi	r16, 0x9D	; 157

000002da <DLY10>:
		
    DLY10:
	    LDI   R17                , 0xFF                   ;set loop cnt val,        (1 clock )
 2da:	1f ef       	ldi	r17, 0xFF	; 255

000002dc <DLY11>:
		
	DLY11:                                                ;inner loop,127.5uS@8Mhz  (4 clocks)
		NOP                                               ;no operation,            (1 clock )
 2dc:	00 00       	nop
		DEC   R17                                         ;decrement R17 val,       (1 clock )
 2de:	1a 95       	dec	r17
		BRNE  DLY11                                       ;if R17 not equal to 0,   (2 clock ) 
 2e0:	e9 f7       	brne	.-6      	; 0x2dc <DLY11>
		DEC   R16                                         ;decrement R16 val,       (1 clock )
 2e2:	0a 95       	dec	r16
		BRNE  DLY10                                       ;if R16 not equal to 0,   (2 clock ) 
 2e4:	d1 f7       	brne	.-12     	; 0x2da <DLY10>
		RJMP  LOOP1                                       ;if R16 is 0->jump,       (2 clock )  
 2e6:	f4 cf       	rjmp	.-24     	; 0x2d0 <LOOP1>

000002e8 <Kernel_Test_Task2>:


;;===================================Kernel Test Task2======================================;;
Kernel_Test_Task2:
        ;initialize DDR and Port register, total 4 clocks
        SBI   KER_TSK2_DDR       , KER_TSK2_PIN           ;set bit in DDR,          (2 clocks) 
 2e8:	57 9a       	sbi	0x0a, 7	; 10
		CBI   KER_TSK2_PORT      , KER_TSK2_PIN           ;clear port bit,          (2 clocks)
 2ea:	5f 98       	cbi	0x0b, 7	; 11

000002ec <LOOP2>:
		 
    LOOP2:
	    ;pin toggle, total 5 clocks
		IN    R16                , KER_TSK2_PORT          ;load PORT val,           (2 clocks)
 2ec:	0b b1       	in	r16, 0x0b	; 11
		LDI   R17                , (1<<KER_TSK2_PIN)      ;bit mask for port pin    (1 clock )
 2ee:	10 e8       	ldi	r17, 0x80	; 128
		EOR   R16                , R17                    ;XOR with current val     (1 clock )
 2f0:	01 27       	eor	r16, r17
		OUT   KER_TSK2_PORT      , R16                    ;set new PORT val,        (1 clock )
 2f2:	0b b9       	out	0x0b, r16	; 11
		
		;assign delay loop count val, for 30ms 
		LDI   R16                , 0xEB                   ;set loop cnt val,        (1 clock )
 2f4:	0b ee       	ldi	r16, 0xEB	; 235

000002f6 <DLY20>:
		
    DLY20:
	    LDI   R17                , 0xFF                   ;set loop cnt val,        (1 clock )
 2f6:	1f ef       	ldi	r17, 0xFF	; 255

000002f8 <DLY21>:
		
	DLY21:                                                ;inner loop, 127.5uS@8Mhz (4 clocks)
		NOP                                               ;no operation,            (1 clock )
 2f8:	00 00       	nop
		DEC   R17                                         ;decrement R17 val,       (1 clock )
 2fa:	1a 95       	dec	r17
		BRNE  DLY21                                       ;if R17 not equal to 0,   (2 clock ) 
 2fc:	e9 f7       	brne	.-6      	; 0x2f8 <DLY21>
		DEC   R16                                         ;decrement R16 val,       (1 clock )
 2fe:	0a 95       	dec	r16
		BRNE  DLY20                                       ;if R16 not equal to 0,   (2 clock ) 
 300:	d1 f7       	brne	.-12     	; 0x2f6 <DLY20>
		RJMP  LOOP2                                       ;if R16 is 0->jump,       (2 clock ) 
 302:	f4 cf       	rjmp	.-24     	; 0x2ec <LOOP2>

00000304 <Kernel_Task0_Init>:
;;====================================Kernel Task0 Init=====================================;;
Kernel_Task0_Init:
        ;init stack for task0
		
		;save MSP
		IN    R2                 , IOSPL
 304:	2d b6       	in	r2, 0x3d	; 61
		IN    R3                 , IOSPH
 306:	3e b6       	in	r3, 0x3e	; 62
		
		;set stack for task0
		LDI   R16                , lo8(ker_stk0+KER_STZ)  ;fetch top SPL0,          (1 clock )
 308:	02 e9       	ldi	r16, 0x92	; 146
		LDI   R17                , hi8(ker_stk0+KER_STZ)  ;fetch top SPH0,          (1 clock )
 30a:	11 e0       	ldi	r17, 0x01	; 1
		OUT   IOSPL              , R16                    ;load SPL                 (1 clock )
 30c:	0d bf       	out	0x3d, r16	; 61
        OUT   IOSPH              , R17                    ;load SPH                 (1 clock )
 30e:	1e bf       	out	0x3e, r17	; 62
		
		;psuh return address of task0
		LDI   R16                , lo8(Tasks_Task0)       ;fetch task address low   (1 clock )
 310:	04 eb       	ldi	r16, 0xB4	; 180
		LDI   R17                , hi8(Tasks_Task0)       ;fetch task address high  (1 clock )
 312:	10 e0       	ldi	r17, 0x00	; 0
		LSR   R17                                         ;right shift high byte    (1 clock )
 314:	16 95       	lsr	r17
		ROR   R16                                         ;rotate right th carry    (1 clock )
 316:	07 95       	ror	r16
		PUSH  R16                                         ;push word addr low       (2 clocks)
 318:	0f 93       	push	r16
		PUSH  R17                                         ;push word addr high      (2 clocks) 
 31a:	1f 93       	push	r17
		
        KER_CNTXT_SV
 31c:	0f 92       	push	r0
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	0f 92       	push	r0
 322:	1f 92       	push	r1
 324:	11 24       	eor	r1, r1
 326:	2f 92       	push	r2
 328:	3f 92       	push	r3
 32a:	4f 92       	push	r4
 32c:	5f 92       	push	r5
 32e:	6f 92       	push	r6
 330:	7f 92       	push	r7
 332:	8f 92       	push	r8
 334:	9f 92       	push	r9
 336:	af 92       	push	r10
 338:	bf 92       	push	r11
 33a:	cf 92       	push	r12
 33c:	df 92       	push	r13
 33e:	ef 92       	push	r14
 340:	ff 92       	push	r15
 342:	0f 93       	push	r16
 344:	1f 93       	push	r17
 346:	2f 93       	push	r18
 348:	3f 93       	push	r19
 34a:	4f 93       	push	r20
 34c:	5f 93       	push	r21
 34e:	6f 93       	push	r22
 350:	7f 93       	push	r23
 352:	8f 93       	push	r24
 354:	9f 93       	push	r25
 356:	af 93       	push	r26
 358:	bf 93       	push	r27
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	ef 93       	push	r30
 360:	ff 93       	push	r31
		
		;save PSP of task0
        IN    R16                , IOSPL                  ;read SPL                 (1 clock )
 362:	0d b7       	in	r16, 0x3d	; 61
        IN    R17                , IOSPH                  ;read SPH                 (1 clock )
 364:	1e b7       	in	r17, 0x3e	; 62
        STS   ker_stp + 0        , R16                    ;set stp of task0         (2 clocks) 
 366:	00 93 0c 01 	sts	0x010C, r16
        STS   ker_stp + 1        , R17                    ;set stp of task0         (2 clocks) 
 36a:	10 93 0d 01 	sts	0x010D, r17
		
		;set task index -> 0
		LDI   R16                , 0x00                   ;set R16 to 0x00          (1 clock )
 36e:	00 e0       	ldi	r16, 0x00	; 0
		STS   ker_tski           , R16                    ;set ker_tski = 0         (2 clocks) 
 370:	00 93 0a 01 	sts	0x010A, r16
		
		;restore MSP
		OUT   IOSPL              , R2                     ;load SPL                 (1 clock )
 374:	2d be       	out	0x3d, r2	; 61
        OUT   IOSPH              , R3                     ;load SPH                 (1 clock )
 376:	3e be       	out	0x3e, r3	; 62
        RET                                               ;return from subroutine   (4 clocks) 
 378:	08 95       	ret

0000037a <Kernel_Task1_Init>:
		;save MSP
		;IN    R2                 , IOSPL
		;IN    R3                 , IOSPH
		
		;set stack for task1
		LDI   R16                , lo8(ker_stk1+KER_STZ)  ;fetch top SPL1,          (1 clock )
 37a:	02 e1       	ldi	r16, 0x12	; 18
		LDI   R17                , hi8(ker_stk1+KER_STZ)  ;fetch top SPH1,          (1 clock )
 37c:	12 e0       	ldi	r17, 0x02	; 2
		OUT   IOSPL              , R16                    ;load SPL                 (1 clock )
 37e:	0d bf       	out	0x3d, r16	; 61
        OUT   IOSPH              , R17                    ;load SPH                 (1 clock )
 380:	1e bf       	out	0x3e, r17	; 62
		
		;psuh return address of task1
		LDI   R16                , lo8(Tasks_Task1)       ;fetch task address low   (1 clock )
 382:	02 ed       	ldi	r16, 0xD2	; 210
		LDI   R17                , hi8(Tasks_Task1)       ;fetch task address high  (1 clock )
 384:	10 e0       	ldi	r17, 0x00	; 0
		LSR   R17                                         ;right shift high byte    (1 clock )
 386:	16 95       	lsr	r17
		ROR   R16                                         ;rotate right th carry    (1 clock )
 388:	07 95       	ror	r16
		PUSH  R16                                         ;push word addr low       (2 clocks)
 38a:	0f 93       	push	r16
		PUSH  R17                                         ;push word addr high      (2 clocks) 
 38c:	1f 93       	push	r17
		
        ;KER_CNTXT_SV
		
		;save PSP of task1
        IN    R16                , IOSPL                  ;read SPL                 (1 clock )
 38e:	0d b7       	in	r16, 0x3d	; 61
        IN    R17                , IOSPH                  ;read SPH                 (1 clock )
 390:	1e b7       	in	r17, 0x3e	; 62
        STS   ker_stp + 2        , R16                    ;set stp of task1         (2 clocks) 
 392:	00 93 0e 01 	sts	0x010E, r16
        STS   ker_stp + 3        , R17                    ;set stp of task1         (2 clocks) 
 396:	10 93 0f 01 	sts	0x010F, r17
		
		;set task index -> 1
		LDI   R16                , 0x01                   ;set R16 to 0x01          (1 clock )
 39a:	01 e0       	ldi	r16, 0x01	; 1
		STS   ker_tski           , R16                    ;set ker_tski = 1         (2 clocks) 
 39c:	00 93 0a 01 	sts	0x010A, r16
		
		;restore MSP
		;OUT   IOSPL              , R2                     ;load SPL                 (1 clock )
        ;OUT   IOSPH              , R3                     ;load SPH                 (1 clock )
		SEI
 3a0:	78 94       	sei
        RET                                               ;return from subroutine   (4 clocks)  
 3a2:	08 95       	ret

000003a4 <Debug_Init>:


;;========================================Debug Init========================================;;
Debug_Init:
        ;init registers for UART0
		LDI   R16                , (1<<1)                 ;mask U2x,                (1 clock )
 3a4:	02 e0       	ldi	r16, 0x02	; 2
		STS   SRUCSR0A           , R16                    ;load val to UCSR0A,      (2 clocks)
 3a6:	00 93 c0 00 	sts	0x00C0, r16
		LDI   R16                , 0x00                   ;clear R16,               (1 clock )
 3aa:	00 e0       	ldi	r16, 0x00	; 0
		STS   SRUBRR0H           , R16                    ;load val to UBRR0H,      (2 clocks)
 3ac:	00 93 c5 00 	sts	0x00C5, r16
		LDI   R16                , 0x03                   ;set 0x03, 250k baud,     (1 clock )
 3b0:	03 e0       	ldi	r16, 0x03	; 3
		STS   SRUBRR0L           , R16                    ;load val to UBRR0L,      (2 clocks)
 3b2:	00 93 c4 00 	sts	0x00C4, r16
		LDI   R16                , (1<<1)|(1<<2)          ;config 8 data bit        (1 clock )
 3b6:	06 e0       	ldi	r16, 0x06	; 6
		STS   SRUCSR0C           , R16                    ;load val to UCSR0C,      (2 clocks)
 3b8:	00 93 c2 00 	sts	0x00C2, r16
		LDI   R16                , (1<<3)                 ;enable tx,               (1 clock )
 3bc:	08 e0       	ldi	r16, 0x08	; 8
		STS   SRUCSR0B           , R16                    ;load val to UCSR0B,      (2 clocks)
 3be:	00 93 c1 00 	sts	0x00C1, r16
        RET                                               ;return from subroutine,  (4 clocks) 
 3c2:	08 95       	ret

000003c4 <Debug_Tx_Byte>:


;;=========================================Debug Tx=========================================;;
Debug_Tx_Byte:
		;write single byte to data register (Arg R24)
		STS   SRGPIOR0           , R16                    ;store R16 val,           (2 clocks)
 3c4:	00 93 3e 00 	sts	0x003E, r16
		STS   SRUDR0             , R24                    ;load val to UDR0,        (2 clocks)
 3c8:	80 93 c6 00 	sts	0x00C6, r24

000003cc <__UDRE0_CLEARED>:
		
    __UDRE0_CLEARED:
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,      (2 clocks)
 3cc:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x05                   ;skip if UDRE0 is set,    (2 clocks)
 3d0:	05 ff       	sbrs	r16, 5
		RJMP  __UDRE0_CLEARED                             ;wait until UDRE0 is set, (2 clocks)
 3d2:	fc cf       	rjmp	.-8      	; 0x3cc <__UDRE0_CLEARED>
		LDS   R16                , SRGPIOR0               ;restore R16 val,         (2 clocks)
 3d4:	00 91 3e 00 	lds	r16, 0x003E
        RET                                               ;return from subroutine,  (4 clocks) 
 3d8:	08 95       	ret

000003da <Debug_Tx_Byte_Conf>:


;;=========================================Debug Tx=========================================;;
Debug_Tx_Byte_Conf:
        ;write single byte to data register and wait until tx is complete (Arg R24)
		STS   SRGPIOR0           , R16                    ;store R16 val,           (2 clocks)
 3da:	00 93 3e 00 	sts	0x003E, r16
		STS   SRUDR0             , R24                    ;load val to UDR0,        (2 clocks)
 3de:	80 93 c6 00 	sts	0x00C6, r24

000003e2 <__TXC0_CLEARED>:
		
    __TXC0_CLEARED:
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,      (2 clocks)
 3e2:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x06                   ;skip if TXC0 is set,     (2 clocks)
 3e6:	06 ff       	sbrs	r16, 6
		RJMP  __TXC0_CLEARED                              ;wait until TXC0 is set,  (2 clocks)
 3e8:	fc cf       	rjmp	.-8      	; 0x3e2 <__TXC0_CLEARED>
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,      (2 clocks)
 3ea:	00 91 c0 00 	lds	r16, 0x00C0
		ORI   R16                , (1<<6)                 ;mask bit 6,              (1 clock )
 3ee:	00 64       	ori	r16, 0x40	; 64
		STS   SRUCSR0A           , R16                    ;load val to UCSR0B,      (2 clocks)
 3f0:	00 93 c0 00 	sts	0x00C0, r16
		LDS   R16                , SRGPIOR0               ;restore R16 val,         (2 clocks)
 3f4:	00 91 3e 00 	lds	r16, 0x003E
        RET                                               ;return from subroutine,  (4 clocks) 
 3f8:	08 95       	ret

000003fa <Debug_Tx_Word_Conf>:

;;======================================Debug Tx Word=======================================;;
Debug_Tx_Word_Conf:
        ;write 2 bytes to data register and wait until tx is complete (Arg R24, R25)
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 3fa:	0e 94 ed 01 	call	0x3da	; 0x3da <Debug_Tx_Byte_Conf>
		MOV   R24                , R25                    ;copy R25 to R24          (1 clock )
 3fe:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 400:	0e 94 ed 01 	call	0x3da	; 0x3da <Debug_Tx_Byte_Conf>
        RET                                               ;return from subroutine,  (4 clocks) 
 404:	08 95       	ret

00000406 <Debug_Tx_DWord_Conf>:

;;=====================================Debug Tx DWord=======================================;;
Debug_Tx_DWord_Conf:
        ;write 4 bytes to data register and wait until tx is complete (Arg R22-R25)
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks)
 406:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R22                    ;copy R22 to R24          (1 clock )
 40a:	86 2f       	mov	r24, r22
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 40c:	0e 94 ed 01 	call	0x3da	; 0x3da <Debug_Tx_Byte_Conf>
		MOV   R24                , R23                    ;copy R23 to R24          (1 clock )
 410:	87 2f       	mov	r24, r23
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 412:	0e 94 ed 01 	call	0x3da	; 0x3da <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24              (2 clocks)
 416:	80 91 4a 00 	lds	r24, 0x004A
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 41a:	0e 94 ed 01 	call	0x3da	; 0x3da <Debug_Tx_Byte_Conf>
		MOV   R24                , R25                    ;copy R22 to R24          (1 clock )
 41e:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 420:	0e 94 ed 01 	call	0x3da	; 0x3da <Debug_Tx_Byte_Conf>
        RET                                               ;return from subroutine,  (4 clocks) 
 424:	08 95       	ret

00000426 <Debug_Tx_From_RAM>:


;;===================================Debug Tx From RAM======================================;;
Debug_Tx_From_RAM:
        ;print data from RAM address (Arg R24-R25)
		MOV   R16                , R30                    ;copy R30 to R16          (1 clock )
 426:	0e 2f       	mov	r16, r30
		MOV   R17                , R31                    ;copy R31 to R17          (1 clock )
 428:	1f 2f       	mov	r17, r31
		MOV   R18                , R24                    ;copy R24 to R18          (1 clock )
 42a:	28 2f       	mov	r18, r24
		MOV   R30                , R24                    ;copy R22 to R24          (1 clock )
 42c:	e8 2f       	mov	r30, r24
		MOV   R31                , R25                    ;copy R22 to R24          (1 clock )
 42e:	f9 2f       	mov	r31, r25
		LD    R24                , Z                      ;load val to R24          (2 clocks)
 430:	80 81       	ld	r24, Z
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 432:	0e 94 ed 01 	call	0x3da	; 0x3da <Debug_Tx_Byte_Conf>
		MOV   R30                , R16                    ;copy R16 to R30          (1 clock )
 436:	e0 2f       	mov	r30, r16
		MOV   R31                , R17                    ;copy R17 to R31          (1 clock )
 438:	f1 2f       	mov	r31, r17
		MOV   R24                , R18                    ;copy R18 to R24          (1 clock )
 43a:	82 2f       	mov	r24, r18
        RET                                               ;return from subroutine,  (4 clocks) 
 43c:	08 95       	ret

0000043e <Debug_Tx_RAM_Area>:

;;===================================Debug Tx RAM Area======================================;;
Debug_Tx_RAM_Area:
        ;print data from RAM address (arguments R24:R25, R22)
	__DUMP_BYTES:
	    CALL  Debug_Tx_From_RAM                           ;send via uart from ram
 43e:	0e 94 13 02 	call	0x426	; 0x426 <Debug_Tx_From_RAM>
		SUBI  R24                , 0x01                   ;decrement from LSByte
 442:	81 50       	subi	r24, 0x01	; 1
        SBCI  R25                , 0x00                   ;decrement if carry
 444:	90 40       	sbci	r25, 0x00	; 0
		SUBI  R22                , 0x01                   ;decrement
 446:	61 50       	subi	r22, 0x01	; 1
		BRNE  __DUMP_BYTES
 448:	d1 f7       	brne	.-12     	; 0x43e <Debug_Tx_RAM_Area>
        RET                                               ;return from subroutine,  (4 clocks) 
 44a:	08 95       	ret

0000044c <_exit>:
 44c:	f8 94       	cli

0000044e <__stop_program>:
 44e:	ff cf       	rjmp	.-2      	; 0x44e <__stop_program>
