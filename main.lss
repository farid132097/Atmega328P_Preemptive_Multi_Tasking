
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000065e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000051e  00800100  00800100  000006d2  2**0
                  ALLOC
  2 .stab         00000cf0  00000000  00000000  000006d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000006d  00000000  00000000  000013c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00001431  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000006d  00000000  00000000  00001471  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000161  00000000  00000000  000014de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000c2  00000000  00000000  0000163f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000186  00000000  00000000  00001701  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00001888  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000e4  00000000  00000000  000018f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000078  00000000  00000000  000019dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_16>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	00 00       	nop
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 00       	nop
  76:	00 00       	nop
  78:	00 00       	nop
  7a:	00 00       	nop
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 00       	nop
  82:	00 00       	nop
  84:	00 00       	nop
  86:	00 00       	nop
  88:	50 c0       	rjmp	.+160    	; 0x12a <__vector_16>

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61
  96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  9a:	0c 94 2d 03 	jmp	0x65a	; 0x65a <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:

int main(void) {
    
	
	//Debug_Init();
	Kernel_SysTick_Reg_Init(1000);
  a2:	88 ee       	ldi	r24, 0xE8	; 232
  a4:	93 e0       	ldi	r25, 0x03	; 3
  a6:	0e 94 1d 01 	call	0x23a	; 0x23a <Kernel_SysTick_Reg_Init>
	Kernel_Task_Init(Tasks_Task0, 0, 0);
  aa:	8a e8       	ldi	r24, 0x8A	; 138
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	60 e0       	ldi	r22, 0x00	; 0
  b0:	40 e0       	ldi	r20, 0x00	; 0
  b2:	0e 94 69 01 	call	0x2d2	; 0x2d2 <Kernel_Task_Init>
	Kernel_Task_Init(Tasks_Task1, 1, 0);
  b6:	8f e7       	ldi	r24, 0x7F	; 127
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	61 e0       	ldi	r22, 0x01	; 1
  bc:	40 e0       	ldi	r20, 0x00	; 0
  be:	0e 94 69 01 	call	0x2d2	; 0x2d2 <Kernel_Task_Init>
	Kernel_Task_Start();
  c2:	0e 94 b2 01 	call	0x364	; 0x364 <Kernel_Task_Start>
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <SRUDR0>

000000c8 <Tasks_Delay>:
#include <util/delay.h>
#include "kernel.h"
#include "tasks.h"


void Tasks_Delay(uint16_t val){
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
  uint16_t curr = 0, next = 0;
  curr = Kernel_SysTick_Val_Get();
  ce:	0e 94 53 01 	call	0x2a6	; 0x2a6 <Kernel_SysTick_Val_Get>
  d2:	c9 01       	movw	r24, r18
  next = curr + val;
  d4:	c2 0f       	add	r28, r18
  d6:	d3 1f       	adc	r29, r19
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <Tasks_Delay+0x18>
  while( curr < next ){
    curr = Kernel_SysTick_Val_Get();
  da:	0e 94 53 01 	call	0x2a6	; 0x2a6 <Kernel_SysTick_Val_Get>
  de:	c9 01       	movw	r24, r18

void Tasks_Delay(uint16_t val){
  uint16_t curr = 0, next = 0;
  curr = Kernel_SysTick_Val_Get();
  next = curr + val;
  while( curr < next ){
  e0:	8c 17       	cp	r24, r28
  e2:	9d 07       	cpc	r25, r29
  e4:	d0 f3       	brcs	.-12     	; 0xda <Tasks_Delay+0x12>
    curr = Kernel_SysTick_Val_Get();
  }
}
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <Tasks_Task2>:
  }
}

void Tasks_Task2(void){
  
  DDRD |= (1<<7);
  ec:	57 9a       	sbi	0x0a, 7	; 10
  
  while(1){
    
    PORTD ^= (1<<7);
  ee:	8b b1       	in	r24, 0x0b	; 11
  f0:	80 58       	subi	r24, 0x80	; 128
  f2:	8b b9       	out	0x0b, r24	; 11
	Tasks_Delay(70);
  f4:	86 e4       	ldi	r24, 0x46	; 70
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 64 00 	call	0xc8	; 0xc8 <Tasks_Delay>
  fc:	f8 cf       	rjmp	.-16     	; 0xee <Tasks_Task2+0x2>

000000fe <Tasks_Task1>:
	Tasks_Delay(12);
	
  }
}

void Tasks_Task1(void){
  fe:	1f 93       	push	r17

  DDRD |= (1<<6);
 100:	56 9a       	sbi	0x0a, 6	; 10
  
  while(1){
    
    PORTD ^= (1<<6);
 102:	10 e4       	ldi	r17, 0x40	; 64
 104:	8b b1       	in	r24, 0x0b	; 11
 106:	81 27       	eor	r24, r17
 108:	8b b9       	out	0x0b, r24	; 11
	Tasks_Delay(41);
 10a:	89 e2       	ldi	r24, 0x29	; 41
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 64 00 	call	0xc8	; 0xc8 <Tasks_Delay>
 112:	f8 cf       	rjmp	.-16     	; 0x104 <Tasks_Task1+0x6>

00000114 <Tasks_Task0>:
  while( curr < next ){
    curr = Kernel_SysTick_Val_Get();
  }
}

void Tasks_Task0(void){
 114:	1f 93       	push	r17
  
  DDRD |= (1<<5);
 116:	55 9a       	sbi	0x0a, 5	; 10
  
  while(1){
    
    PORTD ^= (1<<5);
 118:	10 e2       	ldi	r17, 0x20	; 32
 11a:	8b b1       	in	r24, 0x0b	; 11
 11c:	81 27       	eor	r24, r17
 11e:	8b b9       	out	0x0b, r24	; 11
	Tasks_Delay(12);
 120:	8c e0       	ldi	r24, 0x0C	; 12
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 64 00 	call	0xc8	; 0xc8 <Tasks_Delay>
 128:	f8 cf       	rjmp	.-16     	; 0x11a <Tasks_Task0+0x6>

0000012a <__vector_16>:


;;===================================ISR execution start====================================;; 
.global  __vector_16
    __vector_16:                                          ;total operation        (208 clocks) 
	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 12a:	29 9a       	sbi	0x05, 1	; 5
        KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	1f 92       	push	r1
 134:	11 24       	eor	r1, r1
 136:	2f 92       	push	r2
 138:	3f 92       	push	r3
 13a:	4f 92       	push	r4
 13c:	5f 92       	push	r5
 13e:	6f 92       	push	r6
 140:	7f 92       	push	r7
 142:	8f 92       	push	r8
 144:	9f 92       	push	r9
 146:	af 92       	push	r10
 148:	bf 92       	push	r11
 14a:	cf 92       	push	r12
 14c:	df 92       	push	r13
 14e:	ef 92       	push	r14
 150:	ff 92       	push	r15
 152:	0f 93       	push	r16
 154:	1f 93       	push	r17
 156:	2f 93       	push	r18
 158:	3f 93       	push	r19
 15a:	4f 93       	push	r20
 15c:	5f 93       	push	r21
 15e:	6f 93       	push	r22
 160:	7f 93       	push	r23
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	af 93       	push	r26
 168:	bf 93       	push	r27
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	ef 93       	push	r30
 170:	ff 93       	push	r31
		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 172:	00 91 05 01 	lds	r16, 0x0105
 176:	00 93 46 00 	sts	0x0046, r16
		KER_TICK_INCREMENT                                ;increment tick counter ( 27 clocks) 
 17a:	01 e0       	ldi	r16, 0x01	; 1
 17c:	10 91 00 01 	lds	r17, 0x0100
 180:	10 0f       	add	r17, r16
 182:	10 93 00 01 	sts	0x0100, r17
 186:	00 e0       	ldi	r16, 0x00	; 0
 188:	10 91 01 01 	lds	r17, 0x0101
 18c:	10 1f       	adc	r17, r16
 18e:	10 93 01 01 	sts	0x0101, r17
 192:	10 91 02 01 	lds	r17, 0x0102
 196:	10 1f       	adc	r17, r16
 198:	10 93 02 01 	sts	0x0102, r17
 19c:	10 91 03 01 	lds	r17, 0x0103
 1a0:	10 1f       	adc	r17, r16
 1a2:	10 93 03 01 	sts	0x0103, r17
 1a6:	10 91 04 01 	lds	r17, 0x0104
 1aa:	10 1f       	adc	r17, r16
 1ac:	10 93 04 01 	sts	0x0104, r17
		KER_TASK_SWITCH                                   ;task switching         ( 38 clocks) 
 1b0:	8d b7       	in	r24, 0x3d	; 61
 1b2:	9e b7       	in	r25, 0x3e	; 62
 1b4:	00 91 06 01 	lds	r16, 0x0106
 1b8:	00 0f       	add	r16, r16
 1ba:	ea e0       	ldi	r30, 0x0A	; 10
 1bc:	f1 e0       	ldi	r31, 0x01	; 1
 1be:	e0 0f       	add	r30, r16
 1c0:	00 e0       	ldi	r16, 0x00	; 0
 1c2:	f0 1f       	adc	r31, r16
 1c4:	81 93       	st	Z+, r24
 1c6:	90 83       	st	Z, r25
 1c8:	00 91 06 01 	lds	r16, 0x0106
 1cc:	03 95       	inc	r16
 1ce:	10 91 07 01 	lds	r17, 0x0107

000001d2 <_MOD_CONT>:
 1d2:	01 17       	cp	r16, r17
 1d4:	10 f0       	brcs	.+4      	; 0x1da <_MOD_DONE>
 1d6:	01 1b       	sub	r16, r17
 1d8:	fc cf       	rjmp	.-8      	; 0x1d2 <_MOD_CONT>

000001da <_MOD_DONE>:
 1da:	00 93 06 01 	sts	0x0106, r16
 1de:	00 0f       	add	r16, r16
 1e0:	ea e0       	ldi	r30, 0x0A	; 10
 1e2:	f1 e0       	ldi	r31, 0x01	; 1
 1e4:	e0 0f       	add	r30, r16
 1e6:	00 e0       	ldi	r16, 0x00	; 0
 1e8:	f0 1f       	adc	r31, r16
 1ea:	81 91       	ld	r24, Z+
 1ec:	90 81       	ld	r25, Z
 1ee:	8d bf       	out	0x3d, r24	; 61
 1f0:	9e bf       	out	0x3e, r25	; 62
		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	bf 91       	pop	r27
 1fc:	af 91       	pop	r26
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	7f 91       	pop	r23
 204:	6f 91       	pop	r22
 206:	5f 91       	pop	r21
 208:	4f 91       	pop	r20
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	1f 91       	pop	r17
 210:	0f 91       	pop	r16
 212:	ff 90       	pop	r15
 214:	ef 90       	pop	r14
 216:	df 90       	pop	r13
 218:	cf 90       	pop	r12
 21a:	bf 90       	pop	r11
 21c:	af 90       	pop	r10
 21e:	9f 90       	pop	r9
 220:	8f 90       	pop	r8
 222:	7f 90       	pop	r7
 224:	6f 90       	pop	r6
 226:	5f 90       	pop	r5
 228:	4f 90       	pop	r4
 22a:	3f 90       	pop	r3
 22c:	2f 90       	pop	r2
 22e:	1f 90       	pop	r1
 230:	0f 90       	pop	r0
 232:	0f be       	out	0x3f, r0	; 63
 234:	0f 90       	pop	r0
	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 236:	29 98       	cbi	0x05, 1	; 5
		RETI                                              ;return from interrupt  (  4 clocks) 
 238:	18 95       	reti

0000023a <Kernel_SysTick_Reg_Init>:



;;==================================SysTick reg init start==================================;; 
Kernel_SysTick_Reg_Init:                                  ;total operation        ( 55 clocks) 
        CLI                                               ;disable global int,    (  1 clock ) 
 23a:	f8 94       	cli
		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 23c:	21 9a       	sbi	0x04, 1	; 4
 23e:	29 98       	cbi	0x05, 1	; 5
		LDI   R16                , 0x00                   ;set 0x00 to R16,       (  1 clock ) 
 240:	00 e0       	ldi	r16, 0x00	; 0
		STS   KerBase+0x00       , R16                    ;clear  KerBase[0]      (  2 clocks) 
 242:	00 93 00 01 	sts	0x0100, r16
		STS   KerBase+0x01       , R16                    ;clear  KerBase[1]      (  2 clocks) 
 246:	00 93 01 01 	sts	0x0101, r16
		STS   KerBase+0x02       , R16                    ;clear  KerBase[2]      (  2 clocks) 
 24a:	00 93 02 01 	sts	0x0102, r16
		STS   KerBase+0x03       , R16                    ;clear  KerBase[3]      (  2 clocks) 
 24e:	00 93 03 01 	sts	0x0103, r16
		STS   KerBase+0x04       , R16                    ;clear  KerBase[4]      (  2 clocks) 
 252:	00 93 04 01 	sts	0x0104, r16
		STS   KerBase+0x05       , R16                    ;clear  KerBase[5]      (  2 clocks) 
 256:	00 93 05 01 	sts	0x0105, r16
		STS   KerBase+0x06       , R16                    ;clear  KerBase[6]      (  2 clocks) 
 25a:	00 93 06 01 	sts	0x0106, r16
		STS   KerBase+0x07       , R16                    ;clear  KerBase[7]      (  2 clocks) 
 25e:	00 93 07 01 	sts	0x0107, r16
		STS   KerBase+0x08       , R16                    ;clear  KerBase[8]      (  2 clocks) 
 262:	00 93 08 01 	sts	0x0108, r16
        STS   KerBase+0x09       , R16                    ;clear  KerBase[9]      (  2 clocks) 
 266:	00 93 09 01 	sts	0x0109, r16
		LDI   R16                , KER_NTASK              ;load ntask to reg      (  1 clock ) 
 26a:	02 e0       	ldi	r16, 0x02	; 2
		STS   KerBase+0x07       , R16                    ;store ntask            (  2 clocks) 
 26c:	00 93 07 01 	sts	0x0107, r16
		LDI   R16                , 0x00                   ;store r16 with 0       (  1 clock ) 
 270:	00 e0       	ldi	r16, 0x00	; 0
		STS   SRTCCR0A           , R16                    ;clear TCCR0A           (  2 clocks) 
 272:	00 93 44 00 	sts	0x0044, r16
		STS   SRTCCR0B           , R16                    ;clear TCCR0B           (  2 clocks) 
 276:	00 93 45 00 	sts	0x0045, r16
		STS   SRTIMSK0           , R16                    ;clear TIMSK0           (  2 clocks) 
 27a:	00 93 6e 00 	sts	0x006E, r16
		STS   SRTIFR0            , R16                    ;clear TIFR0            (  2 clocks) 
 27e:	00 93 35 00 	sts	0x0035, r16
		STS   SROCR0A            , R16                    ;clear OCR0A            (  2 clocks) 
 282:	00 93 47 00 	sts	0x0047, r16
		STS   SROCR0B            , R16                    ;clear OCR0B            (  2 clocks) 
 286:	00 93 48 00 	sts	0x0048, r16
		STS   SRTCNT0            , R16                    ;clear TCNT0            (  2 clocks) 
 28a:	00 93 46 00 	sts	0x0046, r16
		LDI   R16                , KER_PRS                ;prescaler 64           (  1 clock ) 
 28e:	03 e0       	ldi	r16, 0x03	; 3
		STS   SRTCCR0B           , R16                    ;set to TCCR0B          (  2 clocks) 
 290:	00 93 45 00 	sts	0x0045, r16
		LDI   R16                , KER_RLD                ;reload value (130)     (  1 clock ) 
 294:	02 e8       	ldi	r16, 0x82	; 130
		STS   KerBase+0x05       , R16                    ;KerBase[5] reload val  (  2 clocks) 
 296:	00 93 05 01 	sts	0x0105, r16
		STS   SRTCNT0            , R16                    ;set to TCNT0           (  2 clocks) 
 29a:	00 93 46 00 	sts	0x0046, r16
		LDI   R16                , 0x01                   ;bit mask TOIE0         (  1 clock ) 
 29e:	01 e0       	ldi	r16, 0x01	; 1
		STS   SRTIMSK0           , R16                    ;set to TIMSK0          (  2 clocks) 
 2a0:	00 93 6e 00 	sts	0x006E, r16
		RET                                               ;return from subroutine (  4 clocks) 
 2a4:	08 95       	ret

000002a6 <Kernel_SysTick_Val_Get>:



;;=================================SysTick value get start==================================;; 
Kernel_SysTick_Val_Get:                                   ;total operation        ( 20 clocks) 
        IN    R16                , IOSREG                 ;save SREG              (  1 clock ) 
 2a6:	0f b7       	in	r16, 0x3f	; 63
        CLI                                               ;disable interrupts     (  1 clock ) 
 2a8:	f8 94       	cli
		LDS   R18		         , KerBase+0x00           ;byte0 -> R18 (LSB)     (  2 clocks) 
 2aa:	20 91 00 01 	lds	r18, 0x0100
		LDS   R19		         , KerBase+0x01           ;byte1 -> R19           (  2 clocks) 
 2ae:	30 91 01 01 	lds	r19, 0x0101
		LDS   R20		         , KerBase+0x02           ;byte2 -> R20           (  2 clocks) 
 2b2:	40 91 02 01 	lds	r20, 0x0102
		LDS   R21		         , KerBase+0x03           ;byte3 -> R21           (  2 clocks) 
 2b6:	50 91 03 01 	lds	r21, 0x0103
		LDS   R22		         , KerBase+0x04           ;byte4 -> R22           (  2 clocks) 
 2ba:	60 91 04 01 	lds	r22, 0x0104
		LDI   R23		         , 0x00                   ;byte5 -> R23           (  1 clocks) 
 2be:	70 e0       	ldi	r23, 0x00	; 0
		LDI   R24		         , 0x00                   ;byte6 -> R24           (  1 clocks) 
 2c0:	80 e0       	ldi	r24, 0x00	; 0
		LDI   R25		         , 0x00                   ;byte7 -> R25 (MSB)     (  1 clocks) 
 2c2:	90 e0       	ldi	r25, 0x00	; 0
		OUT   IOSREG             , R16          		  ;restore SREG           (  1 clock ) 
 2c4:	0f bf       	out	0x3f, r16	; 63
		RET                                               ;return from subroutine (  4 clocks) 
 2c6:	08 95       	ret

000002c8 <Kernel_Interrupt_Sts_Get>:



;;===============================interrupt status get start=================================;; 
Kernel_Interrupt_Sts_Get:                                 ;total operation        ( 10 clocks) 
        LDI   R24		         , 0x00                   ;clear R24              (  1 clock ) 
 2c8:	80 e0       	ldi	r24, 0x00	; 0
        IN    R16		         , IOSREG                 ;save SREG in R16       (  1 clock ) 
 2ca:	0f b7       	in	r16, 0x3f	; 63
		SBRC  R16		         , 0x07                   ;check I flag->bit7     (  3 clocks) 
 2cc:	07 fd       	sbrc	r16, 7
		LDI   R24		         , 0x01                   ;set R24 to 1           (  1 clock ) 
 2ce:	81 e0       	ldi	r24, 0x01	; 1
		RET                                               ;return from subroutine (  4 clocks) 
 2d0:	08 95       	ret

000002d2 <Kernel_Task_Init>:
;;====================================Kernel Task Init======================================;; 
Kernel_Task_Init:
        ;func_ptr->R25:R24, task_index->R22, task_priority->R20
		
        ;save main SP & Z pointer
        IN    R2                 , IOSPL                  ;read SPL of MSP        (  1 clock ) 
 2d2:	2d b6       	in	r2, 0x3d	; 61
        IN    R3                 , IOSPH                  ;read SPH of MSP        (  1 clock ) 
 2d4:	3e b6       	in	r3, 0x3e	; 62
        MOV   R4                 , R30                    ;push ZPL               (  2 clocks)
 2d6:	4e 2e       	mov	r4, r30
		MOV   R5                 , R31                    ;push ZPL               (  2 clocks)
 2d8:	5f 2e       	mov	r5, r31
		
		;store task index to RAM from argument
		STS   KerBase+0x06       , R22                    ;save task_ind in RAM   (  2 clocks)
 2da:	60 93 06 01 	sts	0x0106, r22
		
		;set stack pointer for current task (KerStack + KER_STZ*(ker_ind+1) - 1)
		MOV   R16                , R22                    ;load task_ind          (  1 clock ) 
 2de:	06 2f       	mov	r16, r22
		INC   R16                                         ;increment ker_ind      (  1 clock )
 2e0:	03 95       	inc	r16
		LDI   R17                , KER_STZ                ;load with stack size   (  1 clock ) 
 2e2:	10 e8       	ldi	r17, 0x80	; 128
		MUL   R16                , R17                    ;multiply to get offset (  2 clocks) 
 2e4:	01 9f       	mul	r16, r17
		MOV   R30                , R0                     ;load multiplied low    (  2 clocks) 
 2e6:	e0 2d       	mov	r30, r0
		MOV   R31                , R1                     ;load multiplied high   (  2 clocks) 
 2e8:	f1 2d       	mov	r31, r1
		SBIW  R30                , 0x01                   ;base+KER_STZ*ker_ind-1 (  2 clocks) 
 2ea:	31 97       	sbiw	r30, 0x01	; 1
		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 2ec:	11 24       	eor	r1, r1
		LDI   R16                , lo8(KerStack)          ;load base addr Low     (  1 clock )
 2ee:	0e e1       	ldi	r16, 0x1E	; 30
		LDI   R17                , hi8(KerStack)          ;load base addr Low     (  1 clock )
 2f0:	11 e0       	ldi	r17, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock )
 2f2:	e0 0f       	add	r30, r16
		ADC   R31                , R17                    ;add high bytes+carry   (  1 clock )
 2f4:	f1 1f       	adc	r31, r17
		OUT   IOSPL              , R30                    ;load SPL               (  1 clock ) 
 2f6:	ed bf       	out	0x3d, r30	; 61
        OUT   IOSPH              , R31                    ;load SPH               (  1 clock )
 2f8:	fe bf       	out	0x3e, r31	; 62
		
		
		;function argument directly returns word address
	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
 2fa:	8f 93       	push	r24
		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 2fc:	9f 93       	push	r25
		
		;push context to stack of this task
		KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 2fe:	0f 92       	push	r0
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	0f 92       	push	r0
 304:	1f 92       	push	r1
 306:	11 24       	eor	r1, r1
 308:	2f 92       	push	r2
 30a:	3f 92       	push	r3
 30c:	4f 92       	push	r4
 30e:	5f 92       	push	r5
 310:	6f 92       	push	r6
 312:	7f 92       	push	r7
 314:	8f 92       	push	r8
 316:	9f 92       	push	r9
 318:	af 92       	push	r10
 31a:	bf 92       	push	r11
 31c:	cf 92       	push	r12
 31e:	df 92       	push	r13
 320:	ef 92       	push	r14
 322:	ff 92       	push	r15
 324:	0f 93       	push	r16
 326:	1f 93       	push	r17
 328:	2f 93       	push	r18
 32a:	3f 93       	push	r19
 32c:	4f 93       	push	r20
 32e:	5f 93       	push	r21
 330:	6f 93       	push	r22
 332:	7f 93       	push	r23
 334:	8f 93       	push	r24
 336:	9f 93       	push	r25
 338:	af 93       	push	r26
 33a:	bf 93       	push	r27
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	ef 93       	push	r30
 342:	ff 93       	push	r31
		
		;read stack pointer of current task (necessary when restore)
		IN    R16                , IOSPL                  ;read SPL               (  1 clock ) 
 344:	0d b7       	in	r16, 0x3d	; 61
        IN    R17                , IOSPH                  ;read SPH               (  1 clock ) 
 346:	1e b7       	in	r17, 0x3e	; 62
		
		;calculate the address where current task's SP will be stored and store SP
		MOV   R18                , R22                    ;fetch task_ind from arg(  1 clock ) 
 348:	26 2f       	mov	r18, r22
		LSL   R18                                         ;left shift to multiply (  1 clock ) 
 34a:	22 0f       	add	r18, r18
		LDI   R30                , lo8(KerSP)             ;fetch base pos low     (  1 clock ) 
 34c:	ea e0       	ldi	r30, 0x0A	; 10
		LDI   R31                , hi8(KerSP)             ;fetch base pos high    (  1 clock ) 
 34e:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R18                    ;add offset to array    (  1 clock ) 
 350:	e2 0f       	add	r30, r18
		LDI   R18                , 0x00                   ;set 0 to R16           (  1 clock ) 
 352:	20 e0       	ldi	r18, 0x00	; 0
		ADC   R31                , R18                    ;add carry if any       (  1 clock ) 
 354:	f2 1f       	adc	r31, r18
		ST    Z+                 , R16                    ;SPL at KerSp+offset    (  2 clocks) 
 356:	01 93       	st	Z+, r16
		ST    z                  , R17                    ;SPH at KerSp+offset    (  2 clocks) 
 358:	10 83       	st	Z, r17
		
		;load Main SP, restore Z pointer
		OUT   IOSPL              , R2                     ;load SPL               (  1 clock )
 35a:	2d be       	out	0x3d, r2	; 61
        OUT   IOSPH              , R3                     ;load SPH               (  1 clock )
 35c:	3e be       	out	0x3e, r3	; 62
		MOV   R30                , R4                     ;push ZPL               (  2 clocks)
 35e:	e4 2d       	mov	r30, r4
		MOV   R31                , R5                     ;push ZPL               (  2 clocks)
 360:	f5 2d       	mov	r31, r5
		RET                                               ;return from subroutine (  4 clocks) 
 362:	08 95       	ret

00000364 <Kernel_Task_Start>:


;;====================================Kernel Task start=====================================;;
Kernel_Task_Start:
        ;set SP as task0 sp
		LDS   R16                , KerSP+0x00             ;fetch base pos low     (  1 clock ) 
 364:	00 91 0a 01 	lds	r16, 0x010A
		LDS   R17                , KerSP+0x01             ;fetch base pos high    (  1 clock )
 368:	10 91 0b 01 	lds	r17, 0x010B
		OUT   IOSPL              , R16                    ;load SPL               (  1 clock )
 36c:	0d bf       	out	0x3d, r16	; 61
        OUT   IOSPH              , R17                    ;load SPH               (  1 clock )
 36e:	1e bf       	out	0x3e, r17	; 62
       
        ;forcefully restore context, in ISR it will be stored automatically
		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks)
 370:	ff 91       	pop	r31
 372:	ef 91       	pop	r30
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	bf 91       	pop	r27
 37a:	af 91       	pop	r26
 37c:	9f 91       	pop	r25
 37e:	8f 91       	pop	r24
 380:	7f 91       	pop	r23
 382:	6f 91       	pop	r22
 384:	5f 91       	pop	r21
 386:	4f 91       	pop	r20
 388:	3f 91       	pop	r19
 38a:	2f 91       	pop	r18
 38c:	1f 91       	pop	r17
 38e:	0f 91       	pop	r16
 390:	ff 90       	pop	r15
 392:	ef 90       	pop	r14
 394:	df 90       	pop	r13
 396:	cf 90       	pop	r12
 398:	bf 90       	pop	r11
 39a:	af 90       	pop	r10
 39c:	9f 90       	pop	r9
 39e:	8f 90       	pop	r8
 3a0:	7f 90       	pop	r7
 3a2:	6f 90       	pop	r6
 3a4:	5f 90       	pop	r5
 3a6:	4f 90       	pop	r4
 3a8:	3f 90       	pop	r3
 3aa:	2f 90       	pop	r2
 3ac:	1f 90       	pop	r1
 3ae:	0f 90       	pop	r0
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	0f 90       	pop	r0
		
		;enable global interrupt to start executing task, starting with task0
		SEI                                               ;enable global int      (  1 clock )
 3b4:	78 94       	sei
		
		;execute return to jump to task0 function address, pushed while task init
		RET                                               ;return from subroutine (  4 clocks)
 3b6:	08 95       	ret

000003b8 <Kernel_Task0_Init>:
;;====================================Kernel Task0 Init=====================================;;
Kernel_Task0_Init:
        ;init stack for task0
		
		;save MSP
		IN    R2                 , IOSPL
 3b8:	2d b6       	in	r2, 0x3d	; 61
		IN    R3                 , IOSPH
 3ba:	3e b6       	in	r3, 0x3e	; 62
		
		;set stack for task0
		LDI   R16                , lo8(KerStack+KER_STZ-1);fetch top SPL0,          (1 clock )
 3bc:	0d e9       	ldi	r16, 0x9D	; 157
		LDI   R17                , hi8(KerStack+KER_STZ-1);fetch top SPH0,          (1 clock )
 3be:	11 e0       	ldi	r17, 0x01	; 1
		OUT   IOSPL              , R16                    ;load SPL                 (1 clock )
 3c0:	0d bf       	out	0x3d, r16	; 61
        OUT   IOSPH              , R17                    ;load SPH                 (1 clock )
 3c2:	1e bf       	out	0x3e, r17	; 62
		
		;psuh return address of task0
		LDI   R16                , lo8(Tasks_Task0)       ;fetch task address low   (1 clock )
 3c4:	04 e1       	ldi	r16, 0x14	; 20
		LDI   R17                , hi8(Tasks_Task0)       ;fetch task address high  (1 clock )
 3c6:	11 e0       	ldi	r17, 0x01	; 1
		LSR   R17                                         ;right shift high byte    (1 clock )
 3c8:	16 95       	lsr	r17
		ROR   R16                                         ;rotate right th carry    (1 clock )
 3ca:	07 95       	ror	r16
		PUSH  R16                                         ;push word addr low       (2 clocks)
 3cc:	0f 93       	push	r16
		PUSH  R17                                         ;push word addr high      (2 clocks) 
 3ce:	1f 93       	push	r17
		
        KER_CONTEXT_SAVE
 3d0:	0f 92       	push	r0
 3d2:	0f b6       	in	r0, 0x3f	; 63
 3d4:	0f 92       	push	r0
 3d6:	1f 92       	push	r1
 3d8:	11 24       	eor	r1, r1
 3da:	2f 92       	push	r2
 3dc:	3f 92       	push	r3
 3de:	4f 92       	push	r4
 3e0:	5f 92       	push	r5
 3e2:	6f 92       	push	r6
 3e4:	7f 92       	push	r7
 3e6:	8f 92       	push	r8
 3e8:	9f 92       	push	r9
 3ea:	af 92       	push	r10
 3ec:	bf 92       	push	r11
 3ee:	cf 92       	push	r12
 3f0:	df 92       	push	r13
 3f2:	ef 92       	push	r14
 3f4:	ff 92       	push	r15
 3f6:	0f 93       	push	r16
 3f8:	1f 93       	push	r17
 3fa:	2f 93       	push	r18
 3fc:	3f 93       	push	r19
 3fe:	4f 93       	push	r20
 400:	5f 93       	push	r21
 402:	6f 93       	push	r22
 404:	7f 93       	push	r23
 406:	8f 93       	push	r24
 408:	9f 93       	push	r25
 40a:	af 93       	push	r26
 40c:	bf 93       	push	r27
 40e:	cf 93       	push	r28
 410:	df 93       	push	r29
 412:	ef 93       	push	r30
 414:	ff 93       	push	r31
		
		;save PSP of task0
        IN    R16                , IOSPL                  ;read SPL                 (1 clock )
 416:	0d b7       	in	r16, 0x3d	; 61
        IN    R17                , IOSPH                  ;read SPH                 (1 clock )
 418:	1e b7       	in	r17, 0x3e	; 62
        STS   KerSP + 0          , R16                    ;set stp of task0         (2 clocks) 
 41a:	00 93 0a 01 	sts	0x010A, r16
        STS   KerSP + 1          , R17                    ;set stp of task0         (2 clocks) 
 41e:	10 93 0b 01 	sts	0x010B, r17
		
		;set task index -> 0
		LDI   R16                , 0x00                   ;set R16 to 0x00          (1 clock )
 422:	00 e0       	ldi	r16, 0x00	; 0
		STS   KerBase+0x06       , R16                    ;set task index = 0       (2 clocks) 
 424:	00 93 06 01 	sts	0x0106, r16
		
		;restore MSP
		OUT   IOSPL              , R2                     ;load SPL                 (1 clock )
 428:	2d be       	out	0x3d, r2	; 61
        OUT   IOSPH              , R3                     ;load SPH                 (1 clock )
 42a:	3e be       	out	0x3e, r3	; 62
        RET                                               ;return from subroutine   (4 clocks) 
 42c:	08 95       	ret

0000042e <Kernel_Task1_Init>:
		;save MSP
		;IN    R2                 , IOSPL
		;IN    R3                 , IOSPH
		
		;set stack for task1
		LDI   R16                , lo8(KerStack+KER_STZ*2-1);fetch top SPL1,          (1 clock )
 42e:	0d e1       	ldi	r16, 0x1D	; 29
		LDI   R17                , hi8(KerStack+KER_STZ*2-1);fetch top SPH1,          (1 clock )
 430:	12 e0       	ldi	r17, 0x02	; 2
		OUT   IOSPL              , R16                    ;load SPL                 (1 clock )
 432:	0d bf       	out	0x3d, r16	; 61
        OUT   IOSPH              , R17                    ;load SPH                 (1 clock )
 434:	1e bf       	out	0x3e, r17	; 62
		
		;psuh return address of task1
		LDI   R16                , lo8(Tasks_Task1)       ;fetch task address low   (1 clock )
 436:	0e ef       	ldi	r16, 0xFE	; 254
		LDI   R17                , hi8(Tasks_Task1)       ;fetch task address high  (1 clock )
 438:	10 e0       	ldi	r17, 0x00	; 0
		LSR   R17                                         ;right shift high byte    (1 clock )
 43a:	16 95       	lsr	r17
		ROR   R16                                         ;rotate right th carry    (1 clock )
 43c:	07 95       	ror	r16
		PUSH  R16                                         ;push word addr low       (2 clocks)
 43e:	0f 93       	push	r16
		PUSH  R17                                         ;push word addr high      (2 clocks) 
 440:	1f 93       	push	r17
		
        ;KER_CNTXT_SV
		
		;save PSP of task1
        IN    R16                , IOSPL                  ;read SPL                 (1 clock )
 442:	0d b7       	in	r16, 0x3d	; 61
        IN    R17                , IOSPH                  ;read SPH                 (1 clock )
 444:	1e b7       	in	r17, 0x3e	; 62
        STS   KerSP + 2          , R16                    ;set stp of task1         (2 clocks) 
 446:	00 93 0c 01 	sts	0x010C, r16
        STS   KerSP + 3          , R17                    ;set stp of task1         (2 clocks) 
 44a:	10 93 0d 01 	sts	0x010D, r17
		
		;set task index -> 1
		LDI   R16                , 0x01                   ;set R16 to 0x01          (1 clock )
 44e:	01 e0       	ldi	r16, 0x01	; 1
		STS   KerBase+0x06       , R16                    ;set task index = 1       (2 clocks) 
 450:	00 93 06 01 	sts	0x0106, r16
		
		;restore MSP
		;OUT   IOSPL              , R2                     ;load SPL                 (1 clock )
        ;OUT   IOSPH              , R3                     ;load SPH                 (1 clock )
		SEI
 454:	78 94       	sei
        RET                                               ;return from subroutine   (4 clocks)  
 456:	08 95       	ret

00000458 <Kernel_Task0_Init_Arg>:
;;====================================Kernel Task0 Init=====================================;;
Kernel_Task0_Init_Arg:
        ;init stack for task0
		
		;save main SP & Z pointer
        IN    R2                 , IOSPL                  ;read SPL of MSP        (  1 clock ) 
 458:	2d b6       	in	r2, 0x3d	; 61
        IN    R3                 , IOSPH                  ;read SPH of MSP        (  1 clock ) 
 45a:	3e b6       	in	r3, 0x3e	; 62
        MOV   R4                 , R30                    ;push ZPL               (  2 clocks) 
 45c:	4e 2e       	mov	r4, r30
		MOV   R5                 , R31                    ;push ZPL               (  2 clocks) 
 45e:	5f 2e       	mov	r5, r31
		
		;store task index to RAM from argument
		STS   KerBase+0x06       , R22                    ;save task_ind in RAM   (  2 clocks)
 460:	60 93 06 01 	sts	0x0106, r22
		
		;set stack pointer for current task (KerStack + KER_STZ*(ker_ind+1) - 1)
		MOV   R16                , R22                    ;load task_ind          (  1 clock ) 
 464:	06 2f       	mov	r16, r22
		INC   R16                                         ;increment ker_ind      (  1 clock )
 466:	03 95       	inc	r16
		LDI   R17                , KER_STZ                ;load with stack size   (  1 clock ) 
 468:	10 e8       	ldi	r17, 0x80	; 128
		MUL   R16                , R17                    ;multiply to get offset (  2 clocks) 
 46a:	01 9f       	mul	r16, r17
		MOV   R30                , R0                     ;load multiplied low    (  2 clocks) 
 46c:	e0 2d       	mov	r30, r0
		MOV   R31                , R1                     ;load multiplied high   (  2 clocks) 
 46e:	f1 2d       	mov	r31, r1
		SBIW  R30                , 0x01                   ;base+KER_STZ*ker_ind-1 (  2 clocks) 
 470:	31 97       	sbiw	r30, 0x01	; 1
		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 472:	11 24       	eor	r1, r1
		LDI   R16                , lo8(KerStack)          ;load base addr Low     (  1 clock )
 474:	0e e1       	ldi	r16, 0x1E	; 30
		LDI   R17                , hi8(KerStack)          ;load base addr Low     (  1 clock )
 476:	11 e0       	ldi	r17, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock )
 478:	e0 0f       	add	r30, r16
		ADC   R31                , R17                    ;add high bytes+carry   (  1 clock )
 47a:	f1 1f       	adc	r31, r17
		OUT   IOSPL              , R30                    ;load SPL               (  1 clock ) 
 47c:	ed bf       	out	0x3d, r30	; 61
        OUT   IOSPH              , R31                    ;load SPH               (  1 clock ) 
 47e:	fe bf       	out	0x3e, r31	; 62
		
		
		;function argument directly returns word address
		PUSH  R24                                         ;push word addr low     (  2 clocks)
 480:	8f 93       	push	r24
		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 482:	9f 93       	push	r25
		
		
        KER_CONTEXT_SAVE
 484:	0f 92       	push	r0
 486:	0f b6       	in	r0, 0x3f	; 63
 488:	0f 92       	push	r0
 48a:	1f 92       	push	r1
 48c:	11 24       	eor	r1, r1
 48e:	2f 92       	push	r2
 490:	3f 92       	push	r3
 492:	4f 92       	push	r4
 494:	5f 92       	push	r5
 496:	6f 92       	push	r6
 498:	7f 92       	push	r7
 49a:	8f 92       	push	r8
 49c:	9f 92       	push	r9
 49e:	af 92       	push	r10
 4a0:	bf 92       	push	r11
 4a2:	cf 92       	push	r12
 4a4:	df 92       	push	r13
 4a6:	ef 92       	push	r14
 4a8:	ff 92       	push	r15
 4aa:	0f 93       	push	r16
 4ac:	1f 93       	push	r17
 4ae:	2f 93       	push	r18
 4b0:	3f 93       	push	r19
 4b2:	4f 93       	push	r20
 4b4:	5f 93       	push	r21
 4b6:	6f 93       	push	r22
 4b8:	7f 93       	push	r23
 4ba:	8f 93       	push	r24
 4bc:	9f 93       	push	r25
 4be:	af 93       	push	r26
 4c0:	bf 93       	push	r27
 4c2:	cf 93       	push	r28
 4c4:	df 93       	push	r29
 4c6:	ef 93       	push	r30
 4c8:	ff 93       	push	r31
		
		;save PSP of task0
        IN    R16                , IOSPL                  ;read SPL               (  1 clock ) 
 4ca:	0d b7       	in	r16, 0x3d	; 61
        IN    R17                , IOSPH                  ;read SPH               (  1 clock ) 
 4cc:	1e b7       	in	r17, 0x3e	; 62
		
		;calculate the address where current task's SP will be stored and store SP
		MOV   R18                , R22                    ;fetch task_ind from arg(  1 clock ) 
 4ce:	26 2f       	mov	r18, r22
		LSL   R18                                         ;left shift to multiply (  1 clock ) 
 4d0:	22 0f       	add	r18, r18
		LDI   R30                , lo8(KerSP)             ;fetch base pos low     (  1 clock ) 
 4d2:	ea e0       	ldi	r30, 0x0A	; 10
		LDI   R31                , hi8(KerSP)             ;fetch base pos high    (  1 clock ) 
 4d4:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R18                    ;add offset to array    (  1 clock ) 
 4d6:	e2 0f       	add	r30, r18
		LDI   R18                , 0x00                   ;set 0 to R16           (  1 clock ) 
 4d8:	20 e0       	ldi	r18, 0x00	; 0
		ADC   R31                , R18                    ;add carry if any       (  1 clock ) 
 4da:	f2 1f       	adc	r31, r18
		ST    Z+                 , R16                    ;SPL at KerSp+offset    (  2 clocks) 
 4dc:	01 93       	st	Z+, r16
		ST    z                  , R17                    ;SPH at KerSp+offset    (  2 clocks) 
 4de:	10 83       	st	Z, r17
		
		
		;restore MSP
		OUT   IOSPL              , R2                     ;load SPL                 (1 clock ) 
 4e0:	2d be       	out	0x3d, r2	; 61
        OUT   IOSPH              , R3                     ;load SPH                 (1 clock ) 
 4e2:	3e be       	out	0x3e, r3	; 62
		MOV   R30                , R4                     ;push ZPL               (  2 clocks) 
 4e4:	e4 2d       	mov	r30, r4
		MOV   R31                , R5                     ;push ZPL               (  2 clocks) 
 4e6:	f5 2d       	mov	r31, r5
        RET                                               ;return from subroutine   (4 clocks) 
 4e8:	08 95       	ret

000004ea <Kernel_Task1_Init_Arg>:
		;save MSP
		;IN    R2                 , IOSPL
		;IN    R3                 , IOSPH
		
		;store task index to RAM from argument
		STS   KerBase+0x06       , R22                    ;save task_ind in RAM   (  2 clocks)
 4ea:	60 93 06 01 	sts	0x0106, r22
		
		;set stack pointer for current task (KerStack + KER_STZ*(ker_ind+1) - 1)
		MOV   R16                , R22                    ;load task_ind          (  1 clock ) 
 4ee:	06 2f       	mov	r16, r22
		INC   R16                                         ;increment ker_ind      (  1 clock )
 4f0:	03 95       	inc	r16
		LDI   R17                , KER_STZ                ;load with stack size   (  1 clock ) 
 4f2:	10 e8       	ldi	r17, 0x80	; 128
		MUL   R16                , R17                    ;multiply to get offset (  2 clocks) 
 4f4:	01 9f       	mul	r16, r17
		MOV   R30                , R0                     ;load multiplied low    (  2 clocks) 
 4f6:	e0 2d       	mov	r30, r0
		MOV   R31                , R1                     ;load multiplied high   (  2 clocks) 
 4f8:	f1 2d       	mov	r31, r1
		SBIW  R30                , 0x01                   ;base+KER_STZ*ker_ind-1 (  2 clocks) 
 4fa:	31 97       	sbiw	r30, 0x01	; 1
		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 4fc:	11 24       	eor	r1, r1
		LDI   R16                , lo8(KerStack)          ;load base addr Low     (  1 clock )
 4fe:	0e e1       	ldi	r16, 0x1E	; 30
		LDI   R17                , hi8(KerStack)          ;load base addr Low     (  1 clock )
 500:	11 e0       	ldi	r17, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock )
 502:	e0 0f       	add	r30, r16
		ADC   R31                , R17                    ;add high bytes+carry   (  1 clock )
 504:	f1 1f       	adc	r31, r17
		OUT   IOSPL              , R30                    ;load SPL               (  1 clock ) 
 506:	ed bf       	out	0x3d, r30	; 61
        OUT   IOSPH              , R31                    ;load SPH               (  1 clock )
 508:	fe bf       	out	0x3e, r31	; 62
		
		;function argument directly returns word address
		PUSH  R24                                         ;push word addr low       (2 clocks)
 50a:	8f 93       	push	r24
		PUSH  R25                                         ;push word addr high      (2 clocks) 
 50c:	9f 93       	push	r25
		
        KER_CONTEXT_SAVE
 50e:	0f 92       	push	r0
 510:	0f b6       	in	r0, 0x3f	; 63
 512:	0f 92       	push	r0
 514:	1f 92       	push	r1
 516:	11 24       	eor	r1, r1
 518:	2f 92       	push	r2
 51a:	3f 92       	push	r3
 51c:	4f 92       	push	r4
 51e:	5f 92       	push	r5
 520:	6f 92       	push	r6
 522:	7f 92       	push	r7
 524:	8f 92       	push	r8
 526:	9f 92       	push	r9
 528:	af 92       	push	r10
 52a:	bf 92       	push	r11
 52c:	cf 92       	push	r12
 52e:	df 92       	push	r13
 530:	ef 92       	push	r14
 532:	ff 92       	push	r15
 534:	0f 93       	push	r16
 536:	1f 93       	push	r17
 538:	2f 93       	push	r18
 53a:	3f 93       	push	r19
 53c:	4f 93       	push	r20
 53e:	5f 93       	push	r21
 540:	6f 93       	push	r22
 542:	7f 93       	push	r23
 544:	8f 93       	push	r24
 546:	9f 93       	push	r25
 548:	af 93       	push	r26
 54a:	bf 93       	push	r27
 54c:	cf 93       	push	r28
 54e:	df 93       	push	r29
 550:	ef 93       	push	r30
 552:	ff 93       	push	r31
		KER_CONTEXT_RESTORE
 554:	ff 91       	pop	r31
 556:	ef 91       	pop	r30
 558:	df 91       	pop	r29
 55a:	cf 91       	pop	r28
 55c:	bf 91       	pop	r27
 55e:	af 91       	pop	r26
 560:	9f 91       	pop	r25
 562:	8f 91       	pop	r24
 564:	7f 91       	pop	r23
 566:	6f 91       	pop	r22
 568:	5f 91       	pop	r21
 56a:	4f 91       	pop	r20
 56c:	3f 91       	pop	r19
 56e:	2f 91       	pop	r18
 570:	1f 91       	pop	r17
 572:	0f 91       	pop	r16
 574:	ff 90       	pop	r15
 576:	ef 90       	pop	r14
 578:	df 90       	pop	r13
 57a:	cf 90       	pop	r12
 57c:	bf 90       	pop	r11
 57e:	af 90       	pop	r10
 580:	9f 90       	pop	r9
 582:	8f 90       	pop	r8
 584:	7f 90       	pop	r7
 586:	6f 90       	pop	r6
 588:	5f 90       	pop	r5
 58a:	4f 90       	pop	r4
 58c:	3f 90       	pop	r3
 58e:	2f 90       	pop	r2
 590:	1f 90       	pop	r1
 592:	0f 90       	pop	r0
 594:	0f be       	out	0x3f, r0	; 63
 596:	0f 90       	pop	r0
		
		;save PSP of task1
        IN    R16                , IOSPL                  ;read SPL                 (1 clock )
 598:	0d b7       	in	r16, 0x3d	; 61
        IN    R17                , IOSPH                  ;read SPH                 (1 clock )
 59a:	1e b7       	in	r17, 0x3e	; 62
		
		;calculate the address where current task's SP will be stored and store SP
		MOV   R18                , R22                    ;fetch task_ind from arg(  1 clock ) 
 59c:	26 2f       	mov	r18, r22
		LSL   R18                                         ;left shift to multiply (  1 clock ) 
 59e:	22 0f       	add	r18, r18
		LDI   R30                , lo8(KerSP)             ;fetch base pos low     (  1 clock ) 
 5a0:	ea e0       	ldi	r30, 0x0A	; 10
		LDI   R31                , hi8(KerSP)             ;fetch base pos high    (  1 clock ) 
 5a2:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R18                    ;add offset to array    (  1 clock ) 
 5a4:	e2 0f       	add	r30, r18
		LDI   R18                , 0x00                   ;set 0 to R16           (  1 clock ) 
 5a6:	20 e0       	ldi	r18, 0x00	; 0
		ADC   R31                , R18                    ;add carry if any       (  1 clock ) 
 5a8:	f2 1f       	adc	r31, r18
		ST    Z+                 , R16                    ;SPL at KerSp+offset    (  2 clocks) 
 5aa:	01 93       	st	Z+, r16
		ST    z                  , R17                    ;SPH at KerSp+offset    (  2 clocks) 
 5ac:	10 83       	st	Z, r17
		
		
		;restore MSP
		;OUT   IOSPL              , R2                     ;load SPL                 (1 clock )
        ;OUT   IOSPH              , R3                     ;load SPH                 (1 clock )
		SEI
 5ae:	78 94       	sei
 5b0:	08 95       	ret

000005b2 <Debug_Init>:


;;========================================Debug Init========================================;;
Debug_Init:
        ;init registers for UART0
		LDI   R16                , (1<<1)                 ;mask U2x,                (1 clock )
 5b2:	02 e0       	ldi	r16, 0x02	; 2
		STS   SRUCSR0A           , R16                    ;load val to UCSR0A,      (2 clocks)
 5b4:	00 93 c0 00 	sts	0x00C0, r16
		LDI   R16                , 0x00                   ;clear R16,               (1 clock )
 5b8:	00 e0       	ldi	r16, 0x00	; 0
		STS   SRUBRR0H           , R16                    ;load val to UBRR0H,      (2 clocks)
 5ba:	00 93 c5 00 	sts	0x00C5, r16
		LDI   R16                , 0x03                   ;set 0x03, 250k baud,     (1 clock )
 5be:	03 e0       	ldi	r16, 0x03	; 3
		STS   SRUBRR0L           , R16                    ;load val to UBRR0L,      (2 clocks)
 5c0:	00 93 c4 00 	sts	0x00C4, r16
		LDI   R16                , (1<<1)|(1<<2)          ;config 8 data bit        (1 clock )
 5c4:	06 e0       	ldi	r16, 0x06	; 6
		STS   SRUCSR0C           , R16                    ;load val to UCSR0C,      (2 clocks)
 5c6:	00 93 c2 00 	sts	0x00C2, r16
		LDI   R16                , (1<<3)                 ;enable tx,               (1 clock )
 5ca:	08 e0       	ldi	r16, 0x08	; 8
		STS   SRUCSR0B           , R16                    ;load val to UCSR0B,      (2 clocks)
 5cc:	00 93 c1 00 	sts	0x00C1, r16
        RET                                               ;return from subroutine,  (4 clocks) 
 5d0:	08 95       	ret

000005d2 <Debug_Tx_Byte>:


;;=========================================Debug Tx=========================================;;
Debug_Tx_Byte:
		;write single byte to data register (Arg R24)
		STS   SRGPIOR0           , R16                    ;store R16 val,           (2 clocks)
 5d2:	00 93 3e 00 	sts	0x003E, r16
		STS   SRUDR0             , R24                    ;load val to UDR0,        (2 clocks)
 5d6:	80 93 c6 00 	sts	0x00C6, r24

000005da <__UDRE0_CLEARED>:
		
    __UDRE0_CLEARED:
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,      (2 clocks)
 5da:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x05                   ;skip if UDRE0 is set,    (2 clocks)
 5de:	05 ff       	sbrs	r16, 5
		RJMP  __UDRE0_CLEARED                             ;wait until UDRE0 is set, (2 clocks)
 5e0:	fc cf       	rjmp	.-8      	; 0x5da <__UDRE0_CLEARED>
		LDS   R16                , SRGPIOR0               ;restore R16 val,         (2 clocks)
 5e2:	00 91 3e 00 	lds	r16, 0x003E
        RET                                               ;return from subroutine,  (4 clocks) 
 5e6:	08 95       	ret

000005e8 <Debug_Tx_Byte_Conf>:


;;=========================================Debug Tx=========================================;;
Debug_Tx_Byte_Conf:
        ;write single byte to data register and wait until tx is complete (Arg R24)
		STS   SRGPIOR0           , R16                    ;store R16 val,           (2 clocks)
 5e8:	00 93 3e 00 	sts	0x003E, r16
		STS   SRUDR0             , R24                    ;load val to UDR0,        (2 clocks)
 5ec:	80 93 c6 00 	sts	0x00C6, r24

000005f0 <__TXC0_CLEARED>:
		
    __TXC0_CLEARED:
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,      (2 clocks)
 5f0:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x06                   ;skip if TXC0 is set,     (2 clocks)
 5f4:	06 ff       	sbrs	r16, 6
		RJMP  __TXC0_CLEARED                              ;wait until TXC0 is set,  (2 clocks)
 5f6:	fc cf       	rjmp	.-8      	; 0x5f0 <__TXC0_CLEARED>
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,      (2 clocks)
 5f8:	00 91 c0 00 	lds	r16, 0x00C0
		ORI   R16                , (1<<6)                 ;mask bit 6,              (1 clock )
 5fc:	00 64       	ori	r16, 0x40	; 64
		STS   SRUCSR0A           , R16                    ;load val to UCSR0B,      (2 clocks)
 5fe:	00 93 c0 00 	sts	0x00C0, r16
		LDS   R16                , SRGPIOR0               ;restore R16 val,         (2 clocks)
 602:	00 91 3e 00 	lds	r16, 0x003E
        RET                                               ;return from subroutine,  (4 clocks) 
 606:	08 95       	ret

00000608 <Debug_Tx_Word_Conf>:

;;======================================Debug Tx Word=======================================;;
Debug_Tx_Word_Conf:
        ;write 2 bytes to data register and wait until tx is complete (Arg R24, R25)
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 608:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <Debug_Tx_Byte_Conf>
		MOV   R24                , R25                    ;copy R25 to R24          (1 clock )
 60c:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 60e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <Debug_Tx_Byte_Conf>
        RET                                               ;return from subroutine,  (4 clocks) 
 612:	08 95       	ret

00000614 <Debug_Tx_DWord_Conf>:

;;=====================================Debug Tx DWord=======================================;;
Debug_Tx_DWord_Conf:
        ;write 4 bytes to data register and wait until tx is complete (Arg R22-R25)
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks)
 614:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R22                    ;copy R22 to R24          (1 clock )
 618:	86 2f       	mov	r24, r22
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 61a:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <Debug_Tx_Byte_Conf>
		MOV   R24                , R23                    ;copy R23 to R24          (1 clock )
 61e:	87 2f       	mov	r24, r23
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 620:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24              (2 clocks)
 624:	80 91 4a 00 	lds	r24, 0x004A
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 628:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <Debug_Tx_Byte_Conf>
		MOV   R24                , R25                    ;copy R22 to R24          (1 clock )
 62c:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 62e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <Debug_Tx_Byte_Conf>
        RET                                               ;return from subroutine,  (4 clocks) 
 632:	08 95       	ret

00000634 <Debug_Tx_From_RAM>:


;;===================================Debug Tx From RAM======================================;;
Debug_Tx_From_RAM:
        ;print data from RAM address (Arg R24-R25)
		MOV   R16                , R30                    ;copy R30 to R16          (1 clock )
 634:	0e 2f       	mov	r16, r30
		MOV   R17                , R31                    ;copy R31 to R17          (1 clock )
 636:	1f 2f       	mov	r17, r31
		MOV   R18                , R24                    ;copy R24 to R18          (1 clock )
 638:	28 2f       	mov	r18, r24
		MOV   R30                , R24                    ;copy R22 to R24          (1 clock )
 63a:	e8 2f       	mov	r30, r24
		MOV   R31                , R25                    ;copy R22 to R24          (1 clock )
 63c:	f9 2f       	mov	r31, r25
		LD    R24                , Z                      ;load val to R24          (2 clocks)
 63e:	80 81       	ld	r24, Z
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 640:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <Debug_Tx_Byte_Conf>
		MOV   R30                , R16                    ;copy R16 to R30          (1 clock )
 644:	e0 2f       	mov	r30, r16
		MOV   R31                , R17                    ;copy R17 to R31          (1 clock )
 646:	f1 2f       	mov	r31, r17
		MOV   R24                , R18                    ;copy R18 to R24          (1 clock )
 648:	82 2f       	mov	r24, r18
        RET                                               ;return from subroutine,  (4 clocks) 
 64a:	08 95       	ret

0000064c <Debug_Tx_RAM_Area>:

;;===================================Debug Tx RAM Area======================================;;
Debug_Tx_RAM_Area:
        ;print data from RAM address (arguments R24:R25, R22)
	__DUMP_BYTES:
	    CALL  Debug_Tx_From_RAM                           ;send via uart from ram
 64c:	0e 94 1a 03 	call	0x634	; 0x634 <Debug_Tx_From_RAM>
		SUBI  R24                , 0x01                   ;decrement from LSByte
 650:	81 50       	subi	r24, 0x01	; 1
        SBCI  R25                , 0x00                   ;decrement if carry
 652:	90 40       	sbci	r25, 0x00	; 0
		SUBI  R22                , 0x01                   ;decrement
 654:	61 50       	subi	r22, 0x01	; 1
		BRNE  __DUMP_BYTES
 656:	d1 f7       	brne	.-12     	; 0x64c <Debug_Tx_RAM_Area>
        RET                                               ;return from subroutine,  (4 clocks) 
 658:	08 95       	ret

0000065a <_exit>:
 65a:	f8 94       	cli

0000065c <__stop_program>:
 65c:	ff cf       	rjmp	.-2      	; 0x65c <__stop_program>
