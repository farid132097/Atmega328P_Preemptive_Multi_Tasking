
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000558  00800100  00800100  00000d20  2**0
                  ALLOC
  2 .stab         00000b58  00000000  00000000  00000d20  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000006e  00000000  00000000  00001878  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  000018e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000bd  00000000  00000000  00001926  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001e9  00000000  00000000  000019e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000ef  00000000  00000000  00001bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000485  00000000  00000000  00001cbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00002140  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000123  00000000  00000000  00002200  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00002323  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__vector_16>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	00 00       	nop
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 00       	nop
  76:	00 00       	nop
  78:	00 00       	nop
  7a:	00 00       	nop
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 00       	nop
  82:	00 00       	nop
  84:	00 00       	nop
  86:	00 00       	nop
  88:	31 c2       	rjmp	.+1122   	; 0x4ec <__vector_16>

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61
  96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  9a:	0c 94 54 06 	jmp	0xca8	; 0xca8 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:


    
int main(void) {
    
	Kernel_Init();
  a2:	0e 94 ae 04 	call	0x95c	; 0x95c <Kernel_Init>
	

	Kernel_Task_Create(Tasks_Task1,  0);
  a6:	8a eb       	ldi	r24, 0xBA	; 186
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	0e 94 a9 03 	call	0x752	; 0x752 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task2,  3);
  b0:	81 e9       	ldi	r24, 0x91	; 145
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	63 e0       	ldi	r22, 0x03	; 3
  b6:	0e 94 a9 03 	call	0x752	; 0x752 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task3,  2);
  ba:	88 e6       	ldi	r24, 0x68	; 104
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	62 e0       	ldi	r22, 0x02	; 2
  c0:	0e 94 a9 03 	call	0x752	; 0x752 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task4,  1);
  c4:	8f e3       	ldi	r24, 0x3F	; 63
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	0e 94 a9 03 	call	0x752	; 0x752 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task5,  4);
  ce:	86 e1       	ldi	r24, 0x16	; 22
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	64 e0       	ldi	r22, 0x04	; 4
  d4:	0e 94 a9 03 	call	0x752	; 0x752 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task6,  6);
  d8:	83 ef       	ldi	r24, 0xF3	; 243
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	66 e0       	ldi	r22, 0x06	; 6
  de:	0e 94 a9 03 	call	0x752	; 0x752 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task7,  5);
  e2:	80 ed       	ldi	r24, 0xD0	; 208
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	65 e0       	ldi	r22, 0x05	; 5
  e8:	0e 94 a9 03 	call	0x752	; 0x752 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task8,  8);
  ec:	8d ea       	ldi	r24, 0xAD	; 173
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	68 e0       	ldi	r22, 0x08	; 8
  f2:	0e 94 a9 03 	call	0x752	; 0x752 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task9,  7);
  f6:	8a e8       	ldi	r24, 0x8A	; 138
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	67 e0       	ldi	r22, 0x07	; 7
  fc:	0e 94 a9 03 	call	0x752	; 0x752 <Kernel_Task_Create>

	PORTD^=(1<<5);
 100:	8b b1       	in	r24, 0x0b	; 11
 102:	90 e2       	ldi	r25, 0x20	; 32
 104:	89 27       	eor	r24, r25
 106:	8b b9       	out	0x0b, r24	; 11
	PORTD^=(1<<5);
 108:	8b b1       	in	r24, 0x0b	; 11
 10a:	89 27       	eor	r24, r25
 10c:	8b b9       	out	0x0b, r24	; 11
	
	Kernel_Start_Tasks();
 10e:	0e 94 24 04 	call	0x848	; 0x848 <Kernel_Start_Tasks>
 112:	ff cf       	rjmp	.-2      	; 0x112 <SRUDR0+0x4c>

00000114 <Tasks_Task9>:
  }
}

void Tasks_Task9(void){
  
  Debug_Init(0);
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 c8 05 	call	0xb90	; 0xb90 <Debug_Init>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(9));
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
    Debug_Tx_Byte('\r');
    Debug_Tx_Byte('\n');*/
    Debug_Tx_Byte( (Kernel_CPU_Usage_Get()/10) + 48);
 11c:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Kernel_CPU_Usage_Get>
 120:	6a e0       	ldi	r22, 0x0A	; 10
 122:	0e 94 26 06 	call	0xc4c	; 0xc4c <__udivmodqi4>
 126:	80 5d       	subi	r24, 0xD0	; 208
 128:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Debug_Tx_Byte( (Kernel_CPU_Usage_Get()%10) + 48);
 12c:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Kernel_CPU_Usage_Get>
 130:	6a e0       	ldi	r22, 0x0A	; 10
 132:	0e 94 26 06 	call	0xc4c	; 0xc4c <__udivmodqi4>
 136:	89 2f       	mov	r24, r25
 138:	80 5d       	subi	r24, 0xD0	; 208
 13a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Debug_Tx_Byte('%');
 13e:	85 e2       	ldi	r24, 0x25	; 37
 140:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Debug_Tx_Byte('\r');
 144:	8d e0       	ldi	r24, 0x0D	; 13
 146:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Debug_Tx_Byte('\n');
 14a:	8a e0       	ldi	r24, 0x0A	; 10
 14c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Kernel_Task_Sleep(90);
 150:	8a e5       	ldi	r24, 0x5A	; 90
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 de 04 	call	0x9bc	; 0x9bc <Kernel_Task_Sleep>
 158:	e1 cf       	rjmp	.-62     	; 0x11c <Tasks_Task9+0x8>

0000015a <Tasks_Task8>:
  }
}

void Tasks_Task8(void){
  
  Debug_Init(0);
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 c8 05 	call	0xb90	; 0xb90 <Debug_Init>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(8));
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
    Debug_Tx_Byte('\r');
    Debug_Tx_Byte('\n');*/
    Debug_Tx_Byte( (Kernel_CPU_Usage_Get()/10) + 48);
 162:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Kernel_CPU_Usage_Get>
 166:	6a e0       	ldi	r22, 0x0A	; 10
 168:	0e 94 26 06 	call	0xc4c	; 0xc4c <__udivmodqi4>
 16c:	80 5d       	subi	r24, 0xD0	; 208
 16e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Debug_Tx_Byte( (Kernel_CPU_Usage_Get()%10) + 48);
 172:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Kernel_CPU_Usage_Get>
 176:	6a e0       	ldi	r22, 0x0A	; 10
 178:	0e 94 26 06 	call	0xc4c	; 0xc4c <__udivmodqi4>
 17c:	89 2f       	mov	r24, r25
 17e:	80 5d       	subi	r24, 0xD0	; 208
 180:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Debug_Tx_Byte('%');
 184:	85 e2       	ldi	r24, 0x25	; 37
 186:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Debug_Tx_Byte('\r');
 18a:	8d e0       	ldi	r24, 0x0D	; 13
 18c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Debug_Tx_Byte('\n');
 190:	8a e0       	ldi	r24, 0x0A	; 10
 192:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Kernel_Task_Sleep(80);
 196:	80 e5       	ldi	r24, 0x50	; 80
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 de 04 	call	0x9bc	; 0x9bc <Kernel_Task_Sleep>
 19e:	e1 cf       	rjmp	.-62     	; 0x162 <Tasks_Task8+0x8>

000001a0 <Tasks_Task7>:
  }
}

void Tasks_Task7(void){
  
  Debug_Init(0);
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 c8 05 	call	0xb90	; 0xb90 <Debug_Init>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(7));
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
    Debug_Tx_Byte('\r');
    Debug_Tx_Byte('\n');*/
    Debug_Tx_Byte( (Kernel_CPU_Usage_Get()/10) + 48);
 1a8:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Kernel_CPU_Usage_Get>
 1ac:	6a e0       	ldi	r22, 0x0A	; 10
 1ae:	0e 94 26 06 	call	0xc4c	; 0xc4c <__udivmodqi4>
 1b2:	80 5d       	subi	r24, 0xD0	; 208
 1b4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Debug_Tx_Byte( (Kernel_CPU_Usage_Get()%10) + 48);
 1b8:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Kernel_CPU_Usage_Get>
 1bc:	6a e0       	ldi	r22, 0x0A	; 10
 1be:	0e 94 26 06 	call	0xc4c	; 0xc4c <__udivmodqi4>
 1c2:	89 2f       	mov	r24, r25
 1c4:	80 5d       	subi	r24, 0xD0	; 208
 1c6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Debug_Tx_Byte('%');
 1ca:	85 e2       	ldi	r24, 0x25	; 37
 1cc:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Debug_Tx_Byte('\r');
 1d0:	8d e0       	ldi	r24, 0x0D	; 13
 1d2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Debug_Tx_Byte('\n');
 1d6:	8a e0       	ldi	r24, 0x0A	; 10
 1d8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Kernel_Task_Sleep(70);
 1dc:	86 e4       	ldi	r24, 0x46	; 70
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 de 04 	call	0x9bc	; 0x9bc <Kernel_Task_Sleep>
 1e4:	e1 cf       	rjmp	.-62     	; 0x1a8 <Tasks_Task7+0x8>

000001e6 <Tasks_Task6>:
  }
}

void Tasks_Task6(void){
  
  Debug_Init(0);
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 c8 05 	call	0xb90	; 0xb90 <Debug_Init>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(6));
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
    Debug_Tx_Byte('\r');
    Debug_Tx_Byte('\n');*/
    Debug_Tx_Byte( (Kernel_CPU_Usage_Get()/10) + 48);
 1ee:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Kernel_CPU_Usage_Get>
 1f2:	6a e0       	ldi	r22, 0x0A	; 10
 1f4:	0e 94 26 06 	call	0xc4c	; 0xc4c <__udivmodqi4>
 1f8:	80 5d       	subi	r24, 0xD0	; 208
 1fa:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Debug_Tx_Byte( (Kernel_CPU_Usage_Get()%10) + 48);
 1fe:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Kernel_CPU_Usage_Get>
 202:	6a e0       	ldi	r22, 0x0A	; 10
 204:	0e 94 26 06 	call	0xc4c	; 0xc4c <__udivmodqi4>
 208:	89 2f       	mov	r24, r25
 20a:	80 5d       	subi	r24, 0xD0	; 208
 20c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Debug_Tx_Byte('%');
 210:	85 e2       	ldi	r24, 0x25	; 37
 212:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Debug_Tx_Byte('\r');
 216:	8d e0       	ldi	r24, 0x0D	; 13
 218:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Debug_Tx_Byte('\n');
 21c:	8a e0       	ldi	r24, 0x0A	; 10
 21e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Kernel_Task_Sleep(60);
 222:	8c e3       	ldi	r24, 0x3C	; 60
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 de 04 	call	0x9bc	; 0x9bc <Kernel_Task_Sleep>
 22a:	e1 cf       	rjmp	.-62     	; 0x1ee <Tasks_Task6+0x8>

0000022c <Tasks_Task5>:
    Kernel_Task_Sleep(40);
	
  }
}

void Tasks_Task5(void){
 22c:	1f 93       	push	r17
  
  DDRC |= (1<<5);
 22e:	3d 9a       	sbi	0x07, 5	; 7

  Debug_Init(0);
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 c8 05 	call	0xb90	; 0xb90 <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<5);
 238:	10 e2       	ldi	r17, 0x20	; 32
 23a:	88 b1       	in	r24, 0x08	; 8
 23c:	81 27       	eor	r24, r17
 23e:	88 b9       	out	0x08, r24	; 8
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(5));
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
    Debug_Tx_Byte('\r');
    Debug_Tx_Byte('\n');*/
    Debug_Tx_Byte( (Kernel_CPU_Usage_Get()/10) + 48);
 240:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Kernel_CPU_Usage_Get>
 244:	6a e0       	ldi	r22, 0x0A	; 10
 246:	0e 94 26 06 	call	0xc4c	; 0xc4c <__udivmodqi4>
 24a:	80 5d       	subi	r24, 0xD0	; 208
 24c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Debug_Tx_Byte( (Kernel_CPU_Usage_Get()%10) + 48);
 250:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Kernel_CPU_Usage_Get>
 254:	6a e0       	ldi	r22, 0x0A	; 10
 256:	0e 94 26 06 	call	0xc4c	; 0xc4c <__udivmodqi4>
 25a:	89 2f       	mov	r24, r25
 25c:	80 5d       	subi	r24, 0xD0	; 208
 25e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Debug_Tx_Byte('%');
 262:	85 e2       	ldi	r24, 0x25	; 37
 264:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Debug_Tx_Byte('\r');
 268:	8d e0       	ldi	r24, 0x0D	; 13
 26a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Debug_Tx_Byte('\n');
 26e:	8a e0       	ldi	r24, 0x0A	; 10
 270:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Kernel_Task_Sleep(50);
 274:	82 e3       	ldi	r24, 0x32	; 50
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 de 04 	call	0x9bc	; 0x9bc <Kernel_Task_Sleep>
 27c:	de cf       	rjmp	.-68     	; 0x23a <Tasks_Task5+0xe>

0000027e <Tasks_Task4>:
    Kernel_Task_Sleep(30);
	
  }
}

void Tasks_Task4(void){
 27e:	1f 93       	push	r17
  
  DDRC |= (1<<4);
 280:	3c 9a       	sbi	0x07, 4	; 7

  Debug_Init(0);
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 c8 05 	call	0xb90	; 0xb90 <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<4);
 28a:	10 e1       	ldi	r17, 0x10	; 16
 28c:	88 b1       	in	r24, 0x08	; 8
 28e:	81 27       	eor	r24, r17
 290:	88 b9       	out	0x08, r24	; 8
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(4));
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
    Debug_Tx_Byte('\r');
    Debug_Tx_Byte('\n');*/
    Debug_Tx_Byte( (Kernel_CPU_Usage_Get()/10) + 48);
 292:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Kernel_CPU_Usage_Get>
 296:	6a e0       	ldi	r22, 0x0A	; 10
 298:	0e 94 26 06 	call	0xc4c	; 0xc4c <__udivmodqi4>
 29c:	80 5d       	subi	r24, 0xD0	; 208
 29e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Debug_Tx_Byte( (Kernel_CPU_Usage_Get()%10) + 48);
 2a2:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Kernel_CPU_Usage_Get>
 2a6:	6a e0       	ldi	r22, 0x0A	; 10
 2a8:	0e 94 26 06 	call	0xc4c	; 0xc4c <__udivmodqi4>
 2ac:	89 2f       	mov	r24, r25
 2ae:	80 5d       	subi	r24, 0xD0	; 208
 2b0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Debug_Tx_Byte('%');
 2b4:	85 e2       	ldi	r24, 0x25	; 37
 2b6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Debug_Tx_Byte('\r');
 2ba:	8d e0       	ldi	r24, 0x0D	; 13
 2bc:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Debug_Tx_Byte('\n');
 2c0:	8a e0       	ldi	r24, 0x0A	; 10
 2c2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Kernel_Task_Sleep(40);
 2c6:	88 e2       	ldi	r24, 0x28	; 40
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 de 04 	call	0x9bc	; 0x9bc <Kernel_Task_Sleep>
 2ce:	de cf       	rjmp	.-68     	; 0x28c <Tasks_Task4+0xe>

000002d0 <Tasks_Task3>:
    Kernel_Task_Sleep(20);
	
  }
}

void Tasks_Task3(void){
 2d0:	1f 93       	push	r17
  
  DDRC |= (1<<3);
 2d2:	3b 9a       	sbi	0x07, 3	; 7

  Debug_Init(0);
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 c8 05 	call	0xb90	; 0xb90 <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<3);
 2dc:	18 e0       	ldi	r17, 0x08	; 8
 2de:	88 b1       	in	r24, 0x08	; 8
 2e0:	81 27       	eor	r24, r17
 2e2:	88 b9       	out	0x08, r24	; 8
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(3));
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
    Debug_Tx_Byte('\r');
    Debug_Tx_Byte('\n');*/
    Debug_Tx_Byte( (Kernel_CPU_Usage_Get()/10) + 48);
 2e4:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Kernel_CPU_Usage_Get>
 2e8:	6a e0       	ldi	r22, 0x0A	; 10
 2ea:	0e 94 26 06 	call	0xc4c	; 0xc4c <__udivmodqi4>
 2ee:	80 5d       	subi	r24, 0xD0	; 208
 2f0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Debug_Tx_Byte( (Kernel_CPU_Usage_Get()%10) + 48);
 2f4:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Kernel_CPU_Usage_Get>
 2f8:	6a e0       	ldi	r22, 0x0A	; 10
 2fa:	0e 94 26 06 	call	0xc4c	; 0xc4c <__udivmodqi4>
 2fe:	89 2f       	mov	r24, r25
 300:	80 5d       	subi	r24, 0xD0	; 208
 302:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Debug_Tx_Byte('%');
 306:	85 e2       	ldi	r24, 0x25	; 37
 308:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Debug_Tx_Byte('\r');
 30c:	8d e0       	ldi	r24, 0x0D	; 13
 30e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Debug_Tx_Byte('\n');
 312:	8a e0       	ldi	r24, 0x0A	; 10
 314:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Kernel_Task_Sleep(30);
 318:	8e e1       	ldi	r24, 0x1E	; 30
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 de 04 	call	0x9bc	; 0x9bc <Kernel_Task_Sleep>
 320:	de cf       	rjmp	.-68     	; 0x2de <Tasks_Task3+0xe>

00000322 <Tasks_Task2>:
    Kernel_Task_Sleep(10);
    
  }
}

void Tasks_Task2(void){
 322:	1f 93       	push	r17
  
  DDRC |= (1<<2);
 324:	3a 9a       	sbi	0x07, 2	; 7

  Debug_Init(0);
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 c8 05 	call	0xb90	; 0xb90 <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<2);
 32e:	14 e0       	ldi	r17, 0x04	; 4
 330:	88 b1       	in	r24, 0x08	; 8
 332:	81 27       	eor	r24, r17
 334:	88 b9       	out	0x08, r24	; 8
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(2));
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
    Debug_Tx_Byte('\r');
    Debug_Tx_Byte('\n');*/
    Debug_Tx_Byte( (Kernel_CPU_Usage_Get()/10) + 48);
 336:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Kernel_CPU_Usage_Get>
 33a:	6a e0       	ldi	r22, 0x0A	; 10
 33c:	0e 94 26 06 	call	0xc4c	; 0xc4c <__udivmodqi4>
 340:	80 5d       	subi	r24, 0xD0	; 208
 342:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Debug_Tx_Byte( (Kernel_CPU_Usage_Get()%10) + 48);
 346:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Kernel_CPU_Usage_Get>
 34a:	6a e0       	ldi	r22, 0x0A	; 10
 34c:	0e 94 26 06 	call	0xc4c	; 0xc4c <__udivmodqi4>
 350:	89 2f       	mov	r24, r25
 352:	80 5d       	subi	r24, 0xD0	; 208
 354:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Debug_Tx_Byte('%');
 358:	85 e2       	ldi	r24, 0x25	; 37
 35a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Debug_Tx_Byte('\r');
 35e:	8d e0       	ldi	r24, 0x0D	; 13
 360:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Debug_Tx_Byte('\n');
 364:	8a e0       	ldi	r24, 0x0A	; 10
 366:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    Kernel_Task_Sleep(20);
 36a:	84 e1       	ldi	r24, 0x14	; 20
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 de 04 	call	0x9bc	; 0x9bc <Kernel_Task_Sleep>
 372:	de cf       	rjmp	.-68     	; 0x330 <Tasks_Task2+0xe>

00000374 <Tasks_Task1>:
#include <util/delay.h>
#include "kernel.h"
#include "tasks.h"
#include "debug.h"

void Tasks_Task1(void){
 374:	9f 92       	push	r9
 376:	af 92       	push	r10
 378:	bf 92       	push	r11
 37a:	cf 92       	push	r12
 37c:	df 92       	push	r13
 37e:	ef 92       	push	r14
 380:	ff 92       	push	r15
 382:	0f 93       	push	r16
 384:	1f 93       	push	r17
 386:	df 93       	push	r29
 388:	cf 93       	push	r28
 38a:	cd b7       	in	r28, 0x3d	; 61
 38c:	de b7       	in	r29, 0x3e	; 62
 38e:	2a 97       	sbiw	r28, 0x0a	; 10
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	f8 94       	cli
 394:	de bf       	out	0x3e, r29	; 62
 396:	0f be       	out	0x3f, r0	; 63
 398:	cd bf       	out	0x3d, r28	; 61
  
  uint32_t vcc=0, temp;
  uint8_t  val[10];
  val[0]='v';
 39a:	86 e7       	ldi	r24, 0x76	; 118
 39c:	89 83       	std	Y+1, r24	; 0x01
  val[1]='d';
 39e:	84 e6       	ldi	r24, 0x64	; 100
 3a0:	8a 83       	std	Y+2, r24	; 0x02
  val[2]='d';
 3a2:	8b 83       	std	Y+3, r24	; 0x03
  val[3]=' ';
 3a4:	80 e2       	ldi	r24, 0x20	; 32
 3a6:	8c 83       	std	Y+4, r24	; 0x04
  val[8]='\r';
 3a8:	8d e0       	ldi	r24, 0x0D	; 13
 3aa:	89 87       	std	Y+9, r24	; 0x09
  val[9]='\n';
 3ac:	8a e0       	ldi	r24, 0x0A	; 10
 3ae:	8a 87       	std	Y+10, r24	; 0x0a

  DDRC |= (1<<1);
 3b0:	39 9a       	sbi	0x07, 1	; 7
  Debug_Init(0);
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 c8 05 	call	0xb90	; 0xb90 <Debug_Init>

  ADMUX  =0x00;
 3ba:	10 92 7c 00 	sts	0x007C, r1
  ADCSRA =0x00;
 3be:	10 92 7a 00 	sts	0x007A, r1
  ADMUX |=(1<<REFS0)|(1<<MUX1) |(1<<MUX2) |(1<<MUX3);
 3c2:	80 91 7c 00 	lds	r24, 0x007C
 3c6:	8e 64       	ori	r24, 0x4E	; 78
 3c8:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA|=(1<<ADPS0)|(1<<ADPS2);
 3cc:	80 91 7a 00 	lds	r24, 0x007A
 3d0:	85 60       	ori	r24, 0x05	; 5
 3d2:	80 93 7a 00 	sts	0x007A, r24
  ADCSRA|=(1<<ADEN) ;
 3d6:	80 91 7a 00 	lds	r24, 0x007A
 3da:	80 68       	ori	r24, 0x80	; 128
 3dc:	80 93 7a 00 	sts	0x007A, r24
  Kernel_Task_Sleep(5);
 3e0:	85 e0       	ldi	r24, 0x05	; 5
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 de 04 	call	0x9bc	; 0x9bc <Kernel_Task_Sleep>
  
  while(1){
    
    PORTC ^= (1<<1);
 3e8:	92 e0       	ldi	r25, 0x02	; 2
 3ea:	99 2e       	mov	r9, r25
    vcc   = temp;

    val[4] = (vcc/1000)%10 + 48;
    val[5] = (vcc/100)%10 + 48;
    val[6] = (vcc/10)%10 + 48;
    val[7] = (vcc/1)%10 + 48;
 3ec:	5e 01       	movw	r10, r28
 3ee:	08 94       	sec
 3f0:	a1 1c       	adc	r10, r1
 3f2:	b1 1c       	adc	r11, r1
    
    for(uint8_t i=0;i<10;i++){
 3f4:	8b e0       	ldi	r24, 0x0B	; 11
 3f6:	c8 2e       	mov	r12, r24
 3f8:	d1 2c       	mov	r13, r1
 3fa:	cc 0e       	add	r12, r28
 3fc:	dd 1e       	adc	r13, r29
  ADCSRA|=(1<<ADEN) ;
  Kernel_Task_Sleep(5);
  
  while(1){
    
    PORTC ^= (1<<1);
 3fe:	88 b1       	in	r24, 0x08	; 8
 400:	89 25       	eor	r24, r9
 402:	88 b9       	out	0x08, r24	; 8
    
    ADCSRA |= (1<<ADSC);
 404:	80 91 7a 00 	lds	r24, 0x007A
 408:	80 64       	ori	r24, 0x40	; 64
 40a:	80 93 7a 00 	sts	0x007A, r24
    while((ADCSRA & (1<<ADIF))==0);
 40e:	80 91 7a 00 	lds	r24, 0x007A
 412:	84 ff       	sbrs	r24, 4
 414:	fc cf       	rjmp	.-8      	; 0x40e <KER_TR+0x26>
    vcc = ADCW;
 416:	20 91 78 00 	lds	r18, 0x0078
 41a:	30 91 79 00 	lds	r19, 0x0079
    ADCSRA |= (1<<ADIF);
 41e:	80 91 7a 00 	lds	r24, 0x007A
 422:	80 61       	ori	r24, 0x10	; 16
 424:	80 93 7a 00 	sts	0x007A, r24
    temp  = 1126400; //1024*1100
    temp /= vcc;
 428:	40 e0       	ldi	r20, 0x00	; 0
 42a:	50 e0       	ldi	r21, 0x00	; 0
 42c:	60 e0       	ldi	r22, 0x00	; 0
 42e:	70 e3       	ldi	r23, 0x30	; 48
 430:	81 e1       	ldi	r24, 0x11	; 17
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 32 06 	call	0xc64	; 0xc64 <__udivmodsi4>
 438:	12 2f       	mov	r17, r18
 43a:	03 2f       	mov	r16, r19
 43c:	f4 2e       	mov	r15, r20
 43e:	e5 2e       	mov	r14, r21
    vcc   = temp;

    val[4] = (vcc/1000)%10 + 48;
 440:	62 2f       	mov	r22, r18
 442:	73 2f       	mov	r23, r19
 444:	84 2f       	mov	r24, r20
 446:	95 2f       	mov	r25, r21
 448:	28 ee       	ldi	r18, 0xE8	; 232
 44a:	33 e0       	ldi	r19, 0x03	; 3
 44c:	40 e0       	ldi	r20, 0x00	; 0
 44e:	50 e0       	ldi	r21, 0x00	; 0
 450:	0e 94 32 06 	call	0xc64	; 0xc64 <__udivmodsi4>
 454:	ca 01       	movw	r24, r20
 456:	b9 01       	movw	r22, r18
 458:	2a e0       	ldi	r18, 0x0A	; 10
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	40 e0       	ldi	r20, 0x00	; 0
 45e:	50 e0       	ldi	r21, 0x00	; 0
 460:	0e 94 32 06 	call	0xc64	; 0xc64 <__udivmodsi4>
 464:	60 5d       	subi	r22, 0xD0	; 208
 466:	6d 83       	std	Y+5, r22	; 0x05
    val[5] = (vcc/100)%10 + 48;
 468:	61 2f       	mov	r22, r17
 46a:	70 2f       	mov	r23, r16
 46c:	8f 2d       	mov	r24, r15
 46e:	9e 2d       	mov	r25, r14
 470:	24 e6       	ldi	r18, 0x64	; 100
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	40 e0       	ldi	r20, 0x00	; 0
 476:	50 e0       	ldi	r21, 0x00	; 0
 478:	0e 94 32 06 	call	0xc64	; 0xc64 <__udivmodsi4>
 47c:	ca 01       	movw	r24, r20
 47e:	b9 01       	movw	r22, r18
 480:	2a e0       	ldi	r18, 0x0A	; 10
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	40 e0       	ldi	r20, 0x00	; 0
 486:	50 e0       	ldi	r21, 0x00	; 0
 488:	0e 94 32 06 	call	0xc64	; 0xc64 <__udivmodsi4>
 48c:	60 5d       	subi	r22, 0xD0	; 208
 48e:	6e 83       	std	Y+6, r22	; 0x06
    val[6] = (vcc/10)%10 + 48;
 490:	61 2f       	mov	r22, r17
 492:	70 2f       	mov	r23, r16
 494:	8f 2d       	mov	r24, r15
 496:	9e 2d       	mov	r25, r14
 498:	2a e0       	ldi	r18, 0x0A	; 10
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	40 e0       	ldi	r20, 0x00	; 0
 49e:	50 e0       	ldi	r21, 0x00	; 0
 4a0:	0e 94 32 06 	call	0xc64	; 0xc64 <__udivmodsi4>
 4a4:	ca 01       	movw	r24, r20
 4a6:	b9 01       	movw	r22, r18
 4a8:	2a e0       	ldi	r18, 0x0A	; 10
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	40 e0       	ldi	r20, 0x00	; 0
 4ae:	50 e0       	ldi	r21, 0x00	; 0
 4b0:	0e 94 32 06 	call	0xc64	; 0xc64 <__udivmodsi4>
 4b4:	60 5d       	subi	r22, 0xD0	; 208
 4b6:	6f 83       	std	Y+7, r22	; 0x07
    val[7] = (vcc/1)%10 + 48;
 4b8:	61 2f       	mov	r22, r17
 4ba:	70 2f       	mov	r23, r16
 4bc:	8f 2d       	mov	r24, r15
 4be:	9e 2d       	mov	r25, r14
 4c0:	2a e0       	ldi	r18, 0x0A	; 10
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	40 e0       	ldi	r20, 0x00	; 0
 4c6:	50 e0       	ldi	r21, 0x00	; 0
 4c8:	0e 94 32 06 	call	0xc64	; 0xc64 <__udivmodsi4>
 4cc:	60 5d       	subi	r22, 0xD0	; 208
 4ce:	68 87       	std	Y+8, r22	; 0x08
 4d0:	85 01       	movw	r16, r10
    
    for(uint8_t i=0;i<10;i++){
      Debug_Tx_Byte( val[i] );
 4d2:	f8 01       	movw	r30, r16
 4d4:	81 91       	ld	r24, Z+
 4d6:	8f 01       	movw	r16, r30
 4d8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
    val[4] = (vcc/1000)%10 + 48;
    val[5] = (vcc/100)%10 + 48;
    val[6] = (vcc/10)%10 + 48;
    val[7] = (vcc/1)%10 + 48;
    
    for(uint8_t i=0;i<10;i++){
 4dc:	0c 15       	cp	r16, r12
 4de:	1d 05       	cpc	r17, r13
 4e0:	c1 f7       	brne	.-16     	; 0x4d2 <KER_TR+0xea>
      Debug_Tx_Byte( val[i] );
    }
    Kernel_Task_Sleep(10);
 4e2:	8a e0       	ldi	r24, 0x0A	; 10
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	0e 94 de 04 	call	0x9bc	; 0x9bc <Kernel_Task_Sleep>
 4ea:	89 cf       	rjmp	.-238    	; 0x3fe <KER_TR+0x16>

000004ec <__vector_16>:


;;=================================ISR execution starting===================================;; 
.global  __vector_16                                                                           
    __vector_16:                                          ;total 40.00uS @8MHz    (320 clocks) 
	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 4ec:	5d 9a       	sbi	0x0b, 5	; 11
        KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 4ee:	0f 92       	push	r0
 4f0:	0f b6       	in	r0, 0x3f	; 63
 4f2:	0f 92       	push	r0
 4f4:	1f 92       	push	r1
 4f6:	11 24       	eor	r1, r1
 4f8:	2f 92       	push	r2
 4fa:	3f 92       	push	r3
 4fc:	4f 92       	push	r4
 4fe:	5f 92       	push	r5
 500:	6f 92       	push	r6
 502:	7f 92       	push	r7
 504:	8f 92       	push	r8
 506:	9f 92       	push	r9
 508:	af 92       	push	r10
 50a:	bf 92       	push	r11
 50c:	cf 92       	push	r12
 50e:	df 92       	push	r13
 510:	ef 92       	push	r14
 512:	ff 92       	push	r15
 514:	0f 93       	push	r16
 516:	1f 93       	push	r17
 518:	2f 93       	push	r18
 51a:	3f 93       	push	r19
 51c:	4f 93       	push	r20
 51e:	5f 93       	push	r21
 520:	6f 93       	push	r22
 522:	7f 93       	push	r23
 524:	8f 93       	push	r24
 526:	9f 93       	push	r25
 528:	af 93       	push	r26
 52a:	bf 93       	push	r27
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29
 530:	ef 93       	push	r30
 532:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 534:	ee e0       	ldi	r30, 0x0E	; 14
 536:	f1 e0       	ldi	r31, 0x01	; 1
 538:	00 91 07 01 	lds	r16, 0x0107
 53c:	00 0f       	add	r16, r16
 53e:	e0 0f       	add	r30, r16
 540:	00 e0       	ldi	r16, 0x00	; 0
 542:	f0 1f       	adc	r31, r16
 544:	0d b7       	in	r16, 0x3d	; 61
 546:	1e b7       	in	r17, 0x3e	; 62
 548:	00 83       	st	Z, r16
 54a:	11 83       	std	Z+1, r17	; 0x01
		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 54c:	00 91 06 01 	lds	r16, 0x0106
 550:	00 93 46 00 	sts	0x0046, r16
		KER_TICK_INCREMENT                                ;increment tick counter ( 26 clocks) 
 554:	00 91 00 01 	lds	r16, 0x0100
 558:	03 95       	inc	r16
 55a:	00 93 00 01 	sts	0x0100, r16
 55e:	10 e0       	ldi	r17, 0x00	; 0
 560:	00 91 01 01 	lds	r16, 0x0101
 564:	01 1f       	adc	r16, r17
 566:	00 93 01 01 	sts	0x0101, r16
 56a:	00 91 02 01 	lds	r16, 0x0102
 56e:	01 1f       	adc	r16, r17
 570:	00 93 02 01 	sts	0x0102, r16
 574:	00 91 03 01 	lds	r16, 0x0103
 578:	01 1f       	adc	r16, r17
 57a:	00 93 03 01 	sts	0x0103, r16
 57e:	00 91 04 01 	lds	r16, 0x0104
 582:	01 1f       	adc	r16, r17
 584:	00 93 04 01 	sts	0x0104, r16
		LDI    R24               , SCH_MODE_HANDLER       ;set sch mode           (  1 clock ) 
 588:	80 e0       	ldi	r24, 0x00	; 0
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
 58a:	0f ef       	ldi	r16, 0xFF	; 255
 58c:	00 93 09 01 	sts	0x0109, r16
 590:	00 e0       	ldi	r16, 0x00	; 0
 592:	00 93 0a 01 	sts	0x010A, r16
 596:	98 2f       	mov	r25, r24

00000598 <_KER_SCH_LOOP8>:
 598:	00 93 07 01 	sts	0x0107, r16
 59c:	89 2f       	mov	r24, r25
 59e:	e4 e4       	ldi	r30, 0x44	; 68
 5a0:	f1 e0       	ldi	r31, 0x01	; 1
 5a2:	00 91 07 01 	lds	r16, 0x0107
 5a6:	00 0f       	add	r16, r16
 5a8:	e0 0f       	add	r30, r16
 5aa:	00 e0       	ldi	r16, 0x00	; 0
 5ac:	f0 1f       	adc	r31, r16
 5ae:	00 81       	ld	r16, Z
 5b0:	11 81       	ldd	r17, Z+1	; 0x01
 5b2:	20 2f       	mov	r18, r16
 5b4:	21 2b       	or	r18, r17
 5b6:	59 f0       	breq	.+22     	; 0x5ce <_VAL_NULL9>
 5b8:	81 30       	cpi	r24, 0x01	; 1
 5ba:	99 f0       	breq	.+38     	; 0x5e2 <_VAL_NOT_NULL9>
 5bc:	21 e0       	ldi	r18, 0x01	; 1
 5be:	02 1b       	sub	r16, r18
 5c0:	20 e0       	ldi	r18, 0x00	; 0
 5c2:	12 0b       	sbc	r17, r18
 5c4:	00 83       	st	Z, r16
 5c6:	11 83       	std	Z+1, r17	; 0x01
 5c8:	20 2f       	mov	r18, r16
 5ca:	21 2b       	or	r18, r17
 5cc:	51 f4       	brne	.+20     	; 0x5e2 <_VAL_NOT_NULL9>

000005ce <_VAL_NULL9>:
 5ce:	e0 e3       	ldi	r30, 0x30	; 48
 5d0:	f1 e0       	ldi	r31, 0x01	; 1
 5d2:	00 91 07 01 	lds	r16, 0x0107
 5d6:	e0 0f       	add	r30, r16
 5d8:	00 e0       	ldi	r16, 0x00	; 0
 5da:	f0 1f       	adc	r31, r16
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	80 83       	st	Z, r24
 5e0:	01 c0       	rjmp	.+2      	; 0x5e4 <_EXIT_SLP_TIME9>

000005e2 <_VAL_NOT_NULL9>:
 5e2:	80 e0       	ldi	r24, 0x00	; 0

000005e4 <_EXIT_SLP_TIME9>:
 5e4:	81 30       	cpi	r24, 0x01	; 1
 5e6:	91 f4       	brne	.+36     	; 0x60c <_KER_SCH_NEXT8>
 5e8:	ea e3       	ldi	r30, 0x3A	; 58
 5ea:	f1 e0       	ldi	r31, 0x01	; 1
 5ec:	00 e0       	ldi	r16, 0x00	; 0
 5ee:	80 91 07 01 	lds	r24, 0x0107
 5f2:	e8 0f       	add	r30, r24
 5f4:	f0 1f       	adc	r31, r16
 5f6:	80 81       	ld	r24, Z
 5f8:	00 91 09 01 	lds	r16, 0x0109
 5fc:	80 17       	cp	r24, r16
 5fe:	30 f4       	brcc	.+12     	; 0x60c <_KER_SCH_NEXT8>
 600:	80 93 09 01 	sts	0x0109, r24
 604:	00 91 07 01 	lds	r16, 0x0107
 608:	00 93 0a 01 	sts	0x010A, r16

0000060c <_KER_SCH_NEXT8>:
 60c:	00 91 07 01 	lds	r16, 0x0107
 610:	03 95       	inc	r16
 612:	10 91 08 01 	lds	r17, 0x0108
 616:	01 17       	cp	r16, r17
 618:	08 f4       	brcc	.+2      	; 0x61c <_KER_SCH_EXIT8>
 61a:	be cf       	rjmp	.-132    	; 0x598 <_KER_SCH_LOOP8>

0000061c <_KER_SCH_EXIT8>:
 61c:	00 91 0a 01 	lds	r16, 0x010A
 620:	00 93 07 01 	sts	0x0107, r16
		KER_CPU_USAGE                                     ;calc cpu usage         ( 26 clocks) 
 624:	00 91 07 01 	lds	r16, 0x0107
 628:	00 23       	and	r16, r16
 62a:	29 f0       	breq	.+10     	; 0x636 <_KER_USG_TICK13>
 62c:	00 91 0c 01 	lds	r16, 0x010C
 630:	03 95       	inc	r16
 632:	00 93 0c 01 	sts	0x010C, r16

00000636 <_KER_USG_TICK13>:
 636:	00 91 0b 01 	lds	r16, 0x010B
 63a:	03 95       	inc	r16
 63c:	04 36       	cpi	r16, 0x64	; 100
 63e:	40 f0       	brcs	.+16     	; 0x650 <_KER_USG_UTC_SV13>
 640:	00 e0       	ldi	r16, 0x00	; 0
 642:	10 91 0c 01 	lds	r17, 0x010C
 646:	10 93 0d 01 	sts	0x010D, r17
 64a:	10 e0       	ldi	r17, 0x00	; 0
 64c:	10 93 0c 01 	sts	0x010C, r17

00000650 <_KER_USG_UTC_SV13>:
 650:	00 93 0b 01 	sts	0x010B, r16
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 654:	ee e0       	ldi	r30, 0x0E	; 14
 656:	f1 e0       	ldi	r31, 0x01	; 1
 658:	00 91 07 01 	lds	r16, 0x0107
 65c:	00 0f       	add	r16, r16
 65e:	e0 0f       	add	r30, r16
 660:	00 e0       	ldi	r16, 0x00	; 0
 662:	f0 1f       	adc	r31, r16
 664:	00 81       	ld	r16, Z
 666:	11 81       	ldd	r17, Z+1	; 0x01
 668:	0d bf       	out	0x3d, r16	; 61
 66a:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
 66c:	ff 91       	pop	r31
 66e:	ef 91       	pop	r30
 670:	df 91       	pop	r29
 672:	cf 91       	pop	r28
 674:	bf 91       	pop	r27
 676:	af 91       	pop	r26
 678:	9f 91       	pop	r25
 67a:	8f 91       	pop	r24
 67c:	7f 91       	pop	r23
 67e:	6f 91       	pop	r22
 680:	5f 91       	pop	r21
 682:	4f 91       	pop	r20
 684:	3f 91       	pop	r19
 686:	2f 91       	pop	r18
 688:	1f 91       	pop	r17
 68a:	0f 91       	pop	r16
 68c:	ff 90       	pop	r15
 68e:	ef 90       	pop	r14
 690:	df 90       	pop	r13
 692:	cf 90       	pop	r12
 694:	bf 90       	pop	r11
 696:	af 90       	pop	r10
 698:	9f 90       	pop	r9
 69a:	8f 90       	pop	r8
 69c:	7f 90       	pop	r7
 69e:	6f 90       	pop	r6
 6a0:	5f 90       	pop	r5
 6a2:	4f 90       	pop	r4
 6a4:	3f 90       	pop	r3
 6a6:	2f 90       	pop	r2
 6a8:	1f 90       	pop	r1
 6aa:	0f 90       	pop	r0
 6ac:	0f be       	out	0x3f, r0	; 63
 6ae:	0f 90       	pop	r0
	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 6b0:	5d 98       	cbi	0x0b, 5	; 11
		RETI                                              ;return from interrupt  (  4 clocks) 
 6b2:	18 95       	reti

000006b4 <Kernel_SysTick_Reg_Init>:


;;================================SysTick reg init starting=================================;; 
Kernel_SysTick_Reg_Init:                                  ;total 11.5uS @8MHz     ( 92 clocks) 
        ;arg1 -> prescaler R24, arg2 -> reload val R22                                         
        CLI                                               ;disable global int     (  1 clock ) 
 6b4:	f8 94       	cli
		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 6b6:	5d 98       	cbi	0x0b, 5	; 11
 6b8:	55 9a       	sbi	0x0a, 5	; 10
        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 6ba:	a0 91 22 01 	lds	r26, 0x0122
 6be:	b0 91 23 01 	lds	r27, 0x0123
 6c2:	0d b7       	in	r16, 0x3d	; 61
 6c4:	1e b7       	in	r17, 0x3e	; 62
 6c6:	0d 93       	st	X+, r16
 6c8:	1d 93       	st	X+, r17
 6ca:	ed 93       	st	X+, r30
 6cc:	fd 93       	st	X+, r31
 6ce:	a0 93 22 01 	sts	0x0122, r26
 6d2:	b0 93 23 01 	sts	0x0123, r27
		;clear reg                                                                             
		LDI   R16                , 0x00                   ;set 0x00 to R16        (  1 clock ) 
 6d6:	00 e0       	ldi	r16, 0x00	; 0
		;clear tick counter                                                                    
		STS   KerBase+OFB_TICK0  , R16                    ;clear  KerBase[0]      (  2 clocks) 
 6d8:	00 93 00 01 	sts	0x0100, r16
		STS   KerBase+OFB_TICK1  , R16                    ;clear  KerBase[1]      (  2 clocks) 
 6dc:	00 93 01 01 	sts	0x0101, r16
		STS   KerBase+OFB_TICK2  , R16                    ;clear  KerBase[2]      (  2 clocks) 
 6e0:	00 93 02 01 	sts	0x0102, r16
		STS   KerBase+OFB_TICK3  , R16                    ;clear  KerBase[3]      (  2 clocks) 
 6e4:	00 93 03 01 	sts	0x0103, r16
		STS   KerBase+OFB_TICK4  , R16                    ;clear  KerBase[4]      (  2 clocks) 
 6e8:	00 93 04 01 	sts	0x0104, r16
		;clear system registers                                                                
		STS   KerBase+OFB_PRS    , R16                    ;clear  KerBase[5]      (  2 clocks) 
 6ec:	00 93 05 01 	sts	0x0105, r16
		STS   KerBase+OFB_RLD    , R16                    ;clear  KerBase[6]      (  2 clocks) 
 6f0:	00 93 06 01 	sts	0x0106, r16
		STS   KerBase+OFB_TID    , R16                    ;clear  KerBase[7]      (  2 clocks) 
 6f4:	00 93 07 01 	sts	0x0107, r16
		STS   KerBase+OFB_NTSK   , R16                    ;clear  KerBase[8]      (  2 clocks) 
 6f8:	00 93 08 01 	sts	0x0108, r16
		STS   KerBase+OFB_LPR    , R16                    ;clear  KerBase[9]      (  2 clocks) 
 6fc:	00 93 09 01 	sts	0x0109, r16
        STS   KerBase+OFB_PTID   , R16                    ;clear  KerBase[10]     (  2 clocks) 
 700:	00 93 0a 01 	sts	0x010A, r16
		STS   KerBase+OFB_UTC    , R16                    ;clear  KerBase[11]     (  2 clocks) 
 704:	00 93 0b 01 	sts	0x010B, r16
		STS   KerBase+OFB_UATC   , R16                    ;clear  KerBase[12]     (  2 clocks) 
 708:	00 93 0c 01 	sts	0x010C, r16
		STS   KerBase+OFB_USAGE  , R16                    ;clear  KerBase[13]     (  2 clocks) 
 70c:	00 93 0d 01 	sts	0x010D, r16
		;clear all timer registers                                                             
		STS   SRTCCR0A           , R16                    ;clear TCCR0A           (  2 clocks) 
 710:	00 93 44 00 	sts	0x0044, r16
		STS   SRTCCR0B           , R16                    ;clear TCCR0B           (  2 clocks) 
 714:	00 93 45 00 	sts	0x0045, r16
		STS   SRTIMSK0           , R16                    ;clear TIMSK0           (  2 clocks) 
 718:	00 93 6e 00 	sts	0x006E, r16
		STS   SRTIFR0            , R16                    ;clear TIFR0            (  2 clocks) 
 71c:	00 93 35 00 	sts	0x0035, r16
		STS   SROCR0A            , R16                    ;clear OCR0A            (  2 clocks) 
 720:	00 93 47 00 	sts	0x0047, r16
		STS   SROCR0B            , R16                    ;clear OCR0B            (  2 clocks) 
 724:	00 93 48 00 	sts	0x0048, r16
		STS   SRTCNT0            , R16                    ;clear TCNT0            (  2 clocks) 
 728:	00 93 46 00 	sts	0x0046, r16
		;save values for future use                                                            
		STS   KerBase+OFB_PRS    , R24                    ;KerBase[5] prescaler   (  2 clocks) 
 72c:	80 93 05 01 	sts	0x0105, r24
		STS   KerBase+OFB_RLD    , R22                    ;KerBase[6] reload val  (  2 clocks) 
 730:	60 93 06 01 	sts	0x0106, r22
        KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 734:	a0 91 22 01 	lds	r26, 0x0122
 738:	b0 91 23 01 	lds	r27, 0x0123
 73c:	fe 91       	ld	r31, -X
 73e:	ee 91       	ld	r30, -X
 740:	1e 91       	ld	r17, -X
 742:	0e 91       	ld	r16, -X
 744:	0d bf       	out	0x3d, r16	; 61
 746:	1e bf       	out	0x3e, r17	; 62
 748:	a0 93 22 01 	sts	0x0122, r26
 74c:	b0 93 23 01 	sts	0x0123, r27
		RET                                               ;return from subroutine (  4 clocks) 
 750:	08 95       	ret

00000752 <Kernel_Task_Create>:


;;===============================kernel task create starting================================;; 
Kernel_Task_Create:                                       ;total 20.38uS @8MHz    (163 clocks) 
        ;func_ptr->R25:R24, task_priority->R22                                                 
        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 752:	a0 91 22 01 	lds	r26, 0x0122
 756:	b0 91 23 01 	lds	r27, 0x0123
 75a:	0d b7       	in	r16, 0x3d	; 61
 75c:	1e b7       	in	r17, 0x3e	; 62
 75e:	0d 93       	st	X+, r16
 760:	1d 93       	st	X+, r17
 762:	ed 93       	st	X+, r30
 764:	fd 93       	st	X+, r31
 766:	a0 93 22 01 	sts	0x0122, r26
 76a:	b0 93 23 01 	sts	0x0123, r27
		LDI   R17                , 0x00                   ;clear reg              (  1 clock ) 
 76e:	10 e0       	ldi	r17, 0x00	; 0
		;set priority to KerSchPr+task_id                                                      
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 770:	ea e3       	ldi	r30, 0x3A	; 58
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 772:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 774:	00 91 07 01 	lds	r16, 0x0107
 778:	e0 0f       	add	r30, r16
 77a:	00 e0       	ldi	r16, 0x00	; 0
 77c:	f0 1f       	adc	r31, r16
		ST    Z                  , R22                    ;save priority          (  2 clocks) 
 77e:	60 83       	st	Z, r22
		;set task status to KerSchSts+task_id                                                      
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 780:	e0 e3       	ldi	r30, 0x30	; 48
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 782:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 784:	00 91 07 01 	lds	r16, 0x0107
 788:	e0 0f       	add	r30, r16
 78a:	00 e0       	ldi	r16, 0x00	; 0
 78c:	f0 1f       	adc	r31, r16
		LDI   R16                , TASK_READY             ;set status as ready    (  1 clock ) 
 78e:	01 e0       	ldi	r16, 0x01	; 1
		ST    Z                  , R16                    ;save status            (  2 clocks) 
 790:	00 83       	st	Z, r16
		;stack pointer for current task (KerStack + KER_STK_SZ*(task_id+1) - 1) ->stack top    
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 792:	00 91 07 01 	lds	r16, 0x0107
		MOV   R17                , R16                    ;load task_id           (  1 clock ) 
 796:	10 2f       	mov	r17, r16
		INC   R17                                         ;increment task_id      (  1 clock ) 
 798:	13 95       	inc	r17
		LDI   R18                , KER_STK_SZ             ;load stack size        (  1 clock ) 
 79a:	20 e8       	ldi	r18, 0x80	; 128
		MUL   R17                , R18                    ;multiply to get offset (  2 clocks) 
 79c:	12 9f       	mul	r17, r18
		MOV   ZL                 , R0                     ;load multiplied low    (  1 clocks) 
 79e:	e0 2d       	mov	r30, r0
		MOV   ZH                 , R1                     ;load multiplied high   (  1 clocks) 
 7a0:	f1 2d       	mov	r31, r1
		SBIW  ZL                 , 0x01                   ;dec multiplied val-1   (  2 clocks) 
 7a2:	31 97       	sbiw	r30, 0x01	; 1
		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 7a4:	11 24       	eor	r1, r1
		LDI   R17                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
 7a6:	18 e5       	ldi	r17, 0x58	; 88
		LDI   R18                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
 7a8:	21 e0       	ldi	r18, 0x01	; 1
		ADD   ZL                 , R17                    ;add low bytes          (  1 clock ) 
 7aa:	e1 0f       	add	r30, r17
		ADC   ZH                 , R18                    ;add high bytes+carry   (  1 clock ) 
 7ac:	f2 1f       	adc	r31, r18
		OUT   IOSPL              , ZL                     ;load SPL               (  1 clock ) 
 7ae:	ed bf       	out	0x3d, r30	; 61
        OUT   IOSPH              , ZH                     ;load SPH               (  1 clock ) 
 7b0:	fe bf       	out	0x3e, r31	; 62
		;function argument directly returns word address                                       
	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
 7b2:	8f 93       	push	r24
		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 7b4:	9f 93       	push	r25
		;push context to stack of this task                                                    
		KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 7b6:	0f 92       	push	r0
 7b8:	0f b6       	in	r0, 0x3f	; 63
 7ba:	0f 92       	push	r0
 7bc:	1f 92       	push	r1
 7be:	11 24       	eor	r1, r1
 7c0:	2f 92       	push	r2
 7c2:	3f 92       	push	r3
 7c4:	4f 92       	push	r4
 7c6:	5f 92       	push	r5
 7c8:	6f 92       	push	r6
 7ca:	7f 92       	push	r7
 7cc:	8f 92       	push	r8
 7ce:	9f 92       	push	r9
 7d0:	af 92       	push	r10
 7d2:	bf 92       	push	r11
 7d4:	cf 92       	push	r12
 7d6:	df 92       	push	r13
 7d8:	ef 92       	push	r14
 7da:	ff 92       	push	r15
 7dc:	0f 93       	push	r16
 7de:	1f 93       	push	r17
 7e0:	2f 93       	push	r18
 7e2:	3f 93       	push	r19
 7e4:	4f 93       	push	r20
 7e6:	5f 93       	push	r21
 7e8:	6f 93       	push	r22
 7ea:	7f 93       	push	r23
 7ec:	8f 93       	push	r24
 7ee:	9f 93       	push	r25
 7f0:	af 93       	push	r26
 7f2:	bf 93       	push	r27
 7f4:	cf 93       	push	r28
 7f6:	df 93       	push	r29
 7f8:	ef 93       	push	r30
 7fa:	ff 93       	push	r31
		;read stack pointer of current task (necessary when restore)                           
		IN    R17                , IOSPL                  ;read SPL               (  1 clock ) 
 7fc:	1d b7       	in	r17, 0x3d	; 61
        IN    R18                , IOSPH                  ;read SPH               (  1 clock ) 
 7fe:	2e b7       	in	r18, 0x3e	; 62
		;calculate the address where current task's SP will be stored and store SP             
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 800:	00 91 07 01 	lds	r16, 0x0107
		MOV   R19                , R16                    ;copy task_id           (  1 clock ) 
 804:	30 2f       	mov	r19, r16
		LSL   R19                                         ;left shift to multiply (  1 clock ) 
 806:	33 0f       	add	r19, r19
		LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 808:	ee e0       	ldi	r30, 0x0E	; 14
		LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 80a:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R19                    ;add offset to array    (  1 clock ) 
 80c:	e3 0f       	add	r30, r19
		LDI   R16                , 0x00                   ;clear reg              (  1 clock ) 
 80e:	00 e0       	ldi	r16, 0x00	; 0
		ADC   ZH                 , R16                    ;add carry if any       (  1 clock ) 
 810:	f0 1f       	adc	r31, r16
		ST    Z+                 , R17                    ;SPL at KerPSp+offset   (  2 clocks) 
 812:	11 93       	st	Z+, r17
		ST    Z                  , R18                    ;SPH at KerPSp+offset   (  2 clocks) 
 814:	20 83       	st	Z, r18
		;increment task_id                                                                     
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 816:	00 91 07 01 	lds	r16, 0x0107
		INC   R16                                         ;increment task_id      (  1 clock ) 
 81a:	03 95       	inc	r16
		STS   KerBase+OFB_TID    , R16                    ;store task_id          (  2 clocks) 
 81c:	00 93 07 01 	sts	0x0107, r16
		;increment ntask                                                                       
		LDS   R16                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 820:	00 91 08 01 	lds	r16, 0x0108
		INC   R16                                         ;increment ntask        (  1 clock ) 
 824:	03 95       	inc	r16
		STS   KerBase+OFB_NTSK   , R16                    ;store ntask            (  2 clocks) 
 826:	00 93 08 01 	sts	0x0108, r16
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 82a:	a0 91 22 01 	lds	r26, 0x0122
 82e:	b0 91 23 01 	lds	r27, 0x0123
 832:	fe 91       	ld	r31, -X
 834:	ee 91       	ld	r30, -X
 836:	1e 91       	ld	r17, -X
 838:	0e 91       	ld	r16, -X
 83a:	0d bf       	out	0x3d, r16	; 61
 83c:	1e bf       	out	0x3e, r17	; 62
 83e:	a0 93 22 01 	sts	0x0122, r26
 842:	b0 93 23 01 	sts	0x0123, r27
		RET                                               ;return from subroutine (  4 clocks) 
 846:	08 95       	ret

00000848 <Kernel_Start_Tasks>:



;;=================================kernel start tasks starting==============================;; 
Kernel_Start_Tasks:                                       ;total 11.38uS @8MHz    ( 91 clocks) 
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 848:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
 84a:	0f ef       	ldi	r16, 0xFF	; 255
 84c:	00 93 09 01 	sts	0x0109, r16
 850:	00 e0       	ldi	r16, 0x00	; 0
 852:	00 93 0a 01 	sts	0x010A, r16
 856:	98 2f       	mov	r25, r24

00000858 <_KER_SCH_LOOP30>:
 858:	00 93 07 01 	sts	0x0107, r16
 85c:	89 2f       	mov	r24, r25
 85e:	e4 e4       	ldi	r30, 0x44	; 68
 860:	f1 e0       	ldi	r31, 0x01	; 1
 862:	00 91 07 01 	lds	r16, 0x0107
 866:	00 0f       	add	r16, r16
 868:	e0 0f       	add	r30, r16
 86a:	00 e0       	ldi	r16, 0x00	; 0
 86c:	f0 1f       	adc	r31, r16
 86e:	00 81       	ld	r16, Z
 870:	11 81       	ldd	r17, Z+1	; 0x01
 872:	20 2f       	mov	r18, r16
 874:	21 2b       	or	r18, r17
 876:	59 f0       	breq	.+22     	; 0x88e <_VAL_NULL31>
 878:	81 30       	cpi	r24, 0x01	; 1
 87a:	99 f0       	breq	.+38     	; 0x8a2 <_VAL_NOT_NULL31>
 87c:	21 e0       	ldi	r18, 0x01	; 1
 87e:	02 1b       	sub	r16, r18
 880:	20 e0       	ldi	r18, 0x00	; 0
 882:	12 0b       	sbc	r17, r18
 884:	00 83       	st	Z, r16
 886:	11 83       	std	Z+1, r17	; 0x01
 888:	20 2f       	mov	r18, r16
 88a:	21 2b       	or	r18, r17
 88c:	51 f4       	brne	.+20     	; 0x8a2 <_VAL_NOT_NULL31>

0000088e <_VAL_NULL31>:
 88e:	e0 e3       	ldi	r30, 0x30	; 48
 890:	f1 e0       	ldi	r31, 0x01	; 1
 892:	00 91 07 01 	lds	r16, 0x0107
 896:	e0 0f       	add	r30, r16
 898:	00 e0       	ldi	r16, 0x00	; 0
 89a:	f0 1f       	adc	r31, r16
 89c:	81 e0       	ldi	r24, 0x01	; 1
 89e:	80 83       	st	Z, r24
 8a0:	01 c0       	rjmp	.+2      	; 0x8a4 <_EXIT_SLP_TIME31>

000008a2 <_VAL_NOT_NULL31>:
 8a2:	80 e0       	ldi	r24, 0x00	; 0

000008a4 <_EXIT_SLP_TIME31>:
 8a4:	81 30       	cpi	r24, 0x01	; 1
 8a6:	91 f4       	brne	.+36     	; 0x8cc <_KER_SCH_NEXT30>
 8a8:	ea e3       	ldi	r30, 0x3A	; 58
 8aa:	f1 e0       	ldi	r31, 0x01	; 1
 8ac:	00 e0       	ldi	r16, 0x00	; 0
 8ae:	80 91 07 01 	lds	r24, 0x0107
 8b2:	e8 0f       	add	r30, r24
 8b4:	f0 1f       	adc	r31, r16
 8b6:	80 81       	ld	r24, Z
 8b8:	00 91 09 01 	lds	r16, 0x0109
 8bc:	80 17       	cp	r24, r16
 8be:	30 f4       	brcc	.+12     	; 0x8cc <_KER_SCH_NEXT30>
 8c0:	80 93 09 01 	sts	0x0109, r24
 8c4:	00 91 07 01 	lds	r16, 0x0107
 8c8:	00 93 0a 01 	sts	0x010A, r16

000008cc <_KER_SCH_NEXT30>:
 8cc:	00 91 07 01 	lds	r16, 0x0107
 8d0:	03 95       	inc	r16
 8d2:	10 91 08 01 	lds	r17, 0x0108
 8d6:	01 17       	cp	r16, r17
 8d8:	08 f4       	brcc	.+2      	; 0x8dc <_KER_SCH_EXIT30>
 8da:	be cf       	rjmp	.-132    	; 0x858 <_KER_SCH_LOOP30>

000008dc <_KER_SCH_EXIT30>:
 8dc:	00 91 0a 01 	lds	r16, 0x010A
 8e0:	00 93 07 01 	sts	0x0107, r16
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 8e4:	ee e0       	ldi	r30, 0x0E	; 14
 8e6:	f1 e0       	ldi	r31, 0x01	; 1
 8e8:	00 91 07 01 	lds	r16, 0x0107
 8ec:	00 0f       	add	r16, r16
 8ee:	e0 0f       	add	r30, r16
 8f0:	00 e0       	ldi	r16, 0x00	; 0
 8f2:	f0 1f       	adc	r31, r16
 8f4:	00 81       	ld	r16, Z
 8f6:	11 81       	ldd	r17, Z+1	; 0x01
 8f8:	0d bf       	out	0x3d, r16	; 61
 8fa:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 8fc:	ff 91       	pop	r31
 8fe:	ef 91       	pop	r30
 900:	df 91       	pop	r29
 902:	cf 91       	pop	r28
 904:	bf 91       	pop	r27
 906:	af 91       	pop	r26
 908:	9f 91       	pop	r25
 90a:	8f 91       	pop	r24
 90c:	7f 91       	pop	r23
 90e:	6f 91       	pop	r22
 910:	5f 91       	pop	r21
 912:	4f 91       	pop	r20
 914:	3f 91       	pop	r19
 916:	2f 91       	pop	r18
 918:	1f 91       	pop	r17
 91a:	0f 91       	pop	r16
 91c:	ff 90       	pop	r15
 91e:	ef 90       	pop	r14
 920:	df 90       	pop	r13
 922:	cf 90       	pop	r12
 924:	bf 90       	pop	r11
 926:	af 90       	pop	r10
 928:	9f 90       	pop	r9
 92a:	8f 90       	pop	r8
 92c:	7f 90       	pop	r7
 92e:	6f 90       	pop	r6
 930:	5f 90       	pop	r5
 932:	4f 90       	pop	r4
 934:	3f 90       	pop	r3
 936:	2f 90       	pop	r2
 938:	1f 90       	pop	r1
 93a:	0f 90       	pop	r0
 93c:	0f be       	out	0x3f, r0	; 63
 93e:	0f 90       	pop	r0
 940:	78 94       	sei
		;config timer for system tick                                                          
		KER_TIMER_INIT                                    ;init timer, int enable ( 12 clocks) 
 942:	00 91 05 01 	lds	r16, 0x0105
 946:	10 91 06 01 	lds	r17, 0x0106
 94a:	00 93 45 00 	sts	0x0045, r16
 94e:	10 93 46 00 	sts	0x0046, r17
 952:	01 e0       	ldi	r16, 0x01	; 1
 954:	00 93 6e 00 	sts	0x006E, r16
 958:	78 94       	sei
		;execute return to jump to task0, pushed while task init                               
		RET                                               ;return from subroutine (  4 clocks) 
 95a:	08 95       	ret

0000095c <Kernel_Init>:


;;===================================kernel init starting===================================;; 
Kernel_Init:                                              ;total 38.63uS @8MHz    (309 clocks) 
		;save necessary registers and MSP                                                      
		CLR   R1                                          ;gcc expects            (  1 clock ) 
 95c:	11 24       	eor	r1, r1
        ;store stack top (for MSP) addr to KerSSZ+OFM_MSPI0:1                                  
		LDI   R16                , lo8(KerSSZ+OFM_MSPS)   ;load low address       (  1 clock ) 
 95e:	04 e2       	ldi	r16, 0x24	; 36
		LDI   R17                , hi8(KerSSZ+OFM_MSPS)   ;load high address      (  1 clock ) 
 960:	11 e0       	ldi	r17, 0x01	; 1
        STS   KerSSZ+OFM_MSPI+0  , R16                    ;set mspi to stack top  (  2 clocks) 
 962:	00 93 22 01 	sts	0x0122, r16
		STS   KerSSZ+OFM_MSPI+1  , R17                    ;set mspi to stack top  (  2 clocks) 
 966:	10 93 23 01 	sts	0x0123, r17
		KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 96a:	a0 91 22 01 	lds	r26, 0x0122
 96e:	b0 91 23 01 	lds	r27, 0x0123
 972:	0d b7       	in	r16, 0x3d	; 61
 974:	1e b7       	in	r17, 0x3e	; 62
 976:	0d 93       	st	X+, r16
 978:	1d 93       	st	X+, r17
 97a:	ed 93       	st	X+, r30
 97c:	fd 93       	st	X+, r31
 97e:	a0 93 22 01 	sts	0x0122, r26
 982:	b0 93 23 01 	sts	0x0123, r27
		;init timer for kernel                                                                 
		LDI   R24                , 0x03                   ;set prescaler          (  1 clock ) 
 986:	83 e0       	ldi	r24, 0x03	; 3
		LDI   R22                , 0x82                   ;set reload val         (  1 clock ) 
 988:	62 e8       	ldi	r22, 0x82	; 130
		CALL  Kernel_SysTick_Reg_Init                     ;init timer             ( 92 clocks) 
 98a:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Kernel_SysTick_Reg_Init>
		;create idle task at task_id 0, priority 0xFF (lowest)                                 
		LDI   R24                , lo8(Kernel_Task_Idle)  ;load func addr low     (  1 clock ) 
 98e:	8a eb       	ldi	r24, 0xBA	; 186
		LDI   R25                , hi8(Kernel_Task_Idle)  ;load func addr high    (  1 clock ) 
 990:	99 e0       	ldi	r25, 0x09	; 9
		LSR   R25                                         ;right shift to divide  (  1 clock ) 
 992:	96 95       	lsr	r25
		ROR   R24                                         ;rotate right th carry  (  1 clock ) 
 994:	87 95       	ror	r24
		LDI   R22                , 0xFF                   ;set max val            (  1 clock ) 
 996:	6f ef       	ldi	r22, 0xFF	; 255
		CALL  Kernel_Task_Create                          ;init idle task         (163 clocks) 
 998:	0e 94 a9 03 	call	0x752	; 0x752 <Kernel_Task_Create>
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 99c:	a0 91 22 01 	lds	r26, 0x0122
 9a0:	b0 91 23 01 	lds	r27, 0x0123
 9a4:	fe 91       	ld	r31, -X
 9a6:	ee 91       	ld	r30, -X
 9a8:	1e 91       	ld	r17, -X
 9aa:	0e 91       	ld	r16, -X
 9ac:	0d bf       	out	0x3d, r16	; 61
 9ae:	1e bf       	out	0x3e, r17	; 62
 9b0:	a0 93 22 01 	sts	0x0122, r26
 9b4:	b0 93 23 01 	sts	0x0123, r27
		;execute return to jump to task0, pushed while task init                               
		RET                                               ;return from subroutine (  4 clocks) 
 9b8:	08 95       	ret

000009ba <Kernel_Task_Idle>:


;;=================================kernel idle task starting================================;; 
Kernel_Task_Idle:                                         ;total 0.5uS @8MHz      (  4 clocks) 
    _IDLE_LOOP:                                           ;forever loop                        
		RJMP  _IDLE_LOOP                                  ;return from subroutine (  4 clocks) 
 9ba:	ff cf       	rjmp	.-2      	; 0x9ba <Kernel_Task_Idle>

000009bc <Kernel_Task_Sleep>:


;;================================kernel task sleep starting================================;; 
Kernel_Task_Sleep:                                        ;total 35.5uS @8MHz     (284 clocks) 
        ;save current context                                                                  
        KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
 9bc:	0f 92       	push	r0
 9be:	0f b6       	in	r0, 0x3f	; 63
 9c0:	f8 94       	cli
 9c2:	0f 92       	push	r0
 9c4:	1f 92       	push	r1
 9c6:	11 24       	eor	r1, r1
 9c8:	2f 92       	push	r2
 9ca:	3f 92       	push	r3
 9cc:	4f 92       	push	r4
 9ce:	5f 92       	push	r5
 9d0:	6f 92       	push	r6
 9d2:	7f 92       	push	r7
 9d4:	8f 92       	push	r8
 9d6:	9f 92       	push	r9
 9d8:	af 92       	push	r10
 9da:	bf 92       	push	r11
 9dc:	cf 92       	push	r12
 9de:	df 92       	push	r13
 9e0:	ef 92       	push	r14
 9e2:	ff 92       	push	r15
 9e4:	0f 93       	push	r16
 9e6:	1f 93       	push	r17
 9e8:	2f 93       	push	r18
 9ea:	3f 93       	push	r19
 9ec:	4f 93       	push	r20
 9ee:	5f 93       	push	r21
 9f0:	6f 93       	push	r22
 9f2:	7f 93       	push	r23
 9f4:	8f 93       	push	r24
 9f6:	9f 93       	push	r25
 9f8:	af 93       	push	r26
 9fa:	bf 93       	push	r27
 9fc:	cf 93       	push	r28
 9fe:	df 93       	push	r29
 a00:	ef 93       	push	r30
 a02:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 a04:	ee e0       	ldi	r30, 0x0E	; 14
 a06:	f1 e0       	ldi	r31, 0x01	; 1
 a08:	00 91 07 01 	lds	r16, 0x0107
 a0c:	00 0f       	add	r16, r16
 a0e:	e0 0f       	add	r30, r16
 a10:	00 e0       	ldi	r16, 0x00	; 0
 a12:	f0 1f       	adc	r31, r16
 a14:	0d b7       	in	r16, 0x3d	; 61
 a16:	1e b7       	in	r17, 0x3e	; 62
 a18:	00 83       	st	Z, r16
 a1a:	11 83       	std	Z+1, r17	; 0x01
		;create next task wakeup time (args R25:R24)                                           
		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 a1c:	e4 e4       	ldi	r30, 0x44	; 68
		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 a1e:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
 a20:	00 91 07 01 	lds	r16, 0x0107
 a24:	00 0f       	add	r16, r16
 a26:	e0 0f       	add	r30, r16
 a28:	00 e0       	ldi	r16, 0x00	; 0
 a2a:	f0 1f       	adc	r31, r16
		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
 a2c:	80 83       	st	Z, r24
		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 a2e:	91 83       	std	Z+1, r25	; 0x01
		;update task scheduler status as blocked                                               
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 a30:	e0 e3       	ldi	r30, 0x30	; 48
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 a32:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
 a34:	00 91 07 01 	lds	r16, 0x0107
 a38:	e0 0f       	add	r30, r16
 a3a:	00 e0       	ldi	r16, 0x00	; 0
 a3c:	f0 1f       	adc	r31, r16
        LDI   R16                , TASK_BLOCKED           ;block task until cnt=0 (  1 clock ) 
 a3e:	00 e0       	ldi	r16, 0x00	; 0
		STD   Z+0                , R16                    ;save block flag        (  2 clocks) 
 a40:	00 83       	st	Z, r16
		;run scheduler, load next task sp, restore context                                     
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 a42:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
 a44:	0f ef       	ldi	r16, 0xFF	; 255
 a46:	00 93 09 01 	sts	0x0109, r16
 a4a:	00 e0       	ldi	r16, 0x00	; 0
 a4c:	00 93 0a 01 	sts	0x010A, r16
 a50:	98 2f       	mov	r25, r24

00000a52 <_KER_SCH_LOOP50>:
 a52:	00 93 07 01 	sts	0x0107, r16
 a56:	89 2f       	mov	r24, r25
 a58:	e4 e4       	ldi	r30, 0x44	; 68
 a5a:	f1 e0       	ldi	r31, 0x01	; 1
 a5c:	00 91 07 01 	lds	r16, 0x0107
 a60:	00 0f       	add	r16, r16
 a62:	e0 0f       	add	r30, r16
 a64:	00 e0       	ldi	r16, 0x00	; 0
 a66:	f0 1f       	adc	r31, r16
 a68:	00 81       	ld	r16, Z
 a6a:	11 81       	ldd	r17, Z+1	; 0x01
 a6c:	20 2f       	mov	r18, r16
 a6e:	21 2b       	or	r18, r17
 a70:	59 f0       	breq	.+22     	; 0xa88 <_VAL_NULL51>
 a72:	81 30       	cpi	r24, 0x01	; 1
 a74:	99 f0       	breq	.+38     	; 0xa9c <_VAL_NOT_NULL51>
 a76:	21 e0       	ldi	r18, 0x01	; 1
 a78:	02 1b       	sub	r16, r18
 a7a:	20 e0       	ldi	r18, 0x00	; 0
 a7c:	12 0b       	sbc	r17, r18
 a7e:	00 83       	st	Z, r16
 a80:	11 83       	std	Z+1, r17	; 0x01
 a82:	20 2f       	mov	r18, r16
 a84:	21 2b       	or	r18, r17
 a86:	51 f4       	brne	.+20     	; 0xa9c <_VAL_NOT_NULL51>

00000a88 <_VAL_NULL51>:
 a88:	e0 e3       	ldi	r30, 0x30	; 48
 a8a:	f1 e0       	ldi	r31, 0x01	; 1
 a8c:	00 91 07 01 	lds	r16, 0x0107
 a90:	e0 0f       	add	r30, r16
 a92:	00 e0       	ldi	r16, 0x00	; 0
 a94:	f0 1f       	adc	r31, r16
 a96:	81 e0       	ldi	r24, 0x01	; 1
 a98:	80 83       	st	Z, r24
 a9a:	01 c0       	rjmp	.+2      	; 0xa9e <_EXIT_SLP_TIME51>

00000a9c <_VAL_NOT_NULL51>:
 a9c:	80 e0       	ldi	r24, 0x00	; 0

00000a9e <_EXIT_SLP_TIME51>:
 a9e:	81 30       	cpi	r24, 0x01	; 1
 aa0:	91 f4       	brne	.+36     	; 0xac6 <_KER_SCH_NEXT50>
 aa2:	ea e3       	ldi	r30, 0x3A	; 58
 aa4:	f1 e0       	ldi	r31, 0x01	; 1
 aa6:	00 e0       	ldi	r16, 0x00	; 0
 aa8:	80 91 07 01 	lds	r24, 0x0107
 aac:	e8 0f       	add	r30, r24
 aae:	f0 1f       	adc	r31, r16
 ab0:	80 81       	ld	r24, Z
 ab2:	00 91 09 01 	lds	r16, 0x0109
 ab6:	80 17       	cp	r24, r16
 ab8:	30 f4       	brcc	.+12     	; 0xac6 <_KER_SCH_NEXT50>
 aba:	80 93 09 01 	sts	0x0109, r24
 abe:	00 91 07 01 	lds	r16, 0x0107
 ac2:	00 93 0a 01 	sts	0x010A, r16

00000ac6 <_KER_SCH_NEXT50>:
 ac6:	00 91 07 01 	lds	r16, 0x0107
 aca:	03 95       	inc	r16
 acc:	10 91 08 01 	lds	r17, 0x0108
 ad0:	01 17       	cp	r16, r17
 ad2:	08 f4       	brcc	.+2      	; 0xad6 <_KER_SCH_EXIT50>
 ad4:	be cf       	rjmp	.-132    	; 0xa52 <_KER_SCH_LOOP50>

00000ad6 <_KER_SCH_EXIT50>:
 ad6:	00 91 0a 01 	lds	r16, 0x010A
 ada:	00 93 07 01 	sts	0x0107, r16
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 ade:	ee e0       	ldi	r30, 0x0E	; 14
 ae0:	f1 e0       	ldi	r31, 0x01	; 1
 ae2:	00 91 07 01 	lds	r16, 0x0107
 ae6:	00 0f       	add	r16, r16
 ae8:	e0 0f       	add	r30, r16
 aea:	00 e0       	ldi	r16, 0x00	; 0
 aec:	f0 1f       	adc	r31, r16
 aee:	00 81       	ld	r16, Z
 af0:	11 81       	ldd	r17, Z+1	; 0x01
 af2:	0d bf       	out	0x3d, r16	; 61
 af4:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 af6:	ff 91       	pop	r31
 af8:	ef 91       	pop	r30
 afa:	df 91       	pop	r29
 afc:	cf 91       	pop	r28
 afe:	bf 91       	pop	r27
 b00:	af 91       	pop	r26
 b02:	9f 91       	pop	r25
 b04:	8f 91       	pop	r24
 b06:	7f 91       	pop	r23
 b08:	6f 91       	pop	r22
 b0a:	5f 91       	pop	r21
 b0c:	4f 91       	pop	r20
 b0e:	3f 91       	pop	r19
 b10:	2f 91       	pop	r18
 b12:	1f 91       	pop	r17
 b14:	0f 91       	pop	r16
 b16:	ff 90       	pop	r15
 b18:	ef 90       	pop	r14
 b1a:	df 90       	pop	r13
 b1c:	cf 90       	pop	r12
 b1e:	bf 90       	pop	r11
 b20:	af 90       	pop	r10
 b22:	9f 90       	pop	r9
 b24:	8f 90       	pop	r8
 b26:	7f 90       	pop	r7
 b28:	6f 90       	pop	r6
 b2a:	5f 90       	pop	r5
 b2c:	4f 90       	pop	r4
 b2e:	3f 90       	pop	r3
 b30:	2f 90       	pop	r2
 b32:	1f 90       	pop	r1
 b34:	0f 90       	pop	r0
 b36:	0f be       	out	0x3f, r0	; 63
 b38:	0f 90       	pop	r0
 b3a:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
 b3c:	08 95       	ret

00000b3e <Kernel_Task_Sleep_Time_Get>:


;;===========================kernel task sleep time get starting============================;; 
Kernel_Task_Sleep_Time_Get:                               ;total 1.88uS @8MHz     ( 15 clocks) 
		;get remaining sleep time (ms), arg R24, return R25:R24                                
		MOV   R16                , R24                    ;copy                   (  1 clock ) 
 b3e:	08 2f       	mov	r16, r24
		LSL   R16                                         ;x2                     (  1 clock ) 
 b40:	00 0f       	add	r16, r16
		LDI   R30                , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 b42:	e4 e4       	ldi	r30, 0x44	; 68
		LDI   R31                , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 b44:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 b46:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 b48:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 b4a:	f0 1f       	adc	r31, r16
		LD    R24                , Z+                     ;load sleep time        (  2 clocks) 
 b4c:	81 91       	ld	r24, Z+
		LD    R25                , Z                      ;load sleep time        (  2 clocks) 
 b4e:	90 81       	ld	r25, Z
		RET                                               ;return from subroutine (  4 clocks) 
 b50:	08 95       	ret

00000b52 <Kernel_Task_Status_Get>:


;;==============================kernel task status get starting=============================;; 
Kernel_Task_Status_Get:                                   ;total 1.50uS @8MHz     ( 12 clocks) 
		;get task status ->ready/blocked, arg R24, return R24                                  
		MOV   R16                , R24                    ;copy                   (  1 clock ) 
 b52:	08 2f       	mov	r16, r24
		LDI   R30                , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 b54:	e0 e3       	ldi	r30, 0x30	; 48
		LDI   R31                , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 b56:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 b58:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 b5a:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 b5c:	f0 1f       	adc	r31, r16
		LD    R24                , Z                      ;load task status       (  2 clocks) 
 b5e:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 b60:	08 95       	ret

00000b62 <Kernel_NTask_Get>:



;;================================kernel ntask get starting=================================;; 
Kernel_NTask_Get:                                         ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                 , KerBase+OFB_NTSK      ;load ntask             (  2 clock ) 
 b62:	80 91 08 01 	lds	r24, 0x0108
		RET                                               ;return from subroutine (  4 clocks) 
 b66:	08 95       	ret

00000b68 <Kernel_Task_Prio_Get>:


;;=============================kernel task priority get starting============================;; 
Kernel_Task_Prio_Get:                                     ;total 1.38uS @8MHz     ( 11 clocks) 
		;get priority of the task id, arg (task_id->R24), return R24                           
		MOV   R16                , R24                    ;copy task_id           (  1 clock ) 
 b68:	08 2f       	mov	r16, r24
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 b6a:	ea e3       	ldi	r30, 0x3A	; 58
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 b6c:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
 b6e:	e0 0f       	add	r30, r16
		ADC   ZH                 , R1                     ;add high byte+carry    (  1 clock ) 
 b70:	f1 1d       	adc	r31, r1
		LD    R24                , Z                      ;load priority          (  2 clocks) 
 b72:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 b74:	08 95       	ret

00000b76 <Kernel_Lowest_Prio_Get>:


;;============================kernel lowest priority get starting===========================;; 
Kernel_Lowest_Prio_Get:                                   ;total 0.75uS @8MHz     (  6 clocks) 
		;get lowest priority, return R24                                                       
		LDS   R24                , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
 b76:	80 91 09 01 	lds	r24, 0x0109
		RET                                               ;return from subroutine (  4 clocks) 
 b7a:	08 95       	ret

00000b7c <Kernel_High_Prio_Task_ID_Get>:


;;===========================kernel high priority task id starting==========================;; 
Kernel_High_Prio_Task_ID_Get:                             ;total 0.88uS @8MHz     (  7 clocks) 
		;internal idle task id = 0, app task start from task id 1, return R24                  
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 b7c:	80 91 0a 01 	lds	r24, 0x010A
		DEC   R24                                         ;decrement by 1         (  1 clock ) 
 b80:	8a 95       	dec	r24
		RET                                               ;return from subroutine (  4 clocks) 
 b82:	08 95       	ret

00000b84 <Kernel_Abs_High_Prio_Task_ID_Get>:


;;=========================kernel abs high priority task id starting========================;; 
Kernel_Abs_High_Prio_Task_ID_Get:                         ;total 0.75uS @8MHz     (  6 clocks) 
		;get highest priority task id, return R24                                              
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 b84:	80 91 0a 01 	lds	r24, 0x010A
		RET                                               ;return from subroutine (  4 clocks) 
 b88:	08 95       	ret

00000b8a <Kernel_CPU_Usage_Get>:


;;================================kernel cpu usage get starting=============================;; 
Kernel_CPU_Usage_Get:                                     ;total 0.75uS @8MHz     (  6 clocks) 
		;get cpu usage, return R24                                                             
		LDS   R24                , KerBase+OFB_USAGE      ;load cpu usage         (  2 clocks) 
 b8a:	80 91 0d 01 	lds	r24, 0x010D
		RET                                               ;return from subroutine (  4 clocks) 
 b8e:	08 95       	ret

00000b90 <Debug_Init>:


;;===================================debug init starting====================================;; 
Debug_Init:                                               ;total 2.38uS @8MHz     ( 19 clocks) 
        ;init registers for UART0 (Arg R25:R24->UBRRH:UBRRL)                                   
		LDI   R16                , (1<<1)                 ;mask U2x               (  1 clock ) 
 b90:	02 e0       	ldi	r16, 0x02	; 2
		STS   SRUCSR0A           , R16                    ;load val to UCSR0A     (  2 clocks) 
 b92:	00 93 c0 00 	sts	0x00C0, r16
		MOV   R16                , R25                    ;copy R25->baud rate H  (  1 clock ) 
 b96:	09 2f       	mov	r16, r25
		STS   SRUBRR0H           , R16                    ;load val to UBRR0H     (  2 clocks) 
 b98:	00 93 c5 00 	sts	0x00C5, r16
		MOV   R16                , R24                    ;copy R24->baud rate L  (  1 clock ) 
 b9c:	08 2f       	mov	r16, r24
		STS   SRUBRR0L           , R16                    ;load val to UBRR0L     (  2 clocks) 
 b9e:	00 93 c4 00 	sts	0x00C4, r16
		LDI   R16                , (1<<1)|(1<<2)          ;config 8 data bit      (  1 clock ) 
 ba2:	06 e0       	ldi	r16, 0x06	; 6
		STS   SRUCSR0C           , R16                    ;load val to UCSR0C     (  2 clocks) 
 ba4:	00 93 c2 00 	sts	0x00C2, r16
		LDI   R16                , (1<<3)                 ;enable tx              (  1 clock ) 
 ba8:	08 e0       	ldi	r16, 0x08	; 8
		STS   SRUCSR0B           , R16                    ;load val to UCSR0B     (  2 clocks) 
 baa:	00 93 c1 00 	sts	0x00C1, r16
        RET                                               ;return from subroutine (  4 clocks) 
 bae:	08 95       	ret

00000bb0 <Debug_Tx_Byte>:


;;====================================debug tx starting=====================================;; 
Debug_Tx_Byte:                                            ;total 2.00uS+LT @8MHz  ( 16 clocks) 
		;write single byte to data register (Arg R24)                                          
		PUSH  R16                                         ;save reg               (  2 clocks) 
 bb0:	0f 93       	push	r16
		STS   SRUDR0             , R24                    ;load val to UDR0       (  2 clocks) 
 bb2:	80 93 c6 00 	sts	0x00C6, r24

00000bb6 <__UDRE0_CLEARED>:
                                                                                               
    __UDRE0_CLEARED:                                      ;undefined loop wrt ck               
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16     (  2 clocks) 
 bb6:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x05                   ;skip if UDRE0 is set   (  2 clocks) 
 bba:	05 ff       	sbrs	r16, 5
		RJMP  __UDRE0_CLEARED                             ;wait until UDRE0 is set(  2 clocks) 
 bbc:	fc cf       	rjmp	.-8      	; 0xbb6 <__UDRE0_CLEARED>
		POP   R16                                         ;restore reg            (  2 clocks) 
 bbe:	0f 91       	pop	r16
        RET                                               ;return from subroutine (  4 clocks) 
 bc0:	08 95       	ret

00000bc2 <Debug_Tx_Word>:


;;==================================debug tx word starting==================================;; 
Debug_Tx_Word:                                            ;total 2.00uS+LT @8MHz  ( 16 clocks) 
		;write 2 bytes, (Arg R24, R25), Args retained                                          
		PUSH  R24                                         ;save reg               (  2 clocks) 
 bc2:	8f 93       	push	r24
		MOV   R24                , R25                    ;copy reg               (  1 clock ) 
 bc4:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte                               ;send via uart          ( 21 clocks) 
 bc6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
        POP   R24                                         ;restore reg            (  2 clocks) 
 bca:	8f 91       	pop	r24
		CALL  Debug_Tx_Byte                               ;send via uart          ( 21 clocks) 
 bcc:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Debug_Tx_Byte>
        RET                                               ;return from subroutine (  4 clocks) 
 bd0:	08 95       	ret

00000bd2 <Debug_Tx_Byte_Conf>:


;;================================debug tx confirm starting=================================;; 
Debug_Tx_Byte_Conf:                                       ;total 2.63uS+LT @8MHz  ( 21 clocks) 
        ;write 1 byte, (Arg R24), Args retained                                                
		PUSH  R16                                         ;save reg               (  2 clocks) 
 bd2:	0f 93       	push	r16
		STS   SRUDR0             , R24                    ;load val to UDR0,      (  2 clocks) 
 bd4:	80 93 c6 00 	sts	0x00C6, r24

00000bd8 <__TXC0_CLEARED>:
    __TXC0_CLEARED:                                                                            
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,    (  2 clocks) 
 bd8:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x06                   ;skip if TXC0 is set,   (  2 clocks) 
 bdc:	06 ff       	sbrs	r16, 6
		RJMP  __TXC0_CLEARED                              ;wait until TXC0 is set (  2 clocks) 
 bde:	fc cf       	rjmp	.-8      	; 0xbd8 <__TXC0_CLEARED>
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,    (  2 clocks) 
 be0:	00 91 c0 00 	lds	r16, 0x00C0
		ORI   R16                , (1<<6)                 ;mask bit 6,            (  1 clock ) 
 be4:	00 64       	ori	r16, 0x40	; 64
		STS   SRUCSR0A           , R16                    ;write reg with bit msk (  2 clocks) 
 be6:	00 93 c0 00 	sts	0x00C0, r16
		POP   R16                                         ;restore reg            (  2 clocks) 
 bea:	0f 91       	pop	r16
        RET                                               ;return from subroutine (  4 clocks) 
 bec:	08 95       	ret

00000bee <Debug_Tx_Word_Conf>:


;;==============================debug tx word confirm starting==============================;; 
Debug_Tx_Word_Conf:                                       ;total 6.38uS+LT @8MHz  ( 51 clocks) 
        ;write 2 bytes, (Arg R24, R25), Args retained                                          
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 bee:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <Debug_Tx_Byte_Conf>
		PUSH  R24                                         ;save reg               (  2 clocks) 
 bf2:	8f 93       	push	r24
		MOV   R24                , R25                    ;copy R25 to R24        (  1 clock ) 
 bf4:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 bf6:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <Debug_Tx_Byte_Conf>
		POP   R24                                         ;restore reg            (  2 clocks) 
 bfa:	8f 91       	pop	r24
        RET                                               ;return from subroutine (  4 clocks) 
 bfc:	08 95       	ret

00000bfe <Debug_Tx_DWord_Conf>:


;;==============================debug tx dword confirm starting=============================;; 
Debug_Tx_DWord_Conf:                                      ;total 12.38uS+LT @8MHz ( 99 clocks) 
        ;write 4 bytes, (Arg R22-R25), Args retained                                           
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks) 
 bfe:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R22                    ;copy R22 to R24          (1 clock ) 
 c02:	86 2f       	mov	r24, r22
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 c04:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <Debug_Tx_Byte_Conf>
		MOV   R24                , R23                    ;copy R23 to R24          (1 clock ) 
 c08:	87 2f       	mov	r24, r23
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 c0a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24              (2 clocks) 
 c0e:	80 91 4a 00 	lds	r24, 0x004A
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 c12:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <Debug_Tx_Byte_Conf>
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks) 
 c16:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R25                    ;copy R22 to R24          (1 clock ) 
 c1a:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 c1c:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24 val,         (2 clocks) 
 c20:	80 91 4a 00 	lds	r24, 0x004A
        RET                                               ;return from subroutine,  (4 clocks) 
 c24:	08 95       	ret

00000c26 <Debug_Tx_From_RAM>:


;;=============================debug tx confirm from ram starting===========================;; 
Debug_Tx_From_RAM:                                        ;total 4.38uS+LT @8MHz  ( 35 clocks) 
        ;print data from RAM address (Arg R24-R25)                                             
		MOV   R16                , R30                    ;copy R30 to R16          (1 clock ) 
 c26:	0e 2f       	mov	r16, r30
		MOV   R17                , R31                    ;copy R31 to R17          (1 clock ) 
 c28:	1f 2f       	mov	r17, r31
		MOV   R18                , R24                    ;copy R24 to R18          (1 clock ) 
 c2a:	28 2f       	mov	r18, r24
		MOV   R30                , R24                    ;copy R22 to R24          (1 clock ) 
 c2c:	e8 2f       	mov	r30, r24
		MOV   R31                , R25                    ;copy R22 to R24          (1 clock ) 
 c2e:	f9 2f       	mov	r31, r25
		LD    R24                , Z                      ;load val to R24          (2 clocks) 
 c30:	80 81       	ld	r24, Z
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 c32:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <Debug_Tx_Byte_Conf>
		MOV   R30                , R16                    ;copy R16 to R30          (1 clock ) 
 c36:	e0 2f       	mov	r30, r16
		MOV   R31                , R17                    ;copy R17 to R31          (1 clock ) 
 c38:	f1 2f       	mov	r31, r17
		MOV   R24                , R18                    ;copy R18 to R24          (1 clock ) 
 c3a:	82 2f       	mov	r24, r18
        RET                                               ;return from subroutine,  (4 clocks) 
 c3c:	08 95       	ret

00000c3e <Debug_Tx_RAM_Area>:

;;=============================debug tx confirm ram area starting===========================;; 
Debug_Tx_RAM_Area:                                        ;5.5uS+LT x R22 @8MHz   ( 44 clocks) 
        ;print data from RAM address (arguments R24:R25, R22)                                  
	__DUMP_BYTES:                                                                              
	    CALL  Debug_Tx_From_RAM                           ;send via uart from ram              
 c3e:	0e 94 13 06 	call	0xc26	; 0xc26 <Debug_Tx_From_RAM>
		SUBI  R24                , 0x01                   ;decrement from LSByte               
 c42:	81 50       	subi	r24, 0x01	; 1
        SBCI  R25                , 0x00                   ;decrement if carry                  
 c44:	90 40       	sbci	r25, 0x00	; 0
		SUBI  R22                , 0x01                   ;decrement                           
 c46:	61 50       	subi	r22, 0x01	; 1
		BRNE  __DUMP_BYTES                                                                     
 c48:	d1 f7       	brne	.-12     	; 0xc3e <Debug_Tx_RAM_Area>
        RET                                               ;return from subroutine,  (4 clocks) 
 c4a:	08 95       	ret

00000c4c <__udivmodqi4>:
 c4c:	99 1b       	sub	r25, r25
 c4e:	79 e0       	ldi	r23, 0x09	; 9
 c50:	04 c0       	rjmp	.+8      	; 0xc5a <__udivmodqi4_ep>

00000c52 <__udivmodqi4_loop>:
 c52:	99 1f       	adc	r25, r25
 c54:	96 17       	cp	r25, r22
 c56:	08 f0       	brcs	.+2      	; 0xc5a <__udivmodqi4_ep>
 c58:	96 1b       	sub	r25, r22

00000c5a <__udivmodqi4_ep>:
 c5a:	88 1f       	adc	r24, r24
 c5c:	7a 95       	dec	r23
 c5e:	c9 f7       	brne	.-14     	; 0xc52 <__udivmodqi4_loop>
 c60:	80 95       	com	r24
 c62:	08 95       	ret

00000c64 <__udivmodsi4>:
 c64:	a1 e2       	ldi	r26, 0x21	; 33
 c66:	1a 2e       	mov	r1, r26
 c68:	aa 1b       	sub	r26, r26
 c6a:	bb 1b       	sub	r27, r27
 c6c:	fd 01       	movw	r30, r26
 c6e:	0d c0       	rjmp	.+26     	; 0xc8a <__udivmodsi4_ep>

00000c70 <__udivmodsi4_loop>:
 c70:	aa 1f       	adc	r26, r26
 c72:	bb 1f       	adc	r27, r27
 c74:	ee 1f       	adc	r30, r30
 c76:	ff 1f       	adc	r31, r31
 c78:	a2 17       	cp	r26, r18
 c7a:	b3 07       	cpc	r27, r19
 c7c:	e4 07       	cpc	r30, r20
 c7e:	f5 07       	cpc	r31, r21
 c80:	20 f0       	brcs	.+8      	; 0xc8a <__udivmodsi4_ep>
 c82:	a2 1b       	sub	r26, r18
 c84:	b3 0b       	sbc	r27, r19
 c86:	e4 0b       	sbc	r30, r20
 c88:	f5 0b       	sbc	r31, r21

00000c8a <__udivmodsi4_ep>:
 c8a:	66 1f       	adc	r22, r22
 c8c:	77 1f       	adc	r23, r23
 c8e:	88 1f       	adc	r24, r24
 c90:	99 1f       	adc	r25, r25
 c92:	1a 94       	dec	r1
 c94:	69 f7       	brne	.-38     	; 0xc70 <__udivmodsi4_loop>
 c96:	60 95       	com	r22
 c98:	70 95       	com	r23
 c9a:	80 95       	com	r24
 c9c:	90 95       	com	r25
 c9e:	9b 01       	movw	r18, r22
 ca0:	ac 01       	movw	r20, r24
 ca2:	bd 01       	movw	r22, r26
 ca4:	cf 01       	movw	r24, r30
 ca6:	08 95       	ret

00000ca8 <_exit>:
 ca8:	f8 94       	cli

00000caa <__stop_program>:
 caa:	ff cf       	rjmp	.-2      	; 0xcaa <__stop_program>
