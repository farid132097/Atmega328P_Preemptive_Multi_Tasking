
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000115c  000011f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000115c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000061  00800112  00800112  00001202  2**0
                  ALLOC
  3 .debug_aranges 000000e0  00000000  00000000  00001202  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000009ed  00000000  00000000  000012e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001dda  00000000  00000000  00001ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000075f  00000000  00000000  00003aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000016e5  00000000  00000000  00004208  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006c0  00000000  00000000  000058f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b4b  00000000  00000000  00005fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c9b  00000000  00000000  00006afb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00007796  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 4d 06 	jmp	0xc9a	; 0xc9a <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e5       	ldi	r30, 0x5C	; 92
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a2 31       	cpi	r26, 0x12	; 18
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a2 e1       	ldi	r26, 0x12	; 18
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a3 37       	cpi	r26, 0x73	; 115
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 ac 08 	jmp	0x1158	; 0x1158 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "systick.h"
#include "app.h"

int main(void) {
    
    SysTick_Init(1000);
      a6:	88 ee       	ldi	r24, 0xE8	; 232
      a8:	93 e0       	ldi	r25, 0x03	; 3
      aa:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <SysTick_Init>
	App_Setup();
      ae:	0e 94 51 01 	call	0x2a2	; 0x2a2 <App_Setup>
	
    while(1){
	 
        App_Main_Loop();
      b2:	0e 94 37 01 	call	0x26e	; 0x26e <App_Main_Loop>
      b6:	fd cf       	rjmp	.-6      	; 0xb2 <main+0xc>

000000b8 <SysTick_Struct_Init>:
}systick_t;

systick_t SysTick;

void SysTick_Struct_Init(void){
    SysTick.Ticks = 0;
      b8:	10 92 6e 01 	sts	0x016E, r1
      bc:	10 92 6d 01 	sts	0x016D, r1
    SysTick.OVFUpdateValue = 0;
      c0:	10 92 70 01 	sts	0x0170, r1
      c4:	10 92 6f 01 	sts	0x016F, r1
    SysTick.UpdateRate = 0;
      c8:	10 92 72 01 	sts	0x0172, r1
      cc:	10 92 71 01 	sts	0x0171, r1
}
      d0:	08 95       	ret

000000d2 <SysTick_Reg_Init>:


void SysTick_Reg_Init(uint16_t UpdateRateHz){
      d2:	8f 92       	push	r8
      d4:	9f 92       	push	r9
      d6:	bf 92       	push	r11
      d8:	cf 92       	push	r12
      da:	df 92       	push	r13
      dc:	ef 92       	push	r14
      de:	ff 92       	push	r15
      e0:	0f 93       	push	r16
      e2:	1f 93       	push	r17
      e4:	df 93       	push	r29
      e6:	cf 93       	push	r28
      e8:	cd b7       	in	r28, 0x3d	; 61
      ea:	de b7       	in	r29, 0x3e	; 62
      ec:	2a 97       	sbiw	r28, 0x0a	; 10
      ee:	0f b6       	in	r0, 0x3f	; 63
      f0:	f8 94       	cli
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	0f be       	out	0x3f, r0	; 63
      f6:	cd bf       	out	0x3d, r28	; 61
      f8:	4c 01       	movw	r8, r24
    uint8_t  clock_div_index = 0;
    uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
      fa:	de 01       	movw	r26, r28
      fc:	11 96       	adiw	r26, 0x01	; 1
      fe:	e0 e0       	ldi	r30, 0x00	; 0
     100:	f1 e0       	ldi	r31, 0x01	; 1
     102:	8a e0       	ldi	r24, 0x0A	; 10
     104:	01 90       	ld	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	81 50       	subi	r24, 0x01	; 1
     10a:	e1 f7       	brne	.-8      	; 0x104 <SysTick_Reg_Init+0x32>
    int32_t  temp, curr_freq;

    temp = F_CPU;
    temp /= UpdateRateHz;
     10c:	94 01       	movw	r18, r8
     10e:	40 e0       	ldi	r20, 0x00	; 0
     110:	50 e0       	ldi	r21, 0x00	; 0
     112:	60 e0       	ldi	r22, 0x00	; 0
     114:	7b e1       	ldi	r23, 0x1B	; 27
     116:	87 eb       	ldi	r24, 0xB7	; 183
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	0e 94 91 08 	call	0x1122	; 0x1122 <__divmodsi4>
     11e:	b2 2e       	mov	r11, r18
     120:	c3 2e       	mov	r12, r19
     122:	d4 2e       	mov	r13, r20
     124:	05 2f       	mov	r16, r21
     126:	7e 01       	movw	r14, r28
     128:	08 94       	sec
     12a:	e1 1c       	adc	r14, r1
     12c:	f1 1c       	adc	r15, r1
     12e:	c9 01       	movw	r24, r18
     130:	da 01       	movw	r26, r20
     132:	9c 01       	movw	r18, r24
     134:	ad 01       	movw	r20, r26
     136:	10 e0       	ldi	r17, 0x00	; 0
     138:	13 c0       	rjmp	.+38     	; 0x160 <SysTick_Reg_Init+0x8e>
    clock_div_index = 0;
    curr_freq = temp;
	
    while( curr_freq > 0xFF ){
	    curr_freq  = temp;
	    curr_freq /= clock_div_factor[clock_div_index];
     13a:	f7 01       	movw	r30, r14
     13c:	21 91       	ld	r18, Z+
     13e:	31 91       	ld	r19, Z+
     140:	7f 01       	movw	r14, r30
     142:	40 e0       	ldi	r20, 0x00	; 0
     144:	50 e0       	ldi	r21, 0x00	; 0
     146:	6b 2d       	mov	r22, r11
     148:	7c 2d       	mov	r23, r12
     14a:	8d 2d       	mov	r24, r13
     14c:	90 2f       	mov	r25, r16
     14e:	0e 94 91 08 	call	0x1122	; 0x1122 <__divmodsi4>
     152:	c9 01       	movw	r24, r18
     154:	da 01       	movw	r26, r20
     156:	9c 01       	movw	r18, r24
     158:	ad 01       	movw	r20, r26
	    clock_div_index++;
     15a:	1f 5f       	subi	r17, 0xFF	; 255
	    if(clock_div_index == 5){
     15c:	15 30       	cpi	r17, 0x05	; 5
     15e:	31 f0       	breq	.+12     	; 0x16c <SysTick_Reg_Init+0x9a>
    temp /= UpdateRateHz;
	
    clock_div_index = 0;
    curr_freq = temp;
	
    while( curr_freq > 0xFF ){
     160:	2f 3f       	cpi	r18, 0xFF	; 255
     162:	31 05       	cpc	r19, r1
     164:	41 05       	cpc	r20, r1
     166:	51 05       	cpc	r21, r1
     168:	09 f0       	breq	.+2      	; 0x16c <SysTick_Reg_Init+0x9a>
     16a:	3c f7       	brge	.-50     	; 0x13a <SysTick_Reg_Init+0x68>
	    if(clock_div_index == 5){
	        break;
	    }
    }
	
    clock_div_index -= 1;
     16c:	81 2f       	mov	r24, r17
     16e:	81 50       	subi	r24, 0x01	; 1
	
    TCCR0A = 0x00;
     170:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0x00;
     172:	15 bc       	out	0x25, r1	; 37
    TIMSK0 = 0x00;
     174:	10 92 6e 00 	sts	0x006E, r1
    TIFR0  = 0x00;
     178:	15 ba       	out	0x15, r1	; 21
    OCR0A  = 0x00;
     17a:	17 bc       	out	0x27, r1	; 39
    OCR0B  = 0x00;
     17c:	18 bc       	out	0x28, r1	; 40
    TCNT0  = 0x00;
     17e:	16 bc       	out	0x26, r1	; 38
    OCR0A  = 0x00;
     180:	17 bc       	out	0x27, r1	; 39
  
    if(clock_div_index == 0){
     182:	88 23       	and	r24, r24
     184:	11 f4       	brne	.+4      	; 0x18a <SysTick_Reg_Init+0xb8>
	    TCCR0B = (1<<CS00);
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	0f c0       	rjmp	.+30     	; 0x1a8 <SysTick_Reg_Init+0xd6>
    }
    else if(clock_div_index == 1){
     18a:	81 30       	cpi	r24, 0x01	; 1
     18c:	11 f4       	brne	.+4      	; 0x192 <SysTick_Reg_Init+0xc0>
	    TCCR0B = (1<<CS01);
     18e:	82 e0       	ldi	r24, 0x02	; 2
     190:	0b c0       	rjmp	.+22     	; 0x1a8 <SysTick_Reg_Init+0xd6>
    }
    else if(clock_div_index == 2){
     192:	82 30       	cpi	r24, 0x02	; 2
     194:	11 f4       	brne	.+4      	; 0x19a <SysTick_Reg_Init+0xc8>
	    TCCR0B = (1<<CS00)|(1<<CS01);
     196:	83 e0       	ldi	r24, 0x03	; 3
     198:	07 c0       	rjmp	.+14     	; 0x1a8 <SysTick_Reg_Init+0xd6>
    }
    else if(clock_div_index == 3){
     19a:	83 30       	cpi	r24, 0x03	; 3
     19c:	11 f4       	brne	.+4      	; 0x1a2 <SysTick_Reg_Init+0xd0>
	    TCCR0B = (1<<CS02);
     19e:	84 e0       	ldi	r24, 0x04	; 4
     1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <SysTick_Reg_Init+0xd6>
    }
    else if(clock_div_index == 4){
     1a2:	84 30       	cpi	r24, 0x04	; 4
     1a4:	11 f4       	brne	.+4      	; 0x1aa <SysTick_Reg_Init+0xd8>
	    TCCR0B = (1<<CS00)|(1<<CS02);
     1a6:	85 e0       	ldi	r24, 0x05	; 5
     1a8:	85 bd       	out	0x25, r24	; 37
    }
  
    SysTick.OVFUpdateValue = (0xFF-curr_freq);
     1aa:	8f ef       	ldi	r24, 0xFF	; 255
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	82 1b       	sub	r24, r18
     1b0:	93 0b       	sbc	r25, r19
     1b2:	90 93 70 01 	sts	0x0170, r25
     1b6:	80 93 6f 01 	sts	0x016F, r24
    TCNT0  = SysTick.OVFUpdateValue;
     1ba:	80 91 6f 01 	lds	r24, 0x016F
     1be:	90 91 70 01 	lds	r25, 0x0170
     1c2:	86 bd       	out	0x26, r24	; 38
    TIMSK0 = (1<<TOIE0);
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	80 93 6e 00 	sts	0x006E, r24
    sei();
     1ca:	78 94       	sei
    SysTick.UpdateRate = UpdateRateHz;
     1cc:	90 92 72 01 	sts	0x0172, r9
     1d0:	80 92 71 01 	sts	0x0171, r8
}
     1d4:	2a 96       	adiw	r28, 0x0a	; 10
     1d6:	0f b6       	in	r0, 0x3f	; 63
     1d8:	f8 94       	cli
     1da:	de bf       	out	0x3e, r29	; 62
     1dc:	0f be       	out	0x3f, r0	; 63
     1de:	cd bf       	out	0x3d, r28	; 61
     1e0:	cf 91       	pop	r28
     1e2:	df 91       	pop	r29
     1e4:	1f 91       	pop	r17
     1e6:	0f 91       	pop	r16
     1e8:	ff 90       	pop	r15
     1ea:	ef 90       	pop	r14
     1ec:	df 90       	pop	r13
     1ee:	cf 90       	pop	r12
     1f0:	bf 90       	pop	r11
     1f2:	9f 90       	pop	r9
     1f4:	8f 90       	pop	r8
     1f6:	08 95       	ret

000001f8 <SysTick_Init>:
}systick_t;

systick_t SysTick;

void SysTick_Struct_Init(void){
    SysTick.Ticks = 0;
     1f8:	10 92 6e 01 	sts	0x016E, r1
     1fc:	10 92 6d 01 	sts	0x016D, r1
    SysTick.OVFUpdateValue = 0;
     200:	10 92 70 01 	sts	0x0170, r1
     204:	10 92 6f 01 	sts	0x016F, r1
    SysTick.UpdateRate = 0;
     208:	10 92 72 01 	sts	0x0172, r1
     20c:	10 92 71 01 	sts	0x0171, r1
}


void SysTick_Init(uint16_t UpdateRateHz){
    SysTick_Struct_Init();
    SysTick_Reg_Init(UpdateRateHz);
     210:	0e 94 69 00 	call	0xd2	; 0xd2 <SysTick_Reg_Init>
}
     214:	08 95       	ret

00000216 <SysTick_ISR_Executables>:




void SysTick_ISR_Executables(void){
   GPIO0_Toggle();
     216:	0e 94 6f 07 	call	0xede	; 0xede <GPIO0_Toggle>
}
     21a:	08 95       	ret

0000021c <__vector_16>:





ISR(TIMER0_OVF_vect){
     21c:	1f 92       	push	r1
     21e:	0f 92       	push	r0
     220:	0f b6       	in	r0, 0x3f	; 63
     222:	0f 92       	push	r0
     224:	11 24       	eor	r1, r1
     226:	2f 93       	push	r18
     228:	3f 93       	push	r19
     22a:	4f 93       	push	r20
     22c:	5f 93       	push	r21
     22e:	6f 93       	push	r22
     230:	7f 93       	push	r23
     232:	8f 93       	push	r24
     234:	9f 93       	push	r25
     236:	af 93       	push	r26
     238:	bf 93       	push	r27
     23a:	ef 93       	push	r30
     23c:	ff 93       	push	r31
    TCNT0  = SysTick.OVFUpdateValue;
     23e:	80 91 6f 01 	lds	r24, 0x016F
     242:	90 91 70 01 	lds	r25, 0x0170
     246:	86 bd       	out	0x26, r24	; 38




void SysTick_ISR_Executables(void){
   GPIO0_Toggle();
     248:	0e 94 6f 07 	call	0xede	; 0xede <GPIO0_Toggle>


ISR(TIMER0_OVF_vect){
    TCNT0  = SysTick.OVFUpdateValue;
    SysTick_ISR_Executables();
}
     24c:	ff 91       	pop	r31
     24e:	ef 91       	pop	r30
     250:	bf 91       	pop	r27
     252:	af 91       	pop	r26
     254:	9f 91       	pop	r25
     256:	8f 91       	pop	r24
     258:	7f 91       	pop	r23
     25a:	6f 91       	pop	r22
     25c:	5f 91       	pop	r21
     25e:	4f 91       	pop	r20
     260:	3f 91       	pop	r19
     262:	2f 91       	pop	r18
     264:	0f 90       	pop	r0
     266:	0f be       	out	0x3f, r0	; 63
     268:	0f 90       	pop	r0
     26a:	1f 90       	pop	r1
     26c:	18 95       	reti

0000026e <App_Main_Loop>:
	
}

void App_Main_Loop(void){
    
    Debug_Tx_Text_NL("Hello");
     26e:	8a e0       	ldi	r24, 0x0A	; 10
     270:	91 e0       	ldi	r25, 0x01	; 1
     272:	0e 94 34 02 	call	0x468	; 0x468 <Debug_Tx_Text_NL>
	
	//PORTC|=(1<<5);
	
	asm volatile (
     276:	20 91 28 00 	lds	r18, 0x0028
     27a:	30 e2       	ldi	r19, 0x20	; 32
     27c:	23 0f       	add	r18, r19
     27e:	20 93 28 00 	sts	0x0028, r18
     282:	88 e8       	ldi	r24, 0x88	; 136
     284:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     286:	2c e2       	ldi	r18, 0x2C	; 44
     288:	31 e0       	ldi	r19, 0x01	; 1
     28a:	f9 01       	movw	r30, r18
     28c:	31 97       	sbiw	r30, 0x01	; 1
     28e:	f1 f7       	brne	.-4      	; 0x28c <App_Main_Loop+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     290:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     292:	d9 f7       	brne	.-10     	; 0x28a <App_Main_Loop+0x1c>
	
	_delay_ms(500);
	
	//PORTC&=~(1<<5);
	
	asm volatile (
     294:	20 91 28 00 	lds	r18, 0x0028
     298:	30 e2       	ldi	r19, 0x20	; 32
     29a:	23 1b       	sub	r18, r19
     29c:	20 93 28 00 	sts	0x0028, r18
	  "SUB     R18,  R19    \n\t"
	  "STS     0x28, R18    \n\t"
	);
    
	
     2a0:	08 95       	ret

000002a2 <App_Setup>:

int global_var = 10;

void App_Setup(void){
    
	Debug_Init(38400);
     2a2:	60 e0       	ldi	r22, 0x00	; 0
     2a4:	76 e9       	ldi	r23, 0x96	; 150
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	0e 94 1c 07 	call	0xe38	; 0xe38 <Debug_Init>
	GPIO_Init();
     2ae:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_Init>
	
	
}
     2b2:	08 95       	ret

000002b4 <Debug_Struct_Init>:


/*******************Debug Structure Functions Start****************/

void Debug_Struct_Init(void){
  Debug.Error = DEBUG_NULL;
     2b4:	10 92 12 01 	sts	0x0112, r1
  Debug.StickyError = DEBUG_NULL;
     2b8:	10 92 13 01 	sts	0x0113, r1
     2bc:	e4 e1       	ldi	r30, 0x14	; 20
     2be:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i = 0; i < 8; i++){
    Debug.Digits[i] = DEBUG_NULL;
     2c0:	11 92       	st	Z+, r1
/*******************Debug Structure Functions Start****************/

void Debug_Struct_Init(void){
  Debug.Error = DEBUG_NULL;
  Debug.StickyError = DEBUG_NULL;
  for(uint8_t i = 0; i < 8; i++){
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	ec 31       	cpi	r30, 0x1C	; 28
     2c6:	f8 07       	cpc	r31, r24
     2c8:	d9 f7       	brne	.-10     	; 0x2c0 <Debug_Struct_Init+0xc>
    Debug.Digits[i] = DEBUG_NULL;
  }
  Debug.InputNumDigits = DEBUG_NULL;
     2ca:	10 82       	st	Z, r1
  Debug.LastRxByte = DEBUG_NULL;
     2cc:	11 82       	std	Z+1, r1	; 0x01
  Debug.BufSize = DEBUG_BUFFER_SIZE;
     2ce:	80 e4       	ldi	r24, 0x40	; 64
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	90 93 60 01 	sts	0x0160, r25
     2d6:	80 93 5f 01 	sts	0x015F, r24
  Debug.BufIndex = 0;
     2da:	10 92 62 01 	sts	0x0162, r1
     2de:	10 92 61 01 	sts	0x0161, r1
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	04 c0       	rjmp	.+8      	; 0x2ee <Debug_Struct_Init+0x3a>
  for(uint8_t i = 0; i < Debug.BufSize; i++){
    Debug.Buf[i] = DEBUG_NULL;
     2e6:	ee 5e       	subi	r30, 0xEE	; 238
     2e8:	fe 4f       	sbci	r31, 0xFE	; 254
     2ea:	14 86       	std	Z+12, r1	; 0x0c
  }
  Debug.InputNumDigits = DEBUG_NULL;
  Debug.LastRxByte = DEBUG_NULL;
  Debug.BufSize = DEBUG_BUFFER_SIZE;
  Debug.BufIndex = 0;
  for(uint8_t i = 0; i < Debug.BufSize; i++){
     2ec:	2f 5f       	subi	r18, 0xFF	; 255
     2ee:	80 91 5f 01 	lds	r24, 0x015F
     2f2:	90 91 60 01 	lds	r25, 0x0160
     2f6:	e2 2f       	mov	r30, r18
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
     2fa:	e8 17       	cp	r30, r24
     2fc:	f9 07       	cpc	r31, r25
     2fe:	98 f3       	brcs	.-26     	; 0x2e6 <Debug_Struct_Init+0x32>
    Debug.Buf[i] = DEBUG_NULL;
  }
}
     300:	08 95       	ret

00000302 <Debug_RX_Packet_Struct_Init>:

void Debug_RX_Packet_Struct_Init(void){
  Debug.RxPacket.CalculatedCRC    = DEBUG_NULL;
     302:	10 92 66 01 	sts	0x0166, r1
     306:	10 92 65 01 	sts	0x0165, r1
  Debug.RxPacket.ReceivedCRC      = DEBUG_NULL;
     30a:	10 92 68 01 	sts	0x0168, r1
     30e:	10 92 67 01 	sts	0x0167, r1
  Debug.RxPacket.CRCStatus        = DEBUG_FALSE;
     312:	10 92 69 01 	sts	0x0169, r1
  Debug.RxPacket.DataAvailable    = DEBUG_FALSE;
     316:	10 92 6a 01 	sts	0x016A, r1
  Debug.RxPacket.DataReadComplete = DEBUG_TRUE;
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	80 93 6b 01 	sts	0x016B, r24
}
     320:	08 95       	ret

00000322 <Debug_Config_GPIO>:

/*********************Debug Init Functions Start******************/

void Debug_Config_GPIO(void){
  //add gpio config
}
     322:	08 95       	ret

00000324 <Debug_Config_Clock>:
void Debug_Config_Clock(void){
  //add clock config
  #ifdef UART_DOUBLE_SPEED
  UCSR0A|=(1<<U2X0);  
  #else
  UCSR0A&=~(1<<U2X0);  
     324:	e0 ec       	ldi	r30, 0xC0	; 192
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	80 81       	ld	r24, Z
     32a:	8d 7f       	andi	r24, 0xFD	; 253
     32c:	80 83       	st	Z, r24
  #endif
}
     32e:	08 95       	ret

00000330 <Debug_Config_BAUD_Rate>:

void Debug_Config_BAUD_Rate(uint32_t baud_rate){
     330:	9b 01       	movw	r18, r22
     332:	ac 01       	movw	r20, r24
  //add baud rate config
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
  #else
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
     334:	60 eb       	ldi	r22, 0xB0	; 176
     336:	71 e7       	ldi	r23, 0x71	; 113
     338:	8b e0       	ldi	r24, 0x0B	; 11
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	0e 94 6f 08 	call	0x10de	; 0x10de <__udivmodsi4>
     340:	21 50       	subi	r18, 0x01	; 1
     342:	30 40       	sbci	r19, 0x00	; 0
     344:	40 40       	sbci	r20, 0x00	; 0
     346:	50 40       	sbci	r21, 0x00	; 0
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
     348:	bb 27       	eor	r27, r27
     34a:	a5 2f       	mov	r26, r21
     34c:	94 2f       	mov	r25, r20
     34e:	83 2f       	mov	r24, r19
     350:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
     354:	20 93 c4 00 	sts	0x00C4, r18
}
     358:	08 95       	ret

0000035a <Debug_Config_Tx>:


void Debug_Config_Tx(void){
  //add tx config
  UCSR0B|=(1<<TXEN0);
     35a:	e1 ec       	ldi	r30, 0xC1	; 193
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	80 81       	ld	r24, Z
     360:	88 60       	ori	r24, 0x08	; 8
     362:	80 83       	st	Z, r24
  UCSR0C|=(1<<UCSZ00)| (1<<UCSZ01);
     364:	e2 ec       	ldi	r30, 0xC2	; 194
     366:	f0 e0       	ldi	r31, 0x00	; 0
     368:	80 81       	ld	r24, Z
     36a:	86 60       	ori	r24, 0x06	; 6
     36c:	80 83       	st	Z, r24
}
     36e:	08 95       	ret

00000370 <Debug_Config_Rx>:


void Debug_Config_Rx(void){
  //add rx config
  UCSR0B|=(1<<RXEN0);
     370:	e1 ec       	ldi	r30, 0xC1	; 193
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	80 81       	ld	r24, Z
     376:	80 61       	ori	r24, 0x10	; 16
     378:	80 83       	st	Z, r24
  UCSR0C|=(1<<UCSZ00)| (1<<UCSZ01);
     37a:	e2 ec       	ldi	r30, 0xC2	; 194
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	80 81       	ld	r24, Z
     380:	86 60       	ori	r24, 0x06	; 6
     382:	80 83       	st	Z, r24
}
     384:	08 95       	ret

00000386 <Debug_Config_Rx_Interrupt>:

void Debug_Config_Rx_Interrupt(void){
  //add rx int config
  UCSR0B|=(1<<RXCIE0);
     386:	e1 ec       	ldi	r30, 0xC1	; 193
     388:	f0 e0       	ldi	r31, 0x00	; 0
     38a:	80 81       	ld	r24, Z
     38c:	80 68       	ori	r24, 0x80	; 128
     38e:	80 83       	st	Z, r24
  sei();
     390:	78 94       	sei
}
     392:	08 95       	ret

00000394 <Debug_Clear_Interrupt_Flag>:

void Debug_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}
     394:	08 95       	ret

00000396 <Debug_Tx_Byte>:

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     396:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     39a:	80 91 c0 00 	lds	r24, 0x00C0
     39e:	85 ff       	sbrs	r24, 5
     3a0:	fc cf       	rjmp	.-8      	; 0x39a <Debug_Tx_Byte+0x4>
}
     3a2:	08 95       	ret

000003a4 <Debug_Rx_Byte>:

uint8_t Debug_Rx_Byte(void){
  uint8_t val=0;
  if(UCSR0A & (1<<FE0)){
     3a4:	80 91 c0 00 	lds	r24, 0x00C0
     3a8:	84 ff       	sbrs	r24, 4
     3aa:	03 c0       	rjmp	.+6      	; 0x3b2 <Debug_Rx_Byte+0xe>
    val=UDR0;
     3ac:	80 91 c6 00 	lds	r24, 0x00C6
     3b0:	08 95       	ret
  }else if(UCSR0A & (1<<DOR0)){
     3b2:	80 91 c0 00 	lds	r24, 0x00C0
    val=UDR0;
  }else{
    val=UDR0;
     3b6:	80 91 c6 00 	lds	r24, 0x00C6
  }
  return val;
}
     3ba:	08 95       	ret

000003bc <Debug_Timer_Struct_Init>:


/********************Debug Timer Functions Start*****************/

void Debug_Timer_Struct_Init(void){
  Debug.Timer.Enabled  = DEBUG_FALSE;
     3bc:	10 92 63 01 	sts	0x0163, r1
  Debug.Timer.ResetVal = DEBUG_NULL;
     3c0:	10 92 64 01 	sts	0x0164, r1
}
     3c4:	08 95       	ret

000003c6 <Debug_Timer_Init>:

void Debug_Timer_Init(void){
  //config debug timer for auto packet validation
  //calculate Debug.Timer.ResetVal if overflow intterrupt is used
}
     3c6:	08 95       	ret

000003c8 <Debug_Timer_Enable>:

void Debug_Timer_Enable(void){
  //debug timer enable
}
     3c8:	08 95       	ret

000003ca <Debug_Timer_Disable>:

void Debug_Timer_Disable(void){ 
  //debug timer disable
}
     3ca:	08 95       	ret

000003cc <Debug_Timer_Get_Status>:

uint8_t Debug_Timer_Get_Status(void){
  return Debug.Timer.Enabled;
     3cc:	80 91 63 01 	lds	r24, 0x0163
}
     3d0:	08 95       	ret

000003d2 <Debug_Timer_Get_Val>:

uint16_t Debug_Timer_Get_Val(void){
  //return current timer val
	return 0;
}
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	08 95       	ret

000003d8 <Debug_Timer_Value_Reset>:


void Debug_Timer_Value_Reset(void){
  //reset timer val if compare mode selected
  //set timer val to Debug.Timer.ResetVal if Overflow int is used
}
     3d8:	08 95       	ret

000003da <Debug_Timer_Clear_Interrupt_Flag>:

void Debug_Timer_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}
     3da:	08 95       	ret

000003dc <Debug_Tx_Buf>:



/********************Buffer Tx Functions Start*******************/

void Debug_Tx_Buf(volatile uint8_t *data, uint8_t start, uint8_t len){
     3dc:	dc 01       	movw	r26, r24
  len += start;
     3de:	46 0f       	add	r20, r22
     3e0:	20 e0       	ldi	r18, 0x00	; 0
     3e2:	30 e0       	ldi	r19, 0x00	; 0
  for(uint16_t i = 0; i < len; i++){
     3e4:	50 e0       	ldi	r21, 0x00	; 0
     3e6:	0c c0       	rjmp	.+24     	; 0x400 <Debug_Tx_Buf+0x24>
     3e8:	fd 01       	movw	r30, r26
     3ea:	e2 0f       	add	r30, r18
     3ec:	f3 1f       	adc	r31, r19
	Debug_Tx_Byte( data[i] );
     3ee:	80 81       	ld	r24, Z
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     3f0:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     3f4:	80 91 c0 00 	lds	r24, 0x00C0
     3f8:	85 ff       	sbrs	r24, 5
     3fa:	fc cf       	rjmp	.-8      	; 0x3f4 <Debug_Tx_Buf+0x18>

/********************Buffer Tx Functions Start*******************/

void Debug_Tx_Buf(volatile uint8_t *data, uint8_t start, uint8_t len){
  len += start;
  for(uint16_t i = 0; i < len; i++){
     3fc:	2f 5f       	subi	r18, 0xFF	; 255
     3fe:	3f 4f       	sbci	r19, 0xFF	; 255
     400:	24 17       	cp	r18, r20
     402:	35 07       	cpc	r19, r21
     404:	88 f3       	brcs	.-30     	; 0x3e8 <Debug_Tx_Buf+0xc>
	Debug_Tx_Byte( data[i] );
  }
}
     406:	08 95       	ret

00000408 <Debug_Tx_NL>:
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     408:	8d e0       	ldi	r24, 0x0D	; 13
     40a:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     40e:	80 91 c0 00 	lds	r24, 0x00C0
     412:	85 ff       	sbrs	r24, 5
     414:	fc cf       	rjmp	.-8      	; 0x40e <Debug_Tx_NL+0x6>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     416:	8a e0       	ldi	r24, 0x0A	; 10
     418:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     41c:	80 91 c0 00 	lds	r24, 0x00C0
     420:	85 ff       	sbrs	r24, 5
     422:	fc cf       	rjmp	.-8      	; 0x41c <Debug_Tx_NL+0x14>
/*******************End Char Functions Start******************/

void Debug_Tx_NL(void){
  Debug_Tx_Byte('\r');
  Debug_Tx_Byte('\n');
}
     424:	08 95       	ret

00000426 <Debug_Tx_SP>:
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     426:	80 e2       	ldi	r24, 0x20	; 32
     428:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     42c:	80 91 c0 00 	lds	r24, 0x00C0
     430:	85 ff       	sbrs	r24, 5
     432:	fc cf       	rjmp	.-8      	; 0x42c <Debug_Tx_SP+0x6>
  Debug_Tx_Byte('\n');
}

void Debug_Tx_SP(void){
  Debug_Tx_Byte(' ');
}
     434:	08 95       	ret

00000436 <Debug_Tx_CM>:
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     436:	8c e2       	ldi	r24, 0x2C	; 44
     438:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     43c:	80 91 c0 00 	lds	r24, 0x00C0
     440:	85 ff       	sbrs	r24, 5
     442:	fc cf       	rjmp	.-8      	; 0x43c <Debug_Tx_CM+0x6>
  Debug_Tx_Byte(' ');
}

void Debug_Tx_CM(void){
  Debug_Tx_Byte(',');
}
     444:	08 95       	ret

00000446 <Debug_Tx_Text>:



/*********************Text Functions Start*******************/

void Debug_Tx_Text(char *str){
     446:	ac 01       	movw	r20, r24
     448:	20 e0       	ldi	r18, 0x00	; 0
     44a:	07 c0       	rjmp	.+14     	; 0x45a <Debug_Tx_Text+0x14>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     44c:	e0 93 c6 00 	sts	0x00C6, r30
  while((UCSR0A & (1<<UDRE0))==0);
     450:	80 91 c0 00 	lds	r24, 0x00C0
     454:	85 ff       	sbrs	r24, 5
     456:	fc cf       	rjmp	.-8      	; 0x450 <Debug_Tx_Text+0xa>

void Debug_Tx_Text(char *str){
  uint8_t i = 0;
  while(str[i] != '\0'){
    Debug_Tx_Byte(str[i]);
    i++;
     458:	2f 5f       	subi	r18, 0xFF	; 255

/*********************Text Functions Start*******************/

void Debug_Tx_Text(char *str){
  uint8_t i = 0;
  while(str[i] != '\0'){
     45a:	fa 01       	movw	r30, r20
     45c:	e2 0f       	add	r30, r18
     45e:	f1 1d       	adc	r31, r1
     460:	e0 81       	ld	r30, Z
     462:	ee 23       	and	r30, r30
     464:	99 f7       	brne	.-26     	; 0x44c <Debug_Tx_Text+0x6>
    Debug_Tx_Byte(str[i]);
    i++;
  }
}
     466:	08 95       	ret

00000468 <Debug_Tx_Text_NL>:

void Debug_Tx_Text_NL(char *str){
  Debug_Tx_Text(str);
     468:	0e 94 23 02 	call	0x446	; 0x446 <Debug_Tx_Text>
  Debug_Tx_NL();
     46c:	0e 94 04 02 	call	0x408	; 0x408 <Debug_Tx_NL>
}
     470:	08 95       	ret

00000472 <Debug_Tx_Text_SP>:

void Debug_Tx_Text_SP(char *str){
  Debug_Tx_Text(str);
     472:	0e 94 23 02 	call	0x446	; 0x446 <Debug_Tx_Text>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     476:	80 e2       	ldi	r24, 0x20	; 32
     478:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     47c:	80 91 c0 00 	lds	r24, 0x00C0
     480:	85 ff       	sbrs	r24, 5
     482:	fc cf       	rjmp	.-8      	; 0x47c <Debug_Tx_Text_SP+0xa>
}

void Debug_Tx_Text_SP(char *str){
  Debug_Tx_Text(str);
  Debug_Tx_SP();
}
     484:	08 95       	ret

00000486 <Debug_Tx_Text_CM>:

void Debug_Tx_Text_CM(char *str){
  Debug_Tx_Text(str);
     486:	0e 94 23 02 	call	0x446	; 0x446 <Debug_Tx_Text>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     48a:	8c e2       	ldi	r24, 0x2C	; 44
     48c:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     490:	80 91 c0 00 	lds	r24, 0x00C0
     494:	85 ff       	sbrs	r24, 5
     496:	fc cf       	rjmp	.-8      	; 0x490 <Debug_Tx_Text_CM+0xa>
}

void Debug_Tx_Text_CM(char *str){
  Debug_Tx_Text(str);
  Debug_Tx_CM();
}
     498:	08 95       	ret

0000049a <Debug_Determine_Digit_Numbers>:



/*********************Number Functions Start********************/

void Debug_Determine_Digit_Numbers(uint32_t num){
     49a:	bf 92       	push	r11
     49c:	cf 92       	push	r12
     49e:	df 92       	push	r13
     4a0:	ef 92       	push	r14
     4a2:	ff 92       	push	r15
     4a4:	0f 93       	push	r16
     4a6:	1f 93       	push	r17
     4a8:	6b 01       	movw	r12, r22
     4aa:	7c 01       	movw	r14, r24
  uint8_t i = 0;
  if(num == 0){
     4ac:	61 15       	cp	r22, r1
     4ae:	71 05       	cpc	r23, r1
     4b0:	81 05       	cpc	r24, r1
     4b2:	91 05       	cpc	r25, r1
     4b4:	31 f4       	brne	.+12     	; 0x4c2 <Debug_Determine_Digit_Numbers+0x28>
    Debug.Digits[0] = 0;
     4b6:	10 92 14 01 	sts	0x0114, r1
    Debug.InputNumDigits = 1;
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	80 93 1c 01 	sts	0x011C, r24
     4c0:	23 c0       	rjmp	.+70     	; 0x508 <Debug_Determine_Digit_Numbers+0x6e>
     4c2:	bb 24       	eor	r11, r11
  }else{
    while(num != 0){
      Debug.Digits[i] = num%10;
     4c4:	0b 2d       	mov	r16, r11
     4c6:	10 e0       	ldi	r17, 0x00	; 0
     4c8:	0e 5e       	subi	r16, 0xEE	; 238
     4ca:	1e 4f       	sbci	r17, 0xFE	; 254
     4cc:	c7 01       	movw	r24, r14
     4ce:	b6 01       	movw	r22, r12
     4d0:	2a e0       	ldi	r18, 0x0A	; 10
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	40 e0       	ldi	r20, 0x00	; 0
     4d6:	50 e0       	ldi	r21, 0x00	; 0
     4d8:	0e 94 6f 08 	call	0x10de	; 0x10de <__udivmodsi4>
     4dc:	f8 01       	movw	r30, r16
     4de:	62 83       	std	Z+2, r22	; 0x02
      num /= 10;
     4e0:	c7 01       	movw	r24, r14
     4e2:	b6 01       	movw	r22, r12
     4e4:	2a e0       	ldi	r18, 0x0A	; 10
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	40 e0       	ldi	r20, 0x00	; 0
     4ea:	50 e0       	ldi	r21, 0x00	; 0
     4ec:	0e 94 6f 08 	call	0x10de	; 0x10de <__udivmodsi4>
     4f0:	c9 01       	movw	r24, r18
     4f2:	da 01       	movw	r26, r20
     4f4:	6c 01       	movw	r12, r24
     4f6:	7d 01       	movw	r14, r26
      i++;
     4f8:	b3 94       	inc	r11
  uint8_t i = 0;
  if(num == 0){
    Debug.Digits[0] = 0;
    Debug.InputNumDigits = 1;
  }else{
    while(num != 0){
     4fa:	c1 14       	cp	r12, r1
     4fc:	d1 04       	cpc	r13, r1
     4fe:	e1 04       	cpc	r14, r1
     500:	f1 04       	cpc	r15, r1
     502:	01 f7       	brne	.-64     	; 0x4c4 <Debug_Determine_Digit_Numbers+0x2a>
      Debug.Digits[i] = num%10;
      num /= 10;
      i++;
    }
	Debug.InputNumDigits = i;
     504:	b0 92 1c 01 	sts	0x011C, r11
  }
}
     508:	1f 91       	pop	r17
     50a:	0f 91       	pop	r16
     50c:	ff 90       	pop	r15
     50e:	ef 90       	pop	r14
     510:	df 90       	pop	r13
     512:	cf 90       	pop	r12
     514:	bf 90       	pop	r11
     516:	08 95       	ret

00000518 <Debug_Tx_Number_Digits>:

void Debug_Tx_Number_Digits(void){
  for(uint8_t i = Debug.InputNumDigits; i > 0; i--){
     518:	90 91 1c 01 	lds	r25, 0x011C
     51c:	0f c0       	rjmp	.+30     	; 0x53c <Debug_Tx_Number_Digits+0x24>
    uint8_t temp = i;
    temp -= 1;
     51e:	29 2f       	mov	r18, r25
     520:	21 50       	subi	r18, 0x01	; 1
    temp  = Debug.Digits[temp];
     522:	e2 2f       	mov	r30, r18
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	ee 5e       	subi	r30, 0xEE	; 238
     528:	fe 4f       	sbci	r31, 0xFE	; 254
     52a:	82 81       	ldd	r24, Z+2	; 0x02
    temp += 48;
     52c:	80 5d       	subi	r24, 0xD0	; 208
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     52e:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     532:	80 91 c0 00 	lds	r24, 0x00C0
     536:	92 2f       	mov	r25, r18
     538:	85 ff       	sbrs	r24, 5
     53a:	fb cf       	rjmp	.-10     	; 0x532 <Debug_Tx_Number_Digits+0x1a>
	Debug.InputNumDigits = i;
  }
}

void Debug_Tx_Number_Digits(void){
  for(uint8_t i = Debug.InputNumDigits; i > 0; i--){
     53c:	99 23       	and	r25, r25
     53e:	79 f7       	brne	.-34     	; 0x51e <Debug_Tx_Number_Digits+0x6>
    temp -= 1;
    temp  = Debug.Digits[temp];
    temp += 48;
    Debug_Tx_Byte(temp);
  }
}
     540:	08 95       	ret

00000542 <Debug_Tx_Number>:

void Debug_Tx_Number(int32_t num){
     542:	9b 01       	movw	r18, r22
     544:	ac 01       	movw	r20, r24
  if(num < 0){
     546:	97 ff       	sbrs	r25, 7
     548:	0e c0       	rjmp	.+28     	; 0x566 <Debug_Tx_Number+0x24>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     54a:	8d e2       	ldi	r24, 0x2D	; 45
     54c:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     550:	80 91 c0 00 	lds	r24, 0x00C0
     554:	85 ff       	sbrs	r24, 5
     556:	fc cf       	rjmp	.-8      	; 0x550 <Debug_Tx_Number+0xe>
}

void Debug_Tx_Number(int32_t num){
  if(num < 0){
    Debug_Tx_Byte('-');
	  num = -num;
     558:	50 95       	com	r21
     55a:	40 95       	com	r20
     55c:	30 95       	com	r19
     55e:	21 95       	neg	r18
     560:	3f 4f       	sbci	r19, 0xFF	; 255
     562:	4f 4f       	sbci	r20, 0xFF	; 255
     564:	5f 4f       	sbci	r21, 0xFF	; 255
  }
  Debug_Determine_Digit_Numbers((uint32_t)num);
     566:	ca 01       	movw	r24, r20
     568:	b9 01       	movw	r22, r18
     56a:	0e 94 4d 02 	call	0x49a	; 0x49a <Debug_Determine_Digit_Numbers>
  Debug_Tx_Number_Digits();
     56e:	0e 94 8c 02 	call	0x518	; 0x518 <Debug_Tx_Number_Digits>
}
     572:	08 95       	ret

00000574 <Debug_Tx_Number_Hex_Raw>:

void Debug_Tx_Number_Hex_Raw(uint64_t val){
     574:	2f 92       	push	r2
     576:	3f 92       	push	r3
     578:	4f 92       	push	r4
     57a:	5f 92       	push	r5
     57c:	6f 92       	push	r6
     57e:	7f 92       	push	r7
     580:	8f 92       	push	r8
     582:	9f 92       	push	r9
     584:	af 92       	push	r10
     586:	bf 92       	push	r11
     588:	cf 92       	push	r12
     58a:	df 92       	push	r13
     58c:	ef 92       	push	r14
     58e:	ff 92       	push	r15
     590:	0f 93       	push	r16
     592:	1f 93       	push	r17
     594:	df 93       	push	r29
     596:	cf 93       	push	r28
     598:	00 d0       	rcall	.+0      	; 0x59a <Debug_Tx_Number_Hex_Raw+0x26>
     59a:	00 d0       	rcall	.+0      	; 0x59c <Debug_Tx_Number_Hex_Raw+0x28>
     59c:	0f 92       	push	r0
     59e:	cd b7       	in	r28, 0x3d	; 61
     5a0:	de b7       	in	r29, 0x3e	; 62
     5a2:	29 83       	std	Y+1, r18	; 0x01
     5a4:	3a 83       	std	Y+2, r19	; 0x02
     5a6:	4b 83       	std	Y+3, r20	; 0x03
     5a8:	25 2e       	mov	r2, r21
     5aa:	36 2e       	mov	r3, r22
     5ac:	47 2e       	mov	r4, r23
     5ae:	58 2e       	mov	r5, r24
     5b0:	69 2e       	mov	r6, r25
  uint16_t hex_digit, index = 0, loop_counter = 0;
  if(val <= 0xFF){
     5b2:	99 23       	and	r25, r25
     5b4:	09 f0       	breq	.+2      	; 0x5b8 <Debug_Tx_Number_Hex_Raw+0x44>
     5b6:	44 c0       	rjmp	.+136    	; 0x640 <Debug_Tx_Number_Hex_Raw+0xcc>
     5b8:	88 23       	and	r24, r24
     5ba:	d1 f5       	brne	.+116    	; 0x630 <Debug_Tx_Number_Hex_Raw+0xbc>
     5bc:	77 23       	and	r23, r23
     5be:	81 f5       	brne	.+96     	; 0x620 <Debug_Tx_Number_Hex_Raw+0xac>
     5c0:	66 23       	and	r22, r22
     5c2:	31 f5       	brne	.+76     	; 0x610 <Debug_Tx_Number_Hex_Raw+0x9c>
     5c4:	55 23       	and	r21, r21
     5c6:	e1 f4       	brne	.+56     	; 0x600 <Debug_Tx_Number_Hex_Raw+0x8c>
     5c8:	44 23       	and	r20, r20
     5ca:	91 f4       	brne	.+36     	; 0x5f0 <Debug_Tx_Number_Hex_Raw+0x7c>
     5cc:	33 23       	and	r19, r19
     5ce:	41 f4       	brne	.+16     	; 0x5e0 <Debug_Tx_Number_Hex_Raw+0x6c>
     5d0:	88 e0       	ldi	r24, 0x08	; 8
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	9d 83       	std	Y+5, r25	; 0x05
     5d6:	8c 83       	std	Y+4, r24	; 0x04
     5d8:	e2 e0       	ldi	r30, 0x02	; 2
     5da:	8e 2e       	mov	r8, r30
     5dc:	91 2c       	mov	r9, r1
     5de:	37 c0       	rjmp	.+110    	; 0x64e <Debug_Tx_Number_Hex_Raw+0xda>
    index = 8;
    loop_counter = 2;
  }
	else if(val <= 0xFFFF){
     5e0:	e0 e1       	ldi	r30, 0x10	; 16
     5e2:	f0 e0       	ldi	r31, 0x00	; 0
     5e4:	fd 83       	std	Y+5, r31	; 0x05
     5e6:	ec 83       	std	Y+4, r30	; 0x04
     5e8:	74 e0       	ldi	r23, 0x04	; 4
     5ea:	87 2e       	mov	r8, r23
     5ec:	91 2c       	mov	r9, r1
     5ee:	2f c0       	rjmp	.+94     	; 0x64e <Debug_Tx_Number_Hex_Raw+0xda>
    index = 16;
    loop_counter = 4;     
  }
	else if(val <= 0xFFFFFF){
     5f0:	88 e1       	ldi	r24, 0x18	; 24
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	9d 83       	std	Y+5, r25	; 0x05
     5f6:	8c 83       	std	Y+4, r24	; 0x04
     5f8:	66 e0       	ldi	r22, 0x06	; 6
     5fa:	86 2e       	mov	r8, r22
     5fc:	91 2c       	mov	r9, r1
     5fe:	27 c0       	rjmp	.+78     	; 0x64e <Debug_Tx_Number_Hex_Raw+0xda>
    index = 24;
    loop_counter = 6;     
  }
	else if(val <= 0xFFFFFFFF){
     600:	e0 e2       	ldi	r30, 0x20	; 32
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	fd 83       	std	Y+5, r31	; 0x05
     606:	ec 83       	std	Y+4, r30	; 0x04
     608:	58 e0       	ldi	r21, 0x08	; 8
     60a:	85 2e       	mov	r8, r21
     60c:	91 2c       	mov	r9, r1
     60e:	1f c0       	rjmp	.+62     	; 0x64e <Debug_Tx_Number_Hex_Raw+0xda>
    index = 32;
    loop_counter = 8;     
  }
	else if(val <= 0xFFFFFFFFFF){
     610:	88 e2       	ldi	r24, 0x28	; 40
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	9d 83       	std	Y+5, r25	; 0x05
     616:	8c 83       	std	Y+4, r24	; 0x04
     618:	4a e0       	ldi	r20, 0x0A	; 10
     61a:	84 2e       	mov	r8, r20
     61c:	91 2c       	mov	r9, r1
     61e:	17 c0       	rjmp	.+46     	; 0x64e <Debug_Tx_Number_Hex_Raw+0xda>
    index = 40;
    loop_counter = 10;     
  }
	else if(val <= 0xFFFFFFFFFFFF){
     620:	e0 e3       	ldi	r30, 0x30	; 48
     622:	f0 e0       	ldi	r31, 0x00	; 0
     624:	fd 83       	std	Y+5, r31	; 0x05
     626:	ec 83       	std	Y+4, r30	; 0x04
     628:	3c e0       	ldi	r19, 0x0C	; 12
     62a:	83 2e       	mov	r8, r19
     62c:	91 2c       	mov	r9, r1
     62e:	0f c0       	rjmp	.+30     	; 0x64e <Debug_Tx_Number_Hex_Raw+0xda>
    index = 48;
    loop_counter = 12;     
  }
	else if(val <= 0xFFFFFFFFFFFFFF){
     630:	88 e3       	ldi	r24, 0x38	; 56
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	9d 83       	std	Y+5, r25	; 0x05
     636:	8c 83       	std	Y+4, r24	; 0x04
     638:	2e e0       	ldi	r18, 0x0E	; 14
     63a:	82 2e       	mov	r8, r18
     63c:	91 2c       	mov	r9, r1
     63e:	07 c0       	rjmp	.+14     	; 0x64e <Debug_Tx_Number_Hex_Raw+0xda>
     640:	e0 e4       	ldi	r30, 0x40	; 64
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	fd 83       	std	Y+5, r31	; 0x05
     646:	ec 83       	std	Y+4, r30	; 0x04
     648:	90 e1       	ldi	r25, 0x10	; 16
     64a:	89 2e       	mov	r8, r25
     64c:	91 2c       	mov	r9, r1
     64e:	77 24       	eor	r7, r7
     650:	20 c0       	rjmp	.+64     	; 0x692 <Debug_Tx_Number_Hex_Raw+0x11e>
	else{
    index = 64;
    loop_counter = 16;
  }
  for(uint8_t i = 0; i < loop_counter; i++){
	  index -= 4;
     652:	8c 81       	ldd	r24, Y+4	; 0x04
     654:	9d 81       	ldd	r25, Y+5	; 0x05
     656:	04 97       	sbiw	r24, 0x04	; 4
     658:	9d 83       	std	Y+5, r25	; 0x05
     65a:	8c 83       	std	Y+4, r24	; 0x04
	  hex_digit = ((val >> index) & 0x0F);
     65c:	29 81       	ldd	r18, Y+1	; 0x01
     65e:	3a 81       	ldd	r19, Y+2	; 0x02
     660:	4b 81       	ldd	r20, Y+3	; 0x03
     662:	52 2d       	mov	r21, r2
     664:	63 2d       	mov	r22, r3
     666:	74 2d       	mov	r23, r4
     668:	85 2d       	mov	r24, r5
     66a:	96 2d       	mov	r25, r6
     66c:	0c 81       	ldd	r16, Y+4	; 0x04
     66e:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <__lshrdi3>
     672:	c9 01       	movw	r24, r18
     674:	8f 70       	andi	r24, 0x0F	; 15
     676:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit > 9){
     678:	8a 30       	cpi	r24, 0x0A	; 10
     67a:	91 05       	cpc	r25, r1
     67c:	10 f0       	brcs	.+4      	; 0x682 <Debug_Tx_Number_Hex_Raw+0x10e>
	    hex_digit += 55;
     67e:	c7 96       	adiw	r24, 0x37	; 55
     680:	01 c0       	rjmp	.+2      	; 0x684 <Debug_Tx_Number_Hex_Raw+0x110>
	  }
	  else{
	    hex_digit += 48;
     682:	c0 96       	adiw	r24, 0x30	; 48
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     684:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     688:	80 91 c0 00 	lds	r24, 0x00C0
     68c:	85 ff       	sbrs	r24, 5
     68e:	fc cf       	rjmp	.-8      	; 0x688 <Debug_Tx_Number_Hex_Raw+0x114>
  }
	else{
    index = 64;
    loop_counter = 16;
  }
  for(uint8_t i = 0; i < loop_counter; i++){
     690:	73 94       	inc	r7
     692:	87 2d       	mov	r24, r7
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	88 15       	cp	r24, r8
     698:	99 05       	cpc	r25, r9
     69a:	d8 f2       	brcs	.-74     	; 0x652 <Debug_Tx_Number_Hex_Raw+0xde>
	  else{
	    hex_digit += 48;
	  }
	  Debug_Tx_Byte((uint8_t)hex_digit);
  }
}
     69c:	0f 90       	pop	r0
     69e:	0f 90       	pop	r0
     6a0:	0f 90       	pop	r0
     6a2:	0f 90       	pop	r0
     6a4:	0f 90       	pop	r0
     6a6:	cf 91       	pop	r28
     6a8:	df 91       	pop	r29
     6aa:	1f 91       	pop	r17
     6ac:	0f 91       	pop	r16
     6ae:	ff 90       	pop	r15
     6b0:	ef 90       	pop	r14
     6b2:	df 90       	pop	r13
     6b4:	cf 90       	pop	r12
     6b6:	bf 90       	pop	r11
     6b8:	af 90       	pop	r10
     6ba:	9f 90       	pop	r9
     6bc:	8f 90       	pop	r8
     6be:	7f 90       	pop	r7
     6c0:	6f 90       	pop	r6
     6c2:	5f 90       	pop	r5
     6c4:	4f 90       	pop	r4
     6c6:	3f 90       	pop	r3
     6c8:	2f 90       	pop	r2
     6ca:	08 95       	ret

000006cc <Debug_Tx_Number_Hex>:

void Debug_Tx_Number_Hex(uint64_t val){
     6cc:	e8 2f       	mov	r30, r24
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     6ce:	80 e3       	ldi	r24, 0x30	; 48
     6d0:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     6d4:	80 91 c0 00 	lds	r24, 0x00C0
     6d8:	85 ff       	sbrs	r24, 5
     6da:	fc cf       	rjmp	.-8      	; 0x6d4 <Debug_Tx_Number_Hex+0x8>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     6dc:	88 e7       	ldi	r24, 0x78	; 120
     6de:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     6e2:	80 91 c0 00 	lds	r24, 0x00C0
     6e6:	85 ff       	sbrs	r24, 5
     6e8:	fc cf       	rjmp	.-8      	; 0x6e2 <Debug_Tx_Number_Hex+0x16>
}

void Debug_Tx_Number_Hex(uint64_t val){
  Debug_Tx_Byte('0');
  Debug_Tx_Byte('x');
  Debug_Tx_Number_Hex_Raw(val);
     6ea:	8e 2f       	mov	r24, r30
     6ec:	0e 94 ba 02 	call	0x574	; 0x574 <Debug_Tx_Number_Hex_Raw>
}
     6f0:	08 95       	ret

000006f2 <Debug_Tx_Number_Bin_Raw>:


void Debug_Tx_Number_Bin_Raw(uint64_t val){
     6f2:	2f 92       	push	r2
     6f4:	3f 92       	push	r3
     6f6:	4f 92       	push	r4
     6f8:	5f 92       	push	r5
     6fa:	6f 92       	push	r6
     6fc:	7f 92       	push	r7
     6fe:	8f 92       	push	r8
     700:	9f 92       	push	r9
     702:	af 92       	push	r10
     704:	bf 92       	push	r11
     706:	cf 92       	push	r12
     708:	df 92       	push	r13
     70a:	ef 92       	push	r14
     70c:	ff 92       	push	r15
     70e:	0f 93       	push	r16
     710:	1f 93       	push	r17
     712:	df 93       	push	r29
     714:	cf 93       	push	r28
     716:	00 d0       	rcall	.+0      	; 0x718 <Debug_Tx_Number_Bin_Raw+0x26>
     718:	00 d0       	rcall	.+0      	; 0x71a <Debug_Tx_Number_Bin_Raw+0x28>
     71a:	00 d0       	rcall	.+0      	; 0x71c <Debug_Tx_Number_Bin_Raw+0x2a>
     71c:	cd b7       	in	r28, 0x3d	; 61
     71e:	de b7       	in	r29, 0x3e	; 62
     720:	29 83       	std	Y+1, r18	; 0x01
     722:	3a 83       	std	Y+2, r19	; 0x02
     724:	4b 83       	std	Y+3, r20	; 0x03
     726:	5c 83       	std	Y+4, r21	; 0x04
     728:	1b 01       	movw	r2, r22
     72a:	2c 01       	movw	r4, r24
    loop_counter = 15;     
  }else{
    loop_counter = 31;
  }
	
	if(val <= 0xFF){
     72c:	55 20       	and	r5, r5
     72e:	d1 f4       	brne	.+52     	; 0x764 <Debug_Tx_Number_Bin_Raw+0x72>
     730:	88 23       	and	r24, r24
     732:	b1 f4       	brne	.+44     	; 0x760 <Debug_Tx_Number_Bin_Raw+0x6e>
     734:	33 20       	and	r3, r3
     736:	91 f4       	brne	.+36     	; 0x75c <Debug_Tx_Number_Bin_Raw+0x6a>
     738:	66 23       	and	r22, r22
     73a:	71 f4       	brne	.+28     	; 0x758 <Debug_Tx_Number_Bin_Raw+0x66>
     73c:	55 23       	and	r21, r21
     73e:	51 f4       	brne	.+20     	; 0x754 <Debug_Tx_Number_Bin_Raw+0x62>
     740:	44 23       	and	r20, r20
     742:	31 f4       	brne	.+12     	; 0x750 <Debug_Tx_Number_Bin_Raw+0x5e>
     744:	33 23       	and	r19, r19
     746:	11 f4       	brne	.+4      	; 0x74c <Debug_Tx_Number_Bin_Raw+0x5a>
     748:	07 e0       	ldi	r16, 0x07	; 7
     74a:	0d c0       	rjmp	.+26     	; 0x766 <Debug_Tx_Number_Bin_Raw+0x74>
    loop_counter = 7;
  }
	else if(val <= 0xFFFF){
     74c:	0f e0       	ldi	r16, 0x0F	; 15
     74e:	0b c0       	rjmp	.+22     	; 0x766 <Debug_Tx_Number_Bin_Raw+0x74>
    loop_counter = 15;     
  }
	else if(val <= 0xFFFFFF){
     750:	07 e1       	ldi	r16, 0x17	; 23
     752:	09 c0       	rjmp	.+18     	; 0x766 <Debug_Tx_Number_Bin_Raw+0x74>
    loop_counter = 23;     
  }
	else if(val <= 0xFFFFFFFF){
     754:	0f e1       	ldi	r16, 0x1F	; 31
     756:	07 c0       	rjmp	.+14     	; 0x766 <Debug_Tx_Number_Bin_Raw+0x74>
    loop_counter = 31;     
  }
	else if(val <= 0xFFFFFFFFFF){
     758:	07 e2       	ldi	r16, 0x27	; 39
     75a:	05 c0       	rjmp	.+10     	; 0x766 <Debug_Tx_Number_Bin_Raw+0x74>
    loop_counter = 39;     
  }
	else if(val <= 0xFFFFFFFFFFFF){
     75c:	0f e2       	ldi	r16, 0x2F	; 47
     75e:	03 c0       	rjmp	.+6      	; 0x766 <Debug_Tx_Number_Bin_Raw+0x74>
    loop_counter = 47;     
  }
	else if(val <= 0xFFFFFFFFFFFFFF){
     760:	07 e3       	ldi	r16, 0x37	; 55
     762:	01 c0       	rjmp	.+2      	; 0x766 <Debug_Tx_Number_Bin_Raw+0x74>
     764:	0f e3       	ldi	r16, 0x3F	; 63
     766:	1e 82       	std	Y+6, r1	; 0x06
     768:	1d 82       	std	Y+5, r1	; 0x05
  Debug_Tx_Byte('x');
  Debug_Tx_Number_Hex_Raw(val);
}


void Debug_Tx_Number_Bin_Raw(uint64_t val){
     76a:	80 2e       	mov	r8, r16
     76c:	99 24       	eor	r9, r9
  }
	else{
    loop_counter = 63;
  }
  
  for(int i = loop_counter; i >= 0; i--){
     76e:	34 01       	movw	r6, r8
     770:	08 94       	sec
     772:	61 1c       	adc	r6, r1
     774:	71 1c       	adc	r7, r1
    if( (val>>i) & 1){
     776:	84 01       	movw	r16, r8
     778:	8d 81       	ldd	r24, Y+5	; 0x05
     77a:	9e 81       	ldd	r25, Y+6	; 0x06
     77c:	08 1b       	sub	r16, r24
     77e:	19 0b       	sbc	r17, r25
     780:	29 81       	ldd	r18, Y+1	; 0x01
     782:	3a 81       	ldd	r19, Y+2	; 0x02
     784:	4b 81       	ldd	r20, Y+3	; 0x03
     786:	5c 81       	ldd	r21, Y+4	; 0x04
     788:	b1 01       	movw	r22, r2
     78a:	c2 01       	movw	r24, r4
     78c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <__lshrdi3>
     790:	c9 01       	movw	r24, r18
     792:	81 70       	andi	r24, 0x01	; 1
     794:	90 70       	andi	r25, 0x00	; 0
     796:	89 2b       	or	r24, r25
     798:	41 f0       	breq	.+16     	; 0x7aa <Debug_Tx_Number_Bin_Raw+0xb8>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     79a:	91 e3       	ldi	r25, 0x31	; 49
     79c:	90 93 c6 00 	sts	0x00C6, r25
  while((UCSR0A & (1<<UDRE0))==0);
     7a0:	80 91 c0 00 	lds	r24, 0x00C0
     7a4:	85 ff       	sbrs	r24, 5
     7a6:	fc cf       	rjmp	.-8      	; 0x7a0 <Debug_Tx_Number_Bin_Raw+0xae>
     7a8:	07 c0       	rjmp	.+14     	; 0x7b8 <Debug_Tx_Number_Bin_Raw+0xc6>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     7aa:	e0 e3       	ldi	r30, 0x30	; 48
     7ac:	e0 93 c6 00 	sts	0x00C6, r30
  while((UCSR0A & (1<<UDRE0))==0);
     7b0:	80 91 c0 00 	lds	r24, 0x00C0
     7b4:	85 ff       	sbrs	r24, 5
     7b6:	fc cf       	rjmp	.-8      	; 0x7b0 <Debug_Tx_Number_Bin_Raw+0xbe>
     7b8:	8d 81       	ldd	r24, Y+5	; 0x05
     7ba:	9e 81       	ldd	r25, Y+6	; 0x06
     7bc:	01 96       	adiw	r24, 0x01	; 1
     7be:	9e 83       	std	Y+6, r25	; 0x06
     7c0:	8d 83       	std	Y+5, r24	; 0x05
  }
	else{
    loop_counter = 63;
  }
  
  for(int i = loop_counter; i >= 0; i--){
     7c2:	86 15       	cp	r24, r6
     7c4:	97 05       	cpc	r25, r7
     7c6:	b9 f6       	brne	.-82     	; 0x776 <Debug_Tx_Number_Bin_Raw+0x84>
      Debug_Tx_Byte( 49 );   
    }else{
      Debug_Tx_Byte( 48 );         
    }
  }
}
     7c8:	26 96       	adiw	r28, 0x06	; 6
     7ca:	0f b6       	in	r0, 0x3f	; 63
     7cc:	f8 94       	cli
     7ce:	de bf       	out	0x3e, r29	; 62
     7d0:	0f be       	out	0x3f, r0	; 63
     7d2:	cd bf       	out	0x3d, r28	; 61
     7d4:	cf 91       	pop	r28
     7d6:	df 91       	pop	r29
     7d8:	1f 91       	pop	r17
     7da:	0f 91       	pop	r16
     7dc:	ff 90       	pop	r15
     7de:	ef 90       	pop	r14
     7e0:	df 90       	pop	r13
     7e2:	cf 90       	pop	r12
     7e4:	bf 90       	pop	r11
     7e6:	af 90       	pop	r10
     7e8:	9f 90       	pop	r9
     7ea:	8f 90       	pop	r8
     7ec:	7f 90       	pop	r7
     7ee:	6f 90       	pop	r6
     7f0:	5f 90       	pop	r5
     7f2:	4f 90       	pop	r4
     7f4:	3f 90       	pop	r3
     7f6:	2f 90       	pop	r2
     7f8:	08 95       	ret

000007fa <Debug_Tx_Number_Bin>:

void Debug_Tx_Number_Bin(uint64_t val){
     7fa:	e8 2f       	mov	r30, r24
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     7fc:	80 e3       	ldi	r24, 0x30	; 48
     7fe:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     802:	80 91 c0 00 	lds	r24, 0x00C0
     806:	85 ff       	sbrs	r24, 5
     808:	fc cf       	rjmp	.-8      	; 0x802 <Debug_Tx_Number_Bin+0x8>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     80a:	82 e6       	ldi	r24, 0x62	; 98
     80c:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     810:	80 91 c0 00 	lds	r24, 0x00C0
     814:	85 ff       	sbrs	r24, 5
     816:	fc cf       	rjmp	.-8      	; 0x810 <Debug_Tx_Number_Bin+0x16>
}

void Debug_Tx_Number_Bin(uint64_t val){
  Debug_Tx_Byte('0');
  Debug_Tx_Byte('b');
  Debug_Tx_Number_Bin_Raw(val);
     818:	8e 2f       	mov	r24, r30
     81a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <Debug_Tx_Number_Bin_Raw>
}
     81e:	08 95       	ret

00000820 <Debug_Tx_Number_NL>:


/************Number with End Char Functions Start**************/

void Debug_Tx_Number_NL(int32_t num){
  Debug_Tx_Number(num);
     820:	0e 94 a1 02 	call	0x542	; 0x542 <Debug_Tx_Number>
  Debug_Tx_NL();
     824:	0e 94 04 02 	call	0x408	; 0x408 <Debug_Tx_NL>
}
     828:	08 95       	ret

0000082a <Debug_Tx_Number_SP>:

void Debug_Tx_Number_SP(int32_t num){
  Debug_Tx_Number(num);
     82a:	0e 94 a1 02 	call	0x542	; 0x542 <Debug_Tx_Number>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     82e:	80 e2       	ldi	r24, 0x20	; 32
     830:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     834:	80 91 c0 00 	lds	r24, 0x00C0
     838:	85 ff       	sbrs	r24, 5
     83a:	fc cf       	rjmp	.-8      	; 0x834 <Debug_Tx_Number_SP+0xa>
}

void Debug_Tx_Number_SP(int32_t num){
  Debug_Tx_Number(num);
  Debug_Tx_SP();
}
     83c:	08 95       	ret

0000083e <Debug_Tx_Number_CM>:

void Debug_Tx_Number_CM(int32_t num){
  Debug_Tx_Number(num);
     83e:	0e 94 a1 02 	call	0x542	; 0x542 <Debug_Tx_Number>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     842:	8c e2       	ldi	r24, 0x2C	; 44
     844:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     848:	80 91 c0 00 	lds	r24, 0x00C0
     84c:	85 ff       	sbrs	r24, 5
     84e:	fc cf       	rjmp	.-8      	; 0x848 <Debug_Tx_Number_CM+0xa>
}

void Debug_Tx_Number_CM(int32_t num){
  Debug_Tx_Number(num);
  Debug_Tx_CM();
}
     850:	08 95       	ret

00000852 <Debug_Tx_Number_Hex_NL>:


/**********Hex Number with End Char Functions Start************/

void Debug_Tx_Number_Hex_NL(uint64_t num){
  Debug_Tx_Number_Hex(num);
     852:	0e 94 66 03 	call	0x6cc	; 0x6cc <Debug_Tx_Number_Hex>
  Debug_Tx_NL();
     856:	0e 94 04 02 	call	0x408	; 0x408 <Debug_Tx_NL>
}
     85a:	08 95       	ret

0000085c <Debug_Tx_Number_Hex_SP>:

void Debug_Tx_Number_Hex_SP(uint64_t num){
  Debug_Tx_Number_Hex(num);
     85c:	0e 94 66 03 	call	0x6cc	; 0x6cc <Debug_Tx_Number_Hex>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     860:	80 e2       	ldi	r24, 0x20	; 32
     862:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     866:	80 91 c0 00 	lds	r24, 0x00C0
     86a:	85 ff       	sbrs	r24, 5
     86c:	fc cf       	rjmp	.-8      	; 0x866 <Debug_Tx_Number_Hex_SP+0xa>
}

void Debug_Tx_Number_Hex_SP(uint64_t num){
  Debug_Tx_Number_Hex(num);
  Debug_Tx_SP();
}
     86e:	08 95       	ret

00000870 <Debug_Tx_Number_Hex_CM>:

void Debug_Tx_Number_Hex_CM(uint64_t num){
  Debug_Tx_Number_Hex(num);
     870:	0e 94 66 03 	call	0x6cc	; 0x6cc <Debug_Tx_Number_Hex>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     874:	8c e2       	ldi	r24, 0x2C	; 44
     876:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     87a:	80 91 c0 00 	lds	r24, 0x00C0
     87e:	85 ff       	sbrs	r24, 5
     880:	fc cf       	rjmp	.-8      	; 0x87a <Debug_Tx_Number_Hex_CM+0xa>
}

void Debug_Tx_Number_Hex_CM(uint64_t num){
  Debug_Tx_Number_Hex(num);
  Debug_Tx_CM();
}
     882:	08 95       	ret

00000884 <Debug_Tx_Number_Bin_NL>:


/**********Bin Number with End Char Functions Start************/

void Debug_Tx_Number_Bin_NL(uint64_t num){
  Debug_Tx_Number_Bin(num);
     884:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Debug_Tx_Number_Bin>
  Debug_Tx_NL();
     888:	0e 94 04 02 	call	0x408	; 0x408 <Debug_Tx_NL>
}
     88c:	08 95       	ret

0000088e <Debug_Tx_Number_Bin_SP>:

void Debug_Tx_Number_Bin_SP(uint64_t num){
  Debug_Tx_Number_Bin(num);
     88e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Debug_Tx_Number_Bin>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     892:	80 e2       	ldi	r24, 0x20	; 32
     894:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     898:	80 91 c0 00 	lds	r24, 0x00C0
     89c:	85 ff       	sbrs	r24, 5
     89e:	fc cf       	rjmp	.-8      	; 0x898 <Debug_Tx_Number_Bin_SP+0xa>
}

void Debug_Tx_Number_Bin_SP(uint64_t num){
  Debug_Tx_Number_Bin(num);
  Debug_Tx_SP();
}
     8a0:	08 95       	ret

000008a2 <Debug_Tx_Number_Bin_CM>:

void Debug_Tx_Number_Bin_CM(uint64_t num){
  Debug_Tx_Number_Bin(num);
     8a2:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Debug_Tx_Number_Bin>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     8a6:	8c e2       	ldi	r24, 0x2C	; 44
     8a8:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     8ac:	80 91 c0 00 	lds	r24, 0x00C0
     8b0:	85 ff       	sbrs	r24, 5
     8b2:	fc cf       	rjmp	.-8      	; 0x8ac <Debug_Tx_Number_Bin_CM+0xa>
}

void Debug_Tx_Number_Bin_CM(uint64_t num){
  Debug_Tx_Number_Bin(num);
  Debug_Tx_CM();
}
     8b4:	08 95       	ret

000008b6 <Debug_Tx_Parameter_NL>:



/************Number with Parameter Functions Start*************/

void Debug_Tx_Parameter_NL(char *name, int32_t num){
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7a 01       	movw	r14, r20
     8c0:	8b 01       	movw	r16, r22
  Debug_Tx_Text(name);
     8c2:	0e 94 23 02 	call	0x446	; 0x446 <Debug_Tx_Text>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     8c6:	80 e2       	ldi	r24, 0x20	; 32
     8c8:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     8cc:	80 91 c0 00 	lds	r24, 0x00C0
     8d0:	85 ff       	sbrs	r24, 5
     8d2:	fc cf       	rjmp	.-8      	; 0x8cc <Debug_Tx_Parameter_NL+0x16>
/************Number with Parameter Functions Start*************/

void Debug_Tx_Parameter_NL(char *name, int32_t num){
  Debug_Tx_Text(name);
  Debug_Tx_SP();
  Debug_Tx_Number_NL(num);
     8d4:	c8 01       	movw	r24, r16
     8d6:	b7 01       	movw	r22, r14
     8d8:	0e 94 10 04 	call	0x820	; 0x820 <Debug_Tx_Number_NL>
}
     8dc:	1f 91       	pop	r17
     8de:	0f 91       	pop	r16
     8e0:	ff 90       	pop	r15
     8e2:	ef 90       	pop	r14
     8e4:	08 95       	ret

000008e6 <Debug_Tx_Parameter_SP>:

void Debug_Tx_Parameter_SP(char *name, int32_t num){
     8e6:	ef 92       	push	r14
     8e8:	ff 92       	push	r15
     8ea:	0f 93       	push	r16
     8ec:	1f 93       	push	r17
     8ee:	7a 01       	movw	r14, r20
     8f0:	8b 01       	movw	r16, r22
  Debug_Tx_Text(name);
     8f2:	0e 94 23 02 	call	0x446	; 0x446 <Debug_Tx_Text>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     8f6:	80 e2       	ldi	r24, 0x20	; 32
     8f8:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     8fc:	80 91 c0 00 	lds	r24, 0x00C0
     900:	85 ff       	sbrs	r24, 5
     902:	fc cf       	rjmp	.-8      	; 0x8fc <Debug_Tx_Parameter_SP+0x16>
}

void Debug_Tx_Parameter_SP(char *name, int32_t num){
  Debug_Tx_Text(name);
  Debug_Tx_SP();
  Debug_Tx_Number_SP(num);
     904:	c8 01       	movw	r24, r16
     906:	b7 01       	movw	r22, r14
     908:	0e 94 15 04 	call	0x82a	; 0x82a <Debug_Tx_Number_SP>
}
     90c:	1f 91       	pop	r17
     90e:	0f 91       	pop	r16
     910:	ff 90       	pop	r15
     912:	ef 90       	pop	r14
     914:	08 95       	ret

00000916 <Debug_Tx_Parameter_CM>:

void Debug_Tx_Parameter_CM(char *name, int32_t num){
     916:	ef 92       	push	r14
     918:	ff 92       	push	r15
     91a:	0f 93       	push	r16
     91c:	1f 93       	push	r17
     91e:	7a 01       	movw	r14, r20
     920:	8b 01       	movw	r16, r22
  Debug_Tx_Text(name);
     922:	0e 94 23 02 	call	0x446	; 0x446 <Debug_Tx_Text>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     926:	80 e2       	ldi	r24, 0x20	; 32
     928:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     92c:	80 91 c0 00 	lds	r24, 0x00C0
     930:	85 ff       	sbrs	r24, 5
     932:	fc cf       	rjmp	.-8      	; 0x92c <Debug_Tx_Parameter_CM+0x16>
}

void Debug_Tx_Parameter_CM(char *name, int32_t num){
  Debug_Tx_Text(name);
  Debug_Tx_SP();
  Debug_Tx_Number_CM(num);
     934:	c8 01       	movw	r24, r16
     936:	b7 01       	movw	r22, r14
     938:	0e 94 1f 04 	call	0x83e	; 0x83e <Debug_Tx_Number_CM>
}
     93c:	1f 91       	pop	r17
     93e:	0f 91       	pop	r16
     940:	ff 90       	pop	r15
     942:	ef 90       	pop	r14
     944:	08 95       	ret

00000946 <Debug_Tx_Parameter_Hex_NL>:



/**********Hex Number with Parameter Functions Start***********/

void Debug_Tx_Parameter_Hex_NL(char *name, uint64_t num){
     946:	af 92       	push	r10
     948:	bf 92       	push	r11
     94a:	cf 92       	push	r12
     94c:	df 92       	push	r13
     94e:	ef 92       	push	r14
     950:	ff 92       	push	r15
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	f2 2e       	mov	r15, r18
     958:	e3 2e       	mov	r14, r19
     95a:	d4 2e       	mov	r13, r20
     95c:	c5 2e       	mov	r12, r21
     95e:	b6 2e       	mov	r11, r22
     960:	a7 2e       	mov	r10, r23
  Debug_Tx_Text(name);
     962:	0e 94 23 02 	call	0x446	; 0x446 <Debug_Tx_Text>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     966:	80 e2       	ldi	r24, 0x20	; 32
     968:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     96c:	80 91 c0 00 	lds	r24, 0x00C0
     970:	85 ff       	sbrs	r24, 5
     972:	fc cf       	rjmp	.-8      	; 0x96c <Debug_Tx_Parameter_Hex_NL+0x26>
/**********Hex Number with Parameter Functions Start***********/

void Debug_Tx_Parameter_Hex_NL(char *name, uint64_t num){
  Debug_Tx_Text(name);
  Debug_Tx_SP();
  Debug_Tx_Number_Hex_NL(num);
     974:	98 01       	movw	r18, r16
     976:	4f 2d       	mov	r20, r15
     978:	5e 2d       	mov	r21, r14
     97a:	6d 2d       	mov	r22, r13
     97c:	7c 2d       	mov	r23, r12
     97e:	8b 2d       	mov	r24, r11
     980:	9a 2d       	mov	r25, r10
     982:	0e 94 29 04 	call	0x852	; 0x852 <Debug_Tx_Number_Hex_NL>
}
     986:	1f 91       	pop	r17
     988:	0f 91       	pop	r16
     98a:	ff 90       	pop	r15
     98c:	ef 90       	pop	r14
     98e:	df 90       	pop	r13
     990:	cf 90       	pop	r12
     992:	bf 90       	pop	r11
     994:	af 90       	pop	r10
     996:	08 95       	ret

00000998 <Debug_Tx_Parameter_Hex_SP>:

void Debug_Tx_Parameter_Hex_SP(char *name, uint64_t num){
     998:	af 92       	push	r10
     99a:	bf 92       	push	r11
     99c:	cf 92       	push	r12
     99e:	df 92       	push	r13
     9a0:	ef 92       	push	r14
     9a2:	ff 92       	push	r15
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	f2 2e       	mov	r15, r18
     9aa:	e3 2e       	mov	r14, r19
     9ac:	d4 2e       	mov	r13, r20
     9ae:	c5 2e       	mov	r12, r21
     9b0:	b6 2e       	mov	r11, r22
     9b2:	a7 2e       	mov	r10, r23
  Debug_Tx_Text(name);
     9b4:	0e 94 23 02 	call	0x446	; 0x446 <Debug_Tx_Text>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     9b8:	80 e2       	ldi	r24, 0x20	; 32
     9ba:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     9be:	80 91 c0 00 	lds	r24, 0x00C0
     9c2:	85 ff       	sbrs	r24, 5
     9c4:	fc cf       	rjmp	.-8      	; 0x9be <Debug_Tx_Parameter_Hex_SP+0x26>
}

void Debug_Tx_Parameter_Hex_SP(char *name, uint64_t num){
  Debug_Tx_Text(name);
  Debug_Tx_SP();
  Debug_Tx_Number_Hex_SP(num);
     9c6:	98 01       	movw	r18, r16
     9c8:	4f 2d       	mov	r20, r15
     9ca:	5e 2d       	mov	r21, r14
     9cc:	6d 2d       	mov	r22, r13
     9ce:	7c 2d       	mov	r23, r12
     9d0:	8b 2d       	mov	r24, r11
     9d2:	9a 2d       	mov	r25, r10
     9d4:	0e 94 2e 04 	call	0x85c	; 0x85c <Debug_Tx_Number_Hex_SP>
}
     9d8:	1f 91       	pop	r17
     9da:	0f 91       	pop	r16
     9dc:	ff 90       	pop	r15
     9de:	ef 90       	pop	r14
     9e0:	df 90       	pop	r13
     9e2:	cf 90       	pop	r12
     9e4:	bf 90       	pop	r11
     9e6:	af 90       	pop	r10
     9e8:	08 95       	ret

000009ea <Debug_Tx_Parameter_Hex_CM>:

void Debug_Tx_Parameter_Hex_CM(char *name, uint64_t num){
     9ea:	af 92       	push	r10
     9ec:	bf 92       	push	r11
     9ee:	cf 92       	push	r12
     9f0:	df 92       	push	r13
     9f2:	ef 92       	push	r14
     9f4:	ff 92       	push	r15
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	f2 2e       	mov	r15, r18
     9fc:	e3 2e       	mov	r14, r19
     9fe:	d4 2e       	mov	r13, r20
     a00:	c5 2e       	mov	r12, r21
     a02:	b6 2e       	mov	r11, r22
     a04:	a7 2e       	mov	r10, r23
  Debug_Tx_Text(name);
     a06:	0e 94 23 02 	call	0x446	; 0x446 <Debug_Tx_Text>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     a0a:	80 e2       	ldi	r24, 0x20	; 32
     a0c:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     a10:	80 91 c0 00 	lds	r24, 0x00C0
     a14:	85 ff       	sbrs	r24, 5
     a16:	fc cf       	rjmp	.-8      	; 0xa10 <Debug_Tx_Parameter_Hex_CM+0x26>
}

void Debug_Tx_Parameter_Hex_CM(char *name, uint64_t num){
  Debug_Tx_Text(name);
  Debug_Tx_SP();
  Debug_Tx_Number_Hex_CM(num);
     a18:	98 01       	movw	r18, r16
     a1a:	4f 2d       	mov	r20, r15
     a1c:	5e 2d       	mov	r21, r14
     a1e:	6d 2d       	mov	r22, r13
     a20:	7c 2d       	mov	r23, r12
     a22:	8b 2d       	mov	r24, r11
     a24:	9a 2d       	mov	r25, r10
     a26:	0e 94 38 04 	call	0x870	; 0x870 <Debug_Tx_Number_Hex_CM>
}
     a2a:	1f 91       	pop	r17
     a2c:	0f 91       	pop	r16
     a2e:	ff 90       	pop	r15
     a30:	ef 90       	pop	r14
     a32:	df 90       	pop	r13
     a34:	cf 90       	pop	r12
     a36:	bf 90       	pop	r11
     a38:	af 90       	pop	r10
     a3a:	08 95       	ret

00000a3c <Debug_Tx_Parameter_Bin_NL>:



/**********Bin Number with Parameter Functions Start***********/

void Debug_Tx_Parameter_Bin_NL(char *name, uint64_t num){
     a3c:	af 92       	push	r10
     a3e:	bf 92       	push	r11
     a40:	cf 92       	push	r12
     a42:	df 92       	push	r13
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	f2 2e       	mov	r15, r18
     a4e:	e3 2e       	mov	r14, r19
     a50:	d4 2e       	mov	r13, r20
     a52:	c5 2e       	mov	r12, r21
     a54:	b6 2e       	mov	r11, r22
     a56:	a7 2e       	mov	r10, r23
  Debug_Tx_Text(name);
     a58:	0e 94 23 02 	call	0x446	; 0x446 <Debug_Tx_Text>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     a5c:	80 e2       	ldi	r24, 0x20	; 32
     a5e:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     a62:	80 91 c0 00 	lds	r24, 0x00C0
     a66:	85 ff       	sbrs	r24, 5
     a68:	fc cf       	rjmp	.-8      	; 0xa62 <Debug_Tx_Parameter_Bin_NL+0x26>
/**********Bin Number with Parameter Functions Start***********/

void Debug_Tx_Parameter_Bin_NL(char *name, uint64_t num){
  Debug_Tx_Text(name);
  Debug_Tx_SP();
  Debug_Tx_Number_Bin_NL(num);
     a6a:	98 01       	movw	r18, r16
     a6c:	4f 2d       	mov	r20, r15
     a6e:	5e 2d       	mov	r21, r14
     a70:	6d 2d       	mov	r22, r13
     a72:	7c 2d       	mov	r23, r12
     a74:	8b 2d       	mov	r24, r11
     a76:	9a 2d       	mov	r25, r10
     a78:	0e 94 42 04 	call	0x884	; 0x884 <Debug_Tx_Number_Bin_NL>
}
     a7c:	1f 91       	pop	r17
     a7e:	0f 91       	pop	r16
     a80:	ff 90       	pop	r15
     a82:	ef 90       	pop	r14
     a84:	df 90       	pop	r13
     a86:	cf 90       	pop	r12
     a88:	bf 90       	pop	r11
     a8a:	af 90       	pop	r10
     a8c:	08 95       	ret

00000a8e <Debug_Tx_Parameter_Bin_SP>:

void Debug_Tx_Parameter_Bin_SP(char *name, uint64_t num){
     a8e:	af 92       	push	r10
     a90:	bf 92       	push	r11
     a92:	cf 92       	push	r12
     a94:	df 92       	push	r13
     a96:	ef 92       	push	r14
     a98:	ff 92       	push	r15
     a9a:	0f 93       	push	r16
     a9c:	1f 93       	push	r17
     a9e:	f2 2e       	mov	r15, r18
     aa0:	e3 2e       	mov	r14, r19
     aa2:	d4 2e       	mov	r13, r20
     aa4:	c5 2e       	mov	r12, r21
     aa6:	b6 2e       	mov	r11, r22
     aa8:	a7 2e       	mov	r10, r23
  Debug_Tx_Text(name);
     aaa:	0e 94 23 02 	call	0x446	; 0x446 <Debug_Tx_Text>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     aae:	80 e2       	ldi	r24, 0x20	; 32
     ab0:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     ab4:	80 91 c0 00 	lds	r24, 0x00C0
     ab8:	85 ff       	sbrs	r24, 5
     aba:	fc cf       	rjmp	.-8      	; 0xab4 <Debug_Tx_Parameter_Bin_SP+0x26>
}

void Debug_Tx_Parameter_Bin_SP(char *name, uint64_t num){
  Debug_Tx_Text(name);
  Debug_Tx_SP();
  Debug_Tx_Number_Bin_SP(num);
     abc:	98 01       	movw	r18, r16
     abe:	4f 2d       	mov	r20, r15
     ac0:	5e 2d       	mov	r21, r14
     ac2:	6d 2d       	mov	r22, r13
     ac4:	7c 2d       	mov	r23, r12
     ac6:	8b 2d       	mov	r24, r11
     ac8:	9a 2d       	mov	r25, r10
     aca:	0e 94 47 04 	call	0x88e	; 0x88e <Debug_Tx_Number_Bin_SP>
}
     ace:	1f 91       	pop	r17
     ad0:	0f 91       	pop	r16
     ad2:	ff 90       	pop	r15
     ad4:	ef 90       	pop	r14
     ad6:	df 90       	pop	r13
     ad8:	cf 90       	pop	r12
     ada:	bf 90       	pop	r11
     adc:	af 90       	pop	r10
     ade:	08 95       	ret

00000ae0 <Debug_Tx_Parameter_Bin_CM>:

void Debug_Tx_Parameter_Bin_CM(char *name, uint64_t num){
     ae0:	af 92       	push	r10
     ae2:	bf 92       	push	r11
     ae4:	cf 92       	push	r12
     ae6:	df 92       	push	r13
     ae8:	ef 92       	push	r14
     aea:	ff 92       	push	r15
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	f2 2e       	mov	r15, r18
     af2:	e3 2e       	mov	r14, r19
     af4:	d4 2e       	mov	r13, r20
     af6:	c5 2e       	mov	r12, r21
     af8:	b6 2e       	mov	r11, r22
     afa:	a7 2e       	mov	r10, r23
  Debug_Tx_Text(name);
     afc:	0e 94 23 02 	call	0x446	; 0x446 <Debug_Tx_Text>
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     b00:	80 e2       	ldi	r24, 0x20	; 32
     b02:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     b06:	80 91 c0 00 	lds	r24, 0x00C0
     b0a:	85 ff       	sbrs	r24, 5
     b0c:	fc cf       	rjmp	.-8      	; 0xb06 <Debug_Tx_Parameter_Bin_CM+0x26>
}

void Debug_Tx_Parameter_Bin_CM(char *name, uint64_t num){
  Debug_Tx_Text(name);
  Debug_Tx_SP();
  Debug_Tx_Number_Bin_CM(num);
     b0e:	98 01       	movw	r18, r16
     b10:	4f 2d       	mov	r20, r15
     b12:	5e 2d       	mov	r21, r14
     b14:	6d 2d       	mov	r22, r13
     b16:	7c 2d       	mov	r23, r12
     b18:	8b 2d       	mov	r24, r11
     b1a:	9a 2d       	mov	r25, r10
     b1c:	0e 94 51 04 	call	0x8a2	; 0x8a2 <Debug_Tx_Number_Bin_CM>
}
     b20:	1f 91       	pop	r17
     b22:	0f 91       	pop	r16
     b24:	ff 90       	pop	r15
     b26:	ef 90       	pop	r14
     b28:	df 90       	pop	r13
     b2a:	cf 90       	pop	r12
     b2c:	bf 90       	pop	r11
     b2e:	af 90       	pop	r10
     b30:	08 95       	ret

00000b32 <Debug_Buf_Flush>:



/*******************Debug Buffer Functions Start***************/

void Debug_Buf_Flush(void){
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i = 0; i < DEBUG_BUFFER_SIZE; i++){
	Debug.Buf[i] = 0;
     b36:	fc 01       	movw	r30, r24
     b38:	ee 5e       	subi	r30, 0xEE	; 238
     b3a:	fe 4f       	sbci	r31, 0xFE	; 254
     b3c:	14 86       	std	Z+12, r1	; 0x0c
     b3e:	01 96       	adiw	r24, 0x01	; 1


/*******************Debug Buffer Functions Start***************/

void Debug_Buf_Flush(void){
  for(uint8_t i = 0; i < DEBUG_BUFFER_SIZE; i++){
     b40:	80 34       	cpi	r24, 0x40	; 64
     b42:	91 05       	cpc	r25, r1
     b44:	c1 f7       	brne	.-16     	; 0xb36 <Debug_Buf_Flush+0x4>
	Debug.Buf[i] = 0;
  }
  Debug.BufIndex = 0;
     b46:	10 92 62 01 	sts	0x0162, r1
     b4a:	10 92 61 01 	sts	0x0161, r1
}
     b4e:	08 95       	ret

00000b50 <Debug_Buf_Get>:

uint8_t Debug_Buf_Get(uint16_t index){
  return Debug.Buf[index];
     b50:	fc 01       	movw	r30, r24
     b52:	ee 5e       	subi	r30, 0xEE	; 238
     b54:	fe 4f       	sbci	r31, 0xFE	; 254
     b56:	84 85       	ldd	r24, Z+12	; 0x0c
}
     b58:	08 95       	ret

00000b5a <Debug_Buf_Get_Index>:

uint16_t Debug_Buf_Get_Index(void){
  return Debug.BufIndex;
     b5a:	20 91 61 01 	lds	r18, 0x0161
     b5e:	30 91 62 01 	lds	r19, 0x0162
}
     b62:	c9 01       	movw	r24, r18
     b64:	08 95       	ret

00000b66 <Debug_Data_Available>:


/*******************Debug Data Functions Start****************/

uint8_t Debug_Data_Available(void){
  return Debug.RxPacket.DataAvailable;
     b66:	80 91 6a 01 	lds	r24, 0x016A
}
     b6a:	08 95       	ret

00000b6c <Debug_Data_Len_Get>:
uint8_t Debug_Buf_Get(uint16_t index){
  return Debug.Buf[index];
}

uint16_t Debug_Buf_Get_Index(void){
  return Debug.BufIndex;
     b6c:	20 91 61 01 	lds	r18, 0x0161
     b70:	30 91 62 01 	lds	r19, 0x0162
  return Debug.RxPacket.DataAvailable;
}

uint16_t Debug_Data_Len_Get(void){
  return Debug_Buf_Get_Index();
}
     b74:	c9 01       	movw	r24, r18
     b76:	08 95       	ret

00000b78 <Debug_Data_Calculated_CRC_Get>:

uint16_t Debug_Data_Calculated_CRC_Get(void){
  return Debug.RxPacket.CalculatedCRC;
     b78:	20 91 65 01 	lds	r18, 0x0165
     b7c:	30 91 66 01 	lds	r19, 0x0166
}
     b80:	c9 01       	movw	r24, r18
     b82:	08 95       	ret

00000b84 <Debug_Data_Received_CRC_Get>:

uint16_t Debug_Data_Received_CRC_Get(void){
  return Debug.RxPacket.ReceivedCRC;
     b84:	20 91 67 01 	lds	r18, 0x0167
     b88:	30 91 68 01 	lds	r19, 0x0168
}
     b8c:	c9 01       	movw	r24, r18
     b8e:	08 95       	ret

00000b90 <Debug_Data_CRC_Status_Get>:

uint8_t Debug_Data_CRC_Status_Get(void){
  return Debug.RxPacket.CRCStatus;
     b90:	80 91 69 01 	lds	r24, 0x0169
}
     b94:	08 95       	ret

00000b96 <Debug_Data_Read_Complete_Status>:

uint8_t Debug_Data_Read_Complete_Status(void){
  return Debug.RxPacket.DataReadComplete;
     b96:	80 91 6b 01 	lds	r24, 0x016B
}
     b9a:	08 95       	ret

00000b9c <Debug_Data_Clear_Available_Flag>:

void Debug_Data_Clear_Available_Flag(void){
  Debug.RxPacket.DataAvailable = DEBUG_FALSE;
     b9c:	10 92 6a 01 	sts	0x016A, r1
}
     ba0:	08 95       	ret

00000ba2 <Debug_Data_Clear_Read_Complete_Flag>:

void Debug_Data_Clear_Read_Complete_Flag(void){
  Debug.RxPacket.DataReadComplete = DEBUG_TRUE;
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	80 93 6b 01 	sts	0x016B, r24
}
     ba8:	08 95       	ret

00000baa <Debug_Data_Copy_Buf>:



void Debug_Data_Copy_Buf(uint8_t *buf){
     baa:	ac 01       	movw	r20, r24
     bac:	20 e0       	ldi	r18, 0x00	; 0
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	0a c0       	rjmp	.+20     	; 0xbc6 <Debug_Data_Copy_Buf+0x1c>
  }
  Debug.BufIndex = 0;
}

uint8_t Debug_Buf_Get(uint16_t index){
  return Debug.Buf[index];
     bb2:	f9 01       	movw	r30, r18
     bb4:	ee 5e       	subi	r30, 0xEE	; 238
     bb6:	fe 4f       	sbci	r31, 0xFE	; 254
     bb8:	84 85       	ldd	r24, Z+12	; 0x0c



void Debug_Data_Copy_Buf(uint8_t *buf){
  for(uint16_t i = 0; i < Debug_Data_Len_Get(); i++){
	buf[i] = Debug_Buf_Get(i);
     bba:	fa 01       	movw	r30, r20
     bbc:	e2 0f       	add	r30, r18
     bbe:	f3 1f       	adc	r31, r19
     bc0:	80 83       	st	Z, r24
}



void Debug_Data_Copy_Buf(uint8_t *buf){
  for(uint16_t i = 0; i < Debug_Data_Len_Get(); i++){
     bc2:	2f 5f       	subi	r18, 0xFF	; 255
     bc4:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t Debug_Buf_Get(uint16_t index){
  return Debug.Buf[index];
}

uint16_t Debug_Buf_Get_Index(void){
  return Debug.BufIndex;
     bc6:	80 91 61 01 	lds	r24, 0x0161
     bca:	90 91 62 01 	lds	r25, 0x0162
}



void Debug_Data_Copy_Buf(uint8_t *buf){
  for(uint16_t i = 0; i < Debug_Data_Len_Get(); i++){
     bce:	28 17       	cp	r18, r24
     bd0:	39 07       	cpc	r19, r25
     bd2:	78 f3       	brcs	.-34     	; 0xbb2 <Debug_Data_Copy_Buf+0x8>
	buf[i] = Debug_Buf_Get(i);
  }
}
     bd4:	08 95       	ret

00000bd6 <Debug_Data_Print_Buf>:


void Debug_Data_Print_Buf(void){
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	0c c0       	rjmp	.+24     	; 0xbf4 <Debug_Data_Print_Buf+0x1e>
  }
  Debug.BufIndex = 0;
}

uint8_t Debug_Buf_Get(uint16_t index){
  return Debug.Buf[index];
     bdc:	f9 01       	movw	r30, r18
     bde:	ee 5e       	subi	r30, 0xEE	; 238
     be0:	fe 4f       	sbci	r31, 0xFE	; 254
     be2:	84 85       	ldd	r24, Z+12	; 0x0c
  //Clear flag if necessary
}

void Debug_Tx_Byte(uint8_t val){
  //tx byte
  UDR0=val;
     be4:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
     be8:	80 91 c0 00 	lds	r24, 0x00C0
     bec:	85 ff       	sbrs	r24, 5
     bee:	fc cf       	rjmp	.-8      	; 0xbe8 <Debug_Data_Print_Buf+0x12>
  }
}


void Debug_Data_Print_Buf(void){
  for(uint16_t i = 0; i < Debug_Data_Len_Get(); i++){
     bf0:	2f 5f       	subi	r18, 0xFF	; 255
     bf2:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t Debug_Buf_Get(uint16_t index){
  return Debug.Buf[index];
}

uint16_t Debug_Buf_Get_Index(void){
  return Debug.BufIndex;
     bf4:	80 91 61 01 	lds	r24, 0x0161
     bf8:	90 91 62 01 	lds	r25, 0x0162
  }
}


void Debug_Data_Print_Buf(void){
  for(uint16_t i = 0; i < Debug_Data_Len_Get(); i++){
     bfc:	28 17       	cp	r18, r24
     bfe:	39 07       	cpc	r19, r25
     c00:	68 f3       	brcs	.-38     	; 0xbdc <Debug_Data_Print_Buf+0x6>
	Debug_Tx_Byte( Debug_Buf_Get(i) );
  }
  Debug_Tx_NL();
     c02:	0e 94 04 02 	call	0x408	; 0x408 <Debug_Tx_NL>
}
     c06:	08 95       	ret

00000c08 <Debug_Error_Code_Get>:


/******************Error Code Functions Start****************/

uint8_t Debug_Error_Code_Get(void){
  return Debug.Error;
     c08:	80 91 12 01 	lds	r24, 0x0112
}
     c0c:	08 95       	ret

00000c0e <Debug_Error_Code_Clear>:

void Debug_Error_Code_Clear(void){
  Debug.Error = 0;
     c0e:	10 92 12 01 	sts	0x0112, r1
}
     c12:	08 95       	ret

00000c14 <Debug_Sticky_Error_Code_Get>:

uint8_t Debug_Sticky_Error_Code_Get(void){
  uint8_t temp;
  temp = Debug.StickyError;
     c14:	80 91 13 01 	lds	r24, 0x0113
  Debug.StickyError = DEBUG_NULL;
     c18:	10 92 13 01 	sts	0x0113, r1
  return temp;
}
     c1c:	08 95       	ret

00000c1e <Debug_ISR_Handler>:

/***************Debug ISR Handler Functions Start************/

void Debug_ISR_Handler(void){
  Debug_Clear_Interrupt_Flag();
  Debug.LastRxByte = (uint8_t)Debug_Rx_Byte();
     c1e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <Debug_Rx_Byte>
     c22:	80 93 1d 01 	sts	0x011D, r24
  if(Debug.Error == 0x00){
     c26:	80 91 12 01 	lds	r24, 0x0112
     c2a:	88 23       	and	r24, r24
     c2c:	11 f5       	brne	.+68     	; 0xc72 <Debug_ISR_Handler+0x54>
    Debug.Buf[Debug.BufIndex] = Debug.LastRxByte;
     c2e:	e0 91 61 01 	lds	r30, 0x0161
     c32:	f0 91 62 01 	lds	r31, 0x0162
     c36:	80 91 1d 01 	lds	r24, 0x011D
     c3a:	ee 5e       	subi	r30, 0xEE	; 238
     c3c:	fe 4f       	sbci	r31, 0xFE	; 254
     c3e:	84 87       	std	Z+12, r24	; 0x0c
    Debug.BufIndex++;
     c40:	80 91 61 01 	lds	r24, 0x0161
     c44:	90 91 62 01 	lds	r25, 0x0162
     c48:	01 96       	adiw	r24, 0x01	; 1
     c4a:	90 93 62 01 	sts	0x0162, r25
     c4e:	80 93 61 01 	sts	0x0161, r24
    if(Debug.BufIndex >= Debug.BufSize){
     c52:	20 91 61 01 	lds	r18, 0x0161
     c56:	30 91 62 01 	lds	r19, 0x0162
     c5a:	80 91 5f 01 	lds	r24, 0x015F
     c5e:	90 91 60 01 	lds	r25, 0x0160
     c62:	28 17       	cp	r18, r24
     c64:	39 07       	cpc	r19, r25
     c66:	88 f0       	brcs	.+34     	; 0xc8a <Debug_ISR_Handler+0x6c>
      Debug.BufIndex = 0;
     c68:	10 92 62 01 	sts	0x0162, r1
     c6c:	10 92 61 01 	sts	0x0161, r1
     c70:	0c c0       	rjmp	.+24     	; 0xc8a <Debug_ISR_Handler+0x6c>
    }
  }
  else{
    Debug.LastRxByte = DEBUG_NULL;
     c72:	10 92 1d 01 	sts	0x011D, r1
	if(Debug.StickyError == DEBUG_NULL){
     c76:	80 91 13 01 	lds	r24, 0x0113
     c7a:	88 23       	and	r24, r24
     c7c:	21 f4       	brne	.+8      	; 0xc86 <Debug_ISR_Handler+0x68>
	  Debug.StickyError = Debug.Error;
     c7e:	80 91 12 01 	lds	r24, 0x0112
     c82:	80 93 13 01 	sts	0x0113, r24
	}
	Debug.Error = DEBUG_NULL;
     c86:	10 92 12 01 	sts	0x0112, r1
  }
  
  Debug_Timer_Value_Reset();
  if(Debug.Timer.Enabled == DEBUG_FALSE){
     c8a:	80 91 63 01 	lds	r24, 0x0163
     c8e:	88 23       	and	r24, r24
     c90:	19 f4       	brne	.+6      	; 0xc98 <Debug_ISR_Handler+0x7a>
	Debug_Timer_Enable();
	Debug.Timer.Enabled = DEBUG_TRUE;
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	80 93 63 01 	sts	0x0163, r24
     c98:	08 95       	ret

00000c9a <__vector_18>:


//add debug interrupt handler vector
//call Debug_ISR_Handler() inside ISR

ISR(USART_RX_vect){
     c9a:	1f 92       	push	r1
     c9c:	0f 92       	push	r0
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	0f 92       	push	r0
     ca2:	11 24       	eor	r1, r1
     ca4:	2f 93       	push	r18
     ca6:	3f 93       	push	r19
     ca8:	4f 93       	push	r20
     caa:	5f 93       	push	r21
     cac:	6f 93       	push	r22
     cae:	7f 93       	push	r23
     cb0:	8f 93       	push	r24
     cb2:	9f 93       	push	r25
     cb4:	af 93       	push	r26
     cb6:	bf 93       	push	r27
     cb8:	ef 93       	push	r30
     cba:	ff 93       	push	r31
  Debug_ISR_Handler();
     cbc:	0e 94 0f 06 	call	0xc1e	; 0xc1e <Debug_ISR_Handler>
}
     cc0:	ff 91       	pop	r31
     cc2:	ef 91       	pop	r30
     cc4:	bf 91       	pop	r27
     cc6:	af 91       	pop	r26
     cc8:	9f 91       	pop	r25
     cca:	8f 91       	pop	r24
     ccc:	7f 91       	pop	r23
     cce:	6f 91       	pop	r22
     cd0:	5f 91       	pop	r21
     cd2:	4f 91       	pop	r20
     cd4:	3f 91       	pop	r19
     cd6:	2f 91       	pop	r18
     cd8:	0f 90       	pop	r0
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	0f 90       	pop	r0
     cde:	1f 90       	pop	r1
     ce0:	18 95       	reti

00000ce2 <Debug_CRC_Calculate_Byte>:
#ifdef   DEBUG_CRC_XMODEM

uint16_t Debug_CRC_Calculate_Byte(uint16_t crc, uint8_t data){
  uint16_t temp = data;
  temp <<= 8;
  crc = crc ^ temp;
     ce2:	36 2f       	mov	r19, r22
     ce4:	20 e0       	ldi	r18, 0x00	; 0
     ce6:	28 27       	eor	r18, r24
     ce8:	39 27       	eor	r19, r25
     cea:	40 e0       	ldi	r20, 0x00	; 0
  for(uint8_t i = 0; i < 8; i++){
    if(crc & 0x8000){
	  temp   = crc;
	  temp <<= 0x01;
	  temp  ^= 0x1021;
     cec:	61 e2       	ldi	r22, 0x21	; 33
     cee:	70 e1       	ldi	r23, 0x10	; 16
     cf0:	c9 01       	movw	r24, r18
     cf2:	88 0f       	add	r24, r24
     cf4:	99 1f       	adc	r25, r25
uint16_t Debug_CRC_Calculate_Byte(uint16_t crc, uint8_t data){
  uint16_t temp = data;
  temp <<= 8;
  crc = crc ^ temp;
  for(uint8_t i = 0; i < 8; i++){
    if(crc & 0x8000){
     cf6:	37 ff       	sbrs	r19, 7
     cf8:	04 c0       	rjmp	.+8      	; 0xd02 <Debug_CRC_Calculate_Byte+0x20>
	  temp   = crc;
	  temp <<= 0x01;
	  temp  ^= 0x1021;
     cfa:	9c 01       	movw	r18, r24
     cfc:	26 27       	eor	r18, r22
     cfe:	37 27       	eor	r19, r23
     d00:	01 c0       	rjmp	.+2      	; 0xd04 <Debug_CRC_Calculate_Byte+0x22>
	  crc = temp;
	}
    else{
	  crc <<= 1;
     d02:	9c 01       	movw	r18, r24

uint16_t Debug_CRC_Calculate_Byte(uint16_t crc, uint8_t data){
  uint16_t temp = data;
  temp <<= 8;
  crc = crc ^ temp;
  for(uint8_t i = 0; i < 8; i++){
     d04:	4f 5f       	subi	r20, 0xFF	; 255
     d06:	48 30       	cpi	r20, 0x08	; 8
     d08:	99 f7       	brne	.-26     	; 0xcf0 <Debug_CRC_Calculate_Byte+0xe>
    else{
	  crc <<= 1;
	}
  }
  return crc;
}
     d0a:	c9 01       	movw	r24, r18
     d0c:	08 95       	ret

00000d0e <Debug_CRC_Calculate_Block>:

uint16_t Debug_CRC_Calculate_Block(volatile uint8_t *buf, uint8_t len){
     d0e:	0f 93       	push	r16
     d10:	1f 93       	push	r17
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
     d16:	06 2f       	mov	r16, r22
     d18:	ec 01       	movw	r28, r24
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	10 e0       	ldi	r17, 0x00	; 0
     d20:	06 c0       	rjmp	.+12     	; 0xd2e <Debug_CRC_Calculate_Block+0x20>
  uint16_t crc = 0;
  for(uint8_t i = 0; i < len; i++){
    crc = Debug_CRC_Calculate_Byte(crc,buf[i]);
     d22:	69 91       	ld	r22, Y+
     d24:	c9 01       	movw	r24, r18
     d26:	0e 94 71 06 	call	0xce2	; 0xce2 <Debug_CRC_Calculate_Byte>
     d2a:	9c 01       	movw	r18, r24
  return crc;
}

uint16_t Debug_CRC_Calculate_Block(volatile uint8_t *buf, uint8_t len){
  uint16_t crc = 0;
  for(uint8_t i = 0; i < len; i++){
     d2c:	1f 5f       	subi	r17, 0xFF	; 255
     d2e:	10 17       	cp	r17, r16
     d30:	c0 f3       	brcs	.-16     	; 0xd22 <Debug_CRC_Calculate_Block+0x14>
    crc = Debug_CRC_Calculate_Byte(crc,buf[i]);
  }
  return crc;
}
     d32:	c9 01       	movw	r24, r18
     d34:	df 91       	pop	r29
     d36:	cf 91       	pop	r28
     d38:	1f 91       	pop	r17
     d3a:	0f 91       	pop	r16
     d3c:	08 95       	ret

00000d3e <Debug_RX_Packet_CRC_Check>:
/*************Debug RX Packet Functions Start***************/

void Debug_RX_Packet_CRC_Check(void){
  uint8_t  temp = 0;
  uint16_t crc_calc = 0, crc_recv = 0;
  Debug.RxPacket.CRCStatus = DEBUG_FALSE;
     d3e:	10 92 69 01 	sts	0x0169, r1
uint8_t Debug_Buf_Get(uint16_t index){
  return Debug.Buf[index];
}

uint16_t Debug_Buf_Get_Index(void){
  return Debug.BufIndex;
     d42:	80 91 61 01 	lds	r24, 0x0161
     d46:	90 91 62 01 	lds	r25, 0x0162

void Debug_RX_Packet_CRC_Check(void){
  uint8_t  temp = 0;
  uint16_t crc_calc = 0, crc_recv = 0;
  Debug.RxPacket.CRCStatus = DEBUG_FALSE;
  if( Debug_Data_Len_Get() > 2){
     d4a:	03 97       	sbiw	r24, 0x03	; 3
     d4c:	90 f1       	brcs	.+100    	; 0xdb2 <Debug_RX_Packet_CRC_Check+0x74>
uint8_t Debug_Buf_Get(uint16_t index){
  return Debug.Buf[index];
}

uint16_t Debug_Buf_Get_Index(void){
  return Debug.BufIndex;
     d4e:	60 91 61 01 	lds	r22, 0x0161
     d52:	70 91 62 01 	lds	r23, 0x0162
  uint16_t crc_calc = 0, crc_recv = 0;
  Debug.RxPacket.CRCStatus = DEBUG_FALSE;
  if( Debug_Data_Len_Get() > 2){
    temp  = (uint8_t)Debug_Data_Len_Get();
	temp -= 2;
    crc_calc   =  Debug_CRC_Calculate_Block(Debug.Buf, temp);
     d56:	62 50       	subi	r22, 0x02	; 2
     d58:	8e e1       	ldi	r24, 0x1E	; 30
     d5a:	91 e0       	ldi	r25, 0x01	; 1
     d5c:	0e 94 87 06 	call	0xd0e	; 0xd0e <Debug_CRC_Calculate_Block>
uint8_t Debug_Buf_Get(uint16_t index){
  return Debug.Buf[index];
}

uint16_t Debug_Buf_Get_Index(void){
  return Debug.BufIndex;
     d60:	e0 91 61 01 	lds	r30, 0x0161
     d64:	f0 91 62 01 	lds	r31, 0x0162
  }
  Debug.BufIndex = 0;
}

uint8_t Debug_Buf_Get(uint16_t index){
  return Debug.Buf[index];
     d68:	e0 5f       	subi	r30, 0xF0	; 240
     d6a:	fe 4f       	sbci	r31, 0xFE	; 254
     d6c:	24 85       	ldd	r18, Z+12	; 0x0c
  if( Debug_Data_Len_Get() > 2){
    temp  = (uint8_t)Debug_Data_Len_Get();
	temp -= 2;
    crc_calc   =  Debug_CRC_Calculate_Block(Debug.Buf, temp);
    crc_recv   =  Debug_Buf_Get(Debug_Data_Len_Get() - 2);
    crc_recv <<= 8;
     d6e:	52 2f       	mov	r21, r18
     d70:	40 e0       	ldi	r20, 0x00	; 0
uint8_t Debug_Buf_Get(uint16_t index){
  return Debug.Buf[index];
}

uint16_t Debug_Buf_Get_Index(void){
  return Debug.BufIndex;
     d72:	e0 91 61 01 	lds	r30, 0x0161
     d76:	f0 91 62 01 	lds	r31, 0x0162
  }
  Debug.BufIndex = 0;
}

uint8_t Debug_Buf_Get(uint16_t index){
  return Debug.Buf[index];
     d7a:	ef 5e       	subi	r30, 0xEF	; 239
     d7c:	fe 4f       	sbci	r31, 0xFE	; 254
     d7e:	24 85       	ldd	r18, Z+12	; 0x0c
    temp  = (uint8_t)Debug_Data_Len_Get();
	temp -= 2;
    crc_calc   =  Debug_CRC_Calculate_Block(Debug.Buf, temp);
    crc_recv   =  Debug_Buf_Get(Debug_Data_Len_Get() - 2);
    crc_recv <<= 8;
    crc_recv  |= Debug_Buf_Get(Debug_Data_Len_Get() - 1);
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	42 2b       	or	r20, r18
     d84:	53 2b       	or	r21, r19
	Debug.RxPacket.CalculatedCRC = crc_calc;
     d86:	90 93 66 01 	sts	0x0166, r25
     d8a:	80 93 65 01 	sts	0x0165, r24
    Debug.RxPacket.ReceivedCRC = crc_recv;
     d8e:	50 93 68 01 	sts	0x0168, r21
     d92:	40 93 67 01 	sts	0x0167, r20
    if( Debug.RxPacket.CalculatedCRC == Debug.RxPacket.ReceivedCRC ){
     d96:	20 91 65 01 	lds	r18, 0x0165
     d9a:	30 91 66 01 	lds	r19, 0x0166
     d9e:	80 91 67 01 	lds	r24, 0x0167
     da2:	90 91 68 01 	lds	r25, 0x0168
     da6:	28 17       	cp	r18, r24
     da8:	39 07       	cpc	r19, r25
     daa:	19 f4       	brne	.+6      	; 0xdb2 <Debug_RX_Packet_CRC_Check+0x74>
      Debug.RxPacket.CRCStatus = DEBUG_TRUE;
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	80 93 69 01 	sts	0x0169, r24
     db2:	08 95       	ret

00000db4 <Debug_RX_Packet_Disassemble>:
  }
}

void Debug_RX_Packet_Disassemble(void){
  //Disassemble packet
}
     db4:	08 95       	ret

00000db6 <Debug_RX_Packet_Read_Complete>:


void Debug_RX_Packet_Read_Complete(void){
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	90 e0       	ldi	r25, 0x00	; 0

/*******************Debug Buffer Functions Start***************/

void Debug_Buf_Flush(void){
  for(uint8_t i = 0; i < DEBUG_BUFFER_SIZE; i++){
	Debug.Buf[i] = 0;
     dba:	fc 01       	movw	r30, r24
     dbc:	ee 5e       	subi	r30, 0xEE	; 238
     dbe:	fe 4f       	sbci	r31, 0xFE	; 254
     dc0:	14 86       	std	Z+12, r1	; 0x0c
     dc2:	01 96       	adiw	r24, 0x01	; 1


/*******************Debug Buffer Functions Start***************/

void Debug_Buf_Flush(void){
  for(uint8_t i = 0; i < DEBUG_BUFFER_SIZE; i++){
     dc4:	80 34       	cpi	r24, 0x40	; 64
     dc6:	91 05       	cpc	r25, r1
     dc8:	c1 f7       	brne	.-16     	; 0xdba <Debug_RX_Packet_Read_Complete+0x4>
	Debug.Buf[i] = 0;
  }
  Debug.BufIndex = 0;
     dca:	10 92 62 01 	sts	0x0162, r1
     dce:	10 92 61 01 	sts	0x0161, r1
uint8_t Debug_Data_Read_Complete_Status(void){
  return Debug.RxPacket.DataReadComplete;
}

void Debug_Data_Clear_Available_Flag(void){
  Debug.RxPacket.DataAvailable = DEBUG_FALSE;
     dd2:	10 92 6a 01 	sts	0x016A, r1
}

void Debug_Data_Clear_Read_Complete_Flag(void){
  Debug.RxPacket.DataReadComplete = DEBUG_TRUE;
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	80 93 6b 01 	sts	0x016B, r24
uint8_t Debug_Error_Code_Get(void){
  return Debug.Error;
}

void Debug_Error_Code_Clear(void){
  Debug.Error = 0;
     ddc:	10 92 12 01 	sts	0x0112, r1
void Debug_RX_Packet_Read_Complete(void){
  Debug_Buf_Flush();
  Debug_Data_Clear_Available_Flag();
  Debug_Data_Clear_Read_Complete_Flag();
  Debug_Error_Code_Clear();
}
     de0:	08 95       	ret

00000de2 <Debug_Timer_ISR_Handler>:
  
}

void Debug_Timer_ISR_Handler(void){
  Debug_Timer_Clear_Interrupt_Flag();
  if(Debug.Timer.Enabled == DEBUG_TRUE){
     de2:	80 91 63 01 	lds	r24, 0x0163
     de6:	81 30       	cpi	r24, 0x01	; 1
     de8:	11 f4       	brne	.+4      	; 0xdee <Debug_Timer_ISR_Handler+0xc>
    Debug_Timer_Disable();
	Debug.Timer.Enabled = DEBUG_FALSE;
     dea:	10 92 63 01 	sts	0x0163, r1
uint8_t Debug_Buf_Get(uint16_t index){
  return Debug.Buf[index];
}

uint16_t Debug_Buf_Get_Index(void){
  return Debug.BufIndex;
     dee:	80 91 61 01 	lds	r24, 0x0161
     df2:	90 91 62 01 	lds	r25, 0x0162
  if(Debug.Timer.Enabled == DEBUG_TRUE){
    Debug_Timer_Disable();
	Debug.Timer.Enabled = DEBUG_FALSE;
  }
  
  if(Debug_Buf_Get_Index() != DEBUG_NULL){
     df6:	89 2b       	or	r24, r25
     df8:	f1 f0       	breq	.+60     	; 0xe36 <Debug_Timer_ISR_Handler+0x54>
	if(Debug.RxPacket.DataReadComplete == DEBUG_FALSE){
     dfa:	80 91 6b 01 	lds	r24, 0x016B
     dfe:	88 23       	and	r24, r24
     e00:	69 f4       	brne	.+26     	; 0xe1c <Debug_Timer_ISR_Handler+0x3a>
	  Debug.Error = DEBUG_RX_ERR_READ_INCOMPLETE;
     e02:	80 e1       	ldi	r24, 0x10	; 16
     e04:	80 93 12 01 	sts	0x0112, r24
	  if(Debug.StickyError == DEBUG_NULL){
     e08:	80 91 13 01 	lds	r24, 0x0113
     e0c:	88 23       	and	r24, r24
     e0e:	21 f4       	brne	.+8      	; 0xe18 <Debug_Timer_ISR_Handler+0x36>
	    Debug.StickyError = Debug.Error;
     e10:	80 91 12 01 	lds	r24, 0x0112
     e14:	80 93 13 01 	sts	0x0113, r24
	  }
	  Debug.Error = DEBUG_NULL;
     e18:	10 92 12 01 	sts	0x0112, r1
	}
	
    Debug_RX_Packet_CRC_Check();
     e1c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <Debug_RX_Packet_CRC_Check>
	
    #ifdef DEBUG_CRC_ENABLE
	if(Debug.RxPacket.CRCStatus == DEBUG_TRUE){
     e20:	80 91 69 01 	lds	r24, 0x0169
     e24:	81 30       	cpi	r24, 0x01	; 1
     e26:	29 f4       	brne	.+10     	; 0xe32 <Debug_Timer_ISR_Handler+0x50>
	  Debug.RxPacket.DataAvailable = DEBUG_TRUE;
     e28:	80 93 6a 01 	sts	0x016A, r24
	  Debug.RxPacket.DataReadComplete = DEBUG_FALSE;
     e2c:	10 92 6b 01 	sts	0x016B, r1
     e30:	08 95       	ret
	  Debug_RX_Packet_Disassemble();
	}
	else{
	  Debug_RX_Packet_Read_Complete();
     e32:	0e 94 db 06 	call	0xdb6	; 0xdb6 <Debug_RX_Packet_Read_Complete>
     e36:	08 95       	ret

00000e38 <Debug_Init>:



/*****************Debug Init Functions Start****************/

void Debug_Init(uint32_t baud){
     e38:	ef 92       	push	r14
     e3a:	ff 92       	push	r15
     e3c:	0f 93       	push	r16
     e3e:	1f 93       	push	r17
     e40:	7b 01       	movw	r14, r22
     e42:	8c 01       	movw	r16, r24
  Debug_Struct_Init();
     e44:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Debug_Struct_Init>
    Debug.Buf[i] = DEBUG_NULL;
  }
}

void Debug_RX_Packet_Struct_Init(void){
  Debug.RxPacket.CalculatedCRC    = DEBUG_NULL;
     e48:	10 92 66 01 	sts	0x0166, r1
     e4c:	10 92 65 01 	sts	0x0165, r1
  Debug.RxPacket.ReceivedCRC      = DEBUG_NULL;
     e50:	10 92 68 01 	sts	0x0168, r1
     e54:	10 92 67 01 	sts	0x0167, r1
  Debug.RxPacket.CRCStatus        = DEBUG_FALSE;
     e58:	10 92 69 01 	sts	0x0169, r1
  Debug.RxPacket.DataAvailable    = DEBUG_FALSE;
     e5c:	10 92 6a 01 	sts	0x016A, r1
  Debug.RxPacket.DataReadComplete = DEBUG_TRUE;
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	80 93 6b 01 	sts	0x016B, r24


/********************Debug Timer Functions Start*****************/

void Debug_Timer_Struct_Init(void){
  Debug.Timer.Enabled  = DEBUG_FALSE;
     e66:	10 92 63 01 	sts	0x0163, r1
  Debug.Timer.ResetVal = DEBUG_NULL;
     e6a:	10 92 64 01 	sts	0x0164, r1
void Debug_Config_Clock(void){
  //add clock config
  #ifdef UART_DOUBLE_SPEED
  UCSR0A|=(1<<U2X0);  
  #else
  UCSR0A&=~(1<<U2X0);  
     e6e:	80 91 c0 00 	lds	r24, 0x00C0
     e72:	8d 7f       	andi	r24, 0xFD	; 253
     e74:	80 93 c0 00 	sts	0x00C0, r24
  Debug_RX_Packet_Struct_Init();
  Debug_Timer_Struct_Init();
  
  Debug_Config_GPIO();
  Debug_Config_Clock();
  Debug_Config_BAUD_Rate(baud);
     e78:	c8 01       	movw	r24, r16
     e7a:	b7 01       	movw	r22, r14
     e7c:	0e 94 98 01 	call	0x330	; 0x330 <Debug_Config_BAUD_Rate>
}


void Debug_Config_Tx(void){
  //add tx config
  UCSR0B|=(1<<TXEN0);
     e80:	80 91 c1 00 	lds	r24, 0x00C1
     e84:	88 60       	ori	r24, 0x08	; 8
     e86:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C|=(1<<UCSZ00)| (1<<UCSZ01);
     e8a:	80 91 c2 00 	lds	r24, 0x00C2
     e8e:	86 60       	ori	r24, 0x06	; 6
     e90:	80 93 c2 00 	sts	0x00C2, r24
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	90 e0       	ldi	r25, 0x00	; 0

/*******************Debug Buffer Functions Start***************/

void Debug_Buf_Flush(void){
  for(uint8_t i = 0; i < DEBUG_BUFFER_SIZE; i++){
	Debug.Buf[i] = 0;
     e98:	fc 01       	movw	r30, r24
     e9a:	ee 5e       	subi	r30, 0xEE	; 238
     e9c:	fe 4f       	sbci	r31, 0xFE	; 254
     e9e:	14 86       	std	Z+12, r1	; 0x0c
     ea0:	01 96       	adiw	r24, 0x01	; 1


/*******************Debug Buffer Functions Start***************/

void Debug_Buf_Flush(void){
  for(uint8_t i = 0; i < DEBUG_BUFFER_SIZE; i++){
     ea2:	80 34       	cpi	r24, 0x40	; 64
     ea4:	91 05       	cpc	r25, r1
     ea6:	c1 f7       	brne	.-16     	; 0xe98 <Debug_Init+0x60>
	Debug.Buf[i] = 0;
  }
  Debug.BufIndex = 0;
     ea8:	10 92 62 01 	sts	0x0162, r1
     eac:	10 92 61 01 	sts	0x0161, r1
  
  Debug_Timer_Init();
  Debug_Timer_Value_Reset();
  Debug_Timer_Enable();
  Debug_Buf_Flush();
}
     eb0:	1f 91       	pop	r17
     eb2:	0f 91       	pop	r16
     eb4:	ff 90       	pop	r15
     eb6:	ef 90       	pop	r14
     eb8:	08 95       	ret

00000eba <GPIO_Struct_Init>:
#include "gpio.h"


void GPIO_Struct_Init(void){
    
}
     eba:	08 95       	ret

00000ebc <GPIO_Reg_Init>:

void GPIO_Reg_Init(void){
    GPIO0_DDR  |=  (1<<GPIO0_bp);
     ebc:	54 9a       	sbi	0x0a, 4	; 10
    GPIO0_PORT &=~ (1<<GPIO0_bp);
     ebe:	5c 98       	cbi	0x0b, 4	; 11
  
    GPIO1_DDR  |=  (1<<GPIO1_bp);
     ec0:	3d 9a       	sbi	0x07, 5	; 7
    GPIO1_PORT &=~ (1<<GPIO1_bp);
     ec2:	45 98       	cbi	0x08, 5	; 8
  
    GPIO2_DDR  |=  (1<<GPIO2_bp);
     ec4:	3c 9a       	sbi	0x07, 4	; 7
    GPIO2_PORT &=~ (1<<GPIO2_bp);
     ec6:	44 98       	cbi	0x08, 4	; 8
  
    GPIO3_DDR  |=  (1<<GPIO3_bp);
     ec8:	3b 9a       	sbi	0x07, 3	; 7
    GPIO3_PORT &=~ (1<<GPIO3_bp);
     eca:	43 98       	cbi	0x08, 3	; 8
  
    GPIO4_DDR  |=  (1<<GPIO4_bp);
     ecc:	3a 9a       	sbi	0x07, 2	; 7
    GPIO4_PORT &=~ (1<<GPIO4_bp);
     ece:	42 98       	cbi	0x08, 2	; 8
}
     ed0:	08 95       	ret

00000ed2 <GPIO0_Set>:




void GPIO0_Set(uint8_t val){
    if(val == 0){
     ed2:	88 23       	and	r24, r24
     ed4:	11 f4       	brne	.+4      	; 0xeda <GPIO0_Set+0x8>
        GPIO0_PORT &=~ (1<<GPIO0_bp);
     ed6:	5c 98       	cbi	0x0b, 4	; 11
     ed8:	08 95       	ret
    }
    else{
        GPIO0_PORT |=  (1<<GPIO0_bp);
     eda:	5c 9a       	sbi	0x0b, 4	; 11
     edc:	08 95       	ret

00000ede <GPIO0_Toggle>:
    }
}

void GPIO0_Toggle(void){
    if(GPIO0_PORT & (1<<GPIO0_bp)){
     ede:	5c 9b       	sbis	0x0b, 4	; 11
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <GPIO0_Toggle+0x8>
        GPIO0_PORT &=~ (1<<GPIO0_bp);
     ee2:	5c 98       	cbi	0x0b, 4	; 11
     ee4:	08 95       	ret
    }
    else{
        GPIO0_PORT |=  (1<<GPIO0_bp);
     ee6:	5c 9a       	sbi	0x0b, 4	; 11
     ee8:	08 95       	ret

00000eea <GPIO1_Set>:




void GPIO1_Set(uint8_t val){
    if(val == 0){
     eea:	88 23       	and	r24, r24
     eec:	11 f4       	brne	.+4      	; 0xef2 <GPIO1_Set+0x8>
        GPIO1_PORT &=~ (1<<GPIO1_bp);
     eee:	45 98       	cbi	0x08, 5	; 8
     ef0:	08 95       	ret
    }
    else{
        GPIO1_PORT |=  (1<<GPIO1_bp);
     ef2:	45 9a       	sbi	0x08, 5	; 8
     ef4:	08 95       	ret

00000ef6 <GPIO1_Toggle>:
    }
}

void GPIO1_Toggle(void){
    if(GPIO1_PORT & (1<<GPIO1_bp)){
     ef6:	45 9b       	sbis	0x08, 5	; 8
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <GPIO1_Toggle+0x8>
        GPIO1_PORT &=~ (1<<GPIO1_bp);
     efa:	45 98       	cbi	0x08, 5	; 8
     efc:	08 95       	ret
    }
    else{
        GPIO1_PORT |=  (1<<GPIO1_bp);
     efe:	45 9a       	sbi	0x08, 5	; 8
     f00:	08 95       	ret

00000f02 <GPIO2_Set>:




void GPIO2_Set(uint8_t val){
    if(val == 0){
     f02:	88 23       	and	r24, r24
     f04:	11 f4       	brne	.+4      	; 0xf0a <GPIO2_Set+0x8>
        GPIO2_PORT &=~ (1<<GPIO2_bp);
     f06:	44 98       	cbi	0x08, 4	; 8
     f08:	08 95       	ret
    }
    else{
        GPIO2_PORT |=  (1<<GPIO2_bp);
     f0a:	44 9a       	sbi	0x08, 4	; 8
     f0c:	08 95       	ret

00000f0e <GPIO2_Toggle>:
    }
}

void GPIO2_Toggle(void){
    if(GPIO2_PORT & (1<<GPIO2_bp)){
     f0e:	44 9b       	sbis	0x08, 4	; 8
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <GPIO2_Toggle+0x8>
        GPIO2_PORT &=~ (1<<GPIO2_bp);
     f12:	44 98       	cbi	0x08, 4	; 8
     f14:	08 95       	ret
    }
    else{
        GPIO2_PORT |=  (1<<GPIO2_bp);
     f16:	44 9a       	sbi	0x08, 4	; 8
     f18:	08 95       	ret

00000f1a <GPIO3_Set>:




void GPIO3_Set(uint8_t val){
    if(val == 0){
     f1a:	88 23       	and	r24, r24
     f1c:	11 f4       	brne	.+4      	; 0xf22 <GPIO3_Set+0x8>
        GPIO3_PORT &=~ (1<<GPIO3_bp);
     f1e:	43 98       	cbi	0x08, 3	; 8
     f20:	08 95       	ret
    }
    else{
        GPIO3_PORT |=  (1<<GPIO3_bp);
     f22:	43 9a       	sbi	0x08, 3	; 8
     f24:	08 95       	ret

00000f26 <GPIO3_Toggle>:
    }
}

void GPIO3_Toggle(void){
    if(GPIO3_PORT & (1<<GPIO3_bp)){
     f26:	43 9b       	sbis	0x08, 3	; 8
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <GPIO3_Toggle+0x8>
        GPIO3_PORT &=~ (1<<GPIO3_bp);
     f2a:	43 98       	cbi	0x08, 3	; 8
     f2c:	08 95       	ret
    }
    else{
        GPIO3_PORT |=  (1<<GPIO3_bp);
     f2e:	43 9a       	sbi	0x08, 3	; 8
     f30:	08 95       	ret

00000f32 <GPIO4_Set>:




void GPIO4_Set(uint8_t val){
    if(val == 0){
     f32:	88 23       	and	r24, r24
     f34:	11 f4       	brne	.+4      	; 0xf3a <GPIO4_Set+0x8>
        GPIO4_PORT &=~ (1<<GPIO4_bp);
     f36:	42 98       	cbi	0x08, 2	; 8
     f38:	08 95       	ret
    }
    else{
        GPIO4_PORT |=  (1<<GPIO4_bp);
     f3a:	42 9a       	sbi	0x08, 2	; 8
     f3c:	08 95       	ret

00000f3e <GPIO4_Toggle>:
    }
}

void GPIO4_Toggle(void){
    if(GPIO4_PORT & (1<<GPIO4_bp)){
     f3e:	42 9b       	sbis	0x08, 2	; 8
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <GPIO4_Toggle+0x8>
        GPIO4_PORT &=~ (1<<GPIO4_bp);
     f42:	42 98       	cbi	0x08, 2	; 8
     f44:	08 95       	ret
    }
    else{
        GPIO4_PORT |=  (1<<GPIO4_bp);
     f46:	42 9a       	sbi	0x08, 2	; 8
     f48:	08 95       	ret

00000f4a <GPIO_Init>:



void GPIO_Init(void){
    GPIO_Struct_Init();
	GPIO_Reg_Init();
     f4a:	0e 94 5e 07 	call	0xebc	; 0xebc <GPIO_Reg_Init>
}
     f4e:	08 95       	ret

00000f50 <Context_Save>:
#include <util/delay.h>
#include "context.h"


void Context_Save(void){
    asm volatile (
     f50:	0f 92       	push	r0
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	0f 92       	push	r0
     f56:	1f 92       	push	r1
     f58:	11 24       	eor	r1, r1
     f5a:	2f 92       	push	r2
     f5c:	3f 92       	push	r3
     f5e:	4f 92       	push	r4
     f60:	5f 92       	push	r5
     f62:	6f 92       	push	r6
     f64:	7f 92       	push	r7
     f66:	8f 92       	push	r8
     f68:	9f 92       	push	r9
     f6a:	af 92       	push	r10
     f6c:	bf 92       	push	r11
     f6e:	cf 92       	push	r12
     f70:	df 92       	push	r13
     f72:	ef 92       	push	r14
     f74:	ff 92       	push	r15
     f76:	0f 93       	push	r16
     f78:	1f 93       	push	r17
     f7a:	2f 93       	push	r18
     f7c:	3f 93       	push	r19
     f7e:	4f 93       	push	r20
     f80:	5f 93       	push	r21
     f82:	6f 93       	push	r22
     f84:	7f 93       	push	r23
     f86:	8f 93       	push	r24
     f88:	9f 93       	push	r25
     f8a:	af 93       	push	r26
     f8c:	bf 93       	push	r27
     f8e:	cf 93       	push	r28
     f90:	df 93       	push	r29
     f92:	ef 93       	push	r30
     f94:	ff 93       	push	r31
        "push r28            \n\t"
        "push r29            \n\t"
        "push r30            \n\t"
        "push r31            \n\t"
    );
}
     f96:	08 95       	ret

00000f98 <Context_Restore>:



void Context_Restore(void){
    asm volatile (
     f98:	ff 91       	pop	r31
     f9a:	ef 91       	pop	r30
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	bf 91       	pop	r27
     fa2:	af 91       	pop	r26
     fa4:	9f 91       	pop	r25
     fa6:	8f 91       	pop	r24
     fa8:	7f 91       	pop	r23
     faa:	6f 91       	pop	r22
     fac:	5f 91       	pop	r21
     fae:	4f 91       	pop	r20
     fb0:	3f 91       	pop	r19
     fb2:	2f 91       	pop	r18
     fb4:	1f 91       	pop	r17
     fb6:	0f 91       	pop	r16
     fb8:	ff 90       	pop	r15
     fba:	ef 90       	pop	r14
     fbc:	df 90       	pop	r13
     fbe:	cf 90       	pop	r12
     fc0:	bf 90       	pop	r11
     fc2:	af 90       	pop	r10
     fc4:	9f 90       	pop	r9
     fc6:	8f 90       	pop	r8
     fc8:	7f 90       	pop	r7
     fca:	6f 90       	pop	r6
     fcc:	5f 90       	pop	r5
     fce:	4f 90       	pop	r4
     fd0:	3f 90       	pop	r3
     fd2:	2f 90       	pop	r2
     fd4:	1f 90       	pop	r1
     fd6:	0f 90       	pop	r0
     fd8:	0f be       	out	0x3f, r0	; 63
     fda:	0f 90       	pop	r0
     fdc:	18 95       	reti
        "pop  r0             \n\t"
        "out  __SREG__, r0   \n\t"
        "pop  r0             \n\t"
        "reti                \n\t"
	);
}
     fde:	08 95       	ret

00000fe0 <__lshrdi3>:
     fe0:	ef 92       	push	r14
     fe2:	ff 92       	push	r15
     fe4:	0f 93       	push	r16
     fe6:	df 93       	push	r29
     fe8:	cf 93       	push	r28
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	60 97       	sbiw	r28, 0x10	; 16
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	f8 94       	cli
     ff4:	de bf       	out	0x3e, r29	; 62
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	cd bf       	out	0x3d, r28	; 61
     ffa:	a8 2f       	mov	r26, r24
     ffc:	00 23       	and	r16, r16
     ffe:	09 f4       	brne	.+2      	; 0x1002 <__lshrdi3+0x22>
    1000:	61 c0       	rjmp	.+194    	; 0x10c4 <__lshrdi3+0xe4>
    1002:	7e 01       	movw	r14, r28
    1004:	08 94       	sec
    1006:	e1 1c       	adc	r14, r1
    1008:	f1 1c       	adc	r15, r1
    100a:	88 e0       	ldi	r24, 0x08	; 8
    100c:	f7 01       	movw	r30, r14
    100e:	11 92       	st	Z+, r1
    1010:	8a 95       	dec	r24
    1012:	e9 f7       	brne	.-6      	; 0x100e <__lshrdi3+0x2e>
    1014:	29 83       	std	Y+1, r18	; 0x01
    1016:	3a 83       	std	Y+2, r19	; 0x02
    1018:	4b 83       	std	Y+3, r20	; 0x03
    101a:	5c 83       	std	Y+4, r21	; 0x04
    101c:	6d 83       	std	Y+5, r22	; 0x05
    101e:	7e 83       	std	Y+6, r23	; 0x06
    1020:	af 83       	std	Y+7, r26	; 0x07
    1022:	98 87       	std	Y+8, r25	; 0x08
    1024:	80 e2       	ldi	r24, 0x20	; 32
    1026:	80 1b       	sub	r24, r16
    1028:	e8 2f       	mov	r30, r24
    102a:	ff 27       	eor	r31, r31
    102c:	e7 fd       	sbrc	r30, 7
    102e:	f0 95       	com	r31
    1030:	4d 81       	ldd	r20, Y+5	; 0x05
    1032:	5e 81       	ldd	r21, Y+6	; 0x06
    1034:	6f 81       	ldd	r22, Y+7	; 0x07
    1036:	78 85       	ldd	r23, Y+8	; 0x08
    1038:	18 16       	cp	r1, r24
    103a:	84 f0       	brlt	.+32     	; 0x105c <__lshrdi3+0x7c>
    103c:	1d 86       	std	Y+13, r1	; 0x0d
    103e:	1e 86       	std	Y+14, r1	; 0x0e
    1040:	1f 86       	std	Y+15, r1	; 0x0f
    1042:	18 8a       	std	Y+16, r1	; 0x10
    1044:	88 27       	eor	r24, r24
    1046:	99 27       	eor	r25, r25
    1048:	8e 1b       	sub	r24, r30
    104a:	9f 0b       	sbc	r25, r31
    104c:	04 c0       	rjmp	.+8      	; 0x1056 <__lshrdi3+0x76>
    104e:	76 95       	lsr	r23
    1050:	67 95       	ror	r22
    1052:	57 95       	ror	r21
    1054:	47 95       	ror	r20
    1056:	8a 95       	dec	r24
    1058:	d2 f7       	brpl	.-12     	; 0x104e <__lshrdi3+0x6e>
    105a:	28 c0       	rjmp	.+80     	; 0x10ac <__lshrdi3+0xcc>
    105c:	20 2f       	mov	r18, r16
    105e:	33 27       	eor	r19, r19
    1060:	27 fd       	sbrc	r18, 7
    1062:	30 95       	com	r19
    1064:	db 01       	movw	r26, r22
    1066:	ca 01       	movw	r24, r20
    1068:	02 2e       	mov	r0, r18
    106a:	04 c0       	rjmp	.+8      	; 0x1074 <__lshrdi3+0x94>
    106c:	b6 95       	lsr	r27
    106e:	a7 95       	ror	r26
    1070:	97 95       	ror	r25
    1072:	87 95       	ror	r24
    1074:	0a 94       	dec	r0
    1076:	d2 f7       	brpl	.-12     	; 0x106c <__lshrdi3+0x8c>
    1078:	8d 87       	std	Y+13, r24	; 0x0d
    107a:	9e 87       	std	Y+14, r25	; 0x0e
    107c:	af 87       	std	Y+15, r26	; 0x0f
    107e:	b8 8b       	std	Y+16, r27	; 0x10
    1080:	04 c0       	rjmp	.+8      	; 0x108a <__lshrdi3+0xaa>
    1082:	44 0f       	add	r20, r20
    1084:	55 1f       	adc	r21, r21
    1086:	66 1f       	adc	r22, r22
    1088:	77 1f       	adc	r23, r23
    108a:	ea 95       	dec	r30
    108c:	d2 f7       	brpl	.-12     	; 0x1082 <__lshrdi3+0xa2>
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	9a 81       	ldd	r25, Y+2	; 0x02
    1092:	ab 81       	ldd	r26, Y+3	; 0x03
    1094:	bc 81       	ldd	r27, Y+4	; 0x04
    1096:	04 c0       	rjmp	.+8      	; 0x10a0 <__lshrdi3+0xc0>
    1098:	b6 95       	lsr	r27
    109a:	a7 95       	ror	r26
    109c:	97 95       	ror	r25
    109e:	87 95       	ror	r24
    10a0:	2a 95       	dec	r18
    10a2:	d2 f7       	brpl	.-12     	; 0x1098 <__lshrdi3+0xb8>
    10a4:	48 2b       	or	r20, r24
    10a6:	59 2b       	or	r21, r25
    10a8:	6a 2b       	or	r22, r26
    10aa:	7b 2b       	or	r23, r27
    10ac:	49 87       	std	Y+9, r20	; 0x09
    10ae:	5a 87       	std	Y+10, r21	; 0x0a
    10b0:	6b 87       	std	Y+11, r22	; 0x0b
    10b2:	7c 87       	std	Y+12, r23	; 0x0c
    10b4:	29 85       	ldd	r18, Y+9	; 0x09
    10b6:	3a 85       	ldd	r19, Y+10	; 0x0a
    10b8:	4b 85       	ldd	r20, Y+11	; 0x0b
    10ba:	5c 85       	ldd	r21, Y+12	; 0x0c
    10bc:	6d 85       	ldd	r22, Y+13	; 0x0d
    10be:	7e 85       	ldd	r23, Y+14	; 0x0e
    10c0:	af 85       	ldd	r26, Y+15	; 0x0f
    10c2:	98 89       	ldd	r25, Y+16	; 0x10
    10c4:	8a 2f       	mov	r24, r26
    10c6:	60 96       	adiw	r28, 0x10	; 16
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	f8 94       	cli
    10cc:	de bf       	out	0x3e, r29	; 62
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	cd bf       	out	0x3d, r28	; 61
    10d2:	cf 91       	pop	r28
    10d4:	df 91       	pop	r29
    10d6:	0f 91       	pop	r16
    10d8:	ff 90       	pop	r15
    10da:	ef 90       	pop	r14
    10dc:	08 95       	ret

000010de <__udivmodsi4>:
    10de:	a1 e2       	ldi	r26, 0x21	; 33
    10e0:	1a 2e       	mov	r1, r26
    10e2:	aa 1b       	sub	r26, r26
    10e4:	bb 1b       	sub	r27, r27
    10e6:	fd 01       	movw	r30, r26
    10e8:	0d c0       	rjmp	.+26     	; 0x1104 <__udivmodsi4_ep>

000010ea <__udivmodsi4_loop>:
    10ea:	aa 1f       	adc	r26, r26
    10ec:	bb 1f       	adc	r27, r27
    10ee:	ee 1f       	adc	r30, r30
    10f0:	ff 1f       	adc	r31, r31
    10f2:	a2 17       	cp	r26, r18
    10f4:	b3 07       	cpc	r27, r19
    10f6:	e4 07       	cpc	r30, r20
    10f8:	f5 07       	cpc	r31, r21
    10fa:	20 f0       	brcs	.+8      	; 0x1104 <__udivmodsi4_ep>
    10fc:	a2 1b       	sub	r26, r18
    10fe:	b3 0b       	sbc	r27, r19
    1100:	e4 0b       	sbc	r30, r20
    1102:	f5 0b       	sbc	r31, r21

00001104 <__udivmodsi4_ep>:
    1104:	66 1f       	adc	r22, r22
    1106:	77 1f       	adc	r23, r23
    1108:	88 1f       	adc	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	1a 94       	dec	r1
    110e:	69 f7       	brne	.-38     	; 0x10ea <__udivmodsi4_loop>
    1110:	60 95       	com	r22
    1112:	70 95       	com	r23
    1114:	80 95       	com	r24
    1116:	90 95       	com	r25
    1118:	9b 01       	movw	r18, r22
    111a:	ac 01       	movw	r20, r24
    111c:	bd 01       	movw	r22, r26
    111e:	cf 01       	movw	r24, r30
    1120:	08 95       	ret

00001122 <__divmodsi4>:
    1122:	97 fb       	bst	r25, 7
    1124:	09 2e       	mov	r0, r25
    1126:	05 26       	eor	r0, r21
    1128:	0e d0       	rcall	.+28     	; 0x1146 <__divmodsi4_neg1>
    112a:	57 fd       	sbrc	r21, 7
    112c:	04 d0       	rcall	.+8      	; 0x1136 <__divmodsi4_neg2>
    112e:	d7 df       	rcall	.-82     	; 0x10de <__udivmodsi4>
    1130:	0a d0       	rcall	.+20     	; 0x1146 <__divmodsi4_neg1>
    1132:	00 1c       	adc	r0, r0
    1134:	38 f4       	brcc	.+14     	; 0x1144 <__divmodsi4_exit>

00001136 <__divmodsi4_neg2>:
    1136:	50 95       	com	r21
    1138:	40 95       	com	r20
    113a:	30 95       	com	r19
    113c:	21 95       	neg	r18
    113e:	3f 4f       	sbci	r19, 0xFF	; 255
    1140:	4f 4f       	sbci	r20, 0xFF	; 255
    1142:	5f 4f       	sbci	r21, 0xFF	; 255

00001144 <__divmodsi4_exit>:
    1144:	08 95       	ret

00001146 <__divmodsi4_neg1>:
    1146:	f6 f7       	brtc	.-4      	; 0x1144 <__divmodsi4_exit>
    1148:	90 95       	com	r25
    114a:	80 95       	com	r24
    114c:	70 95       	com	r23
    114e:	61 95       	neg	r22
    1150:	7f 4f       	sbci	r23, 0xFF	; 255
    1152:	8f 4f       	sbci	r24, 0xFF	; 255
    1154:	9f 4f       	sbci	r25, 0xFF	; 255
    1156:	08 95       	ret

00001158 <_exit>:
    1158:	f8 94       	cli

0000115a <__stop_program>:
    115a:	ff cf       	rjmp	.-2      	; 0x115a <__stop_program>
