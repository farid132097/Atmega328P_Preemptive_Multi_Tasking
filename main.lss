
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d6e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000698  00800100  00800100  00000de2  2**0
                  ALLOC
  2 .stab         00000c84  00000000  00000000  00000de4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000006c  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00001ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000bd  00000000  00000000  00001b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001a9  00000000  00000000  00001bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000ba  00000000  00000000  00001d7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000452  00000000  00000000  00001e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00002288  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000116  00000000  00000000  00002348  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 1c 02 	jmp	0x438	; 0x438 <__vector_16>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	00 00       	nop
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 00       	nop
  76:	00 00       	nop
  78:	00 00       	nop
  7a:	00 00       	nop
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 00       	nop
  82:	00 00       	nop
  84:	00 00       	nop
  86:	00 00       	nop
  88:	d7 c1       	rjmp	.+942    	; 0x438 <__vector_16>

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61
  96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  9a:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:


    
int main(void) {
    
	Kernel_Init();
  a2:	0e 94 62 04 	call	0x8c4	; 0x8c4 <Kernel_Init>

	Kernel_Task_Create(Tasks_Task1,  1);
  a6:	83 ef       	ldi	r24, 0xF3	; 243
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	61 e0       	ldi	r22, 0x01	; 1
  ac:	0e 94 56 03 	call	0x6ac	; 0x6ac <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task2,  0);
  b0:	82 ec       	ldi	r24, 0xC2	; 194
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	0e 94 56 03 	call	0x6ac	; 0x6ac <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task3,  2);
  ba:	81 e9       	ldi	r24, 0x91	; 145
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	62 e0       	ldi	r22, 0x02	; 2
  c0:	0e 94 56 03 	call	0x6ac	; 0x6ac <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task4,  3);
  c4:	80 e6       	ldi	r24, 0x60	; 96
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	63 e0       	ldi	r22, 0x03	; 3
  ca:	0e 94 56 03 	call	0x6ac	; 0x6ac <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task5,  4);
  ce:	8f e2       	ldi	r24, 0x2F	; 47
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	64 e0       	ldi	r22, 0x04	; 4
  d4:	0e 94 56 03 	call	0x6ac	; 0x6ac <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task6,  6);
  d8:	84 e0       	ldi	r24, 0x04	; 4
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	66 e0       	ldi	r22, 0x06	; 6
  de:	0e 94 56 03 	call	0x6ac	; 0x6ac <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task7,  5);
  e2:	89 ed       	ldi	r24, 0xD9	; 217
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	65 e0       	ldi	r22, 0x05	; 5
  e8:	0e 94 56 03 	call	0x6ac	; 0x6ac <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task8,  8);
  ec:	8e ea       	ldi	r24, 0xAE	; 174
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	68 e0       	ldi	r22, 0x08	; 8
  f2:	0e 94 56 03 	call	0x6ac	; 0x6ac <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task9,  7);
  f6:	83 e8       	ldi	r24, 0x83	; 131
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	67 e0       	ldi	r22, 0x07	; 7
  fc:	0e 94 56 03 	call	0x6ac	; 0x6ac <Kernel_Task_Create>
	
	Kernel_Start_Tasks();
 100:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <Kernel_Start_Tasks>
 104:	ff cf       	rjmp	.-2      	; 0x104 <SRUDR0+0x3e>

00000106 <Tasks_Task9>:
  }
}

void Tasks_Task9(void){
  
  Debug_Init(0);
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <Debug_Init>
  
  while(1){
    
	  Debug_Tx_Byte(9);
 10e:	89 e0       	ldi	r24, 0x09	; 9
 110:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 2e 06 	call	0xc5c	; 0xc5c <Kernel_Task_Sleep_Time_Get>
 11a:	0e 94 70 06 	call	0xce0	; 0xce0 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	0e 94 38 06 	call	0xc70	; 0xc70 <Kernel_Task_Status_Get>
 124:	80 5e       	subi	r24, 0xE0	; 224
 126:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(9));
 12a:	89 e0       	ldi	r24, 0x09	; 9
 12c:	0e 94 2e 06 	call	0xc5c	; 0xc5c <Kernel_Task_Sleep_Time_Get>
 130:	0e 94 70 06 	call	0xce0	; 0xce0 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(9));
 134:	89 e0       	ldi	r24, 0x09	; 9
 136:	0e 94 38 06 	call	0xc70	; 0xc70 <Kernel_Task_Status_Get>
 13a:	80 5e       	subi	r24, 0xE0	; 224
 13c:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 140:	0e 94 52 06 	call	0xca4	; 0xca4 <Kernel_Abs_High_Prio_Task_ID_Get>
 144:	80 5f       	subi	r24, 0xF0	; 240
 146:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 14a:	0e 94 4b 06 	call	0xc96	; 0xc96 <Kernel_Lowest_Prio_Get>
 14e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Kernel_Task_Sleep(90);
 152:	8a e5       	ldi	r24, 0x5A	; 90
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 92 04 	call	0x924	; 0x924 <Kernel_Task_Sleep>
 15a:	d9 cf       	rjmp	.-78     	; 0x10e <Tasks_Task9+0x8>

0000015c <Tasks_Task8>:
  }
}

void Tasks_Task8(void){
  
  Debug_Init(0);
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 58 06 	call	0xcb0	; 0xcb0 <Debug_Init>
  
  while(1){
    
	  Debug_Tx_Byte(8);
 164:	88 e0       	ldi	r24, 0x08	; 8
 166:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	0e 94 2e 06 	call	0xc5c	; 0xc5c <Kernel_Task_Sleep_Time_Get>
 170:	0e 94 70 06 	call	0xce0	; 0xce0 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	0e 94 38 06 	call	0xc70	; 0xc70 <Kernel_Task_Status_Get>
 17a:	80 5e       	subi	r24, 0xE0	; 224
 17c:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(8));
 180:	88 e0       	ldi	r24, 0x08	; 8
 182:	0e 94 2e 06 	call	0xc5c	; 0xc5c <Kernel_Task_Sleep_Time_Get>
 186:	0e 94 70 06 	call	0xce0	; 0xce0 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(8));
 18a:	88 e0       	ldi	r24, 0x08	; 8
 18c:	0e 94 38 06 	call	0xc70	; 0xc70 <Kernel_Task_Status_Get>
 190:	80 5e       	subi	r24, 0xE0	; 224
 192:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 196:	0e 94 52 06 	call	0xca4	; 0xca4 <Kernel_Abs_High_Prio_Task_ID_Get>
 19a:	80 5f       	subi	r24, 0xF0	; 240
 19c:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 1a0:	0e 94 4b 06 	call	0xc96	; 0xc96 <Kernel_Lowest_Prio_Get>
 1a4:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Kernel_Task_Sleep(80);
 1a8:	80 e5       	ldi	r24, 0x50	; 80
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 92 04 	call	0x924	; 0x924 <Kernel_Task_Sleep>
 1b0:	d9 cf       	rjmp	.-78     	; 0x164 <Tasks_Task8+0x8>

000001b2 <Tasks_Task7>:
  }
}

void Tasks_Task7(void){
  
  Debug_Init(0);
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 58 06 	call	0xcb0	; 0xcb0 <Debug_Init>
  
  while(1){
    
	  Debug_Tx_Byte(7);
 1ba:	87 e0       	ldi	r24, 0x07	; 7
 1bc:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	0e 94 2e 06 	call	0xc5c	; 0xc5c <Kernel_Task_Sleep_Time_Get>
 1c6:	0e 94 70 06 	call	0xce0	; 0xce0 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	0e 94 38 06 	call	0xc70	; 0xc70 <Kernel_Task_Status_Get>
 1d0:	80 5e       	subi	r24, 0xE0	; 224
 1d2:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(7));
 1d6:	87 e0       	ldi	r24, 0x07	; 7
 1d8:	0e 94 2e 06 	call	0xc5c	; 0xc5c <Kernel_Task_Sleep_Time_Get>
 1dc:	0e 94 70 06 	call	0xce0	; 0xce0 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(7));
 1e0:	87 e0       	ldi	r24, 0x07	; 7
 1e2:	0e 94 38 06 	call	0xc70	; 0xc70 <Kernel_Task_Status_Get>
 1e6:	80 5e       	subi	r24, 0xE0	; 224
 1e8:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 1ec:	0e 94 52 06 	call	0xca4	; 0xca4 <Kernel_Abs_High_Prio_Task_ID_Get>
 1f0:	80 5f       	subi	r24, 0xF0	; 240
 1f2:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 1f6:	0e 94 4b 06 	call	0xc96	; 0xc96 <Kernel_Lowest_Prio_Get>
 1fa:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Kernel_Task_Sleep(70);
 1fe:	86 e4       	ldi	r24, 0x46	; 70
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 92 04 	call	0x924	; 0x924 <Kernel_Task_Sleep>
 206:	d9 cf       	rjmp	.-78     	; 0x1ba <Tasks_Task7+0x8>

00000208 <Tasks_Task6>:
  }
}

void Tasks_Task6(void){
  
  Debug_Init(0);
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 58 06 	call	0xcb0	; 0xcb0 <Debug_Init>
  
  while(1){
    
    Debug_Tx_Byte(6);
 210:	86 e0       	ldi	r24, 0x06	; 6
 212:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	0e 94 2e 06 	call	0xc5c	; 0xc5c <Kernel_Task_Sleep_Time_Get>
 21c:	0e 94 70 06 	call	0xce0	; 0xce0 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	0e 94 38 06 	call	0xc70	; 0xc70 <Kernel_Task_Status_Get>
 226:	80 5e       	subi	r24, 0xE0	; 224
 228:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(6));
 22c:	86 e0       	ldi	r24, 0x06	; 6
 22e:	0e 94 2e 06 	call	0xc5c	; 0xc5c <Kernel_Task_Sleep_Time_Get>
 232:	0e 94 70 06 	call	0xce0	; 0xce0 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(6));
 236:	86 e0       	ldi	r24, 0x06	; 6
 238:	0e 94 38 06 	call	0xc70	; 0xc70 <Kernel_Task_Status_Get>
 23c:	80 5e       	subi	r24, 0xE0	; 224
 23e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 242:	0e 94 52 06 	call	0xca4	; 0xca4 <Kernel_Abs_High_Prio_Task_ID_Get>
 246:	80 5f       	subi	r24, 0xF0	; 240
 248:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 24c:	0e 94 4b 06 	call	0xc96	; 0xc96 <Kernel_Lowest_Prio_Get>
 250:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Kernel_Task_Sleep(60);
 254:	8c e3       	ldi	r24, 0x3C	; 60
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 92 04 	call	0x924	; 0x924 <Kernel_Task_Sleep>
 25c:	d9 cf       	rjmp	.-78     	; 0x210 <Tasks_Task6+0x8>

0000025e <Tasks_Task5>:
    Kernel_Task_Sleep(40);
	
  }
}

void Tasks_Task5(void){
 25e:	1f 93       	push	r17
  
  DDRC |= (1<<5);
 260:	3d 9a       	sbi	0x07, 5	; 7

  Debug_Init(0);
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 58 06 	call	0xcb0	; 0xcb0 <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<5);
 26a:	10 e2       	ldi	r17, 0x20	; 32
 26c:	88 b1       	in	r24, 0x08	; 8
 26e:	81 27       	eor	r24, r17
 270:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(5);
 272:	85 e0       	ldi	r24, 0x05	; 5
 274:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	0e 94 2e 06 	call	0xc5c	; 0xc5c <Kernel_Task_Sleep_Time_Get>
 27e:	0e 94 70 06 	call	0xce0	; 0xce0 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 38 06 	call	0xc70	; 0xc70 <Kernel_Task_Status_Get>
 288:	80 5e       	subi	r24, 0xE0	; 224
 28a:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(5));
 28e:	85 e0       	ldi	r24, 0x05	; 5
 290:	0e 94 2e 06 	call	0xc5c	; 0xc5c <Kernel_Task_Sleep_Time_Get>
 294:	0e 94 70 06 	call	0xce0	; 0xce0 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(5));
 298:	85 e0       	ldi	r24, 0x05	; 5
 29a:	0e 94 38 06 	call	0xc70	; 0xc70 <Kernel_Task_Status_Get>
 29e:	80 5e       	subi	r24, 0xE0	; 224
 2a0:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 2a4:	0e 94 52 06 	call	0xca4	; 0xca4 <Kernel_Abs_High_Prio_Task_ID_Get>
 2a8:	80 5f       	subi	r24, 0xF0	; 240
 2aa:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 2ae:	0e 94 4b 06 	call	0xc96	; 0xc96 <Kernel_Lowest_Prio_Get>
 2b2:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Kernel_Task_Sleep(50);
 2b6:	82 e3       	ldi	r24, 0x32	; 50
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 92 04 	call	0x924	; 0x924 <Kernel_Task_Sleep>
 2be:	d6 cf       	rjmp	.-84     	; 0x26c <Tasks_Task5+0xe>

000002c0 <Tasks_Task4>:
    Kernel_Task_Sleep(30);
	
  }
}

void Tasks_Task4(void){
 2c0:	1f 93       	push	r17
  
  DDRC |= (1<<4);
 2c2:	3c 9a       	sbi	0x07, 4	; 7

  Debug_Init(0);
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 58 06 	call	0xcb0	; 0xcb0 <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<4);
 2cc:	10 e1       	ldi	r17, 0x10	; 16
 2ce:	88 b1       	in	r24, 0x08	; 8
 2d0:	81 27       	eor	r24, r17
 2d2:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(4);
 2d4:	84 e0       	ldi	r24, 0x04	; 4
 2d6:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	0e 94 2e 06 	call	0xc5c	; 0xc5c <Kernel_Task_Sleep_Time_Get>
 2e0:	0e 94 70 06 	call	0xce0	; 0xce0 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	0e 94 38 06 	call	0xc70	; 0xc70 <Kernel_Task_Status_Get>
 2ea:	80 5e       	subi	r24, 0xE0	; 224
 2ec:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(4));
 2f0:	84 e0       	ldi	r24, 0x04	; 4
 2f2:	0e 94 2e 06 	call	0xc5c	; 0xc5c <Kernel_Task_Sleep_Time_Get>
 2f6:	0e 94 70 06 	call	0xce0	; 0xce0 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(4));
 2fa:	84 e0       	ldi	r24, 0x04	; 4
 2fc:	0e 94 38 06 	call	0xc70	; 0xc70 <Kernel_Task_Status_Get>
 300:	80 5e       	subi	r24, 0xE0	; 224
 302:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 306:	0e 94 52 06 	call	0xca4	; 0xca4 <Kernel_Abs_High_Prio_Task_ID_Get>
 30a:	80 5f       	subi	r24, 0xF0	; 240
 30c:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 310:	0e 94 4b 06 	call	0xc96	; 0xc96 <Kernel_Lowest_Prio_Get>
 314:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Kernel_Task_Sleep(40);
 318:	88 e2       	ldi	r24, 0x28	; 40
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 92 04 	call	0x924	; 0x924 <Kernel_Task_Sleep>
 320:	d6 cf       	rjmp	.-84     	; 0x2ce <Tasks_Task4+0xe>

00000322 <Tasks_Task3>:
    Kernel_Task_Sleep(1);
	
  }
}

void Tasks_Task3(void){
 322:	1f 93       	push	r17
  
  DDRC |= (1<<3);
 324:	3b 9a       	sbi	0x07, 3	; 7

  Debug_Init(0);
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<3);
 32e:	18 e0       	ldi	r17, 0x08	; 8
 330:	88 b1       	in	r24, 0x08	; 8
 332:	81 27       	eor	r24, r17
 334:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(3);
 336:	83 e0       	ldi	r24, 0x03	; 3
 338:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	0e 94 2e 06 	call	0xc5c	; 0xc5c <Kernel_Task_Sleep_Time_Get>
 342:	0e 94 70 06 	call	0xce0	; 0xce0 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	0e 94 38 06 	call	0xc70	; 0xc70 <Kernel_Task_Status_Get>
 34c:	80 5e       	subi	r24, 0xE0	; 224
 34e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(3));
 352:	83 e0       	ldi	r24, 0x03	; 3
 354:	0e 94 2e 06 	call	0xc5c	; 0xc5c <Kernel_Task_Sleep_Time_Get>
 358:	0e 94 70 06 	call	0xce0	; 0xce0 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(3));
 35c:	83 e0       	ldi	r24, 0x03	; 3
 35e:	0e 94 38 06 	call	0xc70	; 0xc70 <Kernel_Task_Status_Get>
 362:	80 5e       	subi	r24, 0xE0	; 224
 364:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 368:	0e 94 52 06 	call	0xca4	; 0xca4 <Kernel_Abs_High_Prio_Task_ID_Get>
 36c:	80 5f       	subi	r24, 0xF0	; 240
 36e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 372:	0e 94 4b 06 	call	0xc96	; 0xc96 <Kernel_Lowest_Prio_Get>
 376:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Kernel_Task_Sleep(30);
 37a:	8e e1       	ldi	r24, 0x1E	; 30
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 92 04 	call	0x924	; 0x924 <Kernel_Task_Sleep>
 382:	d6 cf       	rjmp	.-84     	; 0x330 <Tasks_Task3+0xe>

00000384 <Tasks_Task2>:
    //Kernel_Task_Constant_Latency_Sleep();
    
  }
}

void Tasks_Task2(void){
 384:	1f 93       	push	r17
  
  DDRC |= (1<<2);
 386:	3a 9a       	sbi	0x07, 2	; 7

  Debug_Init(0);
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 58 06 	call	0xcb0	; 0xcb0 <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<2);
 390:	14 e0       	ldi	r17, 0x04	; 4
 392:	88 b1       	in	r24, 0x08	; 8
 394:	81 27       	eor	r24, r17
 396:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(2);
 398:	82 e0       	ldi	r24, 0x02	; 2
 39a:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	0e 94 2e 06 	call	0xc5c	; 0xc5c <Kernel_Task_Sleep_Time_Get>
 3a4:	0e 94 70 06 	call	0xce0	; 0xce0 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0e 94 38 06 	call	0xc70	; 0xc70 <Kernel_Task_Status_Get>
 3ae:	80 5e       	subi	r24, 0xE0	; 224
 3b0:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(2));
 3b4:	82 e0       	ldi	r24, 0x02	; 2
 3b6:	0e 94 2e 06 	call	0xc5c	; 0xc5c <Kernel_Task_Sleep_Time_Get>
 3ba:	0e 94 70 06 	call	0xce0	; 0xce0 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(2));
 3be:	82 e0       	ldi	r24, 0x02	; 2
 3c0:	0e 94 38 06 	call	0xc70	; 0xc70 <Kernel_Task_Status_Get>
 3c4:	80 5e       	subi	r24, 0xE0	; 224
 3c6:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 3ca:	0e 94 52 06 	call	0xca4	; 0xca4 <Kernel_Abs_High_Prio_Task_ID_Get>
 3ce:	80 5f       	subi	r24, 0xF0	; 240
 3d0:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 3d4:	0e 94 4b 06 	call	0xc96	; 0xc96 <Kernel_Lowest_Prio_Get>
 3d8:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Kernel_Task_Sleep(1);
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	0e 94 92 04 	call	0x924	; 0x924 <Kernel_Task_Sleep>
 3e4:	d6 cf       	rjmp	.-84     	; 0x392 <Tasks_Task2+0xe>

000003e6 <Tasks_Task1>:
#include <util/delay.h>
#include "kernel.h"
#include "tasks.h"
#include "debug.h"

void Tasks_Task1(void){
 3e6:	0f 93       	push	r16
 3e8:	1f 93       	push	r17
  
  DDRC |= (1<<1);
 3ea:	39 9a       	sbi	0x07, 1	; 7

  Debug_Init(0);
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 58 06 	call	0xcb0	; 0xcb0 <Debug_Init>
  
  while(1){
    
    //Kernel_Task_Constant_Latency(10);
    PORTC ^= (1<<1);
 3f4:	02 e0       	ldi	r16, 0x02	; 2
 3f6:	88 b1       	in	r24, 0x08	; 8
 3f8:	80 27       	eor	r24, r16
 3fa:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(1);
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    //Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	0e 94 38 06 	call	0xc70	; 0xc70 <Kernel_Task_Status_Get>
 408:	80 5e       	subi	r24, 0xE0	; 224
 40a:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 40e:	0e 94 52 06 	call	0xca4	; 0xca4 <Kernel_Abs_High_Prio_Task_ID_Get>
 412:	80 5f       	subi	r24, 0xF0	; 240
 414:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 418:	0e 94 4b 06 	call	0xc96	; 0xc96 <Kernel_Lowest_Prio_Get>
 41c:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
 420:	10 e0       	ldi	r17, 0x00	; 0
    for(uint8_t i=0;i<200;i++){
      Debug_Tx_Byte(1);
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
	  Debug_Tx_Byte(1);
    //Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
    for(uint8_t i=0;i<200;i++){
 428:	1f 5f       	subi	r17, 0xFF	; 255
 42a:	18 3c       	cpi	r17, 0xC8	; 200
 42c:	d1 f7       	brne	.-12     	; 0x422 <KER_TR+0x3a>
      Debug_Tx_Byte(1);
    }

    Kernel_Task_Sleep(10);
 42e:	8a e0       	ldi	r24, 0x0A	; 10
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 92 04 	call	0x924	; 0x924 <Kernel_Task_Sleep>
 436:	df cf       	rjmp	.-66     	; 0x3f6 <KER_TR+0xe>

00000438 <__vector_16>:


;;=================================ISR execution starting===================================;; 
.global  __vector_16                                                                           
    __vector_16:                                          ;total 40.00uS @8MHz    (320 clocks) 
	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 438:	5d 9a       	sbi	0x0b, 5	; 11
        KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 43a:	0f 92       	push	r0
 43c:	0f b6       	in	r0, 0x3f	; 63
 43e:	0f 92       	push	r0
 440:	1f 92       	push	r1
 442:	11 24       	eor	r1, r1
 444:	2f 92       	push	r2
 446:	3f 92       	push	r3
 448:	4f 92       	push	r4
 44a:	5f 92       	push	r5
 44c:	6f 92       	push	r6
 44e:	7f 92       	push	r7
 450:	8f 92       	push	r8
 452:	9f 92       	push	r9
 454:	af 92       	push	r10
 456:	bf 92       	push	r11
 458:	cf 92       	push	r12
 45a:	df 92       	push	r13
 45c:	ef 92       	push	r14
 45e:	ff 92       	push	r15
 460:	0f 93       	push	r16
 462:	1f 93       	push	r17
 464:	2f 93       	push	r18
 466:	3f 93       	push	r19
 468:	4f 93       	push	r20
 46a:	5f 93       	push	r21
 46c:	6f 93       	push	r22
 46e:	7f 93       	push	r23
 470:	8f 93       	push	r24
 472:	9f 93       	push	r25
 474:	af 93       	push	r26
 476:	bf 93       	push	r27
 478:	cf 93       	push	r28
 47a:	df 93       	push	r29
 47c:	ef 93       	push	r30
 47e:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 480:	ee e0       	ldi	r30, 0x0E	; 14
 482:	f1 e0       	ldi	r31, 0x01	; 1
 484:	00 91 07 01 	lds	r16, 0x0107
 488:	00 0f       	add	r16, r16
 48a:	e0 0f       	add	r30, r16
 48c:	00 e0       	ldi	r16, 0x00	; 0
 48e:	f0 1f       	adc	r31, r16
 490:	0d b7       	in	r16, 0x3d	; 61
 492:	1e b7       	in	r17, 0x3e	; 62
 494:	00 83       	st	Z, r16
 496:	11 83       	std	Z+1, r17	; 0x01
		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 498:	00 91 06 01 	lds	r16, 0x0106
 49c:	00 93 46 00 	sts	0x0046, r16
		KER_TICK_INCREMENT                                ;increment tick counter ( 26 clocks) 
 4a0:	00 91 00 01 	lds	r16, 0x0100
 4a4:	03 95       	inc	r16
 4a6:	00 93 00 01 	sts	0x0100, r16
 4aa:	10 e0       	ldi	r17, 0x00	; 0
 4ac:	00 91 01 01 	lds	r16, 0x0101
 4b0:	01 1f       	adc	r16, r17
 4b2:	00 93 01 01 	sts	0x0101, r16
 4b6:	00 91 02 01 	lds	r16, 0x0102
 4ba:	01 1f       	adc	r16, r17
 4bc:	00 93 02 01 	sts	0x0102, r16
 4c0:	00 91 03 01 	lds	r16, 0x0103
 4c4:	01 1f       	adc	r16, r17
 4c6:	00 93 03 01 	sts	0x0103, r16
 4ca:	00 91 04 01 	lds	r16, 0x0104
 4ce:	01 1f       	adc	r16, r17
 4d0:	00 93 04 01 	sts	0x0104, r16
		LDI    R24               , SCH_MODE_HANDLER       ;set sch mode           (  1 clock ) 
 4d4:	80 e0       	ldi	r24, 0x00	; 0
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
 4d6:	0f ef       	ldi	r16, 0xFF	; 255
 4d8:	00 93 09 01 	sts	0x0109, r16
 4dc:	00 e0       	ldi	r16, 0x00	; 0
 4de:	00 93 0a 01 	sts	0x010A, r16
 4e2:	f8 2e       	mov	r15, r24

000004e4 <_KER_SCH_LOOP8>:
 4e4:	00 93 07 01 	sts	0x0107, r16
 4e8:	8f 2d       	mov	r24, r15
 4ea:	e4 e4       	ldi	r30, 0x44	; 68
 4ec:	f1 e0       	ldi	r31, 0x01	; 1
 4ee:	00 91 07 01 	lds	r16, 0x0107
 4f2:	00 0f       	add	r16, r16
 4f4:	e0 0f       	add	r30, r16
 4f6:	00 e0       	ldi	r16, 0x00	; 0
 4f8:	f0 1f       	adc	r31, r16
 4fa:	00 81       	ld	r16, Z
 4fc:	11 81       	ldd	r17, Z+1	; 0x01
 4fe:	20 2f       	mov	r18, r16
 500:	21 2b       	or	r18, r17
 502:	59 f0       	breq	.+22     	; 0x51a <_VAL_NULL9>
 504:	81 30       	cpi	r24, 0x01	; 1
 506:	99 f0       	breq	.+38     	; 0x52e <_VAL_NOT_NULL9>
 508:	21 e0       	ldi	r18, 0x01	; 1
 50a:	02 1b       	sub	r16, r18
 50c:	20 e0       	ldi	r18, 0x00	; 0
 50e:	12 0b       	sbc	r17, r18
 510:	00 83       	st	Z, r16
 512:	11 83       	std	Z+1, r17	; 0x01
 514:	20 2f       	mov	r18, r16
 516:	21 2b       	or	r18, r17
 518:	51 f4       	brne	.+20     	; 0x52e <_VAL_NOT_NULL9>

0000051a <_VAL_NULL9>:
 51a:	e0 e3       	ldi	r30, 0x30	; 48
 51c:	f1 e0       	ldi	r31, 0x01	; 1
 51e:	00 91 07 01 	lds	r16, 0x0107
 522:	e0 0f       	add	r30, r16
 524:	00 e0       	ldi	r16, 0x00	; 0
 526:	f0 1f       	adc	r31, r16
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	80 83       	st	Z, r24
 52c:	08 c0       	rjmp	.+16     	; 0x53e <_EXIT_SLP_TIME9>

0000052e <_VAL_NOT_NULL9>:
 52e:	e0 e3       	ldi	r30, 0x30	; 48
 530:	f1 e0       	ldi	r31, 0x01	; 1
 532:	00 91 07 01 	lds	r16, 0x0107
 536:	e0 0f       	add	r30, r16
 538:	00 e0       	ldi	r16, 0x00	; 0
 53a:	f0 1f       	adc	r31, r16
 53c:	80 81       	ld	r24, Z

0000053e <_EXIT_SLP_TIME9>:
 53e:	81 30       	cpi	r24, 0x01	; 1
 540:	91 f4       	brne	.+36     	; 0x566 <_KER_SCH_NEXT8>
 542:	ea e3       	ldi	r30, 0x3A	; 58
 544:	f1 e0       	ldi	r31, 0x01	; 1
 546:	00 e0       	ldi	r16, 0x00	; 0
 548:	80 91 07 01 	lds	r24, 0x0107
 54c:	e8 0f       	add	r30, r24
 54e:	f0 1f       	adc	r31, r16
 550:	80 81       	ld	r24, Z
 552:	00 91 09 01 	lds	r16, 0x0109
 556:	80 17       	cp	r24, r16
 558:	30 f4       	brcc	.+12     	; 0x566 <_KER_SCH_NEXT8>
 55a:	80 93 09 01 	sts	0x0109, r24
 55e:	00 91 07 01 	lds	r16, 0x0107
 562:	00 93 0a 01 	sts	0x010A, r16

00000566 <_KER_SCH_NEXT8>:
 566:	00 91 07 01 	lds	r16, 0x0107
 56a:	03 95       	inc	r16
 56c:	10 91 08 01 	lds	r17, 0x0108
 570:	01 17       	cp	r16, r17
 572:	08 f4       	brcc	.+2      	; 0x576 <_KER_SCH_EXIT8>
 574:	b7 cf       	rjmp	.-146    	; 0x4e4 <_KER_SCH_LOOP8>

00000576 <_KER_SCH_EXIT8>:
 576:	00 91 0a 01 	lds	r16, 0x010A
 57a:	00 93 07 01 	sts	0x0107, r16
		KER_CPU_USAGE                                     ;calc cpu usage         ( 26 clocks) 
 57e:	00 91 07 01 	lds	r16, 0x0107
 582:	00 23       	and	r16, r16
 584:	29 f0       	breq	.+10     	; 0x590 <_KER_USG_TICK14>
 586:	00 91 0c 01 	lds	r16, 0x010C
 58a:	03 95       	inc	r16
 58c:	00 93 0c 01 	sts	0x010C, r16

00000590 <_KER_USG_TICK14>:
 590:	00 91 0b 01 	lds	r16, 0x010B
 594:	03 95       	inc	r16
 596:	04 36       	cpi	r16, 0x64	; 100
 598:	40 f0       	brcs	.+16     	; 0x5aa <_KER_USG_UTC_SV14>
 59a:	00 e0       	ldi	r16, 0x00	; 0
 59c:	10 91 0c 01 	lds	r17, 0x010C
 5a0:	10 93 0d 01 	sts	0x010D, r17
 5a4:	10 e0       	ldi	r17, 0x00	; 0
 5a6:	10 93 0c 01 	sts	0x010C, r17

000005aa <_KER_USG_UTC_SV14>:
 5aa:	00 93 0b 01 	sts	0x010B, r16
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 5ae:	ee e0       	ldi	r30, 0x0E	; 14
 5b0:	f1 e0       	ldi	r31, 0x01	; 1
 5b2:	00 91 07 01 	lds	r16, 0x0107
 5b6:	00 0f       	add	r16, r16
 5b8:	e0 0f       	add	r30, r16
 5ba:	00 e0       	ldi	r16, 0x00	; 0
 5bc:	f0 1f       	adc	r31, r16
 5be:	00 81       	ld	r16, Z
 5c0:	11 81       	ldd	r17, Z+1	; 0x01
 5c2:	0d bf       	out	0x3d, r16	; 61
 5c4:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
 5c6:	ff 91       	pop	r31
 5c8:	ef 91       	pop	r30
 5ca:	df 91       	pop	r29
 5cc:	cf 91       	pop	r28
 5ce:	bf 91       	pop	r27
 5d0:	af 91       	pop	r26
 5d2:	9f 91       	pop	r25
 5d4:	8f 91       	pop	r24
 5d6:	7f 91       	pop	r23
 5d8:	6f 91       	pop	r22
 5da:	5f 91       	pop	r21
 5dc:	4f 91       	pop	r20
 5de:	3f 91       	pop	r19
 5e0:	2f 91       	pop	r18
 5e2:	1f 91       	pop	r17
 5e4:	0f 91       	pop	r16
 5e6:	ff 90       	pop	r15
 5e8:	ef 90       	pop	r14
 5ea:	df 90       	pop	r13
 5ec:	cf 90       	pop	r12
 5ee:	bf 90       	pop	r11
 5f0:	af 90       	pop	r10
 5f2:	9f 90       	pop	r9
 5f4:	8f 90       	pop	r8
 5f6:	7f 90       	pop	r7
 5f8:	6f 90       	pop	r6
 5fa:	5f 90       	pop	r5
 5fc:	4f 90       	pop	r4
 5fe:	3f 90       	pop	r3
 600:	2f 90       	pop	r2
 602:	1f 90       	pop	r1
 604:	0f 90       	pop	r0
 606:	0f be       	out	0x3f, r0	; 63
 608:	0f 90       	pop	r0
	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 60a:	5d 98       	cbi	0x0b, 5	; 11
		RETI                                              ;return from interrupt  (  4 clocks) 
 60c:	18 95       	reti

0000060e <Kernel_SysTick_Reg_Init>:
;used registers          : R16, R17, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
;arg registers           : R24(Prescaler), R22(ReloadVal)                                      
;return registers        : None                                                                
;unsafe access registers : R16, R17, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
Kernel_SysTick_Reg_Init:                                  ;total 11.5uS @8MHz     ( 92 clocks) 
        CLI                                               ;disable global int     (  1 clock ) 
 60e:	f8 94       	cli
		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 610:	5d 98       	cbi	0x0b, 5	; 11
 612:	55 9a       	sbi	0x0a, 5	; 10
        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 614:	a0 91 22 01 	lds	r26, 0x0122
 618:	b0 91 23 01 	lds	r27, 0x0123
 61c:	0d b7       	in	r16, 0x3d	; 61
 61e:	1e b7       	in	r17, 0x3e	; 62
 620:	0d 93       	st	X+, r16
 622:	1d 93       	st	X+, r17
 624:	ed 93       	st	X+, r30
 626:	fd 93       	st	X+, r31
 628:	a0 93 22 01 	sts	0x0122, r26
 62c:	b0 93 23 01 	sts	0x0123, r27
		;clear reg                                                                             
		LDI   R16                , 0x00                   ;set 0x00 to R16        (  1 clock ) 
 630:	00 e0       	ldi	r16, 0x00	; 0
		;clear tick counter                                                                    
		STS   KerBase+OFB_TICK0  , R16                    ;clear  KerBase[0]      (  2 clocks) 
 632:	00 93 00 01 	sts	0x0100, r16
		STS   KerBase+OFB_TICK1  , R16                    ;clear  KerBase[1]      (  2 clocks) 
 636:	00 93 01 01 	sts	0x0101, r16
		STS   KerBase+OFB_TICK2  , R16                    ;clear  KerBase[2]      (  2 clocks) 
 63a:	00 93 02 01 	sts	0x0102, r16
		STS   KerBase+OFB_TICK3  , R16                    ;clear  KerBase[3]      (  2 clocks) 
 63e:	00 93 03 01 	sts	0x0103, r16
		STS   KerBase+OFB_TICK4  , R16                    ;clear  KerBase[4]      (  2 clocks) 
 642:	00 93 04 01 	sts	0x0104, r16
		;clear system registers                                                                
		STS   KerBase+OFB_PRS    , R16                    ;clear  KerBase[5]      (  2 clocks) 
 646:	00 93 05 01 	sts	0x0105, r16
		STS   KerBase+OFB_RLD    , R16                    ;clear  KerBase[6]      (  2 clocks) 
 64a:	00 93 06 01 	sts	0x0106, r16
		STS   KerBase+OFB_TID    , R16                    ;clear  KerBase[7]      (  2 clocks) 
 64e:	00 93 07 01 	sts	0x0107, r16
		STS   KerBase+OFB_NTSK   , R16                    ;clear  KerBase[8]      (  2 clocks) 
 652:	00 93 08 01 	sts	0x0108, r16
		STS   KerBase+OFB_LPR    , R16                    ;clear  KerBase[9]      (  2 clocks) 
 656:	00 93 09 01 	sts	0x0109, r16
        STS   KerBase+OFB_PTID   , R16                    ;clear  KerBase[10]     (  2 clocks) 
 65a:	00 93 0a 01 	sts	0x010A, r16
		STS   KerBase+OFB_UTC    , R16                    ;clear  KerBase[11]     (  2 clocks) 
 65e:	00 93 0b 01 	sts	0x010B, r16
		STS   KerBase+OFB_UATC   , R16                    ;clear  KerBase[12]     (  2 clocks) 
 662:	00 93 0c 01 	sts	0x010C, r16
		STS   KerBase+OFB_USAGE  , R16                    ;clear  KerBase[13]     (  2 clocks) 
 666:	00 93 0d 01 	sts	0x010D, r16
		;clear all timer registers                                                             
		STS   SRTCCR0A           , R16                    ;clear TCCR0A           (  2 clocks) 
 66a:	00 93 44 00 	sts	0x0044, r16
		STS   SRTCCR0B           , R16                    ;clear TCCR0B           (  2 clocks) 
 66e:	00 93 45 00 	sts	0x0045, r16
		STS   SRTIMSK0           , R16                    ;clear TIMSK0           (  2 clocks) 
 672:	00 93 6e 00 	sts	0x006E, r16
		STS   SRTIFR0            , R16                    ;clear TIFR0            (  2 clocks) 
 676:	00 93 35 00 	sts	0x0035, r16
		STS   SROCR0A            , R16                    ;clear OCR0A            (  2 clocks) 
 67a:	00 93 47 00 	sts	0x0047, r16
		STS   SROCR0B            , R16                    ;clear OCR0B            (  2 clocks) 
 67e:	00 93 48 00 	sts	0x0048, r16
		STS   SRTCNT0            , R16                    ;clear TCNT0            (  2 clocks) 
 682:	00 93 46 00 	sts	0x0046, r16
		;save values for future use                                                            
		STS   KerBase+OFB_PRS    , R24                    ;KerBase[5] prescaler   (  2 clocks) 
 686:	80 93 05 01 	sts	0x0105, r24
		STS   KerBase+OFB_RLD    , R22                    ;KerBase[6] reload val  (  2 clocks) 
 68a:	60 93 06 01 	sts	0x0106, r22
        KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 68e:	a0 91 22 01 	lds	r26, 0x0122
 692:	b0 91 23 01 	lds	r27, 0x0123
 696:	fe 91       	ld	r31, -X
 698:	ee 91       	ld	r30, -X
 69a:	1e 91       	ld	r17, -X
 69c:	0e 91       	ld	r16, -X
 69e:	0d bf       	out	0x3d, r16	; 61
 6a0:	1e bf       	out	0x3e, r17	; 62
 6a2:	a0 93 22 01 	sts	0x0122, r26
 6a6:	b0 93 23 01 	sts	0x0123, r27
		RET                                               ;return from subroutine (  4 clocks) 
 6aa:	08 95       	ret

000006ac <Kernel_Task_Create>:
;used registers          : R16, R17, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)         
;arg registers           : R25:R24(FuncPtr), R22(TaskPriority)                                 
;return registers        : None                                                                
;unsafe access registers : R16, R17, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)         
Kernel_Task_Create:                                       ;total 20.38uS @8MHz    (163 clocks) 
        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 6ac:	a0 91 22 01 	lds	r26, 0x0122
 6b0:	b0 91 23 01 	lds	r27, 0x0123
 6b4:	0d b7       	in	r16, 0x3d	; 61
 6b6:	1e b7       	in	r17, 0x3e	; 62
 6b8:	0d 93       	st	X+, r16
 6ba:	1d 93       	st	X+, r17
 6bc:	ed 93       	st	X+, r30
 6be:	fd 93       	st	X+, r31
 6c0:	a0 93 22 01 	sts	0x0122, r26
 6c4:	b0 93 23 01 	sts	0x0123, r27
		LDI   R17                , 0x00                   ;clear reg              (  1 clock ) 
 6c8:	10 e0       	ldi	r17, 0x00	; 0
		;set priority to KerSchPr+task_id                                                      
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 6ca:	ea e3       	ldi	r30, 0x3A	; 58
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 6cc:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 6ce:	00 91 07 01 	lds	r16, 0x0107
 6d2:	e0 0f       	add	r30, r16
 6d4:	00 e0       	ldi	r16, 0x00	; 0
 6d6:	f0 1f       	adc	r31, r16
		ST    Z                  , R22                    ;save priority          (  2 clocks) 
 6d8:	60 83       	st	Z, r22
		;set task status to KerSchSts+task_id                                                  
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 6da:	e0 e3       	ldi	r30, 0x30	; 48
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 6dc:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 6de:	00 91 07 01 	lds	r16, 0x0107
 6e2:	e0 0f       	add	r30, r16
 6e4:	00 e0       	ldi	r16, 0x00	; 0
 6e6:	f0 1f       	adc	r31, r16
		LDI   R16                , TASK_READY             ;set status as ready    (  1 clock ) 
 6e8:	01 e0       	ldi	r16, 0x01	; 1
		ST    Z                  , R16                    ;save status            (  2 clocks) 
 6ea:	00 83       	st	Z, r16
		;stack pointer for current task (KerStack + KER_STK_SZ*(task_id+1) - 1) ->stack top    
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 6ec:	00 91 07 01 	lds	r16, 0x0107
		MOV   R17                , R16                    ;load task_id           (  1 clock ) 
 6f0:	10 2f       	mov	r17, r16
		INC   R17                                         ;increment task_id      (  1 clock ) 
 6f2:	13 95       	inc	r17
		LDI   R18                , KER_STK_SZ             ;load stack size        (  1 clock ) 
 6f4:	20 ea       	ldi	r18, 0xA0	; 160
		MUL   R17                , R18                    ;multiply to get offset (  2 clocks) 
 6f6:	12 9f       	mul	r17, r18
		MOV   ZL                 , R0                     ;load multiplied low    (  1 clocks) 
 6f8:	e0 2d       	mov	r30, r0
		MOV   ZH                 , R1                     ;load multiplied high   (  1 clocks) 
 6fa:	f1 2d       	mov	r31, r1
		SBIW  ZL                 , 0x01                   ;dec multiplied val-1   (  2 clocks) 
 6fc:	31 97       	sbiw	r30, 0x01	; 1
		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 6fe:	11 24       	eor	r1, r1
		LDI   R17                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
 700:	18 e5       	ldi	r17, 0x58	; 88
		LDI   R18                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
 702:	21 e0       	ldi	r18, 0x01	; 1
		ADD   ZL                 , R17                    ;add low bytes          (  1 clock ) 
 704:	e1 0f       	add	r30, r17
		ADC   ZH                 , R18                    ;add high bytes+carry   (  1 clock ) 
 706:	f2 1f       	adc	r31, r18
		OUT   IOSPL              , ZL                     ;load SPL               (  1 clock ) 
 708:	ed bf       	out	0x3d, r30	; 61
        OUT   IOSPH              , ZH                     ;load SPH               (  1 clock ) 
 70a:	fe bf       	out	0x3e, r31	; 62
		;function argument directly returns word address                                       
	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
 70c:	8f 93       	push	r24
		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 70e:	9f 93       	push	r25
		;push context to stack of this task                                                    
		KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 710:	0f 92       	push	r0
 712:	0f b6       	in	r0, 0x3f	; 63
 714:	0f 92       	push	r0
 716:	1f 92       	push	r1
 718:	11 24       	eor	r1, r1
 71a:	2f 92       	push	r2
 71c:	3f 92       	push	r3
 71e:	4f 92       	push	r4
 720:	5f 92       	push	r5
 722:	6f 92       	push	r6
 724:	7f 92       	push	r7
 726:	8f 92       	push	r8
 728:	9f 92       	push	r9
 72a:	af 92       	push	r10
 72c:	bf 92       	push	r11
 72e:	cf 92       	push	r12
 730:	df 92       	push	r13
 732:	ef 92       	push	r14
 734:	ff 92       	push	r15
 736:	0f 93       	push	r16
 738:	1f 93       	push	r17
 73a:	2f 93       	push	r18
 73c:	3f 93       	push	r19
 73e:	4f 93       	push	r20
 740:	5f 93       	push	r21
 742:	6f 93       	push	r22
 744:	7f 93       	push	r23
 746:	8f 93       	push	r24
 748:	9f 93       	push	r25
 74a:	af 93       	push	r26
 74c:	bf 93       	push	r27
 74e:	cf 93       	push	r28
 750:	df 93       	push	r29
 752:	ef 93       	push	r30
 754:	ff 93       	push	r31
		;read stack pointer of current task (necessary when restore)                           
		IN    R17                , IOSPL                  ;read SPL               (  1 clock ) 
 756:	1d b7       	in	r17, 0x3d	; 61
        IN    R18                , IOSPH                  ;read SPH               (  1 clock ) 
 758:	2e b7       	in	r18, 0x3e	; 62
		;calculate the address where current task's SP will be stored and store SP             
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 75a:	00 91 07 01 	lds	r16, 0x0107
		MOV   R19                , R16                    ;copy task_id           (  1 clock ) 
 75e:	30 2f       	mov	r19, r16
		LSL   R19                                         ;left shift to multiply (  1 clock ) 
 760:	33 0f       	add	r19, r19
		LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 762:	ee e0       	ldi	r30, 0x0E	; 14
		LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 764:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R19                    ;add offset to array    (  1 clock ) 
 766:	e3 0f       	add	r30, r19
		LDI   R16                , 0x00                   ;clear reg              (  1 clock ) 
 768:	00 e0       	ldi	r16, 0x00	; 0
		ADC   ZH                 , R16                    ;add carry if any       (  1 clock ) 
 76a:	f0 1f       	adc	r31, r16
		ST    Z+                 , R17                    ;SPL at KerPSp+offset   (  2 clocks) 
 76c:	11 93       	st	Z+, r17
		ST    Z                  , R18                    ;SPH at KerPSp+offset   (  2 clocks) 
 76e:	20 83       	st	Z, r18
		;increment task_id                                                                     
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 770:	00 91 07 01 	lds	r16, 0x0107
		INC   R16                                         ;increment task_id      (  1 clock ) 
 774:	03 95       	inc	r16
		STS   KerBase+OFB_TID    , R16                    ;store task_id          (  2 clocks) 
 776:	00 93 07 01 	sts	0x0107, r16
		;increment ntask                                                                       
		LDS   R16                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 77a:	00 91 08 01 	lds	r16, 0x0108
		INC   R16                                         ;increment ntask        (  1 clock ) 
 77e:	03 95       	inc	r16
		STS   KerBase+OFB_NTSK   , R16                    ;store ntask            (  2 clocks) 
 780:	00 93 08 01 	sts	0x0108, r16
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 784:	a0 91 22 01 	lds	r26, 0x0122
 788:	b0 91 23 01 	lds	r27, 0x0123
 78c:	fe 91       	ld	r31, -X
 78e:	ee 91       	ld	r30, -X
 790:	1e 91       	ld	r17, -X
 792:	0e 91       	ld	r16, -X
 794:	0d bf       	out	0x3d, r16	; 61
 796:	1e bf       	out	0x3e, r17	; 62
 798:	a0 93 22 01 	sts	0x0122, r26
 79c:	b0 93 23 01 	sts	0x0123, r27
		RET                                               ;return from subroutine (  4 clocks) 
 7a0:	08 95       	ret

000007a2 <Kernel_Start_Tasks>:
;used registers          : R0~R31                                                              
;arg registers           : None                                                                
;return registers        : None                                                                
;unsafe access registers : R16, R17, R18, R24, R25, R30(ZL), R31(ZH)                           
Kernel_Start_Tasks:                                       ;total 11.38uS @8MHz    ( 91 clocks) 
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 7a2:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
 7a4:	0f ef       	ldi	r16, 0xFF	; 255
 7a6:	00 93 09 01 	sts	0x0109, r16
 7aa:	00 e0       	ldi	r16, 0x00	; 0
 7ac:	00 93 0a 01 	sts	0x010A, r16
 7b0:	f8 2e       	mov	r15, r24

000007b2 <_KER_SCH_LOOP31>:
 7b2:	00 93 07 01 	sts	0x0107, r16
 7b6:	8f 2d       	mov	r24, r15
 7b8:	e4 e4       	ldi	r30, 0x44	; 68
 7ba:	f1 e0       	ldi	r31, 0x01	; 1
 7bc:	00 91 07 01 	lds	r16, 0x0107
 7c0:	00 0f       	add	r16, r16
 7c2:	e0 0f       	add	r30, r16
 7c4:	00 e0       	ldi	r16, 0x00	; 0
 7c6:	f0 1f       	adc	r31, r16
 7c8:	00 81       	ld	r16, Z
 7ca:	11 81       	ldd	r17, Z+1	; 0x01
 7cc:	20 2f       	mov	r18, r16
 7ce:	21 2b       	or	r18, r17
 7d0:	59 f0       	breq	.+22     	; 0x7e8 <_VAL_NULL32>
 7d2:	81 30       	cpi	r24, 0x01	; 1
 7d4:	99 f0       	breq	.+38     	; 0x7fc <_VAL_NOT_NULL32>
 7d6:	21 e0       	ldi	r18, 0x01	; 1
 7d8:	02 1b       	sub	r16, r18
 7da:	20 e0       	ldi	r18, 0x00	; 0
 7dc:	12 0b       	sbc	r17, r18
 7de:	00 83       	st	Z, r16
 7e0:	11 83       	std	Z+1, r17	; 0x01
 7e2:	20 2f       	mov	r18, r16
 7e4:	21 2b       	or	r18, r17
 7e6:	51 f4       	brne	.+20     	; 0x7fc <_VAL_NOT_NULL32>

000007e8 <_VAL_NULL32>:
 7e8:	e0 e3       	ldi	r30, 0x30	; 48
 7ea:	f1 e0       	ldi	r31, 0x01	; 1
 7ec:	00 91 07 01 	lds	r16, 0x0107
 7f0:	e0 0f       	add	r30, r16
 7f2:	00 e0       	ldi	r16, 0x00	; 0
 7f4:	f0 1f       	adc	r31, r16
 7f6:	81 e0       	ldi	r24, 0x01	; 1
 7f8:	80 83       	st	Z, r24
 7fa:	08 c0       	rjmp	.+16     	; 0x80c <_EXIT_SLP_TIME32>

000007fc <_VAL_NOT_NULL32>:
 7fc:	e0 e3       	ldi	r30, 0x30	; 48
 7fe:	f1 e0       	ldi	r31, 0x01	; 1
 800:	00 91 07 01 	lds	r16, 0x0107
 804:	e0 0f       	add	r30, r16
 806:	00 e0       	ldi	r16, 0x00	; 0
 808:	f0 1f       	adc	r31, r16
 80a:	80 81       	ld	r24, Z

0000080c <_EXIT_SLP_TIME32>:
 80c:	81 30       	cpi	r24, 0x01	; 1
 80e:	91 f4       	brne	.+36     	; 0x834 <_KER_SCH_NEXT31>
 810:	ea e3       	ldi	r30, 0x3A	; 58
 812:	f1 e0       	ldi	r31, 0x01	; 1
 814:	00 e0       	ldi	r16, 0x00	; 0
 816:	80 91 07 01 	lds	r24, 0x0107
 81a:	e8 0f       	add	r30, r24
 81c:	f0 1f       	adc	r31, r16
 81e:	80 81       	ld	r24, Z
 820:	00 91 09 01 	lds	r16, 0x0109
 824:	80 17       	cp	r24, r16
 826:	30 f4       	brcc	.+12     	; 0x834 <_KER_SCH_NEXT31>
 828:	80 93 09 01 	sts	0x0109, r24
 82c:	00 91 07 01 	lds	r16, 0x0107
 830:	00 93 0a 01 	sts	0x010A, r16

00000834 <_KER_SCH_NEXT31>:
 834:	00 91 07 01 	lds	r16, 0x0107
 838:	03 95       	inc	r16
 83a:	10 91 08 01 	lds	r17, 0x0108
 83e:	01 17       	cp	r16, r17
 840:	08 f4       	brcc	.+2      	; 0x844 <_KER_SCH_EXIT31>
 842:	b7 cf       	rjmp	.-146    	; 0x7b2 <_KER_SCH_LOOP31>

00000844 <_KER_SCH_EXIT31>:
 844:	00 91 0a 01 	lds	r16, 0x010A
 848:	00 93 07 01 	sts	0x0107, r16
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 84c:	ee e0       	ldi	r30, 0x0E	; 14
 84e:	f1 e0       	ldi	r31, 0x01	; 1
 850:	00 91 07 01 	lds	r16, 0x0107
 854:	00 0f       	add	r16, r16
 856:	e0 0f       	add	r30, r16
 858:	00 e0       	ldi	r16, 0x00	; 0
 85a:	f0 1f       	adc	r31, r16
 85c:	00 81       	ld	r16, Z
 85e:	11 81       	ldd	r17, Z+1	; 0x01
 860:	0d bf       	out	0x3d, r16	; 61
 862:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 864:	ff 91       	pop	r31
 866:	ef 91       	pop	r30
 868:	df 91       	pop	r29
 86a:	cf 91       	pop	r28
 86c:	bf 91       	pop	r27
 86e:	af 91       	pop	r26
 870:	9f 91       	pop	r25
 872:	8f 91       	pop	r24
 874:	7f 91       	pop	r23
 876:	6f 91       	pop	r22
 878:	5f 91       	pop	r21
 87a:	4f 91       	pop	r20
 87c:	3f 91       	pop	r19
 87e:	2f 91       	pop	r18
 880:	1f 91       	pop	r17
 882:	0f 91       	pop	r16
 884:	ff 90       	pop	r15
 886:	ef 90       	pop	r14
 888:	df 90       	pop	r13
 88a:	cf 90       	pop	r12
 88c:	bf 90       	pop	r11
 88e:	af 90       	pop	r10
 890:	9f 90       	pop	r9
 892:	8f 90       	pop	r8
 894:	7f 90       	pop	r7
 896:	6f 90       	pop	r6
 898:	5f 90       	pop	r5
 89a:	4f 90       	pop	r4
 89c:	3f 90       	pop	r3
 89e:	2f 90       	pop	r2
 8a0:	1f 90       	pop	r1
 8a2:	0f 90       	pop	r0
 8a4:	0f be       	out	0x3f, r0	; 63
 8a6:	0f 90       	pop	r0
 8a8:	78 94       	sei
		;config timer for system tick                                                          
		KER_TIMER_INIT                                    ;init timer, int enable ( 12 clocks) 
 8aa:	00 91 05 01 	lds	r16, 0x0105
 8ae:	10 91 06 01 	lds	r17, 0x0106
 8b2:	00 93 45 00 	sts	0x0045, r16
 8b6:	10 93 46 00 	sts	0x0046, r17
 8ba:	01 e0       	ldi	r16, 0x01	; 1
 8bc:	00 93 6e 00 	sts	0x006E, r16
 8c0:	78 94       	sei
		;execute return to jump to highest priority task                                       
		RET                                               ;return from subroutine (  4 clocks) 
 8c2:	08 95       	ret

000008c4 <Kernel_Init>:
;used registers          : R1, R16, R17, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
;arg registers           : None                                                                
;return registers        : None                                                                
;unsafe access registers : R1, R16, R17, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
Kernel_Init:                                              ;total 38.63uS @8MHz    (309 clocks) 
		CLR   R1                                          ;gcc expects            (  1 clock ) 
 8c4:	11 24       	eor	r1, r1
        ;store stack top (for MSP) addr to KerSSZ+OFM_MSPI0:1                                  
		LDI   R16                , lo8(KerSSZ+OFM_MSPS)   ;load low address       (  1 clock ) 
 8c6:	04 e2       	ldi	r16, 0x24	; 36
		LDI   R17                , hi8(KerSSZ+OFM_MSPS)   ;load high address      (  1 clock ) 
 8c8:	11 e0       	ldi	r17, 0x01	; 1
        STS   KerSSZ+OFM_MSPI+0  , R16                    ;set mspi to stack top  (  2 clocks) 
 8ca:	00 93 22 01 	sts	0x0122, r16
		STS   KerSSZ+OFM_MSPI+1  , R17                    ;set mspi to stack top  (  2 clocks) 
 8ce:	10 93 23 01 	sts	0x0123, r17
		KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 8d2:	a0 91 22 01 	lds	r26, 0x0122
 8d6:	b0 91 23 01 	lds	r27, 0x0123
 8da:	0d b7       	in	r16, 0x3d	; 61
 8dc:	1e b7       	in	r17, 0x3e	; 62
 8de:	0d 93       	st	X+, r16
 8e0:	1d 93       	st	X+, r17
 8e2:	ed 93       	st	X+, r30
 8e4:	fd 93       	st	X+, r31
 8e6:	a0 93 22 01 	sts	0x0122, r26
 8ea:	b0 93 23 01 	sts	0x0123, r27
		;init timer for kernel                                                                 
		LDI   R24                , 0x03                   ;set prescaler          (  1 clock ) 
 8ee:	83 e0       	ldi	r24, 0x03	; 3
		LDI   R22                , 0x82                   ;set reload val         (  1 clock ) 
 8f0:	62 e8       	ldi	r22, 0x82	; 130
		CALL  Kernel_SysTick_Reg_Init                     ;init timer             ( 92 clocks) 
 8f2:	0e 94 07 03 	call	0x60e	; 0x60e <Kernel_SysTick_Reg_Init>
		;create idle task at task_id 0, priority 0xFF (lowest)                                 
		LDI   R24                , lo8(Kernel_Task_Idle)  ;load func addr low     (  1 clock ) 
 8f6:	82 e2       	ldi	r24, 0x22	; 34
		LDI   R25                , hi8(Kernel_Task_Idle)  ;load func addr high    (  1 clock ) 
 8f8:	99 e0       	ldi	r25, 0x09	; 9
		LSR   R25                                         ;right shift to divide  (  1 clock ) 
 8fa:	96 95       	lsr	r25
		ROR   R24                                         ;rotate right th carry  (  1 clock ) 
 8fc:	87 95       	ror	r24
		LDI   R22                , 0xFF                   ;set max val            (  1 clock ) 
 8fe:	6f ef       	ldi	r22, 0xFF	; 255
		CALL  Kernel_Task_Create                          ;init idle task         (163 clocks) 
 900:	0e 94 56 03 	call	0x6ac	; 0x6ac <Kernel_Task_Create>
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 904:	a0 91 22 01 	lds	r26, 0x0122
 908:	b0 91 23 01 	lds	r27, 0x0123
 90c:	fe 91       	ld	r31, -X
 90e:	ee 91       	ld	r30, -X
 910:	1e 91       	ld	r17, -X
 912:	0e 91       	ld	r16, -X
 914:	0d bf       	out	0x3d, r16	; 61
 916:	1e bf       	out	0x3e, r17	; 62
 918:	a0 93 22 01 	sts	0x0122, r26
 91c:	b0 93 23 01 	sts	0x0123, r27
		;execute return to jump to task0, pushed while task init                               
		RET                                               ;return from subroutine (  4 clocks) 
 920:	08 95       	ret

00000922 <Kernel_Task_Idle>:
;arg registers           : None                                                                
;return registers        : None                                                                
;unsafe access registers : None                                                                
Kernel_Task_Idle:                                         ;total 0.5uS @8MHz      (  4 clocks) 
    _IDLE_LOOP:                                           ;forever loop                        
		RJMP  _IDLE_LOOP                                  ;return from subroutine (  4 clocks) 
 922:	ff cf       	rjmp	.-2      	; 0x922 <Kernel_Task_Idle>

00000924 <Kernel_Task_Sleep>:
;arg registers           : R25:R24(SleepTime)                                                  
;return registers        : None                                                                
;unsafe access registers : R16, R17, R18, R24, R25, R30(ZL), R31(ZH)                           
Kernel_Task_Sleep:                                        ;total 35.5uS @8MHz     (284 clocks) 
        ;save current context                                                                  
        KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
 924:	0f 92       	push	r0
 926:	0f b6       	in	r0, 0x3f	; 63
 928:	f8 94       	cli
 92a:	0f 92       	push	r0
 92c:	1f 92       	push	r1
 92e:	11 24       	eor	r1, r1
 930:	2f 92       	push	r2
 932:	3f 92       	push	r3
 934:	4f 92       	push	r4
 936:	5f 92       	push	r5
 938:	6f 92       	push	r6
 93a:	7f 92       	push	r7
 93c:	8f 92       	push	r8
 93e:	9f 92       	push	r9
 940:	af 92       	push	r10
 942:	bf 92       	push	r11
 944:	cf 92       	push	r12
 946:	df 92       	push	r13
 948:	ef 92       	push	r14
 94a:	ff 92       	push	r15
 94c:	0f 93       	push	r16
 94e:	1f 93       	push	r17
 950:	2f 93       	push	r18
 952:	3f 93       	push	r19
 954:	4f 93       	push	r20
 956:	5f 93       	push	r21
 958:	6f 93       	push	r22
 95a:	7f 93       	push	r23
 95c:	8f 93       	push	r24
 95e:	9f 93       	push	r25
 960:	af 93       	push	r26
 962:	bf 93       	push	r27
 964:	cf 93       	push	r28
 966:	df 93       	push	r29
 968:	ef 93       	push	r30
 96a:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 96c:	ee e0       	ldi	r30, 0x0E	; 14
 96e:	f1 e0       	ldi	r31, 0x01	; 1
 970:	00 91 07 01 	lds	r16, 0x0107
 974:	00 0f       	add	r16, r16
 976:	e0 0f       	add	r30, r16
 978:	00 e0       	ldi	r16, 0x00	; 0
 97a:	f0 1f       	adc	r31, r16
 97c:	0d b7       	in	r16, 0x3d	; 61
 97e:	1e b7       	in	r17, 0x3e	; 62
 980:	00 83       	st	Z, r16
 982:	11 83       	std	Z+1, r17	; 0x01
		;create next task wakeup time (args R25:R24)                                           
		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 984:	e4 e4       	ldi	r30, 0x44	; 68
		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 986:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
 988:	00 91 07 01 	lds	r16, 0x0107
 98c:	00 0f       	add	r16, r16
 98e:	e0 0f       	add	r30, r16
 990:	00 e0       	ldi	r16, 0x00	; 0
 992:	f0 1f       	adc	r31, r16
		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
 994:	80 83       	st	Z, r24
		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 996:	91 83       	std	Z+1, r25	; 0x01
		;update task scheduler status as blocked                                               
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 998:	e0 e3       	ldi	r30, 0x30	; 48
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 99a:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
 99c:	00 91 07 01 	lds	r16, 0x0107
 9a0:	e0 0f       	add	r30, r16
 9a2:	00 e0       	ldi	r16, 0x00	; 0
 9a4:	f0 1f       	adc	r31, r16
        LDI   R16                , TASK_BLOCKED           ;block task until cnt=0 (  1 clock ) 
 9a6:	00 e0       	ldi	r16, 0x00	; 0
		STD   Z+0                , R16                    ;save block flag        (  2 clocks) 
 9a8:	00 83       	st	Z, r16
		;run scheduler, load next task sp, restore context                                     
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 9aa:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
 9ac:	0f ef       	ldi	r16, 0xFF	; 255
 9ae:	00 93 09 01 	sts	0x0109, r16
 9b2:	00 e0       	ldi	r16, 0x00	; 0
 9b4:	00 93 0a 01 	sts	0x010A, r16
 9b8:	f8 2e       	mov	r15, r24

000009ba <_KER_SCH_LOOP52>:
 9ba:	00 93 07 01 	sts	0x0107, r16
 9be:	8f 2d       	mov	r24, r15
 9c0:	e4 e4       	ldi	r30, 0x44	; 68
 9c2:	f1 e0       	ldi	r31, 0x01	; 1
 9c4:	00 91 07 01 	lds	r16, 0x0107
 9c8:	00 0f       	add	r16, r16
 9ca:	e0 0f       	add	r30, r16
 9cc:	00 e0       	ldi	r16, 0x00	; 0
 9ce:	f0 1f       	adc	r31, r16
 9d0:	00 81       	ld	r16, Z
 9d2:	11 81       	ldd	r17, Z+1	; 0x01
 9d4:	20 2f       	mov	r18, r16
 9d6:	21 2b       	or	r18, r17
 9d8:	59 f0       	breq	.+22     	; 0x9f0 <_VAL_NULL53>
 9da:	81 30       	cpi	r24, 0x01	; 1
 9dc:	99 f0       	breq	.+38     	; 0xa04 <_VAL_NOT_NULL53>
 9de:	21 e0       	ldi	r18, 0x01	; 1
 9e0:	02 1b       	sub	r16, r18
 9e2:	20 e0       	ldi	r18, 0x00	; 0
 9e4:	12 0b       	sbc	r17, r18
 9e6:	00 83       	st	Z, r16
 9e8:	11 83       	std	Z+1, r17	; 0x01
 9ea:	20 2f       	mov	r18, r16
 9ec:	21 2b       	or	r18, r17
 9ee:	51 f4       	brne	.+20     	; 0xa04 <_VAL_NOT_NULL53>

000009f0 <_VAL_NULL53>:
 9f0:	e0 e3       	ldi	r30, 0x30	; 48
 9f2:	f1 e0       	ldi	r31, 0x01	; 1
 9f4:	00 91 07 01 	lds	r16, 0x0107
 9f8:	e0 0f       	add	r30, r16
 9fa:	00 e0       	ldi	r16, 0x00	; 0
 9fc:	f0 1f       	adc	r31, r16
 9fe:	81 e0       	ldi	r24, 0x01	; 1
 a00:	80 83       	st	Z, r24
 a02:	08 c0       	rjmp	.+16     	; 0xa14 <_EXIT_SLP_TIME53>

00000a04 <_VAL_NOT_NULL53>:
 a04:	e0 e3       	ldi	r30, 0x30	; 48
 a06:	f1 e0       	ldi	r31, 0x01	; 1
 a08:	00 91 07 01 	lds	r16, 0x0107
 a0c:	e0 0f       	add	r30, r16
 a0e:	00 e0       	ldi	r16, 0x00	; 0
 a10:	f0 1f       	adc	r31, r16
 a12:	80 81       	ld	r24, Z

00000a14 <_EXIT_SLP_TIME53>:
 a14:	81 30       	cpi	r24, 0x01	; 1
 a16:	91 f4       	brne	.+36     	; 0xa3c <_KER_SCH_NEXT52>
 a18:	ea e3       	ldi	r30, 0x3A	; 58
 a1a:	f1 e0       	ldi	r31, 0x01	; 1
 a1c:	00 e0       	ldi	r16, 0x00	; 0
 a1e:	80 91 07 01 	lds	r24, 0x0107
 a22:	e8 0f       	add	r30, r24
 a24:	f0 1f       	adc	r31, r16
 a26:	80 81       	ld	r24, Z
 a28:	00 91 09 01 	lds	r16, 0x0109
 a2c:	80 17       	cp	r24, r16
 a2e:	30 f4       	brcc	.+12     	; 0xa3c <_KER_SCH_NEXT52>
 a30:	80 93 09 01 	sts	0x0109, r24
 a34:	00 91 07 01 	lds	r16, 0x0107
 a38:	00 93 0a 01 	sts	0x010A, r16

00000a3c <_KER_SCH_NEXT52>:
 a3c:	00 91 07 01 	lds	r16, 0x0107
 a40:	03 95       	inc	r16
 a42:	10 91 08 01 	lds	r17, 0x0108
 a46:	01 17       	cp	r16, r17
 a48:	08 f4       	brcc	.+2      	; 0xa4c <_KER_SCH_EXIT52>
 a4a:	b7 cf       	rjmp	.-146    	; 0x9ba <_KER_SCH_LOOP52>

00000a4c <_KER_SCH_EXIT52>:
 a4c:	00 91 0a 01 	lds	r16, 0x010A
 a50:	00 93 07 01 	sts	0x0107, r16
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 a54:	ee e0       	ldi	r30, 0x0E	; 14
 a56:	f1 e0       	ldi	r31, 0x01	; 1
 a58:	00 91 07 01 	lds	r16, 0x0107
 a5c:	00 0f       	add	r16, r16
 a5e:	e0 0f       	add	r30, r16
 a60:	00 e0       	ldi	r16, 0x00	; 0
 a62:	f0 1f       	adc	r31, r16
 a64:	00 81       	ld	r16, Z
 a66:	11 81       	ldd	r17, Z+1	; 0x01
 a68:	0d bf       	out	0x3d, r16	; 61
 a6a:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 a6c:	ff 91       	pop	r31
 a6e:	ef 91       	pop	r30
 a70:	df 91       	pop	r29
 a72:	cf 91       	pop	r28
 a74:	bf 91       	pop	r27
 a76:	af 91       	pop	r26
 a78:	9f 91       	pop	r25
 a7a:	8f 91       	pop	r24
 a7c:	7f 91       	pop	r23
 a7e:	6f 91       	pop	r22
 a80:	5f 91       	pop	r21
 a82:	4f 91       	pop	r20
 a84:	3f 91       	pop	r19
 a86:	2f 91       	pop	r18
 a88:	1f 91       	pop	r17
 a8a:	0f 91       	pop	r16
 a8c:	ff 90       	pop	r15
 a8e:	ef 90       	pop	r14
 a90:	df 90       	pop	r13
 a92:	cf 90       	pop	r12
 a94:	bf 90       	pop	r11
 a96:	af 90       	pop	r10
 a98:	9f 90       	pop	r9
 a9a:	8f 90       	pop	r8
 a9c:	7f 90       	pop	r7
 a9e:	6f 90       	pop	r6
 aa0:	5f 90       	pop	r5
 aa2:	4f 90       	pop	r4
 aa4:	3f 90       	pop	r3
 aa6:	2f 90       	pop	r2
 aa8:	1f 90       	pop	r1
 aaa:	0f 90       	pop	r0
 aac:	0f be       	out	0x3f, r0	; 63
 aae:	0f 90       	pop	r0
 ab0:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
 ab2:	08 95       	ret

00000ab4 <Kernel_Task_Constant_Latency>:
;arg registers           : R25:R24(SleepTime)                                                  
;return registers        : None                                                                
;unsafe access registers : R16, R24, R25, R30(ZL), R31(ZH)                                     
Kernel_Task_Constant_Latency:                             ;total 35.5uS @8MHz     ( 26 clocks) 
		;create next task wakeup time (args R25:R24)                                           
		CLI                                               ;disable interrupt      (  1 clock ) 
 ab4:	f8 94       	cli
		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 ab6:	e4 e4       	ldi	r30, 0x44	; 68
		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 ab8:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
 aba:	00 91 07 01 	lds	r16, 0x0107
 abe:	00 0f       	add	r16, r16
 ac0:	e0 0f       	add	r30, r16
 ac2:	00 e0       	ldi	r16, 0x00	; 0
 ac4:	f0 1f       	adc	r31, r16
		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
 ac6:	80 83       	st	Z, r24
		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 ac8:	91 83       	std	Z+1, r25	; 0x01
		;update task scheduler status as constant latency                                      
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 aca:	e0 e3       	ldi	r30, 0x30	; 48
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 acc:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
 ace:	00 91 07 01 	lds	r16, 0x0107
 ad2:	e0 0f       	add	r30, r16
 ad4:	00 e0       	ldi	r16, 0x00	; 0
 ad6:	f0 1f       	adc	r31, r16
        LDI   R16                , TASK_CONS_LAT          ;save as cons_lat       (  1 clock ) 
 ad8:	04 e0       	ldi	r16, 0x04	; 4
		STD   Z+0                , R16                    ;save block flag        (  2 clocks) 
 ada:	00 83       	st	Z, r16
		SEI                                               ;enable interrupt       (  1 clock ) 
 adc:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
 ade:	08 95       	ret

00000ae0 <Kernel_Task_Constant_Latency_Sleep>:
;arg registers           : R25:R24(SleepTime)                                                  
;return registers        : None                                                                
;unsafe access registers : R16, R24, R25, R30(ZL), R31(ZH)                                     
Kernel_Task_Constant_Latency_Sleep:                       ;total 35.5uS @8MHz     ( 26 clocks) 
		;save current context                                                                  
        KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
 ae0:	0f 92       	push	r0
 ae2:	0f b6       	in	r0, 0x3f	; 63
 ae4:	f8 94       	cli
 ae6:	0f 92       	push	r0
 ae8:	1f 92       	push	r1
 aea:	11 24       	eor	r1, r1
 aec:	2f 92       	push	r2
 aee:	3f 92       	push	r3
 af0:	4f 92       	push	r4
 af2:	5f 92       	push	r5
 af4:	6f 92       	push	r6
 af6:	7f 92       	push	r7
 af8:	8f 92       	push	r8
 afa:	9f 92       	push	r9
 afc:	af 92       	push	r10
 afe:	bf 92       	push	r11
 b00:	cf 92       	push	r12
 b02:	df 92       	push	r13
 b04:	ef 92       	push	r14
 b06:	ff 92       	push	r15
 b08:	0f 93       	push	r16
 b0a:	1f 93       	push	r17
 b0c:	2f 93       	push	r18
 b0e:	3f 93       	push	r19
 b10:	4f 93       	push	r20
 b12:	5f 93       	push	r21
 b14:	6f 93       	push	r22
 b16:	7f 93       	push	r23
 b18:	8f 93       	push	r24
 b1a:	9f 93       	push	r25
 b1c:	af 93       	push	r26
 b1e:	bf 93       	push	r27
 b20:	cf 93       	push	r28
 b22:	df 93       	push	r29
 b24:	ef 93       	push	r30
 b26:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 b28:	ee e0       	ldi	r30, 0x0E	; 14
 b2a:	f1 e0       	ldi	r31, 0x01	; 1
 b2c:	00 91 07 01 	lds	r16, 0x0107
 b30:	00 0f       	add	r16, r16
 b32:	e0 0f       	add	r30, r16
 b34:	00 e0       	ldi	r16, 0x00	; 0
 b36:	f0 1f       	adc	r31, r16
 b38:	0d b7       	in	r16, 0x3d	; 61
 b3a:	1e b7       	in	r17, 0x3e	; 62
 b3c:	00 83       	st	Z, r16
 b3e:	11 83       	std	Z+1, r17	; 0x01
		;update task scheduler status as blocked                                               
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 b40:	e0 e3       	ldi	r30, 0x30	; 48
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 b42:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
 b44:	00 91 07 01 	lds	r16, 0x0107
 b48:	e0 0f       	add	r30, r16
 b4a:	00 e0       	ldi	r16, 0x00	; 0
 b4c:	f0 1f       	adc	r31, r16
        LDI   R16                , TASK_CONS_LAT          ;cnstnt_lat until cnt=0 (  1 clock ) 
 b4e:	04 e0       	ldi	r16, 0x04	; 4
		STD   Z+0                , R16                    ;save block flag        (  2 clocks) 
 b50:	00 83       	st	Z, r16
		;run scheduler, load next task sp, restore context                                     
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 b52:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
 b54:	0f ef       	ldi	r16, 0xFF	; 255
 b56:	00 93 09 01 	sts	0x0109, r16
 b5a:	00 e0       	ldi	r16, 0x00	; 0
 b5c:	00 93 0a 01 	sts	0x010A, r16
 b60:	f8 2e       	mov	r15, r24

00000b62 <_KER_SCH_LOOP71>:
 b62:	00 93 07 01 	sts	0x0107, r16
 b66:	8f 2d       	mov	r24, r15
 b68:	e4 e4       	ldi	r30, 0x44	; 68
 b6a:	f1 e0       	ldi	r31, 0x01	; 1
 b6c:	00 91 07 01 	lds	r16, 0x0107
 b70:	00 0f       	add	r16, r16
 b72:	e0 0f       	add	r30, r16
 b74:	00 e0       	ldi	r16, 0x00	; 0
 b76:	f0 1f       	adc	r31, r16
 b78:	00 81       	ld	r16, Z
 b7a:	11 81       	ldd	r17, Z+1	; 0x01
 b7c:	20 2f       	mov	r18, r16
 b7e:	21 2b       	or	r18, r17
 b80:	59 f0       	breq	.+22     	; 0xb98 <_VAL_NULL72>
 b82:	81 30       	cpi	r24, 0x01	; 1
 b84:	99 f0       	breq	.+38     	; 0xbac <_VAL_NOT_NULL72>
 b86:	21 e0       	ldi	r18, 0x01	; 1
 b88:	02 1b       	sub	r16, r18
 b8a:	20 e0       	ldi	r18, 0x00	; 0
 b8c:	12 0b       	sbc	r17, r18
 b8e:	00 83       	st	Z, r16
 b90:	11 83       	std	Z+1, r17	; 0x01
 b92:	20 2f       	mov	r18, r16
 b94:	21 2b       	or	r18, r17
 b96:	51 f4       	brne	.+20     	; 0xbac <_VAL_NOT_NULL72>

00000b98 <_VAL_NULL72>:
 b98:	e0 e3       	ldi	r30, 0x30	; 48
 b9a:	f1 e0       	ldi	r31, 0x01	; 1
 b9c:	00 91 07 01 	lds	r16, 0x0107
 ba0:	e0 0f       	add	r30, r16
 ba2:	00 e0       	ldi	r16, 0x00	; 0
 ba4:	f0 1f       	adc	r31, r16
 ba6:	81 e0       	ldi	r24, 0x01	; 1
 ba8:	80 83       	st	Z, r24
 baa:	08 c0       	rjmp	.+16     	; 0xbbc <_EXIT_SLP_TIME72>

00000bac <_VAL_NOT_NULL72>:
 bac:	e0 e3       	ldi	r30, 0x30	; 48
 bae:	f1 e0       	ldi	r31, 0x01	; 1
 bb0:	00 91 07 01 	lds	r16, 0x0107
 bb4:	e0 0f       	add	r30, r16
 bb6:	00 e0       	ldi	r16, 0x00	; 0
 bb8:	f0 1f       	adc	r31, r16
 bba:	80 81       	ld	r24, Z

00000bbc <_EXIT_SLP_TIME72>:
 bbc:	81 30       	cpi	r24, 0x01	; 1
 bbe:	91 f4       	brne	.+36     	; 0xbe4 <_KER_SCH_NEXT71>
 bc0:	ea e3       	ldi	r30, 0x3A	; 58
 bc2:	f1 e0       	ldi	r31, 0x01	; 1
 bc4:	00 e0       	ldi	r16, 0x00	; 0
 bc6:	80 91 07 01 	lds	r24, 0x0107
 bca:	e8 0f       	add	r30, r24
 bcc:	f0 1f       	adc	r31, r16
 bce:	80 81       	ld	r24, Z
 bd0:	00 91 09 01 	lds	r16, 0x0109
 bd4:	80 17       	cp	r24, r16
 bd6:	30 f4       	brcc	.+12     	; 0xbe4 <_KER_SCH_NEXT71>
 bd8:	80 93 09 01 	sts	0x0109, r24
 bdc:	00 91 07 01 	lds	r16, 0x0107
 be0:	00 93 0a 01 	sts	0x010A, r16

00000be4 <_KER_SCH_NEXT71>:
 be4:	00 91 07 01 	lds	r16, 0x0107
 be8:	03 95       	inc	r16
 bea:	10 91 08 01 	lds	r17, 0x0108
 bee:	01 17       	cp	r16, r17
 bf0:	08 f4       	brcc	.+2      	; 0xbf4 <_KER_SCH_EXIT71>
 bf2:	b7 cf       	rjmp	.-146    	; 0xb62 <_KER_SCH_LOOP71>

00000bf4 <_KER_SCH_EXIT71>:
 bf4:	00 91 0a 01 	lds	r16, 0x010A
 bf8:	00 93 07 01 	sts	0x0107, r16
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 bfc:	ee e0       	ldi	r30, 0x0E	; 14
 bfe:	f1 e0       	ldi	r31, 0x01	; 1
 c00:	00 91 07 01 	lds	r16, 0x0107
 c04:	00 0f       	add	r16, r16
 c06:	e0 0f       	add	r30, r16
 c08:	00 e0       	ldi	r16, 0x00	; 0
 c0a:	f0 1f       	adc	r31, r16
 c0c:	00 81       	ld	r16, Z
 c0e:	11 81       	ldd	r17, Z+1	; 0x01
 c10:	0d bf       	out	0x3d, r16	; 61
 c12:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 c14:	ff 91       	pop	r31
 c16:	ef 91       	pop	r30
 c18:	df 91       	pop	r29
 c1a:	cf 91       	pop	r28
 c1c:	bf 91       	pop	r27
 c1e:	af 91       	pop	r26
 c20:	9f 91       	pop	r25
 c22:	8f 91       	pop	r24
 c24:	7f 91       	pop	r23
 c26:	6f 91       	pop	r22
 c28:	5f 91       	pop	r21
 c2a:	4f 91       	pop	r20
 c2c:	3f 91       	pop	r19
 c2e:	2f 91       	pop	r18
 c30:	1f 91       	pop	r17
 c32:	0f 91       	pop	r16
 c34:	ff 90       	pop	r15
 c36:	ef 90       	pop	r14
 c38:	df 90       	pop	r13
 c3a:	cf 90       	pop	r12
 c3c:	bf 90       	pop	r11
 c3e:	af 90       	pop	r10
 c40:	9f 90       	pop	r9
 c42:	8f 90       	pop	r8
 c44:	7f 90       	pop	r7
 c46:	6f 90       	pop	r6
 c48:	5f 90       	pop	r5
 c4a:	4f 90       	pop	r4
 c4c:	3f 90       	pop	r3
 c4e:	2f 90       	pop	r2
 c50:	1f 90       	pop	r1
 c52:	0f 90       	pop	r0
 c54:	0f be       	out	0x3f, r0	; 63
 c56:	0f 90       	pop	r0
 c58:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
 c5a:	08 95       	ret

00000c5c <Kernel_Task_Sleep_Time_Get>:
;used registers          : R16, R24, R25, R30(ZL), R31(ZH)                                     
;arg registers           : R24(TaskID)                                                         
;return registers        : R25:R24(SleepTime)                                                  
;unsafe access registers : R16, R24, R25, R30(ZL), R31(ZH)                                     
Kernel_Task_Sleep_Time_Get:                               ;total 1.88uS @8MHz     ( 15 clocks) 
		MOV   R16                , R24                    ;copy                   (  1 clock ) 
 c5c:	08 2f       	mov	r16, r24
		LSL   R16                                         ;x2                     (  1 clock ) 
 c5e:	00 0f       	add	r16, r16
		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 c60:	e4 e4       	ldi	r30, 0x44	; 68
		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 c62:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
 c64:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 c66:	00 e0       	ldi	r16, 0x00	; 0
		ADC   ZH                 , R16                    ;add high byte+carry    (  1 clock ) 
 c68:	f0 1f       	adc	r31, r16
		LDD   R24                , Z+0                    ;load sleep time        (  2 clocks) 
 c6a:	80 81       	ld	r24, Z
		LDD   R25                , Z+1                    ;load sleep time        (  2 clocks) 
 c6c:	91 81       	ldd	r25, Z+1	; 0x01
		RET                                               ;return from subroutine (  4 clocks) 
 c6e:	08 95       	ret

00000c70 <Kernel_Task_Status_Get>:
;used registers          : R16, R24, R30(ZL), R31(ZH)                                          
;arg registers           : R24(TaskID)                                                         
;return registers        : R24(TaskSts)                                                        
;unsafe access registers : R16, R24, R30(ZL), R31(ZH)                                          
Kernel_Task_Status_Get:                                   ;total 1.50uS @8MHz     ( 12 clocks) 
		MOV   R16                , R24                    ;copy                   (  1 clock ) 
 c70:	08 2f       	mov	r16, r24
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 c72:	e0 e3       	ldi	r30, 0x30	; 48
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 c74:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
 c76:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 c78:	00 e0       	ldi	r16, 0x00	; 0
		ADC   ZH                 , R16                    ;add high byte+carry    (  1 clock ) 
 c7a:	f0 1f       	adc	r31, r16
		LD    R24                , Z                      ;load task status       (  2 clocks) 
 c7c:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 c7e:	08 95       	ret

00000c80 <Kernel_NTask_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(NTask)                                                          
;unsafe access registers : R24                                                                 
Kernel_NTask_Get:                                         ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                 , KerBase+OFB_NTSK      ;load ntask             (  2 clock ) 
 c80:	80 91 08 01 	lds	r24, 0x0108
		RET                                               ;return from subroutine (  4 clocks) 
 c84:	08 95       	ret

00000c86 <Kernel_Task_Prio_Get>:
;arg registers           : R24(TaskID)                                                         
;return registers        : R24(TaskPriority)                                                   
;unsafe access registers : R16, R24, R30(ZL), R31(ZH)                                          
Kernel_Task_Prio_Get:                                     ;total 1.50uS @8MHz     ( 12 clocks) 
		;get priority of the task id, arg (task_id->R24), return R24                           
		MOV   R16                , R24                    ;copy task_id           (  1 clock ) 
 c86:	08 2f       	mov	r16, r24
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 c88:	ea e3       	ldi	r30, 0x3A	; 58
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 c8a:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
 c8c:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;clear reg              (  1 clock ) 
 c8e:	00 e0       	ldi	r16, 0x00	; 0
		ADC   ZH                 , R16                    ;add high byte+carry    (  1 clock ) 
 c90:	f0 1f       	adc	r31, r16
		LD    R24                , Z                      ;load priority          (  2 clocks) 
 c92:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 c94:	08 95       	ret

00000c96 <Kernel_Lowest_Prio_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(LowestPriorityVal)                                              
;unsafe access registers : R24                                                                 
Kernel_Lowest_Prio_Get:                                   ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
 c96:	80 91 09 01 	lds	r24, 0x0109
		RET                                               ;return from subroutine (  4 clocks) 
 c9a:	08 95       	ret

00000c9c <Kernel_High_Prio_Task_ID_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(HighstPriorityTaskID)->UserTaskID (Excluding Idle Task)         
;unsafe access registers : R24                                                                 
Kernel_High_Prio_Task_ID_Get:                             ;total 0.88uS @8MHz     (  7 clocks) 
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 c9c:	80 91 0a 01 	lds	r24, 0x010A
		DEC   R24                                         ;decrement by 1         (  1 clock ) 
 ca0:	8a 95       	dec	r24
		RET                                               ;return from subroutine (  4 clocks) 
 ca2:	08 95       	ret

00000ca4 <Kernel_Abs_High_Prio_Task_ID_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(HighstPriorityTaskID)->AbsoluteTaskID (Including Idle Task)     
;unsafe access registers : R24                                                                 
Kernel_Abs_High_Prio_Task_ID_Get:                         ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 ca4:	80 91 0a 01 	lds	r24, 0x010A
		RET                                               ;return from subroutine (  4 clocks) 
 ca8:	08 95       	ret

00000caa <Kernel_CPU_Usage_Get>:
;arg registers           : None                                                                
;return registers        : R24(CurrentCpuUsage)->In percentage                                 
;unsafe access registers : R24                                                                 
Kernel_CPU_Usage_Get:                                     ;total 0.75uS @8MHz     (  6 clocks) 
		;get cpu usage, return R24                                                             
		LDS   R24                , KerBase+OFB_USAGE      ;load cpu usage         (  2 clocks) 
 caa:	80 91 0d 01 	lds	r24, 0x010D
		RET                                               ;return from subroutine (  4 clocks) 
 cae:	08 95       	ret

00000cb0 <Debug_Init>:


;;===================================debug init starting====================================;; 
Debug_Init:                                               ;total 2.38uS @8MHz     ( 19 clocks) 
        ;init registers for UART0 (Arg R25:R24->UBRRH:UBRRL)                                   
		LDI   R16                , (1<<1)                 ;mask U2x               (  1 clock ) 
 cb0:	02 e0       	ldi	r16, 0x02	; 2
		STS   SRUCSR0A           , R16                    ;load val to UCSR0A     (  2 clocks) 
 cb2:	00 93 c0 00 	sts	0x00C0, r16
		MOV   R16                , R25                    ;copy R25->baud rate H  (  1 clock ) 
 cb6:	09 2f       	mov	r16, r25
		STS   SRUBRR0H           , R16                    ;load val to UBRR0H     (  2 clocks) 
 cb8:	00 93 c5 00 	sts	0x00C5, r16
		MOV   R16                , R24                    ;copy R24->baud rate L  (  1 clock ) 
 cbc:	08 2f       	mov	r16, r24
		STS   SRUBRR0L           , R16                    ;load val to UBRR0L     (  2 clocks) 
 cbe:	00 93 c4 00 	sts	0x00C4, r16
		LDI   R16                , (1<<1)|(1<<2)          ;config 8 data bit      (  1 clock ) 
 cc2:	06 e0       	ldi	r16, 0x06	; 6
		STS   SRUCSR0C           , R16                    ;load val to UCSR0C     (  2 clocks) 
 cc4:	00 93 c2 00 	sts	0x00C2, r16
		LDI   R16                , (1<<3)                 ;enable tx              (  1 clock ) 
 cc8:	08 e0       	ldi	r16, 0x08	; 8
		STS   SRUCSR0B           , R16                    ;load val to UCSR0B     (  2 clocks) 
 cca:	00 93 c1 00 	sts	0x00C1, r16
        RET                                               ;return from subroutine (  4 clocks) 
 cce:	08 95       	ret

00000cd0 <Debug_Tx_Byte>:



;;====================================debug tx starting=====================================;; 
Debug_Tx_Byte:                                            ;total 2.00uS+LT @8MHz  ( 13 clocks) 
        MOV   R25                , R24                    ;copy r24               (  1 clock ) 
 cd0:	98 2f       	mov	r25, r24

00000cd2 <_LOAD_UCSR0A>:
	_LOAD_UCSR0A:
		LDS   R24                , SRUCSR0A               ;load UCSR0A            (  2 clocks) 
 cd2:	80 91 c0 00 	lds	r24, 0x00C0
		SBRS  R24                , 0x05                   ;skip if UDRE0 is set   (  2 clocks) 
 cd6:	85 ff       	sbrs	r24, 5
        RJMP  _LOAD_UCSR0A                                ;jump to load UCSR0A    (  2 clocks) 
 cd8:	fc cf       	rjmp	.-8      	; 0xcd2 <_LOAD_UCSR0A>
        STS   SRUDR0             , R24                    ;load val to UDR0       (  2 clocks) 
 cda:	80 93 c6 00 	sts	0x00C6, r24
        RET                                               ;return from subroutine (  4 clocks) 
 cde:	08 95       	ret

00000ce0 <Debug_Tx_Word>:


;;==================================debug tx word starting==================================;; 
Debug_Tx_Word:                                            ;total 2.00uS+LT @8MHz  ( 16 clocks) 
		;write 2 bytes, (Arg R24, R25), Args retained                                          
		PUSH  R24                                         ;save reg               (  2 clocks) 
 ce0:	8f 93       	push	r24
		MOV   R24                , R25                    ;copy reg               (  1 clock ) 
 ce2:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte                               ;send via uart          ( 13 clocks) 
 ce4:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
        POP   R24                                         ;restore reg            (  2 clocks) 
 ce8:	8f 91       	pop	r24
		CALL  Debug_Tx_Byte                               ;send via uart          ( 21 clocks) 
 cea:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Debug_Tx_Byte>
        RET                                               ;return from subroutine (  4 clocks) 
 cee:	08 95       	ret

00000cf0 <Debug_Tx_Byte_Conf>:


;;================================debug tx confirm starting=================================;; 
Debug_Tx_Byte_Conf:                                       ;total 2.63uS+LT @8MHz  ( 21 clocks) 
        ;write 1 byte, (Arg R24), Args retained                                                
		PUSH  R16                                         ;save reg               (  2 clocks) 
 cf0:	0f 93       	push	r16
		STS   SRUDR0             , R24                    ;load val to UDR0,      (  2 clocks) 
 cf2:	80 93 c6 00 	sts	0x00C6, r24

00000cf6 <__TXC0_CLEARED>:
    __TXC0_CLEARED:                                                                            
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,    (  2 clocks) 
 cf6:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x06                   ;skip if TXC0 is set,   (  2 clocks) 
 cfa:	06 ff       	sbrs	r16, 6
		RJMP  __TXC0_CLEARED                              ;wait until TXC0 is set (  2 clocks) 
 cfc:	fc cf       	rjmp	.-8      	; 0xcf6 <__TXC0_CLEARED>
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,    (  2 clocks) 
 cfe:	00 91 c0 00 	lds	r16, 0x00C0
		ORI   R16                , (1<<6)                 ;mask bit 6,            (  1 clock ) 
 d02:	00 64       	ori	r16, 0x40	; 64
		STS   SRUCSR0A           , R16                    ;write reg with bit msk (  2 clocks) 
 d04:	00 93 c0 00 	sts	0x00C0, r16
		POP   R16                                         ;restore reg            (  2 clocks) 
 d08:	0f 91       	pop	r16
        RET                                               ;return from subroutine (  4 clocks) 
 d0a:	08 95       	ret

00000d0c <Debug_Tx_Word_Conf>:


;;==============================debug tx word confirm starting==============================;; 
Debug_Tx_Word_Conf:                                       ;total 6.38uS+LT @8MHz  ( 51 clocks) 
        ;write 2 bytes, (Arg R24, R25), Args retained                                          
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 d0c:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Debug_Tx_Byte_Conf>
		PUSH  R24                                         ;save reg               (  2 clocks) 
 d10:	8f 93       	push	r24
		MOV   R24                , R25                    ;copy R25 to R24        (  1 clock ) 
 d12:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 d14:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Debug_Tx_Byte_Conf>
		POP   R24                                         ;restore reg            (  2 clocks) 
 d18:	8f 91       	pop	r24
        RET                                               ;return from subroutine (  4 clocks) 
 d1a:	08 95       	ret

00000d1c <Debug_Tx_DWord_Conf>:


;;==============================debug tx dword confirm starting=============================;; 
Debug_Tx_DWord_Conf:                                      ;total 12.38uS+LT @8MHz ( 99 clocks) 
        ;write 4 bytes, (Arg R22-R25), Args retained                                           
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks) 
 d1c:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R22                    ;copy R22 to R24          (1 clock ) 
 d20:	86 2f       	mov	r24, r22
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 d22:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Debug_Tx_Byte_Conf>
		MOV   R24                , R23                    ;copy R23 to R24          (1 clock ) 
 d26:	87 2f       	mov	r24, r23
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 d28:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24              (2 clocks) 
 d2c:	80 91 4a 00 	lds	r24, 0x004A
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 d30:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Debug_Tx_Byte_Conf>
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks) 
 d34:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R25                    ;copy R22 to R24          (1 clock ) 
 d38:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 d3a:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24 val,         (2 clocks) 
 d3e:	80 91 4a 00 	lds	r24, 0x004A
        RET                                               ;return from subroutine,  (4 clocks) 
 d42:	08 95       	ret

00000d44 <Debug_Tx_From_RAM>:


;;=============================debug tx confirm from ram starting===========================;; 
Debug_Tx_From_RAM:                                        ;total 4.38uS+LT @8MHz  ( 35 clocks) 
        ;print data from RAM address (Arg R24-R25)                                             
		MOV   R16                , R30                    ;copy R30 to R16          (1 clock ) 
 d44:	0e 2f       	mov	r16, r30
		MOV   R17                , R31                    ;copy R31 to R17          (1 clock ) 
 d46:	1f 2f       	mov	r17, r31
		MOV   R18                , R24                    ;copy R24 to R18          (1 clock ) 
 d48:	28 2f       	mov	r18, r24
		MOV   R30                , R24                    ;copy R22 to R24          (1 clock ) 
 d4a:	e8 2f       	mov	r30, r24
		MOV   R31                , R25                    ;copy R22 to R24          (1 clock ) 
 d4c:	f9 2f       	mov	r31, r25
		LD    R24                , Z                      ;load val to R24          (2 clocks) 
 d4e:	80 81       	ld	r24, Z
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 d50:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Debug_Tx_Byte_Conf>
		MOV   R30                , R16                    ;copy R16 to R30          (1 clock ) 
 d54:	e0 2f       	mov	r30, r16
		MOV   R31                , R17                    ;copy R17 to R31          (1 clock ) 
 d56:	f1 2f       	mov	r31, r17
		MOV   R24                , R18                    ;copy R18 to R24          (1 clock ) 
 d58:	82 2f       	mov	r24, r18
        RET                                               ;return from subroutine,  (4 clocks) 
 d5a:	08 95       	ret

00000d5c <Debug_Tx_RAM_Area>:

;;=============================debug tx confirm ram area starting===========================;; 
Debug_Tx_RAM_Area:                                        ;5.5uS+LT x R22 @8MHz   ( 44 clocks) 
        ;print data from RAM address (arguments R24:R25, R22)                                  
	__DUMP_BYTES:                                                                              
	    CALL  Debug_Tx_From_RAM                           ;send via uart from ram              
 d5c:	0e 94 a2 06 	call	0xd44	; 0xd44 <Debug_Tx_From_RAM>
		SUBI  R24                , 0x01                   ;decrement from LSByte               
 d60:	81 50       	subi	r24, 0x01	; 1
        SBCI  R25                , 0x00                   ;decrement if carry                  
 d62:	90 40       	sbci	r25, 0x00	; 0
		SUBI  R22                , 0x01                   ;decrement                           
 d64:	61 50       	subi	r22, 0x01	; 1
		BRNE  __DUMP_BYTES                                                                     
 d66:	d1 f7       	brne	.-12     	; 0xd5c <Debug_Tx_RAM_Area>
        RET                                               ;return from subroutine,  (4 clocks) 
 d68:	08 95       	ret

00000d6a <_exit>:
 d6a:	f8 94       	cli

00000d6c <__stop_program>:
 d6c:	ff cf       	rjmp	.-2      	; 0xd6c <__stop_program>
