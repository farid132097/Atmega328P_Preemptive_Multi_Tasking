
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d0e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000558  00800100  00800100  00000d82  2**0
                  ALLOC
  2 .stab         00000c90  00000000  00000000  00000d84  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000006d  00000000  00000000  00001a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00001a81  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000bd  00000000  00000000  00001ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000188  00000000  00000000  00001b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000080  00000000  00000000  00001d06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e1  00000000  00000000  00001d86  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00002168  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000010e  00000000  00000000  00002228  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__vector_16>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	00 00       	nop
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 00       	nop
  76:	00 00       	nop
  78:	00 00       	nop
  7a:	00 00       	nop
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 00       	nop
  82:	00 00       	nop
  84:	00 00       	nop
  86:	00 00       	nop
  88:	a6 c1       	rjmp	.+844    	; 0x3d6 <__vector_16>

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61
  96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  9a:	0c 94 85 06 	jmp	0xd0a	; 0xd0a <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:


    
int main(void) {
    
	Kernel_Init();
  a2:	0e 94 31 04 	call	0x862	; 0x862 <Kernel_Init>

	Kernel_Task_Create(Tasks_Task1,  0);
  a6:	83 ec       	ldi	r24, 0xC3	; 195
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	0e 94 25 03 	call	0x64a	; 0x64a <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task2,  3);
  b0:	88 e9       	ldi	r24, 0x98	; 152
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	63 e0       	ldi	r22, 0x03	; 3
  b6:	0e 94 25 03 	call	0x64a	; 0x64a <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task3,  2);
  ba:	8d e6       	ldi	r24, 0x6D	; 109
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	62 e0       	ldi	r22, 0x02	; 2
  c0:	0e 94 25 03 	call	0x64a	; 0x64a <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task4,  1);
  c4:	82 e4       	ldi	r24, 0x42	; 66
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	0e 94 25 03 	call	0x64a	; 0x64a <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task5,  4);
  ce:	87 e1       	ldi	r24, 0x17	; 23
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	64 e0       	ldi	r22, 0x04	; 4
  d4:	0e 94 25 03 	call	0x64a	; 0x64a <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task6,  6);
  d8:	82 ef       	ldi	r24, 0xF2	; 242
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	66 e0       	ldi	r22, 0x06	; 6
  de:	0e 94 25 03 	call	0x64a	; 0x64a <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task7,  5);
  e2:	8d ec       	ldi	r24, 0xCD	; 205
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	65 e0       	ldi	r22, 0x05	; 5
  e8:	0e 94 25 03 	call	0x64a	; 0x64a <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task8,  8);
  ec:	88 ea       	ldi	r24, 0xA8	; 168
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	68 e0       	ldi	r22, 0x08	; 8
  f2:	0e 94 25 03 	call	0x64a	; 0x64a <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task9,  7);
  f6:	83 e8       	ldi	r24, 0x83	; 131
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	67 e0       	ldi	r22, 0x07	; 7
  fc:	0e 94 25 03 	call	0x64a	; 0x64a <Kernel_Task_Create>
	
	Kernel_Start_Tasks();
 100:	0e 94 a0 03 	call	0x740	; 0x740 <Kernel_Start_Tasks>
 104:	ff cf       	rjmp	.-2      	; 0x104 <SRUDR0+0x3e>

00000106 <Tasks_Task9>:
  }
}

void Tasks_Task9(void){
  
  Debug_Init(0);
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 27 06 	call	0xc4e	; 0xc4e <Debug_Init>
  
  while(1){
    
	  Debug_Tx_Byte(9);
 10e:	89 e0       	ldi	r24, 0x09	; 9
 110:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 fd 05 	call	0xbfa	; 0xbfa <Kernel_Task_Sleep_Time_Get>
 11a:	0e 94 40 06 	call	0xc80	; 0xc80 <Debug_Tx_Word>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(9));
 11e:	89 e0       	ldi	r24, 0x09	; 9
 120:	0e 94 fd 05 	call	0xbfa	; 0xbfa <Kernel_Task_Sleep_Time_Get>
 124:	0e 94 40 06 	call	0xc80	; 0xc80 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(9));
 128:	89 e0       	ldi	r24, 0x09	; 9
 12a:	0e 94 07 06 	call	0xc0e	; 0xc0e <Kernel_Task_Status_Get>
 12e:	80 5e       	subi	r24, 0xE0	; 224
 130:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 134:	0e 94 21 06 	call	0xc42	; 0xc42 <Kernel_Abs_High_Prio_Task_ID_Get>
 138:	80 5f       	subi	r24, 0xF0	; 240
 13a:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 13e:	0e 94 1a 06 	call	0xc34	; 0xc34 <Kernel_Lowest_Prio_Get>
 142:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    Kernel_Task_Sleep(90);
 146:	8a e5       	ldi	r24, 0x5A	; 90
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 61 04 	call	0x8c2	; 0x8c2 <Kernel_Task_Sleep>
 14e:	df cf       	rjmp	.-66     	; 0x10e <Tasks_Task9+0x8>

00000150 <Tasks_Task8>:
  }
}

void Tasks_Task8(void){
  
  Debug_Init(0);
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 27 06 	call	0xc4e	; 0xc4e <Debug_Init>
  
  while(1){
    
	  Debug_Tx_Byte(8);
 158:	88 e0       	ldi	r24, 0x08	; 8
 15a:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	0e 94 fd 05 	call	0xbfa	; 0xbfa <Kernel_Task_Sleep_Time_Get>
 164:	0e 94 40 06 	call	0xc80	; 0xc80 <Debug_Tx_Word>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(8));
 168:	88 e0       	ldi	r24, 0x08	; 8
 16a:	0e 94 fd 05 	call	0xbfa	; 0xbfa <Kernel_Task_Sleep_Time_Get>
 16e:	0e 94 40 06 	call	0xc80	; 0xc80 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(8));
 172:	88 e0       	ldi	r24, 0x08	; 8
 174:	0e 94 07 06 	call	0xc0e	; 0xc0e <Kernel_Task_Status_Get>
 178:	80 5e       	subi	r24, 0xE0	; 224
 17a:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 17e:	0e 94 21 06 	call	0xc42	; 0xc42 <Kernel_Abs_High_Prio_Task_ID_Get>
 182:	80 5f       	subi	r24, 0xF0	; 240
 184:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 188:	0e 94 1a 06 	call	0xc34	; 0xc34 <Kernel_Lowest_Prio_Get>
 18c:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    Kernel_Task_Sleep(80);
 190:	80 e5       	ldi	r24, 0x50	; 80
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 61 04 	call	0x8c2	; 0x8c2 <Kernel_Task_Sleep>
 198:	df cf       	rjmp	.-66     	; 0x158 <Tasks_Task8+0x8>

0000019a <Tasks_Task7>:
  }
}

void Tasks_Task7(void){
  
  Debug_Init(0);
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 27 06 	call	0xc4e	; 0xc4e <Debug_Init>
  
  while(1){
    
	  Debug_Tx_Byte(7);
 1a2:	87 e0       	ldi	r24, 0x07	; 7
 1a4:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	0e 94 fd 05 	call	0xbfa	; 0xbfa <Kernel_Task_Sleep_Time_Get>
 1ae:	0e 94 40 06 	call	0xc80	; 0xc80 <Debug_Tx_Word>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(7));
 1b2:	87 e0       	ldi	r24, 0x07	; 7
 1b4:	0e 94 fd 05 	call	0xbfa	; 0xbfa <Kernel_Task_Sleep_Time_Get>
 1b8:	0e 94 40 06 	call	0xc80	; 0xc80 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(7));
 1bc:	87 e0       	ldi	r24, 0x07	; 7
 1be:	0e 94 07 06 	call	0xc0e	; 0xc0e <Kernel_Task_Status_Get>
 1c2:	80 5e       	subi	r24, 0xE0	; 224
 1c4:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 1c8:	0e 94 21 06 	call	0xc42	; 0xc42 <Kernel_Abs_High_Prio_Task_ID_Get>
 1cc:	80 5f       	subi	r24, 0xF0	; 240
 1ce:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 1d2:	0e 94 1a 06 	call	0xc34	; 0xc34 <Kernel_Lowest_Prio_Get>
 1d6:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    Kernel_Task_Sleep(70);
 1da:	86 e4       	ldi	r24, 0x46	; 70
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 61 04 	call	0x8c2	; 0x8c2 <Kernel_Task_Sleep>
 1e2:	df cf       	rjmp	.-66     	; 0x1a2 <Tasks_Task7+0x8>

000001e4 <Tasks_Task6>:
  }
}

void Tasks_Task6(void){
  
  Debug_Init(0);
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 27 06 	call	0xc4e	; 0xc4e <Debug_Init>
  
  while(1){
    
    Debug_Tx_Byte(6);
 1ec:	86 e0       	ldi	r24, 0x06	; 6
 1ee:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	0e 94 fd 05 	call	0xbfa	; 0xbfa <Kernel_Task_Sleep_Time_Get>
 1f8:	0e 94 40 06 	call	0xc80	; 0xc80 <Debug_Tx_Word>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(6));
 1fc:	86 e0       	ldi	r24, 0x06	; 6
 1fe:	0e 94 fd 05 	call	0xbfa	; 0xbfa <Kernel_Task_Sleep_Time_Get>
 202:	0e 94 40 06 	call	0xc80	; 0xc80 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(6));
 206:	86 e0       	ldi	r24, 0x06	; 6
 208:	0e 94 07 06 	call	0xc0e	; 0xc0e <Kernel_Task_Status_Get>
 20c:	80 5e       	subi	r24, 0xE0	; 224
 20e:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 212:	0e 94 21 06 	call	0xc42	; 0xc42 <Kernel_Abs_High_Prio_Task_ID_Get>
 216:	80 5f       	subi	r24, 0xF0	; 240
 218:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 21c:	0e 94 1a 06 	call	0xc34	; 0xc34 <Kernel_Lowest_Prio_Get>
 220:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    Kernel_Task_Sleep(60);
 224:	8c e3       	ldi	r24, 0x3C	; 60
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 61 04 	call	0x8c2	; 0x8c2 <Kernel_Task_Sleep>
 22c:	df cf       	rjmp	.-66     	; 0x1ec <Tasks_Task6+0x8>

0000022e <Tasks_Task5>:
    Kernel_Task_Sleep(40);
	
  }
}

void Tasks_Task5(void){
 22e:	1f 93       	push	r17
  
  DDRC |= (1<<5);
 230:	3d 9a       	sbi	0x07, 5	; 7

  Debug_Init(0);
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 27 06 	call	0xc4e	; 0xc4e <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<5);
 23a:	10 e2       	ldi	r17, 0x20	; 32
 23c:	88 b1       	in	r24, 0x08	; 8
 23e:	81 27       	eor	r24, r17
 240:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(5);
 242:	85 e0       	ldi	r24, 0x05	; 5
 244:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	0e 94 fd 05 	call	0xbfa	; 0xbfa <Kernel_Task_Sleep_Time_Get>
 24e:	0e 94 40 06 	call	0xc80	; 0xc80 <Debug_Tx_Word>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(5));
 252:	85 e0       	ldi	r24, 0x05	; 5
 254:	0e 94 fd 05 	call	0xbfa	; 0xbfa <Kernel_Task_Sleep_Time_Get>
 258:	0e 94 40 06 	call	0xc80	; 0xc80 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(5));
 25c:	85 e0       	ldi	r24, 0x05	; 5
 25e:	0e 94 07 06 	call	0xc0e	; 0xc0e <Kernel_Task_Status_Get>
 262:	80 5e       	subi	r24, 0xE0	; 224
 264:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 268:	0e 94 21 06 	call	0xc42	; 0xc42 <Kernel_Abs_High_Prio_Task_ID_Get>
 26c:	80 5f       	subi	r24, 0xF0	; 240
 26e:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 272:	0e 94 1a 06 	call	0xc34	; 0xc34 <Kernel_Lowest_Prio_Get>
 276:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    Kernel_Task_Sleep(50);
 27a:	82 e3       	ldi	r24, 0x32	; 50
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 61 04 	call	0x8c2	; 0x8c2 <Kernel_Task_Sleep>
 282:	dc cf       	rjmp	.-72     	; 0x23c <Tasks_Task5+0xe>

00000284 <Tasks_Task4>:
    Kernel_Task_Sleep(30);
	
  }
}

void Tasks_Task4(void){
 284:	1f 93       	push	r17
  
  DDRC |= (1<<4);
 286:	3c 9a       	sbi	0x07, 4	; 7

  Debug_Init(0);
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 27 06 	call	0xc4e	; 0xc4e <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<4);
 290:	10 e1       	ldi	r17, 0x10	; 16
 292:	88 b1       	in	r24, 0x08	; 8
 294:	81 27       	eor	r24, r17
 296:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(4);
 298:	84 e0       	ldi	r24, 0x04	; 4
 29a:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	0e 94 fd 05 	call	0xbfa	; 0xbfa <Kernel_Task_Sleep_Time_Get>
 2a4:	0e 94 40 06 	call	0xc80	; 0xc80 <Debug_Tx_Word>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(4));
 2a8:	84 e0       	ldi	r24, 0x04	; 4
 2aa:	0e 94 fd 05 	call	0xbfa	; 0xbfa <Kernel_Task_Sleep_Time_Get>
 2ae:	0e 94 40 06 	call	0xc80	; 0xc80 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(4));
 2b2:	84 e0       	ldi	r24, 0x04	; 4
 2b4:	0e 94 07 06 	call	0xc0e	; 0xc0e <Kernel_Task_Status_Get>
 2b8:	80 5e       	subi	r24, 0xE0	; 224
 2ba:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 2be:	0e 94 21 06 	call	0xc42	; 0xc42 <Kernel_Abs_High_Prio_Task_ID_Get>
 2c2:	80 5f       	subi	r24, 0xF0	; 240
 2c4:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 2c8:	0e 94 1a 06 	call	0xc34	; 0xc34 <Kernel_Lowest_Prio_Get>
 2cc:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    Kernel_Task_Sleep(40);
 2d0:	88 e2       	ldi	r24, 0x28	; 40
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 61 04 	call	0x8c2	; 0x8c2 <Kernel_Task_Sleep>
 2d8:	dc cf       	rjmp	.-72     	; 0x292 <Tasks_Task4+0xe>

000002da <Tasks_Task3>:
    Kernel_Task_Sleep(1);
	
  }
}

void Tasks_Task3(void){
 2da:	1f 93       	push	r17
  
  DDRC |= (1<<3);
 2dc:	3b 9a       	sbi	0x07, 3	; 7

  Debug_Init(0);
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 27 06 	call	0xc4e	; 0xc4e <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<3);
 2e6:	18 e0       	ldi	r17, 0x08	; 8
 2e8:	88 b1       	in	r24, 0x08	; 8
 2ea:	81 27       	eor	r24, r17
 2ec:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(3);
 2ee:	83 e0       	ldi	r24, 0x03	; 3
 2f0:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	0e 94 fd 05 	call	0xbfa	; 0xbfa <Kernel_Task_Sleep_Time_Get>
 2fa:	0e 94 40 06 	call	0xc80	; 0xc80 <Debug_Tx_Word>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(3));
 2fe:	83 e0       	ldi	r24, 0x03	; 3
 300:	0e 94 fd 05 	call	0xbfa	; 0xbfa <Kernel_Task_Sleep_Time_Get>
 304:	0e 94 40 06 	call	0xc80	; 0xc80 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(3));
 308:	83 e0       	ldi	r24, 0x03	; 3
 30a:	0e 94 07 06 	call	0xc0e	; 0xc0e <Kernel_Task_Status_Get>
 30e:	80 5e       	subi	r24, 0xE0	; 224
 310:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 314:	0e 94 21 06 	call	0xc42	; 0xc42 <Kernel_Abs_High_Prio_Task_ID_Get>
 318:	80 5f       	subi	r24, 0xF0	; 240
 31a:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 31e:	0e 94 1a 06 	call	0xc34	; 0xc34 <Kernel_Lowest_Prio_Get>
 322:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    Kernel_Task_Sleep(30);
 326:	8e e1       	ldi	r24, 0x1E	; 30
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 61 04 	call	0x8c2	; 0x8c2 <Kernel_Task_Sleep>
 32e:	dc cf       	rjmp	.-72     	; 0x2e8 <Tasks_Task3+0xe>

00000330 <Tasks_Task2>:
    Kernel_Task_Constant_Latency_Sleep();
    
  }
}

void Tasks_Task2(void){
 330:	1f 93       	push	r17
  
  DDRC |= (1<<2);
 332:	3a 9a       	sbi	0x07, 2	; 7

  Debug_Init(0);
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 27 06 	call	0xc4e	; 0xc4e <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<2);
 33c:	14 e0       	ldi	r17, 0x04	; 4
 33e:	88 b1       	in	r24, 0x08	; 8
 340:	81 27       	eor	r24, r17
 342:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(2);
 344:	82 e0       	ldi	r24, 0x02	; 2
 346:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	0e 94 fd 05 	call	0xbfa	; 0xbfa <Kernel_Task_Sleep_Time_Get>
 350:	0e 94 40 06 	call	0xc80	; 0xc80 <Debug_Tx_Word>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(2));
 354:	82 e0       	ldi	r24, 0x02	; 2
 356:	0e 94 fd 05 	call	0xbfa	; 0xbfa <Kernel_Task_Sleep_Time_Get>
 35a:	0e 94 40 06 	call	0xc80	; 0xc80 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(2));
 35e:	82 e0       	ldi	r24, 0x02	; 2
 360:	0e 94 07 06 	call	0xc0e	; 0xc0e <Kernel_Task_Status_Get>
 364:	80 5e       	subi	r24, 0xE0	; 224
 366:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 36a:	0e 94 21 06 	call	0xc42	; 0xc42 <Kernel_Abs_High_Prio_Task_ID_Get>
 36e:	80 5f       	subi	r24, 0xF0	; 240
 370:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 374:	0e 94 1a 06 	call	0xc34	; 0xc34 <Kernel_Lowest_Prio_Get>
 378:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    Kernel_Task_Sleep(1);
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 61 04 	call	0x8c2	; 0x8c2 <Kernel_Task_Sleep>
 384:	dc cf       	rjmp	.-72     	; 0x33e <Tasks_Task2+0xe>

00000386 <Tasks_Task1>:
#include <util/delay.h>
#include "kernel.h"
#include "tasks.h"
#include "debug.h"

void Tasks_Task1(void){
 386:	1f 93       	push	r17
  
  DDRC |= (1<<1);
 388:	39 9a       	sbi	0x07, 1	; 7

  Debug_Init(0);
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 27 06 	call	0xc4e	; 0xc4e <Debug_Init>
  
  while(1){
    
    Kernel_Task_Constant_Latency(10);
    PORTC ^= (1<<1);
 392:	12 e0       	ldi	r17, 0x02	; 2

  Debug_Init(0);
  
  while(1){
    
    Kernel_Task_Constant_Latency(10);
 394:	8a e0       	ldi	r24, 0x0A	; 10
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	0e 94 29 05 	call	0xa52	; 0xa52 <Kernel_Task_Constant_Latency>
    PORTC ^= (1<<1);
 39c:	88 b1       	in	r24, 0x08	; 8
 39e:	81 27       	eor	r24, r17
 3a0:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(1);
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0e 94 fd 05 	call	0xbfa	; 0xbfa <Kernel_Task_Sleep_Time_Get>
 3ae:	0e 94 40 06 	call	0xc80	; 0xc80 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	0e 94 07 06 	call	0xc0e	; 0xc0e <Kernel_Task_Status_Get>
 3b8:	80 5e       	subi	r24, 0xE0	; 224
 3ba:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 3be:	0e 94 21 06 	call	0xc42	; 0xc42 <Kernel_Abs_High_Prio_Task_ID_Get>
 3c2:	80 5f       	subi	r24, 0xF0	; 240
 3c4:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 3c8:	0e 94 1a 06 	call	0xc34	; 0xc34 <Kernel_Lowest_Prio_Get>
 3cc:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
    //Kernel_Task_Sleep(10);

    Kernel_Task_Constant_Latency_Sleep();
 3d0:	0e 94 3f 05 	call	0xa7e	; 0xa7e <Kernel_Task_Constant_Latency_Sleep>
 3d4:	df cf       	rjmp	.-66     	; 0x394 <Tasks_Task1+0xe>

000003d6 <__vector_16>:


;;=================================ISR execution starting===================================;; 
.global  __vector_16                                                                           
    __vector_16:                                          ;total 40.00uS @8MHz    (320 clocks) 
	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 3d6:	5d 9a       	sbi	0x0b, 5	; 11
        KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 3d8:	0f 92       	push	r0
 3da:	0f b6       	in	r0, 0x3f	; 63
 3dc:	0f 92       	push	r0
 3de:	1f 92       	push	r1
 3e0:	11 24       	eor	r1, r1
 3e2:	2f 92       	push	r2
 3e4:	3f 92       	push	r3
 3e6:	4f 92       	push	r4
 3e8:	5f 92       	push	r5
 3ea:	6f 92       	push	r6
 3ec:	7f 92       	push	r7
 3ee:	8f 92       	push	r8
 3f0:	9f 92       	push	r9
 3f2:	af 92       	push	r10
 3f4:	bf 92       	push	r11
 3f6:	cf 92       	push	r12
 3f8:	df 92       	push	r13
 3fa:	ef 92       	push	r14
 3fc:	ff 92       	push	r15
 3fe:	0f 93       	push	r16
 400:	1f 93       	push	r17
 402:	2f 93       	push	r18
 404:	3f 93       	push	r19
 406:	4f 93       	push	r20
 408:	5f 93       	push	r21
 40a:	6f 93       	push	r22
 40c:	7f 93       	push	r23
 40e:	8f 93       	push	r24
 410:	9f 93       	push	r25
 412:	af 93       	push	r26
 414:	bf 93       	push	r27
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	ef 93       	push	r30
 41c:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 41e:	ee e0       	ldi	r30, 0x0E	; 14
 420:	f1 e0       	ldi	r31, 0x01	; 1
 422:	00 91 07 01 	lds	r16, 0x0107
 426:	00 0f       	add	r16, r16
 428:	e0 0f       	add	r30, r16
 42a:	00 e0       	ldi	r16, 0x00	; 0
 42c:	f0 1f       	adc	r31, r16
 42e:	0d b7       	in	r16, 0x3d	; 61
 430:	1e b7       	in	r17, 0x3e	; 62
 432:	00 83       	st	Z, r16
 434:	11 83       	std	Z+1, r17	; 0x01
		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 436:	00 91 06 01 	lds	r16, 0x0106
 43a:	00 93 46 00 	sts	0x0046, r16
		KER_TICK_INCREMENT                                ;increment tick counter ( 26 clocks) 
 43e:	00 91 00 01 	lds	r16, 0x0100
 442:	03 95       	inc	r16
 444:	00 93 00 01 	sts	0x0100, r16
 448:	10 e0       	ldi	r17, 0x00	; 0
 44a:	00 91 01 01 	lds	r16, 0x0101
 44e:	01 1f       	adc	r16, r17
 450:	00 93 01 01 	sts	0x0101, r16
 454:	00 91 02 01 	lds	r16, 0x0102
 458:	01 1f       	adc	r16, r17
 45a:	00 93 02 01 	sts	0x0102, r16
 45e:	00 91 03 01 	lds	r16, 0x0103
 462:	01 1f       	adc	r16, r17
 464:	00 93 03 01 	sts	0x0103, r16
 468:	00 91 04 01 	lds	r16, 0x0104
 46c:	01 1f       	adc	r16, r17
 46e:	00 93 04 01 	sts	0x0104, r16
		LDI    R24               , SCH_MODE_HANDLER       ;set sch mode           (  1 clock ) 
 472:	80 e0       	ldi	r24, 0x00	; 0
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
 474:	0f ef       	ldi	r16, 0xFF	; 255
 476:	00 93 09 01 	sts	0x0109, r16
 47a:	00 e0       	ldi	r16, 0x00	; 0
 47c:	00 93 0a 01 	sts	0x010A, r16
 480:	98 2f       	mov	r25, r24

00000482 <_KER_SCH_LOOP8>:
 482:	00 93 07 01 	sts	0x0107, r16
 486:	89 2f       	mov	r24, r25
 488:	e4 e4       	ldi	r30, 0x44	; 68
 48a:	f1 e0       	ldi	r31, 0x01	; 1
 48c:	00 91 07 01 	lds	r16, 0x0107
 490:	00 0f       	add	r16, r16
 492:	e0 0f       	add	r30, r16
 494:	00 e0       	ldi	r16, 0x00	; 0
 496:	f0 1f       	adc	r31, r16
 498:	00 81       	ld	r16, Z
 49a:	11 81       	ldd	r17, Z+1	; 0x01
 49c:	20 2f       	mov	r18, r16
 49e:	21 2b       	or	r18, r17
 4a0:	59 f0       	breq	.+22     	; 0x4b8 <_VAL_NULL9>
 4a2:	81 30       	cpi	r24, 0x01	; 1
 4a4:	99 f0       	breq	.+38     	; 0x4cc <_VAL_NOT_NULL9>
 4a6:	21 e0       	ldi	r18, 0x01	; 1
 4a8:	02 1b       	sub	r16, r18
 4aa:	20 e0       	ldi	r18, 0x00	; 0
 4ac:	12 0b       	sbc	r17, r18
 4ae:	00 83       	st	Z, r16
 4b0:	11 83       	std	Z+1, r17	; 0x01
 4b2:	20 2f       	mov	r18, r16
 4b4:	21 2b       	or	r18, r17
 4b6:	51 f4       	brne	.+20     	; 0x4cc <_VAL_NOT_NULL9>

000004b8 <_VAL_NULL9>:
 4b8:	e0 e3       	ldi	r30, 0x30	; 48
 4ba:	f1 e0       	ldi	r31, 0x01	; 1
 4bc:	00 91 07 01 	lds	r16, 0x0107
 4c0:	e0 0f       	add	r30, r16
 4c2:	00 e0       	ldi	r16, 0x00	; 0
 4c4:	f0 1f       	adc	r31, r16
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	80 83       	st	Z, r24
 4ca:	08 c0       	rjmp	.+16     	; 0x4dc <_EXIT_SLP_TIME9>

000004cc <_VAL_NOT_NULL9>:
 4cc:	e0 e3       	ldi	r30, 0x30	; 48
 4ce:	f1 e0       	ldi	r31, 0x01	; 1
 4d0:	00 91 07 01 	lds	r16, 0x0107
 4d4:	e0 0f       	add	r30, r16
 4d6:	00 e0       	ldi	r16, 0x00	; 0
 4d8:	f0 1f       	adc	r31, r16
 4da:	80 81       	ld	r24, Z

000004dc <_EXIT_SLP_TIME9>:
 4dc:	81 30       	cpi	r24, 0x01	; 1
 4de:	91 f4       	brne	.+36     	; 0x504 <_KER_SCH_NEXT8>
 4e0:	ea e3       	ldi	r30, 0x3A	; 58
 4e2:	f1 e0       	ldi	r31, 0x01	; 1
 4e4:	00 e0       	ldi	r16, 0x00	; 0
 4e6:	80 91 07 01 	lds	r24, 0x0107
 4ea:	e8 0f       	add	r30, r24
 4ec:	f0 1f       	adc	r31, r16
 4ee:	80 81       	ld	r24, Z
 4f0:	00 91 09 01 	lds	r16, 0x0109
 4f4:	80 17       	cp	r24, r16
 4f6:	30 f4       	brcc	.+12     	; 0x504 <_KER_SCH_NEXT8>
 4f8:	80 93 09 01 	sts	0x0109, r24
 4fc:	00 91 07 01 	lds	r16, 0x0107
 500:	00 93 0a 01 	sts	0x010A, r16

00000504 <_KER_SCH_NEXT8>:
 504:	00 91 07 01 	lds	r16, 0x0107
 508:	03 95       	inc	r16
 50a:	10 91 08 01 	lds	r17, 0x0108
 50e:	01 17       	cp	r16, r17
 510:	08 f4       	brcc	.+2      	; 0x514 <_KER_SCH_EXIT8>
 512:	b7 cf       	rjmp	.-146    	; 0x482 <_KER_SCH_LOOP8>

00000514 <_KER_SCH_EXIT8>:
 514:	00 91 0a 01 	lds	r16, 0x010A
 518:	00 93 07 01 	sts	0x0107, r16
		KER_CPU_USAGE                                     ;calc cpu usage         ( 26 clocks) 
 51c:	00 91 07 01 	lds	r16, 0x0107
 520:	00 23       	and	r16, r16
 522:	29 f0       	breq	.+10     	; 0x52e <_KER_USG_TICK14>
 524:	00 91 0c 01 	lds	r16, 0x010C
 528:	03 95       	inc	r16
 52a:	00 93 0c 01 	sts	0x010C, r16

0000052e <_KER_USG_TICK14>:
 52e:	00 91 0b 01 	lds	r16, 0x010B
 532:	03 95       	inc	r16
 534:	04 36       	cpi	r16, 0x64	; 100
 536:	40 f0       	brcs	.+16     	; 0x548 <_KER_USG_UTC_SV14>
 538:	00 e0       	ldi	r16, 0x00	; 0
 53a:	10 91 0c 01 	lds	r17, 0x010C
 53e:	10 93 0d 01 	sts	0x010D, r17
 542:	10 e0       	ldi	r17, 0x00	; 0
 544:	10 93 0c 01 	sts	0x010C, r17

00000548 <_KER_USG_UTC_SV14>:
 548:	00 93 0b 01 	sts	0x010B, r16
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 54c:	ee e0       	ldi	r30, 0x0E	; 14
 54e:	f1 e0       	ldi	r31, 0x01	; 1
 550:	00 91 07 01 	lds	r16, 0x0107
 554:	00 0f       	add	r16, r16
 556:	e0 0f       	add	r30, r16
 558:	00 e0       	ldi	r16, 0x00	; 0
 55a:	f0 1f       	adc	r31, r16
 55c:	00 81       	ld	r16, Z
 55e:	11 81       	ldd	r17, Z+1	; 0x01
 560:	0d bf       	out	0x3d, r16	; 61
 562:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
 564:	ff 91       	pop	r31
 566:	ef 91       	pop	r30
 568:	df 91       	pop	r29
 56a:	cf 91       	pop	r28
 56c:	bf 91       	pop	r27
 56e:	af 91       	pop	r26
 570:	9f 91       	pop	r25
 572:	8f 91       	pop	r24
 574:	7f 91       	pop	r23
 576:	6f 91       	pop	r22
 578:	5f 91       	pop	r21
 57a:	4f 91       	pop	r20
 57c:	3f 91       	pop	r19
 57e:	2f 91       	pop	r18
 580:	1f 91       	pop	r17
 582:	0f 91       	pop	r16
 584:	ff 90       	pop	r15
 586:	ef 90       	pop	r14
 588:	df 90       	pop	r13
 58a:	cf 90       	pop	r12
 58c:	bf 90       	pop	r11
 58e:	af 90       	pop	r10
 590:	9f 90       	pop	r9
 592:	8f 90       	pop	r8
 594:	7f 90       	pop	r7
 596:	6f 90       	pop	r6
 598:	5f 90       	pop	r5
 59a:	4f 90       	pop	r4
 59c:	3f 90       	pop	r3
 59e:	2f 90       	pop	r2
 5a0:	1f 90       	pop	r1
 5a2:	0f 90       	pop	r0
 5a4:	0f be       	out	0x3f, r0	; 63
 5a6:	0f 90       	pop	r0
	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 5a8:	5d 98       	cbi	0x0b, 5	; 11
		RETI                                              ;return from interrupt  (  4 clocks) 
 5aa:	18 95       	reti

000005ac <Kernel_SysTick_Reg_Init>:
;used registers          : R16, R17, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
;arg registers           : R24(Prescaler), R22(ReloadVal)                                      
;return registers        : None                                                                
;unsafe access registers : R16, R17, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
Kernel_SysTick_Reg_Init:                                  ;total 11.5uS @8MHz     ( 92 clocks) 
        CLI                                               ;disable global int     (  1 clock ) 
 5ac:	f8 94       	cli
		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 5ae:	5d 98       	cbi	0x0b, 5	; 11
 5b0:	55 9a       	sbi	0x0a, 5	; 10
        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 5b2:	a0 91 22 01 	lds	r26, 0x0122
 5b6:	b0 91 23 01 	lds	r27, 0x0123
 5ba:	0d b7       	in	r16, 0x3d	; 61
 5bc:	1e b7       	in	r17, 0x3e	; 62
 5be:	0d 93       	st	X+, r16
 5c0:	1d 93       	st	X+, r17
 5c2:	ed 93       	st	X+, r30
 5c4:	fd 93       	st	X+, r31
 5c6:	a0 93 22 01 	sts	0x0122, r26
 5ca:	b0 93 23 01 	sts	0x0123, r27
		;clear reg                                                                             
		LDI   R16                , 0x00                   ;set 0x00 to R16        (  1 clock ) 
 5ce:	00 e0       	ldi	r16, 0x00	; 0
		;clear tick counter                                                                    
		STS   KerBase+OFB_TICK0  , R16                    ;clear  KerBase[0]      (  2 clocks) 
 5d0:	00 93 00 01 	sts	0x0100, r16
		STS   KerBase+OFB_TICK1  , R16                    ;clear  KerBase[1]      (  2 clocks) 
 5d4:	00 93 01 01 	sts	0x0101, r16
		STS   KerBase+OFB_TICK2  , R16                    ;clear  KerBase[2]      (  2 clocks) 
 5d8:	00 93 02 01 	sts	0x0102, r16
		STS   KerBase+OFB_TICK3  , R16                    ;clear  KerBase[3]      (  2 clocks) 
 5dc:	00 93 03 01 	sts	0x0103, r16
		STS   KerBase+OFB_TICK4  , R16                    ;clear  KerBase[4]      (  2 clocks) 
 5e0:	00 93 04 01 	sts	0x0104, r16
		;clear system registers                                                                
		STS   KerBase+OFB_PRS    , R16                    ;clear  KerBase[5]      (  2 clocks) 
 5e4:	00 93 05 01 	sts	0x0105, r16
		STS   KerBase+OFB_RLD    , R16                    ;clear  KerBase[6]      (  2 clocks) 
 5e8:	00 93 06 01 	sts	0x0106, r16
		STS   KerBase+OFB_TID    , R16                    ;clear  KerBase[7]      (  2 clocks) 
 5ec:	00 93 07 01 	sts	0x0107, r16
		STS   KerBase+OFB_NTSK   , R16                    ;clear  KerBase[8]      (  2 clocks) 
 5f0:	00 93 08 01 	sts	0x0108, r16
		STS   KerBase+OFB_LPR    , R16                    ;clear  KerBase[9]      (  2 clocks) 
 5f4:	00 93 09 01 	sts	0x0109, r16
        STS   KerBase+OFB_PTID   , R16                    ;clear  KerBase[10]     (  2 clocks) 
 5f8:	00 93 0a 01 	sts	0x010A, r16
		STS   KerBase+OFB_UTC    , R16                    ;clear  KerBase[11]     (  2 clocks) 
 5fc:	00 93 0b 01 	sts	0x010B, r16
		STS   KerBase+OFB_UATC   , R16                    ;clear  KerBase[12]     (  2 clocks) 
 600:	00 93 0c 01 	sts	0x010C, r16
		STS   KerBase+OFB_USAGE  , R16                    ;clear  KerBase[13]     (  2 clocks) 
 604:	00 93 0d 01 	sts	0x010D, r16
		;clear all timer registers                                                             
		STS   SRTCCR0A           , R16                    ;clear TCCR0A           (  2 clocks) 
 608:	00 93 44 00 	sts	0x0044, r16
		STS   SRTCCR0B           , R16                    ;clear TCCR0B           (  2 clocks) 
 60c:	00 93 45 00 	sts	0x0045, r16
		STS   SRTIMSK0           , R16                    ;clear TIMSK0           (  2 clocks) 
 610:	00 93 6e 00 	sts	0x006E, r16
		STS   SRTIFR0            , R16                    ;clear TIFR0            (  2 clocks) 
 614:	00 93 35 00 	sts	0x0035, r16
		STS   SROCR0A            , R16                    ;clear OCR0A            (  2 clocks) 
 618:	00 93 47 00 	sts	0x0047, r16
		STS   SROCR0B            , R16                    ;clear OCR0B            (  2 clocks) 
 61c:	00 93 48 00 	sts	0x0048, r16
		STS   SRTCNT0            , R16                    ;clear TCNT0            (  2 clocks) 
 620:	00 93 46 00 	sts	0x0046, r16
		;save values for future use                                                            
		STS   KerBase+OFB_PRS    , R24                    ;KerBase[5] prescaler   (  2 clocks) 
 624:	80 93 05 01 	sts	0x0105, r24
		STS   KerBase+OFB_RLD    , R22                    ;KerBase[6] reload val  (  2 clocks) 
 628:	60 93 06 01 	sts	0x0106, r22
        KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 62c:	a0 91 22 01 	lds	r26, 0x0122
 630:	b0 91 23 01 	lds	r27, 0x0123
 634:	fe 91       	ld	r31, -X
 636:	ee 91       	ld	r30, -X
 638:	1e 91       	ld	r17, -X
 63a:	0e 91       	ld	r16, -X
 63c:	0d bf       	out	0x3d, r16	; 61
 63e:	1e bf       	out	0x3e, r17	; 62
 640:	a0 93 22 01 	sts	0x0122, r26
 644:	b0 93 23 01 	sts	0x0123, r27
		RET                                               ;return from subroutine (  4 clocks) 
 648:	08 95       	ret

0000064a <Kernel_Task_Create>:
;used registers          : R16, R17, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)         
;arg registers           : R25:R24(FuncPtr), R22(TaskPriority)                                 
;return registers        : None                                                                
;unsafe access registers : R16, R17, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)         
Kernel_Task_Create:                                       ;total 20.38uS @8MHz    (163 clocks) 
        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 64a:	a0 91 22 01 	lds	r26, 0x0122
 64e:	b0 91 23 01 	lds	r27, 0x0123
 652:	0d b7       	in	r16, 0x3d	; 61
 654:	1e b7       	in	r17, 0x3e	; 62
 656:	0d 93       	st	X+, r16
 658:	1d 93       	st	X+, r17
 65a:	ed 93       	st	X+, r30
 65c:	fd 93       	st	X+, r31
 65e:	a0 93 22 01 	sts	0x0122, r26
 662:	b0 93 23 01 	sts	0x0123, r27
		LDI   R17                , 0x00                   ;clear reg              (  1 clock ) 
 666:	10 e0       	ldi	r17, 0x00	; 0
		;set priority to KerSchPr+task_id                                                      
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 668:	ea e3       	ldi	r30, 0x3A	; 58
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 66a:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 66c:	00 91 07 01 	lds	r16, 0x0107
 670:	e0 0f       	add	r30, r16
 672:	00 e0       	ldi	r16, 0x00	; 0
 674:	f0 1f       	adc	r31, r16
		ST    Z                  , R22                    ;save priority          (  2 clocks) 
 676:	60 83       	st	Z, r22
		;set task status to KerSchSts+task_id                                                  
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 678:	e0 e3       	ldi	r30, 0x30	; 48
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 67a:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 67c:	00 91 07 01 	lds	r16, 0x0107
 680:	e0 0f       	add	r30, r16
 682:	00 e0       	ldi	r16, 0x00	; 0
 684:	f0 1f       	adc	r31, r16
		LDI   R16                , TASK_READY             ;set status as ready    (  1 clock ) 
 686:	01 e0       	ldi	r16, 0x01	; 1
		ST    Z                  , R16                    ;save status            (  2 clocks) 
 688:	00 83       	st	Z, r16
		;stack pointer for current task (KerStack + KER_STK_SZ*(task_id+1) - 1) ->stack top    
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 68a:	00 91 07 01 	lds	r16, 0x0107
		MOV   R17                , R16                    ;load task_id           (  1 clock ) 
 68e:	10 2f       	mov	r17, r16
		INC   R17                                         ;increment task_id      (  1 clock ) 
 690:	13 95       	inc	r17
		LDI   R18                , KER_STK_SZ             ;load stack size        (  1 clock ) 
 692:	20 e8       	ldi	r18, 0x80	; 128
		MUL   R17                , R18                    ;multiply to get offset (  2 clocks) 
 694:	12 9f       	mul	r17, r18
		MOV   ZL                 , R0                     ;load multiplied low    (  1 clocks) 
 696:	e0 2d       	mov	r30, r0
		MOV   ZH                 , R1                     ;load multiplied high   (  1 clocks) 
 698:	f1 2d       	mov	r31, r1
		SBIW  ZL                 , 0x01                   ;dec multiplied val-1   (  2 clocks) 
 69a:	31 97       	sbiw	r30, 0x01	; 1
		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 69c:	11 24       	eor	r1, r1
		LDI   R17                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
 69e:	18 e5       	ldi	r17, 0x58	; 88
		LDI   R18                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
 6a0:	21 e0       	ldi	r18, 0x01	; 1
		ADD   ZL                 , R17                    ;add low bytes          (  1 clock ) 
 6a2:	e1 0f       	add	r30, r17
		ADC   ZH                 , R18                    ;add high bytes+carry   (  1 clock ) 
 6a4:	f2 1f       	adc	r31, r18
		OUT   IOSPL              , ZL                     ;load SPL               (  1 clock ) 
 6a6:	ed bf       	out	0x3d, r30	; 61
        OUT   IOSPH              , ZH                     ;load SPH               (  1 clock ) 
 6a8:	fe bf       	out	0x3e, r31	; 62
		;function argument directly returns word address                                       
	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
 6aa:	8f 93       	push	r24
		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 6ac:	9f 93       	push	r25
		;push context to stack of this task                                                    
		KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 6ae:	0f 92       	push	r0
 6b0:	0f b6       	in	r0, 0x3f	; 63
 6b2:	0f 92       	push	r0
 6b4:	1f 92       	push	r1
 6b6:	11 24       	eor	r1, r1
 6b8:	2f 92       	push	r2
 6ba:	3f 92       	push	r3
 6bc:	4f 92       	push	r4
 6be:	5f 92       	push	r5
 6c0:	6f 92       	push	r6
 6c2:	7f 92       	push	r7
 6c4:	8f 92       	push	r8
 6c6:	9f 92       	push	r9
 6c8:	af 92       	push	r10
 6ca:	bf 92       	push	r11
 6cc:	cf 92       	push	r12
 6ce:	df 92       	push	r13
 6d0:	ef 92       	push	r14
 6d2:	ff 92       	push	r15
 6d4:	0f 93       	push	r16
 6d6:	1f 93       	push	r17
 6d8:	2f 93       	push	r18
 6da:	3f 93       	push	r19
 6dc:	4f 93       	push	r20
 6de:	5f 93       	push	r21
 6e0:	6f 93       	push	r22
 6e2:	7f 93       	push	r23
 6e4:	8f 93       	push	r24
 6e6:	9f 93       	push	r25
 6e8:	af 93       	push	r26
 6ea:	bf 93       	push	r27
 6ec:	cf 93       	push	r28
 6ee:	df 93       	push	r29
 6f0:	ef 93       	push	r30
 6f2:	ff 93       	push	r31
		;read stack pointer of current task (necessary when restore)                           
		IN    R17                , IOSPL                  ;read SPL               (  1 clock ) 
 6f4:	1d b7       	in	r17, 0x3d	; 61
        IN    R18                , IOSPH                  ;read SPH               (  1 clock ) 
 6f6:	2e b7       	in	r18, 0x3e	; 62
		;calculate the address where current task's SP will be stored and store SP             
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 6f8:	00 91 07 01 	lds	r16, 0x0107
		MOV   R19                , R16                    ;copy task_id           (  1 clock ) 
 6fc:	30 2f       	mov	r19, r16
		LSL   R19                                         ;left shift to multiply (  1 clock ) 
 6fe:	33 0f       	add	r19, r19
		LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 700:	ee e0       	ldi	r30, 0x0E	; 14
		LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 702:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R19                    ;add offset to array    (  1 clock ) 
 704:	e3 0f       	add	r30, r19
		LDI   R16                , 0x00                   ;clear reg              (  1 clock ) 
 706:	00 e0       	ldi	r16, 0x00	; 0
		ADC   ZH                 , R16                    ;add carry if any       (  1 clock ) 
 708:	f0 1f       	adc	r31, r16
		ST    Z+                 , R17                    ;SPL at KerPSp+offset   (  2 clocks) 
 70a:	11 93       	st	Z+, r17
		ST    Z                  , R18                    ;SPH at KerPSp+offset   (  2 clocks) 
 70c:	20 83       	st	Z, r18
		;increment task_id                                                                     
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 70e:	00 91 07 01 	lds	r16, 0x0107
		INC   R16                                         ;increment task_id      (  1 clock ) 
 712:	03 95       	inc	r16
		STS   KerBase+OFB_TID    , R16                    ;store task_id          (  2 clocks) 
 714:	00 93 07 01 	sts	0x0107, r16
		;increment ntask                                                                       
		LDS   R16                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 718:	00 91 08 01 	lds	r16, 0x0108
		INC   R16                                         ;increment ntask        (  1 clock ) 
 71c:	03 95       	inc	r16
		STS   KerBase+OFB_NTSK   , R16                    ;store ntask            (  2 clocks) 
 71e:	00 93 08 01 	sts	0x0108, r16
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 722:	a0 91 22 01 	lds	r26, 0x0122
 726:	b0 91 23 01 	lds	r27, 0x0123
 72a:	fe 91       	ld	r31, -X
 72c:	ee 91       	ld	r30, -X
 72e:	1e 91       	ld	r17, -X
 730:	0e 91       	ld	r16, -X
 732:	0d bf       	out	0x3d, r16	; 61
 734:	1e bf       	out	0x3e, r17	; 62
 736:	a0 93 22 01 	sts	0x0122, r26
 73a:	b0 93 23 01 	sts	0x0123, r27
		RET                                               ;return from subroutine (  4 clocks) 
 73e:	08 95       	ret

00000740 <Kernel_Start_Tasks>:
;used registers          : R0~R31                                                              
;arg registers           : None                                                                
;return registers        : None                                                                
;unsafe access registers : R16, R17, R18, R24, R25, R30(ZL), R31(ZH)                           
Kernel_Start_Tasks:                                       ;total 11.38uS @8MHz    ( 91 clocks) 
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 740:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
 742:	0f ef       	ldi	r16, 0xFF	; 255
 744:	00 93 09 01 	sts	0x0109, r16
 748:	00 e0       	ldi	r16, 0x00	; 0
 74a:	00 93 0a 01 	sts	0x010A, r16
 74e:	98 2f       	mov	r25, r24

00000750 <_KER_SCH_LOOP31>:
 750:	00 93 07 01 	sts	0x0107, r16
 754:	89 2f       	mov	r24, r25
 756:	e4 e4       	ldi	r30, 0x44	; 68
 758:	f1 e0       	ldi	r31, 0x01	; 1
 75a:	00 91 07 01 	lds	r16, 0x0107
 75e:	00 0f       	add	r16, r16
 760:	e0 0f       	add	r30, r16
 762:	00 e0       	ldi	r16, 0x00	; 0
 764:	f0 1f       	adc	r31, r16
 766:	00 81       	ld	r16, Z
 768:	11 81       	ldd	r17, Z+1	; 0x01
 76a:	20 2f       	mov	r18, r16
 76c:	21 2b       	or	r18, r17
 76e:	59 f0       	breq	.+22     	; 0x786 <_VAL_NULL32>
 770:	81 30       	cpi	r24, 0x01	; 1
 772:	99 f0       	breq	.+38     	; 0x79a <_VAL_NOT_NULL32>
 774:	21 e0       	ldi	r18, 0x01	; 1
 776:	02 1b       	sub	r16, r18
 778:	20 e0       	ldi	r18, 0x00	; 0
 77a:	12 0b       	sbc	r17, r18
 77c:	00 83       	st	Z, r16
 77e:	11 83       	std	Z+1, r17	; 0x01
 780:	20 2f       	mov	r18, r16
 782:	21 2b       	or	r18, r17
 784:	51 f4       	brne	.+20     	; 0x79a <_VAL_NOT_NULL32>

00000786 <_VAL_NULL32>:
 786:	e0 e3       	ldi	r30, 0x30	; 48
 788:	f1 e0       	ldi	r31, 0x01	; 1
 78a:	00 91 07 01 	lds	r16, 0x0107
 78e:	e0 0f       	add	r30, r16
 790:	00 e0       	ldi	r16, 0x00	; 0
 792:	f0 1f       	adc	r31, r16
 794:	81 e0       	ldi	r24, 0x01	; 1
 796:	80 83       	st	Z, r24
 798:	08 c0       	rjmp	.+16     	; 0x7aa <_EXIT_SLP_TIME32>

0000079a <_VAL_NOT_NULL32>:
 79a:	e0 e3       	ldi	r30, 0x30	; 48
 79c:	f1 e0       	ldi	r31, 0x01	; 1
 79e:	00 91 07 01 	lds	r16, 0x0107
 7a2:	e0 0f       	add	r30, r16
 7a4:	00 e0       	ldi	r16, 0x00	; 0
 7a6:	f0 1f       	adc	r31, r16
 7a8:	80 81       	ld	r24, Z

000007aa <_EXIT_SLP_TIME32>:
 7aa:	81 30       	cpi	r24, 0x01	; 1
 7ac:	91 f4       	brne	.+36     	; 0x7d2 <_KER_SCH_NEXT31>
 7ae:	ea e3       	ldi	r30, 0x3A	; 58
 7b0:	f1 e0       	ldi	r31, 0x01	; 1
 7b2:	00 e0       	ldi	r16, 0x00	; 0
 7b4:	80 91 07 01 	lds	r24, 0x0107
 7b8:	e8 0f       	add	r30, r24
 7ba:	f0 1f       	adc	r31, r16
 7bc:	80 81       	ld	r24, Z
 7be:	00 91 09 01 	lds	r16, 0x0109
 7c2:	80 17       	cp	r24, r16
 7c4:	30 f4       	brcc	.+12     	; 0x7d2 <_KER_SCH_NEXT31>
 7c6:	80 93 09 01 	sts	0x0109, r24
 7ca:	00 91 07 01 	lds	r16, 0x0107
 7ce:	00 93 0a 01 	sts	0x010A, r16

000007d2 <_KER_SCH_NEXT31>:
 7d2:	00 91 07 01 	lds	r16, 0x0107
 7d6:	03 95       	inc	r16
 7d8:	10 91 08 01 	lds	r17, 0x0108
 7dc:	01 17       	cp	r16, r17
 7de:	08 f4       	brcc	.+2      	; 0x7e2 <_KER_SCH_EXIT31>
 7e0:	b7 cf       	rjmp	.-146    	; 0x750 <_KER_SCH_LOOP31>

000007e2 <_KER_SCH_EXIT31>:
 7e2:	00 91 0a 01 	lds	r16, 0x010A
 7e6:	00 93 07 01 	sts	0x0107, r16
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 7ea:	ee e0       	ldi	r30, 0x0E	; 14
 7ec:	f1 e0       	ldi	r31, 0x01	; 1
 7ee:	00 91 07 01 	lds	r16, 0x0107
 7f2:	00 0f       	add	r16, r16
 7f4:	e0 0f       	add	r30, r16
 7f6:	00 e0       	ldi	r16, 0x00	; 0
 7f8:	f0 1f       	adc	r31, r16
 7fa:	00 81       	ld	r16, Z
 7fc:	11 81       	ldd	r17, Z+1	; 0x01
 7fe:	0d bf       	out	0x3d, r16	; 61
 800:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 802:	ff 91       	pop	r31
 804:	ef 91       	pop	r30
 806:	df 91       	pop	r29
 808:	cf 91       	pop	r28
 80a:	bf 91       	pop	r27
 80c:	af 91       	pop	r26
 80e:	9f 91       	pop	r25
 810:	8f 91       	pop	r24
 812:	7f 91       	pop	r23
 814:	6f 91       	pop	r22
 816:	5f 91       	pop	r21
 818:	4f 91       	pop	r20
 81a:	3f 91       	pop	r19
 81c:	2f 91       	pop	r18
 81e:	1f 91       	pop	r17
 820:	0f 91       	pop	r16
 822:	ff 90       	pop	r15
 824:	ef 90       	pop	r14
 826:	df 90       	pop	r13
 828:	cf 90       	pop	r12
 82a:	bf 90       	pop	r11
 82c:	af 90       	pop	r10
 82e:	9f 90       	pop	r9
 830:	8f 90       	pop	r8
 832:	7f 90       	pop	r7
 834:	6f 90       	pop	r6
 836:	5f 90       	pop	r5
 838:	4f 90       	pop	r4
 83a:	3f 90       	pop	r3
 83c:	2f 90       	pop	r2
 83e:	1f 90       	pop	r1
 840:	0f 90       	pop	r0
 842:	0f be       	out	0x3f, r0	; 63
 844:	0f 90       	pop	r0
 846:	78 94       	sei
		;config timer for system tick                                                          
		KER_TIMER_INIT                                    ;init timer, int enable ( 12 clocks) 
 848:	00 91 05 01 	lds	r16, 0x0105
 84c:	10 91 06 01 	lds	r17, 0x0106
 850:	00 93 45 00 	sts	0x0045, r16
 854:	10 93 46 00 	sts	0x0046, r17
 858:	01 e0       	ldi	r16, 0x01	; 1
 85a:	00 93 6e 00 	sts	0x006E, r16
 85e:	78 94       	sei
		;execute return to jump to highest priority task                                       
		RET                                               ;return from subroutine (  4 clocks) 
 860:	08 95       	ret

00000862 <Kernel_Init>:
;used registers          : R1, R16, R17, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
;arg registers           : None                                                                
;return registers        : None                                                                
;unsafe access registers : R1, R16, R17, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
Kernel_Init:                                              ;total 38.63uS @8MHz    (309 clocks) 
		CLR   R1                                          ;gcc expects            (  1 clock ) 
 862:	11 24       	eor	r1, r1
        ;store stack top (for MSP) addr to KerSSZ+OFM_MSPI0:1                                  
		LDI   R16                , lo8(KerSSZ+OFM_MSPS)   ;load low address       (  1 clock ) 
 864:	04 e2       	ldi	r16, 0x24	; 36
		LDI   R17                , hi8(KerSSZ+OFM_MSPS)   ;load high address      (  1 clock ) 
 866:	11 e0       	ldi	r17, 0x01	; 1
        STS   KerSSZ+OFM_MSPI+0  , R16                    ;set mspi to stack top  (  2 clocks) 
 868:	00 93 22 01 	sts	0x0122, r16
		STS   KerSSZ+OFM_MSPI+1  , R17                    ;set mspi to stack top  (  2 clocks) 
 86c:	10 93 23 01 	sts	0x0123, r17
		KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 870:	a0 91 22 01 	lds	r26, 0x0122
 874:	b0 91 23 01 	lds	r27, 0x0123
 878:	0d b7       	in	r16, 0x3d	; 61
 87a:	1e b7       	in	r17, 0x3e	; 62
 87c:	0d 93       	st	X+, r16
 87e:	1d 93       	st	X+, r17
 880:	ed 93       	st	X+, r30
 882:	fd 93       	st	X+, r31
 884:	a0 93 22 01 	sts	0x0122, r26
 888:	b0 93 23 01 	sts	0x0123, r27
		;init timer for kernel                                                                 
		LDI   R24                , 0x03                   ;set prescaler          (  1 clock ) 
 88c:	83 e0       	ldi	r24, 0x03	; 3
		LDI   R22                , 0x82                   ;set reload val         (  1 clock ) 
 88e:	62 e8       	ldi	r22, 0x82	; 130
		CALL  Kernel_SysTick_Reg_Init                     ;init timer             ( 92 clocks) 
 890:	0e 94 d6 02 	call	0x5ac	; 0x5ac <Kernel_SysTick_Reg_Init>
		;create idle task at task_id 0, priority 0xFF (lowest)                                 
		LDI   R24                , lo8(Kernel_Task_Idle)  ;load func addr low     (  1 clock ) 
 894:	80 ec       	ldi	r24, 0xC0	; 192
		LDI   R25                , hi8(Kernel_Task_Idle)  ;load func addr high    (  1 clock ) 
 896:	98 e0       	ldi	r25, 0x08	; 8
		LSR   R25                                         ;right shift to divide  (  1 clock ) 
 898:	96 95       	lsr	r25
		ROR   R24                                         ;rotate right th carry  (  1 clock ) 
 89a:	87 95       	ror	r24
		LDI   R22                , 0xFF                   ;set max val            (  1 clock ) 
 89c:	6f ef       	ldi	r22, 0xFF	; 255
		CALL  Kernel_Task_Create                          ;init idle task         (163 clocks) 
 89e:	0e 94 25 03 	call	0x64a	; 0x64a <Kernel_Task_Create>
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 8a2:	a0 91 22 01 	lds	r26, 0x0122
 8a6:	b0 91 23 01 	lds	r27, 0x0123
 8aa:	fe 91       	ld	r31, -X
 8ac:	ee 91       	ld	r30, -X
 8ae:	1e 91       	ld	r17, -X
 8b0:	0e 91       	ld	r16, -X
 8b2:	0d bf       	out	0x3d, r16	; 61
 8b4:	1e bf       	out	0x3e, r17	; 62
 8b6:	a0 93 22 01 	sts	0x0122, r26
 8ba:	b0 93 23 01 	sts	0x0123, r27
		;execute return to jump to task0, pushed while task init                               
		RET                                               ;return from subroutine (  4 clocks) 
 8be:	08 95       	ret

000008c0 <Kernel_Task_Idle>:
;arg registers           : None                                                                
;return registers        : None                                                                
;unsafe access registers : None                                                                
Kernel_Task_Idle:                                         ;total 0.5uS @8MHz      (  4 clocks) 
    _IDLE_LOOP:                                           ;forever loop                        
		RJMP  _IDLE_LOOP                                  ;return from subroutine (  4 clocks) 
 8c0:	ff cf       	rjmp	.-2      	; 0x8c0 <Kernel_Task_Idle>

000008c2 <Kernel_Task_Sleep>:
;arg registers           : R25:R24(SleepTime)                                                  
;return registers        : None                                                                
;unsafe access registers : R16, R17, R18, R24, R25, R30(ZL), R31(ZH)                           
Kernel_Task_Sleep:                                        ;total 35.5uS @8MHz     (284 clocks) 
        ;save current context                                                                  
        KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
 8c2:	0f 92       	push	r0
 8c4:	0f b6       	in	r0, 0x3f	; 63
 8c6:	f8 94       	cli
 8c8:	0f 92       	push	r0
 8ca:	1f 92       	push	r1
 8cc:	11 24       	eor	r1, r1
 8ce:	2f 92       	push	r2
 8d0:	3f 92       	push	r3
 8d2:	4f 92       	push	r4
 8d4:	5f 92       	push	r5
 8d6:	6f 92       	push	r6
 8d8:	7f 92       	push	r7
 8da:	8f 92       	push	r8
 8dc:	9f 92       	push	r9
 8de:	af 92       	push	r10
 8e0:	bf 92       	push	r11
 8e2:	cf 92       	push	r12
 8e4:	df 92       	push	r13
 8e6:	ef 92       	push	r14
 8e8:	ff 92       	push	r15
 8ea:	0f 93       	push	r16
 8ec:	1f 93       	push	r17
 8ee:	2f 93       	push	r18
 8f0:	3f 93       	push	r19
 8f2:	4f 93       	push	r20
 8f4:	5f 93       	push	r21
 8f6:	6f 93       	push	r22
 8f8:	7f 93       	push	r23
 8fa:	8f 93       	push	r24
 8fc:	9f 93       	push	r25
 8fe:	af 93       	push	r26
 900:	bf 93       	push	r27
 902:	cf 93       	push	r28
 904:	df 93       	push	r29
 906:	ef 93       	push	r30
 908:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 90a:	ee e0       	ldi	r30, 0x0E	; 14
 90c:	f1 e0       	ldi	r31, 0x01	; 1
 90e:	00 91 07 01 	lds	r16, 0x0107
 912:	00 0f       	add	r16, r16
 914:	e0 0f       	add	r30, r16
 916:	00 e0       	ldi	r16, 0x00	; 0
 918:	f0 1f       	adc	r31, r16
 91a:	0d b7       	in	r16, 0x3d	; 61
 91c:	1e b7       	in	r17, 0x3e	; 62
 91e:	00 83       	st	Z, r16
 920:	11 83       	std	Z+1, r17	; 0x01
		;create next task wakeup time (args R25:R24)                                           
		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 922:	e4 e4       	ldi	r30, 0x44	; 68
		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 924:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
 926:	00 91 07 01 	lds	r16, 0x0107
 92a:	00 0f       	add	r16, r16
 92c:	e0 0f       	add	r30, r16
 92e:	00 e0       	ldi	r16, 0x00	; 0
 930:	f0 1f       	adc	r31, r16
		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
 932:	80 83       	st	Z, r24
		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 934:	91 83       	std	Z+1, r25	; 0x01
		;update task scheduler status as blocked                                               
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 936:	e0 e3       	ldi	r30, 0x30	; 48
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 938:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
 93a:	00 91 07 01 	lds	r16, 0x0107
 93e:	e0 0f       	add	r30, r16
 940:	00 e0       	ldi	r16, 0x00	; 0
 942:	f0 1f       	adc	r31, r16
        LDI   R16                , TASK_BLOCKED           ;block task until cnt=0 (  1 clock ) 
 944:	00 e0       	ldi	r16, 0x00	; 0
		STD   Z+0                , R16                    ;save block flag        (  2 clocks) 
 946:	00 83       	st	Z, r16
		;run scheduler, load next task sp, restore context                                     
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 948:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
 94a:	0f ef       	ldi	r16, 0xFF	; 255
 94c:	00 93 09 01 	sts	0x0109, r16
 950:	00 e0       	ldi	r16, 0x00	; 0
 952:	00 93 0a 01 	sts	0x010A, r16
 956:	98 2f       	mov	r25, r24

00000958 <_KER_SCH_LOOP52>:
 958:	00 93 07 01 	sts	0x0107, r16
 95c:	89 2f       	mov	r24, r25
 95e:	e4 e4       	ldi	r30, 0x44	; 68
 960:	f1 e0       	ldi	r31, 0x01	; 1
 962:	00 91 07 01 	lds	r16, 0x0107
 966:	00 0f       	add	r16, r16
 968:	e0 0f       	add	r30, r16
 96a:	00 e0       	ldi	r16, 0x00	; 0
 96c:	f0 1f       	adc	r31, r16
 96e:	00 81       	ld	r16, Z
 970:	11 81       	ldd	r17, Z+1	; 0x01
 972:	20 2f       	mov	r18, r16
 974:	21 2b       	or	r18, r17
 976:	59 f0       	breq	.+22     	; 0x98e <_VAL_NULL53>
 978:	81 30       	cpi	r24, 0x01	; 1
 97a:	99 f0       	breq	.+38     	; 0x9a2 <_VAL_NOT_NULL53>
 97c:	21 e0       	ldi	r18, 0x01	; 1
 97e:	02 1b       	sub	r16, r18
 980:	20 e0       	ldi	r18, 0x00	; 0
 982:	12 0b       	sbc	r17, r18
 984:	00 83       	st	Z, r16
 986:	11 83       	std	Z+1, r17	; 0x01
 988:	20 2f       	mov	r18, r16
 98a:	21 2b       	or	r18, r17
 98c:	51 f4       	brne	.+20     	; 0x9a2 <_VAL_NOT_NULL53>

0000098e <_VAL_NULL53>:
 98e:	e0 e3       	ldi	r30, 0x30	; 48
 990:	f1 e0       	ldi	r31, 0x01	; 1
 992:	00 91 07 01 	lds	r16, 0x0107
 996:	e0 0f       	add	r30, r16
 998:	00 e0       	ldi	r16, 0x00	; 0
 99a:	f0 1f       	adc	r31, r16
 99c:	81 e0       	ldi	r24, 0x01	; 1
 99e:	80 83       	st	Z, r24
 9a0:	08 c0       	rjmp	.+16     	; 0x9b2 <_EXIT_SLP_TIME53>

000009a2 <_VAL_NOT_NULL53>:
 9a2:	e0 e3       	ldi	r30, 0x30	; 48
 9a4:	f1 e0       	ldi	r31, 0x01	; 1
 9a6:	00 91 07 01 	lds	r16, 0x0107
 9aa:	e0 0f       	add	r30, r16
 9ac:	00 e0       	ldi	r16, 0x00	; 0
 9ae:	f0 1f       	adc	r31, r16
 9b0:	80 81       	ld	r24, Z

000009b2 <_EXIT_SLP_TIME53>:
 9b2:	81 30       	cpi	r24, 0x01	; 1
 9b4:	91 f4       	brne	.+36     	; 0x9da <_KER_SCH_NEXT52>
 9b6:	ea e3       	ldi	r30, 0x3A	; 58
 9b8:	f1 e0       	ldi	r31, 0x01	; 1
 9ba:	00 e0       	ldi	r16, 0x00	; 0
 9bc:	80 91 07 01 	lds	r24, 0x0107
 9c0:	e8 0f       	add	r30, r24
 9c2:	f0 1f       	adc	r31, r16
 9c4:	80 81       	ld	r24, Z
 9c6:	00 91 09 01 	lds	r16, 0x0109
 9ca:	80 17       	cp	r24, r16
 9cc:	30 f4       	brcc	.+12     	; 0x9da <_KER_SCH_NEXT52>
 9ce:	80 93 09 01 	sts	0x0109, r24
 9d2:	00 91 07 01 	lds	r16, 0x0107
 9d6:	00 93 0a 01 	sts	0x010A, r16

000009da <_KER_SCH_NEXT52>:
 9da:	00 91 07 01 	lds	r16, 0x0107
 9de:	03 95       	inc	r16
 9e0:	10 91 08 01 	lds	r17, 0x0108
 9e4:	01 17       	cp	r16, r17
 9e6:	08 f4       	brcc	.+2      	; 0x9ea <_KER_SCH_EXIT52>
 9e8:	b7 cf       	rjmp	.-146    	; 0x958 <_KER_SCH_LOOP52>

000009ea <_KER_SCH_EXIT52>:
 9ea:	00 91 0a 01 	lds	r16, 0x010A
 9ee:	00 93 07 01 	sts	0x0107, r16
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 9f2:	ee e0       	ldi	r30, 0x0E	; 14
 9f4:	f1 e0       	ldi	r31, 0x01	; 1
 9f6:	00 91 07 01 	lds	r16, 0x0107
 9fa:	00 0f       	add	r16, r16
 9fc:	e0 0f       	add	r30, r16
 9fe:	00 e0       	ldi	r16, 0x00	; 0
 a00:	f0 1f       	adc	r31, r16
 a02:	00 81       	ld	r16, Z
 a04:	11 81       	ldd	r17, Z+1	; 0x01
 a06:	0d bf       	out	0x3d, r16	; 61
 a08:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 a0a:	ff 91       	pop	r31
 a0c:	ef 91       	pop	r30
 a0e:	df 91       	pop	r29
 a10:	cf 91       	pop	r28
 a12:	bf 91       	pop	r27
 a14:	af 91       	pop	r26
 a16:	9f 91       	pop	r25
 a18:	8f 91       	pop	r24
 a1a:	7f 91       	pop	r23
 a1c:	6f 91       	pop	r22
 a1e:	5f 91       	pop	r21
 a20:	4f 91       	pop	r20
 a22:	3f 91       	pop	r19
 a24:	2f 91       	pop	r18
 a26:	1f 91       	pop	r17
 a28:	0f 91       	pop	r16
 a2a:	ff 90       	pop	r15
 a2c:	ef 90       	pop	r14
 a2e:	df 90       	pop	r13
 a30:	cf 90       	pop	r12
 a32:	bf 90       	pop	r11
 a34:	af 90       	pop	r10
 a36:	9f 90       	pop	r9
 a38:	8f 90       	pop	r8
 a3a:	7f 90       	pop	r7
 a3c:	6f 90       	pop	r6
 a3e:	5f 90       	pop	r5
 a40:	4f 90       	pop	r4
 a42:	3f 90       	pop	r3
 a44:	2f 90       	pop	r2
 a46:	1f 90       	pop	r1
 a48:	0f 90       	pop	r0
 a4a:	0f be       	out	0x3f, r0	; 63
 a4c:	0f 90       	pop	r0
 a4e:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
 a50:	08 95       	ret

00000a52 <Kernel_Task_Constant_Latency>:
;arg registers           : R25:R24(SleepTime)                                                  
;return registers        : None                                                                
;unsafe access registers : R16, R24, R25, R30(ZL), R31(ZH)                                     
Kernel_Task_Constant_Latency:                             ;total 35.5uS @8MHz     ( 26 clocks) 
		;create next task wakeup time (args R25:R24)                                           
		CLI                                               ;disable interrupt      (  1 clock ) 
 a52:	f8 94       	cli
		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 a54:	e4 e4       	ldi	r30, 0x44	; 68
		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 a56:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
 a58:	00 91 07 01 	lds	r16, 0x0107
 a5c:	00 0f       	add	r16, r16
 a5e:	e0 0f       	add	r30, r16
 a60:	00 e0       	ldi	r16, 0x00	; 0
 a62:	f0 1f       	adc	r31, r16
		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
 a64:	80 83       	st	Z, r24
		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 a66:	91 83       	std	Z+1, r25	; 0x01
		;update task scheduler status as constant latency                                      
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 a68:	e0 e3       	ldi	r30, 0x30	; 48
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 a6a:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
 a6c:	00 91 07 01 	lds	r16, 0x0107
 a70:	e0 0f       	add	r30, r16
 a72:	00 e0       	ldi	r16, 0x00	; 0
 a74:	f0 1f       	adc	r31, r16
        LDI   R16                , TASK_CONS_LAT          ;save as cons_lat       (  1 clock ) 
 a76:	04 e0       	ldi	r16, 0x04	; 4
		STD   Z+0                , R16                    ;save block flag        (  2 clocks) 
 a78:	00 83       	st	Z, r16
		SEI                                               ;enable interrupt       (  1 clock ) 
 a7a:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
 a7c:	08 95       	ret

00000a7e <Kernel_Task_Constant_Latency_Sleep>:
;arg registers           : R25:R24(SleepTime)                                                  
;return registers        : None                                                                
;unsafe access registers : R16, R24, R25, R30(ZL), R31(ZH)                                     
Kernel_Task_Constant_Latency_Sleep:                       ;total 35.5uS @8MHz     ( 26 clocks) 
		;save current context                                                                  
        KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
 a7e:	0f 92       	push	r0
 a80:	0f b6       	in	r0, 0x3f	; 63
 a82:	f8 94       	cli
 a84:	0f 92       	push	r0
 a86:	1f 92       	push	r1
 a88:	11 24       	eor	r1, r1
 a8a:	2f 92       	push	r2
 a8c:	3f 92       	push	r3
 a8e:	4f 92       	push	r4
 a90:	5f 92       	push	r5
 a92:	6f 92       	push	r6
 a94:	7f 92       	push	r7
 a96:	8f 92       	push	r8
 a98:	9f 92       	push	r9
 a9a:	af 92       	push	r10
 a9c:	bf 92       	push	r11
 a9e:	cf 92       	push	r12
 aa0:	df 92       	push	r13
 aa2:	ef 92       	push	r14
 aa4:	ff 92       	push	r15
 aa6:	0f 93       	push	r16
 aa8:	1f 93       	push	r17
 aaa:	2f 93       	push	r18
 aac:	3f 93       	push	r19
 aae:	4f 93       	push	r20
 ab0:	5f 93       	push	r21
 ab2:	6f 93       	push	r22
 ab4:	7f 93       	push	r23
 ab6:	8f 93       	push	r24
 ab8:	9f 93       	push	r25
 aba:	af 93       	push	r26
 abc:	bf 93       	push	r27
 abe:	cf 93       	push	r28
 ac0:	df 93       	push	r29
 ac2:	ef 93       	push	r30
 ac4:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 ac6:	ee e0       	ldi	r30, 0x0E	; 14
 ac8:	f1 e0       	ldi	r31, 0x01	; 1
 aca:	00 91 07 01 	lds	r16, 0x0107
 ace:	00 0f       	add	r16, r16
 ad0:	e0 0f       	add	r30, r16
 ad2:	00 e0       	ldi	r16, 0x00	; 0
 ad4:	f0 1f       	adc	r31, r16
 ad6:	0d b7       	in	r16, 0x3d	; 61
 ad8:	1e b7       	in	r17, 0x3e	; 62
 ada:	00 83       	st	Z, r16
 adc:	11 83       	std	Z+1, r17	; 0x01
		;update task scheduler status as blocked                                               
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 ade:	e0 e3       	ldi	r30, 0x30	; 48
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 ae0:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
 ae2:	00 91 07 01 	lds	r16, 0x0107
 ae6:	e0 0f       	add	r30, r16
 ae8:	00 e0       	ldi	r16, 0x00	; 0
 aea:	f0 1f       	adc	r31, r16
        LDI   R16                , TASK_BLOCKED           ;block task until cnt=0 (  1 clock ) 
 aec:	00 e0       	ldi	r16, 0x00	; 0
		STD   Z+0                , R16                    ;save block flag        (  2 clocks) 
 aee:	00 83       	st	Z, r16
		;run scheduler, load next task sp, restore context                                     
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 af0:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
 af2:	0f ef       	ldi	r16, 0xFF	; 255
 af4:	00 93 09 01 	sts	0x0109, r16
 af8:	00 e0       	ldi	r16, 0x00	; 0
 afa:	00 93 0a 01 	sts	0x010A, r16
 afe:	98 2f       	mov	r25, r24

00000b00 <_KER_SCH_LOOP71>:
 b00:	00 93 07 01 	sts	0x0107, r16
 b04:	89 2f       	mov	r24, r25
 b06:	e4 e4       	ldi	r30, 0x44	; 68
 b08:	f1 e0       	ldi	r31, 0x01	; 1
 b0a:	00 91 07 01 	lds	r16, 0x0107
 b0e:	00 0f       	add	r16, r16
 b10:	e0 0f       	add	r30, r16
 b12:	00 e0       	ldi	r16, 0x00	; 0
 b14:	f0 1f       	adc	r31, r16
 b16:	00 81       	ld	r16, Z
 b18:	11 81       	ldd	r17, Z+1	; 0x01
 b1a:	20 2f       	mov	r18, r16
 b1c:	21 2b       	or	r18, r17
 b1e:	59 f0       	breq	.+22     	; 0xb36 <_VAL_NULL72>
 b20:	81 30       	cpi	r24, 0x01	; 1
 b22:	99 f0       	breq	.+38     	; 0xb4a <_VAL_NOT_NULL72>
 b24:	21 e0       	ldi	r18, 0x01	; 1
 b26:	02 1b       	sub	r16, r18
 b28:	20 e0       	ldi	r18, 0x00	; 0
 b2a:	12 0b       	sbc	r17, r18
 b2c:	00 83       	st	Z, r16
 b2e:	11 83       	std	Z+1, r17	; 0x01
 b30:	20 2f       	mov	r18, r16
 b32:	21 2b       	or	r18, r17
 b34:	51 f4       	brne	.+20     	; 0xb4a <_VAL_NOT_NULL72>

00000b36 <_VAL_NULL72>:
 b36:	e0 e3       	ldi	r30, 0x30	; 48
 b38:	f1 e0       	ldi	r31, 0x01	; 1
 b3a:	00 91 07 01 	lds	r16, 0x0107
 b3e:	e0 0f       	add	r30, r16
 b40:	00 e0       	ldi	r16, 0x00	; 0
 b42:	f0 1f       	adc	r31, r16
 b44:	81 e0       	ldi	r24, 0x01	; 1
 b46:	80 83       	st	Z, r24
 b48:	08 c0       	rjmp	.+16     	; 0xb5a <_EXIT_SLP_TIME72>

00000b4a <_VAL_NOT_NULL72>:
 b4a:	e0 e3       	ldi	r30, 0x30	; 48
 b4c:	f1 e0       	ldi	r31, 0x01	; 1
 b4e:	00 91 07 01 	lds	r16, 0x0107
 b52:	e0 0f       	add	r30, r16
 b54:	00 e0       	ldi	r16, 0x00	; 0
 b56:	f0 1f       	adc	r31, r16
 b58:	80 81       	ld	r24, Z

00000b5a <_EXIT_SLP_TIME72>:
 b5a:	81 30       	cpi	r24, 0x01	; 1
 b5c:	91 f4       	brne	.+36     	; 0xb82 <_KER_SCH_NEXT71>
 b5e:	ea e3       	ldi	r30, 0x3A	; 58
 b60:	f1 e0       	ldi	r31, 0x01	; 1
 b62:	00 e0       	ldi	r16, 0x00	; 0
 b64:	80 91 07 01 	lds	r24, 0x0107
 b68:	e8 0f       	add	r30, r24
 b6a:	f0 1f       	adc	r31, r16
 b6c:	80 81       	ld	r24, Z
 b6e:	00 91 09 01 	lds	r16, 0x0109
 b72:	80 17       	cp	r24, r16
 b74:	30 f4       	brcc	.+12     	; 0xb82 <_KER_SCH_NEXT71>
 b76:	80 93 09 01 	sts	0x0109, r24
 b7a:	00 91 07 01 	lds	r16, 0x0107
 b7e:	00 93 0a 01 	sts	0x010A, r16

00000b82 <_KER_SCH_NEXT71>:
 b82:	00 91 07 01 	lds	r16, 0x0107
 b86:	03 95       	inc	r16
 b88:	10 91 08 01 	lds	r17, 0x0108
 b8c:	01 17       	cp	r16, r17
 b8e:	08 f4       	brcc	.+2      	; 0xb92 <_KER_SCH_EXIT71>
 b90:	b7 cf       	rjmp	.-146    	; 0xb00 <_KER_SCH_LOOP71>

00000b92 <_KER_SCH_EXIT71>:
 b92:	00 91 0a 01 	lds	r16, 0x010A
 b96:	00 93 07 01 	sts	0x0107, r16
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 b9a:	ee e0       	ldi	r30, 0x0E	; 14
 b9c:	f1 e0       	ldi	r31, 0x01	; 1
 b9e:	00 91 07 01 	lds	r16, 0x0107
 ba2:	00 0f       	add	r16, r16
 ba4:	e0 0f       	add	r30, r16
 ba6:	00 e0       	ldi	r16, 0x00	; 0
 ba8:	f0 1f       	adc	r31, r16
 baa:	00 81       	ld	r16, Z
 bac:	11 81       	ldd	r17, Z+1	; 0x01
 bae:	0d bf       	out	0x3d, r16	; 61
 bb0:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 bb2:	ff 91       	pop	r31
 bb4:	ef 91       	pop	r30
 bb6:	df 91       	pop	r29
 bb8:	cf 91       	pop	r28
 bba:	bf 91       	pop	r27
 bbc:	af 91       	pop	r26
 bbe:	9f 91       	pop	r25
 bc0:	8f 91       	pop	r24
 bc2:	7f 91       	pop	r23
 bc4:	6f 91       	pop	r22
 bc6:	5f 91       	pop	r21
 bc8:	4f 91       	pop	r20
 bca:	3f 91       	pop	r19
 bcc:	2f 91       	pop	r18
 bce:	1f 91       	pop	r17
 bd0:	0f 91       	pop	r16
 bd2:	ff 90       	pop	r15
 bd4:	ef 90       	pop	r14
 bd6:	df 90       	pop	r13
 bd8:	cf 90       	pop	r12
 bda:	bf 90       	pop	r11
 bdc:	af 90       	pop	r10
 bde:	9f 90       	pop	r9
 be0:	8f 90       	pop	r8
 be2:	7f 90       	pop	r7
 be4:	6f 90       	pop	r6
 be6:	5f 90       	pop	r5
 be8:	4f 90       	pop	r4
 bea:	3f 90       	pop	r3
 bec:	2f 90       	pop	r2
 bee:	1f 90       	pop	r1
 bf0:	0f 90       	pop	r0
 bf2:	0f be       	out	0x3f, r0	; 63
 bf4:	0f 90       	pop	r0
 bf6:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
 bf8:	08 95       	ret

00000bfa <Kernel_Task_Sleep_Time_Get>:
;used registers          : R16, R24, R25, R30(ZL), R31(ZH)                                     
;arg registers           : R24(TaskID)                                                         
;return registers        : R25:R24(SleepTime)                                                  
;unsafe access registers : R16, R24, R25, R30(ZL), R31(ZH)                                     
Kernel_Task_Sleep_Time_Get:                               ;total 1.88uS @8MHz     ( 15 clocks) 
		MOV   R16                , R24                    ;copy                   (  1 clock ) 
 bfa:	08 2f       	mov	r16, r24
		LSL   R16                                         ;x2                     (  1 clock ) 
 bfc:	00 0f       	add	r16, r16
		LDI   R30                , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 bfe:	e4 e4       	ldi	r30, 0x44	; 68
		LDI   R31                , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 c00:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 c02:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 c04:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 c06:	f0 1f       	adc	r31, r16
		LD    R24                , Z+                     ;load sleep time        (  2 clocks) 
 c08:	81 91       	ld	r24, Z+
		LD    R25                , Z                      ;load sleep time        (  2 clocks) 
 c0a:	90 81       	ld	r25, Z
		RET                                               ;return from subroutine (  4 clocks) 
 c0c:	08 95       	ret

00000c0e <Kernel_Task_Status_Get>:
;used registers          : R16, R24, R30(ZL), R31(ZH)                                          
;arg registers           : R24(TaskID)                                                         
;return registers        : R24(TaskSts)                                                        
;unsafe access registers : R16, R24, R30(ZL), R31(ZH)                                          
Kernel_Task_Status_Get:                                   ;total 1.50uS @8MHz     ( 12 clocks) 
		MOV   R16                , R24                    ;copy                   (  1 clock ) 
 c0e:	08 2f       	mov	r16, r24
		LDI   R30                , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 c10:	e0 e3       	ldi	r30, 0x30	; 48
		LDI   R31                , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 c12:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 c14:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 c16:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 c18:	f0 1f       	adc	r31, r16
		LD    R24                , Z                      ;load task status       (  2 clocks) 
 c1a:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 c1c:	08 95       	ret

00000c1e <Kernel_NTask_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(NTask)                                                          
;unsafe access registers : R24                                                                 
Kernel_NTask_Get:                                         ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                 , KerBase+OFB_NTSK      ;load ntask             (  2 clock ) 
 c1e:	80 91 08 01 	lds	r24, 0x0108
		RET                                               ;return from subroutine (  4 clocks) 
 c22:	08 95       	ret

00000c24 <Kernel_Task_Prio_Get>:
;arg registers           : R24(TaskID)                                                         
;return registers        : R24(TaskPriority)                                                   
;unsafe access registers : R16, R24, R30(ZL), R31(ZH)                                          
Kernel_Task_Prio_Get:                                     ;total 1.50uS @8MHz     ( 12 clocks) 
		;get priority of the task id, arg (task_id->R24), return R24                           
		MOV   R16                , R24                    ;copy task_id           (  1 clock ) 
 c24:	08 2f       	mov	r16, r24
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 c26:	ea e3       	ldi	r30, 0x3A	; 58
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 c28:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
 c2a:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;clear reg              (  1 clock ) 
 c2c:	00 e0       	ldi	r16, 0x00	; 0
		ADC   ZH                 , R16                    ;add high byte+carry    (  1 clock ) 
 c2e:	f0 1f       	adc	r31, r16
		LD    R24                , Z                      ;load priority          (  2 clocks) 
 c30:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 c32:	08 95       	ret

00000c34 <Kernel_Lowest_Prio_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(LowestPriorityVal)                                              
;unsafe access registers : R24                                                                 
Kernel_Lowest_Prio_Get:                                   ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
 c34:	80 91 09 01 	lds	r24, 0x0109
		RET                                               ;return from subroutine (  4 clocks) 
 c38:	08 95       	ret

00000c3a <Kernel_High_Prio_Task_ID_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(HighstPriorityTaskID)->UserTaskID (Excluding Idle Task)         
;unsafe access registers : R24                                                                 
Kernel_High_Prio_Task_ID_Get:                             ;total 0.88uS @8MHz     (  7 clocks) 
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 c3a:	80 91 0a 01 	lds	r24, 0x010A
		DEC   R24                                         ;decrement by 1         (  1 clock ) 
 c3e:	8a 95       	dec	r24
		RET                                               ;return from subroutine (  4 clocks) 
 c40:	08 95       	ret

00000c42 <Kernel_Abs_High_Prio_Task_ID_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(HighstPriorityTaskID)->AbsoluteTaskID (Including Idle Task)     
;unsafe access registers : R24                                                                 
Kernel_Abs_High_Prio_Task_ID_Get:                         ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 c42:	80 91 0a 01 	lds	r24, 0x010A
		RET                                               ;return from subroutine (  4 clocks) 
 c46:	08 95       	ret

00000c48 <Kernel_CPU_Usage_Get>:
;arg registers           : None                                                                
;return registers        : R24(CurrentCpuUsage)->In percentage                                 
;unsafe access registers : R24                                                                 
Kernel_CPU_Usage_Get:                                     ;total 0.75uS @8MHz     (  6 clocks) 
		;get cpu usage, return R24                                                             
		LDS   R24                , KerBase+OFB_USAGE      ;load cpu usage         (  2 clocks) 
 c48:	80 91 0d 01 	lds	r24, 0x010D
		RET                                               ;return from subroutine (  4 clocks) 
 c4c:	08 95       	ret

00000c4e <Debug_Init>:


;;===================================debug init starting====================================;; 
Debug_Init:                                               ;total 2.38uS @8MHz     ( 19 clocks) 
        ;init registers for UART0 (Arg R25:R24->UBRRH:UBRRL)                                   
		LDI   R16                , (1<<1)                 ;mask U2x               (  1 clock ) 
 c4e:	02 e0       	ldi	r16, 0x02	; 2
		STS   SRUCSR0A           , R16                    ;load val to UCSR0A     (  2 clocks) 
 c50:	00 93 c0 00 	sts	0x00C0, r16
		MOV   R16                , R25                    ;copy R25->baud rate H  (  1 clock ) 
 c54:	09 2f       	mov	r16, r25
		STS   SRUBRR0H           , R16                    ;load val to UBRR0H     (  2 clocks) 
 c56:	00 93 c5 00 	sts	0x00C5, r16
		MOV   R16                , R24                    ;copy R24->baud rate L  (  1 clock ) 
 c5a:	08 2f       	mov	r16, r24
		STS   SRUBRR0L           , R16                    ;load val to UBRR0L     (  2 clocks) 
 c5c:	00 93 c4 00 	sts	0x00C4, r16
		LDI   R16                , (1<<1)|(1<<2)          ;config 8 data bit      (  1 clock ) 
 c60:	06 e0       	ldi	r16, 0x06	; 6
		STS   SRUCSR0C           , R16                    ;load val to UCSR0C     (  2 clocks) 
 c62:	00 93 c2 00 	sts	0x00C2, r16
		LDI   R16                , (1<<3)                 ;enable tx              (  1 clock ) 
 c66:	08 e0       	ldi	r16, 0x08	; 8
		STS   SRUCSR0B           , R16                    ;load val to UCSR0B     (  2 clocks) 
 c68:	00 93 c1 00 	sts	0x00C1, r16
        RET                                               ;return from subroutine (  4 clocks) 
 c6c:	08 95       	ret

00000c6e <Debug_Tx_Byte>:


;;====================================debug tx starting=====================================;; 
Debug_Tx_Byte:                                            ;total 2.00uS+LT @8MHz  ( 16 clocks) 
		;write single byte to data register (Arg R24)                                          
		PUSH  R16                                         ;save reg               (  2 clocks) 
 c6e:	0f 93       	push	r16
		STS   SRUDR0             , R24                    ;load val to UDR0       (  2 clocks) 
 c70:	80 93 c6 00 	sts	0x00C6, r24

00000c74 <__UDRE0_CLEARED>:
                                                                                               
    __UDRE0_CLEARED:                                      ;undefined loop wrt ck               
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16     (  2 clocks) 
 c74:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x05                   ;skip if UDRE0 is set   (  2 clocks) 
 c78:	05 ff       	sbrs	r16, 5
		RJMP  __UDRE0_CLEARED                             ;wait until UDRE0 is set(  2 clocks) 
 c7a:	fc cf       	rjmp	.-8      	; 0xc74 <__UDRE0_CLEARED>
		POP   R16                                         ;restore reg            (  2 clocks) 
 c7c:	0f 91       	pop	r16
        RET                                               ;return from subroutine (  4 clocks) 
 c7e:	08 95       	ret

00000c80 <Debug_Tx_Word>:


;;==================================debug tx word starting==================================;; 
Debug_Tx_Word:                                            ;total 2.00uS+LT @8MHz  ( 16 clocks) 
		;write 2 bytes, (Arg R24, R25), Args retained                                          
		PUSH  R24                                         ;save reg               (  2 clocks) 
 c80:	8f 93       	push	r24
		MOV   R24                , R25                    ;copy reg               (  1 clock ) 
 c82:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte                               ;send via uart          ( 21 clocks) 
 c84:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
        POP   R24                                         ;restore reg            (  2 clocks) 
 c88:	8f 91       	pop	r24
		CALL  Debug_Tx_Byte                               ;send via uart          ( 21 clocks) 
 c8a:	0e 94 37 06 	call	0xc6e	; 0xc6e <Debug_Tx_Byte>
        RET                                               ;return from subroutine (  4 clocks) 
 c8e:	08 95       	ret

00000c90 <Debug_Tx_Byte_Conf>:


;;================================debug tx confirm starting=================================;; 
Debug_Tx_Byte_Conf:                                       ;total 2.63uS+LT @8MHz  ( 21 clocks) 
        ;write 1 byte, (Arg R24), Args retained                                                
		PUSH  R16                                         ;save reg               (  2 clocks) 
 c90:	0f 93       	push	r16
		STS   SRUDR0             , R24                    ;load val to UDR0,      (  2 clocks) 
 c92:	80 93 c6 00 	sts	0x00C6, r24

00000c96 <__TXC0_CLEARED>:
    __TXC0_CLEARED:                                                                            
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,    (  2 clocks) 
 c96:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x06                   ;skip if TXC0 is set,   (  2 clocks) 
 c9a:	06 ff       	sbrs	r16, 6
		RJMP  __TXC0_CLEARED                              ;wait until TXC0 is set (  2 clocks) 
 c9c:	fc cf       	rjmp	.-8      	; 0xc96 <__TXC0_CLEARED>
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,    (  2 clocks) 
 c9e:	00 91 c0 00 	lds	r16, 0x00C0
		ORI   R16                , (1<<6)                 ;mask bit 6,            (  1 clock ) 
 ca2:	00 64       	ori	r16, 0x40	; 64
		STS   SRUCSR0A           , R16                    ;write reg with bit msk (  2 clocks) 
 ca4:	00 93 c0 00 	sts	0x00C0, r16
		POP   R16                                         ;restore reg            (  2 clocks) 
 ca8:	0f 91       	pop	r16
        RET                                               ;return from subroutine (  4 clocks) 
 caa:	08 95       	ret

00000cac <Debug_Tx_Word_Conf>:


;;==============================debug tx word confirm starting==============================;; 
Debug_Tx_Word_Conf:                                       ;total 6.38uS+LT @8MHz  ( 51 clocks) 
        ;write 2 bytes, (Arg R24, R25), Args retained                                          
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 cac:	0e 94 48 06 	call	0xc90	; 0xc90 <Debug_Tx_Byte_Conf>
		PUSH  R24                                         ;save reg               (  2 clocks) 
 cb0:	8f 93       	push	r24
		MOV   R24                , R25                    ;copy R25 to R24        (  1 clock ) 
 cb2:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 cb4:	0e 94 48 06 	call	0xc90	; 0xc90 <Debug_Tx_Byte_Conf>
		POP   R24                                         ;restore reg            (  2 clocks) 
 cb8:	8f 91       	pop	r24
        RET                                               ;return from subroutine (  4 clocks) 
 cba:	08 95       	ret

00000cbc <Debug_Tx_DWord_Conf>:


;;==============================debug tx dword confirm starting=============================;; 
Debug_Tx_DWord_Conf:                                      ;total 12.38uS+LT @8MHz ( 99 clocks) 
        ;write 4 bytes, (Arg R22-R25), Args retained                                           
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks) 
 cbc:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R22                    ;copy R22 to R24          (1 clock ) 
 cc0:	86 2f       	mov	r24, r22
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 cc2:	0e 94 48 06 	call	0xc90	; 0xc90 <Debug_Tx_Byte_Conf>
		MOV   R24                , R23                    ;copy R23 to R24          (1 clock ) 
 cc6:	87 2f       	mov	r24, r23
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 cc8:	0e 94 48 06 	call	0xc90	; 0xc90 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24              (2 clocks) 
 ccc:	80 91 4a 00 	lds	r24, 0x004A
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 cd0:	0e 94 48 06 	call	0xc90	; 0xc90 <Debug_Tx_Byte_Conf>
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks) 
 cd4:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R25                    ;copy R22 to R24          (1 clock ) 
 cd8:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 cda:	0e 94 48 06 	call	0xc90	; 0xc90 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24 val,         (2 clocks) 
 cde:	80 91 4a 00 	lds	r24, 0x004A
        RET                                               ;return from subroutine,  (4 clocks) 
 ce2:	08 95       	ret

00000ce4 <Debug_Tx_From_RAM>:


;;=============================debug tx confirm from ram starting===========================;; 
Debug_Tx_From_RAM:                                        ;total 4.38uS+LT @8MHz  ( 35 clocks) 
        ;print data from RAM address (Arg R24-R25)                                             
		MOV   R16                , R30                    ;copy R30 to R16          (1 clock ) 
 ce4:	0e 2f       	mov	r16, r30
		MOV   R17                , R31                    ;copy R31 to R17          (1 clock ) 
 ce6:	1f 2f       	mov	r17, r31
		MOV   R18                , R24                    ;copy R24 to R18          (1 clock ) 
 ce8:	28 2f       	mov	r18, r24
		MOV   R30                , R24                    ;copy R22 to R24          (1 clock ) 
 cea:	e8 2f       	mov	r30, r24
		MOV   R31                , R25                    ;copy R22 to R24          (1 clock ) 
 cec:	f9 2f       	mov	r31, r25
		LD    R24                , Z                      ;load val to R24          (2 clocks) 
 cee:	80 81       	ld	r24, Z
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 cf0:	0e 94 48 06 	call	0xc90	; 0xc90 <Debug_Tx_Byte_Conf>
		MOV   R30                , R16                    ;copy R16 to R30          (1 clock ) 
 cf4:	e0 2f       	mov	r30, r16
		MOV   R31                , R17                    ;copy R17 to R31          (1 clock ) 
 cf6:	f1 2f       	mov	r31, r17
		MOV   R24                , R18                    ;copy R18 to R24          (1 clock ) 
 cf8:	82 2f       	mov	r24, r18
        RET                                               ;return from subroutine,  (4 clocks) 
 cfa:	08 95       	ret

00000cfc <Debug_Tx_RAM_Area>:

;;=============================debug tx confirm ram area starting===========================;; 
Debug_Tx_RAM_Area:                                        ;5.5uS+LT x R22 @8MHz   ( 44 clocks) 
        ;print data from RAM address (arguments R24:R25, R22)                                  
	__DUMP_BYTES:                                                                              
	    CALL  Debug_Tx_From_RAM                           ;send via uart from ram              
 cfc:	0e 94 72 06 	call	0xce4	; 0xce4 <Debug_Tx_From_RAM>
		SUBI  R24                , 0x01                   ;decrement from LSByte               
 d00:	81 50       	subi	r24, 0x01	; 1
        SBCI  R25                , 0x00                   ;decrement if carry                  
 d02:	90 40       	sbci	r25, 0x00	; 0
		SUBI  R22                , 0x01                   ;decrement                           
 d04:	61 50       	subi	r22, 0x01	; 1
		BRNE  __DUMP_BYTES                                                                     
 d06:	d1 f7       	brne	.-12     	; 0xcfc <Debug_Tx_RAM_Area>
        RET                                               ;return from subroutine,  (4 clocks) 
 d08:	08 95       	ret

00000d0a <_exit>:
 d0a:	f8 94       	cli

00000d0c <__stop_program>:
 d0c:	ff cf       	rjmp	.-2      	; 0xd0c <__stop_program>
