
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000045a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000413  00800100  00800100  000004ce  2**0
                  ALLOC
  2 .stab         00000960  00000000  00000000  000004d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000006c  00000000  00000000  00000e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000099  00000000  00000000  00000edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000002ba  00000000  00000000  00000f75  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000144  00000000  00000000  0000122f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000235  00000000  00000000  00001373  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  000015a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000013d  00000000  00000000  00001618  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000078  00000000  00000000  00001755  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000017cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_16>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  58:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  5c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  60:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  64:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	00 00       	nop
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 00       	nop
  76:	00 00       	nop
  78:	00 00       	nop
  7a:	00 00       	nop
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 00       	nop
  82:	00 00       	nop
  84:	00 00       	nop
  86:	00 00       	nop
  88:	4a c0       	rjmp	.+148    	; 0x11e <__vector_16>

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_clear_bss>:
  96:	15 e0       	ldi	r17, 0x05	; 5
  98:	a0 e0       	ldi	r26, 0x00	; 0
  9a:	b1 e0       	ldi	r27, 0x01	; 1
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	a3 31       	cpi	r26, 0x13	; 19
  a2:	b1 07       	cpc	r27, r17
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  aa:	0c 94 2b 02 	jmp	0x456	; 0x456 <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <main>:

int main(void) {
    
	
	//Debug_Init();
	Kernel_SysTick_Reg_Init(1000);
  b2:	88 ee       	ldi	r24, 0xE8	; 232
  b4:	93 e0       	ldi	r25, 0x03	; 3
  b6:	0e 94 16 01 	call	0x22c	; 0x22c <Kernel_SysTick_Reg_Init>
	Kernel_Task0_Init();
  ba:	0e 94 87 01 	call	0x30e	; 0x30e <Kernel_Task0_Init>
	Kernel_Task1_Init();
  be:	0e 94 c2 01 	call	0x384	; 0x384 <Kernel_Task1_Init>
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <SRUCSR0C>

000000c4 <Tasks_Switch>:
volatile uint8_t  task_index  = 0;
volatile uint16_t task_psp[20];

void Tasks_Switch(void){
  
}
  c4:	08 95       	ret

000000c6 <Tasks_Task0>:

void Tasks_Task0(void){
  DDRD |= (1<<5);
  c6:	55 9a       	sbi	0x0a, 5	; 10
  
  while(1){
    PORTD ^= (1<<5);
  c8:	40 e2       	ldi	r20, 0x20	; 32
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ca:	28 ec       	ldi	r18, 0xC8	; 200
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	8b b1       	in	r24, 0x0b	; 11
  d0:	84 27       	eor	r24, r20
  d2:	8b b9       	out	0x0b, r24	; 11
  d4:	84 ef       	ldi	r24, 0xF4	; 244
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	f9 01       	movw	r30, r18
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <Tasks_Task0+0x14>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e0:	d9 f7       	brne	.-10     	; 0xd8 <Tasks_Task0+0x12>
  e2:	f5 cf       	rjmp	.-22     	; 0xce <Tasks_Task0+0x8>

000000e4 <Tasks_Task1>:
	_delay_ms(50);
  }
}

void Tasks_Task1(void){
  DDRD |= (1<<6);
  e4:	56 9a       	sbi	0x0a, 6	; 10
  
  while(1){
    PORTD ^= (1<<6);
  e6:	40 e4       	ldi	r20, 0x40	; 64
  e8:	28 ec       	ldi	r18, 0xC8	; 200
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	8b b1       	in	r24, 0x0b	; 11
  ee:	84 27       	eor	r24, r20
  f0:	8b b9       	out	0x0b, r24	; 11
  f2:	88 e5       	ldi	r24, 0x58	; 88
  f4:	92 e0       	ldi	r25, 0x02	; 2
  f6:	f9 01       	movw	r30, r18
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <Tasks_Task1+0x14>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  fc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  fe:	d9 f7       	brne	.-10     	; 0xf6 <Tasks_Task1+0x12>
 100:	f5 cf       	rjmp	.-22     	; 0xec <Tasks_Task1+0x8>

00000102 <Tasks_Task2>:
	_delay_ms(60);
  }
}

void Tasks_Task2(void){
  DDRD |= (1<<7);
 102:	57 9a       	sbi	0x0a, 7	; 10
 104:	28 ec       	ldi	r18, 0xC8	; 200
 106:	30 e0       	ldi	r19, 0x00	; 0
  
  while(1){
    PORTD ^= (1<<7);
 108:	8b b1       	in	r24, 0x0b	; 11
 10a:	80 58       	subi	r24, 0x80	; 128
 10c:	8b b9       	out	0x0b, r24	; 11
 10e:	8c eb       	ldi	r24, 0xBC	; 188
 110:	92 e0       	ldi	r25, 0x02	; 2
 112:	f9 01       	movw	r30, r18
 114:	31 97       	sbiw	r30, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <Tasks_Task2+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 118:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 11a:	d9 f7       	brne	.-10     	; 0x112 <Tasks_Task2+0x10>
 11c:	f5 cf       	rjmp	.-22     	; 0x108 <Tasks_Task2+0x6>

0000011e <__vector_16>:


;;===================================ISR execution start====================================;;
.global  __vector_16
    __vector_16:                                          ;total operation        (208 clocks)
	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 11e:	29 9a       	sbi	0x05, 1	; 5
        KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	1f 92       	push	r1
 128:	11 24       	eor	r1, r1
 12a:	2f 92       	push	r2
 12c:	3f 92       	push	r3
 12e:	4f 92       	push	r4
 130:	5f 92       	push	r5
 132:	6f 92       	push	r6
 134:	7f 92       	push	r7
 136:	8f 92       	push	r8
 138:	9f 92       	push	r9
 13a:	af 92       	push	r10
 13c:	bf 92       	push	r11
 13e:	cf 92       	push	r12
 140:	df 92       	push	r13
 142:	ef 92       	push	r14
 144:	ff 92       	push	r15
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	2f 93       	push	r18
 14c:	3f 93       	push	r19
 14e:	4f 93       	push	r20
 150:	5f 93       	push	r21
 152:	6f 93       	push	r22
 154:	7f 93       	push	r23
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	af 93       	push	r26
 15c:	bf 93       	push	r27
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	ef 93       	push	r30
 164:	ff 93       	push	r31
		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 166:	00 91 09 01 	lds	r16, 0x0109
 16a:	00 93 46 00 	sts	0x0046, r16
		KER_TICK_INCREMENT                                ;increment tick counter ( 27 clocks) 
 16e:	01 e0       	ldi	r16, 0x01	; 1
 170:	10 91 01 01 	lds	r17, 0x0101
 174:	10 0f       	add	r17, r16
 176:	10 93 01 01 	sts	0x0101, r17
 17a:	00 e0       	ldi	r16, 0x00	; 0
 17c:	10 91 02 01 	lds	r17, 0x0102
 180:	10 1f       	adc	r17, r16
 182:	10 93 02 01 	sts	0x0102, r17
 186:	10 91 03 01 	lds	r17, 0x0103
 18a:	10 1f       	adc	r17, r16
 18c:	10 93 03 01 	sts	0x0103, r17
 190:	10 91 04 01 	lds	r17, 0x0104
 194:	10 1f       	adc	r17, r16
 196:	10 93 04 01 	sts	0x0104, r17
 19a:	10 91 05 01 	lds	r17, 0x0105
 19e:	10 1f       	adc	r17, r16
 1a0:	10 93 05 01 	sts	0x0105, r17
		KER_TASK_SWITCH                                   ;task switching         ( 38 clocks) 
 1a4:	8d b7       	in	r24, 0x3d	; 61
 1a6:	9e b7       	in	r25, 0x3e	; 62
 1a8:	00 91 0b 01 	lds	r16, 0x010B
 1ac:	00 0f       	add	r16, r16
 1ae:	ed e0       	ldi	r30, 0x0D	; 13
 1b0:	f1 e0       	ldi	r31, 0x01	; 1
 1b2:	e0 0f       	add	r30, r16
 1b4:	00 e0       	ldi	r16, 0x00	; 0
 1b6:	f0 1f       	adc	r31, r16
 1b8:	81 93       	st	Z+, r24
 1ba:	90 83       	st	Z, r25
 1bc:	00 91 0b 01 	lds	r16, 0x010B
 1c0:	03 95       	inc	r16
 1c2:	12 e0       	ldi	r17, 0x02	; 2

000001c4 <_MOD_CONT>:
 1c4:	01 17       	cp	r16, r17
 1c6:	10 f0       	brcs	.+4      	; 0x1cc <_MOD_DONE>
 1c8:	01 1b       	sub	r16, r17
 1ca:	fc cf       	rjmp	.-8      	; 0x1c4 <_MOD_CONT>

000001cc <_MOD_DONE>:
 1cc:	00 93 0b 01 	sts	0x010B, r16
 1d0:	00 0f       	add	r16, r16
 1d2:	ed e0       	ldi	r30, 0x0D	; 13
 1d4:	f1 e0       	ldi	r31, 0x01	; 1
 1d6:	e0 0f       	add	r30, r16
 1d8:	00 e0       	ldi	r16, 0x00	; 0
 1da:	f0 1f       	adc	r31, r16
 1dc:	81 91       	ld	r24, Z+
 1de:	90 81       	ld	r25, Z
 1e0:	8d bf       	out	0x3d, r24	; 61
 1e2:	9e bf       	out	0x3e, r25	; 62
		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 1e4:	ff 91       	pop	r31
 1e6:	ef 91       	pop	r30
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	bf 91       	pop	r27
 1ee:	af 91       	pop	r26
 1f0:	9f 91       	pop	r25
 1f2:	8f 91       	pop	r24
 1f4:	7f 91       	pop	r23
 1f6:	6f 91       	pop	r22
 1f8:	5f 91       	pop	r21
 1fa:	4f 91       	pop	r20
 1fc:	3f 91       	pop	r19
 1fe:	2f 91       	pop	r18
 200:	1f 91       	pop	r17
 202:	0f 91       	pop	r16
 204:	ff 90       	pop	r15
 206:	ef 90       	pop	r14
 208:	df 90       	pop	r13
 20a:	cf 90       	pop	r12
 20c:	bf 90       	pop	r11
 20e:	af 90       	pop	r10
 210:	9f 90       	pop	r9
 212:	8f 90       	pop	r8
 214:	7f 90       	pop	r7
 216:	6f 90       	pop	r6
 218:	5f 90       	pop	r5
 21a:	4f 90       	pop	r4
 21c:	3f 90       	pop	r3
 21e:	2f 90       	pop	r2
 220:	1f 90       	pop	r1
 222:	0f 90       	pop	r0
 224:	0f be       	out	0x3f, r0	; 63
 226:	0f 90       	pop	r0
	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 228:	29 98       	cbi	0x05, 1	; 5
		RETI                                              ;return from interrupt  (  4 clocks) 
 22a:	18 95       	reti

0000022c <Kernel_SysTick_Reg_Init>:



;;==================================SysTick reg init start==================================;;
Kernel_SysTick_Reg_Init:                                  ;total operation        ( 50 clocks)
        CLI                                               ;disable global int,    (  1 clock ) 
 22c:	f8 94       	cli
		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 22e:	21 9a       	sbi	0x04, 1	; 4
 230:	29 98       	cbi	0x05, 1	; 5
		LDI   R16                , 0x00                   ;set 0x00 to R16,       (  1 clock ) 
 232:	00 e0       	ldi	r16, 0x00	; 0
		STS   Kernel+0x00        , R16                    ;clear  kernel[0]       (  2 clocks) 
 234:	00 93 01 01 	sts	0x0101, r16
		STS   Kernel+0x01        , R16                    ;clear  kernel[1]       (  2 clocks) 
 238:	00 93 02 01 	sts	0x0102, r16
		STS   Kernel+0x02        , R16                    ;clear  kernel[2]       (  2 clocks) 
 23c:	00 93 03 01 	sts	0x0103, r16
		STS   Kernel+0x03        , R16                    ;clear  kernel[3]       (  2 clocks) 
 240:	00 93 04 01 	sts	0x0104, r16
		STS   Kernel+0x04        , R16                    ;clear  kernel[4]       (  2 clocks) 
 244:	00 93 05 01 	sts	0x0105, r16
		STS   Kernel+0x05        , R16                    ;clear  kernel[5]       (  2 clocks) 
 248:	00 93 06 01 	sts	0x0106, r16
		STS   Kernel+0x06        , R16                    ;clear  kernel[6]       (  2 clocks) 
 24c:	00 93 07 01 	sts	0x0107, r16
		STS   Kernel+0x07        , R16                    ;clear  kernel[7]       (  2 clocks) 
 250:	00 93 08 01 	sts	0x0108, r16
		STS   Kernel+0x08        , R16                    ;clear  kernel[8]       (  2 clocks) 
 254:	00 93 09 01 	sts	0x0109, r16
		LDI   R16                , 0x00                   ;store r16 with 0       (  1 clock ) 
 258:	00 e0       	ldi	r16, 0x00	; 0
		STS   SRTCCR0A           , R16                    ;clear TCCR0A           (  2 clocks) 
 25a:	00 93 44 00 	sts	0x0044, r16
		STS   SRTCCR0B           , R16                    ;clear TCCR0B           (  2 clocks) 
 25e:	00 93 45 00 	sts	0x0045, r16
		STS   SRTIMSK0           , R16                    ;clear TIMSK0           (  2 clocks) 
 262:	00 93 6e 00 	sts	0x006E, r16
		STS   SRTIFR0            , R16                    ;clear TIFR0            (  2 clocks) 
 266:	00 93 35 00 	sts	0x0035, r16
		STS   SROCR0A            , R16                    ;clear OCR0A            (  2 clocks) 
 26a:	00 93 47 00 	sts	0x0047, r16
		STS   SROCR0B            , R16                    ;clear OCR0B            (  2 clocks) 
 26e:	00 93 48 00 	sts	0x0048, r16
		STS   SRTCNT0            , R16                    ;clear TCNT0            (  2 clocks) 
 272:	00 93 46 00 	sts	0x0046, r16
		LDI   R16                , KER_PRS                ;prescaler 64           (  1 clock ) 
 276:	03 e0       	ldi	r16, 0x03	; 3
		STS   SRTCCR0B           , R16                    ;set to TCCR0B          (  2 clocks)
 278:	00 93 45 00 	sts	0x0045, r16
		LDI   R16                , KER_RLD                ;reload value (130)     (  1 clock ) 
 27c:	02 e8       	ldi	r16, 0x82	; 130
		STS   Kernel+0x08        , R16                    ;Kernel[5] reload value (  2 clocks) 
 27e:	00 93 09 01 	sts	0x0109, r16
		STS   SRTCNT0            , R16                    ;set to TCNT0           (  2 clocks) 
 282:	00 93 46 00 	sts	0x0046, r16
		LDI   R16                , 0x01                   ;bit mask TOIE0         (  1 clock ) 
 286:	01 e0       	ldi	r16, 0x01	; 1
		STS   SRTIMSK0           , R16                    ;set to TIMSK0          (  2 clocks) 
 288:	00 93 6e 00 	sts	0x006E, r16
		RET                                               ;return from subroutine (  4 clocks) 
 28c:	08 95       	ret

0000028e <Kernel_SysTick_Val_Get>:



;;=================================SysTick value get start==================================;;
Kernel_SysTick_Val_Get:                                   ;total operation        ( 20 clocks)
        IN    R16                , IOSREG                 ;save SREG              (  1 clock ) 
 28e:	0f b7       	in	r16, 0x3f	; 63
        CLI                                               ;disable interrupts     (  1 clock ) 
 290:	f8 94       	cli
		LDS   R18		         , Kernel+0x00            ;byte0 -> R18 (LSB)     (  2 clocks) 
 292:	20 91 01 01 	lds	r18, 0x0101
		LDS   R19		         , Kernel+0x01            ;byte1 -> R19           (  2 clocks) 
 296:	30 91 02 01 	lds	r19, 0x0102
		LDS   R20		         , Kernel+0x02            ;byte2 -> R20           (  2 clocks) 
 29a:	40 91 03 01 	lds	r20, 0x0103
		LDS   R21		         , Kernel+0x03            ;byte3 -> R21           (  2 clocks) 
 29e:	50 91 04 01 	lds	r21, 0x0104
		LDS   R22		         , Kernel+0x04            ;byte4 -> R22           (  2 clocks) 
 2a2:	60 91 05 01 	lds	r22, 0x0105
		LDI   R23		         , 0x00                   ;byte5 -> R23           (  1 clocks) 
 2a6:	70 e0       	ldi	r23, 0x00	; 0
		LDI   R24		         , 0x00                   ;byte6 -> R24           (  1 clocks) 
 2a8:	80 e0       	ldi	r24, 0x00	; 0
		LDI   R25		         , 0x00                   ;byte7 -> R25 (MSB)     (  1 clocks) 
 2aa:	90 e0       	ldi	r25, 0x00	; 0
		OUT   IOSREG             , R16          		  ;restore SREG           (  1 clock )
 2ac:	0f bf       	out	0x3f, r16	; 63
		RET                                               ;return from subroutine (  4 clocks) 
 2ae:	08 95       	ret

000002b0 <Kernel_Interrupt_Sts_Get>:



;;===============================interrupt status get start=================================;;
Kernel_Interrupt_Sts_Get:                                 ;total operation        ( 10 clocks)
        LDI   R24		         , 0x00                   ;clear R24              (  1 clock ) 
 2b0:	80 e0       	ldi	r24, 0x00	; 0
        IN    R16		         , IOSREG                 ;save SREG in R16       (  1 clock )
 2b2:	0f b7       	in	r16, 0x3f	; 63
		SBRC  R16		         , 0x07                   ;check I flag->bit7     (  3 clocks)
 2b4:	07 fd       	sbrc	r16, 7
		LDI   R24		         , 0x01                   ;set R24 to 1           (  1 clock ) 
 2b6:	81 e0       	ldi	r24, 0x01	; 1
		RET                                               ;return from subroutine (  4 clocks) 
 2b8:	08 95       	ret

000002ba <Kernel_Test_Task0>:


;;===================================Kernel Test Task0======================================;;
Kernel_Test_Task0:
        ;initialize DDR and Port register, total 4 clocks
        SBI   KER_TSK0_DDR       , KER_TSK0_PIN           ;set bit in DDR,          (2 clocks) 
 2ba:	55 9a       	sbi	0x0a, 5	; 10
		CBI   KER_TSK0_PORT      , KER_TSK0_PIN           ;clear port bit,          (2 clocks)
 2bc:	5d 98       	cbi	0x0b, 5	; 11

000002be <LOOP0>:
		 
    LOOP0:
	    ;pin toggle, total 5 clocks
		IN    R16                , KER_TSK0_PORT          ;load PORT val,           (2 clocks)
 2be:	0b b1       	in	r16, 0x0b	; 11
		LDI   R17                , (1<<KER_TSK0_PIN)      ;bit mask for port pin    (1 clock )
 2c0:	10 e2       	ldi	r17, 0x20	; 32
		EOR   R16                , R17                    ;XOR with current val     (1 clock )
 2c2:	01 27       	eor	r16, r17
		OUT   KER_TSK0_PORT      , R16                    ;set new PORT val,        (1 clock )
 2c4:	0b b9       	out	0x0b, r16	; 11
		
		;assign delay loop count val, for 30ms 
		LDI   R16                , 0xEB                   ;set loop cnt val,        (1 clock )
 2c6:	0b ee       	ldi	r16, 0xEB	; 235

000002c8 <DLY00>:
		
    DLY00:
	    LDI   R17                , 0xFF                   ;set loop cnt val,        (1 clock )
 2c8:	1f ef       	ldi	r17, 0xFF	; 255

000002ca <DLY01>:
		
	DLY01:                                                ;inner loop,127.5uS@8Mhz  (4 clocks)
		NOP                                               ;no operation,            (1 clock )
 2ca:	00 00       	nop
		DEC   R17                                         ;decrement R17 val,       (1 clock )
 2cc:	1a 95       	dec	r17
		BRNE  DLY01                                       ;if R17 not equal to 0,   (2 clock ) 
 2ce:	e9 f7       	brne	.-6      	; 0x2ca <DLY01>
		DEC   R16                                         ;decrement R16 val,       (1 clock )
 2d0:	0a 95       	dec	r16
		BRNE  DLY00                                       ;if R16 not equal to 0,   (2 clock ) 
 2d2:	d1 f7       	brne	.-12     	; 0x2c8 <DLY00>
		RJMP  LOOP0                                       ;if R16 is 0->jump,       (2 clock )  
 2d4:	f4 cf       	rjmp	.-24     	; 0x2be <LOOP0>

000002d6 <Kernel_Test_Task1>:


;;===================================Kernel Test Task1======================================;;
Kernel_Test_Task1:
        ;initialize DDR and Port register, total 4 clocks
        SBI   KER_TSK1_DDR       , KER_TSK1_PIN           ;set bit in DDR,          (2 clocks) 
 2d6:	56 9a       	sbi	0x0a, 6	; 10
		CBI   KER_TSK1_PORT      , KER_TSK1_PIN           ;clear port bit,          (2 clocks)
 2d8:	5e 98       	cbi	0x0b, 6	; 11

000002da <LOOP1>:
		 
    LOOP1:
	    ;pin toggle, total 5 clocks
		IN    R16                , KER_TSK1_PORT          ;load PORT val,           (2 clocks)
 2da:	0b b1       	in	r16, 0x0b	; 11
		LDI   R17                , (1<<KER_TSK1_PIN)      ;bit mask for port pin    (1 clock )
 2dc:	10 e4       	ldi	r17, 0x40	; 64
		EOR   R16                , R17                    ;XOR with current val     (1 clock )
 2de:	01 27       	eor	r16, r17
		OUT   KER_TSK1_PORT      , R16                    ;set new PORT val,        (1 clock )
 2e0:	0b b9       	out	0x0b, r16	; 11
		
		;assign delay loop count val, for 20ms 
		LDI   R16                , 0x9D                   ;set loop cnt val,        (1 clock )
 2e2:	0d e9       	ldi	r16, 0x9D	; 157

000002e4 <DLY10>:
		
    DLY10:
	    LDI   R17                , 0xFF                   ;set loop cnt val,        (1 clock )
 2e4:	1f ef       	ldi	r17, 0xFF	; 255

000002e6 <DLY11>:
		
	DLY11:                                                ;inner loop,127.5uS@8Mhz  (4 clocks)
		NOP                                               ;no operation,            (1 clock )
 2e6:	00 00       	nop
		DEC   R17                                         ;decrement R17 val,       (1 clock )
 2e8:	1a 95       	dec	r17
		BRNE  DLY11                                       ;if R17 not equal to 0,   (2 clock ) 
 2ea:	e9 f7       	brne	.-6      	; 0x2e6 <DLY11>
		DEC   R16                                         ;decrement R16 val,       (1 clock )
 2ec:	0a 95       	dec	r16
		BRNE  DLY10                                       ;if R16 not equal to 0,   (2 clock ) 
 2ee:	d1 f7       	brne	.-12     	; 0x2e4 <DLY10>
		RJMP  LOOP1                                       ;if R16 is 0->jump,       (2 clock )  
 2f0:	f4 cf       	rjmp	.-24     	; 0x2da <LOOP1>

000002f2 <Kernel_Test_Task2>:


;;===================================Kernel Test Task2======================================;;
Kernel_Test_Task2:
        ;initialize DDR and Port register, total 4 clocks
        SBI   KER_TSK2_DDR       , KER_TSK2_PIN           ;set bit in DDR,          (2 clocks) 
 2f2:	57 9a       	sbi	0x0a, 7	; 10
		CBI   KER_TSK2_PORT      , KER_TSK2_PIN           ;clear port bit,          (2 clocks)
 2f4:	5f 98       	cbi	0x0b, 7	; 11

000002f6 <LOOP2>:
		 
    LOOP2:
	    ;pin toggle, total 5 clocks
		IN    R16                , KER_TSK2_PORT          ;load PORT val,           (2 clocks)
 2f6:	0b b1       	in	r16, 0x0b	; 11
		LDI   R17                , (1<<KER_TSK2_PIN)      ;bit mask for port pin    (1 clock )
 2f8:	10 e8       	ldi	r17, 0x80	; 128
		EOR   R16                , R17                    ;XOR with current val     (1 clock )
 2fa:	01 27       	eor	r16, r17
		OUT   KER_TSK2_PORT      , R16                    ;set new PORT val,        (1 clock )
 2fc:	0b b9       	out	0x0b, r16	; 11
		
		;assign delay loop count val, for 30ms 
		LDI   R16                , 0xEB                   ;set loop cnt val,        (1 clock )
 2fe:	0b ee       	ldi	r16, 0xEB	; 235

00000300 <DLY20>:
		
    DLY20:
	    LDI   R17                , 0xFF                   ;set loop cnt val,        (1 clock )
 300:	1f ef       	ldi	r17, 0xFF	; 255

00000302 <DLY21>:
		
	DLY21:                                                ;inner loop, 127.5uS@8Mhz (4 clocks)
		NOP                                               ;no operation,            (1 clock )
 302:	00 00       	nop
		DEC   R17                                         ;decrement R17 val,       (1 clock )
 304:	1a 95       	dec	r17
		BRNE  DLY21                                       ;if R17 not equal to 0,   (2 clock ) 
 306:	e9 f7       	brne	.-6      	; 0x302 <DLY21>
		DEC   R16                                         ;decrement R16 val,       (1 clock )
 308:	0a 95       	dec	r16
		BRNE  DLY20                                       ;if R16 not equal to 0,   (2 clock ) 
 30a:	d1 f7       	brne	.-12     	; 0x300 <DLY20>
		RJMP  LOOP2                                       ;if R16 is 0->jump,       (2 clock ) 
 30c:	f4 cf       	rjmp	.-24     	; 0x2f6 <LOOP2>

0000030e <Kernel_Task0_Init>:
;;====================================Kernel Task0 Init=====================================;;
Kernel_Task0_Init:
        ;init stack for task0
		
		;save MSP
		IN    R2                 , IOSPL
 30e:	2d b6       	in	r2, 0x3d	; 61
		IN    R3                 , IOSPH
 310:	3e b6       	in	r3, 0x3e	; 62
		
		;set stack for task0
		LDI   R16                , lo8(ker_stk0+KER_STZ)  ;fetch top SPL0,          (1 clock )
 312:	03 e9       	ldi	r16, 0x93	; 147
		LDI   R17                , hi8(ker_stk0+KER_STZ)  ;fetch top SPH0,          (1 clock )
 314:	11 e0       	ldi	r17, 0x01	; 1
		OUT   IOSPL              , R16                    ;load SPL                 (1 clock )
 316:	0d bf       	out	0x3d, r16	; 61
        OUT   IOSPH              , R17                    ;load SPH                 (1 clock )
 318:	1e bf       	out	0x3e, r17	; 62
		
		;psuh return address of task0
		LDI   R16                , lo8(Tasks_Task0)       ;fetch task address low   (1 clock )
 31a:	06 ec       	ldi	r16, 0xC6	; 198
		LDI   R17                , hi8(Tasks_Task0)       ;fetch task address high  (1 clock )
 31c:	10 e0       	ldi	r17, 0x00	; 0
		LSR   R17                                         ;right shift high byte    (1 clock )
 31e:	16 95       	lsr	r17
		ROR   R16                                         ;rotate right th carry    (1 clock )
 320:	07 95       	ror	r16
		PUSH  R16                                         ;push word addr low       (2 clocks)
 322:	0f 93       	push	r16
		PUSH  R17                                         ;push word addr high      (2 clocks) 
 324:	1f 93       	push	r17
		
        KER_CONTEXT_SAVE
 326:	0f 92       	push	r0
 328:	0f b6       	in	r0, 0x3f	; 63
 32a:	0f 92       	push	r0
 32c:	1f 92       	push	r1
 32e:	11 24       	eor	r1, r1
 330:	2f 92       	push	r2
 332:	3f 92       	push	r3
 334:	4f 92       	push	r4
 336:	5f 92       	push	r5
 338:	6f 92       	push	r6
 33a:	7f 92       	push	r7
 33c:	8f 92       	push	r8
 33e:	9f 92       	push	r9
 340:	af 92       	push	r10
 342:	bf 92       	push	r11
 344:	cf 92       	push	r12
 346:	df 92       	push	r13
 348:	ef 92       	push	r14
 34a:	ff 92       	push	r15
 34c:	0f 93       	push	r16
 34e:	1f 93       	push	r17
 350:	2f 93       	push	r18
 352:	3f 93       	push	r19
 354:	4f 93       	push	r20
 356:	5f 93       	push	r21
 358:	6f 93       	push	r22
 35a:	7f 93       	push	r23
 35c:	8f 93       	push	r24
 35e:	9f 93       	push	r25
 360:	af 93       	push	r26
 362:	bf 93       	push	r27
 364:	cf 93       	push	r28
 366:	df 93       	push	r29
 368:	ef 93       	push	r30
 36a:	ff 93       	push	r31
		
		;save PSP of task0
        IN    R16                , IOSPL                  ;read SPL                 (1 clock )
 36c:	0d b7       	in	r16, 0x3d	; 61
        IN    R17                , IOSPH                  ;read SPH                 (1 clock )
 36e:	1e b7       	in	r17, 0x3e	; 62
        STS   ker_stp + 0        , R16                    ;set stp of task0         (2 clocks) 
 370:	00 93 0d 01 	sts	0x010D, r16
        STS   ker_stp + 1        , R17                    ;set stp of task0         (2 clocks) 
 374:	10 93 0e 01 	sts	0x010E, r17
		
		;set task index -> 0
		LDI   R16                , 0x00                   ;set R16 to 0x00          (1 clock )
 378:	00 e0       	ldi	r16, 0x00	; 0
		STS   ker_tski           , R16                    ;set ker_tski = 0         (2 clocks) 
 37a:	00 93 0b 01 	sts	0x010B, r16
		
		;restore MSP
		OUT   IOSPL              , R2                     ;load SPL                 (1 clock )
 37e:	2d be       	out	0x3d, r2	; 61
        OUT   IOSPH              , R3                     ;load SPH                 (1 clock )
 380:	3e be       	out	0x3e, r3	; 62
        RET                                               ;return from subroutine   (4 clocks) 
 382:	08 95       	ret

00000384 <Kernel_Task1_Init>:
		;save MSP
		;IN    R2                 , IOSPL
		;IN    R3                 , IOSPH
		
		;set stack for task1
		LDI   R16                , lo8(ker_stk1+KER_STZ)  ;fetch top SPL1,          (1 clock )
 384:	03 e1       	ldi	r16, 0x13	; 19
		LDI   R17                , hi8(ker_stk1+KER_STZ)  ;fetch top SPH1,          (1 clock )
 386:	12 e0       	ldi	r17, 0x02	; 2
		OUT   IOSPL              , R16                    ;load SPL                 (1 clock )
 388:	0d bf       	out	0x3d, r16	; 61
        OUT   IOSPH              , R17                    ;load SPH                 (1 clock )
 38a:	1e bf       	out	0x3e, r17	; 62
		
		;psuh return address of task1
		LDI   R16                , lo8(Tasks_Task1)       ;fetch task address low   (1 clock )
 38c:	04 ee       	ldi	r16, 0xE4	; 228
		LDI   R17                , hi8(Tasks_Task1)       ;fetch task address high  (1 clock )
 38e:	10 e0       	ldi	r17, 0x00	; 0
		LSR   R17                                         ;right shift high byte    (1 clock )
 390:	16 95       	lsr	r17
		ROR   R16                                         ;rotate right th carry    (1 clock )
 392:	07 95       	ror	r16
		PUSH  R16                                         ;push word addr low       (2 clocks)
 394:	0f 93       	push	r16
		PUSH  R17                                         ;push word addr high      (2 clocks) 
 396:	1f 93       	push	r17
		
        ;KER_CNTXT_SV
		
		;save PSP of task1
        IN    R16                , IOSPL                  ;read SPL                 (1 clock )
 398:	0d b7       	in	r16, 0x3d	; 61
        IN    R17                , IOSPH                  ;read SPH                 (1 clock )
 39a:	1e b7       	in	r17, 0x3e	; 62
        STS   ker_stp + 2        , R16                    ;set stp of task1         (2 clocks) 
 39c:	00 93 0f 01 	sts	0x010F, r16
        STS   ker_stp + 3        , R17                    ;set stp of task1         (2 clocks) 
 3a0:	10 93 10 01 	sts	0x0110, r17
		
		;set task index -> 1
		LDI   R16                , 0x01                   ;set R16 to 0x01          (1 clock )
 3a4:	01 e0       	ldi	r16, 0x01	; 1
		STS   ker_tski           , R16                    ;set ker_tski = 1         (2 clocks) 
 3a6:	00 93 0b 01 	sts	0x010B, r16
		
		;restore MSP
		;OUT   IOSPL              , R2                     ;load SPL                 (1 clock )
        ;OUT   IOSPH              , R3                     ;load SPH                 (1 clock )
		SEI
 3aa:	78 94       	sei
        RET                                               ;return from subroutine   (4 clocks)  
 3ac:	08 95       	ret

000003ae <Debug_Init>:


;;========================================Debug Init========================================;;
Debug_Init:
        ;init registers for UART0
		LDI   R16                , (1<<1)                 ;mask U2x,                (1 clock )
 3ae:	02 e0       	ldi	r16, 0x02	; 2
		STS   SRUCSR0A           , R16                    ;load val to UCSR0A,      (2 clocks)
 3b0:	00 93 c0 00 	sts	0x00C0, r16
		LDI   R16                , 0x00                   ;clear R16,               (1 clock )
 3b4:	00 e0       	ldi	r16, 0x00	; 0
		STS   SRUBRR0H           , R16                    ;load val to UBRR0H,      (2 clocks)
 3b6:	00 93 c5 00 	sts	0x00C5, r16
		LDI   R16                , 0x03                   ;set 0x03, 250k baud,     (1 clock )
 3ba:	03 e0       	ldi	r16, 0x03	; 3
		STS   SRUBRR0L           , R16                    ;load val to UBRR0L,      (2 clocks)
 3bc:	00 93 c4 00 	sts	0x00C4, r16
		LDI   R16                , (1<<1)|(1<<2)          ;config 8 data bit        (1 clock )
 3c0:	06 e0       	ldi	r16, 0x06	; 6
		STS   SRUCSR0C           , R16                    ;load val to UCSR0C,      (2 clocks)
 3c2:	00 93 c2 00 	sts	0x00C2, r16
		LDI   R16                , (1<<3)                 ;enable tx,               (1 clock )
 3c6:	08 e0       	ldi	r16, 0x08	; 8
		STS   SRUCSR0B           , R16                    ;load val to UCSR0B,      (2 clocks)
 3c8:	00 93 c1 00 	sts	0x00C1, r16
        RET                                               ;return from subroutine,  (4 clocks) 
 3cc:	08 95       	ret

000003ce <Debug_Tx_Byte>:


;;=========================================Debug Tx=========================================;;
Debug_Tx_Byte:
		;write single byte to data register (Arg R24)
		STS   SRGPIOR0           , R16                    ;store R16 val,           (2 clocks)
 3ce:	00 93 3e 00 	sts	0x003E, r16
		STS   SRUDR0             , R24                    ;load val to UDR0,        (2 clocks)
 3d2:	80 93 c6 00 	sts	0x00C6, r24

000003d6 <__UDRE0_CLEARED>:
		
    __UDRE0_CLEARED:
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,      (2 clocks)
 3d6:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x05                   ;skip if UDRE0 is set,    (2 clocks)
 3da:	05 ff       	sbrs	r16, 5
		RJMP  __UDRE0_CLEARED                             ;wait until UDRE0 is set, (2 clocks)
 3dc:	fc cf       	rjmp	.-8      	; 0x3d6 <__UDRE0_CLEARED>
		LDS   R16                , SRGPIOR0               ;restore R16 val,         (2 clocks)
 3de:	00 91 3e 00 	lds	r16, 0x003E
        RET                                               ;return from subroutine,  (4 clocks) 
 3e2:	08 95       	ret

000003e4 <Debug_Tx_Byte_Conf>:


;;=========================================Debug Tx=========================================;;
Debug_Tx_Byte_Conf:
        ;write single byte to data register and wait until tx is complete (Arg R24)
		STS   SRGPIOR0           , R16                    ;store R16 val,           (2 clocks)
 3e4:	00 93 3e 00 	sts	0x003E, r16
		STS   SRUDR0             , R24                    ;load val to UDR0,        (2 clocks)
 3e8:	80 93 c6 00 	sts	0x00C6, r24

000003ec <__TXC0_CLEARED>:
		
    __TXC0_CLEARED:
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,      (2 clocks)
 3ec:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x06                   ;skip if TXC0 is set,     (2 clocks)
 3f0:	06 ff       	sbrs	r16, 6
		RJMP  __TXC0_CLEARED                              ;wait until TXC0 is set,  (2 clocks)
 3f2:	fc cf       	rjmp	.-8      	; 0x3ec <__TXC0_CLEARED>
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,      (2 clocks)
 3f4:	00 91 c0 00 	lds	r16, 0x00C0
		ORI   R16                , (1<<6)                 ;mask bit 6,              (1 clock )
 3f8:	00 64       	ori	r16, 0x40	; 64
		STS   SRUCSR0A           , R16                    ;load val to UCSR0B,      (2 clocks)
 3fa:	00 93 c0 00 	sts	0x00C0, r16
		LDS   R16                , SRGPIOR0               ;restore R16 val,         (2 clocks)
 3fe:	00 91 3e 00 	lds	r16, 0x003E
        RET                                               ;return from subroutine,  (4 clocks) 
 402:	08 95       	ret

00000404 <Debug_Tx_Word_Conf>:

;;======================================Debug Tx Word=======================================;;
Debug_Tx_Word_Conf:
        ;write 2 bytes to data register and wait until tx is complete (Arg R24, R25)
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 404:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <Debug_Tx_Byte_Conf>
		MOV   R24                , R25                    ;copy R25 to R24          (1 clock )
 408:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 40a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <Debug_Tx_Byte_Conf>
        RET                                               ;return from subroutine,  (4 clocks) 
 40e:	08 95       	ret

00000410 <Debug_Tx_DWord_Conf>:

;;=====================================Debug Tx DWord=======================================;;
Debug_Tx_DWord_Conf:
        ;write 4 bytes to data register and wait until tx is complete (Arg R22-R25)
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks)
 410:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R22                    ;copy R22 to R24          (1 clock )
 414:	86 2f       	mov	r24, r22
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 416:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <Debug_Tx_Byte_Conf>
		MOV   R24                , R23                    ;copy R23 to R24          (1 clock )
 41a:	87 2f       	mov	r24, r23
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 41c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24              (2 clocks)
 420:	80 91 4a 00 	lds	r24, 0x004A
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 424:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <Debug_Tx_Byte_Conf>
		MOV   R24                , R25                    ;copy R22 to R24          (1 clock )
 428:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 42a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <Debug_Tx_Byte_Conf>
        RET                                               ;return from subroutine,  (4 clocks) 
 42e:	08 95       	ret

00000430 <Debug_Tx_From_RAM>:


;;===================================Debug Tx From RAM======================================;;
Debug_Tx_From_RAM:
        ;print data from RAM address (Arg R24-R25)
		MOV   R16                , R30                    ;copy R30 to R16          (1 clock )
 430:	0e 2f       	mov	r16, r30
		MOV   R17                , R31                    ;copy R31 to R17          (1 clock )
 432:	1f 2f       	mov	r17, r31
		MOV   R18                , R24                    ;copy R24 to R18          (1 clock )
 434:	28 2f       	mov	r18, r24
		MOV   R30                , R24                    ;copy R22 to R24          (1 clock )
 436:	e8 2f       	mov	r30, r24
		MOV   R31                , R25                    ;copy R22 to R24          (1 clock )
 438:	f9 2f       	mov	r31, r25
		LD    R24                , Z                      ;load val to R24          (2 clocks)
 43a:	80 81       	ld	r24, Z
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 43c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <Debug_Tx_Byte_Conf>
		MOV   R30                , R16                    ;copy R16 to R30          (1 clock )
 440:	e0 2f       	mov	r30, r16
		MOV   R31                , R17                    ;copy R17 to R31          (1 clock )
 442:	f1 2f       	mov	r31, r17
		MOV   R24                , R18                    ;copy R18 to R24          (1 clock )
 444:	82 2f       	mov	r24, r18
        RET                                               ;return from subroutine,  (4 clocks) 
 446:	08 95       	ret

00000448 <Debug_Tx_RAM_Area>:

;;===================================Debug Tx RAM Area======================================;;
Debug_Tx_RAM_Area:
        ;print data from RAM address (arguments R24:R25, R22)
	__DUMP_BYTES:
	    CALL  Debug_Tx_From_RAM                           ;send via uart from ram
 448:	0e 94 18 02 	call	0x430	; 0x430 <Debug_Tx_From_RAM>
		SUBI  R24                , 0x01                   ;decrement from LSByte
 44c:	81 50       	subi	r24, 0x01	; 1
        SBCI  R25                , 0x00                   ;decrement if carry
 44e:	90 40       	sbci	r25, 0x00	; 0
		SUBI  R22                , 0x01                   ;decrement
 450:	61 50       	subi	r22, 0x01	; 1
		BRNE  __DUMP_BYTES
 452:	d1 f7       	brne	.-12     	; 0x448 <Debug_Tx_RAM_Area>
        RET                                               ;return from subroutine,  (4 clocks) 
 454:	08 95       	ret

00000456 <_exit>:
 456:	f8 94       	cli

00000458 <__stop_program>:
 458:	ff cf       	rjmp	.-2      	; 0x458 <__stop_program>
