
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bc2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000558  00800100  00800100  00000c36  2**0
                  ALLOC
  2 .stab         00000b70  00000000  00000000  00000c38  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000006c  00000000  00000000  000017a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00001814  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000bd  00000000  00000000  00001854  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001ea  00000000  00000000  00001911  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000e2  00000000  00000000  00001afb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043b  00000000  00000000  00001bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00002018  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000124  00000000  00000000  000020d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <__vector_16>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	00 00       	nop
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 00       	nop
  76:	00 00       	nop
  78:	00 00       	nop
  7a:	00 00       	nop
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 00       	nop
  82:	00 00       	nop
  84:	00 00       	nop
  86:	00 00       	nop
  88:	18 c2       	rjmp	.+1072   	; 0x4ba <__vector_16>

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61
  96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  9a:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:


    
int main(void) {
    
	Kernel_Init();
  a2:	0e 94 39 04 	call	0x872	; 0x872 <Kernel_Init>

	Kernel_Task_Create(Tasks_Task1,  0);
  a6:	83 eb       	ldi	r24, 0xB3	; 179
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	0e 94 90 03 	call	0x720	; 0x720 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task2,  3);
  b0:	8a e8       	ldi	r24, 0x8A	; 138
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	63 e0       	ldi	r22, 0x03	; 3
  b6:	0e 94 90 03 	call	0x720	; 0x720 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task3,  2);
  ba:	81 e6       	ldi	r24, 0x61	; 97
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	62 e0       	ldi	r22, 0x02	; 2
  c0:	0e 94 90 03 	call	0x720	; 0x720 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task4,  1);
  c4:	88 e3       	ldi	r24, 0x38	; 56
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	0e 94 90 03 	call	0x720	; 0x720 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task5,  4);
  ce:	8f e0       	ldi	r24, 0x0F	; 15
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	64 e0       	ldi	r22, 0x04	; 4
  d4:	0e 94 90 03 	call	0x720	; 0x720 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task6,  6);
  d8:	8c ee       	ldi	r24, 0xEC	; 236
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	66 e0       	ldi	r22, 0x06	; 6
  de:	0e 94 90 03 	call	0x720	; 0x720 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task7,  5);
  e2:	89 ec       	ldi	r24, 0xC9	; 201
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	65 e0       	ldi	r22, 0x05	; 5
  e8:	0e 94 90 03 	call	0x720	; 0x720 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task8,  8);
  ec:	86 ea       	ldi	r24, 0xA6	; 166
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	68 e0       	ldi	r22, 0x08	; 8
  f2:	0e 94 90 03 	call	0x720	; 0x720 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task9,  7);
  f6:	83 e8       	ldi	r24, 0x83	; 131
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	67 e0       	ldi	r22, 0x07	; 7
  fc:	0e 94 90 03 	call	0x720	; 0x720 <Kernel_Task_Create>
	
	Kernel_Start_Tasks();
 100:	0e 94 01 04 	call	0x802	; 0x802 <Kernel_Start_Tasks>
 104:	ff cf       	rjmp	.-2      	; 0x104 <SRUDR0+0x3e>

00000106 <Tasks_Task9>:
  }
}

void Tasks_Task9(void){
  
  Debug_Init(0);
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 53 05 	call	0xaa6	; 0xaa6 <Debug_Init>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(9));
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
    Debug_Tx_Byte('\r');
    Debug_Tx_Byte('\n');*/
    Debug_Tx_Byte( (Kernel_CPU_Usage_Get()/10) + 48);
 10e:	0e 94 50 05 	call	0xaa0	; 0xaa0 <Kernel_CPU_Usage_Get>
 112:	6a e0       	ldi	r22, 0x0A	; 10
 114:	0e 94 b1 05 	call	0xb62	; 0xb62 <__udivmodqi4>
 118:	80 5d       	subi	r24, 0xD0	; 208
 11a:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Debug_Tx_Byte( (Kernel_CPU_Usage_Get()%10) + 48);
 11e:	0e 94 50 05 	call	0xaa0	; 0xaa0 <Kernel_CPU_Usage_Get>
 122:	6a e0       	ldi	r22, 0x0A	; 10
 124:	0e 94 b1 05 	call	0xb62	; 0xb62 <__udivmodqi4>
 128:	89 2f       	mov	r24, r25
 12a:	80 5d       	subi	r24, 0xD0	; 208
 12c:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Debug_Tx_Byte('%');
 130:	85 e2       	ldi	r24, 0x25	; 37
 132:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Debug_Tx_Byte('\r');
 136:	8d e0       	ldi	r24, 0x0D	; 13
 138:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Debug_Tx_Byte('\n');
 13c:	8a e0       	ldi	r24, 0x0A	; 10
 13e:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Kernel_Task_Sleep(90);
 142:	8a e5       	ldi	r24, 0x5A	; 90
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Kernel_Task_Sleep>
 14a:	e1 cf       	rjmp	.-62     	; 0x10e <Tasks_Task9+0x8>

0000014c <Tasks_Task8>:
  }
}

void Tasks_Task8(void){
  
  Debug_Init(0);
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 53 05 	call	0xaa6	; 0xaa6 <Debug_Init>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(8));
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
    Debug_Tx_Byte('\r');
    Debug_Tx_Byte('\n');*/
    Debug_Tx_Byte( (Kernel_CPU_Usage_Get()/10) + 48);
 154:	0e 94 50 05 	call	0xaa0	; 0xaa0 <Kernel_CPU_Usage_Get>
 158:	6a e0       	ldi	r22, 0x0A	; 10
 15a:	0e 94 b1 05 	call	0xb62	; 0xb62 <__udivmodqi4>
 15e:	80 5d       	subi	r24, 0xD0	; 208
 160:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Debug_Tx_Byte( (Kernel_CPU_Usage_Get()%10) + 48);
 164:	0e 94 50 05 	call	0xaa0	; 0xaa0 <Kernel_CPU_Usage_Get>
 168:	6a e0       	ldi	r22, 0x0A	; 10
 16a:	0e 94 b1 05 	call	0xb62	; 0xb62 <__udivmodqi4>
 16e:	89 2f       	mov	r24, r25
 170:	80 5d       	subi	r24, 0xD0	; 208
 172:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Debug_Tx_Byte('%');
 176:	85 e2       	ldi	r24, 0x25	; 37
 178:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Debug_Tx_Byte('\r');
 17c:	8d e0       	ldi	r24, 0x0D	; 13
 17e:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Debug_Tx_Byte('\n');
 182:	8a e0       	ldi	r24, 0x0A	; 10
 184:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Kernel_Task_Sleep(80);
 188:	80 e5       	ldi	r24, 0x50	; 80
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Kernel_Task_Sleep>
 190:	e1 cf       	rjmp	.-62     	; 0x154 <Tasks_Task8+0x8>

00000192 <Tasks_Task7>:
  }
}

void Tasks_Task7(void){
  
  Debug_Init(0);
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 53 05 	call	0xaa6	; 0xaa6 <Debug_Init>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(7));
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
    Debug_Tx_Byte('\r');
    Debug_Tx_Byte('\n');*/
    Debug_Tx_Byte( (Kernel_CPU_Usage_Get()/10) + 48);
 19a:	0e 94 50 05 	call	0xaa0	; 0xaa0 <Kernel_CPU_Usage_Get>
 19e:	6a e0       	ldi	r22, 0x0A	; 10
 1a0:	0e 94 b1 05 	call	0xb62	; 0xb62 <__udivmodqi4>
 1a4:	80 5d       	subi	r24, 0xD0	; 208
 1a6:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Debug_Tx_Byte( (Kernel_CPU_Usage_Get()%10) + 48);
 1aa:	0e 94 50 05 	call	0xaa0	; 0xaa0 <Kernel_CPU_Usage_Get>
 1ae:	6a e0       	ldi	r22, 0x0A	; 10
 1b0:	0e 94 b1 05 	call	0xb62	; 0xb62 <__udivmodqi4>
 1b4:	89 2f       	mov	r24, r25
 1b6:	80 5d       	subi	r24, 0xD0	; 208
 1b8:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Debug_Tx_Byte('%');
 1bc:	85 e2       	ldi	r24, 0x25	; 37
 1be:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Debug_Tx_Byte('\r');
 1c2:	8d e0       	ldi	r24, 0x0D	; 13
 1c4:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Debug_Tx_Byte('\n');
 1c8:	8a e0       	ldi	r24, 0x0A	; 10
 1ca:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Kernel_Task_Sleep(70);
 1ce:	86 e4       	ldi	r24, 0x46	; 70
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Kernel_Task_Sleep>
 1d6:	e1 cf       	rjmp	.-62     	; 0x19a <Tasks_Task7+0x8>

000001d8 <Tasks_Task6>:
  }
}

void Tasks_Task6(void){
  
  Debug_Init(0);
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 53 05 	call	0xaa6	; 0xaa6 <Debug_Init>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(6));
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
    Debug_Tx_Byte('\r');
    Debug_Tx_Byte('\n');*/
    Debug_Tx_Byte( (Kernel_CPU_Usage_Get()/10) + 48);
 1e0:	0e 94 50 05 	call	0xaa0	; 0xaa0 <Kernel_CPU_Usage_Get>
 1e4:	6a e0       	ldi	r22, 0x0A	; 10
 1e6:	0e 94 b1 05 	call	0xb62	; 0xb62 <__udivmodqi4>
 1ea:	80 5d       	subi	r24, 0xD0	; 208
 1ec:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Debug_Tx_Byte( (Kernel_CPU_Usage_Get()%10) + 48);
 1f0:	0e 94 50 05 	call	0xaa0	; 0xaa0 <Kernel_CPU_Usage_Get>
 1f4:	6a e0       	ldi	r22, 0x0A	; 10
 1f6:	0e 94 b1 05 	call	0xb62	; 0xb62 <__udivmodqi4>
 1fa:	89 2f       	mov	r24, r25
 1fc:	80 5d       	subi	r24, 0xD0	; 208
 1fe:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Debug_Tx_Byte('%');
 202:	85 e2       	ldi	r24, 0x25	; 37
 204:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Debug_Tx_Byte('\r');
 208:	8d e0       	ldi	r24, 0x0D	; 13
 20a:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Debug_Tx_Byte('\n');
 20e:	8a e0       	ldi	r24, 0x0A	; 10
 210:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Kernel_Task_Sleep(60);
 214:	8c e3       	ldi	r24, 0x3C	; 60
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Kernel_Task_Sleep>
 21c:	e1 cf       	rjmp	.-62     	; 0x1e0 <Tasks_Task6+0x8>

0000021e <Tasks_Task5>:
    Kernel_Task_Sleep(40);
	
  }
}

void Tasks_Task5(void){
 21e:	1f 93       	push	r17
  
  DDRC |= (1<<5);
 220:	3d 9a       	sbi	0x07, 5	; 7

  Debug_Init(0);
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 53 05 	call	0xaa6	; 0xaa6 <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<5);
 22a:	10 e2       	ldi	r17, 0x20	; 32
 22c:	88 b1       	in	r24, 0x08	; 8
 22e:	81 27       	eor	r24, r17
 230:	88 b9       	out	0x08, r24	; 8
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(5));
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
    Debug_Tx_Byte('\r');
    Debug_Tx_Byte('\n');*/
    Debug_Tx_Byte( (Kernel_CPU_Usage_Get()/10) + 48);
 232:	0e 94 50 05 	call	0xaa0	; 0xaa0 <Kernel_CPU_Usage_Get>
 236:	6a e0       	ldi	r22, 0x0A	; 10
 238:	0e 94 b1 05 	call	0xb62	; 0xb62 <__udivmodqi4>
 23c:	80 5d       	subi	r24, 0xD0	; 208
 23e:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Debug_Tx_Byte( (Kernel_CPU_Usage_Get()%10) + 48);
 242:	0e 94 50 05 	call	0xaa0	; 0xaa0 <Kernel_CPU_Usage_Get>
 246:	6a e0       	ldi	r22, 0x0A	; 10
 248:	0e 94 b1 05 	call	0xb62	; 0xb62 <__udivmodqi4>
 24c:	89 2f       	mov	r24, r25
 24e:	80 5d       	subi	r24, 0xD0	; 208
 250:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Debug_Tx_Byte('%');
 254:	85 e2       	ldi	r24, 0x25	; 37
 256:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Debug_Tx_Byte('\r');
 25a:	8d e0       	ldi	r24, 0x0D	; 13
 25c:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Debug_Tx_Byte('\n');
 260:	8a e0       	ldi	r24, 0x0A	; 10
 262:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Kernel_Task_Sleep(50);
 266:	82 e3       	ldi	r24, 0x32	; 50
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Kernel_Task_Sleep>
 26e:	de cf       	rjmp	.-68     	; 0x22c <Tasks_Task5+0xe>

00000270 <Tasks_Task4>:
    Kernel_Task_Sleep(30);
	
  }
}

void Tasks_Task4(void){
 270:	1f 93       	push	r17
  
  DDRC |= (1<<4);
 272:	3c 9a       	sbi	0x07, 4	; 7

  Debug_Init(0);
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 53 05 	call	0xaa6	; 0xaa6 <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<4);
 27c:	10 e1       	ldi	r17, 0x10	; 16
 27e:	88 b1       	in	r24, 0x08	; 8
 280:	81 27       	eor	r24, r17
 282:	88 b9       	out	0x08, r24	; 8
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(4));
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
    Debug_Tx_Byte('\r');
    Debug_Tx_Byte('\n');*/
    Debug_Tx_Byte( (Kernel_CPU_Usage_Get()/10) + 48);
 284:	0e 94 50 05 	call	0xaa0	; 0xaa0 <Kernel_CPU_Usage_Get>
 288:	6a e0       	ldi	r22, 0x0A	; 10
 28a:	0e 94 b1 05 	call	0xb62	; 0xb62 <__udivmodqi4>
 28e:	80 5d       	subi	r24, 0xD0	; 208
 290:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Debug_Tx_Byte( (Kernel_CPU_Usage_Get()%10) + 48);
 294:	0e 94 50 05 	call	0xaa0	; 0xaa0 <Kernel_CPU_Usage_Get>
 298:	6a e0       	ldi	r22, 0x0A	; 10
 29a:	0e 94 b1 05 	call	0xb62	; 0xb62 <__udivmodqi4>
 29e:	89 2f       	mov	r24, r25
 2a0:	80 5d       	subi	r24, 0xD0	; 208
 2a2:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Debug_Tx_Byte('%');
 2a6:	85 e2       	ldi	r24, 0x25	; 37
 2a8:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Debug_Tx_Byte('\r');
 2ac:	8d e0       	ldi	r24, 0x0D	; 13
 2ae:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Debug_Tx_Byte('\n');
 2b2:	8a e0       	ldi	r24, 0x0A	; 10
 2b4:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Kernel_Task_Sleep(40);
 2b8:	88 e2       	ldi	r24, 0x28	; 40
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Kernel_Task_Sleep>
 2c0:	de cf       	rjmp	.-68     	; 0x27e <Tasks_Task4+0xe>

000002c2 <Tasks_Task3>:
    Kernel_Task_Sleep(20);
	
  }
}

void Tasks_Task3(void){
 2c2:	1f 93       	push	r17
  
  DDRC |= (1<<3);
 2c4:	3b 9a       	sbi	0x07, 3	; 7

  Debug_Init(0);
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 53 05 	call	0xaa6	; 0xaa6 <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<3);
 2ce:	18 e0       	ldi	r17, 0x08	; 8
 2d0:	88 b1       	in	r24, 0x08	; 8
 2d2:	81 27       	eor	r24, r17
 2d4:	88 b9       	out	0x08, r24	; 8
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(3));
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
    Debug_Tx_Byte('\r');
    Debug_Tx_Byte('\n');*/
    Debug_Tx_Byte( (Kernel_CPU_Usage_Get()/10) + 48);
 2d6:	0e 94 50 05 	call	0xaa0	; 0xaa0 <Kernel_CPU_Usage_Get>
 2da:	6a e0       	ldi	r22, 0x0A	; 10
 2dc:	0e 94 b1 05 	call	0xb62	; 0xb62 <__udivmodqi4>
 2e0:	80 5d       	subi	r24, 0xD0	; 208
 2e2:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Debug_Tx_Byte( (Kernel_CPU_Usage_Get()%10) + 48);
 2e6:	0e 94 50 05 	call	0xaa0	; 0xaa0 <Kernel_CPU_Usage_Get>
 2ea:	6a e0       	ldi	r22, 0x0A	; 10
 2ec:	0e 94 b1 05 	call	0xb62	; 0xb62 <__udivmodqi4>
 2f0:	89 2f       	mov	r24, r25
 2f2:	80 5d       	subi	r24, 0xD0	; 208
 2f4:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Debug_Tx_Byte('%');
 2f8:	85 e2       	ldi	r24, 0x25	; 37
 2fa:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Debug_Tx_Byte('\r');
 2fe:	8d e0       	ldi	r24, 0x0D	; 13
 300:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Debug_Tx_Byte('\n');
 304:	8a e0       	ldi	r24, 0x0A	; 10
 306:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Kernel_Task_Sleep(30);
 30a:	8e e1       	ldi	r24, 0x1E	; 30
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Kernel_Task_Sleep>
 312:	de cf       	rjmp	.-68     	; 0x2d0 <Tasks_Task3+0xe>

00000314 <Tasks_Task2>:
    Kernel_Task_Sleep(10);
    
  }
}

void Tasks_Task2(void){
 314:	1f 93       	push	r17
  
  DDRC |= (1<<2);
 316:	3a 9a       	sbi	0x07, 2	; 7

  Debug_Init(0);
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 53 05 	call	0xaa6	; 0xaa6 <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<2);
 320:	14 e0       	ldi	r17, 0x04	; 4
 322:	88 b1       	in	r24, 0x08	; 8
 324:	81 27       	eor	r24, r17
 326:	88 b9       	out	0x08, r24	; 8
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(2));
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
    Debug_Tx_Byte('\r');
    Debug_Tx_Byte('\n');*/
    Debug_Tx_Byte( (Kernel_CPU_Usage_Get()/10) + 48);
 328:	0e 94 50 05 	call	0xaa0	; 0xaa0 <Kernel_CPU_Usage_Get>
 32c:	6a e0       	ldi	r22, 0x0A	; 10
 32e:	0e 94 b1 05 	call	0xb62	; 0xb62 <__udivmodqi4>
 332:	80 5d       	subi	r24, 0xD0	; 208
 334:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Debug_Tx_Byte( (Kernel_CPU_Usage_Get()%10) + 48);
 338:	0e 94 50 05 	call	0xaa0	; 0xaa0 <Kernel_CPU_Usage_Get>
 33c:	6a e0       	ldi	r22, 0x0A	; 10
 33e:	0e 94 b1 05 	call	0xb62	; 0xb62 <__udivmodqi4>
 342:	89 2f       	mov	r24, r25
 344:	80 5d       	subi	r24, 0xD0	; 208
 346:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Debug_Tx_Byte('%');
 34a:	85 e2       	ldi	r24, 0x25	; 37
 34c:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Debug_Tx_Byte('\r');
 350:	8d e0       	ldi	r24, 0x0D	; 13
 352:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Debug_Tx_Byte('\n');
 356:	8a e0       	ldi	r24, 0x0A	; 10
 358:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Kernel_Task_Sleep(20);
 35c:	84 e1       	ldi	r24, 0x14	; 20
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Kernel_Task_Sleep>
 364:	de cf       	rjmp	.-68     	; 0x322 <Tasks_Task2+0xe>

00000366 <Tasks_Task1>:
#include <util/delay.h>
#include "kernel.h"
#include "tasks.h"
#include "debug.h"

void Tasks_Task1(void){
 366:	af 92       	push	r10
 368:	bf 92       	push	r11
 36a:	cf 92       	push	r12
 36c:	df 92       	push	r13
 36e:	ef 92       	push	r14
 370:	ff 92       	push	r15
 372:	0f 93       	push	r16
 374:	1f 93       	push	r17
  
  uint32_t vcc=0, temp;
  uint8_t  val[4];

  DDRC |= (1<<1);
 376:	39 9a       	sbi	0x07, 1	; 7
  Debug_Init(0);
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 53 05 	call	0xaa6	; 0xaa6 <Debug_Init>

  ADMUX  =0x00;
 380:	10 92 7c 00 	sts	0x007C, r1
  ADCSRA =0x00;
 384:	10 92 7a 00 	sts	0x007A, r1
  ADMUX |=(1<<REFS0)|(1<<MUX1) |(1<<MUX2) |(1<<MUX3);
 388:	80 91 7c 00 	lds	r24, 0x007C
 38c:	8e 64       	ori	r24, 0x4E	; 78
 38e:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA|=(1<<ADPS0)|(1<<ADPS2);
 392:	80 91 7a 00 	lds	r24, 0x007A
 396:	85 60       	ori	r24, 0x05	; 5
 398:	80 93 7a 00 	sts	0x007A, r24
  ADCSRA|=(1<<ADEN) ;
 39c:	80 91 7a 00 	lds	r24, 0x007A
 3a0:	80 68       	ori	r24, 0x80	; 128
 3a2:	80 93 7a 00 	sts	0x007A, r24
  Kernel_Task_Sleep(5);
 3a6:	85 e0       	ldi	r24, 0x05	; 5
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Kernel_Task_Sleep>
  
  while(1){
    
    PORTC ^= (1<<1);
 3ae:	82 e0       	ldi	r24, 0x02	; 2
 3b0:	a8 2e       	mov	r10, r24
 3b2:	88 b1       	in	r24, 0x08	; 8
 3b4:	8a 25       	eor	r24, r10
 3b6:	88 b9       	out	0x08, r24	; 8
    
    ADCSRA |= (1<<ADSC);
 3b8:	80 91 7a 00 	lds	r24, 0x007A
 3bc:	80 64       	ori	r24, 0x40	; 64
 3be:	80 93 7a 00 	sts	0x007A, r24
    while((ADCSRA & (1<<ADIF))==0);
 3c2:	80 91 7a 00 	lds	r24, 0x007A
 3c6:	84 ff       	sbrs	r24, 4
 3c8:	fc cf       	rjmp	.-8      	; 0x3c2 <Tasks_Task1+0x5c>
    vcc = ADCW;
 3ca:	20 91 78 00 	lds	r18, 0x0078
 3ce:	30 91 79 00 	lds	r19, 0x0079
    ADCSRA |= (1<<ADIF);
 3d2:	80 91 7a 00 	lds	r24, 0x007A
 3d6:	80 61       	ori	r24, 0x10	; 16
 3d8:	80 93 7a 00 	sts	0x007A, r24
    temp  = 1126400; //1024*1100
    temp /= vcc;
 3dc:	40 e0       	ldi	r20, 0x00	; 0
 3de:	50 e0       	ldi	r21, 0x00	; 0
 3e0:	60 e0       	ldi	r22, 0x00	; 0
 3e2:	70 e3       	ldi	r23, 0x30	; 48
 3e4:	81 e1       	ldi	r24, 0x11	; 17
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__udivmodsi4>
 3ec:	12 2f       	mov	r17, r18
 3ee:	e3 2e       	mov	r14, r19
 3f0:	d4 2e       	mov	r13, r20
 3f2:	c5 2e       	mov	r12, r21
    vcc   = temp;

    val[0] = (vcc/1000)%10 + 48;
 3f4:	62 2f       	mov	r22, r18
 3f6:	73 2f       	mov	r23, r19
 3f8:	84 2f       	mov	r24, r20
 3fa:	95 2f       	mov	r25, r21
 3fc:	28 ee       	ldi	r18, 0xE8	; 232
 3fe:	33 e0       	ldi	r19, 0x03	; 3
 400:	40 e0       	ldi	r20, 0x00	; 0
 402:	50 e0       	ldi	r21, 0x00	; 0
 404:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__udivmodsi4>
 408:	ca 01       	movw	r24, r20
 40a:	b9 01       	movw	r22, r18
 40c:	2a e0       	ldi	r18, 0x0A	; 10
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	40 e0       	ldi	r20, 0x00	; 0
 412:	50 e0       	ldi	r21, 0x00	; 0
 414:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__udivmodsi4>
 418:	b6 2e       	mov	r11, r22
    val[1] = (vcc/100)%10 + 48;
 41a:	61 2f       	mov	r22, r17
 41c:	7e 2d       	mov	r23, r14
 41e:	8d 2d       	mov	r24, r13
 420:	9c 2d       	mov	r25, r12
 422:	24 e6       	ldi	r18, 0x64	; 100
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	40 e0       	ldi	r20, 0x00	; 0
 428:	50 e0       	ldi	r21, 0x00	; 0
 42a:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__udivmodsi4>
 42e:	ca 01       	movw	r24, r20
 430:	b9 01       	movw	r22, r18
 432:	2a e0       	ldi	r18, 0x0A	; 10
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	40 e0       	ldi	r20, 0x00	; 0
 438:	50 e0       	ldi	r21, 0x00	; 0
 43a:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__udivmodsi4>
 43e:	f6 2e       	mov	r15, r22
 440:	80 e3       	ldi	r24, 0x30	; 48
 442:	f8 0e       	add	r15, r24
    val[2] = (vcc/10)%10 + 48;
 444:	61 2f       	mov	r22, r17
 446:	7e 2d       	mov	r23, r14
 448:	8d 2d       	mov	r24, r13
 44a:	9c 2d       	mov	r25, r12
 44c:	2a e0       	ldi	r18, 0x0A	; 10
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	40 e0       	ldi	r20, 0x00	; 0
 452:	50 e0       	ldi	r21, 0x00	; 0
 454:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__udivmodsi4>
 458:	ca 01       	movw	r24, r20
 45a:	b9 01       	movw	r22, r18
 45c:	2a e0       	ldi	r18, 0x0A	; 10
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	40 e0       	ldi	r20, 0x00	; 0
 462:	50 e0       	ldi	r21, 0x00	; 0
 464:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__udivmodsi4>
 468:	06 2f       	mov	r16, r22
 46a:	00 5d       	subi	r16, 0xD0	; 208
    val[3] = (vcc/1)%10 + 48;
 46c:	61 2f       	mov	r22, r17
 46e:	7e 2d       	mov	r23, r14
 470:	8d 2d       	mov	r24, r13
 472:	9c 2d       	mov	r25, r12
 474:	2a e0       	ldi	r18, 0x0A	; 10
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	40 e0       	ldi	r20, 0x00	; 0
 47a:	50 e0       	ldi	r21, 0x00	; 0
 47c:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__udivmodsi4>
 480:	16 2f       	mov	r17, r22
 482:	10 5d       	subi	r17, 0xD0	; 208
    
    for(uint8_t i=0;i<4;i++){
      Debug_Tx_Byte( val[i] );
 484:	8b 2d       	mov	r24, r11
 486:	80 5d       	subi	r24, 0xD0	; 208
 488:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
 48c:	8f 2d       	mov	r24, r15
 48e:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
 492:	80 2f       	mov	r24, r16
 494:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
 498:	81 2f       	mov	r24, r17
 49a:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    }
    Debug_Tx_Byte('%');
 49e:	85 e2       	ldi	r24, 0x25	; 37
 4a0:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Debug_Tx_Byte('\r');
 4a4:	8d e0       	ldi	r24, 0x0D	; 13
 4a6:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Debug_Tx_Byte('\n');
 4aa:	8a e0       	ldi	r24, 0x0A	; 10
 4ac:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
    Kernel_Task_Sleep(10);
 4b0:	8a e0       	ldi	r24, 0x0A	; 10
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Kernel_Task_Sleep>
 4b8:	7c cf       	rjmp	.-264    	; 0x3b2 <Tasks_Task1+0x4c>

000004ba <__vector_16>:


;;=================================ISR execution starting===================================;; 
.global  __vector_16                                                                           
    __vector_16:                                          ;total 40.00uS @8MHz    (320 clocks) 
	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 4ba:	5d 9a       	sbi	0x0b, 5	; 11
        KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 4bc:	0f 92       	push	r0
 4be:	0f b6       	in	r0, 0x3f	; 63
 4c0:	0f 92       	push	r0
 4c2:	1f 92       	push	r1
 4c4:	11 24       	eor	r1, r1
 4c6:	2f 92       	push	r2
 4c8:	3f 92       	push	r3
 4ca:	4f 92       	push	r4
 4cc:	5f 92       	push	r5
 4ce:	6f 92       	push	r6
 4d0:	7f 92       	push	r7
 4d2:	8f 92       	push	r8
 4d4:	9f 92       	push	r9
 4d6:	af 92       	push	r10
 4d8:	bf 92       	push	r11
 4da:	cf 92       	push	r12
 4dc:	df 92       	push	r13
 4de:	ef 92       	push	r14
 4e0:	ff 92       	push	r15
 4e2:	0f 93       	push	r16
 4e4:	1f 93       	push	r17
 4e6:	2f 93       	push	r18
 4e8:	3f 93       	push	r19
 4ea:	4f 93       	push	r20
 4ec:	5f 93       	push	r21
 4ee:	6f 93       	push	r22
 4f0:	7f 93       	push	r23
 4f2:	8f 93       	push	r24
 4f4:	9f 93       	push	r25
 4f6:	af 93       	push	r26
 4f8:	bf 93       	push	r27
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	ef 93       	push	r30
 500:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 502:	ee e0       	ldi	r30, 0x0E	; 14
 504:	f1 e0       	ldi	r31, 0x01	; 1
 506:	00 91 07 01 	lds	r16, 0x0107
 50a:	00 0f       	add	r16, r16
 50c:	e0 0f       	add	r30, r16
 50e:	00 e0       	ldi	r16, 0x00	; 0
 510:	f0 1f       	adc	r31, r16
 512:	0d b7       	in	r16, 0x3d	; 61
 514:	1e b7       	in	r17, 0x3e	; 62
 516:	00 83       	st	Z, r16
 518:	11 83       	std	Z+1, r17	; 0x01
		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 51a:	00 91 06 01 	lds	r16, 0x0106
 51e:	00 93 46 00 	sts	0x0046, r16
		KER_TICK_INCREMENT                                ;increment tick counter ( 26 clocks) 
 522:	00 91 00 01 	lds	r16, 0x0100
 526:	03 95       	inc	r16
 528:	00 93 00 01 	sts	0x0100, r16
 52c:	10 e0       	ldi	r17, 0x00	; 0
 52e:	00 91 01 01 	lds	r16, 0x0101
 532:	01 1f       	adc	r16, r17
 534:	00 93 01 01 	sts	0x0101, r16
 538:	00 91 02 01 	lds	r16, 0x0102
 53c:	01 1f       	adc	r16, r17
 53e:	00 93 02 01 	sts	0x0102, r16
 542:	00 91 03 01 	lds	r16, 0x0103
 546:	01 1f       	adc	r16, r17
 548:	00 93 03 01 	sts	0x0103, r16
 54c:	00 91 04 01 	lds	r16, 0x0104
 550:	01 1f       	adc	r16, r17
 552:	00 93 04 01 	sts	0x0104, r16
		LDI    R24               , SCH_MODE_HANDLER       ;set sch mode           (  1 clock ) 
 556:	80 e0       	ldi	r24, 0x00	; 0
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
 558:	0f ef       	ldi	r16, 0xFF	; 255
 55a:	00 93 09 01 	sts	0x0109, r16
 55e:	00 e0       	ldi	r16, 0x00	; 0
 560:	00 93 0a 01 	sts	0x010A, r16
 564:	98 2f       	mov	r25, r24

00000566 <_KER_SCH_LOOP8>:
 566:	00 93 07 01 	sts	0x0107, r16
 56a:	89 2f       	mov	r24, r25
 56c:	e4 e4       	ldi	r30, 0x44	; 68
 56e:	f1 e0       	ldi	r31, 0x01	; 1
 570:	00 91 07 01 	lds	r16, 0x0107
 574:	00 0f       	add	r16, r16
 576:	e0 0f       	add	r30, r16
 578:	00 e0       	ldi	r16, 0x00	; 0
 57a:	f0 1f       	adc	r31, r16
 57c:	00 81       	ld	r16, Z
 57e:	11 81       	ldd	r17, Z+1	; 0x01
 580:	20 2f       	mov	r18, r16
 582:	21 2b       	or	r18, r17
 584:	59 f0       	breq	.+22     	; 0x59c <_VAL_NULL9>
 586:	81 30       	cpi	r24, 0x01	; 1
 588:	99 f0       	breq	.+38     	; 0x5b0 <_VAL_NOT_NULL9>
 58a:	21 e0       	ldi	r18, 0x01	; 1
 58c:	02 1b       	sub	r16, r18
 58e:	20 e0       	ldi	r18, 0x00	; 0
 590:	12 0b       	sbc	r17, r18
 592:	00 83       	st	Z, r16
 594:	11 83       	std	Z+1, r17	; 0x01
 596:	20 2f       	mov	r18, r16
 598:	21 2b       	or	r18, r17
 59a:	51 f4       	brne	.+20     	; 0x5b0 <_VAL_NOT_NULL9>

0000059c <_VAL_NULL9>:
 59c:	e0 e3       	ldi	r30, 0x30	; 48
 59e:	f1 e0       	ldi	r31, 0x01	; 1
 5a0:	00 91 07 01 	lds	r16, 0x0107
 5a4:	e0 0f       	add	r30, r16
 5a6:	00 e0       	ldi	r16, 0x00	; 0
 5a8:	f0 1f       	adc	r31, r16
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	80 83       	st	Z, r24
 5ae:	01 c0       	rjmp	.+2      	; 0x5b2 <_EXIT_SLP_TIME9>

000005b0 <_VAL_NOT_NULL9>:
 5b0:	80 e0       	ldi	r24, 0x00	; 0

000005b2 <_EXIT_SLP_TIME9>:
 5b2:	81 30       	cpi	r24, 0x01	; 1
 5b4:	91 f4       	brne	.+36     	; 0x5da <_KER_SCH_NEXT8>
 5b6:	ea e3       	ldi	r30, 0x3A	; 58
 5b8:	f1 e0       	ldi	r31, 0x01	; 1
 5ba:	00 e0       	ldi	r16, 0x00	; 0
 5bc:	80 91 07 01 	lds	r24, 0x0107
 5c0:	e8 0f       	add	r30, r24
 5c2:	f0 1f       	adc	r31, r16
 5c4:	80 81       	ld	r24, Z
 5c6:	00 91 09 01 	lds	r16, 0x0109
 5ca:	80 17       	cp	r24, r16
 5cc:	30 f4       	brcc	.+12     	; 0x5da <_KER_SCH_NEXT8>
 5ce:	80 93 09 01 	sts	0x0109, r24
 5d2:	00 91 07 01 	lds	r16, 0x0107
 5d6:	00 93 0a 01 	sts	0x010A, r16

000005da <_KER_SCH_NEXT8>:
 5da:	00 91 07 01 	lds	r16, 0x0107
 5de:	03 95       	inc	r16
 5e0:	10 91 08 01 	lds	r17, 0x0108
 5e4:	01 17       	cp	r16, r17
 5e6:	08 f4       	brcc	.+2      	; 0x5ea <_KER_SCH_EXIT8>
 5e8:	be cf       	rjmp	.-132    	; 0x566 <_KER_SCH_LOOP8>

000005ea <_KER_SCH_EXIT8>:
 5ea:	00 91 0a 01 	lds	r16, 0x010A
 5ee:	00 93 07 01 	sts	0x0107, r16
		KER_CPU_USAGE                                     ;calc cpu usage         ( 26 clocks) 
 5f2:	00 91 07 01 	lds	r16, 0x0107
 5f6:	00 23       	and	r16, r16
 5f8:	29 f0       	breq	.+10     	; 0x604 <_KER_USG_TICK13>
 5fa:	00 91 0c 01 	lds	r16, 0x010C
 5fe:	03 95       	inc	r16
 600:	00 93 0c 01 	sts	0x010C, r16

00000604 <_KER_USG_TICK13>:
 604:	00 91 0b 01 	lds	r16, 0x010B
 608:	03 95       	inc	r16
 60a:	04 36       	cpi	r16, 0x64	; 100
 60c:	40 f0       	brcs	.+16     	; 0x61e <_KER_USG_UTC_SV13>
 60e:	00 e0       	ldi	r16, 0x00	; 0
 610:	10 91 0c 01 	lds	r17, 0x010C
 614:	10 93 0d 01 	sts	0x010D, r17
 618:	10 e0       	ldi	r17, 0x00	; 0
 61a:	10 93 0c 01 	sts	0x010C, r17

0000061e <_KER_USG_UTC_SV13>:
 61e:	00 93 0b 01 	sts	0x010B, r16
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 622:	ee e0       	ldi	r30, 0x0E	; 14
 624:	f1 e0       	ldi	r31, 0x01	; 1
 626:	00 91 07 01 	lds	r16, 0x0107
 62a:	00 0f       	add	r16, r16
 62c:	e0 0f       	add	r30, r16
 62e:	00 e0       	ldi	r16, 0x00	; 0
 630:	f0 1f       	adc	r31, r16
 632:	00 81       	ld	r16, Z
 634:	11 81       	ldd	r17, Z+1	; 0x01
 636:	0d bf       	out	0x3d, r16	; 61
 638:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
 63a:	ff 91       	pop	r31
 63c:	ef 91       	pop	r30
 63e:	df 91       	pop	r29
 640:	cf 91       	pop	r28
 642:	bf 91       	pop	r27
 644:	af 91       	pop	r26
 646:	9f 91       	pop	r25
 648:	8f 91       	pop	r24
 64a:	7f 91       	pop	r23
 64c:	6f 91       	pop	r22
 64e:	5f 91       	pop	r21
 650:	4f 91       	pop	r20
 652:	3f 91       	pop	r19
 654:	2f 91       	pop	r18
 656:	1f 91       	pop	r17
 658:	0f 91       	pop	r16
 65a:	ff 90       	pop	r15
 65c:	ef 90       	pop	r14
 65e:	df 90       	pop	r13
 660:	cf 90       	pop	r12
 662:	bf 90       	pop	r11
 664:	af 90       	pop	r10
 666:	9f 90       	pop	r9
 668:	8f 90       	pop	r8
 66a:	7f 90       	pop	r7
 66c:	6f 90       	pop	r6
 66e:	5f 90       	pop	r5
 670:	4f 90       	pop	r4
 672:	3f 90       	pop	r3
 674:	2f 90       	pop	r2
 676:	1f 90       	pop	r1
 678:	0f 90       	pop	r0
 67a:	0f be       	out	0x3f, r0	; 63
 67c:	0f 90       	pop	r0
	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 67e:	5d 98       	cbi	0x0b, 5	; 11
		RETI                                              ;return from interrupt  (  4 clocks) 
 680:	18 95       	reti

00000682 <Kernel_SysTick_Reg_Init>:


;;================================SysTick reg init starting=================================;; 
Kernel_SysTick_Reg_Init:                                  ;total 11.5uS @8MHz     ( 92 clocks) 
        ;arg1 -> prescaler R24, arg2 -> reload val R22                                         
        CLI                                               ;disable global int     (  1 clock ) 
 682:	f8 94       	cli
		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 684:	5d 98       	cbi	0x0b, 5	; 11
 686:	55 9a       	sbi	0x0a, 5	; 10
        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 688:	a0 91 22 01 	lds	r26, 0x0122
 68c:	b0 91 23 01 	lds	r27, 0x0123
 690:	0d b7       	in	r16, 0x3d	; 61
 692:	1e b7       	in	r17, 0x3e	; 62
 694:	0d 93       	st	X+, r16
 696:	1d 93       	st	X+, r17
 698:	ed 93       	st	X+, r30
 69a:	fd 93       	st	X+, r31
 69c:	a0 93 22 01 	sts	0x0122, r26
 6a0:	b0 93 23 01 	sts	0x0123, r27
		;clear reg                                                                             
		LDI   R16                , 0x00                   ;set 0x00 to R16        (  1 clock ) 
 6a4:	00 e0       	ldi	r16, 0x00	; 0
		;clear tick counter                                                                    
		STS   KerBase+OFB_TICK0  , R16                    ;clear  KerBase[0]      (  2 clocks) 
 6a6:	00 93 00 01 	sts	0x0100, r16
		STS   KerBase+OFB_TICK1  , R16                    ;clear  KerBase[1]      (  2 clocks) 
 6aa:	00 93 01 01 	sts	0x0101, r16
		STS   KerBase+OFB_TICK2  , R16                    ;clear  KerBase[2]      (  2 clocks) 
 6ae:	00 93 02 01 	sts	0x0102, r16
		STS   KerBase+OFB_TICK3  , R16                    ;clear  KerBase[3]      (  2 clocks) 
 6b2:	00 93 03 01 	sts	0x0103, r16
		STS   KerBase+OFB_TICK4  , R16                    ;clear  KerBase[4]      (  2 clocks) 
 6b6:	00 93 04 01 	sts	0x0104, r16
		;clear system registers                                                                
		STS   KerBase+OFB_PRS    , R16                    ;clear  KerBase[5]      (  2 clocks) 
 6ba:	00 93 05 01 	sts	0x0105, r16
		STS   KerBase+OFB_RLD    , R16                    ;clear  KerBase[6]      (  2 clocks) 
 6be:	00 93 06 01 	sts	0x0106, r16
		STS   KerBase+OFB_TID    , R16                    ;clear  KerBase[7]      (  2 clocks) 
 6c2:	00 93 07 01 	sts	0x0107, r16
		STS   KerBase+OFB_NTSK   , R16                    ;clear  KerBase[8]      (  2 clocks) 
 6c6:	00 93 08 01 	sts	0x0108, r16
		STS   KerBase+OFB_LPR    , R16                    ;clear  KerBase[9]      (  2 clocks) 
 6ca:	00 93 09 01 	sts	0x0109, r16
        STS   KerBase+OFB_PTID   , R16                    ;clear  KerBase[10]     (  2 clocks) 
 6ce:	00 93 0a 01 	sts	0x010A, r16
		STS   KerBase+OFB_UTC    , R16                    ;clear  KerBase[11]     (  2 clocks) 
 6d2:	00 93 0b 01 	sts	0x010B, r16
		STS   KerBase+OFB_UATC   , R16                    ;clear  KerBase[12]     (  2 clocks) 
 6d6:	00 93 0c 01 	sts	0x010C, r16
		STS   KerBase+OFB_USAGE  , R16                    ;clear  KerBase[13]     (  2 clocks) 
 6da:	00 93 0d 01 	sts	0x010D, r16
		;clear all timer registers                                                             
		STS   SRTCCR0A           , R16                    ;clear TCCR0A           (  2 clocks) 
 6de:	00 93 44 00 	sts	0x0044, r16
		STS   SRTCCR0B           , R16                    ;clear TCCR0B           (  2 clocks) 
 6e2:	00 93 45 00 	sts	0x0045, r16
		STS   SRTIMSK0           , R16                    ;clear TIMSK0           (  2 clocks) 
 6e6:	00 93 6e 00 	sts	0x006E, r16
		STS   SRTIFR0            , R16                    ;clear TIFR0            (  2 clocks) 
 6ea:	00 93 35 00 	sts	0x0035, r16
		STS   SROCR0A            , R16                    ;clear OCR0A            (  2 clocks) 
 6ee:	00 93 47 00 	sts	0x0047, r16
		STS   SROCR0B            , R16                    ;clear OCR0B            (  2 clocks) 
 6f2:	00 93 48 00 	sts	0x0048, r16
		STS   SRTCNT0            , R16                    ;clear TCNT0            (  2 clocks) 
 6f6:	00 93 46 00 	sts	0x0046, r16
		;save values for future use                                                            
		STS   KerBase+OFB_PRS    , R24                    ;KerBase[5] prescaler   (  2 clocks) 
 6fa:	80 93 05 01 	sts	0x0105, r24
		STS   KerBase+OFB_RLD    , R22                    ;KerBase[6] reload val  (  2 clocks) 
 6fe:	60 93 06 01 	sts	0x0106, r22
        KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 702:	a0 91 22 01 	lds	r26, 0x0122
 706:	b0 91 23 01 	lds	r27, 0x0123
 70a:	fe 91       	ld	r31, -X
 70c:	ee 91       	ld	r30, -X
 70e:	1e 91       	ld	r17, -X
 710:	0e 91       	ld	r16, -X
 712:	0d bf       	out	0x3d, r16	; 61
 714:	1e bf       	out	0x3e, r17	; 62
 716:	a0 93 22 01 	sts	0x0122, r26
 71a:	b0 93 23 01 	sts	0x0123, r27
		RET                                               ;return from subroutine (  4 clocks) 
 71e:	08 95       	ret

00000720 <Kernel_Task_Create>:


;;===============================kernel task create starting================================;; 
Kernel_Task_Create:                                       ;total 20.38uS @8MHz    (163 clocks) 
        ;func_ptr->R25:R24, task_priority->R22                                                 
        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 720:	a0 91 22 01 	lds	r26, 0x0122
 724:	b0 91 23 01 	lds	r27, 0x0123
 728:	0d b7       	in	r16, 0x3d	; 61
 72a:	1e b7       	in	r17, 0x3e	; 62
 72c:	0d 93       	st	X+, r16
 72e:	1d 93       	st	X+, r17
 730:	ed 93       	st	X+, r30
 732:	fd 93       	st	X+, r31
 734:	a0 93 22 01 	sts	0x0122, r26
 738:	b0 93 23 01 	sts	0x0123, r27
		;across this function, R16 will be used as task_id                                     
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 73c:	00 91 07 01 	lds	r16, 0x0107
		LDI   R17                , 0x00                   ;clear reg              (  1 clock ) 
 740:	10 e0       	ldi	r17, 0x00	; 0
		;set priority to KerSchPr+task_id                                                      
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 742:	ea e3       	ldi	r30, 0x3A	; 58
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 744:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
 746:	e0 0f       	add	r30, r16
		ADC   ZH                 , R17                    ;add high byte+carry    (  1 clock ) 
 748:	f1 1f       	adc	r31, r17
		ST    Z                  , R22                    ;save priority          (  2 clocks) 
 74a:	60 83       	st	Z, r22
		;stack pointer for current task (KerStack + KER_STK_SZ*(task_id+1) - 1) ->stack top    
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 74c:	00 91 07 01 	lds	r16, 0x0107
		MOV   R17                , R16                    ;load task_id           (  1 clock ) 
 750:	10 2f       	mov	r17, r16
		INC   R17                                         ;increment task_id      (  1 clock ) 
 752:	13 95       	inc	r17
		LDI   R18                , KER_STK_SZ             ;load stack size        (  1 clock ) 
 754:	20 e8       	ldi	r18, 0x80	; 128
		MUL   R17                , R18                    ;multiply to get offset (  2 clocks) 
 756:	12 9f       	mul	r17, r18
		MOV   ZL                 , R0                     ;load multiplied low    (  1 clocks) 
 758:	e0 2d       	mov	r30, r0
		MOV   ZH                 , R1                     ;load multiplied high   (  1 clocks) 
 75a:	f1 2d       	mov	r31, r1
		SBIW  ZL                 , 0x01                   ;dec multiplied val-1   (  2 clocks) 
 75c:	31 97       	sbiw	r30, 0x01	; 1
		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 75e:	11 24       	eor	r1, r1
		LDI   R17                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
 760:	18 e5       	ldi	r17, 0x58	; 88
		LDI   R18                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
 762:	21 e0       	ldi	r18, 0x01	; 1
		ADD   ZL                 , R17                    ;add low bytes          (  1 clock ) 
 764:	e1 0f       	add	r30, r17
		ADC   ZH                 , R18                    ;add high bytes+carry   (  1 clock ) 
 766:	f2 1f       	adc	r31, r18
		OUT   IOSPL              , ZL                     ;load SPL               (  1 clock ) 
 768:	ed bf       	out	0x3d, r30	; 61
        OUT   IOSPH              , ZH                     ;load SPH               (  1 clock ) 
 76a:	fe bf       	out	0x3e, r31	; 62
		;function argument directly returns word address                                       
	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
 76c:	8f 93       	push	r24
		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 76e:	9f 93       	push	r25
		;push context to stack of this task                                                    
		KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 770:	0f 92       	push	r0
 772:	0f b6       	in	r0, 0x3f	; 63
 774:	0f 92       	push	r0
 776:	1f 92       	push	r1
 778:	11 24       	eor	r1, r1
 77a:	2f 92       	push	r2
 77c:	3f 92       	push	r3
 77e:	4f 92       	push	r4
 780:	5f 92       	push	r5
 782:	6f 92       	push	r6
 784:	7f 92       	push	r7
 786:	8f 92       	push	r8
 788:	9f 92       	push	r9
 78a:	af 92       	push	r10
 78c:	bf 92       	push	r11
 78e:	cf 92       	push	r12
 790:	df 92       	push	r13
 792:	ef 92       	push	r14
 794:	ff 92       	push	r15
 796:	0f 93       	push	r16
 798:	1f 93       	push	r17
 79a:	2f 93       	push	r18
 79c:	3f 93       	push	r19
 79e:	4f 93       	push	r20
 7a0:	5f 93       	push	r21
 7a2:	6f 93       	push	r22
 7a4:	7f 93       	push	r23
 7a6:	8f 93       	push	r24
 7a8:	9f 93       	push	r25
 7aa:	af 93       	push	r26
 7ac:	bf 93       	push	r27
 7ae:	cf 93       	push	r28
 7b0:	df 93       	push	r29
 7b2:	ef 93       	push	r30
 7b4:	ff 93       	push	r31
		;read stack pointer of current task (necessary when restore)                           
		IN    R17                , IOSPL                  ;read SPL               (  1 clock ) 
 7b6:	1d b7       	in	r17, 0x3d	; 61
        IN    R18                , IOSPH                  ;read SPH               (  1 clock ) 
 7b8:	2e b7       	in	r18, 0x3e	; 62
		;calculate the address where current task's SP will be stored and store SP             
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 7ba:	00 91 07 01 	lds	r16, 0x0107
		MOV   R19                , R16                    ;copy task_id           (  1 clock ) 
 7be:	30 2f       	mov	r19, r16
		LSL   R19                                         ;left shift to multiply (  1 clock ) 
 7c0:	33 0f       	add	r19, r19
		LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 7c2:	ee e0       	ldi	r30, 0x0E	; 14
		LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 7c4:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R19                    ;add offset to array    (  1 clock ) 
 7c6:	e3 0f       	add	r30, r19
		LDI   R16                , 0x00                   ;clear reg              (  1 clock ) 
 7c8:	00 e0       	ldi	r16, 0x00	; 0
		ADC   ZH                 , R16                    ;add carry if any       (  1 clock ) 
 7ca:	f0 1f       	adc	r31, r16
		ST    Z+                 , R17                    ;SPL at KerPSp+offset   (  2 clocks) 
 7cc:	11 93       	st	Z+, r17
		ST    Z                  , R18                    ;SPH at KerPSp+offset   (  2 clocks) 
 7ce:	20 83       	st	Z, r18
		;increment task_id                                                                     
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 7d0:	00 91 07 01 	lds	r16, 0x0107
		INC   R16                                         ;increment task_id      (  1 clock ) 
 7d4:	03 95       	inc	r16
		STS   KerBase+OFB_TID    , R16                    ;store task_id          (  2 clocks) 
 7d6:	00 93 07 01 	sts	0x0107, r16
		;increment ntask                                                                       
		LDS   R16                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 7da:	00 91 08 01 	lds	r16, 0x0108
		INC   R16                                         ;increment ntask        (  1 clock ) 
 7de:	03 95       	inc	r16
		STS   KerBase+OFB_NTSK   , R16                    ;store ntask            (  2 clocks) 
 7e0:	00 93 08 01 	sts	0x0108, r16
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 7e4:	a0 91 22 01 	lds	r26, 0x0122
 7e8:	b0 91 23 01 	lds	r27, 0x0123
 7ec:	fe 91       	ld	r31, -X
 7ee:	ee 91       	ld	r30, -X
 7f0:	1e 91       	ld	r17, -X
 7f2:	0e 91       	ld	r16, -X
 7f4:	0d bf       	out	0x3d, r16	; 61
 7f6:	1e bf       	out	0x3e, r17	; 62
 7f8:	a0 93 22 01 	sts	0x0122, r26
 7fc:	b0 93 23 01 	sts	0x0123, r27
		RET                                               ;return from subroutine (  4 clocks) 
 800:	08 95       	ret

00000802 <Kernel_Start_Tasks>:


;;=================================kernel start tasks starting==============================;; 
Kernel_Start_Tasks:                                       ;total 11.38uS @8MHz    ( 91 clocks) 
		;clear task_id                                                                         
		LDI   R16                , 0x00                   ;load task_id           (  2 clocks) 
 802:	00 e0       	ldi	r16, 0x00	; 0
		STS   KerBase+OFB_TID    , R16                    ;store task_id          (  2 clocks) 
 804:	00 93 07 01 	sts	0x0107, r16
		;load ZP with addr+offset                                                              
		LDI   ZL                 , lo8(KerPSP+0x00)       ;fetch ZPL KerPSP->TID0 (  1 clock ) 
 808:	ee e0       	ldi	r30, 0x0E	; 14
		LDI   ZH                 , hi8(KerPSP+0x00)       ;fetch ZPH KerPSP->TID0 (  1 clock ) 
 80a:	f1 e0       	ldi	r31, 0x01	; 1
		;load task_id 0 task's SP                                                              
		LD    R16                , Z+                     ;load val from Z, inc Z (  2 clocks) 
 80c:	01 91       	ld	r16, Z+
		LD    R17                , Z                      ;load val from Z+1      (  2 clocks) 
 80e:	10 81       	ld	r17, Z
        ;set task_id=0 task's SP                                                               
		OUT   IOSPL              , R16                    ;load SPL               (  1 clock ) 
 810:	0d bf       	out	0x3d, r16	; 61
        OUT   IOSPH              , R17                    ;load SPH               (  1 clock ) 
 812:	1e bf       	out	0x3e, r17	; 62
        ;forcefully restore context, in ISR it will be stored automatically                    
		KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
 814:	ff 91       	pop	r31
 816:	ef 91       	pop	r30
 818:	df 91       	pop	r29
 81a:	cf 91       	pop	r28
 81c:	bf 91       	pop	r27
 81e:	af 91       	pop	r26
 820:	9f 91       	pop	r25
 822:	8f 91       	pop	r24
 824:	7f 91       	pop	r23
 826:	6f 91       	pop	r22
 828:	5f 91       	pop	r21
 82a:	4f 91       	pop	r20
 82c:	3f 91       	pop	r19
 82e:	2f 91       	pop	r18
 830:	1f 91       	pop	r17
 832:	0f 91       	pop	r16
 834:	ff 90       	pop	r15
 836:	ef 90       	pop	r14
 838:	df 90       	pop	r13
 83a:	cf 90       	pop	r12
 83c:	bf 90       	pop	r11
 83e:	af 90       	pop	r10
 840:	9f 90       	pop	r9
 842:	8f 90       	pop	r8
 844:	7f 90       	pop	r7
 846:	6f 90       	pop	r6
 848:	5f 90       	pop	r5
 84a:	4f 90       	pop	r4
 84c:	3f 90       	pop	r3
 84e:	2f 90       	pop	r2
 850:	1f 90       	pop	r1
 852:	0f 90       	pop	r0
 854:	0f be       	out	0x3f, r0	; 63
 856:	0f 90       	pop	r0
		;config timer for system tick                                                          
		KER_TIMER_INIT                                    ;init timer, int enable ( 12 clocks) 
 858:	00 91 05 01 	lds	r16, 0x0105
 85c:	10 91 06 01 	lds	r17, 0x0106
 860:	00 93 45 00 	sts	0x0045, r16
 864:	10 93 46 00 	sts	0x0046, r17
 868:	01 e0       	ldi	r16, 0x01	; 1
 86a:	00 93 6e 00 	sts	0x006E, r16
 86e:	78 94       	sei
		;execute return to jump to task0, pushed while task init                               
		RET                                               ;return from subroutine (  4 clocks) 
 870:	08 95       	ret

00000872 <Kernel_Init>:


;;===================================kernel init starting===================================;; 
Kernel_Init:                                              ;total 38.63uS @8MHz    (309 clocks) 
		;save necessary registers and MSP                                                      
		CLR   R1                                          ;gcc expects            (  1 clock ) 
 872:	11 24       	eor	r1, r1
        ;store stack top (for MSP) addr to KerSSZ+OFM_MSPI0:1                                  
		LDI   R16                , lo8(KerSSZ+OFM_MSPS)   ;load low address       (  1 clock ) 
 874:	04 e2       	ldi	r16, 0x24	; 36
		LDI   R17                , hi8(KerSSZ+OFM_MSPS)   ;load high address      (  1 clock ) 
 876:	11 e0       	ldi	r17, 0x01	; 1
        STS   KerSSZ+OFM_MSPI+0  , R16                    ;set mspi to stack top  (  2 clocks) 
 878:	00 93 22 01 	sts	0x0122, r16
		STS   KerSSZ+OFM_MSPI+1  , R17                    ;set mspi to stack top  (  2 clocks) 
 87c:	10 93 23 01 	sts	0x0123, r17
		KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 880:	a0 91 22 01 	lds	r26, 0x0122
 884:	b0 91 23 01 	lds	r27, 0x0123
 888:	0d b7       	in	r16, 0x3d	; 61
 88a:	1e b7       	in	r17, 0x3e	; 62
 88c:	0d 93       	st	X+, r16
 88e:	1d 93       	st	X+, r17
 890:	ed 93       	st	X+, r30
 892:	fd 93       	st	X+, r31
 894:	a0 93 22 01 	sts	0x0122, r26
 898:	b0 93 23 01 	sts	0x0123, r27
		;init timer for kernel                                                                 
		LDI   R24                , 0x03                   ;set prescaler          (  1 clock ) 
 89c:	83 e0       	ldi	r24, 0x03	; 3
		LDI   R22                , 0x82                   ;set reload val         (  1 clock ) 
 89e:	62 e8       	ldi	r22, 0x82	; 130
		CALL  Kernel_SysTick_Reg_Init                     ;init timer             ( 92 clocks) 
 8a0:	0e 94 41 03 	call	0x682	; 0x682 <Kernel_SysTick_Reg_Init>
		;create idle task at task_id 0, priority 0xFF (lowest)                                 
		LDI   R24                , lo8(Kernel_Task_Idle)  ;load func addr low     (  1 clock ) 
 8a4:	80 ed       	ldi	r24, 0xD0	; 208
		LDI   R25                , hi8(Kernel_Task_Idle)  ;load func addr high    (  1 clock ) 
 8a6:	98 e0       	ldi	r25, 0x08	; 8
		LSR   R25                                         ;right shift to divide  (  1 clock ) 
 8a8:	96 95       	lsr	r25
		ROR   R24                                         ;rotate right th carry  (  1 clock ) 
 8aa:	87 95       	ror	r24
		LDI   R22                , 0xFF                   ;set max val            (  1 clock ) 
 8ac:	6f ef       	ldi	r22, 0xFF	; 255
		CALL  Kernel_Task_Create                          ;init idle task         (163 clocks) 
 8ae:	0e 94 90 03 	call	0x720	; 0x720 <Kernel_Task_Create>
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 8b2:	a0 91 22 01 	lds	r26, 0x0122
 8b6:	b0 91 23 01 	lds	r27, 0x0123
 8ba:	fe 91       	ld	r31, -X
 8bc:	ee 91       	ld	r30, -X
 8be:	1e 91       	ld	r17, -X
 8c0:	0e 91       	ld	r16, -X
 8c2:	0d bf       	out	0x3d, r16	; 61
 8c4:	1e bf       	out	0x3e, r17	; 62
 8c6:	a0 93 22 01 	sts	0x0122, r26
 8ca:	b0 93 23 01 	sts	0x0123, r27
		;execute return to jump to task0, pushed while task init                               
		RET                                               ;return from subroutine (  4 clocks) 
 8ce:	08 95       	ret

000008d0 <Kernel_Task_Idle>:
       ;LDI   R24                , 0x00                   ;set UBRRL              (  1 clock ) 
       ;CALL  Debug_Init                                  ;debug init             ( 19 clocks) 
    _IDLE_LOOP:                                           ;forever loop                        
	   ;LDI   R24                , 0x23                   ;load val               (  1 clock ) 
	   ;CALL  Debug_Tx_Byte                                                                    
		RJMP  _IDLE_LOOP                                  ;return from subroutine (  4 clocks) 
 8d0:	ff cf       	rjmp	.-2      	; 0x8d0 <Kernel_Task_Idle>

000008d2 <Kernel_Task_Sleep>:


;;================================kernel task sleep starting================================;; 
Kernel_Task_Sleep:                                        ;total 35.5uS @8MHz     (284 clocks) 
        ;save current context                                                                  
        KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
 8d2:	0f 92       	push	r0
 8d4:	0f b6       	in	r0, 0x3f	; 63
 8d6:	f8 94       	cli
 8d8:	0f 92       	push	r0
 8da:	1f 92       	push	r1
 8dc:	11 24       	eor	r1, r1
 8de:	2f 92       	push	r2
 8e0:	3f 92       	push	r3
 8e2:	4f 92       	push	r4
 8e4:	5f 92       	push	r5
 8e6:	6f 92       	push	r6
 8e8:	7f 92       	push	r7
 8ea:	8f 92       	push	r8
 8ec:	9f 92       	push	r9
 8ee:	af 92       	push	r10
 8f0:	bf 92       	push	r11
 8f2:	cf 92       	push	r12
 8f4:	df 92       	push	r13
 8f6:	ef 92       	push	r14
 8f8:	ff 92       	push	r15
 8fa:	0f 93       	push	r16
 8fc:	1f 93       	push	r17
 8fe:	2f 93       	push	r18
 900:	3f 93       	push	r19
 902:	4f 93       	push	r20
 904:	5f 93       	push	r21
 906:	6f 93       	push	r22
 908:	7f 93       	push	r23
 90a:	8f 93       	push	r24
 90c:	9f 93       	push	r25
 90e:	af 93       	push	r26
 910:	bf 93       	push	r27
 912:	cf 93       	push	r28
 914:	df 93       	push	r29
 916:	ef 93       	push	r30
 918:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 91a:	ee e0       	ldi	r30, 0x0E	; 14
 91c:	f1 e0       	ldi	r31, 0x01	; 1
 91e:	00 91 07 01 	lds	r16, 0x0107
 922:	00 0f       	add	r16, r16
 924:	e0 0f       	add	r30, r16
 926:	00 e0       	ldi	r16, 0x00	; 0
 928:	f0 1f       	adc	r31, r16
 92a:	0d b7       	in	r16, 0x3d	; 61
 92c:	1e b7       	in	r17, 0x3e	; 62
 92e:	00 83       	st	Z, r16
 930:	11 83       	std	Z+1, r17	; 0x01
		;create next task wakeup time (args R25:R24)                                           
		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 932:	e4 e4       	ldi	r30, 0x44	; 68
		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 934:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
 936:	00 91 07 01 	lds	r16, 0x0107
 93a:	00 0f       	add	r16, r16
 93c:	e0 0f       	add	r30, r16
 93e:	00 e0       	ldi	r16, 0x00	; 0
 940:	f0 1f       	adc	r31, r16
		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
 942:	80 83       	st	Z, r24
		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 944:	91 83       	std	Z+1, r25	; 0x01
		;update task scheduler status as blocked                                               
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 946:	e0 e3       	ldi	r30, 0x30	; 48
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 948:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
 94a:	00 91 07 01 	lds	r16, 0x0107
 94e:	e0 0f       	add	r30, r16
 950:	00 e0       	ldi	r16, 0x00	; 0
 952:	f0 1f       	adc	r31, r16
        LDI   R16                , TASK_BLOCK             ;block task until cnt=0 (  1 clock ) 
 954:	00 e0       	ldi	r16, 0x00	; 0
		STD   Z+0                , R16                    ;save block flag        (  2 clocks) 
 956:	00 83       	st	Z, r16
		;run scheduler, load next task sp, restore context                                     
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 958:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
 95a:	0f ef       	ldi	r16, 0xFF	; 255
 95c:	00 93 09 01 	sts	0x0109, r16
 960:	00 e0       	ldi	r16, 0x00	; 0
 962:	00 93 0a 01 	sts	0x010A, r16
 966:	98 2f       	mov	r25, r24

00000968 <_KER_SCH_LOOP41>:
 968:	00 93 07 01 	sts	0x0107, r16
 96c:	89 2f       	mov	r24, r25
 96e:	e4 e4       	ldi	r30, 0x44	; 68
 970:	f1 e0       	ldi	r31, 0x01	; 1
 972:	00 91 07 01 	lds	r16, 0x0107
 976:	00 0f       	add	r16, r16
 978:	e0 0f       	add	r30, r16
 97a:	00 e0       	ldi	r16, 0x00	; 0
 97c:	f0 1f       	adc	r31, r16
 97e:	00 81       	ld	r16, Z
 980:	11 81       	ldd	r17, Z+1	; 0x01
 982:	20 2f       	mov	r18, r16
 984:	21 2b       	or	r18, r17
 986:	59 f0       	breq	.+22     	; 0x99e <_VAL_NULL42>
 988:	81 30       	cpi	r24, 0x01	; 1
 98a:	99 f0       	breq	.+38     	; 0x9b2 <_VAL_NOT_NULL42>
 98c:	21 e0       	ldi	r18, 0x01	; 1
 98e:	02 1b       	sub	r16, r18
 990:	20 e0       	ldi	r18, 0x00	; 0
 992:	12 0b       	sbc	r17, r18
 994:	00 83       	st	Z, r16
 996:	11 83       	std	Z+1, r17	; 0x01
 998:	20 2f       	mov	r18, r16
 99a:	21 2b       	or	r18, r17
 99c:	51 f4       	brne	.+20     	; 0x9b2 <_VAL_NOT_NULL42>

0000099e <_VAL_NULL42>:
 99e:	e0 e3       	ldi	r30, 0x30	; 48
 9a0:	f1 e0       	ldi	r31, 0x01	; 1
 9a2:	00 91 07 01 	lds	r16, 0x0107
 9a6:	e0 0f       	add	r30, r16
 9a8:	00 e0       	ldi	r16, 0x00	; 0
 9aa:	f0 1f       	adc	r31, r16
 9ac:	81 e0       	ldi	r24, 0x01	; 1
 9ae:	80 83       	st	Z, r24
 9b0:	01 c0       	rjmp	.+2      	; 0x9b4 <_EXIT_SLP_TIME42>

000009b2 <_VAL_NOT_NULL42>:
 9b2:	80 e0       	ldi	r24, 0x00	; 0

000009b4 <_EXIT_SLP_TIME42>:
 9b4:	81 30       	cpi	r24, 0x01	; 1
 9b6:	91 f4       	brne	.+36     	; 0x9dc <_KER_SCH_NEXT41>
 9b8:	ea e3       	ldi	r30, 0x3A	; 58
 9ba:	f1 e0       	ldi	r31, 0x01	; 1
 9bc:	00 e0       	ldi	r16, 0x00	; 0
 9be:	80 91 07 01 	lds	r24, 0x0107
 9c2:	e8 0f       	add	r30, r24
 9c4:	f0 1f       	adc	r31, r16
 9c6:	80 81       	ld	r24, Z
 9c8:	00 91 09 01 	lds	r16, 0x0109
 9cc:	80 17       	cp	r24, r16
 9ce:	30 f4       	brcc	.+12     	; 0x9dc <_KER_SCH_NEXT41>
 9d0:	80 93 09 01 	sts	0x0109, r24
 9d4:	00 91 07 01 	lds	r16, 0x0107
 9d8:	00 93 0a 01 	sts	0x010A, r16

000009dc <_KER_SCH_NEXT41>:
 9dc:	00 91 07 01 	lds	r16, 0x0107
 9e0:	03 95       	inc	r16
 9e2:	10 91 08 01 	lds	r17, 0x0108
 9e6:	01 17       	cp	r16, r17
 9e8:	08 f4       	brcc	.+2      	; 0x9ec <_KER_SCH_EXIT41>
 9ea:	be cf       	rjmp	.-132    	; 0x968 <_KER_SCH_LOOP41>

000009ec <_KER_SCH_EXIT41>:
 9ec:	00 91 0a 01 	lds	r16, 0x010A
 9f0:	00 93 07 01 	sts	0x0107, r16
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 9f4:	ee e0       	ldi	r30, 0x0E	; 14
 9f6:	f1 e0       	ldi	r31, 0x01	; 1
 9f8:	00 91 07 01 	lds	r16, 0x0107
 9fc:	00 0f       	add	r16, r16
 9fe:	e0 0f       	add	r30, r16
 a00:	00 e0       	ldi	r16, 0x00	; 0
 a02:	f0 1f       	adc	r31, r16
 a04:	00 81       	ld	r16, Z
 a06:	11 81       	ldd	r17, Z+1	; 0x01
 a08:	0d bf       	out	0x3d, r16	; 61
 a0a:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 a0c:	ff 91       	pop	r31
 a0e:	ef 91       	pop	r30
 a10:	df 91       	pop	r29
 a12:	cf 91       	pop	r28
 a14:	bf 91       	pop	r27
 a16:	af 91       	pop	r26
 a18:	9f 91       	pop	r25
 a1a:	8f 91       	pop	r24
 a1c:	7f 91       	pop	r23
 a1e:	6f 91       	pop	r22
 a20:	5f 91       	pop	r21
 a22:	4f 91       	pop	r20
 a24:	3f 91       	pop	r19
 a26:	2f 91       	pop	r18
 a28:	1f 91       	pop	r17
 a2a:	0f 91       	pop	r16
 a2c:	ff 90       	pop	r15
 a2e:	ef 90       	pop	r14
 a30:	df 90       	pop	r13
 a32:	cf 90       	pop	r12
 a34:	bf 90       	pop	r11
 a36:	af 90       	pop	r10
 a38:	9f 90       	pop	r9
 a3a:	8f 90       	pop	r8
 a3c:	7f 90       	pop	r7
 a3e:	6f 90       	pop	r6
 a40:	5f 90       	pop	r5
 a42:	4f 90       	pop	r4
 a44:	3f 90       	pop	r3
 a46:	2f 90       	pop	r2
 a48:	1f 90       	pop	r1
 a4a:	0f 90       	pop	r0
 a4c:	0f be       	out	0x3f, r0	; 63
 a4e:	0f 90       	pop	r0
 a50:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
 a52:	08 95       	ret

00000a54 <Kernel_Task_Sleep_Time_Get>:


;;===========================kernel task sleep time get starting============================;; 
Kernel_Task_Sleep_Time_Get:                               ;total 1.88uS @8MHz     ( 15 clocks) 
		;get remaining sleep time (ms), arg R24, return R25:R24                                
		MOV   R16                , R24                    ;copy                   (  1 clock ) 
 a54:	08 2f       	mov	r16, r24
		LSL   R16                                         ;x2                     (  1 clock ) 
 a56:	00 0f       	add	r16, r16
		LDI   R30                , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 a58:	e4 e4       	ldi	r30, 0x44	; 68
		LDI   R31                , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 a5a:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 a5c:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 a5e:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 a60:	f0 1f       	adc	r31, r16
		LD    R24                , Z+                     ;load sleep time        (  2 clocks) 
 a62:	81 91       	ld	r24, Z+
		LD    R25                , Z                      ;load sleep time        (  2 clocks) 
 a64:	90 81       	ld	r25, Z
		RET                                               ;return from subroutine (  4 clocks) 
 a66:	08 95       	ret

00000a68 <Kernel_Task_Status_Get>:


;;==============================kernel task status get starting=============================;; 
Kernel_Task_Status_Get:                                   ;total 1.50uS @8MHz     ( 12 clocks) 
		;get task status ->ready/blocked, arg R24, return R24                                  
		MOV   R16                , R24                    ;copy                   (  1 clock ) 
 a68:	08 2f       	mov	r16, r24
		LDI   R30                , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 a6a:	e0 e3       	ldi	r30, 0x30	; 48
		LDI   R31                , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 a6c:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 a6e:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 a70:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 a72:	f0 1f       	adc	r31, r16
		LD    R24                , Z                      ;load task status       (  2 clocks) 
 a74:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 a76:	08 95       	ret

00000a78 <Kernel_NTask_Get>:



;;================================kernel ntask get starting=================================;; 
Kernel_NTask_Get:                                         ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                 , KerBase+OFB_NTSK      ;load ntask             (  2 clock ) 
 a78:	80 91 08 01 	lds	r24, 0x0108
		RET                                               ;return from subroutine (  4 clocks) 
 a7c:	08 95       	ret

00000a7e <Kernel_Task_Prio_Get>:


;;=============================kernel task priority get starting============================;; 
Kernel_Task_Prio_Get:                                     ;total 1.38uS @8MHz     ( 11 clocks) 
		;get priority of the task id, arg (task_id->R24), return R24                           
		MOV   R16                , R24                    ;copy task_id           (  1 clock ) 
 a7e:	08 2f       	mov	r16, r24
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 a80:	ea e3       	ldi	r30, 0x3A	; 58
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 a82:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
 a84:	e0 0f       	add	r30, r16
		ADC   ZH                 , R1                     ;add high byte+carry    (  1 clock ) 
 a86:	f1 1d       	adc	r31, r1
		LD    R24                , Z                      ;load priority          (  2 clocks) 
 a88:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 a8a:	08 95       	ret

00000a8c <Kernel_Lowest_Prio_Get>:


;;============================kernel lowest priority get starting===========================;; 
Kernel_Lowest_Prio_Get:                                   ;total 0.75uS @8MHz     (  6 clocks) 
		;get lowest priority, return R24                                                       
		LDS   R24                , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
 a8c:	80 91 09 01 	lds	r24, 0x0109
		RET                                               ;return from subroutine (  4 clocks) 
 a90:	08 95       	ret

00000a92 <Kernel_High_Prio_Task_ID_Get>:


;;===========================kernel high priority task id starting==========================;; 
Kernel_High_Prio_Task_ID_Get:                             ;total 0.88uS @8MHz     (  7 clocks) 
		;internal idle task id = 0, app task start from task id 1, return R24                  
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 a92:	80 91 0a 01 	lds	r24, 0x010A
		DEC   R24                                         ;decrement by 1         (  1 clock ) 
 a96:	8a 95       	dec	r24
		RET                                               ;return from subroutine (  4 clocks) 
 a98:	08 95       	ret

00000a9a <Kernel_Abs_High_Prio_Task_ID_Get>:


;;=========================kernel abs high priority task id starting========================;; 
Kernel_Abs_High_Prio_Task_ID_Get:                         ;total 0.75uS @8MHz     (  6 clocks) 
		;get highest priority task id, return R24                                              
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 a9a:	80 91 0a 01 	lds	r24, 0x010A
		RET                                               ;return from subroutine (  4 clocks) 
 a9e:	08 95       	ret

00000aa0 <Kernel_CPU_Usage_Get>:


;;================================kernel cpu usage get starting=============================;; 
Kernel_CPU_Usage_Get:                                     ;total 0.75uS @8MHz     (  6 clocks) 
		;get cpu usage, return R24                                                             
		LDS   R24                , KerBase+OFB_USAGE      ;load cpu usage         (  2 clocks) 
 aa0:	80 91 0d 01 	lds	r24, 0x010D
		RET                                               ;return from subroutine (  4 clocks) 
 aa4:	08 95       	ret

00000aa6 <Debug_Init>:


;;===================================debug init starting====================================;; 
Debug_Init:                                               ;total 2.38uS @8MHz     ( 19 clocks) 
        ;init registers for UART0 (Arg R25:R24->UBRRH:UBRRL)                                   
		LDI   R16                , (1<<1)                 ;mask U2x               (  1 clock ) 
 aa6:	02 e0       	ldi	r16, 0x02	; 2
		STS   SRUCSR0A           , R16                    ;load val to UCSR0A     (  2 clocks) 
 aa8:	00 93 c0 00 	sts	0x00C0, r16
		MOV   R16                , R25                    ;copy R25->baud rate H  (  1 clock ) 
 aac:	09 2f       	mov	r16, r25
		STS   SRUBRR0H           , R16                    ;load val to UBRR0H     (  2 clocks) 
 aae:	00 93 c5 00 	sts	0x00C5, r16
		MOV   R16                , R24                    ;copy R24->baud rate L  (  1 clock ) 
 ab2:	08 2f       	mov	r16, r24
		STS   SRUBRR0L           , R16                    ;load val to UBRR0L     (  2 clocks) 
 ab4:	00 93 c4 00 	sts	0x00C4, r16
		LDI   R16                , (1<<1)|(1<<2)          ;config 8 data bit      (  1 clock ) 
 ab8:	06 e0       	ldi	r16, 0x06	; 6
		STS   SRUCSR0C           , R16                    ;load val to UCSR0C     (  2 clocks) 
 aba:	00 93 c2 00 	sts	0x00C2, r16
		LDI   R16                , (1<<3)                 ;enable tx              (  1 clock ) 
 abe:	08 e0       	ldi	r16, 0x08	; 8
		STS   SRUCSR0B           , R16                    ;load val to UCSR0B     (  2 clocks) 
 ac0:	00 93 c1 00 	sts	0x00C1, r16
        RET                                               ;return from subroutine (  4 clocks) 
 ac4:	08 95       	ret

00000ac6 <Debug_Tx_Byte>:


;;====================================debug tx starting=====================================;; 
Debug_Tx_Byte:                                            ;total 2.00uS+LT @8MHz  ( 16 clocks) 
		;write single byte to data register (Arg R24)                                          
		PUSH  R16                                         ;save reg               (  2 clocks) 
 ac6:	0f 93       	push	r16
		STS   SRUDR0             , R24                    ;load val to UDR0       (  2 clocks) 
 ac8:	80 93 c6 00 	sts	0x00C6, r24

00000acc <__UDRE0_CLEARED>:
                                                                                               
    __UDRE0_CLEARED:                                      ;undefined loop wrt ck               
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16     (  2 clocks) 
 acc:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x05                   ;skip if UDRE0 is set   (  2 clocks) 
 ad0:	05 ff       	sbrs	r16, 5
		RJMP  __UDRE0_CLEARED                             ;wait until UDRE0 is set(  2 clocks) 
 ad2:	fc cf       	rjmp	.-8      	; 0xacc <__UDRE0_CLEARED>
		POP   R16                                         ;restore reg            (  2 clocks) 
 ad4:	0f 91       	pop	r16
        RET                                               ;return from subroutine (  4 clocks) 
 ad6:	08 95       	ret

00000ad8 <Debug_Tx_Word>:


;;==================================debug tx word starting==================================;; 
Debug_Tx_Word:                                            ;total 2.00uS+LT @8MHz  ( 16 clocks) 
		;write 2 bytes, (Arg R24, R25), Args retained                                          
		PUSH  R24                                         ;save reg               (  2 clocks) 
 ad8:	8f 93       	push	r24
		MOV   R24                , R25                    ;copy reg               (  1 clock ) 
 ada:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte                               ;send via uart          ( 21 clocks) 
 adc:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
        POP   R24                                         ;restore reg            (  2 clocks) 
 ae0:	8f 91       	pop	r24
		CALL  Debug_Tx_Byte                               ;send via uart          ( 21 clocks) 
 ae2:	0e 94 63 05 	call	0xac6	; 0xac6 <Debug_Tx_Byte>
        RET                                               ;return from subroutine (  4 clocks) 
 ae6:	08 95       	ret

00000ae8 <Debug_Tx_Byte_Conf>:


;;================================debug tx confirm starting=================================;; 
Debug_Tx_Byte_Conf:                                       ;total 2.63uS+LT @8MHz  ( 21 clocks) 
        ;write 1 byte, (Arg R24), Args retained                                                
		PUSH  R16                                         ;save reg               (  2 clocks) 
 ae8:	0f 93       	push	r16
		STS   SRUDR0             , R24                    ;load val to UDR0,      (  2 clocks) 
 aea:	80 93 c6 00 	sts	0x00C6, r24

00000aee <__TXC0_CLEARED>:
    __TXC0_CLEARED:                                                                            
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,    (  2 clocks) 
 aee:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x06                   ;skip if TXC0 is set,   (  2 clocks) 
 af2:	06 ff       	sbrs	r16, 6
		RJMP  __TXC0_CLEARED                              ;wait until TXC0 is set (  2 clocks) 
 af4:	fc cf       	rjmp	.-8      	; 0xaee <__TXC0_CLEARED>
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,    (  2 clocks) 
 af6:	00 91 c0 00 	lds	r16, 0x00C0
		ORI   R16                , (1<<6)                 ;mask bit 6,            (  1 clock ) 
 afa:	00 64       	ori	r16, 0x40	; 64
		STS   SRUCSR0A           , R16                    ;write reg with bit msk (  2 clocks) 
 afc:	00 93 c0 00 	sts	0x00C0, r16
		POP   R16                                         ;restore reg            (  2 clocks) 
 b00:	0f 91       	pop	r16
        RET                                               ;return from subroutine (  4 clocks) 
 b02:	08 95       	ret

00000b04 <Debug_Tx_Word_Conf>:


;;==============================debug tx word confirm starting==============================;; 
Debug_Tx_Word_Conf:                                       ;total 6.38uS+LT @8MHz  ( 51 clocks) 
        ;write 2 bytes, (Arg R24, R25), Args retained                                          
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 b04:	0e 94 74 05 	call	0xae8	; 0xae8 <Debug_Tx_Byte_Conf>
		PUSH  R24                                         ;save reg               (  2 clocks) 
 b08:	8f 93       	push	r24
		MOV   R24                , R25                    ;copy R25 to R24        (  1 clock ) 
 b0a:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 b0c:	0e 94 74 05 	call	0xae8	; 0xae8 <Debug_Tx_Byte_Conf>
		POP   R24                                         ;restore reg            (  2 clocks) 
 b10:	8f 91       	pop	r24
        RET                                               ;return from subroutine (  4 clocks) 
 b12:	08 95       	ret

00000b14 <Debug_Tx_DWord_Conf>:


;;==============================debug tx dword confirm starting=============================;; 
Debug_Tx_DWord_Conf:                                      ;total 12.38uS+LT @8MHz ( 99 clocks) 
        ;write 4 bytes, (Arg R22-R25), Args retained                                           
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks) 
 b14:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R22                    ;copy R22 to R24          (1 clock ) 
 b18:	86 2f       	mov	r24, r22
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 b1a:	0e 94 74 05 	call	0xae8	; 0xae8 <Debug_Tx_Byte_Conf>
		MOV   R24                , R23                    ;copy R23 to R24          (1 clock ) 
 b1e:	87 2f       	mov	r24, r23
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 b20:	0e 94 74 05 	call	0xae8	; 0xae8 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24              (2 clocks) 
 b24:	80 91 4a 00 	lds	r24, 0x004A
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 b28:	0e 94 74 05 	call	0xae8	; 0xae8 <Debug_Tx_Byte_Conf>
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks) 
 b2c:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R25                    ;copy R22 to R24          (1 clock ) 
 b30:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 b32:	0e 94 74 05 	call	0xae8	; 0xae8 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24 val,         (2 clocks) 
 b36:	80 91 4a 00 	lds	r24, 0x004A
        RET                                               ;return from subroutine,  (4 clocks) 
 b3a:	08 95       	ret

00000b3c <Debug_Tx_From_RAM>:


;;=============================debug tx confirm from ram starting===========================;; 
Debug_Tx_From_RAM:                                        ;total 4.38uS+LT @8MHz  ( 35 clocks) 
        ;print data from RAM address (Arg R24-R25)                                             
		MOV   R16                , R30                    ;copy R30 to R16          (1 clock ) 
 b3c:	0e 2f       	mov	r16, r30
		MOV   R17                , R31                    ;copy R31 to R17          (1 clock ) 
 b3e:	1f 2f       	mov	r17, r31
		MOV   R18                , R24                    ;copy R24 to R18          (1 clock ) 
 b40:	28 2f       	mov	r18, r24
		MOV   R30                , R24                    ;copy R22 to R24          (1 clock ) 
 b42:	e8 2f       	mov	r30, r24
		MOV   R31                , R25                    ;copy R22 to R24          (1 clock ) 
 b44:	f9 2f       	mov	r31, r25
		LD    R24                , Z                      ;load val to R24          (2 clocks) 
 b46:	80 81       	ld	r24, Z
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 b48:	0e 94 74 05 	call	0xae8	; 0xae8 <Debug_Tx_Byte_Conf>
		MOV   R30                , R16                    ;copy R16 to R30          (1 clock ) 
 b4c:	e0 2f       	mov	r30, r16
		MOV   R31                , R17                    ;copy R17 to R31          (1 clock ) 
 b4e:	f1 2f       	mov	r31, r17
		MOV   R24                , R18                    ;copy R18 to R24          (1 clock ) 
 b50:	82 2f       	mov	r24, r18
        RET                                               ;return from subroutine,  (4 clocks) 
 b52:	08 95       	ret

00000b54 <Debug_Tx_RAM_Area>:

;;=============================debug tx confirm ram area starting===========================;; 
Debug_Tx_RAM_Area:                                        ;5.5uS+LT x R22 @8MHz   ( 44 clocks) 
        ;print data from RAM address (arguments R24:R25, R22)                                  
	__DUMP_BYTES:                                                                              
	    CALL  Debug_Tx_From_RAM                           ;send via uart from ram              
 b54:	0e 94 9e 05 	call	0xb3c	; 0xb3c <Debug_Tx_From_RAM>
		SUBI  R24                , 0x01                   ;decrement from LSByte               
 b58:	81 50       	subi	r24, 0x01	; 1
        SBCI  R25                , 0x00                   ;decrement if carry                  
 b5a:	90 40       	sbci	r25, 0x00	; 0
		SUBI  R22                , 0x01                   ;decrement                           
 b5c:	61 50       	subi	r22, 0x01	; 1
		BRNE  __DUMP_BYTES                                                                     
 b5e:	d1 f7       	brne	.-12     	; 0xb54 <Debug_Tx_RAM_Area>
        RET                                               ;return from subroutine,  (4 clocks) 
 b60:	08 95       	ret

00000b62 <__udivmodqi4>:
 b62:	99 1b       	sub	r25, r25
 b64:	79 e0       	ldi	r23, 0x09	; 9
 b66:	04 c0       	rjmp	.+8      	; 0xb70 <__udivmodqi4_ep>

00000b68 <__udivmodqi4_loop>:
 b68:	99 1f       	adc	r25, r25
 b6a:	96 17       	cp	r25, r22
 b6c:	08 f0       	brcs	.+2      	; 0xb70 <__udivmodqi4_ep>
 b6e:	96 1b       	sub	r25, r22

00000b70 <__udivmodqi4_ep>:
 b70:	88 1f       	adc	r24, r24
 b72:	7a 95       	dec	r23
 b74:	c9 f7       	brne	.-14     	; 0xb68 <__udivmodqi4_loop>
 b76:	80 95       	com	r24
 b78:	08 95       	ret

00000b7a <__udivmodsi4>:
 b7a:	a1 e2       	ldi	r26, 0x21	; 33
 b7c:	1a 2e       	mov	r1, r26
 b7e:	aa 1b       	sub	r26, r26
 b80:	bb 1b       	sub	r27, r27
 b82:	fd 01       	movw	r30, r26
 b84:	0d c0       	rjmp	.+26     	; 0xba0 <__udivmodsi4_ep>

00000b86 <__udivmodsi4_loop>:
 b86:	aa 1f       	adc	r26, r26
 b88:	bb 1f       	adc	r27, r27
 b8a:	ee 1f       	adc	r30, r30
 b8c:	ff 1f       	adc	r31, r31
 b8e:	a2 17       	cp	r26, r18
 b90:	b3 07       	cpc	r27, r19
 b92:	e4 07       	cpc	r30, r20
 b94:	f5 07       	cpc	r31, r21
 b96:	20 f0       	brcs	.+8      	; 0xba0 <__udivmodsi4_ep>
 b98:	a2 1b       	sub	r26, r18
 b9a:	b3 0b       	sbc	r27, r19
 b9c:	e4 0b       	sbc	r30, r20
 b9e:	f5 0b       	sbc	r31, r21

00000ba0 <__udivmodsi4_ep>:
 ba0:	66 1f       	adc	r22, r22
 ba2:	77 1f       	adc	r23, r23
 ba4:	88 1f       	adc	r24, r24
 ba6:	99 1f       	adc	r25, r25
 ba8:	1a 94       	dec	r1
 baa:	69 f7       	brne	.-38     	; 0xb86 <__udivmodsi4_loop>
 bac:	60 95       	com	r22
 bae:	70 95       	com	r23
 bb0:	80 95       	com	r24
 bb2:	90 95       	com	r25
 bb4:	9b 01       	movw	r18, r22
 bb6:	ac 01       	movw	r20, r24
 bb8:	bd 01       	movw	r22, r26
 bba:	cf 01       	movw	r24, r30
 bbc:	08 95       	ret

00000bbe <_exit>:
 bbe:	f8 94       	cli

00000bc0 <__stop_program>:
 bc0:	ff cf       	rjmp	.-2      	; 0xbc0 <__stop_program>
