
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000048c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000190  00800100  00800100  00000500  2**0
                  ALLOC
  2 .stab         00000900  00000000  00000000  00000500  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000006c  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000006d  00000000  00000000  00000eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000161  00000000  00000000  00000f19  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000c2  00000000  00000000  0000107a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000017e  00000000  00000000  0000113c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  000012bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000e5  00000000  00000000  0000132c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000078  00000000  00000000  00001411  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_16>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	00 00       	nop
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 00       	nop
  76:	00 00       	nop
  78:	00 00       	nop
  7a:	00 00       	nop
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 00       	nop
  82:	00 00       	nop
  84:	00 00       	nop
  86:	00 00       	nop
  88:	46 c0       	rjmp	.+140    	; 0x116 <__vector_16>

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61
  96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  9a:	0c 94 44 02 	jmp	0x488	; 0x488 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:

int main(void) {
    
	
	//Debug_Init();
	Kernel_SysTick_Reg_Init(1000);
  a2:	88 ee       	ldi	r24, 0xE8	; 232
  a4:	93 e0       	ldi	r25, 0x03	; 3
  a6:	0e 94 13 01 	call	0x226	; 0x226 <Kernel_SysTick_Reg_Init>
	Kernel_Task0_Init();
  aa:	0e 94 a0 01 	call	0x340	; 0x340 <Kernel_Task0_Init>
	Kernel_Task1_Init();
  ae:	0e 94 db 01 	call	0x3b6	; 0x3b6 <Kernel_Task1_Init>
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <main+0x10>

000000b4 <Tasks_Delay>:
#include <util/delay.h>
#include "kernel.h"
#include "tasks.h"


void Tasks_Delay(uint16_t val){
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	ec 01       	movw	r28, r24
  uint16_t curr = 0, next = 0;
  curr = Kernel_SysTick_Val_Get();
  ba:	0e 94 49 01 	call	0x292	; 0x292 <Kernel_SysTick_Val_Get>
  be:	c9 01       	movw	r24, r18
  next = curr + val;
  c0:	c2 0f       	add	r28, r18
  c2:	d3 1f       	adc	r29, r19
  c4:	03 c0       	rjmp	.+6      	; 0xcc <SRUDR0+0x6>
  while( curr < next ){
    curr = Kernel_SysTick_Val_Get();
  c6:	0e 94 49 01 	call	0x292	; 0x292 <Kernel_SysTick_Val_Get>
  ca:	c9 01       	movw	r24, r18

void Tasks_Delay(uint16_t val){
  uint16_t curr = 0, next = 0;
  curr = Kernel_SysTick_Val_Get();
  next = curr + val;
  while( curr < next ){
  cc:	8c 17       	cp	r24, r28
  ce:	9d 07       	cpc	r25, r29
  d0:	d0 f3       	brcs	.-12     	; 0xc6 <SRUDR0>
    curr = Kernel_SysTick_Val_Get();
  }
}
  d2:	df 91       	pop	r29
  d4:	cf 91       	pop	r28
  d6:	08 95       	ret

000000d8 <Tasks_Task2>:
  }
}

void Tasks_Task2(void){
  
  DDRD |= (1<<7);
  d8:	57 9a       	sbi	0x0a, 7	; 10
  
  while(1){
    
    PORTD ^= (1<<7);
  da:	8b b1       	in	r24, 0x0b	; 11
  dc:	80 58       	subi	r24, 0x80	; 128
  de:	8b b9       	out	0x0b, r24	; 11
	Tasks_Delay(70);
  e0:	86 e4       	ldi	r24, 0x46	; 70
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 5a 00 	call	0xb4	; 0xb4 <Tasks_Delay>
  e8:	f8 cf       	rjmp	.-16     	; 0xda <Tasks_Task2+0x2>

000000ea <Tasks_Task1>:
	Tasks_Delay(12);
	
  }
}

void Tasks_Task1(void){
  ea:	1f 93       	push	r17

  DDRD |= (1<<6);
  ec:	56 9a       	sbi	0x0a, 6	; 10
  
  while(1){
    
    PORTD ^= (1<<6);
  ee:	10 e4       	ldi	r17, 0x40	; 64
  f0:	8b b1       	in	r24, 0x0b	; 11
  f2:	81 27       	eor	r24, r17
  f4:	8b b9       	out	0x0b, r24	; 11
	Tasks_Delay(41);
  f6:	89 e2       	ldi	r24, 0x29	; 41
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 5a 00 	call	0xb4	; 0xb4 <Tasks_Delay>
  fe:	f8 cf       	rjmp	.-16     	; 0xf0 <Tasks_Task1+0x6>

00000100 <Tasks_Task0>:
  while( curr < next ){
    curr = Kernel_SysTick_Val_Get();
  }
}

void Tasks_Task0(void){
 100:	1f 93       	push	r17
  
  DDRD |= (1<<5);
 102:	55 9a       	sbi	0x0a, 5	; 10
  
  while(1){
    
    PORTD ^= (1<<5);
 104:	10 e2       	ldi	r17, 0x20	; 32
 106:	8b b1       	in	r24, 0x0b	; 11
 108:	81 27       	eor	r24, r17
 10a:	8b b9       	out	0x0b, r24	; 11
	Tasks_Delay(12);
 10c:	8c e0       	ldi	r24, 0x0C	; 12
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 5a 00 	call	0xb4	; 0xb4 <Tasks_Delay>
 114:	f8 cf       	rjmp	.-16     	; 0x106 <Tasks_Task0+0x6>

00000116 <__vector_16>:


;;===================================ISR execution start====================================;;
.global  __vector_16
    __vector_16:                                          ;total operation        (208 clocks)
	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 116:	29 9a       	sbi	0x05, 1	; 5
        KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	1f 92       	push	r1
 120:	11 24       	eor	r1, r1
 122:	2f 92       	push	r2
 124:	3f 92       	push	r3
 126:	4f 92       	push	r4
 128:	5f 92       	push	r5
 12a:	6f 92       	push	r6
 12c:	7f 92       	push	r7
 12e:	8f 92       	push	r8
 130:	9f 92       	push	r9
 132:	af 92       	push	r10
 134:	bf 92       	push	r11
 136:	cf 92       	push	r12
 138:	df 92       	push	r13
 13a:	ef 92       	push	r14
 13c:	ff 92       	push	r15
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	2f 93       	push	r18
 144:	3f 93       	push	r19
 146:	4f 93       	push	r20
 148:	5f 93       	push	r21
 14a:	6f 93       	push	r22
 14c:	7f 93       	push	r23
 14e:	8f 93       	push	r24
 150:	9f 93       	push	r25
 152:	af 93       	push	r26
 154:	bf 93       	push	r27
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	ef 93       	push	r30
 15c:	ff 93       	push	r31
		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 15e:	00 91 08 01 	lds	r16, 0x0108
 162:	00 93 46 00 	sts	0x0046, r16
		KER_TICK_INCREMENT                                ;increment tick counter ( 27 clocks) 
 166:	01 e0       	ldi	r16, 0x01	; 1
 168:	10 91 00 01 	lds	r17, 0x0100
 16c:	10 0f       	add	r17, r16
 16e:	10 93 00 01 	sts	0x0100, r17
 172:	00 e0       	ldi	r16, 0x00	; 0
 174:	10 91 01 01 	lds	r17, 0x0101
 178:	10 1f       	adc	r17, r16
 17a:	10 93 01 01 	sts	0x0101, r17
 17e:	10 91 02 01 	lds	r17, 0x0102
 182:	10 1f       	adc	r17, r16
 184:	10 93 02 01 	sts	0x0102, r17
 188:	10 91 03 01 	lds	r17, 0x0103
 18c:	10 1f       	adc	r17, r16
 18e:	10 93 03 01 	sts	0x0103, r17
 192:	10 91 04 01 	lds	r17, 0x0104
 196:	10 1f       	adc	r17, r16
 198:	10 93 04 01 	sts	0x0104, r17
		KER_TASK_SWITCH                                   ;task switching         ( 38 clocks) 
 19c:	8d b7       	in	r24, 0x3d	; 61
 19e:	9e b7       	in	r25, 0x3e	; 62
 1a0:	00 91 06 01 	lds	r16, 0x0106
 1a4:	00 0f       	add	r16, r16
 1a6:	ea e0       	ldi	r30, 0x0A	; 10
 1a8:	f1 e0       	ldi	r31, 0x01	; 1
 1aa:	e0 0f       	add	r30, r16
 1ac:	00 e0       	ldi	r16, 0x00	; 0
 1ae:	f0 1f       	adc	r31, r16
 1b0:	81 93       	st	Z+, r24
 1b2:	90 83       	st	Z, r25
 1b4:	00 91 06 01 	lds	r16, 0x0106
 1b8:	03 95       	inc	r16
 1ba:	10 91 07 01 	lds	r17, 0x0107

000001be <_MOD_CONT>:
 1be:	01 17       	cp	r16, r17
 1c0:	10 f0       	brcs	.+4      	; 0x1c6 <_MOD_DONE>
 1c2:	01 1b       	sub	r16, r17
 1c4:	fc cf       	rjmp	.-8      	; 0x1be <_MOD_CONT>

000001c6 <_MOD_DONE>:
 1c6:	00 93 06 01 	sts	0x0106, r16
 1ca:	00 0f       	add	r16, r16
 1cc:	ea e0       	ldi	r30, 0x0A	; 10
 1ce:	f1 e0       	ldi	r31, 0x01	; 1
 1d0:	e0 0f       	add	r30, r16
 1d2:	00 e0       	ldi	r16, 0x00	; 0
 1d4:	f0 1f       	adc	r31, r16
 1d6:	81 91       	ld	r24, Z+
 1d8:	90 81       	ld	r25, Z
 1da:	8d bf       	out	0x3d, r24	; 61
 1dc:	9e bf       	out	0x3e, r25	; 62
		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 1de:	ff 91       	pop	r31
 1e0:	ef 91       	pop	r30
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	bf 91       	pop	r27
 1e8:	af 91       	pop	r26
 1ea:	9f 91       	pop	r25
 1ec:	8f 91       	pop	r24
 1ee:	7f 91       	pop	r23
 1f0:	6f 91       	pop	r22
 1f2:	5f 91       	pop	r21
 1f4:	4f 91       	pop	r20
 1f6:	3f 91       	pop	r19
 1f8:	2f 91       	pop	r18
 1fa:	1f 91       	pop	r17
 1fc:	0f 91       	pop	r16
 1fe:	ff 90       	pop	r15
 200:	ef 90       	pop	r14
 202:	df 90       	pop	r13
 204:	cf 90       	pop	r12
 206:	bf 90       	pop	r11
 208:	af 90       	pop	r10
 20a:	9f 90       	pop	r9
 20c:	8f 90       	pop	r8
 20e:	7f 90       	pop	r7
 210:	6f 90       	pop	r6
 212:	5f 90       	pop	r5
 214:	4f 90       	pop	r4
 216:	3f 90       	pop	r3
 218:	2f 90       	pop	r2
 21a:	1f 90       	pop	r1
 21c:	0f 90       	pop	r0
 21e:	0f be       	out	0x3f, r0	; 63
 220:	0f 90       	pop	r0
	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 222:	29 98       	cbi	0x05, 1	; 5
		RETI                                              ;return from interrupt  (  4 clocks) 
 224:	18 95       	reti

00000226 <Kernel_SysTick_Reg_Init>:



;;==================================SysTick reg init start==================================;;
Kernel_SysTick_Reg_Init:                                  ;total operation        ( 55 clocks)
        CLI                                               ;disable global int,    (  1 clock ) 
 226:	f8 94       	cli
		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 228:	21 9a       	sbi	0x04, 1	; 4
 22a:	29 98       	cbi	0x05, 1	; 5
		LDI   R16                , 0x00                   ;set 0x00 to R16,       (  1 clock ) 
 22c:	00 e0       	ldi	r16, 0x00	; 0
		STS   Kernel+0x00        , R16                    ;clear  kernel[0]       (  2 clocks) 
 22e:	00 93 00 01 	sts	0x0100, r16
		STS   Kernel+0x01        , R16                    ;clear  kernel[1]       (  2 clocks) 
 232:	00 93 01 01 	sts	0x0101, r16
		STS   Kernel+0x02        , R16                    ;clear  kernel[2]       (  2 clocks) 
 236:	00 93 02 01 	sts	0x0102, r16
		STS   Kernel+0x03        , R16                    ;clear  kernel[3]       (  2 clocks) 
 23a:	00 93 03 01 	sts	0x0103, r16
		STS   Kernel+0x04        , R16                    ;clear  kernel[4]       (  2 clocks) 
 23e:	00 93 04 01 	sts	0x0104, r16
		STS   Kernel+0x05        , R16                    ;clear  kernel[5]       (  2 clocks) 
 242:	00 93 05 01 	sts	0x0105, r16
		STS   Kernel+0x06        , R16                    ;clear  kernel[6]       (  2 clocks) 
 246:	00 93 06 01 	sts	0x0106, r16
		STS   Kernel+0x07        , R16                    ;clear  kernel[7]       (  2 clocks) 
 24a:	00 93 07 01 	sts	0x0107, r16
		STS   Kernel+0x08        , R16                    ;clear  kernel[8]       (  2 clocks)
 24e:	00 93 08 01 	sts	0x0108, r16
        STS   Kernel+0x09        , R16                    ;clear  kernel[9]       (  2 clocks) 
 252:	00 93 09 01 	sts	0x0109, r16
		LDI   R16                , KER_NTASK              ;load ntask to reg      (  1 clock ) 
 256:	02 e0       	ldi	r16, 0x02	; 2
		STS   Kernel+0x07        , R16                    ;store ntask            (  2 clocks) 
 258:	00 93 07 01 	sts	0x0107, r16
		LDI   R16                , 0x00                   ;store r16 with 0       (  1 clock ) 
 25c:	00 e0       	ldi	r16, 0x00	; 0
		STS   SRTCCR0A           , R16                    ;clear TCCR0A           (  2 clocks) 
 25e:	00 93 44 00 	sts	0x0044, r16
		STS   SRTCCR0B           , R16                    ;clear TCCR0B           (  2 clocks) 
 262:	00 93 45 00 	sts	0x0045, r16
		STS   SRTIMSK0           , R16                    ;clear TIMSK0           (  2 clocks) 
 266:	00 93 6e 00 	sts	0x006E, r16
		STS   SRTIFR0            , R16                    ;clear TIFR0            (  2 clocks) 
 26a:	00 93 35 00 	sts	0x0035, r16
		STS   SROCR0A            , R16                    ;clear OCR0A            (  2 clocks) 
 26e:	00 93 47 00 	sts	0x0047, r16
		STS   SROCR0B            , R16                    ;clear OCR0B            (  2 clocks) 
 272:	00 93 48 00 	sts	0x0048, r16
		STS   SRTCNT0            , R16                    ;clear TCNT0            (  2 clocks) 
 276:	00 93 46 00 	sts	0x0046, r16
		LDI   R16                , KER_PRS                ;prescaler 64           (  1 clock ) 
 27a:	03 e0       	ldi	r16, 0x03	; 3
		STS   SRTCCR0B           , R16                    ;set to TCCR0B          (  2 clocks)
 27c:	00 93 45 00 	sts	0x0045, r16
		LDI   R16                , KER_RLD                ;reload value (130)     (  1 clock ) 
 280:	02 e8       	ldi	r16, 0x82	; 130
		STS   Kernel+0x08        , R16                    ;Kernel[5] reload value (  2 clocks) 
 282:	00 93 08 01 	sts	0x0108, r16
		STS   SRTCNT0            , R16                    ;set to TCNT0           (  2 clocks) 
 286:	00 93 46 00 	sts	0x0046, r16
		LDI   R16                , 0x01                   ;bit mask TOIE0         (  1 clock ) 
 28a:	01 e0       	ldi	r16, 0x01	; 1
		STS   SRTIMSK0           , R16                    ;set to TIMSK0          (  2 clocks) 
 28c:	00 93 6e 00 	sts	0x006E, r16
		RET                                               ;return from subroutine (  4 clocks) 
 290:	08 95       	ret

00000292 <Kernel_SysTick_Val_Get>:



;;=================================SysTick value get start==================================;;
Kernel_SysTick_Val_Get:                                   ;total operation        ( 20 clocks)
        IN    R16                , IOSREG                 ;save SREG              (  1 clock ) 
 292:	0f b7       	in	r16, 0x3f	; 63
        CLI                                               ;disable interrupts     (  1 clock ) 
 294:	f8 94       	cli
		LDS   R18		         , Kernel+0x00            ;byte0 -> R18 (LSB)     (  2 clocks) 
 296:	20 91 00 01 	lds	r18, 0x0100
		LDS   R19		         , Kernel+0x01            ;byte1 -> R19           (  2 clocks) 
 29a:	30 91 01 01 	lds	r19, 0x0101
		LDS   R20		         , Kernel+0x02            ;byte2 -> R20           (  2 clocks) 
 29e:	40 91 02 01 	lds	r20, 0x0102
		LDS   R21		         , Kernel+0x03            ;byte3 -> R21           (  2 clocks) 
 2a2:	50 91 03 01 	lds	r21, 0x0103
		LDS   R22		         , Kernel+0x04            ;byte4 -> R22           (  2 clocks) 
 2a6:	60 91 04 01 	lds	r22, 0x0104
		LDI   R23		         , 0x00                   ;byte5 -> R23           (  1 clocks) 
 2aa:	70 e0       	ldi	r23, 0x00	; 0
		LDI   R24		         , 0x00                   ;byte6 -> R24           (  1 clocks) 
 2ac:	80 e0       	ldi	r24, 0x00	; 0
		LDI   R25		         , 0x00                   ;byte7 -> R25 (MSB)     (  1 clocks) 
 2ae:	90 e0       	ldi	r25, 0x00	; 0
		OUT   IOSREG             , R16          		  ;restore SREG           (  1 clock )
 2b0:	0f bf       	out	0x3f, r16	; 63
		RET                                               ;return from subroutine (  4 clocks) 
 2b2:	08 95       	ret

000002b4 <Kernel_Interrupt_Sts_Get>:



;;===============================interrupt status get start=================================;;
Kernel_Interrupt_Sts_Get:                                 ;total operation        ( 10 clocks)
        LDI   R24		         , 0x00                   ;clear R24              (  1 clock ) 
 2b4:	80 e0       	ldi	r24, 0x00	; 0
        IN    R16		         , IOSREG                 ;save SREG in R16       (  1 clock )
 2b6:	0f b7       	in	r16, 0x3f	; 63
		SBRC  R16		         , 0x07                   ;check I flag->bit7     (  3 clocks)
 2b8:	07 fd       	sbrc	r16, 7
		LDI   R24		         , 0x01                   ;set R24 to 1           (  1 clock ) 
 2ba:	81 e0       	ldi	r24, 0x01	; 1
		RET                                               ;return from subroutine (  4 clocks) 
 2bc:	08 95       	ret

000002be <Kernel_Task_Init>:

;;====================================Kernel Task Init=====================================;;
Kernel_Task_Init:
;   func_ptr->R25:R24, task_id->R22, task_priority->R20
        ;save MSP
		IN    R2                 , IOSPL
 2be:	2d b6       	in	r2, 0x3d	; 61
		IN    R3                 , IOSPH
 2c0:	3e b6       	in	r3, 0x3e	; 62
	    LDI   R16                , lo8(KER_STZ-1)
 2c2:	0f e7       	ldi	r16, 0x7F	; 127
        LDI   R17                , hi8(KER_STZ-1)
 2c4:	10 e0       	ldi	r17, 0x00	; 0
        ADD   R22                , R16
 2c6:	60 0f       	add	r22, r16
        ADC   R23                , R17
 2c8:	71 1f       	adc	r23, r17
		OUT   IOSPL              , R22
 2ca:	6d bf       	out	0x3d, r22	; 61
        OUT   IOSPH              , R23
 2cc:	7e bf       	out	0x3e, r23	; 62
		MOV   R16                , R24        ; low byte func_ptr
 2ce:	08 2f       	mov	r16, r24
        MOV   R17                , R25        ; high byte func_ptr
 2d0:	19 2f       	mov	r17, r25
        LSR   R17                             ; shift right high byte
 2d2:	16 95       	lsr	r17
        ROR   R16                             ; rotate carry into low byte
 2d4:	07 95       	ror	r16
	    PUSH  R16
 2d6:	0f 93       	push	r16
        PUSH  R17
 2d8:	1f 93       	push	r17
		KER_CONTEXT_SAVE
 2da:	0f 92       	push	r0
 2dc:	0f b6       	in	r0, 0x3f	; 63
 2de:	0f 92       	push	r0
 2e0:	1f 92       	push	r1
 2e2:	11 24       	eor	r1, r1
 2e4:	2f 92       	push	r2
 2e6:	3f 92       	push	r3
 2e8:	4f 92       	push	r4
 2ea:	5f 92       	push	r5
 2ec:	6f 92       	push	r6
 2ee:	7f 92       	push	r7
 2f0:	8f 92       	push	r8
 2f2:	9f 92       	push	r9
 2f4:	af 92       	push	r10
 2f6:	bf 92       	push	r11
 2f8:	cf 92       	push	r12
 2fa:	df 92       	push	r13
 2fc:	ef 92       	push	r14
 2fe:	ff 92       	push	r15
 300:	0f 93       	push	r16
 302:	1f 93       	push	r17
 304:	2f 93       	push	r18
 306:	3f 93       	push	r19
 308:	4f 93       	push	r20
 30a:	5f 93       	push	r21
 30c:	6f 93       	push	r22
 30e:	7f 93       	push	r23
 310:	8f 93       	push	r24
 312:	9f 93       	push	r25
 314:	af 93       	push	r26
 316:	bf 93       	push	r27
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	ef 93       	push	r30
 31e:	ff 93       	push	r31
		IN    R16                , IOSPL
 320:	0d b7       	in	r16, 0x3d	; 61
        IN    R17                , IOSPH
 322:	1e b7       	in	r17, 0x3e	; 62
        MOV   R20                , R18        ; task_id copy
 324:	42 2f       	mov	r20, r18
        LSL   R20                             ; multiply by 2 (word index)
 326:	44 0f       	add	r20, r20
        LDI   R30                , lo8(ker_stp)
 328:	ea e0       	ldi	r30, 0x0A	; 10
        LDI   R31                , hi8(ker_stp)
 32a:	f1 e0       	ldi	r31, 0x01	; 1
        ADD   R30                , R20        ; offset low byte
 32c:	e4 0f       	add	r30, r20
        ADC   R31                , R1         ; offset high byte = 0
 32e:	f1 1d       	adc	r31, r1
        ST     Z+                , R16        ; store low byte of SP
 330:	01 93       	st	Z+, r16
        ST     Z                 , R17        ; store high byte of SP
 332:	10 83       	st	Z, r17
		OUT   IOSPL, R2
 334:	2d be       	out	0x3d, r2	; 61
        OUT   IOSPH, R3
 336:	3e be       	out	0x3e, r3	; 62

00000338 <Kernel_Task_Start>:

;;====================================Kernel Task start=====================================;;
Kernel_Task_Start:
;   func_ptr->R25:R24, task_id->R22, task_priority->R20
        ;save MSP
		IN    R2                 , IOSPL
 338:	2d b6       	in	r2, 0x3d	; 61
		IN    R3                 , IOSPH
 33a:	3e b6       	in	r3, 0x3e	; 62
	    LDI   R16                , lo8(KER_STZ-1)
 33c:	0f e7       	ldi	r16, 0x7F	; 127
        SEI
 33e:	78 94       	sei

00000340 <Kernel_Task0_Init>:
;;====================================Kernel Task0 Init=====================================;;
Kernel_Task0_Init:
        ;init stack for task0
		
		;save MSP
		IN    R2                 , IOSPL
 340:	2d b6       	in	r2, 0x3d	; 61
		IN    R3                 , IOSPH
 342:	3e b6       	in	r3, 0x3e	; 62
		
		;set stack for task0
		LDI   R16                , lo8(ker_stk0+KER_STZ-1);fetch top SPL0,          (1 clock )
 344:	0f e8       	ldi	r16, 0x8F	; 143
		LDI   R17                , hi8(ker_stk0+KER_STZ-1);fetch top SPH0,          (1 clock )
 346:	11 e0       	ldi	r17, 0x01	; 1
		OUT   IOSPL              , R16                    ;load SPL                 (1 clock )
 348:	0d bf       	out	0x3d, r16	; 61
        OUT   IOSPH              , R17                    ;load SPH                 (1 clock )
 34a:	1e bf       	out	0x3e, r17	; 62
		
		;psuh return address of task0
		LDI   R16                , lo8(Tasks_Task0)       ;fetch task address low   (1 clock )
 34c:	00 e0       	ldi	r16, 0x00	; 0
		LDI   R17                , hi8(Tasks_Task0)       ;fetch task address high  (1 clock )
 34e:	11 e0       	ldi	r17, 0x01	; 1
		LSR   R17                                         ;right shift high byte    (1 clock )
 350:	16 95       	lsr	r17
		ROR   R16                                         ;rotate right th carry    (1 clock )
 352:	07 95       	ror	r16
		PUSH  R16                                         ;push word addr low       (2 clocks)
 354:	0f 93       	push	r16
		PUSH  R17                                         ;push word addr high      (2 clocks) 
 356:	1f 93       	push	r17
		
        KER_CONTEXT_SAVE
 358:	0f 92       	push	r0
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	0f 92       	push	r0
 35e:	1f 92       	push	r1
 360:	11 24       	eor	r1, r1
 362:	2f 92       	push	r2
 364:	3f 92       	push	r3
 366:	4f 92       	push	r4
 368:	5f 92       	push	r5
 36a:	6f 92       	push	r6
 36c:	7f 92       	push	r7
 36e:	8f 92       	push	r8
 370:	9f 92       	push	r9
 372:	af 92       	push	r10
 374:	bf 92       	push	r11
 376:	cf 92       	push	r12
 378:	df 92       	push	r13
 37a:	ef 92       	push	r14
 37c:	ff 92       	push	r15
 37e:	0f 93       	push	r16
 380:	1f 93       	push	r17
 382:	2f 93       	push	r18
 384:	3f 93       	push	r19
 386:	4f 93       	push	r20
 388:	5f 93       	push	r21
 38a:	6f 93       	push	r22
 38c:	7f 93       	push	r23
 38e:	8f 93       	push	r24
 390:	9f 93       	push	r25
 392:	af 93       	push	r26
 394:	bf 93       	push	r27
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	ef 93       	push	r30
 39c:	ff 93       	push	r31
		
		;save PSP of task0
        IN    R16                , IOSPL                  ;read SPL                 (1 clock )
 39e:	0d b7       	in	r16, 0x3d	; 61
        IN    R17                , IOSPH                  ;read SPH                 (1 clock )
 3a0:	1e b7       	in	r17, 0x3e	; 62
        STS   ker_stp + 0        , R16                    ;set stp of task0         (2 clocks) 
 3a2:	00 93 0a 01 	sts	0x010A, r16
        STS   ker_stp + 1        , R17                    ;set stp of task0         (2 clocks) 
 3a6:	10 93 0b 01 	sts	0x010B, r17
		
		;set task index -> 0
		LDI   R16                , 0x00                   ;set R16 to 0x00          (1 clock )
 3aa:	00 e0       	ldi	r16, 0x00	; 0
		STS   Kernel+0x06        , R16                    ;set task index = 0       (2 clocks) 
 3ac:	00 93 06 01 	sts	0x0106, r16
		
		;restore MSP
		OUT   IOSPL              , R2                     ;load SPL                 (1 clock )
 3b0:	2d be       	out	0x3d, r2	; 61
        OUT   IOSPH              , R3                     ;load SPH                 (1 clock )
 3b2:	3e be       	out	0x3e, r3	; 62
        RET                                               ;return from subroutine   (4 clocks) 
 3b4:	08 95       	ret

000003b6 <Kernel_Task1_Init>:
		;save MSP
		;IN    R2                 , IOSPL
		;IN    R3                 , IOSPH
		
		;set stack for task1
		LDI   R16                , lo8(ker_stk1+KER_STZ-1);fetch top SPL1,          (1 clock )
 3b6:	0f e0       	ldi	r16, 0x0F	; 15
		LDI   R17                , hi8(ker_stk1+KER_STZ-1);fetch top SPH1,          (1 clock )
 3b8:	12 e0       	ldi	r17, 0x02	; 2
		OUT   IOSPL              , R16                    ;load SPL                 (1 clock )
 3ba:	0d bf       	out	0x3d, r16	; 61
        OUT   IOSPH              , R17                    ;load SPH                 (1 clock )
 3bc:	1e bf       	out	0x3e, r17	; 62
		
		;psuh return address of task1
		LDI   R16                , lo8(Tasks_Task1)       ;fetch task address low   (1 clock )
 3be:	0a ee       	ldi	r16, 0xEA	; 234
		LDI   R17                , hi8(Tasks_Task1)       ;fetch task address high  (1 clock )
 3c0:	10 e0       	ldi	r17, 0x00	; 0
		LSR   R17                                         ;right shift high byte    (1 clock )
 3c2:	16 95       	lsr	r17
		ROR   R16                                         ;rotate right th carry    (1 clock )
 3c4:	07 95       	ror	r16
		PUSH  R16                                         ;push word addr low       (2 clocks)
 3c6:	0f 93       	push	r16
		PUSH  R17                                         ;push word addr high      (2 clocks) 
 3c8:	1f 93       	push	r17
		
        ;KER_CNTXT_SV
		
		;save PSP of task1
        IN    R16                , IOSPL                  ;read SPL                 (1 clock )
 3ca:	0d b7       	in	r16, 0x3d	; 61
        IN    R17                , IOSPH                  ;read SPH                 (1 clock )
 3cc:	1e b7       	in	r17, 0x3e	; 62
        STS   ker_stp + 2        , R16                    ;set stp of task1         (2 clocks) 
 3ce:	00 93 0c 01 	sts	0x010C, r16
        STS   ker_stp + 3        , R17                    ;set stp of task1         (2 clocks) 
 3d2:	10 93 0d 01 	sts	0x010D, r17
		
		;set task index -> 1
		LDI   R16                , 0x01                   ;set R16 to 0x01          (1 clock )
 3d6:	01 e0       	ldi	r16, 0x01	; 1
		STS   Kernel+0x06        , R16                    ;set task index = 1       (2 clocks) 
 3d8:	00 93 06 01 	sts	0x0106, r16
		
		;restore MSP
		;OUT   IOSPL              , R2                     ;load SPL                 (1 clock )
        ;OUT   IOSPH              , R3                     ;load SPH                 (1 clock )
		SEI
 3dc:	78 94       	sei
        RET                                               ;return from subroutine   (4 clocks)  
 3de:	08 95       	ret

000003e0 <Debug_Init>:


;;========================================Debug Init========================================;;
Debug_Init:
        ;init registers for UART0
		LDI   R16                , (1<<1)                 ;mask U2x,                (1 clock )
 3e0:	02 e0       	ldi	r16, 0x02	; 2
		STS   SRUCSR0A           , R16                    ;load val to UCSR0A,      (2 clocks)
 3e2:	00 93 c0 00 	sts	0x00C0, r16
		LDI   R16                , 0x00                   ;clear R16,               (1 clock )
 3e6:	00 e0       	ldi	r16, 0x00	; 0
		STS   SRUBRR0H           , R16                    ;load val to UBRR0H,      (2 clocks)
 3e8:	00 93 c5 00 	sts	0x00C5, r16
		LDI   R16                , 0x03                   ;set 0x03, 250k baud,     (1 clock )
 3ec:	03 e0       	ldi	r16, 0x03	; 3
		STS   SRUBRR0L           , R16                    ;load val to UBRR0L,      (2 clocks)
 3ee:	00 93 c4 00 	sts	0x00C4, r16
		LDI   R16                , (1<<1)|(1<<2)          ;config 8 data bit        (1 clock )
 3f2:	06 e0       	ldi	r16, 0x06	; 6
		STS   SRUCSR0C           , R16                    ;load val to UCSR0C,      (2 clocks)
 3f4:	00 93 c2 00 	sts	0x00C2, r16
		LDI   R16                , (1<<3)                 ;enable tx,               (1 clock )
 3f8:	08 e0       	ldi	r16, 0x08	; 8
		STS   SRUCSR0B           , R16                    ;load val to UCSR0B,      (2 clocks)
 3fa:	00 93 c1 00 	sts	0x00C1, r16
        RET                                               ;return from subroutine,  (4 clocks) 
 3fe:	08 95       	ret

00000400 <Debug_Tx_Byte>:


;;=========================================Debug Tx=========================================;;
Debug_Tx_Byte:
		;write single byte to data register (Arg R24)
		STS   SRGPIOR0           , R16                    ;store R16 val,           (2 clocks)
 400:	00 93 3e 00 	sts	0x003E, r16
		STS   SRUDR0             , R24                    ;load val to UDR0,        (2 clocks)
 404:	80 93 c6 00 	sts	0x00C6, r24

00000408 <__UDRE0_CLEARED>:
		
    __UDRE0_CLEARED:
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,      (2 clocks)
 408:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x05                   ;skip if UDRE0 is set,    (2 clocks)
 40c:	05 ff       	sbrs	r16, 5
		RJMP  __UDRE0_CLEARED                             ;wait until UDRE0 is set, (2 clocks)
 40e:	fc cf       	rjmp	.-8      	; 0x408 <__UDRE0_CLEARED>
		LDS   R16                , SRGPIOR0               ;restore R16 val,         (2 clocks)
 410:	00 91 3e 00 	lds	r16, 0x003E
        RET                                               ;return from subroutine,  (4 clocks) 
 414:	08 95       	ret

00000416 <Debug_Tx_Byte_Conf>:


;;=========================================Debug Tx=========================================;;
Debug_Tx_Byte_Conf:
        ;write single byte to data register and wait until tx is complete (Arg R24)
		STS   SRGPIOR0           , R16                    ;store R16 val,           (2 clocks)
 416:	00 93 3e 00 	sts	0x003E, r16
		STS   SRUDR0             , R24                    ;load val to UDR0,        (2 clocks)
 41a:	80 93 c6 00 	sts	0x00C6, r24

0000041e <__TXC0_CLEARED>:
		
    __TXC0_CLEARED:
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,      (2 clocks)
 41e:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x06                   ;skip if TXC0 is set,     (2 clocks)
 422:	06 ff       	sbrs	r16, 6
		RJMP  __TXC0_CLEARED                              ;wait until TXC0 is set,  (2 clocks)
 424:	fc cf       	rjmp	.-8      	; 0x41e <__TXC0_CLEARED>
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,      (2 clocks)
 426:	00 91 c0 00 	lds	r16, 0x00C0
		ORI   R16                , (1<<6)                 ;mask bit 6,              (1 clock )
 42a:	00 64       	ori	r16, 0x40	; 64
		STS   SRUCSR0A           , R16                    ;load val to UCSR0B,      (2 clocks)
 42c:	00 93 c0 00 	sts	0x00C0, r16
		LDS   R16                , SRGPIOR0               ;restore R16 val,         (2 clocks)
 430:	00 91 3e 00 	lds	r16, 0x003E
        RET                                               ;return from subroutine,  (4 clocks) 
 434:	08 95       	ret

00000436 <Debug_Tx_Word_Conf>:

;;======================================Debug Tx Word=======================================;;
Debug_Tx_Word_Conf:
        ;write 2 bytes to data register and wait until tx is complete (Arg R24, R25)
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 436:	0e 94 0b 02 	call	0x416	; 0x416 <Debug_Tx_Byte_Conf>
		MOV   R24                , R25                    ;copy R25 to R24          (1 clock )
 43a:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 43c:	0e 94 0b 02 	call	0x416	; 0x416 <Debug_Tx_Byte_Conf>
        RET                                               ;return from subroutine,  (4 clocks) 
 440:	08 95       	ret

00000442 <Debug_Tx_DWord_Conf>:

;;=====================================Debug Tx DWord=======================================;;
Debug_Tx_DWord_Conf:
        ;write 4 bytes to data register and wait until tx is complete (Arg R22-R25)
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks)
 442:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R22                    ;copy R22 to R24          (1 clock )
 446:	86 2f       	mov	r24, r22
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 448:	0e 94 0b 02 	call	0x416	; 0x416 <Debug_Tx_Byte_Conf>
		MOV   R24                , R23                    ;copy R23 to R24          (1 clock )
 44c:	87 2f       	mov	r24, r23
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 44e:	0e 94 0b 02 	call	0x416	; 0x416 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24              (2 clocks)
 452:	80 91 4a 00 	lds	r24, 0x004A
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 456:	0e 94 0b 02 	call	0x416	; 0x416 <Debug_Tx_Byte_Conf>
		MOV   R24                , R25                    ;copy R22 to R24          (1 clock )
 45a:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 45c:	0e 94 0b 02 	call	0x416	; 0x416 <Debug_Tx_Byte_Conf>
        RET                                               ;return from subroutine,  (4 clocks) 
 460:	08 95       	ret

00000462 <Debug_Tx_From_RAM>:


;;===================================Debug Tx From RAM======================================;;
Debug_Tx_From_RAM:
        ;print data from RAM address (Arg R24-R25)
		MOV   R16                , R30                    ;copy R30 to R16          (1 clock )
 462:	0e 2f       	mov	r16, r30
		MOV   R17                , R31                    ;copy R31 to R17          (1 clock )
 464:	1f 2f       	mov	r17, r31
		MOV   R18                , R24                    ;copy R24 to R18          (1 clock )
 466:	28 2f       	mov	r18, r24
		MOV   R30                , R24                    ;copy R22 to R24          (1 clock )
 468:	e8 2f       	mov	r30, r24
		MOV   R31                , R25                    ;copy R22 to R24          (1 clock )
 46a:	f9 2f       	mov	r31, r25
		LD    R24                , Z                      ;load val to R24          (2 clocks)
 46c:	80 81       	ld	r24, Z
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 46e:	0e 94 0b 02 	call	0x416	; 0x416 <Debug_Tx_Byte_Conf>
		MOV   R30                , R16                    ;copy R16 to R30          (1 clock )
 472:	e0 2f       	mov	r30, r16
		MOV   R31                , R17                    ;copy R17 to R31          (1 clock )
 474:	f1 2f       	mov	r31, r17
		MOV   R24                , R18                    ;copy R18 to R24          (1 clock )
 476:	82 2f       	mov	r24, r18
        RET                                               ;return from subroutine,  (4 clocks) 
 478:	08 95       	ret

0000047a <Debug_Tx_RAM_Area>:

;;===================================Debug Tx RAM Area======================================;;
Debug_Tx_RAM_Area:
        ;print data from RAM address (arguments R24:R25, R22)
	__DUMP_BYTES:
	    CALL  Debug_Tx_From_RAM                           ;send via uart from ram
 47a:	0e 94 31 02 	call	0x462	; 0x462 <Debug_Tx_From_RAM>
		SUBI  R24                , 0x01                   ;decrement from LSByte
 47e:	81 50       	subi	r24, 0x01	; 1
        SBCI  R25                , 0x00                   ;decrement if carry
 480:	90 40       	sbci	r25, 0x00	; 0
		SUBI  R22                , 0x01                   ;decrement
 482:	61 50       	subi	r22, 0x01	; 1
		BRNE  __DUMP_BYTES
 484:	d1 f7       	brne	.-12     	; 0x47a <Debug_Tx_RAM_Area>
        RET                                               ;return from subroutine,  (4 clocks) 
 486:	08 95       	ret

00000488 <_exit>:
 488:	f8 94       	cli

0000048a <__stop_program>:
 48a:	ff cf       	rjmp	.-2      	; 0x48a <__stop_program>
