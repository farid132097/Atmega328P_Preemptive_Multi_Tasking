
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dd4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000055a  00800100  00800100  00000e48  2**0
                  ALLOC
  2 .stab         00000d08  00000000  00000000  00000e48  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000006e  00000000  00000000  00001b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00001bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000bd  00000000  00000000  00001bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001a9  00000000  00000000  00001cbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000ba  00000000  00000000  00001e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ca  00000000  00000000  00001f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  000023e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000115  00000000  00000000  000024a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 33 02 	jmp	0x466	; 0x466 <__vector_6>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	00 00       	nop
  70:	00 00       	nop
  72:	00 00       	nop
  74:	f8 c1       	rjmp	.+1008   	; 0x466 <__vector_6>
  76:	00 00       	nop
  78:	00 00       	nop
  7a:	00 00       	nop
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 00       	nop
  82:	00 00       	nop
  84:	00 00       	nop
  86:	00 00       	nop
  88:	0a c0       	rjmp	.+20     	; 0x9e <__bad_interrupt>

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61
  96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  9a:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:



int main(void) {
    
	Kernel_Init();
  a2:	0e 94 84 04 	call	0x908	; 0x908 <Kernel_Init>

	Kernel_Task_Create(Tasks_Task1,  5);
  a6:	83 e0       	ldi	r24, 0x03	; 3
  a8:	92 e0       	ldi	r25, 0x02	; 2
  aa:	65 e0       	ldi	r22, 0x05	; 5
  ac:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task2,  1);
  b0:	80 ed       	ldi	r24, 0xD0	; 208
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	61 e0       	ldi	r22, 0x01	; 1
  b6:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task3,  2);
  ba:	8d e9       	ldi	r24, 0x9D	; 157
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	62 e0       	ldi	r22, 0x02	; 2
  c0:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task4,  3);
  c4:	8a e6       	ldi	r24, 0x6A	; 106
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	63 e0       	ldi	r22, 0x03	; 3
  ca:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task5,  0);
  ce:	87 e3       	ldi	r24, 0x37	; 55
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task6,  6);
  d8:	8a e0       	ldi	r24, 0x0A	; 10
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	66 e0       	ldi	r22, 0x06	; 6
  de:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task7,  4);
  e2:	8d ed       	ldi	r24, 0xDD	; 221
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	64 e0       	ldi	r22, 0x04	; 4
  e8:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task8,  8);
  ec:	80 eb       	ldi	r24, 0xB0	; 176
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	68 e0       	ldi	r22, 0x08	; 8
  f2:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task9,  7);
  f6:	83 e8       	ldi	r24, 0x83	; 131
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	67 e0       	ldi	r22, 0x07	; 7
  fc:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Kernel_Task_Create>
	
	Kernel_Start_Tasks();
 100:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <Kernel_Start_Tasks>
 104:	ff cf       	rjmp	.-2      	; 0x104 <SRUDR0+0x3e>

00000106 <Tasks_Task9>:
  }
}

void Tasks_Task9(void){
  
  Debug_Init(0);
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 8a 06 	call	0xd14	; 0xd14 <Debug_Init>
  
  while(1){

    Kernel_Task_Constant_Latency(90);
 10e:	8a e5       	ldi	r24, 0x5A	; 90
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 89 05 	call	0xb12	; 0xb12 <Kernel_Task_Constant_Latency>
    
	  Debug_Tx_Byte(9);
 116:	89 e0       	ldi	r24, 0x09	; 9
 118:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <Kernel_Task_Sleep_Time_Get>
 122:	0e 94 a3 06 	call	0xd46	; 0xd46 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <Kernel_Task_Status_Get>
 12c:	80 5e       	subi	r24, 0xE0	; 224
 12e:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(9));
 132:	89 e0       	ldi	r24, 0x09	; 9
 134:	0e 94 60 06 	call	0xcc0	; 0xcc0 <Kernel_Task_Sleep_Time_Get>
 138:	0e 94 a3 06 	call	0xd46	; 0xd46 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(9));
 13c:	89 e0       	ldi	r24, 0x09	; 9
 13e:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <Kernel_Task_Status_Get>
 142:	80 5e       	subi	r24, 0xE0	; 224
 144:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 148:	0e 94 84 06 	call	0xd08	; 0xd08 <Kernel_Abs_High_Prio_Task_ID_Get>
 14c:	80 5f       	subi	r24, 0xF0	; 240
 14e:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 152:	0e 94 7d 06 	call	0xcfa	; 0xcfa <Kernel_Lowest_Prio_Get>
 156:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    
    //Kernel_Task_Sleep(90);
    Kernel_Task_Constant_Latency_Sleep();
 15a:	0e 94 9f 05 	call	0xb3e	; 0xb3e <Kernel_Task_Constant_Latency_Sleep>
 15e:	d7 cf       	rjmp	.-82     	; 0x10e <Tasks_Task9+0x8>

00000160 <Tasks_Task8>:
  }
}

void Tasks_Task8(void){
  
  Debug_Init(0);
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 8a 06 	call	0xd14	; 0xd14 <Debug_Init>
  
  while(1){

    Kernel_Task_Constant_Latency(80);
 168:	80 e5       	ldi	r24, 0x50	; 80
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 89 05 	call	0xb12	; 0xb12 <Kernel_Task_Constant_Latency>
    
	  Debug_Tx_Byte(8);
 170:	88 e0       	ldi	r24, 0x08	; 8
 172:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	0e 94 60 06 	call	0xcc0	; 0xcc0 <Kernel_Task_Sleep_Time_Get>
 17c:	0e 94 a3 06 	call	0xd46	; 0xd46 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <Kernel_Task_Status_Get>
 186:	80 5e       	subi	r24, 0xE0	; 224
 188:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(8));
 18c:	88 e0       	ldi	r24, 0x08	; 8
 18e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <Kernel_Task_Sleep_Time_Get>
 192:	0e 94 a3 06 	call	0xd46	; 0xd46 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(8));
 196:	88 e0       	ldi	r24, 0x08	; 8
 198:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <Kernel_Task_Status_Get>
 19c:	80 5e       	subi	r24, 0xE0	; 224
 19e:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 1a2:	0e 94 84 06 	call	0xd08	; 0xd08 <Kernel_Abs_High_Prio_Task_ID_Get>
 1a6:	80 5f       	subi	r24, 0xF0	; 240
 1a8:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 1ac:	0e 94 7d 06 	call	0xcfa	; 0xcfa <Kernel_Lowest_Prio_Get>
 1b0:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    
    //Kernel_Task_Sleep(80);
    Kernel_Task_Constant_Latency_Sleep();
 1b4:	0e 94 9f 05 	call	0xb3e	; 0xb3e <Kernel_Task_Constant_Latency_Sleep>
 1b8:	d7 cf       	rjmp	.-82     	; 0x168 <Tasks_Task8+0x8>

000001ba <Tasks_Task7>:
  }
}

void Tasks_Task7(void){
  
  Debug_Init(0);
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 8a 06 	call	0xd14	; 0xd14 <Debug_Init>
  
  while(1){

    Kernel_Task_Constant_Latency(70);
 1c2:	86 e4       	ldi	r24, 0x46	; 70
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 89 05 	call	0xb12	; 0xb12 <Kernel_Task_Constant_Latency>
    
	  Debug_Tx_Byte(7);
 1ca:	87 e0       	ldi	r24, 0x07	; 7
 1cc:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	0e 94 60 06 	call	0xcc0	; 0xcc0 <Kernel_Task_Sleep_Time_Get>
 1d6:	0e 94 a3 06 	call	0xd46	; 0xd46 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <Kernel_Task_Status_Get>
 1e0:	80 5e       	subi	r24, 0xE0	; 224
 1e2:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(7));
 1e6:	87 e0       	ldi	r24, 0x07	; 7
 1e8:	0e 94 60 06 	call	0xcc0	; 0xcc0 <Kernel_Task_Sleep_Time_Get>
 1ec:	0e 94 a3 06 	call	0xd46	; 0xd46 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(7));
 1f0:	87 e0       	ldi	r24, 0x07	; 7
 1f2:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <Kernel_Task_Status_Get>
 1f6:	80 5e       	subi	r24, 0xE0	; 224
 1f8:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 1fc:	0e 94 84 06 	call	0xd08	; 0xd08 <Kernel_Abs_High_Prio_Task_ID_Get>
 200:	80 5f       	subi	r24, 0xF0	; 240
 202:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 206:	0e 94 7d 06 	call	0xcfa	; 0xcfa <Kernel_Lowest_Prio_Get>
 20a:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    
    //Kernel_Task_Sleep(70);
    Kernel_Task_Constant_Latency_Sleep();
 20e:	0e 94 9f 05 	call	0xb3e	; 0xb3e <Kernel_Task_Constant_Latency_Sleep>
 212:	d7 cf       	rjmp	.-82     	; 0x1c2 <Tasks_Task7+0x8>

00000214 <Tasks_Task6>:
  }
}

void Tasks_Task6(void){
  
  Debug_Init(0);
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 8a 06 	call	0xd14	; 0xd14 <Debug_Init>
  
  while(1){

    Kernel_Task_Constant_Latency(60);
 21c:	8c e3       	ldi	r24, 0x3C	; 60
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 89 05 	call	0xb12	; 0xb12 <Kernel_Task_Constant_Latency>
    
    Debug_Tx_Byte(6);
 224:	86 e0       	ldi	r24, 0x06	; 6
 226:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	0e 94 60 06 	call	0xcc0	; 0xcc0 <Kernel_Task_Sleep_Time_Get>
 230:	0e 94 a3 06 	call	0xd46	; 0xd46 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <Kernel_Task_Status_Get>
 23a:	80 5e       	subi	r24, 0xE0	; 224
 23c:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(6));
 240:	86 e0       	ldi	r24, 0x06	; 6
 242:	0e 94 60 06 	call	0xcc0	; 0xcc0 <Kernel_Task_Sleep_Time_Get>
 246:	0e 94 a3 06 	call	0xd46	; 0xd46 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(6));
 24a:	86 e0       	ldi	r24, 0x06	; 6
 24c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <Kernel_Task_Status_Get>
 250:	80 5e       	subi	r24, 0xE0	; 224
 252:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 256:	0e 94 84 06 	call	0xd08	; 0xd08 <Kernel_Abs_High_Prio_Task_ID_Get>
 25a:	80 5f       	subi	r24, 0xF0	; 240
 25c:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 260:	0e 94 7d 06 	call	0xcfa	; 0xcfa <Kernel_Lowest_Prio_Get>
 264:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    
    //Kernel_Task_Sleep(60);
    Kernel_Task_Constant_Latency_Sleep();
 268:	0e 94 9f 05 	call	0xb3e	; 0xb3e <Kernel_Task_Constant_Latency_Sleep>
 26c:	d7 cf       	rjmp	.-82     	; 0x21c <Tasks_Task6+0x8>

0000026e <Tasks_Task5>:
    Kernel_Task_Constant_Latency_Sleep();
	
  }
}

void Tasks_Task5(void){
 26e:	1f 93       	push	r17
  
  DDRC |= (1<<5);
 270:	3d 9a       	sbi	0x07, 5	; 7

  Debug_Init(0);
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 8a 06 	call	0xd14	; 0xd14 <Debug_Init>
  
  while(1){

    Kernel_Task_Constant_Latency(50);
    
    PORTC ^= (1<<5);
 27a:	10 e2       	ldi	r17, 0x20	; 32

  Debug_Init(0);
  
  while(1){

    Kernel_Task_Constant_Latency(50);
 27c:	82 e3       	ldi	r24, 0x32	; 50
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 89 05 	call	0xb12	; 0xb12 <Kernel_Task_Constant_Latency>
    
    PORTC ^= (1<<5);
 284:	88 b1       	in	r24, 0x08	; 8
 286:	81 27       	eor	r24, r17
 288:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(5);
 28a:	85 e0       	ldi	r24, 0x05	; 5
 28c:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	0e 94 60 06 	call	0xcc0	; 0xcc0 <Kernel_Task_Sleep_Time_Get>
 296:	0e 94 a3 06 	call	0xd46	; 0xd46 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <Kernel_Task_Status_Get>
 2a0:	80 5e       	subi	r24, 0xE0	; 224
 2a2:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(5));
 2a6:	85 e0       	ldi	r24, 0x05	; 5
 2a8:	0e 94 60 06 	call	0xcc0	; 0xcc0 <Kernel_Task_Sleep_Time_Get>
 2ac:	0e 94 a3 06 	call	0xd46	; 0xd46 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(5));
 2b0:	85 e0       	ldi	r24, 0x05	; 5
 2b2:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <Kernel_Task_Status_Get>
 2b6:	80 5e       	subi	r24, 0xE0	; 224
 2b8:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 2bc:	0e 94 84 06 	call	0xd08	; 0xd08 <Kernel_Abs_High_Prio_Task_ID_Get>
 2c0:	80 5f       	subi	r24, 0xF0	; 240
 2c2:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 2c6:	0e 94 7d 06 	call	0xcfa	; 0xcfa <Kernel_Lowest_Prio_Get>
 2ca:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    
    //Kernel_Task_Sleep(50);
    Kernel_Task_Constant_Latency_Sleep();
 2ce:	0e 94 9f 05 	call	0xb3e	; 0xb3e <Kernel_Task_Constant_Latency_Sleep>
 2d2:	d4 cf       	rjmp	.-88     	; 0x27c <Tasks_Task5+0xe>

000002d4 <Tasks_Task4>:
    Kernel_Task_Constant_Latency_Sleep();
	
  }
}

void Tasks_Task4(void){
 2d4:	1f 93       	push	r17
  
  DDRC |= (1<<4);
 2d6:	3c 9a       	sbi	0x07, 4	; 7

  Debug_Init(0);
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 8a 06 	call	0xd14	; 0xd14 <Debug_Init>
  
  while(1){
    
    Kernel_Task_Constant_Latency(40);

    PORTC ^= (1<<4);
 2e0:	10 e1       	ldi	r17, 0x10	; 16

  Debug_Init(0);
  
  while(1){
    
    Kernel_Task_Constant_Latency(40);
 2e2:	88 e2       	ldi	r24, 0x28	; 40
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 89 05 	call	0xb12	; 0xb12 <Kernel_Task_Constant_Latency>

    PORTC ^= (1<<4);
 2ea:	88 b1       	in	r24, 0x08	; 8
 2ec:	81 27       	eor	r24, r17
 2ee:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(4);
 2f0:	84 e0       	ldi	r24, 0x04	; 4
 2f2:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	0e 94 60 06 	call	0xcc0	; 0xcc0 <Kernel_Task_Sleep_Time_Get>
 2fc:	0e 94 a3 06 	call	0xd46	; 0xd46 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <Kernel_Task_Status_Get>
 306:	80 5e       	subi	r24, 0xE0	; 224
 308:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(4));
 30c:	84 e0       	ldi	r24, 0x04	; 4
 30e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <Kernel_Task_Sleep_Time_Get>
 312:	0e 94 a3 06 	call	0xd46	; 0xd46 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(4));
 316:	84 e0       	ldi	r24, 0x04	; 4
 318:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <Kernel_Task_Status_Get>
 31c:	80 5e       	subi	r24, 0xE0	; 224
 31e:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 322:	0e 94 84 06 	call	0xd08	; 0xd08 <Kernel_Abs_High_Prio_Task_ID_Get>
 326:	80 5f       	subi	r24, 0xF0	; 240
 328:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 32c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <Kernel_Lowest_Prio_Get>
 330:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    
    //Kernel_Task_Sleep(40);
    Kernel_Task_Constant_Latency_Sleep();
 334:	0e 94 9f 05 	call	0xb3e	; 0xb3e <Kernel_Task_Constant_Latency_Sleep>
 338:	d4 cf       	rjmp	.-88     	; 0x2e2 <Tasks_Task4+0xe>

0000033a <Tasks_Task3>:
    Kernel_Task_Constant_Latency_Sleep();
	
  }
}

void Tasks_Task3(void){
 33a:	1f 93       	push	r17
  
  DDRC |= (1<<3);
 33c:	3b 9a       	sbi	0x07, 3	; 7

  Debug_Init(0);
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 8a 06 	call	0xd14	; 0xd14 <Debug_Init>
  
  while(1){
    
    Kernel_Task_Constant_Latency(30);

    PORTC ^= (1<<3);
 346:	18 e0       	ldi	r17, 0x08	; 8

  Debug_Init(0);
  
  while(1){
    
    Kernel_Task_Constant_Latency(30);
 348:	8e e1       	ldi	r24, 0x1E	; 30
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 89 05 	call	0xb12	; 0xb12 <Kernel_Task_Constant_Latency>

    PORTC ^= (1<<3);
 350:	88 b1       	in	r24, 0x08	; 8
 352:	81 27       	eor	r24, r17
 354:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(3);
 356:	83 e0       	ldi	r24, 0x03	; 3
 358:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <Kernel_Task_Sleep_Time_Get>
 362:	0e 94 a3 06 	call	0xd46	; 0xd46 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <Kernel_Task_Status_Get>
 36c:	80 5e       	subi	r24, 0xE0	; 224
 36e:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(3));
 372:	83 e0       	ldi	r24, 0x03	; 3
 374:	0e 94 60 06 	call	0xcc0	; 0xcc0 <Kernel_Task_Sleep_Time_Get>
 378:	0e 94 a3 06 	call	0xd46	; 0xd46 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(3));
 37c:	83 e0       	ldi	r24, 0x03	; 3
 37e:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <Kernel_Task_Status_Get>
 382:	80 5e       	subi	r24, 0xE0	; 224
 384:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 388:	0e 94 84 06 	call	0xd08	; 0xd08 <Kernel_Abs_High_Prio_Task_ID_Get>
 38c:	80 5f       	subi	r24, 0xF0	; 240
 38e:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 392:	0e 94 7d 06 	call	0xcfa	; 0xcfa <Kernel_Lowest_Prio_Get>
 396:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    
    //Kernel_Task_Sleep(30);
    Kernel_Task_Constant_Latency_Sleep();
 39a:	0e 94 9f 05 	call	0xb3e	; 0xb3e <Kernel_Task_Constant_Latency_Sleep>
 39e:	d4 cf       	rjmp	.-88     	; 0x348 <Tasks_Task3+0xe>

000003a0 <Tasks_Task2>:
    Kernel_Task_Constant_Latency_Sleep();
    
  }
}

void Tasks_Task2(void){
 3a0:	1f 93       	push	r17
  
  DDRC |= (1<<2);
 3a2:	3a 9a       	sbi	0x07, 2	; 7

  Debug_Init(0);
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 8a 06 	call	0xd14	; 0xd14 <Debug_Init>
  
  while(1){
    
    Kernel_Task_Constant_Latency(20);

    PORTC ^= (1<<2);
 3ac:	14 e0       	ldi	r17, 0x04	; 4

  Debug_Init(0);
  
  while(1){
    
    Kernel_Task_Constant_Latency(20);
 3ae:	84 e1       	ldi	r24, 0x14	; 20
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	0e 94 89 05 	call	0xb12	; 0xb12 <Kernel_Task_Constant_Latency>

    PORTC ^= (1<<2);
 3b6:	88 b1       	in	r24, 0x08	; 8
 3b8:	81 27       	eor	r24, r17
 3ba:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(2);
 3bc:	82 e0       	ldi	r24, 0x02	; 2
 3be:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	0e 94 60 06 	call	0xcc0	; 0xcc0 <Kernel_Task_Sleep_Time_Get>
 3c8:	0e 94 a3 06 	call	0xd46	; 0xd46 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <Kernel_Task_Status_Get>
 3d2:	80 5e       	subi	r24, 0xE0	; 224
 3d4:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(2));
 3d8:	82 e0       	ldi	r24, 0x02	; 2
 3da:	0e 94 60 06 	call	0xcc0	; 0xcc0 <Kernel_Task_Sleep_Time_Get>
 3de:	0e 94 a3 06 	call	0xd46	; 0xd46 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(2));
 3e2:	82 e0       	ldi	r24, 0x02	; 2
 3e4:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <Kernel_Task_Status_Get>
 3e8:	80 5e       	subi	r24, 0xE0	; 224
 3ea:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 3ee:	0e 94 84 06 	call	0xd08	; 0xd08 <Kernel_Abs_High_Prio_Task_ID_Get>
 3f2:	80 5f       	subi	r24, 0xF0	; 240
 3f4:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 3f8:	0e 94 7d 06 	call	0xcfa	; 0xcfa <Kernel_Lowest_Prio_Get>
 3fc:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>

    //Kernel_Task_Sleep(20);
    Kernel_Task_Constant_Latency_Sleep();
 400:	0e 94 9f 05 	call	0xb3e	; 0xb3e <Kernel_Task_Constant_Latency_Sleep>
 404:	d4 cf       	rjmp	.-88     	; 0x3ae <Tasks_Task2+0xe>

00000406 <Tasks_Task1>:
#include <util/delay.h>
#include "kernel.h"
#include "tasks.h"
#include "debug.h"

void Tasks_Task1(void){
 406:	0f 93       	push	r16
 408:	1f 93       	push	r17
  
  DDRC |= (1<<1);
 40a:	39 9a       	sbi	0x07, 1	; 7

  Debug_Init(0);
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	0e 94 8a 06 	call	0xd14	; 0xd14 <Debug_Init>
  
  while(1){
    
    Kernel_Task_Constant_Latency(10);

    PORTC ^= (1<<1);
 414:	02 e0       	ldi	r16, 0x02	; 2

  Debug_Init(0);
  
  while(1){
    
    Kernel_Task_Constant_Latency(10);
 416:	8a e0       	ldi	r24, 0x0A	; 10
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 89 05 	call	0xb12	; 0xb12 <Kernel_Task_Constant_Latency>

    PORTC ^= (1<<1);
 41e:	88 b1       	in	r24, 0x08	; 8
 420:	80 27       	eor	r24, r16
 422:	88 b9       	out	0x08, r24	; 8
    

	  Debug_Tx_Byte(1);
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	0e 94 60 06 	call	0xcc0	; 0xcc0 <Kernel_Task_Sleep_Time_Get>
 430:	0e 94 a3 06 	call	0xd46	; 0xd46 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <Kernel_Task_Status_Get>
 43a:	80 5e       	subi	r24, 0xE0	; 224
 43c:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 440:	0e 94 84 06 	call	0xd08	; 0xd08 <Kernel_Abs_High_Prio_Task_ID_Get>
 444:	80 5f       	subi	r24, 0xF0	; 240
 446:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 44a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <Kernel_Lowest_Prio_Get>
 44e:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
 452:	10 e0       	ldi	r17, 0x00	; 0
    for(uint8_t i=0;i<200;i++){
      Debug_Tx_Byte(i);
 454:	81 2f       	mov	r24, r17
 456:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
	  Debug_Tx_Byte(1);
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
    for(uint8_t i=0;i<200;i++){
 45a:	1f 5f       	subi	r17, 0xFF	; 255
 45c:	18 3c       	cpi	r17, 0xC8	; 200
 45e:	d1 f7       	brne	.-12     	; 0x454 <Tasks_Task1+0x4e>
      Debug_Tx_Byte(i);
    }

    //Kernel_Task_Sleep(10);
    Kernel_Task_Constant_Latency_Sleep();
 460:	0e 94 9f 05 	call	0xb3e	; 0xb3e <Kernel_Task_Constant_Latency_Sleep>
 464:	d8 cf       	rjmp	.-80     	; 0x416 <Tasks_Task1+0x10>

00000466 <__vector_6>:
		RETI                                              ;return from interrupt  (  4 clocks) 
#endif                                                                                         
#ifdef  KER_WDT_AS_TICK_SRC                                                                    
.global  __vector_6                                                                            
    __vector_6:                                           ;total 40.00uS @8MHz    (344 clocks) 
	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 466:	5d 9a       	sbi	0x0b, 5	; 11
		KER_EXIT_SLEEP                                    ;exit sleep if enabled  (  5 clocks) 
 468:	20 91 53 00 	lds	r18, 0x0053
 46c:	2e 7f       	andi	r18, 0xFE	; 254
 46e:	20 93 53 00 	sts	0x0053, r18
        KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 472:	0f 92       	push	r0
 474:	0f b6       	in	r0, 0x3f	; 63
 476:	0f 92       	push	r0
 478:	1f 92       	push	r1
 47a:	11 24       	eor	r1, r1
 47c:	2f 92       	push	r2
 47e:	3f 92       	push	r3
 480:	4f 92       	push	r4
 482:	5f 92       	push	r5
 484:	6f 92       	push	r6
 486:	7f 92       	push	r7
 488:	8f 92       	push	r8
 48a:	9f 92       	push	r9
 48c:	af 92       	push	r10
 48e:	bf 92       	push	r11
 490:	cf 92       	push	r12
 492:	df 92       	push	r13
 494:	ef 92       	push	r14
 496:	ff 92       	push	r15
 498:	0f 93       	push	r16
 49a:	1f 93       	push	r17
 49c:	2f 93       	push	r18
 49e:	3f 93       	push	r19
 4a0:	4f 93       	push	r20
 4a2:	5f 93       	push	r21
 4a4:	6f 93       	push	r22
 4a6:	7f 93       	push	r23
 4a8:	8f 93       	push	r24
 4aa:	9f 93       	push	r25
 4ac:	af 93       	push	r26
 4ae:	bf 93       	push	r27
 4b0:	cf 93       	push	r28
 4b2:	df 93       	push	r29
 4b4:	ef 93       	push	r30
 4b6:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 4b8:	e0 e1       	ldi	r30, 0x10	; 16
 4ba:	f1 e0       	ldi	r31, 0x01	; 1
 4bc:	20 91 07 01 	lds	r18, 0x0107
 4c0:	22 0f       	add	r18, r18
 4c2:	e2 0f       	add	r30, r18
 4c4:	20 e0       	ldi	r18, 0x00	; 0
 4c6:	f2 1f       	adc	r31, r18
 4c8:	2d b7       	in	r18, 0x3d	; 61
 4ca:	3e b7       	in	r19, 0x3e	; 62
 4cc:	20 83       	st	Z, r18
 4ce:	31 83       	std	Z+1, r19	; 0x01
		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 4d0:	20 91 06 01 	lds	r18, 0x0106
 4d4:	20 93 46 00 	sts	0x0046, r18
		KER_TICK_INCREMENT                                ;increment tick counter ( 26 clocks) 
 4d8:	20 91 00 01 	lds	r18, 0x0100
 4dc:	23 95       	inc	r18
 4de:	20 93 00 01 	sts	0x0100, r18
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	20 91 01 01 	lds	r18, 0x0101
 4e8:	23 1f       	adc	r18, r19
 4ea:	20 93 01 01 	sts	0x0101, r18
 4ee:	20 91 02 01 	lds	r18, 0x0102
 4f2:	23 1f       	adc	r18, r19
 4f4:	20 93 02 01 	sts	0x0102, r18
 4f8:	20 91 03 01 	lds	r18, 0x0103
 4fc:	23 1f       	adc	r18, r19
 4fe:	20 93 03 01 	sts	0x0103, r18
 502:	20 91 04 01 	lds	r18, 0x0104
 506:	23 1f       	adc	r18, r19
 508:	20 93 04 01 	sts	0x0104, r18
		LDI    R24               , SCH_MODE_HANDLER       ;set sch mode           (  1 clock ) 
 50c:	80 e0       	ldi	r24, 0x00	; 0
		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
 50e:	2f ef       	ldi	r18, 0xFF	; 255
 510:	20 93 09 01 	sts	0x0109, r18
 514:	20 e0       	ldi	r18, 0x00	; 0
 516:	20 93 0a 01 	sts	0x010A, r18
 51a:	58 2f       	mov	r21, r24

0000051c <_KER_SCH_LOOP9>:
 51c:	20 93 07 01 	sts	0x0107, r18
 520:	85 2f       	mov	r24, r21
 522:	e6 e4       	ldi	r30, 0x46	; 70
 524:	f1 e0       	ldi	r31, 0x01	; 1
 526:	20 91 07 01 	lds	r18, 0x0107
 52a:	22 0f       	add	r18, r18
 52c:	e2 0f       	add	r30, r18
 52e:	20 e0       	ldi	r18, 0x00	; 0
 530:	f2 1f       	adc	r31, r18
 532:	20 81       	ld	r18, Z
 534:	31 81       	ldd	r19, Z+1	; 0x01
 536:	42 2f       	mov	r20, r18
 538:	43 2b       	or	r20, r19
 53a:	59 f0       	breq	.+22     	; 0x552 <_VAL_NULL10>
 53c:	81 30       	cpi	r24, 0x01	; 1
 53e:	99 f0       	breq	.+38     	; 0x566 <_VAL_NOT_NULL10>
 540:	41 e0       	ldi	r20, 0x01	; 1
 542:	24 1b       	sub	r18, r20
 544:	40 e0       	ldi	r20, 0x00	; 0
 546:	34 0b       	sbc	r19, r20
 548:	20 83       	st	Z, r18
 54a:	31 83       	std	Z+1, r19	; 0x01
 54c:	42 2f       	mov	r20, r18
 54e:	43 2b       	or	r20, r19
 550:	51 f4       	brne	.+20     	; 0x566 <_VAL_NOT_NULL10>

00000552 <_VAL_NULL10>:
 552:	e2 e3       	ldi	r30, 0x32	; 50
 554:	f1 e0       	ldi	r31, 0x01	; 1
 556:	20 91 07 01 	lds	r18, 0x0107
 55a:	e2 0f       	add	r30, r18
 55c:	20 e0       	ldi	r18, 0x00	; 0
 55e:	f2 1f       	adc	r31, r18
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	80 83       	st	Z, r24
 564:	08 c0       	rjmp	.+16     	; 0x576 <_EXIT_SLP_TIME10>

00000566 <_VAL_NOT_NULL10>:
 566:	e2 e3       	ldi	r30, 0x32	; 50
 568:	f1 e0       	ldi	r31, 0x01	; 1
 56a:	20 91 07 01 	lds	r18, 0x0107
 56e:	e2 0f       	add	r30, r18
 570:	20 e0       	ldi	r18, 0x00	; 0
 572:	f2 1f       	adc	r31, r18
 574:	80 81       	ld	r24, Z

00000576 <_EXIT_SLP_TIME10>:
 576:	81 30       	cpi	r24, 0x01	; 1
 578:	19 f0       	breq	.+6      	; 0x580 <_KER_CALC_PRIO9>
 57a:	84 30       	cpi	r24, 0x04	; 4
 57c:	09 f0       	breq	.+2      	; 0x580 <_KER_CALC_PRIO9>
 57e:	12 c0       	rjmp	.+36     	; 0x5a4 <_KER_SCH_NEXT9>

00000580 <_KER_CALC_PRIO9>:
 580:	ec e3       	ldi	r30, 0x3C	; 60
 582:	f1 e0       	ldi	r31, 0x01	; 1
 584:	20 e0       	ldi	r18, 0x00	; 0
 586:	80 91 07 01 	lds	r24, 0x0107
 58a:	e8 0f       	add	r30, r24
 58c:	f2 1f       	adc	r31, r18
 58e:	80 81       	ld	r24, Z
 590:	20 91 09 01 	lds	r18, 0x0109
 594:	82 17       	cp	r24, r18
 596:	30 f4       	brcc	.+12     	; 0x5a4 <_KER_SCH_NEXT9>
 598:	80 93 09 01 	sts	0x0109, r24
 59c:	20 91 07 01 	lds	r18, 0x0107
 5a0:	20 93 0a 01 	sts	0x010A, r18

000005a4 <_KER_SCH_NEXT9>:
 5a4:	20 91 07 01 	lds	r18, 0x0107
 5a8:	23 95       	inc	r18
 5aa:	30 91 08 01 	lds	r19, 0x0108
 5ae:	23 17       	cp	r18, r19
 5b0:	08 f4       	brcc	.+2      	; 0x5b4 <_KER_SCH_EXIT9>
 5b2:	b4 cf       	rjmp	.-152    	; 0x51c <_KER_SCH_LOOP9>

000005b4 <_KER_SCH_EXIT9>:
 5b4:	20 91 0a 01 	lds	r18, 0x010A
 5b8:	20 93 07 01 	sts	0x0107, r18
		KER_CPU_USAGE                                     ;calc cpu usage         ( 26 clocks) 
 5bc:	20 91 07 01 	lds	r18, 0x0107
 5c0:	22 23       	and	r18, r18
 5c2:	29 f0       	breq	.+10     	; 0x5ce <_KER_USG_TICK15>
 5c4:	20 91 0c 01 	lds	r18, 0x010C
 5c8:	23 95       	inc	r18
 5ca:	20 93 0c 01 	sts	0x010C, r18

000005ce <_KER_USG_TICK15>:
 5ce:	20 91 0b 01 	lds	r18, 0x010B
 5d2:	23 95       	inc	r18
 5d4:	24 36       	cpi	r18, 0x64	; 100
 5d6:	40 f0       	brcs	.+16     	; 0x5e8 <_KER_USG_UTC_SV15>
 5d8:	20 e0       	ldi	r18, 0x00	; 0
 5da:	30 91 0c 01 	lds	r19, 0x010C
 5de:	30 93 0d 01 	sts	0x010D, r19
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	30 93 0c 01 	sts	0x010C, r19

000005e8 <_KER_USG_UTC_SV15>:
 5e8:	20 93 0b 01 	sts	0x010B, r18
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 5ec:	e0 e1       	ldi	r30, 0x10	; 16
 5ee:	f1 e0       	ldi	r31, 0x01	; 1
 5f0:	20 91 07 01 	lds	r18, 0x0107
 5f4:	22 0f       	add	r18, r18
 5f6:	e2 0f       	add	r30, r18
 5f8:	20 e0       	ldi	r18, 0x00	; 0
 5fa:	f2 1f       	adc	r31, r18
 5fc:	20 81       	ld	r18, Z
 5fe:	31 81       	ldd	r19, Z+1	; 0x01
 600:	2d bf       	out	0x3d, r18	; 61
 602:	3e bf       	out	0x3e, r19	; 62
		KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
 604:	ff 91       	pop	r31
 606:	ef 91       	pop	r30
 608:	df 91       	pop	r29
 60a:	cf 91       	pop	r28
 60c:	bf 91       	pop	r27
 60e:	af 91       	pop	r26
 610:	9f 91       	pop	r25
 612:	8f 91       	pop	r24
 614:	7f 91       	pop	r23
 616:	6f 91       	pop	r22
 618:	5f 91       	pop	r21
 61a:	4f 91       	pop	r20
 61c:	3f 91       	pop	r19
 61e:	2f 91       	pop	r18
 620:	1f 91       	pop	r17
 622:	0f 91       	pop	r16
 624:	ff 90       	pop	r15
 626:	ef 90       	pop	r14
 628:	df 90       	pop	r13
 62a:	cf 90       	pop	r12
 62c:	bf 90       	pop	r11
 62e:	af 90       	pop	r10
 630:	9f 90       	pop	r9
 632:	8f 90       	pop	r8
 634:	7f 90       	pop	r7
 636:	6f 90       	pop	r6
 638:	5f 90       	pop	r5
 63a:	4f 90       	pop	r4
 63c:	3f 90       	pop	r3
 63e:	2f 90       	pop	r2
 640:	1f 90       	pop	r1
 642:	0f 90       	pop	r0
 644:	0f be       	out	0x3f, r0	; 63
 646:	0f 90       	pop	r0
	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 648:	5d 98       	cbi	0x0b, 5	; 11
		LDS   R18                , SRWDTCSR               ;copy WDTCSR            (  2 clocks) 
 64a:	20 91 60 00 	lds	r18, 0x0060
		ORI   R18                , 0x40                   ;set WDIE               (  1 clock ) 
 64e:	20 64       	ori	r18, 0x40	; 64
		STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
 650:	20 93 60 00 	sts	0x0060, r18
		RETI                                              ;return from interrupt  (  4 clocks) 
 654:	18 95       	reti

00000656 <Kernel_SysTick_Reg_Init>:
;used registers          : R18, R19, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
;arg registers           : R24(Prescaler), R22(ReloadVal)                                      
;return registers        : None                                                                
;unsafe access registers : R18, R19, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
Kernel_SysTick_Reg_Init:                                  ;total 11.50uS @8MHz    ( 92 clocks) 
        CLI                                               ;disable global int     (  1 clock ) 
 656:	f8 94       	cli
		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 658:	5d 98       	cbi	0x0b, 5	; 11
 65a:	55 9a       	sbi	0x0a, 5	; 10
        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 65c:	a0 91 24 01 	lds	r26, 0x0124
 660:	b0 91 25 01 	lds	r27, 0x0125
 664:	2d b7       	in	r18, 0x3d	; 61
 666:	3e b7       	in	r19, 0x3e	; 62
 668:	2d 93       	st	X+, r18
 66a:	3d 93       	st	X+, r19
 66c:	ed 93       	st	X+, r30
 66e:	fd 93       	st	X+, r31
 670:	a0 93 24 01 	sts	0x0124, r26
 674:	b0 93 25 01 	sts	0x0125, r27
		;clear reg                                                                             
		LDI   R18                , 0x00                   ;set 0x00 to R18        (  1 clock ) 
 678:	20 e0       	ldi	r18, 0x00	; 0
		;clear tick counter                                                                    
		STS   KerBase+OFB_TICK0  , R18                    ;clear  KerBase[0]      (  2 clocks) 
 67a:	20 93 00 01 	sts	0x0100, r18
		STS   KerBase+OFB_TICK1  , R18                    ;clear  KerBase[1]      (  2 clocks) 
 67e:	20 93 01 01 	sts	0x0101, r18
		STS   KerBase+OFB_TICK2  , R18                    ;clear  KerBase[2]      (  2 clocks) 
 682:	20 93 02 01 	sts	0x0102, r18
		STS   KerBase+OFB_TICK3  , R18                    ;clear  KerBase[3]      (  2 clocks) 
 686:	20 93 03 01 	sts	0x0103, r18
		STS   KerBase+OFB_TICK4  , R18                    ;clear  KerBase[4]      (  2 clocks) 
 68a:	20 93 04 01 	sts	0x0104, r18
		;clear system registers                                                                
		STS   KerBase+OFB_PRS    , R18                    ;clear  KerBase[5]      (  2 clocks) 
 68e:	20 93 05 01 	sts	0x0105, r18
		STS   KerBase+OFB_RLD    , R18                    ;clear  KerBase[6]      (  2 clocks) 
 692:	20 93 06 01 	sts	0x0106, r18
		STS   KerBase+OFB_TID    , R18                    ;clear  KerBase[7]      (  2 clocks) 
 696:	20 93 07 01 	sts	0x0107, r18
		STS   KerBase+OFB_NTSK   , R18                    ;clear  KerBase[8]      (  2 clocks) 
 69a:	20 93 08 01 	sts	0x0108, r18
		STS   KerBase+OFB_LPR    , R18                    ;clear  KerBase[9]      (  2 clocks) 
 69e:	20 93 09 01 	sts	0x0109, r18
        STS   KerBase+OFB_PTID   , R18                    ;clear  KerBase[10]     (  2 clocks) 
 6a2:	20 93 0a 01 	sts	0x010A, r18
		STS   KerBase+OFB_UTC    , R18                    ;clear  KerBase[11]     (  2 clocks) 
 6a6:	20 93 0b 01 	sts	0x010B, r18
		STS   KerBase+OFB_UATC   , R18                    ;clear  KerBase[12]     (  2 clocks) 
 6aa:	20 93 0c 01 	sts	0x010C, r18
		STS   KerBase+OFB_USAGE  , R18                    ;clear  KerBase[13]     (  2 clocks) 
 6ae:	20 93 0d 01 	sts	0x010D, r18
		STS   SROCR0A            , R18                    ;clear OCR0A            (  2 clocks) 
		STS   SROCR0B            , R18                    ;clear OCR0B            (  2 clocks) 
		STS   SRTCNT0            , R18                    ;clear TCNT0            (  2 clocks) 
		#endif                                                                                 
        #ifdef KER_WDT_AS_TICK_SRC                                                             
		WDR                                               ;reset wdt              (  1 clock ) 
 6b2:	a8 95       	wdr
		LDS   R18                , SRMCUSR                ;copy MCUSR             (  1 clock ) 
 6b4:	20 91 54 00 	lds	r18, 0x0054
		ANDI  R18                , 0xFF & (0<<WDRF)       ;clear WDRF             (  1 clock ) 
 6b8:	20 70       	andi	r18, 0x00	; 0
		STS   SRMCUSR            , R18                    ;set val                (  1 clock ) 
 6ba:	20 93 54 00 	sts	0x0054, r18
		LDS   R18                , SRWDTCSR               ;copy WDTCSR            (  2 clocks) 
 6be:	20 91 60 00 	lds	r18, 0x0060
		ORI   R18                , 0x18                   ;set WDCE,WDE           (  1 clock ) 
 6c2:	28 61       	ori	r18, 0x18	; 24
		STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
 6c4:	20 93 60 00 	sts	0x0060, r18
		LDI   R18                , 0x00                   ;clear WDE              (  1 clock ) 
 6c8:	20 e0       	ldi	r18, 0x00	; 0
		STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
 6ca:	20 93 60 00 	sts	0x0060, r18
		#endif                                                                                 
		;save values for future use                                                            
		STS   KerBase+OFB_PRS    , R24                    ;KerBase[5] prescaler   (  2 clocks) 
 6ce:	80 93 05 01 	sts	0x0105, r24
		STS   KerBase+OFB_RLD    , R22                    ;KerBase[6] reload val  (  2 clocks) 
 6d2:	60 93 06 01 	sts	0x0106, r22
        KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 6d6:	a0 91 24 01 	lds	r26, 0x0124
 6da:	b0 91 25 01 	lds	r27, 0x0125
 6de:	fe 91       	ld	r31, -X
 6e0:	ee 91       	ld	r30, -X
 6e2:	3e 91       	ld	r19, -X
 6e4:	2e 91       	ld	r18, -X
 6e6:	2d bf       	out	0x3d, r18	; 61
 6e8:	3e bf       	out	0x3e, r19	; 62
 6ea:	a0 93 24 01 	sts	0x0124, r26
 6ee:	b0 93 25 01 	sts	0x0125, r27
		RET                                               ;return from subroutine (  4 clocks) 
 6f2:	08 95       	ret

000006f4 <Kernel_Task_Create>:
;used registers          : R18, R19, R20, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)    
;arg registers           : R25:R24(FuncPtr), R22(TaskPriority)                                 
;return registers        : None                                                                
;unsafe access registers : R18, R19, R20, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)    
Kernel_Task_Create:                                       ;total 21.50uS @8MHz    (172 clocks) 
        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 6f4:	a0 91 24 01 	lds	r26, 0x0124
 6f8:	b0 91 25 01 	lds	r27, 0x0125
 6fc:	2d b7       	in	r18, 0x3d	; 61
 6fe:	3e b7       	in	r19, 0x3e	; 62
 700:	2d 93       	st	X+, r18
 702:	3d 93       	st	X+, r19
 704:	ed 93       	st	X+, r30
 706:	fd 93       	st	X+, r31
 708:	a0 93 24 01 	sts	0x0124, r26
 70c:	b0 93 25 01 	sts	0x0125, r27
		;set priority to KerSchPr+task_id                                                      
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 710:	ec e3       	ldi	r30, 0x3C	; 60
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 712:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 714:	20 91 07 01 	lds	r18, 0x0107
 718:	e2 0f       	add	r30, r18
 71a:	20 e0       	ldi	r18, 0x00	; 0
 71c:	f2 1f       	adc	r31, r18
		ST    Z                  , R22                    ;save priority          (  2 clocks) 
 71e:	60 83       	st	Z, r22
		;set task status to KerSchSts+task_id                                                  
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 720:	e2 e3       	ldi	r30, 0x32	; 50
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 722:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 724:	20 91 07 01 	lds	r18, 0x0107
 728:	e2 0f       	add	r30, r18
 72a:	20 e0       	ldi	r18, 0x00	; 0
 72c:	f2 1f       	adc	r31, r18
		LDI   R18                , TASK_READY             ;set status as ready    (  1 clock ) 
 72e:	21 e0       	ldi	r18, 0x01	; 1
		ST    Z                  , R18                    ;save status            (  2 clocks) 
 730:	20 83       	st	Z, r18
		;stack pointer for current task (KerStack + KER_STK_SZ*(task_id+1) - 1) ->stack top    
		LDS   R18                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 732:	20 91 07 01 	lds	r18, 0x0107
		INC   R18                                         ;increment task_id      (  1 clock ) 
 736:	23 95       	inc	r18
		LDI   R19                , KER_STK_SZ             ;load stack size        (  1 clock ) 
 738:	30 e8       	ldi	r19, 0x80	; 128
		MUL   R18                , R19                    ;multiply to get offset (  2 clocks) 
 73a:	23 9f       	mul	r18, r19
		MOV   ZL                 , R0                     ;load multiplied low    (  1 clocks) 
 73c:	e0 2d       	mov	r30, r0
		MOV   ZH                 , R1                     ;load multiplied high   (  1 clocks) 
 73e:	f1 2d       	mov	r31, r1
		SBIW  ZL                 , 0x01                   ;dec multiplied val-1   (  2 clocks) 
 740:	31 97       	sbiw	r30, 0x01	; 1
		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 742:	11 24       	eor	r1, r1
		LDI   R18                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
 744:	2a e5       	ldi	r18, 0x5A	; 90
		LDI   R19                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
 746:	31 e0       	ldi	r19, 0x01	; 1
		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
 748:	e2 0f       	add	r30, r18
		ADC   ZH                 , R19                    ;add high bytes+carry   (  1 clock ) 
 74a:	f3 1f       	adc	r31, r19
		OUT   IOSPL              , ZL                     ;load SPL               (  1 clock ) 
 74c:	ed bf       	out	0x3d, r30	; 61
        OUT   IOSPH              , ZH                     ;load SPH               (  1 clock ) 
 74e:	fe bf       	out	0x3e, r31	; 62
		;function argument directly returns word address                                       
	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
 750:	8f 93       	push	r24
		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 752:	9f 93       	push	r25
		;push context to stack of this task                                                    
		KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 754:	0f 92       	push	r0
 756:	0f b6       	in	r0, 0x3f	; 63
 758:	0f 92       	push	r0
 75a:	1f 92       	push	r1
 75c:	11 24       	eor	r1, r1
 75e:	2f 92       	push	r2
 760:	3f 92       	push	r3
 762:	4f 92       	push	r4
 764:	5f 92       	push	r5
 766:	6f 92       	push	r6
 768:	7f 92       	push	r7
 76a:	8f 92       	push	r8
 76c:	9f 92       	push	r9
 76e:	af 92       	push	r10
 770:	bf 92       	push	r11
 772:	cf 92       	push	r12
 774:	df 92       	push	r13
 776:	ef 92       	push	r14
 778:	ff 92       	push	r15
 77a:	0f 93       	push	r16
 77c:	1f 93       	push	r17
 77e:	2f 93       	push	r18
 780:	3f 93       	push	r19
 782:	4f 93       	push	r20
 784:	5f 93       	push	r21
 786:	6f 93       	push	r22
 788:	7f 93       	push	r23
 78a:	8f 93       	push	r24
 78c:	9f 93       	push	r25
 78e:	af 93       	push	r26
 790:	bf 93       	push	r27
 792:	cf 93       	push	r28
 794:	df 93       	push	r29
 796:	ef 93       	push	r30
 798:	ff 93       	push	r31
		;read stack pointer of current task (necessary when restore)                           
		IN    R18                , IOSPL                  ;read SPL               (  1 clock ) 
 79a:	2d b7       	in	r18, 0x3d	; 61
        IN    R19                , IOSPH                  ;read SPH               (  1 clock ) 
 79c:	3e b7       	in	r19, 0x3e	; 62
		;calculate the address where current task's SP will be stored and store SP             
		LDS   R20                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 79e:	40 91 07 01 	lds	r20, 0x0107
		LSL   R20                                         ;left shift to multiply (  1 clock ) 
 7a2:	44 0f       	add	r20, r20
		LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 7a4:	e0 e1       	ldi	r30, 0x10	; 16
		LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 7a6:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R20                    ;add offset to array    (  1 clock ) 
 7a8:	e4 0f       	add	r30, r20
		LDI   R20                , 0x00                   ;clear reg              (  1 clock ) 
 7aa:	40 e0       	ldi	r20, 0x00	; 0
		ADC   ZH                 , R20                    ;add carry if any       (  1 clock ) 
 7ac:	f4 1f       	adc	r31, r20
		ST    Z+                 , R18                    ;SPL at KerPSp+offset   (  2 clocks) 
 7ae:	21 93       	st	Z+, r18
		ST    Z                  , R19                    ;SPH at KerPSp+offset   (  2 clocks) 
 7b0:	30 83       	st	Z, r19
		;increment task_id                                                                     
		LDS   R18                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 7b2:	20 91 07 01 	lds	r18, 0x0107
		INC   R18                                         ;increment task_id      (  1 clock ) 
 7b6:	23 95       	inc	r18
		STS   KerBase+OFB_TID    , R18                    ;store task_id          (  2 clocks) 
 7b8:	20 93 07 01 	sts	0x0107, r18
		;increment ntask                                                                       
		LDS   R18                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 7bc:	20 91 08 01 	lds	r18, 0x0108
		INC   R18                                         ;increment ntask        (  1 clock ) 
 7c0:	23 95       	inc	r18
		STS   KerBase+OFB_NTSK   , R18                    ;store ntask            (  2 clocks) 
 7c2:	20 93 08 01 	sts	0x0108, r18
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 7c6:	a0 91 24 01 	lds	r26, 0x0124
 7ca:	b0 91 25 01 	lds	r27, 0x0125
 7ce:	fe 91       	ld	r31, -X
 7d0:	ee 91       	ld	r30, -X
 7d2:	3e 91       	ld	r19, -X
 7d4:	2e 91       	ld	r18, -X
 7d6:	2d bf       	out	0x3d, r18	; 61
 7d8:	3e bf       	out	0x3e, r19	; 62
 7da:	a0 93 24 01 	sts	0x0124, r26
 7de:	b0 93 25 01 	sts	0x0125, r27
		RET                                               ;return from subroutine (  4 clocks) 
 7e2:	08 95       	ret

000007e4 <Kernel_Start_Tasks>:
;used registers          : R0~R31                                                              
;arg registers           : None                                                                
;return registers        : None                                                                
;unsafe access registers : R18, R19, R20, R24, R25, R30(ZL), R31(ZH)                           
Kernel_Start_Tasks:                                       ;total 25.63uS @8MHz    (205 clocks) 
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 7e4:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
 7e6:	2f ef       	ldi	r18, 0xFF	; 255
 7e8:	20 93 09 01 	sts	0x0109, r18
 7ec:	20 e0       	ldi	r18, 0x00	; 0
 7ee:	20 93 0a 01 	sts	0x010A, r18
 7f2:	58 2f       	mov	r21, r24

000007f4 <_KER_SCH_LOOP32>:
 7f4:	20 93 07 01 	sts	0x0107, r18
 7f8:	85 2f       	mov	r24, r21
 7fa:	e6 e4       	ldi	r30, 0x46	; 70
 7fc:	f1 e0       	ldi	r31, 0x01	; 1
 7fe:	20 91 07 01 	lds	r18, 0x0107
 802:	22 0f       	add	r18, r18
 804:	e2 0f       	add	r30, r18
 806:	20 e0       	ldi	r18, 0x00	; 0
 808:	f2 1f       	adc	r31, r18
 80a:	20 81       	ld	r18, Z
 80c:	31 81       	ldd	r19, Z+1	; 0x01
 80e:	42 2f       	mov	r20, r18
 810:	43 2b       	or	r20, r19
 812:	59 f0       	breq	.+22     	; 0x82a <_VAL_NULL33>
 814:	81 30       	cpi	r24, 0x01	; 1
 816:	99 f0       	breq	.+38     	; 0x83e <_VAL_NOT_NULL33>
 818:	41 e0       	ldi	r20, 0x01	; 1
 81a:	24 1b       	sub	r18, r20
 81c:	40 e0       	ldi	r20, 0x00	; 0
 81e:	34 0b       	sbc	r19, r20
 820:	20 83       	st	Z, r18
 822:	31 83       	std	Z+1, r19	; 0x01
 824:	42 2f       	mov	r20, r18
 826:	43 2b       	or	r20, r19
 828:	51 f4       	brne	.+20     	; 0x83e <_VAL_NOT_NULL33>

0000082a <_VAL_NULL33>:
 82a:	e2 e3       	ldi	r30, 0x32	; 50
 82c:	f1 e0       	ldi	r31, 0x01	; 1
 82e:	20 91 07 01 	lds	r18, 0x0107
 832:	e2 0f       	add	r30, r18
 834:	20 e0       	ldi	r18, 0x00	; 0
 836:	f2 1f       	adc	r31, r18
 838:	81 e0       	ldi	r24, 0x01	; 1
 83a:	80 83       	st	Z, r24
 83c:	08 c0       	rjmp	.+16     	; 0x84e <_EXIT_SLP_TIME33>

0000083e <_VAL_NOT_NULL33>:
 83e:	e2 e3       	ldi	r30, 0x32	; 50
 840:	f1 e0       	ldi	r31, 0x01	; 1
 842:	20 91 07 01 	lds	r18, 0x0107
 846:	e2 0f       	add	r30, r18
 848:	20 e0       	ldi	r18, 0x00	; 0
 84a:	f2 1f       	adc	r31, r18
 84c:	80 81       	ld	r24, Z

0000084e <_EXIT_SLP_TIME33>:
 84e:	81 30       	cpi	r24, 0x01	; 1
 850:	19 f0       	breq	.+6      	; 0x858 <_KER_CALC_PRIO32>
 852:	84 30       	cpi	r24, 0x04	; 4
 854:	09 f0       	breq	.+2      	; 0x858 <_KER_CALC_PRIO32>
 856:	12 c0       	rjmp	.+36     	; 0x87c <_KER_SCH_NEXT32>

00000858 <_KER_CALC_PRIO32>:
 858:	ec e3       	ldi	r30, 0x3C	; 60
 85a:	f1 e0       	ldi	r31, 0x01	; 1
 85c:	20 e0       	ldi	r18, 0x00	; 0
 85e:	80 91 07 01 	lds	r24, 0x0107
 862:	e8 0f       	add	r30, r24
 864:	f2 1f       	adc	r31, r18
 866:	80 81       	ld	r24, Z
 868:	20 91 09 01 	lds	r18, 0x0109
 86c:	82 17       	cp	r24, r18
 86e:	30 f4       	brcc	.+12     	; 0x87c <_KER_SCH_NEXT32>
 870:	80 93 09 01 	sts	0x0109, r24
 874:	20 91 07 01 	lds	r18, 0x0107
 878:	20 93 0a 01 	sts	0x010A, r18

0000087c <_KER_SCH_NEXT32>:
 87c:	20 91 07 01 	lds	r18, 0x0107
 880:	23 95       	inc	r18
 882:	30 91 08 01 	lds	r19, 0x0108
 886:	23 17       	cp	r18, r19
 888:	08 f4       	brcc	.+2      	; 0x88c <_KER_SCH_EXIT32>
 88a:	b4 cf       	rjmp	.-152    	; 0x7f4 <_KER_SCH_LOOP32>

0000088c <_KER_SCH_EXIT32>:
 88c:	20 91 0a 01 	lds	r18, 0x010A
 890:	20 93 07 01 	sts	0x0107, r18
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 894:	e0 e1       	ldi	r30, 0x10	; 16
 896:	f1 e0       	ldi	r31, 0x01	; 1
 898:	20 91 07 01 	lds	r18, 0x0107
 89c:	22 0f       	add	r18, r18
 89e:	e2 0f       	add	r30, r18
 8a0:	20 e0       	ldi	r18, 0x00	; 0
 8a2:	f2 1f       	adc	r31, r18
 8a4:	20 81       	ld	r18, Z
 8a6:	31 81       	ldd	r19, Z+1	; 0x01
 8a8:	2d bf       	out	0x3d, r18	; 61
 8aa:	3e bf       	out	0x3e, r19	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 8ac:	ff 91       	pop	r31
 8ae:	ef 91       	pop	r30
 8b0:	df 91       	pop	r29
 8b2:	cf 91       	pop	r28
 8b4:	bf 91       	pop	r27
 8b6:	af 91       	pop	r26
 8b8:	9f 91       	pop	r25
 8ba:	8f 91       	pop	r24
 8bc:	7f 91       	pop	r23
 8be:	6f 91       	pop	r22
 8c0:	5f 91       	pop	r21
 8c2:	4f 91       	pop	r20
 8c4:	3f 91       	pop	r19
 8c6:	2f 91       	pop	r18
 8c8:	1f 91       	pop	r17
 8ca:	0f 91       	pop	r16
 8cc:	ff 90       	pop	r15
 8ce:	ef 90       	pop	r14
 8d0:	df 90       	pop	r13
 8d2:	cf 90       	pop	r12
 8d4:	bf 90       	pop	r11
 8d6:	af 90       	pop	r10
 8d8:	9f 90       	pop	r9
 8da:	8f 90       	pop	r8
 8dc:	7f 90       	pop	r7
 8de:	6f 90       	pop	r6
 8e0:	5f 90       	pop	r5
 8e2:	4f 90       	pop	r4
 8e4:	3f 90       	pop	r3
 8e6:	2f 90       	pop	r2
 8e8:	1f 90       	pop	r1
 8ea:	0f 90       	pop	r0
 8ec:	0f be       	out	0x3f, r0	; 63
 8ee:	0f 90       	pop	r0
 8f0:	78 94       	sei
		STS   SRTCNT0            , R19                    ;reload val-> TCNT0     (  2 clocks) 
		LDI   R18                , 0x01                   ;bit mask TOIE0         (  1 clock ) 
		STS   SRTIMSK0           , R18                    ;set to TIMSK0          (  2 clocks) 
		SEI                                               ;force enable interrupt (  1 clock ) 
		#endif                                                                                 
		#ifdef KER_WDT_AS_TICK_SRC                                                             
 8f2:	a8 95       	wdr
 8f4:	20 91 60 00 	lds	r18, 0x0060
 8f8:	28 61       	ori	r18, 0x18	; 24
 8fa:	20 93 60 00 	sts	0x0060, r18
		LDI   R18                , 0x41                   ;WDIE, WDPS0            (  1 clock ) 
		#endif                                                                                 
		#ifdef KER_WDT_TICK_64MS                                                               
		LDI   R18                , 0x42                   ;WDIE, WDPS1            (  1 clock ) 
		#endif                                                                                 
		#ifdef KER_WDT_TICK_125MS                                                              
 8fe:	23 e4       	ldi	r18, 0x43	; 67
		#ifdef KER_WDT_TICK_500MS                                                              
		LDI   R18                , 0x45                   ;WDIE, WDPS1, WDPS2     (  1 clock ) 
		#endif                                                                                 
		#ifdef KER_WDT_TICK_1000MS                                                             
		LDI   R18                , 0x46                   ;WDIE, WDPS1, WDPS2     (  1 clock ) 
		#endif                                                                                 
 900:	20 93 60 00 	sts	0x0060, r18
 904:	78 94       	sei
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
		;config timer for system tick                                                          
		KER_TIMER_INIT                                    ;init timer, int enable ( 12 clocks) 
		;execute return to jump to highest priority task                                       
		RET                                               ;return from subroutine (  4 clocks) 
 906:	08 95       	ret

00000908 <Kernel_Init>:
;used registers          : R1, R18, R19, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
;arg registers           : None                                                                
;return registers        : None                                                                
;unsafe access registers : R1, R18, R19, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
Kernel_Init:                                              ;total 39.75uS @8MHz    (318 clocks) 
		CLR   R1                                          ;gcc expects            (  1 clock ) 
 908:	11 24       	eor	r1, r1
        ;store stack top (for MSP) addr to KerSSZ+OFM_MSPI0:1                                  
		LDI   R18                , lo8(KerSSZ+OFM_MSPS)   ;load low address       (  1 clock ) 
 90a:	26 e2       	ldi	r18, 0x26	; 38
		LDI   R19                , hi8(KerSSZ+OFM_MSPS)   ;load high address      (  1 clock ) 
 90c:	31 e0       	ldi	r19, 0x01	; 1
        STS   KerSSZ+OFM_MSPI+0  , R18                    ;set mspi to stack top  (  2 clocks) 
 90e:	20 93 24 01 	sts	0x0124, r18
		STS   KerSSZ+OFM_MSPI+1  , R19                    ;set mspi to stack top  (  2 clocks) 
 912:	30 93 25 01 	sts	0x0125, r19
		KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 916:	a0 91 24 01 	lds	r26, 0x0124
 91a:	b0 91 25 01 	lds	r27, 0x0125
 91e:	2d b7       	in	r18, 0x3d	; 61
 920:	3e b7       	in	r19, 0x3e	; 62
 922:	2d 93       	st	X+, r18
 924:	3d 93       	st	X+, r19
 926:	ed 93       	st	X+, r30
 928:	fd 93       	st	X+, r31
 92a:	a0 93 24 01 	sts	0x0124, r26
 92e:	b0 93 25 01 	sts	0x0125, r27
		;init timer for kernel                                                                 
		LDI   R24                , 0x03                   ;set prescaler          (  1 clock ) 
 932:	83 e0       	ldi	r24, 0x03	; 3
		LDI   R22                , 0x82                   ;set reload val         (  1 clock ) 
 934:	62 e8       	ldi	r22, 0x82	; 130
		CALL  Kernel_SysTick_Reg_Init                     ;init timer             ( 92 clocks) 
 936:	0e 94 2b 03 	call	0x656	; 0x656 <Kernel_SysTick_Reg_Init>
		;create idle task at task_id 0, priority 0xFF (lowest)                                 
		LDI   R24                , lo8(Kernel_Task_Idle)  ;load func addr low     (  1 clock ) 
 93a:	86 e6       	ldi	r24, 0x66	; 102
		LDI   R25                , hi8(Kernel_Task_Idle)  ;load func addr high    (  1 clock ) 
 93c:	99 e0       	ldi	r25, 0x09	; 9
		LSR   R25                                         ;right shift to divide  (  1 clock ) 
 93e:	96 95       	lsr	r25
		ROR   R24                                         ;rotate right th carry  (  1 clock ) 
 940:	87 95       	ror	r24
		LDI   R22                , 0xFF                   ;set max val            (  1 clock ) 
 942:	6f ef       	ldi	r22, 0xFF	; 255
		CALL  Kernel_Task_Create                          ;init idle task         (172 clocks) 
 944:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Kernel_Task_Create>
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 948:	a0 91 24 01 	lds	r26, 0x0124
 94c:	b0 91 25 01 	lds	r27, 0x0125
 950:	fe 91       	ld	r31, -X
 952:	ee 91       	ld	r30, -X
 954:	3e 91       	ld	r19, -X
 956:	2e 91       	ld	r18, -X
 958:	2d bf       	out	0x3d, r18	; 61
 95a:	3e bf       	out	0x3e, r19	; 62
 95c:	a0 93 24 01 	sts	0x0124, r26
 960:	b0 93 25 01 	sts	0x0125, r27
		;execute return to jump to task0, pushed while task init                               
		RET                                               ;return from subroutine (  4 clocks) 
 964:	08 95       	ret

00000966 <Kernel_Task_Idle>:
		#endif                                                                                 
		LDI   R18                , 0x0C                   ;set SM[2:0] val        (  1 clock ) 
		#ifdef KER_SLEEP_MODE_STDBY                                                            
		#endif                                                                                 
		LDI   R18                , 0x0E                   ;set SM[2:0] val        (  1 clock ) 
		#endif                                                                                 
 966:	20 93 33 00 	sts	0x0033, r18
 96a:	20 93 0e 01 	sts	0x010E, r18

0000096e <_IDLE_LOOP>:
;return registers        : None                                                                
;unsafe access registers : None                                                                
Kernel_Task_Idle:                                         ;total 0.50uS @8MHz     (  4 clocks) 
	    KER_SLEEP_INIT                                    ;sleep init             (  8 clocks)
    _IDLE_LOOP:                                           ;forever loop                        
	    KER_ENTER_SLEEP                                   ;enter sleep mode       (  4 clocks)
 96e:	20 91 53 00 	lds	r18, 0x0053
 972:	21 60       	ori	r18, 0x01	; 1
 974:	20 93 53 00 	sts	0x0053, r18
 978:	88 95       	sleep
		RJMP  _IDLE_LOOP                                  ;return from subroutine (  4 clocks) 
 97a:	f9 cf       	rjmp	.-14     	; 0x96e <_IDLE_LOOP>

0000097c <Kernel_Task_Sleep>:
;arg registers           : R25:R24(SleepTime)                                                  
;return registers        : None                                                                
;unsafe access registers : R18, R19, R20, R24, R25, R30(ZL), R31(ZH)                           
Kernel_Task_Sleep:                                        ;total 37.25uS @8MHz    (298 clocks) 
        ;save current context                                                                  
        KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
 97c:	0f 92       	push	r0
 97e:	0f b6       	in	r0, 0x3f	; 63
 980:	f8 94       	cli
 982:	0f 92       	push	r0
 984:	1f 92       	push	r1
 986:	11 24       	eor	r1, r1
 988:	2f 92       	push	r2
 98a:	3f 92       	push	r3
 98c:	4f 92       	push	r4
 98e:	5f 92       	push	r5
 990:	6f 92       	push	r6
 992:	7f 92       	push	r7
 994:	8f 92       	push	r8
 996:	9f 92       	push	r9
 998:	af 92       	push	r10
 99a:	bf 92       	push	r11
 99c:	cf 92       	push	r12
 99e:	df 92       	push	r13
 9a0:	ef 92       	push	r14
 9a2:	ff 92       	push	r15
 9a4:	0f 93       	push	r16
 9a6:	1f 93       	push	r17
 9a8:	2f 93       	push	r18
 9aa:	3f 93       	push	r19
 9ac:	4f 93       	push	r20
 9ae:	5f 93       	push	r21
 9b0:	6f 93       	push	r22
 9b2:	7f 93       	push	r23
 9b4:	8f 93       	push	r24
 9b6:	9f 93       	push	r25
 9b8:	af 93       	push	r26
 9ba:	bf 93       	push	r27
 9bc:	cf 93       	push	r28
 9be:	df 93       	push	r29
 9c0:	ef 93       	push	r30
 9c2:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 9c4:	e0 e1       	ldi	r30, 0x10	; 16
 9c6:	f1 e0       	ldi	r31, 0x01	; 1
 9c8:	20 91 07 01 	lds	r18, 0x0107
 9cc:	22 0f       	add	r18, r18
 9ce:	e2 0f       	add	r30, r18
 9d0:	20 e0       	ldi	r18, 0x00	; 0
 9d2:	f2 1f       	adc	r31, r18
 9d4:	2d b7       	in	r18, 0x3d	; 61
 9d6:	3e b7       	in	r19, 0x3e	; 62
 9d8:	20 83       	st	Z, r18
 9da:	31 83       	std	Z+1, r19	; 0x01
		;create next task wakeup time (args R25:R24)                                           
		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 9dc:	e6 e4       	ldi	r30, 0x46	; 70
		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 9de:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
 9e0:	20 91 07 01 	lds	r18, 0x0107
 9e4:	22 0f       	add	r18, r18
 9e6:	e2 0f       	add	r30, r18
 9e8:	20 e0       	ldi	r18, 0x00	; 0
 9ea:	f2 1f       	adc	r31, r18
		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
 9ec:	80 83       	st	Z, r24
		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 9ee:	91 83       	std	Z+1, r25	; 0x01
		;update task scheduler status as blocked                                               
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 9f0:	e2 e3       	ldi	r30, 0x32	; 50
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 9f2:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
 9f4:	20 91 07 01 	lds	r18, 0x0107
 9f8:	e2 0f       	add	r30, r18
 9fa:	20 e0       	ldi	r18, 0x00	; 0
 9fc:	f2 1f       	adc	r31, r18
        LDI   R18                , TASK_BLOCKED           ;block task until cnt=0 (  1 clock ) 
 9fe:	20 e0       	ldi	r18, 0x00	; 0
		STD   Z+0                , R18                    ;save block flag        (  2 clocks) 
 a00:	20 83       	st	Z, r18
		;run scheduler, load next task sp, restore context                                     
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 a02:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
 a04:	2f ef       	ldi	r18, 0xFF	; 255
 a06:	20 93 09 01 	sts	0x0109, r18
 a0a:	20 e0       	ldi	r18, 0x00	; 0
 a0c:	20 93 0a 01 	sts	0x010A, r18
 a10:	58 2f       	mov	r21, r24

00000a12 <_KER_SCH_LOOP55>:
 a12:	20 93 07 01 	sts	0x0107, r18
 a16:	85 2f       	mov	r24, r21
 a18:	e6 e4       	ldi	r30, 0x46	; 70
 a1a:	f1 e0       	ldi	r31, 0x01	; 1
 a1c:	20 91 07 01 	lds	r18, 0x0107
 a20:	22 0f       	add	r18, r18
 a22:	e2 0f       	add	r30, r18
 a24:	20 e0       	ldi	r18, 0x00	; 0
 a26:	f2 1f       	adc	r31, r18
 a28:	20 81       	ld	r18, Z
 a2a:	31 81       	ldd	r19, Z+1	; 0x01
 a2c:	42 2f       	mov	r20, r18
 a2e:	43 2b       	or	r20, r19
 a30:	59 f0       	breq	.+22     	; 0xa48 <_VAL_NULL56>
 a32:	81 30       	cpi	r24, 0x01	; 1
 a34:	99 f0       	breq	.+38     	; 0xa5c <_VAL_NOT_NULL56>
 a36:	41 e0       	ldi	r20, 0x01	; 1
 a38:	24 1b       	sub	r18, r20
 a3a:	40 e0       	ldi	r20, 0x00	; 0
 a3c:	34 0b       	sbc	r19, r20
 a3e:	20 83       	st	Z, r18
 a40:	31 83       	std	Z+1, r19	; 0x01
 a42:	42 2f       	mov	r20, r18
 a44:	43 2b       	or	r20, r19
 a46:	51 f4       	brne	.+20     	; 0xa5c <_VAL_NOT_NULL56>

00000a48 <_VAL_NULL56>:
 a48:	e2 e3       	ldi	r30, 0x32	; 50
 a4a:	f1 e0       	ldi	r31, 0x01	; 1
 a4c:	20 91 07 01 	lds	r18, 0x0107
 a50:	e2 0f       	add	r30, r18
 a52:	20 e0       	ldi	r18, 0x00	; 0
 a54:	f2 1f       	adc	r31, r18
 a56:	81 e0       	ldi	r24, 0x01	; 1
 a58:	80 83       	st	Z, r24
 a5a:	08 c0       	rjmp	.+16     	; 0xa6c <_EXIT_SLP_TIME56>

00000a5c <_VAL_NOT_NULL56>:
 a5c:	e2 e3       	ldi	r30, 0x32	; 50
 a5e:	f1 e0       	ldi	r31, 0x01	; 1
 a60:	20 91 07 01 	lds	r18, 0x0107
 a64:	e2 0f       	add	r30, r18
 a66:	20 e0       	ldi	r18, 0x00	; 0
 a68:	f2 1f       	adc	r31, r18
 a6a:	80 81       	ld	r24, Z

00000a6c <_EXIT_SLP_TIME56>:
 a6c:	81 30       	cpi	r24, 0x01	; 1
 a6e:	19 f0       	breq	.+6      	; 0xa76 <_KER_CALC_PRIO55>
 a70:	84 30       	cpi	r24, 0x04	; 4
 a72:	09 f0       	breq	.+2      	; 0xa76 <_KER_CALC_PRIO55>
 a74:	12 c0       	rjmp	.+36     	; 0xa9a <_KER_SCH_NEXT55>

00000a76 <_KER_CALC_PRIO55>:
 a76:	ec e3       	ldi	r30, 0x3C	; 60
 a78:	f1 e0       	ldi	r31, 0x01	; 1
 a7a:	20 e0       	ldi	r18, 0x00	; 0
 a7c:	80 91 07 01 	lds	r24, 0x0107
 a80:	e8 0f       	add	r30, r24
 a82:	f2 1f       	adc	r31, r18
 a84:	80 81       	ld	r24, Z
 a86:	20 91 09 01 	lds	r18, 0x0109
 a8a:	82 17       	cp	r24, r18
 a8c:	30 f4       	brcc	.+12     	; 0xa9a <_KER_SCH_NEXT55>
 a8e:	80 93 09 01 	sts	0x0109, r24
 a92:	20 91 07 01 	lds	r18, 0x0107
 a96:	20 93 0a 01 	sts	0x010A, r18

00000a9a <_KER_SCH_NEXT55>:
 a9a:	20 91 07 01 	lds	r18, 0x0107
 a9e:	23 95       	inc	r18
 aa0:	30 91 08 01 	lds	r19, 0x0108
 aa4:	23 17       	cp	r18, r19
 aa6:	08 f4       	brcc	.+2      	; 0xaaa <_KER_SCH_EXIT55>
 aa8:	b4 cf       	rjmp	.-152    	; 0xa12 <_KER_SCH_LOOP55>

00000aaa <_KER_SCH_EXIT55>:
 aaa:	20 91 0a 01 	lds	r18, 0x010A
 aae:	20 93 07 01 	sts	0x0107, r18
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 ab2:	e0 e1       	ldi	r30, 0x10	; 16
 ab4:	f1 e0       	ldi	r31, 0x01	; 1
 ab6:	20 91 07 01 	lds	r18, 0x0107
 aba:	22 0f       	add	r18, r18
 abc:	e2 0f       	add	r30, r18
 abe:	20 e0       	ldi	r18, 0x00	; 0
 ac0:	f2 1f       	adc	r31, r18
 ac2:	20 81       	ld	r18, Z
 ac4:	31 81       	ldd	r19, Z+1	; 0x01
 ac6:	2d bf       	out	0x3d, r18	; 61
 ac8:	3e bf       	out	0x3e, r19	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 aca:	ff 91       	pop	r31
 acc:	ef 91       	pop	r30
 ace:	df 91       	pop	r29
 ad0:	cf 91       	pop	r28
 ad2:	bf 91       	pop	r27
 ad4:	af 91       	pop	r26
 ad6:	9f 91       	pop	r25
 ad8:	8f 91       	pop	r24
 ada:	7f 91       	pop	r23
 adc:	6f 91       	pop	r22
 ade:	5f 91       	pop	r21
 ae0:	4f 91       	pop	r20
 ae2:	3f 91       	pop	r19
 ae4:	2f 91       	pop	r18
 ae6:	1f 91       	pop	r17
 ae8:	0f 91       	pop	r16
 aea:	ff 90       	pop	r15
 aec:	ef 90       	pop	r14
 aee:	df 90       	pop	r13
 af0:	cf 90       	pop	r12
 af2:	bf 90       	pop	r11
 af4:	af 90       	pop	r10
 af6:	9f 90       	pop	r9
 af8:	8f 90       	pop	r8
 afa:	7f 90       	pop	r7
 afc:	6f 90       	pop	r6
 afe:	5f 90       	pop	r5
 b00:	4f 90       	pop	r4
 b02:	3f 90       	pop	r3
 b04:	2f 90       	pop	r2
 b06:	1f 90       	pop	r1
 b08:	0f 90       	pop	r0
 b0a:	0f be       	out	0x3f, r0	; 63
 b0c:	0f 90       	pop	r0
 b0e:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
 b10:	08 95       	ret

00000b12 <Kernel_Task_Constant_Latency>:
;arg registers           : R25:R24(SleepTime)                                                  
;return registers        : None                                                                
;unsafe access registers : R18, R24, R25, R30(ZL), R31(ZH)                                     
Kernel_Task_Constant_Latency:                             ;total 3.50uS @8MHz     ( 28 clocks) 
		;create next task wakeup time (args R25:R24)                                           
		CLI                                               ;disable interrupt      (  1 clock ) 
 b12:	f8 94       	cli
		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 b14:	e6 e4       	ldi	r30, 0x46	; 70
		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 b16:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
 b18:	20 91 07 01 	lds	r18, 0x0107
 b1c:	22 0f       	add	r18, r18
 b1e:	e2 0f       	add	r30, r18
 b20:	20 e0       	ldi	r18, 0x00	; 0
 b22:	f2 1f       	adc	r31, r18
		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
 b24:	80 83       	st	Z, r24
		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 b26:	91 83       	std	Z+1, r25	; 0x01
		;update task scheduler status as constant latency                                      
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 b28:	e2 e3       	ldi	r30, 0x32	; 50
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 b2a:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
 b2c:	20 91 07 01 	lds	r18, 0x0107
 b30:	e2 0f       	add	r30, r18
 b32:	20 e0       	ldi	r18, 0x00	; 0
 b34:	f2 1f       	adc	r31, r18
        LDI   R18                , TASK_CONS_LAT          ;save as cons_lat       (  1 clock ) 
 b36:	24 e0       	ldi	r18, 0x04	; 4
		STD   Z+0                , R18                    ;save block flag        (  2 clocks) 
 b38:	20 83       	st	Z, r18
		SEI                                               ;enable interrupt       (  1 clock ) 
 b3a:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
 b3c:	08 95       	ret

00000b3e <Kernel_Task_Constant_Latency_Sleep>:
;arg registers           : R25:R24(SleepTime)                                                  
;return registers        : None                                                                
;unsafe access registers : R18, R19, R20, R24, R25, R30(ZL), R31(ZH)                           
Kernel_Task_Constant_Latency_Sleep:                       ;total 35.75uS @8MHz    (286 clocks) 
		;save current context                                                                  
        KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
 b3e:	0f 92       	push	r0
 b40:	0f b6       	in	r0, 0x3f	; 63
 b42:	f8 94       	cli
 b44:	0f 92       	push	r0
 b46:	1f 92       	push	r1
 b48:	11 24       	eor	r1, r1
 b4a:	2f 92       	push	r2
 b4c:	3f 92       	push	r3
 b4e:	4f 92       	push	r4
 b50:	5f 92       	push	r5
 b52:	6f 92       	push	r6
 b54:	7f 92       	push	r7
 b56:	8f 92       	push	r8
 b58:	9f 92       	push	r9
 b5a:	af 92       	push	r10
 b5c:	bf 92       	push	r11
 b5e:	cf 92       	push	r12
 b60:	df 92       	push	r13
 b62:	ef 92       	push	r14
 b64:	ff 92       	push	r15
 b66:	0f 93       	push	r16
 b68:	1f 93       	push	r17
 b6a:	2f 93       	push	r18
 b6c:	3f 93       	push	r19
 b6e:	4f 93       	push	r20
 b70:	5f 93       	push	r21
 b72:	6f 93       	push	r22
 b74:	7f 93       	push	r23
 b76:	8f 93       	push	r24
 b78:	9f 93       	push	r25
 b7a:	af 93       	push	r26
 b7c:	bf 93       	push	r27
 b7e:	cf 93       	push	r28
 b80:	df 93       	push	r29
 b82:	ef 93       	push	r30
 b84:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 b86:	e0 e1       	ldi	r30, 0x10	; 16
 b88:	f1 e0       	ldi	r31, 0x01	; 1
 b8a:	20 91 07 01 	lds	r18, 0x0107
 b8e:	22 0f       	add	r18, r18
 b90:	e2 0f       	add	r30, r18
 b92:	20 e0       	ldi	r18, 0x00	; 0
 b94:	f2 1f       	adc	r31, r18
 b96:	2d b7       	in	r18, 0x3d	; 61
 b98:	3e b7       	in	r19, 0x3e	; 62
 b9a:	20 83       	st	Z, r18
 b9c:	31 83       	std	Z+1, r19	; 0x01
		;update task scheduler status as blocked                                               
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 b9e:	e2 e3       	ldi	r30, 0x32	; 50
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 ba0:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
 ba2:	20 91 07 01 	lds	r18, 0x0107
 ba6:	e2 0f       	add	r30, r18
 ba8:	20 e0       	ldi	r18, 0x00	; 0
 baa:	f2 1f       	adc	r31, r18
        LDI   R18                , TASK_BLOCKED           ;blocked until cnt=0    (  1 clock ) 
 bac:	20 e0       	ldi	r18, 0x00	; 0
		STD   Z+0                , R18                    ;save block flag        (  2 clocks) 
 bae:	20 83       	st	Z, r18
		;run scheduler, load next task sp, restore context                                     
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 bb0:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
 bb2:	2f ef       	ldi	r18, 0xFF	; 255
 bb4:	20 93 09 01 	sts	0x0109, r18
 bb8:	20 e0       	ldi	r18, 0x00	; 0
 bba:	20 93 0a 01 	sts	0x010A, r18
 bbe:	58 2f       	mov	r21, r24

00000bc0 <_KER_SCH_LOOP74>:
 bc0:	20 93 07 01 	sts	0x0107, r18
 bc4:	85 2f       	mov	r24, r21
 bc6:	e6 e4       	ldi	r30, 0x46	; 70
 bc8:	f1 e0       	ldi	r31, 0x01	; 1
 bca:	20 91 07 01 	lds	r18, 0x0107
 bce:	22 0f       	add	r18, r18
 bd0:	e2 0f       	add	r30, r18
 bd2:	20 e0       	ldi	r18, 0x00	; 0
 bd4:	f2 1f       	adc	r31, r18
 bd6:	20 81       	ld	r18, Z
 bd8:	31 81       	ldd	r19, Z+1	; 0x01
 bda:	42 2f       	mov	r20, r18
 bdc:	43 2b       	or	r20, r19
 bde:	59 f0       	breq	.+22     	; 0xbf6 <_VAL_NULL75>
 be0:	81 30       	cpi	r24, 0x01	; 1
 be2:	99 f0       	breq	.+38     	; 0xc0a <_VAL_NOT_NULL75>
 be4:	41 e0       	ldi	r20, 0x01	; 1
 be6:	24 1b       	sub	r18, r20
 be8:	40 e0       	ldi	r20, 0x00	; 0
 bea:	34 0b       	sbc	r19, r20
 bec:	20 83       	st	Z, r18
 bee:	31 83       	std	Z+1, r19	; 0x01
 bf0:	42 2f       	mov	r20, r18
 bf2:	43 2b       	or	r20, r19
 bf4:	51 f4       	brne	.+20     	; 0xc0a <_VAL_NOT_NULL75>

00000bf6 <_VAL_NULL75>:
 bf6:	e2 e3       	ldi	r30, 0x32	; 50
 bf8:	f1 e0       	ldi	r31, 0x01	; 1
 bfa:	20 91 07 01 	lds	r18, 0x0107
 bfe:	e2 0f       	add	r30, r18
 c00:	20 e0       	ldi	r18, 0x00	; 0
 c02:	f2 1f       	adc	r31, r18
 c04:	81 e0       	ldi	r24, 0x01	; 1
 c06:	80 83       	st	Z, r24
 c08:	08 c0       	rjmp	.+16     	; 0xc1a <_EXIT_SLP_TIME75>

00000c0a <_VAL_NOT_NULL75>:
 c0a:	e2 e3       	ldi	r30, 0x32	; 50
 c0c:	f1 e0       	ldi	r31, 0x01	; 1
 c0e:	20 91 07 01 	lds	r18, 0x0107
 c12:	e2 0f       	add	r30, r18
 c14:	20 e0       	ldi	r18, 0x00	; 0
 c16:	f2 1f       	adc	r31, r18
 c18:	80 81       	ld	r24, Z

00000c1a <_EXIT_SLP_TIME75>:
 c1a:	81 30       	cpi	r24, 0x01	; 1
 c1c:	19 f0       	breq	.+6      	; 0xc24 <_KER_CALC_PRIO74>
 c1e:	84 30       	cpi	r24, 0x04	; 4
 c20:	09 f0       	breq	.+2      	; 0xc24 <_KER_CALC_PRIO74>
 c22:	12 c0       	rjmp	.+36     	; 0xc48 <_KER_SCH_NEXT74>

00000c24 <_KER_CALC_PRIO74>:
 c24:	ec e3       	ldi	r30, 0x3C	; 60
 c26:	f1 e0       	ldi	r31, 0x01	; 1
 c28:	20 e0       	ldi	r18, 0x00	; 0
 c2a:	80 91 07 01 	lds	r24, 0x0107
 c2e:	e8 0f       	add	r30, r24
 c30:	f2 1f       	adc	r31, r18
 c32:	80 81       	ld	r24, Z
 c34:	20 91 09 01 	lds	r18, 0x0109
 c38:	82 17       	cp	r24, r18
 c3a:	30 f4       	brcc	.+12     	; 0xc48 <_KER_SCH_NEXT74>
 c3c:	80 93 09 01 	sts	0x0109, r24
 c40:	20 91 07 01 	lds	r18, 0x0107
 c44:	20 93 0a 01 	sts	0x010A, r18

00000c48 <_KER_SCH_NEXT74>:
 c48:	20 91 07 01 	lds	r18, 0x0107
 c4c:	23 95       	inc	r18
 c4e:	30 91 08 01 	lds	r19, 0x0108
 c52:	23 17       	cp	r18, r19
 c54:	08 f4       	brcc	.+2      	; 0xc58 <_KER_SCH_EXIT74>
 c56:	b4 cf       	rjmp	.-152    	; 0xbc0 <_KER_SCH_LOOP74>

00000c58 <_KER_SCH_EXIT74>:
 c58:	20 91 0a 01 	lds	r18, 0x010A
 c5c:	20 93 07 01 	sts	0x0107, r18
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 c60:	e0 e1       	ldi	r30, 0x10	; 16
 c62:	f1 e0       	ldi	r31, 0x01	; 1
 c64:	20 91 07 01 	lds	r18, 0x0107
 c68:	22 0f       	add	r18, r18
 c6a:	e2 0f       	add	r30, r18
 c6c:	20 e0       	ldi	r18, 0x00	; 0
 c6e:	f2 1f       	adc	r31, r18
 c70:	20 81       	ld	r18, Z
 c72:	31 81       	ldd	r19, Z+1	; 0x01
 c74:	2d bf       	out	0x3d, r18	; 61
 c76:	3e bf       	out	0x3e, r19	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 c78:	ff 91       	pop	r31
 c7a:	ef 91       	pop	r30
 c7c:	df 91       	pop	r29
 c7e:	cf 91       	pop	r28
 c80:	bf 91       	pop	r27
 c82:	af 91       	pop	r26
 c84:	9f 91       	pop	r25
 c86:	8f 91       	pop	r24
 c88:	7f 91       	pop	r23
 c8a:	6f 91       	pop	r22
 c8c:	5f 91       	pop	r21
 c8e:	4f 91       	pop	r20
 c90:	3f 91       	pop	r19
 c92:	2f 91       	pop	r18
 c94:	1f 91       	pop	r17
 c96:	0f 91       	pop	r16
 c98:	ff 90       	pop	r15
 c9a:	ef 90       	pop	r14
 c9c:	df 90       	pop	r13
 c9e:	cf 90       	pop	r12
 ca0:	bf 90       	pop	r11
 ca2:	af 90       	pop	r10
 ca4:	9f 90       	pop	r9
 ca6:	8f 90       	pop	r8
 ca8:	7f 90       	pop	r7
 caa:	6f 90       	pop	r6
 cac:	5f 90       	pop	r5
 cae:	4f 90       	pop	r4
 cb0:	3f 90       	pop	r3
 cb2:	2f 90       	pop	r2
 cb4:	1f 90       	pop	r1
 cb6:	0f 90       	pop	r0
 cb8:	0f be       	out	0x3f, r0	; 63
 cba:	0f 90       	pop	r0
 cbc:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
 cbe:	08 95       	ret

00000cc0 <Kernel_Task_Sleep_Time_Get>:
;used registers          : R18, R24, R25, R30(ZL), R31(ZH)                                     
;arg registers           : R24(TaskID)                                                         
;return registers        : R25:R24(SleepTime)                                                  
;unsafe access registers : R18, R24, R25, R30(ZL), R31(ZH)                                     
Kernel_Task_Sleep_Time_Get:                               ;total 1.88uS @8MHz     ( 15 clocks) 
		MOV   R18                , R24                    ;copy                   (  1 clock ) 
 cc0:	28 2f       	mov	r18, r24
		LSL   R18                                         ;x2                     (  1 clock ) 
 cc2:	22 0f       	add	r18, r18
		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 cc4:	e6 e4       	ldi	r30, 0x46	; 70
		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 cc6:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
 cc8:	e2 0f       	add	r30, r18
		LDI   R18                , 0x00                   ;load 0                 (  1 clock ) 
 cca:	20 e0       	ldi	r18, 0x00	; 0
		ADC   ZH                 , R18                    ;add high byte+carry    (  1 clock ) 
 ccc:	f2 1f       	adc	r31, r18
		LDD   R24                , Z+0                    ;load sleep time        (  2 clocks) 
 cce:	80 81       	ld	r24, Z
		LDD   R25                , Z+1                    ;load sleep time        (  2 clocks) 
 cd0:	91 81       	ldd	r25, Z+1	; 0x01
		RET                                               ;return from subroutine (  4 clocks) 
 cd2:	08 95       	ret

00000cd4 <Kernel_Task_Status_Get>:
;used registers          : R18, R24, R30(ZL), R31(ZH)                                          
;arg registers           : R24(TaskID)                                                         
;return registers        : R24(TaskSts)                                                        
;unsafe access registers : R18, R24, R30(ZL), R31(ZH)                                          
Kernel_Task_Status_Get:                                   ;total 1.50uS @8MHz     ( 12 clocks) 
		MOV   R18                , R24                    ;copy                   (  1 clock ) 
 cd4:	28 2f       	mov	r18, r24
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 cd6:	e2 e3       	ldi	r30, 0x32	; 50
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 cd8:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
 cda:	e2 0f       	add	r30, r18
		LDI   R18                , 0x00                   ;load 0                 (  1 clock ) 
 cdc:	20 e0       	ldi	r18, 0x00	; 0
		ADC   ZH                 , R18                    ;add high byte+carry    (  1 clock ) 
 cde:	f2 1f       	adc	r31, r18
		LD    R24                , Z                      ;load task status       (  2 clocks) 
 ce0:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 ce2:	08 95       	ret

00000ce4 <Kernel_NTask_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(NTask)                                                          
;unsafe access registers : R24                                                                 
Kernel_NTask_Get:                                         ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                 , KerBase+OFB_NTSK      ;load ntask             (  2 clock ) 
 ce4:	80 91 08 01 	lds	r24, 0x0108
		RET                                               ;return from subroutine (  4 clocks) 
 ce8:	08 95       	ret

00000cea <Kernel_Task_Prio_Get>:
;arg registers           : R24(TaskID)                                                         
;return registers        : R24(TaskPriority)                                                   
;unsafe access registers : R18, R24, R30(ZL), R31(ZH)                                          
Kernel_Task_Prio_Get:                                     ;total 1.50uS @8MHz     ( 12 clocks) 
		;get priority of the task id, arg (task_id->R24), return R24                           
		MOV   R18                , R24                    ;copy task_id           (  1 clock ) 
 cea:	28 2f       	mov	r18, r24
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 cec:	ec e3       	ldi	r30, 0x3C	; 60
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 cee:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
 cf0:	e2 0f       	add	r30, r18
		LDI   R18                , 0x00                   ;clear reg              (  1 clock ) 
 cf2:	20 e0       	ldi	r18, 0x00	; 0
		ADC   ZH                 , R18                    ;add high byte+carry    (  1 clock ) 
 cf4:	f2 1f       	adc	r31, r18
		LD    R24                , Z                      ;load priority          (  2 clocks) 
 cf6:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 cf8:	08 95       	ret

00000cfa <Kernel_Lowest_Prio_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(LowestPriorityVal)                                              
;unsafe access registers : R24                                                                 
Kernel_Lowest_Prio_Get:                                   ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
 cfa:	80 91 09 01 	lds	r24, 0x0109
		RET                                               ;return from subroutine (  4 clocks) 
 cfe:	08 95       	ret

00000d00 <Kernel_High_Prio_Task_ID_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(HighstPriorityTaskID)->UserTaskID (Excluding Idle Task)         
;unsafe access registers : R24                                                                 
Kernel_High_Prio_Task_ID_Get:                             ;total 0.88uS @8MHz     (  7 clocks) 
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 d00:	80 91 0a 01 	lds	r24, 0x010A
		DEC   R24                                         ;decrement by 1         (  1 clock ) 
 d04:	8a 95       	dec	r24
		RET                                               ;return from subroutine (  4 clocks) 
 d06:	08 95       	ret

00000d08 <Kernel_Abs_High_Prio_Task_ID_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(HighstPriorityTaskID)->AbsoluteTaskID (Including Idle Task)     
;unsafe access registers : R24                                                                 
Kernel_Abs_High_Prio_Task_ID_Get:                         ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 d08:	80 91 0a 01 	lds	r24, 0x010A
		RET                                               ;return from subroutine (  4 clocks) 
 d0c:	08 95       	ret

00000d0e <Kernel_CPU_Usage_Get>:
;arg registers           : None                                                                
;return registers        : R24(CurrentCpuUsage)->In percentage                                 
;unsafe access registers : R24                                                                 
Kernel_CPU_Usage_Get:                                     ;total 0.75uS @8MHz     (  6 clocks) 
		;get cpu usage, return R24                                                             
		LDS   R24                , KerBase+OFB_USAGE      ;load cpu usage         (  2 clocks) 
 d0e:	80 91 0d 01 	lds	r24, 0x010D
		RET                                               ;return from subroutine (  4 clocks) 
 d12:	08 95       	ret

00000d14 <Debug_Init>:


;;===================================debug init starting====================================;; 
Debug_Init:                                               ;total 2.38uS @8MHz     ( 19 clocks) 
        ;init registers for UART0 (Arg R25:R24->UBRRH:UBRRL)                                   
		LDI   R16                , (1<<1)                 ;mask U2x               (  1 clock ) 
 d14:	02 e0       	ldi	r16, 0x02	; 2
		STS   SRUCSR0A           , R16                    ;load val to UCSR0A     (  2 clocks) 
 d16:	00 93 c0 00 	sts	0x00C0, r16
		MOV   R16                , R25                    ;copy R25->baud rate H  (  1 clock ) 
 d1a:	09 2f       	mov	r16, r25
		STS   SRUBRR0H           , R16                    ;load val to UBRR0H     (  2 clocks) 
 d1c:	00 93 c5 00 	sts	0x00C5, r16
		MOV   R16                , R24                    ;copy R24->baud rate L  (  1 clock ) 
 d20:	08 2f       	mov	r16, r24
		STS   SRUBRR0L           , R16                    ;load val to UBRR0L     (  2 clocks) 
 d22:	00 93 c4 00 	sts	0x00C4, r16
		LDI   R16                , (1<<1)|(1<<2)          ;config 8 data bit      (  1 clock ) 
 d26:	06 e0       	ldi	r16, 0x06	; 6
		STS   SRUCSR0C           , R16                    ;load val to UCSR0C     (  2 clocks) 
 d28:	00 93 c2 00 	sts	0x00C2, r16
		LDI   R16                , (1<<3)                 ;enable tx              (  1 clock ) 
 d2c:	08 e0       	ldi	r16, 0x08	; 8
		STS   SRUCSR0B           , R16                    ;load val to UCSR0B     (  2 clocks) 
 d2e:	00 93 c1 00 	sts	0x00C1, r16
        RET                                               ;return from subroutine (  4 clocks) 
 d32:	08 95       	ret

00000d34 <Debug_Tx_Byte>:


;;====================================debug tx starting=====================================;; 
Debug_Tx_Byte:                                            ;total 2.00uS+LT @8MHz  ( 16 clocks) 
		;write single byte to data register (Arg R24)                                          
		PUSH  R16                                         ;save reg               (  2 clocks) 
 d34:	0f 93       	push	r16
		STS   SRUDR0             , R24                    ;load val to UDR0       (  2 clocks) 
 d36:	80 93 c6 00 	sts	0x00C6, r24

00000d3a <__UDRE0_CLEARED>:
                                                                                               
    __UDRE0_CLEARED:                                      ;undefined loop wrt ck               
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16     (  2 clocks) 
 d3a:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x05                   ;skip if UDRE0 is set   (  2 clocks) 
 d3e:	05 ff       	sbrs	r16, 5
		RJMP  __UDRE0_CLEARED                             ;wait until UDRE0 is set(  2 clocks) 
 d40:	fc cf       	rjmp	.-8      	; 0xd3a <__UDRE0_CLEARED>
		POP   R16                                         ;restore reg            (  2 clocks) 
 d42:	0f 91       	pop	r16
        RET                                               ;return from subroutine (  4 clocks) 
 d44:	08 95       	ret

00000d46 <Debug_Tx_Word>:


;;==================================debug tx word starting==================================;; 
Debug_Tx_Word:                                            ;total 2.00uS+LT @8MHz  ( 16 clocks) 
		;write 2 bytes, (Arg R24, R25), Args retained                                          
		PUSH  R24                                         ;save reg               (  2 clocks) 
 d46:	8f 93       	push	r24
		MOV   R24                , R25                    ;copy reg               (  1 clock ) 
 d48:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte                               ;send via uart          ( 21 clocks) 
 d4a:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
        POP   R24                                         ;restore reg            (  2 clocks) 
 d4e:	8f 91       	pop	r24
		CALL  Debug_Tx_Byte                               ;send via uart          ( 21 clocks) 
 d50:	0e 94 9a 06 	call	0xd34	; 0xd34 <Debug_Tx_Byte>
        RET                                               ;return from subroutine (  4 clocks) 
 d54:	08 95       	ret

00000d56 <Debug_Tx_Byte_Conf>:


;;================================debug tx confirm starting=================================;; 
Debug_Tx_Byte_Conf:                                       ;total 2.63uS+LT @8MHz  ( 21 clocks) 
        ;write 1 byte, (Arg R24), Args retained                                                
		PUSH  R16                                         ;save reg               (  2 clocks) 
 d56:	0f 93       	push	r16
		STS   SRUDR0             , R24                    ;load val to UDR0,      (  2 clocks) 
 d58:	80 93 c6 00 	sts	0x00C6, r24

00000d5c <__TXC0_CLEARED>:
    __TXC0_CLEARED:                                                                            
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,    (  2 clocks) 
 d5c:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x06                   ;skip if TXC0 is set,   (  2 clocks) 
 d60:	06 ff       	sbrs	r16, 6
		RJMP  __TXC0_CLEARED                              ;wait until TXC0 is set (  2 clocks) 
 d62:	fc cf       	rjmp	.-8      	; 0xd5c <__TXC0_CLEARED>
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,    (  2 clocks) 
 d64:	00 91 c0 00 	lds	r16, 0x00C0
		ORI   R16                , (1<<6)                 ;mask bit 6,            (  1 clock ) 
 d68:	00 64       	ori	r16, 0x40	; 64
		STS   SRUCSR0A           , R16                    ;write reg with bit msk (  2 clocks) 
 d6a:	00 93 c0 00 	sts	0x00C0, r16
		POP   R16                                         ;restore reg            (  2 clocks) 
 d6e:	0f 91       	pop	r16
        RET                                               ;return from subroutine (  4 clocks) 
 d70:	08 95       	ret

00000d72 <Debug_Tx_Word_Conf>:


;;==============================debug tx word confirm starting==============================;; 
Debug_Tx_Word_Conf:                                       ;total 6.38uS+LT @8MHz  ( 51 clocks) 
        ;write 2 bytes, (Arg R24, R25), Args retained                                          
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 d72:	0e 94 ab 06 	call	0xd56	; 0xd56 <Debug_Tx_Byte_Conf>
		PUSH  R24                                         ;save reg               (  2 clocks) 
 d76:	8f 93       	push	r24
		MOV   R24                , R25                    ;copy R25 to R24        (  1 clock ) 
 d78:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 d7a:	0e 94 ab 06 	call	0xd56	; 0xd56 <Debug_Tx_Byte_Conf>
		POP   R24                                         ;restore reg            (  2 clocks) 
 d7e:	8f 91       	pop	r24
        RET                                               ;return from subroutine (  4 clocks) 
 d80:	08 95       	ret

00000d82 <Debug_Tx_DWord_Conf>:


;;==============================debug tx dword confirm starting=============================;; 
Debug_Tx_DWord_Conf:                                      ;total 12.38uS+LT @8MHz ( 99 clocks) 
        ;write 4 bytes, (Arg R22-R25), Args retained                                           
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks) 
 d82:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R22                    ;copy R22 to R24          (1 clock ) 
 d86:	86 2f       	mov	r24, r22
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 d88:	0e 94 ab 06 	call	0xd56	; 0xd56 <Debug_Tx_Byte_Conf>
		MOV   R24                , R23                    ;copy R23 to R24          (1 clock ) 
 d8c:	87 2f       	mov	r24, r23
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 d8e:	0e 94 ab 06 	call	0xd56	; 0xd56 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24              (2 clocks) 
 d92:	80 91 4a 00 	lds	r24, 0x004A
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 d96:	0e 94 ab 06 	call	0xd56	; 0xd56 <Debug_Tx_Byte_Conf>
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks) 
 d9a:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R25                    ;copy R22 to R24          (1 clock ) 
 d9e:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 da0:	0e 94 ab 06 	call	0xd56	; 0xd56 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24 val,         (2 clocks) 
 da4:	80 91 4a 00 	lds	r24, 0x004A
        RET                                               ;return from subroutine,  (4 clocks) 
 da8:	08 95       	ret

00000daa <Debug_Tx_From_RAM>:


;;=============================debug tx confirm from ram starting===========================;; 
Debug_Tx_From_RAM:                                        ;total 4.38uS+LT @8MHz  ( 35 clocks) 
        ;print data from RAM address (Arg R24-R25)                                             
		MOV   R16                , R30                    ;copy R30 to R16          (1 clock ) 
 daa:	0e 2f       	mov	r16, r30
		MOV   R17                , R31                    ;copy R31 to R17          (1 clock ) 
 dac:	1f 2f       	mov	r17, r31
		MOV   R18                , R24                    ;copy R24 to R18          (1 clock ) 
 dae:	28 2f       	mov	r18, r24
		MOV   R30                , R24                    ;copy R22 to R24          (1 clock ) 
 db0:	e8 2f       	mov	r30, r24
		MOV   R31                , R25                    ;copy R22 to R24          (1 clock ) 
 db2:	f9 2f       	mov	r31, r25
		LD    R24                , Z                      ;load val to R24          (2 clocks) 
 db4:	80 81       	ld	r24, Z
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 db6:	0e 94 ab 06 	call	0xd56	; 0xd56 <Debug_Tx_Byte_Conf>
		MOV   R30                , R16                    ;copy R16 to R30          (1 clock ) 
 dba:	e0 2f       	mov	r30, r16
		MOV   R31                , R17                    ;copy R17 to R31          (1 clock ) 
 dbc:	f1 2f       	mov	r31, r17
		MOV   R24                , R18                    ;copy R18 to R24          (1 clock ) 
 dbe:	82 2f       	mov	r24, r18
        RET                                               ;return from subroutine,  (4 clocks) 
 dc0:	08 95       	ret

00000dc2 <Debug_Tx_RAM_Area>:

;;=============================debug tx confirm ram area starting===========================;; 
Debug_Tx_RAM_Area:                                        ;5.5uS+LT x R22 @8MHz   ( 44 clocks) 
        ;print data from RAM address (arguments R24:R25, R22)                                  
	__DUMP_BYTES:                                                                              
	    CALL  Debug_Tx_From_RAM                           ;send via uart from ram              
 dc2:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Debug_Tx_From_RAM>
		SUBI  R24                , 0x01                   ;decrement from LSByte               
 dc6:	81 50       	subi	r24, 0x01	; 1
        SBCI  R25                , 0x00                   ;decrement if carry                  
 dc8:	90 40       	sbci	r25, 0x00	; 0
		SUBI  R22                , 0x01                   ;decrement                           
 dca:	61 50       	subi	r22, 0x01	; 1
		BRNE  __DUMP_BYTES                                                                     
 dcc:	d1 f7       	brne	.-12     	; 0xdc2 <Debug_Tx_RAM_Area>
        RET                                               ;return from subroutine,  (4 clocks) 
 dce:	08 95       	ret

00000dd0 <_exit>:
 dd0:	f8 94       	cli

00000dd2 <__stop_program>:
 dd2:	ff cf       	rjmp	.-2      	; 0xdd2 <__stop_program>
