
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000027c  00000310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000027c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010a  0080010a  0000031a  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  0000031a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000078  00000000  00000000  0000035a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001f9  00000000  00000000  000003d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000014d  00000000  00000000  000005cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000204  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  0000091c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000015f  00000000  00000000  0000097c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000119  00000000  00000000  00000adb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e7       	ldi	r30, 0x7C	; 124
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 3c 01 	jmp	0x278	; 0x278 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <util/delay.h>
#include "systick.h"

int main(void){
  
  SysTick_Enable(500);
  a6:	84 ef       	ldi	r24, 0xF4	; 244
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	0e 94 58 00 	call	0xb0	; 0xb0 <SysTick_Enable>
  ae:	ff cf       	rjmp	.-2      	; 0xae <main+0x8>

000000b0 <SysTick_Enable>:
  .OVFUpdateValue = 0,
  .UpdateRate = 0
};


void SysTick_Enable(uint16_t UpdateRateHz){
  b0:	8f 92       	push	r8
  b2:	9f 92       	push	r9
  b4:	bf 92       	push	r11
  b6:	cf 92       	push	r12
  b8:	df 92       	push	r13
  ba:	ef 92       	push	r14
  bc:	ff 92       	push	r15
  be:	0f 93       	push	r16
  c0:	1f 93       	push	r17
  c2:	df 93       	push	r29
  c4:	cf 93       	push	r28
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
  ca:	2a 97       	sbiw	r28, 0x0a	; 10
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	f8 94       	cli
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	cd bf       	out	0x3d, r28	; 61
  d6:	4c 01       	movw	r8, r24
  uint8_t  clock_div_index = 0;
  uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
  d8:	de 01       	movw	r26, r28
  da:	11 96       	adiw	r26, 0x01	; 1
  dc:	e0 e0       	ldi	r30, 0x00	; 0
  de:	f1 e0       	ldi	r31, 0x01	; 1
  e0:	8a e0       	ldi	r24, 0x0A	; 10
  e2:	01 90       	ld	r0, Z+
  e4:	0d 92       	st	X+, r0
  e6:	81 50       	subi	r24, 0x01	; 1
  e8:	e1 f7       	brne	.-8      	; 0xe2 <SysTick_Enable+0x32>
  int32_t  temp, curr_freq;

  temp = F_CPU;
  temp /= UpdateRateHz;
  ea:	94 01       	movw	r18, r8
  ec:	40 e0       	ldi	r20, 0x00	; 0
  ee:	50 e0       	ldi	r21, 0x00	; 0
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	7b e1       	ldi	r23, 0x1B	; 27
  f4:	87 eb       	ldi	r24, 0xB7	; 183
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <__divmodsi4>
  fc:	b2 2e       	mov	r11, r18
  fe:	c3 2e       	mov	r12, r19
 100:	d4 2e       	mov	r13, r20
 102:	05 2f       	mov	r16, r21
 104:	7e 01       	movw	r14, r28
 106:	08 94       	sec
 108:	e1 1c       	adc	r14, r1
 10a:	f1 1c       	adc	r15, r1
 10c:	c9 01       	movw	r24, r18
 10e:	da 01       	movw	r26, r20
 110:	9c 01       	movw	r18, r24
 112:	ad 01       	movw	r20, r26
 114:	10 e0       	ldi	r17, 0x00	; 0
 116:	13 c0       	rjmp	.+38     	; 0x13e <SysTick_Enable+0x8e>
  clock_div_index = 0;
  curr_freq = temp;
	
  while( curr_freq > 0xFF ){
	curr_freq  = temp;
	curr_freq /= clock_div_factor[clock_div_index];
 118:	f7 01       	movw	r30, r14
 11a:	21 91       	ld	r18, Z+
 11c:	31 91       	ld	r19, Z+
 11e:	7f 01       	movw	r14, r30
 120:	40 e0       	ldi	r20, 0x00	; 0
 122:	50 e0       	ldi	r21, 0x00	; 0
 124:	6b 2d       	mov	r22, r11
 126:	7c 2d       	mov	r23, r12
 128:	8d 2d       	mov	r24, r13
 12a:	90 2f       	mov	r25, r16
 12c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <__divmodsi4>
 130:	c9 01       	movw	r24, r18
 132:	da 01       	movw	r26, r20
 134:	9c 01       	movw	r18, r24
 136:	ad 01       	movw	r20, r26
	clock_div_index++;
 138:	1f 5f       	subi	r17, 0xFF	; 255
	if(clock_div_index == 5){
 13a:	15 30       	cpi	r17, 0x05	; 5
 13c:	31 f0       	breq	.+12     	; 0x14a <SysTick_Enable+0x9a>
  temp /= UpdateRateHz;
	
  clock_div_index = 0;
  curr_freq = temp;
	
  while( curr_freq > 0xFF ){
 13e:	2f 3f       	cpi	r18, 0xFF	; 255
 140:	31 05       	cpc	r19, r1
 142:	41 05       	cpc	r20, r1
 144:	51 05       	cpc	r21, r1
 146:	09 f0       	breq	.+2      	; 0x14a <SysTick_Enable+0x9a>
 148:	3c f7       	brge	.-50     	; 0x118 <SysTick_Enable+0x68>
	if(clock_div_index == 5){
	  break;
	}
  }
	
  clock_div_index -= 1;
 14a:	81 2f       	mov	r24, r17
 14c:	81 50       	subi	r24, 0x01	; 1
	
  TCCR0A = 0x00;
 14e:	14 bc       	out	0x24, r1	; 36
  TCCR0B = 0x00;
 150:	15 bc       	out	0x25, r1	; 37
  TIMSK0 = 0x00;
 152:	10 92 6e 00 	sts	0x006E, r1
  TIFR0  = 0x00;
 156:	15 ba       	out	0x15, r1	; 21
  OCR0A  = 0x00;
 158:	17 bc       	out	0x27, r1	; 39
  OCR0B  = 0x00;
 15a:	18 bc       	out	0x28, r1	; 40
  TCNT0  = 0x00;
 15c:	16 bc       	out	0x26, r1	; 38
  OCR0A  = 0x00;
 15e:	17 bc       	out	0x27, r1	; 39
	
  if(clock_div_index == 0){
 160:	88 23       	and	r24, r24
 162:	11 f4       	brne	.+4      	; 0x168 <SysTick_Enable+0xb8>
	TCCR0B = (1<<CS00);
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	0f c0       	rjmp	.+30     	; 0x186 <SysTick_Enable+0xd6>
  }
  else if(clock_div_index == 1){
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	11 f4       	brne	.+4      	; 0x170 <SysTick_Enable+0xc0>
	TCCR0B = (1<<CS01);
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	0b c0       	rjmp	.+22     	; 0x186 <SysTick_Enable+0xd6>
  }
  else if(clock_div_index == 2){
 170:	82 30       	cpi	r24, 0x02	; 2
 172:	11 f4       	brne	.+4      	; 0x178 <SysTick_Enable+0xc8>
	TCCR0B = (1<<CS00)|(1<<CS01);
 174:	83 e0       	ldi	r24, 0x03	; 3
 176:	07 c0       	rjmp	.+14     	; 0x186 <SysTick_Enable+0xd6>
  }
  else if(clock_div_index == 3){
 178:	83 30       	cpi	r24, 0x03	; 3
 17a:	11 f4       	brne	.+4      	; 0x180 <SysTick_Enable+0xd0>
	TCCR0B = (1<<CS02);
 17c:	84 e0       	ldi	r24, 0x04	; 4
 17e:	03 c0       	rjmp	.+6      	; 0x186 <SysTick_Enable+0xd6>
  }
  else if(clock_div_index == 4){
 180:	84 30       	cpi	r24, 0x04	; 4
 182:	11 f4       	brne	.+4      	; 0x188 <SysTick_Enable+0xd8>
	TCCR0B = (1<<CS00)|(1<<CS02);
 184:	85 e0       	ldi	r24, 0x05	; 5
 186:	85 bd       	out	0x25, r24	; 37
  }
  
  SysTick.OVFUpdateValue = (0xFF-curr_freq);
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	82 1b       	sub	r24, r18
 18e:	93 0b       	sbc	r25, r19
 190:	90 93 0d 01 	sts	0x010D, r25
 194:	80 93 0c 01 	sts	0x010C, r24
  TCNT0  = SysTick.OVFUpdateValue;
 198:	80 91 0c 01 	lds	r24, 0x010C
 19c:	90 91 0d 01 	lds	r25, 0x010D
 1a0:	86 bd       	out	0x26, r24	; 38
  TIMSK0 = (1<<TOIE0);
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	80 93 6e 00 	sts	0x006E, r24
  sei();
 1a8:	78 94       	sei
  SysTick.UpdateRate = UpdateRateHz;
 1aa:	90 92 0f 01 	sts	0x010F, r9
 1ae:	80 92 0e 01 	sts	0x010E, r8
}
 1b2:	2a 96       	adiw	r28, 0x0a	; 10
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	f8 94       	cli
 1b8:	de bf       	out	0x3e, r29	; 62
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	cd bf       	out	0x3d, r28	; 61
 1be:	cf 91       	pop	r28
 1c0:	df 91       	pop	r29
 1c2:	1f 91       	pop	r17
 1c4:	0f 91       	pop	r16
 1c6:	ff 90       	pop	r15
 1c8:	ef 90       	pop	r14
 1ca:	df 90       	pop	r13
 1cc:	cf 90       	pop	r12
 1ce:	bf 90       	pop	r11
 1d0:	9f 90       	pop	r9
 1d2:	8f 90       	pop	r8
 1d4:	08 95       	ret

000001d6 <SysTick_ISR_Executables>:


void SysTick_ISR_Executables(void){
  
  
}
 1d6:	08 95       	ret

000001d8 <__vector_16>:




ISR(TIMER0_OVF_vect){
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	8f 93       	push	r24
 1e4:	9f 93       	push	r25
  TCNT0  = SysTick.OVFUpdateValue;
 1e6:	80 91 0c 01 	lds	r24, 0x010C
 1ea:	90 91 0d 01 	lds	r25, 0x010D
 1ee:	86 bd       	out	0x26, r24	; 38
  SysTick_ISR_Executables();
 1f0:	9f 91       	pop	r25
 1f2:	8f 91       	pop	r24
 1f4:	0f 90       	pop	r0
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	0f 90       	pop	r0
 1fa:	1f 90       	pop	r1
 1fc:	18 95       	reti

000001fe <__divmodsi4>:
 1fe:	97 fb       	bst	r25, 7
 200:	09 2e       	mov	r0, r25
 202:	05 26       	eor	r0, r21
 204:	0e d0       	rcall	.+28     	; 0x222 <__divmodsi4_neg1>
 206:	57 fd       	sbrc	r21, 7
 208:	04 d0       	rcall	.+8      	; 0x212 <__divmodsi4_neg2>
 20a:	14 d0       	rcall	.+40     	; 0x234 <__udivmodsi4>
 20c:	0a d0       	rcall	.+20     	; 0x222 <__divmodsi4_neg1>
 20e:	00 1c       	adc	r0, r0
 210:	38 f4       	brcc	.+14     	; 0x220 <__divmodsi4_exit>

00000212 <__divmodsi4_neg2>:
 212:	50 95       	com	r21
 214:	40 95       	com	r20
 216:	30 95       	com	r19
 218:	21 95       	neg	r18
 21a:	3f 4f       	sbci	r19, 0xFF	; 255
 21c:	4f 4f       	sbci	r20, 0xFF	; 255
 21e:	5f 4f       	sbci	r21, 0xFF	; 255

00000220 <__divmodsi4_exit>:
 220:	08 95       	ret

00000222 <__divmodsi4_neg1>:
 222:	f6 f7       	brtc	.-4      	; 0x220 <__divmodsi4_exit>
 224:	90 95       	com	r25
 226:	80 95       	com	r24
 228:	70 95       	com	r23
 22a:	61 95       	neg	r22
 22c:	7f 4f       	sbci	r23, 0xFF	; 255
 22e:	8f 4f       	sbci	r24, 0xFF	; 255
 230:	9f 4f       	sbci	r25, 0xFF	; 255
 232:	08 95       	ret

00000234 <__udivmodsi4>:
 234:	a1 e2       	ldi	r26, 0x21	; 33
 236:	1a 2e       	mov	r1, r26
 238:	aa 1b       	sub	r26, r26
 23a:	bb 1b       	sub	r27, r27
 23c:	fd 01       	movw	r30, r26
 23e:	0d c0       	rjmp	.+26     	; 0x25a <__udivmodsi4_ep>

00000240 <__udivmodsi4_loop>:
 240:	aa 1f       	adc	r26, r26
 242:	bb 1f       	adc	r27, r27
 244:	ee 1f       	adc	r30, r30
 246:	ff 1f       	adc	r31, r31
 248:	a2 17       	cp	r26, r18
 24a:	b3 07       	cpc	r27, r19
 24c:	e4 07       	cpc	r30, r20
 24e:	f5 07       	cpc	r31, r21
 250:	20 f0       	brcs	.+8      	; 0x25a <__udivmodsi4_ep>
 252:	a2 1b       	sub	r26, r18
 254:	b3 0b       	sbc	r27, r19
 256:	e4 0b       	sbc	r30, r20
 258:	f5 0b       	sbc	r31, r21

0000025a <__udivmodsi4_ep>:
 25a:	66 1f       	adc	r22, r22
 25c:	77 1f       	adc	r23, r23
 25e:	88 1f       	adc	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	1a 94       	dec	r1
 264:	69 f7       	brne	.-38     	; 0x240 <__udivmodsi4_loop>
 266:	60 95       	com	r22
 268:	70 95       	com	r23
 26a:	80 95       	com	r24
 26c:	90 95       	com	r25
 26e:	9b 01       	movw	r18, r22
 270:	ac 01       	movw	r20, r24
 272:	bd 01       	movw	r22, r26
 274:	cf 01       	movw	r24, r30
 276:	08 95       	ret

00000278 <_exit>:
 278:	f8 94       	cli

0000027a <__stop_program>:
 27a:	ff cf       	rjmp	.-2      	; 0x27a <__stop_program>
