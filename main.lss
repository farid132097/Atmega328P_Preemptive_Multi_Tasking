
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a80  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000546  00800100  00800100  00000af4  2**0
                  ALLOC
  2 .stab         00000cb4  00000000  00000000  00000af4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000006e  00000000  00000000  000017a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00001816  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000dd  00000000  00000000  00001856  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000002a4  00000000  00000000  00001933  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000f3  00000000  00000000  00001bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000030c  00000000  00000000  00001cca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00001fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000141  00000000  00000000  000020b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000236  00000000  00000000  000021f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 21 02 	jmp	0x442	; 0x442 <__vector_16>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	00 00       	nop
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 00       	nop
  76:	00 00       	nop
  78:	00 00       	nop
  7a:	00 00       	nop
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 00       	nop
  82:	00 00       	nop
  84:	00 00       	nop
  86:	00 00       	nop
  88:	dc c1       	rjmp	.+952    	; 0x442 <__vector_16>

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61
  96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  9a:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:


int main(void) {
    
	
	Kernel_SysTick_Reg_Init(0x03, 0x82);
  a2:	83 e0       	ldi	r24, 0x03	; 3
  a4:	62 e8       	ldi	r22, 0x82	; 130
  a6:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <Kernel_SysTick_Reg_Init>
	
	Kernel_Task_Init(Tasks_Task0, 0, 0);
  aa:	84 e9       	ldi	r24, 0x94	; 148
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	60 e0       	ldi	r22, 0x00	; 0
  b0:	40 e0       	ldi	r20, 0x00	; 0
  b2:	0e 94 37 03 	call	0x66e	; 0x66e <Kernel_Task_Init>
	Kernel_Task_Init(Tasks_Task9, 1, 0);
  b6:	85 e9       	ldi	r24, 0x95	; 149
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	61 e0       	ldi	r22, 0x01	; 1
  bc:	40 e0       	ldi	r20, 0x00	; 0
  be:	0e 94 37 03 	call	0x66e	; 0x66e <Kernel_Task_Init>
	Kernel_Task_Init(Tasks_Task2, 2, 0);
  c2:	84 e4       	ldi	r24, 0x44	; 68
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	62 e0       	ldi	r22, 0x02	; 2
  c8:	40 e0       	ldi	r20, 0x00	; 0
  ca:	0e 94 37 03 	call	0x66e	; 0x66e <Kernel_Task_Init>
	Kernel_Task_Init(Tasks_Task3, 3, 0);
  ce:	8b e2       	ldi	r24, 0x2B	; 43
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	63 e0       	ldi	r22, 0x03	; 3
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	0e 94 37 03 	call	0x66e	; 0x66e <Kernel_Task_Init>
	Kernel_Task_Init(Tasks_Task4, 4, 0);
  da:	82 e1       	ldi	r24, 0x12	; 18
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	64 e0       	ldi	r22, 0x04	; 4
  e0:	40 e0       	ldi	r20, 0x00	; 0
  e2:	0e 94 37 03 	call	0x66e	; 0x66e <Kernel_Task_Init>
	Kernel_Task_Init(Tasks_Task5, 5, 0);
  e6:	89 ef       	ldi	r24, 0xF9	; 249
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	65 e0       	ldi	r22, 0x05	; 5
  ec:	40 e0       	ldi	r20, 0x00	; 0
  ee:	0e 94 37 03 	call	0x66e	; 0x66e <Kernel_Task_Init>
	Kernel_Task_Init(Tasks_Task6, 6, 0);
  f2:	80 ee       	ldi	r24, 0xE0	; 224
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	66 e0       	ldi	r22, 0x06	; 6
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	0e 94 37 03 	call	0x66e	; 0x66e <Kernel_Task_Init>
	Kernel_Task_Init(Tasks_Task7, 7, 0);
  fe:	87 ec       	ldi	r24, 0xC7	; 199
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	67 e0       	ldi	r22, 0x07	; 7
 104:	40 e0       	ldi	r20, 0x00	; 0
 106:	0e 94 37 03 	call	0x66e	; 0x66e <Kernel_Task_Init>
	Kernel_Task_Init(Tasks_Task8, 8, 0);
 10a:	8e ea       	ldi	r24, 0xAE	; 174
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	68 e0       	ldi	r22, 0x08	; 8
 110:	40 e0       	ldi	r20, 0x00	; 0
 112:	0e 94 37 03 	call	0x66e	; 0x66e <Kernel_Task_Init>
	Kernel_Task_Init(Tasks_Task1, 9, 0);
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	91 e0       	ldi	r25, 0x01	; 1
 11a:	69 e0       	ldi	r22, 0x09	; 9
 11c:	40 e0       	ldi	r20, 0x00	; 0
 11e:	0e 94 37 03 	call	0x66e	; 0x66e <Kernel_Task_Init>
	
	Kernel_Start_Tasks();
 122:	0e 94 8b 03 	call	0x716	; 0x716 <Kernel_Start_Tasks>
 126:	ff cf       	rjmp	.-2      	; 0x126 <SRUDR0+0x60>

00000128 <Tasks_Task0>:
  while( curr < next ){
    curr = Kernel_SysTick_Val_Get();
  }
}

void Tasks_Task0(void){
 128:	ff cf       	rjmp	.-2      	; 0x128 <Tasks_Task0>

0000012a <Tasks_Task9>:
	Kernel_Task_Sleep(42);
	
  }
}

void Tasks_Task9(void){
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
  
  Debug_Init(0);
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 d6 04 	call	0x9ac	; 0x9ac <Debug_Init>
 13a:	c4 e0       	ldi	r28, 0x04	; 4
 13c:	d1 e0       	ldi	r29, 0x01	; 1
  uint16_t val = 260;
  
  while(1){
    
	Debug_Tx_Byte_Conf(9);
 13e:	89 e0       	ldi	r24, 0x09	; 9
 140:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <Debug_Tx_Byte_Conf>
	Debug_Tx_Word_Conf(val--);
 144:	8e 01       	movw	r16, r28
 146:	01 50       	subi	r16, 0x01	; 1
 148:	10 40       	sbci	r17, 0x00	; 0
 14a:	ce 01       	movw	r24, r28
 14c:	0e 94 01 05 	call	0xa02	; 0xa02 <Debug_Tx_Word_Conf>
	Kernel_Task_Sleep(44);
 150:	8c e2       	ldi	r24, 0x2C	; 44
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 c4 03 	call	0x788	; 0x788 <Kernel_Task_Sleep>
 158:	e8 01       	movw	r28, r16
 15a:	f1 cf       	rjmp	.-30     	; 0x13e <Tasks_Task9+0x14>

0000015c <Tasks_Task8>:
	Kernel_Task_Sleep(38);
	
  }
}

void Tasks_Task8(void){
 15c:	0f 93       	push	r16
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
  
  Debug_Init(0);
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 d6 04 	call	0x9ac	; 0x9ac <Debug_Init>
 16c:	c0 ef       	ldi	r28, 0xF0	; 240
 16e:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t val = 240;
  
  while(1){
    
	Debug_Tx_Byte_Conf(8);
 170:	88 e0       	ldi	r24, 0x08	; 8
 172:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <Debug_Tx_Byte_Conf>
	Debug_Tx_Word_Conf(val--);
 176:	8e 01       	movw	r16, r28
 178:	01 50       	subi	r16, 0x01	; 1
 17a:	10 40       	sbci	r17, 0x00	; 0
 17c:	ce 01       	movw	r24, r28
 17e:	0e 94 01 05 	call	0xa02	; 0xa02 <Debug_Tx_Word_Conf>
	Kernel_Task_Sleep(42);
 182:	8a e2       	ldi	r24, 0x2A	; 42
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 c4 03 	call	0x788	; 0x788 <Kernel_Task_Sleep>
 18a:	e8 01       	movw	r28, r16
 18c:	f1 cf       	rjmp	.-30     	; 0x170 <Tasks_Task8+0x14>

0000018e <Tasks_Task7>:
	Kernel_Task_Sleep(31);
	
  }
}

void Tasks_Task7(void){
 18e:	0f 93       	push	r16
 190:	1f 93       	push	r17
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
  
  Debug_Init(0);
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 d6 04 	call	0x9ac	; 0x9ac <Debug_Init>
 19e:	cc ed       	ldi	r28, 0xDC	; 220
 1a0:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t val = 220;
  
  while(1){
    
	Debug_Tx_Byte_Conf(7);
 1a2:	87 e0       	ldi	r24, 0x07	; 7
 1a4:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <Debug_Tx_Byte_Conf>
	Debug_Tx_Word_Conf(val--);
 1a8:	8e 01       	movw	r16, r28
 1aa:	01 50       	subi	r16, 0x01	; 1
 1ac:	10 40       	sbci	r17, 0x00	; 0
 1ae:	ce 01       	movw	r24, r28
 1b0:	0e 94 01 05 	call	0xa02	; 0xa02 <Debug_Tx_Word_Conf>
	Kernel_Task_Sleep(38);
 1b4:	86 e2       	ldi	r24, 0x26	; 38
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 c4 03 	call	0x788	; 0x788 <Kernel_Task_Sleep>
 1bc:	e8 01       	movw	r28, r16
 1be:	f1 cf       	rjmp	.-30     	; 0x1a2 <Tasks_Task7+0x14>

000001c0 <Tasks_Task6>:
	Kernel_Task_Sleep(29);
	
  }
}

void Tasks_Task6(void){
 1c0:	0f 93       	push	r16
 1c2:	1f 93       	push	r17
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
  
  Debug_Init(0);
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 d6 04 	call	0x9ac	; 0x9ac <Debug_Init>
 1d0:	c8 ec       	ldi	r28, 0xC8	; 200
 1d2:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t val = 200;
  
  while(1){
    
	Debug_Tx_Byte_Conf(6);
 1d4:	86 e0       	ldi	r24, 0x06	; 6
 1d6:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <Debug_Tx_Byte_Conf>
	Debug_Tx_Word_Conf(val--);
 1da:	8e 01       	movw	r16, r28
 1dc:	01 50       	subi	r16, 0x01	; 1
 1de:	10 40       	sbci	r17, 0x00	; 0
 1e0:	ce 01       	movw	r24, r28
 1e2:	0e 94 01 05 	call	0xa02	; 0xa02 <Debug_Tx_Word_Conf>
	Kernel_Task_Sleep(31);
 1e6:	8f e1       	ldi	r24, 0x1F	; 31
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 c4 03 	call	0x788	; 0x788 <Kernel_Task_Sleep>
 1ee:	e8 01       	movw	r28, r16
 1f0:	f1 cf       	rjmp	.-30     	; 0x1d4 <Tasks_Task6+0x14>

000001f2 <Tasks_Task5>:
	Kernel_Task_Sleep(26);
	
  }
}

void Tasks_Task5(void){
 1f2:	0f 93       	push	r16
 1f4:	1f 93       	push	r17
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
  
  Debug_Init(0);
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 d6 04 	call	0x9ac	; 0x9ac <Debug_Init>
 202:	c4 eb       	ldi	r28, 0xB4	; 180
 204:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t val = 180;
  
  while(1){
    
    Debug_Tx_Byte_Conf(5);
 206:	85 e0       	ldi	r24, 0x05	; 5
 208:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <Debug_Tx_Byte_Conf>
	Debug_Tx_Word_Conf(val--);
 20c:	8e 01       	movw	r16, r28
 20e:	01 50       	subi	r16, 0x01	; 1
 210:	10 40       	sbci	r17, 0x00	; 0
 212:	ce 01       	movw	r24, r28
 214:	0e 94 01 05 	call	0xa02	; 0xa02 <Debug_Tx_Word_Conf>
	Kernel_Task_Sleep(29);
 218:	8d e1       	ldi	r24, 0x1D	; 29
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 c4 03 	call	0x788	; 0x788 <Kernel_Task_Sleep>
 220:	e8 01       	movw	r28, r16
 222:	f1 cf       	rjmp	.-30     	; 0x206 <Tasks_Task5+0x14>

00000224 <Tasks_Task4>:
	Kernel_Task_Sleep(24);
	
  }
}

void Tasks_Task4(void){
 224:	0f 93       	push	r16
 226:	1f 93       	push	r17
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
  
  Debug_Init(0);
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 d6 04 	call	0x9ac	; 0x9ac <Debug_Init>
 234:	c0 ea       	ldi	r28, 0xA0	; 160
 236:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t val = 160;
  
  while(1){
    
	Debug_Tx_Byte_Conf(4);
 238:	84 e0       	ldi	r24, 0x04	; 4
 23a:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <Debug_Tx_Byte_Conf>
	Debug_Tx_Word_Conf(val--);
 23e:	8e 01       	movw	r16, r28
 240:	01 50       	subi	r16, 0x01	; 1
 242:	10 40       	sbci	r17, 0x00	; 0
 244:	ce 01       	movw	r24, r28
 246:	0e 94 01 05 	call	0xa02	; 0xa02 <Debug_Tx_Word_Conf>
	Kernel_Task_Sleep(26);
 24a:	8a e1       	ldi	r24, 0x1A	; 26
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 c4 03 	call	0x788	; 0x788 <Kernel_Task_Sleep>
 252:	e8 01       	movw	r28, r16
 254:	f1 cf       	rjmp	.-30     	; 0x238 <Tasks_Task4+0x14>

00000256 <Tasks_Task3>:
	
	
  }
}

void Tasks_Task3(void){
 256:	0f 93       	push	r16
 258:	1f 93       	push	r17
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
  
  Debug_Init(0);
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 d6 04 	call	0x9ac	; 0x9ac <Debug_Init>
 266:	cc e8       	ldi	r28, 0x8C	; 140
 268:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t val = 140;
  
  while(1){
    
	Debug_Tx_Byte_Conf(3);
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <Debug_Tx_Byte_Conf>
	Debug_Tx_Word_Conf(val--);
 270:	8e 01       	movw	r16, r28
 272:	01 50       	subi	r16, 0x01	; 1
 274:	10 40       	sbci	r17, 0x00	; 0
 276:	ce 01       	movw	r24, r28
 278:	0e 94 01 05 	call	0xa02	; 0xa02 <Debug_Tx_Word_Conf>
	Kernel_Task_Sleep(24);
 27c:	88 e1       	ldi	r24, 0x18	; 24
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 c4 03 	call	0x788	; 0x788 <Kernel_Task_Sleep>
 284:	e8 01       	movw	r28, r16
 286:	f1 cf       	rjmp	.-30     	; 0x26a <Tasks_Task3+0x14>

00000288 <Tasks_Task2>:
	
	
  }
}

void Tasks_Task2(void){
 288:	ff 92       	push	r15
 28a:	0f 93       	push	r16
 28c:	1f 93       	push	r17
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
  
  Debug_Init(0);
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 d6 04 	call	0x9ac	; 0x9ac <Debug_Init>
  DDRD |= (1<<6);
 29a:	56 9a       	sbi	0x0a, 6	; 10
 29c:	c8 e7       	ldi	r28, 0x78	; 120
 29e:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t val = 120;
  
  while(1){
    
    PORTD ^= (1<<6);
 2a0:	80 e4       	ldi	r24, 0x40	; 64
 2a2:	f8 2e       	mov	r15, r24
 2a4:	8b b1       	in	r24, 0x0b	; 11
 2a6:	8f 25       	eor	r24, r15
 2a8:	8b b9       	out	0x0b, r24	; 11
	Debug_Tx_Byte_Conf(2);
 2aa:	82 e0       	ldi	r24, 0x02	; 2
 2ac:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <Debug_Tx_Byte_Conf>
    Debug_Tx_Word_Conf(val--);
 2b0:	8e 01       	movw	r16, r28
 2b2:	01 50       	subi	r16, 0x01	; 1
 2b4:	10 40       	sbci	r17, 0x00	; 0
 2b6:	ce 01       	movw	r24, r28
 2b8:	0e 94 01 05 	call	0xa02	; 0xa02 <Debug_Tx_Word_Conf>
	Kernel_Task_Sleep(17);
 2bc:	81 e1       	ldi	r24, 0x11	; 17
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	0e 94 c4 03 	call	0x788	; 0x788 <Kernel_Task_Sleep>
 2c4:	e8 01       	movw	r28, r16
 2c6:	ee cf       	rjmp	.-36     	; 0x2a4 <Tasks_Task2+0x1c>

000002c8 <Tasks_Task1>:
    
	
  }
}

void Tasks_Task1(void){
 2c8:	ff 92       	push	r15
 2ca:	0f 93       	push	r16
 2cc:	1f 93       	push	r17
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
  
  Debug_Init(0);
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 d6 04 	call	0x9ac	; 0x9ac <Debug_Init>
  DDRD |= (1<<5);
 2da:	55 9a       	sbi	0x0a, 5	; 10
 2dc:	c4 e6       	ldi	r28, 0x64	; 100
 2de:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t val = 100;
  
  while(1){
    
    PORTD ^= (1<<5);
 2e0:	90 e2       	ldi	r25, 0x20	; 32
 2e2:	f9 2e       	mov	r15, r25
 2e4:	8b b1       	in	r24, 0x0b	; 11
 2e6:	8f 25       	eor	r24, r15
 2e8:	8b b9       	out	0x0b, r24	; 11
	Debug_Tx_Byte_Conf(1);
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <Debug_Tx_Byte_Conf>
	Debug_Tx_Word_Conf(val--);
 2f0:	8e 01       	movw	r16, r28
 2f2:	01 50       	subi	r16, 0x01	; 1
 2f4:	10 40       	sbci	r17, 0x00	; 0
 2f6:	ce 01       	movw	r24, r28
 2f8:	0e 94 01 05 	call	0xa02	; 0xa02 <Debug_Tx_Word_Conf>
	Kernel_Task_Sleep(10);
 2fc:	8a e0       	ldi	r24, 0x0A	; 10
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 c4 03 	call	0x788	; 0x788 <Kernel_Task_Sleep>
 304:	e8 01       	movw	r28, r16
 306:	ee cf       	rjmp	.-36     	; 0x2e4 <Tasks_Task1+0x1c>

00000308 <Tasks_Delay>:
#include "tasks.h"
#include "debug.h"



void Tasks_Delay(uint16_t val){
 308:	5f 92       	push	r5
 30a:	6f 92       	push	r6
 30c:	7f 92       	push	r7
 30e:	8f 92       	push	r8
 310:	9f 92       	push	r9
 312:	af 92       	push	r10
 314:	bf 92       	push	r11
 316:	cf 92       	push	r12
 318:	df 92       	push	r13
 31a:	ef 92       	push	r14
 31c:	ff 92       	push	r15
 31e:	0f 93       	push	r16
 320:	1f 93       	push	r17
 322:	8c 01       	movw	r16, r24
  uint64_t curr = 0, next = 0;
  curr = Kernel_SysTick_Val_Get();
 324:	0e 94 ff 02 	call	0x5fe	; 0x5fe <Kernel_SysTick_Val_Get>
 328:	62 2e       	mov	r6, r18
 32a:	83 2e       	mov	r8, r19
 32c:	c4 2e       	mov	r12, r20
 32e:	e5 2e       	mov	r14, r21
 330:	f6 2e       	mov	r15, r22
 332:	b7 2f       	mov	r27, r23
  next = curr + val;
 334:	20 e0       	ldi	r18, 0x00	; 0
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	40 e0       	ldi	r20, 0x00	; 0
 33a:	50 e0       	ldi	r21, 0x00	; 0
 33c:	60 e0       	ldi	r22, 0x00	; 0
 33e:	70 e0       	ldi	r23, 0x00	; 0
 340:	50 2e       	mov	r5, r16
 342:	56 0c       	add	r5, r6
 344:	a1 e0       	ldi	r26, 0x01	; 1
 346:	50 16       	cp	r5, r16
 348:	08 f0       	brcs	.+2      	; 0x34c <Tasks_Delay+0x44>
 34a:	a0 e0       	ldi	r26, 0x00	; 0
 34c:	e1 2f       	mov	r30, r17
 34e:	e8 0d       	add	r30, r8
 350:	f1 e0       	ldi	r31, 0x01	; 1
 352:	e1 17       	cp	r30, r17
 354:	08 f0       	brcs	.+2      	; 0x358 <Tasks_Delay+0x50>
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	7a 2e       	mov	r7, r26
 35a:	7e 0e       	add	r7, r30
 35c:	a1 e0       	ldi	r26, 0x01	; 1
 35e:	7e 16       	cp	r7, r30
 360:	08 f0       	brcs	.+2      	; 0x364 <Tasks_Delay+0x5c>
 362:	a0 e0       	ldi	r26, 0x00	; 0
 364:	fa 2b       	or	r31, r26
 366:	e1 e0       	ldi	r30, 0x01	; 1
 368:	c2 16       	cp	r12, r18
 36a:	08 f0       	brcs	.+2      	; 0x36e <Tasks_Delay+0x66>
 36c:	e0 e0       	ldi	r30, 0x00	; 0
 36e:	9f 2e       	mov	r9, r31
 370:	9c 0c       	add	r9, r12
 372:	f1 e0       	ldi	r31, 0x01	; 1
 374:	9c 14       	cp	r9, r12
 376:	08 f0       	brcs	.+2      	; 0x37a <Tasks_Delay+0x72>
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	ef 2b       	or	r30, r31
 37c:	f1 e0       	ldi	r31, 0x01	; 1
 37e:	e3 16       	cp	r14, r19
 380:	08 f0       	brcs	.+2      	; 0x384 <Tasks_Delay+0x7c>
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	ae 2e       	mov	r10, r30
 386:	ae 0c       	add	r10, r14
 388:	e1 e0       	ldi	r30, 0x01	; 1
 38a:	ae 14       	cp	r10, r14
 38c:	08 f0       	brcs	.+2      	; 0x390 <Tasks_Delay+0x88>
 38e:	e0 e0       	ldi	r30, 0x00	; 0
 390:	fe 2b       	or	r31, r30
 392:	e1 e0       	ldi	r30, 0x01	; 1
 394:	f4 16       	cp	r15, r20
 396:	08 f0       	brcs	.+2      	; 0x39a <Tasks_Delay+0x92>
 398:	e0 e0       	ldi	r30, 0x00	; 0
 39a:	bf 2e       	mov	r11, r31
 39c:	bf 0c       	add	r11, r15
 39e:	f1 e0       	ldi	r31, 0x01	; 1
 3a0:	bf 14       	cp	r11, r15
 3a2:	08 f0       	brcs	.+2      	; 0x3a6 <Tasks_Delay+0x9e>
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	ef 2b       	or	r30, r31
 3a8:	f1 e0       	ldi	r31, 0x01	; 1
 3aa:	b5 17       	cp	r27, r21
 3ac:	08 f0       	brcs	.+2      	; 0x3b0 <Tasks_Delay+0xa8>
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	de 2e       	mov	r13, r30
 3b2:	db 0e       	add	r13, r27
 3b4:	e1 e0       	ldi	r30, 0x01	; 1
 3b6:	db 16       	cp	r13, r27
 3b8:	08 f0       	brcs	.+2      	; 0x3bc <Tasks_Delay+0xb4>
 3ba:	e0 e0       	ldi	r30, 0x00	; 0
 3bc:	fe 2b       	or	r31, r30
 3be:	a1 e0       	ldi	r26, 0x01	; 1
 3c0:	86 17       	cp	r24, r22
 3c2:	08 f0       	brcs	.+2      	; 0x3c6 <Tasks_Delay+0xbe>
 3c4:	a0 e0       	ldi	r26, 0x00	; 0
 3c6:	0f 2f       	mov	r16, r31
 3c8:	08 0f       	add	r16, r24
 3ca:	e1 e0       	ldi	r30, 0x01	; 1
 3cc:	08 17       	cp	r16, r24
 3ce:	08 f0       	brcs	.+2      	; 0x3d2 <Tasks_Delay+0xca>
 3d0:	e0 e0       	ldi	r30, 0x00	; 0
 3d2:	1a 2f       	mov	r17, r26
 3d4:	1e 2b       	or	r17, r30
 3d6:	19 0f       	add	r17, r25
 3d8:	08 c0       	rjmp	.+16     	; 0x3ea <KER_TR+0x2>
  while( curr < next ){
    curr = Kernel_SysTick_Val_Get();
 3da:	0e 94 ff 02 	call	0x5fe	; 0x5fe <Kernel_SysTick_Val_Get>
 3de:	62 2e       	mov	r6, r18
 3e0:	83 2e       	mov	r8, r19
 3e2:	c4 2e       	mov	r12, r20
 3e4:	e5 2e       	mov	r14, r21
 3e6:	f6 2e       	mov	r15, r22
 3e8:	b7 2f       	mov	r27, r23

void Tasks_Delay(uint16_t val){
  uint64_t curr = 0, next = 0;
  curr = Kernel_SysTick_Val_Get();
  next = curr + val;
  while( curr < next ){
 3ea:	91 17       	cp	r25, r17
 3ec:	b0 f3       	brcs	.-20     	; 0x3da <Tasks_Delay+0xd2>
 3ee:	19 17       	cp	r17, r25
 3f0:	d1 f4       	brne	.+52     	; 0x426 <KER_TR+0x3e>
 3f2:	80 17       	cp	r24, r16
 3f4:	90 f3       	brcs	.-28     	; 0x3da <Tasks_Delay+0xd2>
 3f6:	08 17       	cp	r16, r24
 3f8:	b1 f4       	brne	.+44     	; 0x426 <KER_TR+0x3e>
 3fa:	bd 15       	cp	r27, r13
 3fc:	70 f3       	brcs	.-36     	; 0x3da <Tasks_Delay+0xd2>
 3fe:	db 16       	cp	r13, r27
 400:	91 f4       	brne	.+36     	; 0x426 <KER_TR+0x3e>
 402:	fb 14       	cp	r15, r11
 404:	50 f3       	brcs	.-44     	; 0x3da <Tasks_Delay+0xd2>
 406:	bf 14       	cp	r11, r15
 408:	71 f4       	brne	.+28     	; 0x426 <KER_TR+0x3e>
 40a:	ea 14       	cp	r14, r10
 40c:	30 f3       	brcs	.-52     	; 0x3da <Tasks_Delay+0xd2>
 40e:	ae 14       	cp	r10, r14
 410:	51 f4       	brne	.+20     	; 0x426 <KER_TR+0x3e>
 412:	c9 14       	cp	r12, r9
 414:	10 f3       	brcs	.-60     	; 0x3da <Tasks_Delay+0xd2>
 416:	9c 14       	cp	r9, r12
 418:	31 f4       	brne	.+12     	; 0x426 <KER_TR+0x3e>
 41a:	87 14       	cp	r8, r7
 41c:	f0 f2       	brcs	.-68     	; 0x3da <Tasks_Delay+0xd2>
 41e:	78 14       	cp	r7, r8
 420:	11 f4       	brne	.+4      	; 0x426 <KER_TR+0x3e>
 422:	65 14       	cp	r6, r5
 424:	d0 f2       	brcs	.-76     	; 0x3da <Tasks_Delay+0xd2>
    curr = Kernel_SysTick_Val_Get();
  }
}
 426:	1f 91       	pop	r17
 428:	0f 91       	pop	r16
 42a:	ff 90       	pop	r15
 42c:	ef 90       	pop	r14
 42e:	df 90       	pop	r13
 430:	cf 90       	pop	r12
 432:	bf 90       	pop	r11
 434:	af 90       	pop	r10
 436:	9f 90       	pop	r9
 438:	8f 90       	pop	r8
 43a:	7f 90       	pop	r7
 43c:	6f 90       	pop	r6
 43e:	5f 90       	pop	r5
 440:	08 95       	ret

00000442 <__vector_16>:


;;=================================ISR execution starting===================================;; 
.global  __vector_16
    __vector_16:                                          ;total 26.13uS @8MHz    (211 clocks) 
	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 442:	29 9a       	sbi	0x05, 1	; 5
        KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 444:	0f 92       	push	r0
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	0f 92       	push	r0
 44a:	1f 92       	push	r1
 44c:	11 24       	eor	r1, r1
 44e:	2f 92       	push	r2
 450:	3f 92       	push	r3
 452:	4f 92       	push	r4
 454:	5f 92       	push	r5
 456:	6f 92       	push	r6
 458:	7f 92       	push	r7
 45a:	8f 92       	push	r8
 45c:	9f 92       	push	r9
 45e:	af 92       	push	r10
 460:	bf 92       	push	r11
 462:	cf 92       	push	r12
 464:	df 92       	push	r13
 466:	ef 92       	push	r14
 468:	ff 92       	push	r15
 46a:	0f 93       	push	r16
 46c:	1f 93       	push	r17
 46e:	2f 93       	push	r18
 470:	3f 93       	push	r19
 472:	4f 93       	push	r20
 474:	5f 93       	push	r21
 476:	6f 93       	push	r22
 478:	7f 93       	push	r23
 47a:	8f 93       	push	r24
 47c:	9f 93       	push	r25
 47e:	af 93       	push	r26
 480:	bf 93       	push	r27
 482:	cf 93       	push	r28
 484:	df 93       	push	r29
 486:	ef 93       	push	r30
 488:	ff 93       	push	r31
		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 48a:	00 91 06 01 	lds	r16, 0x0106
 48e:	00 93 46 00 	sts	0x0046, r16
		KER_TICK_INCREMENT                                ;increment tick counter ( 27 clocks) 
 492:	00 91 00 01 	lds	r16, 0x0100
 496:	03 95       	inc	r16
 498:	00 93 00 01 	sts	0x0100, r16
 49c:	00 91 01 01 	lds	r16, 0x0101
 4a0:	01 1d       	adc	r16, r1
 4a2:	00 93 01 01 	sts	0x0101, r16
 4a6:	00 91 02 01 	lds	r16, 0x0102
 4aa:	01 1d       	adc	r16, r1
 4ac:	00 93 02 01 	sts	0x0102, r16
 4b0:	00 91 03 01 	lds	r16, 0x0103
 4b4:	01 1d       	adc	r16, r1
 4b6:	00 93 03 01 	sts	0x0103, r16
 4ba:	00 91 04 01 	lds	r16, 0x0104
 4be:	01 1d       	adc	r16, r1
 4c0:	00 93 04 01 	sts	0x0104, r16
        KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 4c4:	0d b7       	in	r16, 0x3d	; 61
 4c6:	1e b7       	in	r17, 0x3e	; 62
 4c8:	20 91 07 01 	lds	r18, 0x0107
 4cc:	22 0f       	add	r18, r18
 4ce:	ea e0       	ldi	r30, 0x0A	; 10
 4d0:	f1 e0       	ldi	r31, 0x01	; 1
 4d2:	e2 0f       	add	r30, r18
 4d4:	f1 1d       	adc	r31, r1
 4d6:	01 93       	st	Z+, r16
 4d8:	10 83       	st	Z, r17
		
		KER_DEC_SLP_TIMEOUT                               ;decrement of sleep time
 4da:	00 91 08 01 	lds	r16, 0x0108

000004de <_UPDATE_TASK_READY5>:
 4de:	0a 95       	dec	r16
 4e0:	20 2f       	mov	r18, r16
 4e2:	22 0f       	add	r18, r18
 4e4:	e2 e3       	ldi	r30, 0x32	; 50
 4e6:	f1 e0       	ldi	r31, 0x01	; 1
 4e8:	e2 0f       	add	r30, r18
 4ea:	f1 1d       	adc	r31, r1
 4ec:	a1 91       	ld	r26, Z+
 4ee:	b0 81       	ld	r27, Z
 4f0:	2a 2f       	mov	r18, r26
 4f2:	2b 2b       	or	r18, r27
 4f4:	41 f0       	breq	.+16     	; 0x506 <_VAL_NULL5>
 4f6:	11 97       	sbiw	r26, 0x01	; 1
 4f8:	b0 83       	st	Z, r27
 4fa:	a2 93       	st	-Z, r26
 4fc:	2a 2f       	mov	r18, r26
 4fe:	2b 2b       	or	r18, r27
 500:	11 f0       	breq	.+4      	; 0x506 <_VAL_NULL5>
 502:	0c 94 89 02 	jmp	0x512	; 0x512 <_LOOP5>

00000506 <_VAL_NULL5>:
 506:	ee e1       	ldi	r30, 0x1E	; 30
 508:	f1 e0       	ldi	r31, 0x01	; 1
 50a:	e0 0f       	add	r30, r16
 50c:	f1 1d       	adc	r31, r1
 50e:	21 e0       	ldi	r18, 0x01	; 1
 510:	20 83       	st	Z, r18

00000512 <_LOOP5>:
 512:	00 30       	cpi	r16, 0x00	; 0
 514:	21 f7       	brne	.-56     	; 0x4de <_UPDATE_TASK_READY5>
		KER_RUN_SCHEDULER                                 ;run task if ready
 516:	00 91 08 01 	lds	r16, 0x0108

0000051a <_CH_TASK_READY6>:
 51a:	0a 95       	dec	r16
 51c:	10 2f       	mov	r17, r16
 51e:	ee e1       	ldi	r30, 0x1E	; 30
 520:	f1 e0       	ldi	r31, 0x01	; 1
 522:	e1 0f       	add	r30, r17
 524:	10 e0       	ldi	r17, 0x00	; 0
 526:	f1 0f       	add	r31, r17
 528:	10 81       	ld	r17, Z
 52a:	11 30       	cpi	r17, 0x01	; 1
 52c:	21 f0       	breq	.+8      	; 0x536 <_NEXT_TASK_FOUND6>

0000052e <_LOOP_CNT6>:
 52e:	00 30       	cpi	r16, 0x00	; 0
 530:	a1 f7       	brne	.-24     	; 0x51a <_CH_TASK_READY6>
 532:	0c 94 9f 02 	jmp	0x53e	; 0x53e <_IDLE_TASK6>

00000536 <_NEXT_TASK_FOUND6>:
 536:	00 93 07 01 	sts	0x0107, r16
 53a:	0c 94 a2 02 	jmp	0x544	; 0x544 <_EXIT6>

0000053e <_IDLE_TASK6>:
 53e:	00 e0       	ldi	r16, 0x00	; 0
 540:	00 93 07 01 	sts	0x0107, r16

00000544 <_EXIT6>:
	    
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 544:	00 91 07 01 	lds	r16, 0x0107
 548:	00 0f       	add	r16, r16
 54a:	ea e0       	ldi	r30, 0x0A	; 10
 54c:	f1 e0       	ldi	r31, 0x01	; 1
 54e:	e0 0f       	add	r30, r16
 550:	00 e0       	ldi	r16, 0x00	; 0
 552:	f0 1f       	adc	r31, r16
 554:	01 91       	ld	r16, Z+
 556:	10 81       	ld	r17, Z
 558:	0d bf       	out	0x3d, r16	; 61
 55a:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 55c:	ff 91       	pop	r31
 55e:	ef 91       	pop	r30
 560:	df 91       	pop	r29
 562:	cf 91       	pop	r28
 564:	bf 91       	pop	r27
 566:	af 91       	pop	r26
 568:	9f 91       	pop	r25
 56a:	8f 91       	pop	r24
 56c:	7f 91       	pop	r23
 56e:	6f 91       	pop	r22
 570:	5f 91       	pop	r21
 572:	4f 91       	pop	r20
 574:	3f 91       	pop	r19
 576:	2f 91       	pop	r18
 578:	1f 91       	pop	r17
 57a:	0f 91       	pop	r16
 57c:	ff 90       	pop	r15
 57e:	ef 90       	pop	r14
 580:	df 90       	pop	r13
 582:	cf 90       	pop	r12
 584:	bf 90       	pop	r11
 586:	af 90       	pop	r10
 588:	9f 90       	pop	r9
 58a:	8f 90       	pop	r8
 58c:	7f 90       	pop	r7
 58e:	6f 90       	pop	r6
 590:	5f 90       	pop	r5
 592:	4f 90       	pop	r4
 594:	3f 90       	pop	r3
 596:	2f 90       	pop	r2
 598:	1f 90       	pop	r1
 59a:	0f 90       	pop	r0
 59c:	0f be       	out	0x3f, r0	; 63
 59e:	0f 90       	pop	r0
	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 5a0:	29 98       	cbi	0x05, 1	; 5
		RETI                                              ;return from interrupt  (  4 clocks) 
 5a2:	18 95       	reti

000005a4 <Kernel_SysTick_Reg_Init>:



;;================================SysTick reg init starting=================================;; 
Kernel_SysTick_Reg_Init:                                  ;total operation        ( 55 clocks) 
        CLI                                               ;disable global int,    (  1 clock ) 
 5a4:	f8 94       	cli
		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 5a6:	21 9a       	sbi	0x04, 1	; 4
 5a8:	29 98       	cbi	0x05, 1	; 5
		LDI   R16                , 0x00                   ;set 0x00 to R16,       (  1 clock ) 
 5aa:	00 e0       	ldi	r16, 0x00	; 0
		
		;clear tick counter
		STS   KerBase+OFF_TICK0  , R16                    ;clear  KerBase[0]      (  2 clocks) 
 5ac:	00 93 00 01 	sts	0x0100, r16
		STS   KerBase+OFF_TICK1  , R16                    ;clear  KerBase[1]      (  2 clocks) 
 5b0:	00 93 01 01 	sts	0x0101, r16
		STS   KerBase+OFF_TICK2  , R16                    ;clear  KerBase[2]      (  2 clocks) 
 5b4:	00 93 02 01 	sts	0x0102, r16
		STS   KerBase+OFF_TICK3  , R16                    ;clear  KerBase[3]      (  2 clocks) 
 5b8:	00 93 03 01 	sts	0x0103, r16
		STS   KerBase+OFF_TICK4  , R16                    ;clear  KerBase[4]      (  2 clocks) 
 5bc:	00 93 04 01 	sts	0x0104, r16
		
		;clear prescaler
		STS   KerBase+OFF_PRS    , R16                    ;clear  KerBase[5]      (  2 clocks) 
 5c0:	00 93 05 01 	sts	0x0105, r16
		
		;clear reload value
		STS   KerBase+OFF_RLD    , R16                    ;clear  KerBase[6]      (  2 clocks) 
 5c4:	00 93 06 01 	sts	0x0106, r16
		
		;clear task id
		STS   KerBase+OFF_TID    , R16                    ;clear  KerBase[7]      (  2 clocks) 
 5c8:	00 93 07 01 	sts	0x0107, r16
		
		;clear ntask
		STS   KerBase+OFF_NTSK   , R16                    ;clear  KerBase[8]      (  2 clocks) 
 5cc:	00 93 08 01 	sts	0x0108, r16
		
		;reserved, not used
        STS   KerBase+0x09       , R16                    ;clear  KerBase[9]      (  2 clocks) 
 5d0:	00 93 09 01 	sts	0x0109, r16
		
		;clear all timer registers
		STS   SRTCCR0A           , R16                    ;clear TCCR0A           (  2 clocks) 
 5d4:	00 93 44 00 	sts	0x0044, r16
		STS   SRTCCR0B           , R16                    ;clear TCCR0B           (  2 clocks) 
 5d8:	00 93 45 00 	sts	0x0045, r16
		STS   SRTIMSK0           , R16                    ;clear TIMSK0           (  2 clocks) 
 5dc:	00 93 6e 00 	sts	0x006E, r16
		STS   SRTIFR0            , R16                    ;clear TIFR0            (  2 clocks) 
 5e0:	00 93 35 00 	sts	0x0035, r16
		STS   SROCR0A            , R16                    ;clear OCR0A            (  2 clocks) 
 5e4:	00 93 47 00 	sts	0x0047, r16
		STS   SROCR0B            , R16                    ;clear OCR0B            (  2 clocks) 
 5e8:	00 93 48 00 	sts	0x0048, r16
		STS   SRTCNT0            , R16                    ;clear TCNT0            (  2 clocks) 
 5ec:	00 93 46 00 	sts	0x0046, r16
		
		;store prescaler value
		MOV   R16                , R24                    ;prescaler from arg1    (  1 clock ) 
 5f0:	08 2f       	mov	r16, r24
		STS   KerBase+OFF_PRS    , R16                    ;KerBase[5] prescaler   (  2 clocks) 
 5f2:	00 93 05 01 	sts	0x0105, r16
        
		;store reload value
		MOV   R16                , R22                    ;reload val from arg2   (  1 clock ) 
 5f6:	06 2f       	mov	r16, r22
		STS   KerBase+OFF_RLD    , R16                    ;KerBase[6] reload val  (  2 clocks) 
 5f8:	00 93 06 01 	sts	0x0106, r16
		
		RET                                               ;return from subroutine (  4 clocks) 
 5fc:	08 95       	ret

000005fe <Kernel_SysTick_Val_Get>:

;;===============================SysTick value get starting=================================;; 
Kernel_SysTick_Val_Get:                                   ;total operation        ( 42 clocks) 
    _READ_AGAIN:
	    ;first read & store to actual return registers
		LDS   R18		         , KerBase+OFF_TICK0      ;byte0 (LSB)            (  2 clocks) 
 5fe:	20 91 00 01 	lds	r18, 0x0100
		LDS   R19		         , KerBase+OFF_TICK1      ;byte1                  (  2 clocks) 
 602:	30 91 01 01 	lds	r19, 0x0101
		LDS   R20		         , KerBase+OFF_TICK2      ;byte2                  (  2 clocks) 
 606:	40 91 02 01 	lds	r20, 0x0102
		LDS   R21		         , KerBase+OFF_TICK3      ;byte3                  (  2 clocks) 
 60a:	50 91 03 01 	lds	r21, 0x0103
		LDS   R22		         , KerBase+OFF_TICK4      ;byte4 (MSB)            (  2 clocks) 
 60e:	60 91 04 01 	lds	r22, 0x0104
		
		;second read to scratch registers
		LDS   R26		         , KerBase+OFF_TICK0      ;byte0 (LSB)            (  2 clocks) 
 612:	a0 91 00 01 	lds	r26, 0x0100
		LDS   R27		         , KerBase+OFF_TICK1      ;byte1                  (  2 clocks) 
 616:	b0 91 01 01 	lds	r27, 0x0101
		LDS   R30		         , KerBase+OFF_TICK2      ;byte2                  (  2 clocks) 
 61a:	e0 91 02 01 	lds	r30, 0x0102
		LDS   R31		         , KerBase+OFF_TICK3      ;byte3                  (  2 clocks) 
 61e:	f0 91 03 01 	lds	r31, 0x0103
		LDS   R0		         , KerBase+OFF_TICK4      ;byte4 (MSB)            (  2 clocks) 
 622:	00 90 04 01 	lds	r0, 0x0104
		
		;compare all pairs
		CP    R18                , R26                    ;compare                (  1 clock ) 
 626:	2a 17       	cp	r18, r26
		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 628:	51 f7       	brne	.-44     	; 0x5fe <Kernel_SysTick_Val_Get>
		CP    R19                , R27                    ;compare                (  1 clock ) 
 62a:	3b 17       	cp	r19, r27
		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 62c:	41 f7       	brne	.-48     	; 0x5fe <Kernel_SysTick_Val_Get>
		CP    R20                , R30                    ;compare                (  1 clock ) 
 62e:	4e 17       	cp	r20, r30
		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 630:	31 f7       	brne	.-52     	; 0x5fe <Kernel_SysTick_Val_Get>
		CP    R21                , R31                    ;compare                (  1 clock ) 
 632:	5f 17       	cp	r21, r31
		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 634:	21 f7       	brne	.-56     	; 0x5fe <Kernel_SysTick_Val_Get>
		CP    R22                , R0                     ;compare                (  1 clock ) 
 636:	60 15       	cp	r22, r0
		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 638:	11 f7       	brne	.-60     	; 0x5fe <Kernel_SysTick_Val_Get>
		
		;only 5 bytes data are taken, force clear 3 high bytes (64bit return R25:R18)
		LDI   R23		         , 0x00                   ;byte5 -> R23           (  1 clocks) 
 63a:	70 e0       	ldi	r23, 0x00	; 0
		LDI   R24		         , 0x00                   ;byte6 -> R24           (  1 clocks) 
 63c:	80 e0       	ldi	r24, 0x00	; 0
		LDI   R25		         , 0x00                   ;byte7 -> R25           (  1 clocks) 
 63e:	90 e0       	ldi	r25, 0x00	; 0
		RET                                               ;return from subroutine (  4 clocks) 
 640:	08 95       	ret

00000642 <Kernel_SysTick_Val_Safely_Get>:



;;============================SysTick value safely get starting=============================;; 
Kernel_SysTick_Val_Safely_Get:                            ;total operation        ( 20 clocks) 
        IN    R2                 , IOSREG                 ;save SREG              (  1 clock ) 
 642:	2f b6       	in	r2, 0x3f	; 63
        CLI                                               ;disable interrupts     (  1 clock ) 
 644:	f8 94       	cli
		LDS   R18		         , KerBase+OFF_TICK0      ;byte0 -> R18 (LSB)     (  2 clocks) 
 646:	20 91 00 01 	lds	r18, 0x0100
		LDS   R19		         , KerBase+OFF_TICK1      ;byte1 -> R19           (  2 clocks) 
 64a:	30 91 01 01 	lds	r19, 0x0101
		LDS   R20		         , KerBase+OFF_TICK2      ;byte2 -> R20           (  2 clocks) 
 64e:	40 91 02 01 	lds	r20, 0x0102
		LDS   R21		         , KerBase+OFF_TICK3      ;byte3 -> R21           (  2 clocks) 
 652:	50 91 03 01 	lds	r21, 0x0103
		LDS   R22		         , KerBase+OFF_TICK4      ;byte4 -> R22           (  2 clocks) 
 656:	60 91 04 01 	lds	r22, 0x0104
		LDI   R23		         , 0x00                   ;byte5 -> R23           (  1 clocks) 
 65a:	70 e0       	ldi	r23, 0x00	; 0
		LDI   R24		         , 0x00                   ;byte6 -> R24           (  1 clocks) 
 65c:	80 e0       	ldi	r24, 0x00	; 0
		LDI   R25		         , 0x00                   ;byte7 -> R25 (MSB)     (  1 clocks) 
 65e:	90 e0       	ldi	r25, 0x00	; 0
		OUT   IOSREG             , R2          		      ;restore SREG           (  1 clock ) 
 660:	2f be       	out	0x3f, r2	; 63
		RET                                               ;return from subroutine (  4 clocks) 
 662:	08 95       	ret

00000664 <Kernel_Interrupt_Sts_Get>:



;;==============================interrupt status get starting===============================;; 
Kernel_Interrupt_Sts_Get:                                 ;total operation        ( 10 clocks) 
        LDI   R24		         , 0x00                   ;clear R24              (  1 clock ) 
 664:	80 e0       	ldi	r24, 0x00	; 0
        IN    R16		         , IOSREG                 ;save SREG in R16       (  1 clock ) 
 666:	0f b7       	in	r16, 0x3f	; 63
		SBRC  R16		         , 0x07                   ;check I flag->bit7     (  3 clocks) 
 668:	07 fd       	sbrc	r16, 7
		LDI   R24		         , 0x01                   ;set R24 to 1           (  1 clock ) 
 66a:	81 e0       	ldi	r24, 0x01	; 1
		RET                                               ;return from subroutine (  4 clocks) 
 66c:	08 95       	ret

0000066e <Kernel_Task_Init>:

;;================================kernel task init starting=================================;; 
Kernel_Task_Init:
        ;func_ptr->R25:R24, task_id->R22, task_priority->R20
        ;save main SP & Z pointer
        IN    R2                 , IOSPL                  ;save SPL of MSP        (  1 clock ) 
 66e:	2d b6       	in	r2, 0x3d	; 61
        IN    R3                 , IOSPH                  ;save SPH of MSP        (  1 clock ) 
 670:	3e b6       	in	r3, 0x3e	; 62
        MOV   R4                 , R30                    ;save ZPL               (  2 clocks) 
 672:	4e 2e       	mov	r4, r30
		MOV   R5                 , R31                    ;save ZPH               (  2 clocks) 
 674:	5f 2e       	mov	r5, r31
		;ADC   R31                , R16                    ;add offset to array    (  1 clock )
		;LDI   R16                , TASK_READY             ;set TASK_READY         (  1 clock ) 
		;ST    Z                  , R16                    ;update flag            (  2 clocks)
		
		;set priority to KerSch+(task_id*4)+1
		MOV   R16                , R22                    ;load task_id           (  1 clock ) 
 676:	06 2f       	mov	r16, r22
		LDI   R30                , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 678:	e8 e2       	ldi	r30, 0x28	; 40
		LDI   R31                , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 67a:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 67c:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 67e:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 680:	f0 1f       	adc	r31, r16
		ST    Z                  , R20                    ;save priority          (  2 clocks)
 682:	40 83       	st	Z, r20
		
		;increment ntask
		LDS   R16                , KerBase+OFF_NTSK       ;load ntask             (  2 clocks) 
 684:	00 91 08 01 	lds	r16, 0x0108
		INC   R16                                         ;increment ntask        (  1 clock ) 
 688:	03 95       	inc	r16
		STS   KerBase+OFF_NTSK   , R16                    ;store ntask            (  2 clocks) 
 68a:	00 93 08 01 	sts	0x0108, r16
		
		;set stack pointer for current task (KerStack + KER_STK_SZ*(ker_ind+1) - 1) ->stack top   
		MOV   R16                , R22                    ;load task_id           (  1 clock ) 
 68e:	06 2f       	mov	r16, r22
		INC   R16                                         ;increment task_id      (  1 clock ) 
 690:	03 95       	inc	r16
		LDI   R17                , KER_STK_SZ             ;load stack size        (  1 clock ) 
 692:	10 e8       	ldi	r17, 0x80	; 128
		MUL   R16                , R17                    ;multiply to get offset (  2 clocks) 
 694:	01 9f       	mul	r16, r17
		MOV   R30                , R0                     ;load multiplied low    (  2 clocks) 
 696:	e0 2d       	mov	r30, r0
		MOV   R31                , R1                     ;load multiplied high   (  2 clocks) 
 698:	f1 2d       	mov	r31, r1
		SBIW  R30                , 0x01                   ;KER_STK_SZ*(task_id+1)-1  (  2 clocks) 
 69a:	31 97       	sbiw	r30, 0x01	; 1
		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 69c:	11 24       	eor	r1, r1
		LDI   R16                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
 69e:	06 e4       	ldi	r16, 0x46	; 70
		LDI   R17                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
 6a0:	11 e0       	ldi	r17, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 6a2:	e0 0f       	add	r30, r16
		ADC   R31                , R17                    ;add high bytes+carry   (  1 clock ) 
 6a4:	f1 1f       	adc	r31, r17
		OUT   IOSPL              , R30                    ;load SPL               (  1 clock ) 
 6a6:	ed bf       	out	0x3d, r30	; 61
        OUT   IOSPH              , R31                    ;load SPH               (  1 clock ) 
 6a8:	fe bf       	out	0x3e, r31	; 62
		
		;function argument directly returns word address
	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
 6aa:	8f 93       	push	r24
		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 6ac:	9f 93       	push	r25
		
		SEI                                               ;force enable interrupt (  1 clock ) 
 6ae:	78 94       	sei
		
		;push context to stack of this task
		KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 6b0:	0f 92       	push	r0
 6b2:	0f b6       	in	r0, 0x3f	; 63
 6b4:	0f 92       	push	r0
 6b6:	1f 92       	push	r1
 6b8:	11 24       	eor	r1, r1
 6ba:	2f 92       	push	r2
 6bc:	3f 92       	push	r3
 6be:	4f 92       	push	r4
 6c0:	5f 92       	push	r5
 6c2:	6f 92       	push	r6
 6c4:	7f 92       	push	r7
 6c6:	8f 92       	push	r8
 6c8:	9f 92       	push	r9
 6ca:	af 92       	push	r10
 6cc:	bf 92       	push	r11
 6ce:	cf 92       	push	r12
 6d0:	df 92       	push	r13
 6d2:	ef 92       	push	r14
 6d4:	ff 92       	push	r15
 6d6:	0f 93       	push	r16
 6d8:	1f 93       	push	r17
 6da:	2f 93       	push	r18
 6dc:	3f 93       	push	r19
 6de:	4f 93       	push	r20
 6e0:	5f 93       	push	r21
 6e2:	6f 93       	push	r22
 6e4:	7f 93       	push	r23
 6e6:	8f 93       	push	r24
 6e8:	9f 93       	push	r25
 6ea:	af 93       	push	r26
 6ec:	bf 93       	push	r27
 6ee:	cf 93       	push	r28
 6f0:	df 93       	push	r29
 6f2:	ef 93       	push	r30
 6f4:	ff 93       	push	r31
		
		;read stack pointer of current task (necessary when restore)
		IN    R16                , IOSPL                  ;read SPL               (  1 clock ) 
 6f6:	0d b7       	in	r16, 0x3d	; 61
        IN    R17                , IOSPH                  ;read SPH               (  1 clock ) 
 6f8:	1e b7       	in	r17, 0x3e	; 62
		
		;calculate the address where current task's SP will be stored and store SP
		MOV   R18                , R22                    ;fetch task_id from arg (  1 clock ) 
 6fa:	26 2f       	mov	r18, r22
		LSL   R18                                         ;left shift to multiply (  1 clock ) 
 6fc:	22 0f       	add	r18, r18
		LDI   R30                , lo8(KerSP)             ;fetch base pos low     (  1 clock ) 
 6fe:	ea e0       	ldi	r30, 0x0A	; 10
		LDI   R31                , hi8(KerSP)             ;fetch base pos high    (  1 clock ) 
 700:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R18                    ;add offset to array    (  1 clock ) 
 702:	e2 0f       	add	r30, r18
		LDI   R18                , 0x00                   ;set 0 to R16           (  1 clock ) 
 704:	20 e0       	ldi	r18, 0x00	; 0
		ADC   R31                , R18                    ;add carry if any       (  1 clock ) 
 706:	f2 1f       	adc	r31, r18
		ST    Z+                 , R16                    ;SPL at KerSp+offset    (  2 clocks) 
 708:	01 93       	st	Z+, r16
		ST    z                  , R17                    ;SPH at KerSp+offset    (  2 clocks) 
 70a:	10 83       	st	Z, r17
		
		;load Main SP, restore Z pointer
		OUT   IOSPL              , R2                     ;load SPL               (  1 clock ) 
 70c:	2d be       	out	0x3d, r2	; 61
        OUT   IOSPH              , R3                     ;load SPH               (  1 clock ) 
 70e:	3e be       	out	0x3e, r3	; 62
		MOV   R30                , R4                     ;push ZPL               (  2 clocks) 
 710:	e4 2d       	mov	r30, r4
		MOV   R31                , R5                     ;push ZPL               (  2 clocks) 
 712:	f5 2d       	mov	r31, r5
		
		
		RET                                               ;return from subroutine (  4 clocks) 
 714:	08 95       	ret

00000716 <Kernel_Start_Tasks>:

;;===================================kernel task starting===================================;; 
Kernel_Start_Tasks:
		;start executing from task0
		;save ZP
		MOV   R4                 , R30                    ;save ZPL               (  2 clocks) 
 716:	4e 2e       	mov	r4, r30
		MOV   R5                 , R31                    ;save ZPH               (  2 clocks) 
 718:	5f 2e       	mov	r5, r31
		
		;load ZP with addr+offset
		LDI   R30                , lo8(KerSP)             ;fetch ZPL KerSP        (  1 clock ) 
 71a:	ea e0       	ldi	r30, 0x0A	; 10
		LDI   R31                , hi8(KerSP)             ;fetch ZPH KerSP        (  1 clock ) 
 71c:	f1 e0       	ldi	r31, 0x01	; 1
		
		;load last task's SP
		LD    R16                , Z+                     ;load val from Z, inc Z (  2 clocks) 
 71e:	01 91       	ld	r16, Z+
		LD    R17                , Z                      ;load val from Z+1      (  2 clocks) 
 720:	10 81       	ld	r17, Z
		
		;set last task's SP
		OUT   IOSPL              , R16                    ;load SPL               (  1 clock ) 
 722:	0d bf       	out	0x3d, r16	; 61
        OUT   IOSPH              , R17                    ;load SPH               (  1 clock ) 
 724:	1e bf       	out	0x3e, r17	; 62
       
        ;forcefully restore context, in ISR it will be stored automatically
		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 726:	ff 91       	pop	r31
 728:	ef 91       	pop	r30
 72a:	df 91       	pop	r29
 72c:	cf 91       	pop	r28
 72e:	bf 91       	pop	r27
 730:	af 91       	pop	r26
 732:	9f 91       	pop	r25
 734:	8f 91       	pop	r24
 736:	7f 91       	pop	r23
 738:	6f 91       	pop	r22
 73a:	5f 91       	pop	r21
 73c:	4f 91       	pop	r20
 73e:	3f 91       	pop	r19
 740:	2f 91       	pop	r18
 742:	1f 91       	pop	r17
 744:	0f 91       	pop	r16
 746:	ff 90       	pop	r15
 748:	ef 90       	pop	r14
 74a:	df 90       	pop	r13
 74c:	cf 90       	pop	r12
 74e:	bf 90       	pop	r11
 750:	af 90       	pop	r10
 752:	9f 90       	pop	r9
 754:	8f 90       	pop	r8
 756:	7f 90       	pop	r7
 758:	6f 90       	pop	r6
 75a:	5f 90       	pop	r5
 75c:	4f 90       	pop	r4
 75e:	3f 90       	pop	r3
 760:	2f 90       	pop	r2
 762:	1f 90       	pop	r1
 764:	0f 90       	pop	r0
 766:	0f be       	out	0x3f, r0	; 63
 768:	0f 90       	pop	r0
		
		;restore ZP
		MOV   R30                , R4                     ;restore ZPL            (  2 clocks) 
 76a:	e4 2d       	mov	r30, r4
		MOV   R31                , R5                     ;restore ZPL            (  2 clocks) 
 76c:	f5 2d       	mov	r31, r5
		
		
		LDS   R16		         , KerBase+OFF_PRS        ;load prescaler         (  2 clocks) 
 76e:	00 91 05 01 	lds	r16, 0x0105
		LDS   R17		         , KerBase+OFF_RLD        ;load reload val        (  2 clocks) 
 772:	10 91 06 01 	lds	r17, 0x0106
		STS   SRTCCR0B           , R16                    ;prescaler-> TCCR0B     (  2 clocks) 
 776:	00 93 45 00 	sts	0x0045, r16
		STS   SRTCNT0            , R17                    ;reload val-> TCNT0     (  2 clocks) 
 77a:	10 93 46 00 	sts	0x0046, r17
		LDI   R16                , 0x01                   ;bit mask TOIE0         (  1 clock ) 
 77e:	01 e0       	ldi	r16, 0x01	; 1
		STS   SRTIMSK0           , R16                    ;set to TIMSK0          (  2 clocks) 
 780:	00 93 6e 00 	sts	0x006E, r16
		
		;execute return to jump to task0, pushed while task init
		RET                                               ;return from subroutine (  4 clocks) 
 784:	08 95       	ret

00000786 <Kernel_Task_Idle>:


;;================================kernel task delay starting================================;; 
Kernel_Task_Idle:
    _IDLE_LOOP:
		RJMP  _IDLE_LOOP                                  ;return from subroutine (  4 clocks) 
 786:	ff cf       	rjmp	.-2      	; 0x786 <Kernel_Task_Idle>

00000788 <Kernel_Task_Sleep>:


;;================================kernel task delay starting================================;; 
Kernel_Task_Sleep:
        ;save current context
        KER_CONTEXT_SAVE_YEILD                            ;save context           ( 68 clocks) 
 788:	0f 92       	push	r0
 78a:	0f b6       	in	r0, 0x3f	; 63
 78c:	f8 94       	cli
 78e:	0f 92       	push	r0
 790:	1f 92       	push	r1
 792:	11 24       	eor	r1, r1
 794:	2f 92       	push	r2
 796:	3f 92       	push	r3
 798:	4f 92       	push	r4
 79a:	5f 92       	push	r5
 79c:	6f 92       	push	r6
 79e:	7f 92       	push	r7
 7a0:	8f 92       	push	r8
 7a2:	9f 92       	push	r9
 7a4:	af 92       	push	r10
 7a6:	bf 92       	push	r11
 7a8:	cf 92       	push	r12
 7aa:	df 92       	push	r13
 7ac:	ef 92       	push	r14
 7ae:	ff 92       	push	r15
 7b0:	0f 93       	push	r16
 7b2:	1f 93       	push	r17
 7b4:	2f 93       	push	r18
 7b6:	3f 93       	push	r19
 7b8:	4f 93       	push	r20
 7ba:	5f 93       	push	r21
 7bc:	6f 93       	push	r22
 7be:	7f 93       	push	r23
 7c0:	8f 93       	push	r24
 7c2:	9f 93       	push	r25
 7c4:	af 93       	push	r26
 7c6:	bf 93       	push	r27
 7c8:	cf 93       	push	r28
 7ca:	df 93       	push	r29
 7cc:	ef 93       	push	r30
 7ce:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks)
 7d0:	0d b7       	in	r16, 0x3d	; 61
 7d2:	1e b7       	in	r17, 0x3e	; 62
 7d4:	20 91 07 01 	lds	r18, 0x0107
 7d8:	22 0f       	add	r18, r18
 7da:	ea e0       	ldi	r30, 0x0A	; 10
 7dc:	f1 e0       	ldi	r31, 0x01	; 1
 7de:	e2 0f       	add	r30, r18
 7e0:	f1 1d       	adc	r31, r1
 7e2:	01 93       	st	Z+, r16
 7e4:	10 83       	st	Z, r17
		
		;create next task wakeup time (args R25:R24)
		LDS   R16                , KerBase+OFF_TID        ;load tak_id            (  2 clocks) 
 7e6:	00 91 07 01 	lds	r16, 0x0107
		MOV   R17                , R16                    ;copy                   (  1 clock ) 
 7ea:	10 2f       	mov	r17, r16
		LSL   R17                                         ;x2                     (  1 clock ) 
 7ec:	11 0f       	add	r17, r17
		LDI   R30                , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 7ee:	e2 e3       	ldi	r30, 0x32	; 50
		LDI   R31                , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 7f0:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R17                    ;add low bytes          (  1 clock ) 
 7f2:	e1 0f       	add	r30, r17
		LDI   R17                , 0x00                   ;load 0                 (  1 clock ) 
 7f4:	10 e0       	ldi	r17, 0x00	; 0
		ADC   R31                , R17                    ;add high byte+carry    (  1 clock ) 
 7f6:	f1 1f       	adc	r31, r17
		ST    Z+                 , R24                    ;save sleep time        (  2 clocks) 
 7f8:	81 93       	st	Z+, r24
		ST    Z                  , R25                    ;save sleep time        (  2 clocks) 
 7fa:	90 83       	st	Z, r25
		
		;update task scheduler status as blocked
		LDI   R30                , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 7fc:	ee e1       	ldi	r30, 0x1E	; 30
		LDI   R31                , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 7fe:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 800:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 802:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 804:	f0 1f       	adc	r31, r16
        LDI   R16                , TASK_BLOCK             ;block task until cnt=0 (  1 clock ) 
 806:	00 e0       	ldi	r16, 0x00	; 0
		ST    Z                  , R16                    ;save block flag        (  2 clocks) 
 808:	00 83       	st	Z, r16
		
		;run scheduler, load next task sp, restore context
		KER_RUN_SCHEDULER                                 ;run scheduler for tasks( 14 clocks) 
 80a:	00 91 08 01 	lds	r16, 0x0108

0000080e <_CH_TASK_READY15>:
 80e:	0a 95       	dec	r16
 810:	10 2f       	mov	r17, r16
 812:	ee e1       	ldi	r30, 0x1E	; 30
 814:	f1 e0       	ldi	r31, 0x01	; 1
 816:	e1 0f       	add	r30, r17
 818:	10 e0       	ldi	r17, 0x00	; 0
 81a:	f1 0f       	add	r31, r17
 81c:	10 81       	ld	r17, Z
 81e:	11 30       	cpi	r17, 0x01	; 1
 820:	21 f0       	breq	.+8      	; 0x82a <_NEXT_TASK_FOUND15>

00000822 <_LOOP_CNT15>:
 822:	00 30       	cpi	r16, 0x00	; 0
 824:	a1 f7       	brne	.-24     	; 0x80e <_CH_TASK_READY15>
 826:	0c 94 19 04 	jmp	0x832	; 0x832 <_IDLE_TASK15>

0000082a <_NEXT_TASK_FOUND15>:
 82a:	00 93 07 01 	sts	0x0107, r16
 82e:	0c 94 1c 04 	jmp	0x838	; 0x838 <_EXIT15>

00000832 <_IDLE_TASK15>:
 832:	00 e0       	ldi	r16, 0x00	; 0
 834:	00 93 07 01 	sts	0x0107, r16

00000838 <_EXIT15>:
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 838:	00 91 07 01 	lds	r16, 0x0107
 83c:	00 0f       	add	r16, r16
 83e:	ea e0       	ldi	r30, 0x0A	; 10
 840:	f1 e0       	ldi	r31, 0x01	; 1
 842:	e0 0f       	add	r30, r16
 844:	00 e0       	ldi	r16, 0x00	; 0
 846:	f0 1f       	adc	r31, r16
 848:	01 91       	ld	r16, Z+
 84a:	10 81       	ld	r17, Z
 84c:	0d bf       	out	0x3d, r16	; 61
 84e:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE_YEILD                         ;restore context        ( 67 clocks) 
 850:	ff 91       	pop	r31
 852:	ef 91       	pop	r30
 854:	df 91       	pop	r29
 856:	cf 91       	pop	r28
 858:	bf 91       	pop	r27
 85a:	af 91       	pop	r26
 85c:	9f 91       	pop	r25
 85e:	8f 91       	pop	r24
 860:	7f 91       	pop	r23
 862:	6f 91       	pop	r22
 864:	5f 91       	pop	r21
 866:	4f 91       	pop	r20
 868:	3f 91       	pop	r19
 86a:	2f 91       	pop	r18
 86c:	1f 91       	pop	r17
 86e:	0f 91       	pop	r16
 870:	ff 90       	pop	r15
 872:	ef 90       	pop	r14
 874:	df 90       	pop	r13
 876:	cf 90       	pop	r12
 878:	bf 90       	pop	r11
 87a:	af 90       	pop	r10
 87c:	9f 90       	pop	r9
 87e:	8f 90       	pop	r8
 880:	7f 90       	pop	r7
 882:	6f 90       	pop	r6
 884:	5f 90       	pop	r5
 886:	4f 90       	pop	r4
 888:	3f 90       	pop	r3
 88a:	2f 90       	pop	r2
 88c:	1f 90       	pop	r1
 88e:	0f 90       	pop	r0
 890:	0f be       	out	0x3f, r0	; 63
 892:	0f 90       	pop	r0
 894:	78 94       	sei
		
		RET                                               ;return from subroutine (  4 clocks) 
 896:	08 95       	ret

00000898 <Kernel_Task_Sleep_Time_Get>:


;;================================kernel task delay starting================================;; 
Kernel_Task_Sleep_Time_Get:
		;create next task wakeup time
		LDS   R16                , KerBase+OFF_TID        ;load tak_id            (  2 clocks) 
 898:	00 91 07 01 	lds	r16, 0x0107
		LSL   R16                                         ;x2                     (  1 clock ) 
 89c:	00 0f       	add	r16, r16
		LDI   R30                , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 89e:	e2 e3       	ldi	r30, 0x32	; 50
		LDI   R31                , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 8a0:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 8a2:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 8a4:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 8a6:	f0 1f       	adc	r31, r16
		LD    R24                , Z+                     ;load sleep time        (  2 clocks) 
 8a8:	81 91       	ld	r24, Z+
		LD    R25                , Z                      ;load sleep time        (  2 clocks) 
 8aa:	90 81       	ld	r25, Z
		RET                                               ;return from subroutine (  4 clocks) 
 8ac:	08 95       	ret

000008ae <Kernel_Task_Sts_Get>:


;;================================kernel task delay starting================================;; 
Kernel_Task_Sts_Get:
		;create next task wakeup time
		LDS   R16                , KerBase+OFF_TID        ;load tak_id            (  2 clocks) 
 8ae:	00 91 07 01 	lds	r16, 0x0107
		LDI   R30                , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 8b2:	ee e1       	ldi	r30, 0x1E	; 30
		LDI   R31                , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 8b4:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 8b6:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 8b8:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 8ba:	f0 1f       	adc	r31, r16
		LD    R24                , Z                      ;load sleep time        (  2 clocks) 
 8bc:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 8be:	08 95       	ret

000008c0 <Kernel_Task_Yeild>:


;;================================kernel task yeild starting================================;; 
Kernel_Task_Yeild:
		;save context, save sp, run scheduler, load next task sp, restore context
		KER_CONTEXT_SAVE_YEILD                            ;save context           ( 68 clocks) 
 8c0:	0f 92       	push	r0
 8c2:	0f b6       	in	r0, 0x3f	; 63
 8c4:	f8 94       	cli
 8c6:	0f 92       	push	r0
 8c8:	1f 92       	push	r1
 8ca:	11 24       	eor	r1, r1
 8cc:	2f 92       	push	r2
 8ce:	3f 92       	push	r3
 8d0:	4f 92       	push	r4
 8d2:	5f 92       	push	r5
 8d4:	6f 92       	push	r6
 8d6:	7f 92       	push	r7
 8d8:	8f 92       	push	r8
 8da:	9f 92       	push	r9
 8dc:	af 92       	push	r10
 8de:	bf 92       	push	r11
 8e0:	cf 92       	push	r12
 8e2:	df 92       	push	r13
 8e4:	ef 92       	push	r14
 8e6:	ff 92       	push	r15
 8e8:	0f 93       	push	r16
 8ea:	1f 93       	push	r17
 8ec:	2f 93       	push	r18
 8ee:	3f 93       	push	r19
 8f0:	4f 93       	push	r20
 8f2:	5f 93       	push	r21
 8f4:	6f 93       	push	r22
 8f6:	7f 93       	push	r23
 8f8:	8f 93       	push	r24
 8fa:	9f 93       	push	r25
 8fc:	af 93       	push	r26
 8fe:	bf 93       	push	r27
 900:	cf 93       	push	r28
 902:	df 93       	push	r29
 904:	ef 93       	push	r30
 906:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 908:	0d b7       	in	r16, 0x3d	; 61
 90a:	1e b7       	in	r17, 0x3e	; 62
 90c:	20 91 07 01 	lds	r18, 0x0107
 910:	22 0f       	add	r18, r18
 912:	ea e0       	ldi	r30, 0x0A	; 10
 914:	f1 e0       	ldi	r31, 0x01	; 1
 916:	e2 0f       	add	r30, r18
 918:	f1 1d       	adc	r31, r1
 91a:	01 93       	st	Z+, r16
 91c:	10 83       	st	Z, r17
		KER_RUN_SCHEDULER                                 ;run scheduler for tasks( 14 clocks) 
 91e:	00 91 08 01 	lds	r16, 0x0108

00000922 <_CH_TASK_READY20>:
 922:	0a 95       	dec	r16
 924:	10 2f       	mov	r17, r16
 926:	ee e1       	ldi	r30, 0x1E	; 30
 928:	f1 e0       	ldi	r31, 0x01	; 1
 92a:	e1 0f       	add	r30, r17
 92c:	10 e0       	ldi	r17, 0x00	; 0
 92e:	f1 0f       	add	r31, r17
 930:	10 81       	ld	r17, Z
 932:	11 30       	cpi	r17, 0x01	; 1
 934:	21 f0       	breq	.+8      	; 0x93e <_NEXT_TASK_FOUND20>

00000936 <_LOOP_CNT20>:
 936:	00 30       	cpi	r16, 0x00	; 0
 938:	a1 f7       	brne	.-24     	; 0x922 <_CH_TASK_READY20>
 93a:	0c 94 a3 04 	jmp	0x946	; 0x946 <_IDLE_TASK20>

0000093e <_NEXT_TASK_FOUND20>:
 93e:	00 93 07 01 	sts	0x0107, r16
 942:	0c 94 a6 04 	jmp	0x94c	; 0x94c <_EXIT20>

00000946 <_IDLE_TASK20>:
 946:	00 e0       	ldi	r16, 0x00	; 0
 948:	00 93 07 01 	sts	0x0107, r16

0000094c <_EXIT20>:
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 94c:	00 91 07 01 	lds	r16, 0x0107
 950:	00 0f       	add	r16, r16
 952:	ea e0       	ldi	r30, 0x0A	; 10
 954:	f1 e0       	ldi	r31, 0x01	; 1
 956:	e0 0f       	add	r30, r16
 958:	00 e0       	ldi	r16, 0x00	; 0
 95a:	f0 1f       	adc	r31, r16
 95c:	01 91       	ld	r16, Z+
 95e:	10 81       	ld	r17, Z
 960:	0d bf       	out	0x3d, r16	; 61
 962:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 964:	ff 91       	pop	r31
 966:	ef 91       	pop	r30
 968:	df 91       	pop	r29
 96a:	cf 91       	pop	r28
 96c:	bf 91       	pop	r27
 96e:	af 91       	pop	r26
 970:	9f 91       	pop	r25
 972:	8f 91       	pop	r24
 974:	7f 91       	pop	r23
 976:	6f 91       	pop	r22
 978:	5f 91       	pop	r21
 97a:	4f 91       	pop	r20
 97c:	3f 91       	pop	r19
 97e:	2f 91       	pop	r18
 980:	1f 91       	pop	r17
 982:	0f 91       	pop	r16
 984:	ff 90       	pop	r15
 986:	ef 90       	pop	r14
 988:	df 90       	pop	r13
 98a:	cf 90       	pop	r12
 98c:	bf 90       	pop	r11
 98e:	af 90       	pop	r10
 990:	9f 90       	pop	r9
 992:	8f 90       	pop	r8
 994:	7f 90       	pop	r7
 996:	6f 90       	pop	r6
 998:	5f 90       	pop	r5
 99a:	4f 90       	pop	r4
 99c:	3f 90       	pop	r3
 99e:	2f 90       	pop	r2
 9a0:	1f 90       	pop	r1
 9a2:	0f 90       	pop	r0
 9a4:	0f be       	out	0x3f, r0	; 63
 9a6:	0f 90       	pop	r0
		SEI                                               ;enable interrupt       (  1 clock ) 
 9a8:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
 9aa:	08 95       	ret

000009ac <Debug_Init>:
.global  Debug_Print_TSK

;;========================================Debug Init========================================;;
Debug_Init:
        ;init registers for UART0
		LDI   R16                , (1<<1)                 ;mask U2x,                (1 clock )
 9ac:	02 e0       	ldi	r16, 0x02	; 2
		STS   SRUCSR0A           , R16                    ;load val to UCSR0A,      (2 clocks)
 9ae:	00 93 c0 00 	sts	0x00C0, r16
		MOV   R16                , R25                    ;clear R16,               (1 clock )
 9b2:	09 2f       	mov	r16, r25
		STS   SRUBRR0H           , R16                    ;load val to UBRR0H,      (2 clocks)
 9b4:	00 93 c5 00 	sts	0x00C5, r16
		MOV   R16                , R24                    ;set 0x03, 250k baud,     (1 clock )
 9b8:	08 2f       	mov	r16, r24
		STS   SRUBRR0L           , R16                    ;load val to UBRR0L,      (2 clocks)
 9ba:	00 93 c4 00 	sts	0x00C4, r16
		LDI   R16                , (1<<1)|(1<<2)          ;config 8 data bit        (1 clock )
 9be:	06 e0       	ldi	r16, 0x06	; 6
		STS   SRUCSR0C           , R16                    ;load val to UCSR0C,      (2 clocks)
 9c0:	00 93 c2 00 	sts	0x00C2, r16
		LDI   R16                , (1<<3)                 ;enable tx,               (1 clock )
 9c4:	08 e0       	ldi	r16, 0x08	; 8
		STS   SRUCSR0B           , R16                    ;load val to UCSR0B,      (2 clocks)
 9c6:	00 93 c1 00 	sts	0x00C1, r16
        RET                                               ;return from subroutine,  (4 clocks) 
 9ca:	08 95       	ret

000009cc <Debug_Tx_Byte>:


;;=========================================Debug Tx=========================================;;
Debug_Tx_Byte:
		;write single byte to data register (Arg R24)
		STS   SRGPIOR0           , R16                    ;store R16 val,           (2 clocks)
 9cc:	00 93 3e 00 	sts	0x003E, r16
		STS   SRUDR0             , R24                    ;load val to UDR0,        (2 clocks)
 9d0:	80 93 c6 00 	sts	0x00C6, r24

000009d4 <__UDRE0_CLEARED>:
		
    __UDRE0_CLEARED:
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,      (2 clocks)
 9d4:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x05                   ;skip if UDRE0 is set,    (2 clocks)
 9d8:	05 ff       	sbrs	r16, 5
		RJMP  __UDRE0_CLEARED                             ;wait until UDRE0 is set, (2 clocks)
 9da:	fc cf       	rjmp	.-8      	; 0x9d4 <__UDRE0_CLEARED>
		LDS   R16                , SRGPIOR0               ;restore R16 val,         (2 clocks)
 9dc:	00 91 3e 00 	lds	r16, 0x003E
        RET                                               ;return from subroutine,  (4 clocks) 
 9e0:	08 95       	ret

000009e2 <Debug_Tx_Byte_Conf>:


;;=========================================Debug Tx=========================================;;
Debug_Tx_Byte_Conf:
        ;write 1 byte, (Arg R24), Args retained
		STS   SRGPIOR0           , R16                    ;store R16 val,           (2 clocks)
 9e2:	00 93 3e 00 	sts	0x003E, r16
		STS   SRUDR0             , R24                    ;load val to UDR0,        (2 clocks)
 9e6:	80 93 c6 00 	sts	0x00C6, r24

000009ea <__TXC0_CLEARED>:
		
    __TXC0_CLEARED:
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,      (2 clocks)
 9ea:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x06                   ;skip if TXC0 is set,     (2 clocks)
 9ee:	06 ff       	sbrs	r16, 6
		RJMP  __TXC0_CLEARED                              ;wait until TXC0 is set,  (2 clocks)
 9f0:	fc cf       	rjmp	.-8      	; 0x9ea <__TXC0_CLEARED>
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,      (2 clocks)
 9f2:	00 91 c0 00 	lds	r16, 0x00C0
		ORI   R16                , (1<<6)                 ;mask bit 6,              (1 clock )
 9f6:	00 64       	ori	r16, 0x40	; 64
		STS   SRUCSR0A           , R16                    ;load val to UCSR0B,      (2 clocks)
 9f8:	00 93 c0 00 	sts	0x00C0, r16
		LDS   R16                , SRGPIOR0               ;restore R16 val,         (2 clocks)
 9fc:	00 91 3e 00 	lds	r16, 0x003E
        RET                                               ;return from subroutine,  (4 clocks) 
 a00:	08 95       	ret

00000a02 <Debug_Tx_Word_Conf>:

;;======================================Debug Tx Word=======================================;;
Debug_Tx_Word_Conf:
        ;write 2 bytes, (Arg R24, R25), Args retained
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 a02:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <Debug_Tx_Byte_Conf>
		STS   SRGPIOR0           , R24                    ;store R24 val,           (2 clocks)
 a06:	80 93 3e 00 	sts	0x003E, r24
		MOV   R24                , R25                    ;copy R25 to R24          (1 clock )
 a0a:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 a0c:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR0               ;restore R24 val,         (2 clocks)
 a10:	80 91 3e 00 	lds	r24, 0x003E
        RET                                               ;return from subroutine,  (4 clocks) 
 a14:	08 95       	ret

00000a16 <Debug_Tx_DWord_Conf>:

;;=====================================Debug Tx DWord=======================================;;
Debug_Tx_DWord_Conf:
        ;write 4 bytes, (Arg R22-R25), Args retained
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks)
 a16:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R22                    ;copy R22 to R24          (1 clock )
 a1a:	86 2f       	mov	r24, r22
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 a1c:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <Debug_Tx_Byte_Conf>
		MOV   R24                , R23                    ;copy R23 to R24          (1 clock )
 a20:	87 2f       	mov	r24, r23
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 a22:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24              (2 clocks)
 a26:	80 91 4a 00 	lds	r24, 0x004A
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 a2a:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <Debug_Tx_Byte_Conf>
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks)
 a2e:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R25                    ;copy R22 to R24          (1 clock )
 a32:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 a34:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24 val,         (2 clocks)
 a38:	80 91 4a 00 	lds	r24, 0x004A
        RET                                               ;return from subroutine,  (4 clocks) 
 a3c:	08 95       	ret

00000a3e <Debug_Tx_From_RAM>:


;;===================================Debug Tx From RAM======================================;;
Debug_Tx_From_RAM:
        ;print data from RAM address (Arg R24-R25)
		MOV   R16                , R30                    ;copy R30 to R16          (1 clock )
 a3e:	0e 2f       	mov	r16, r30
		MOV   R17                , R31                    ;copy R31 to R17          (1 clock )
 a40:	1f 2f       	mov	r17, r31
		MOV   R18                , R24                    ;copy R24 to R18          (1 clock )
 a42:	28 2f       	mov	r18, r24
		MOV   R30                , R24                    ;copy R22 to R24          (1 clock )
 a44:	e8 2f       	mov	r30, r24
		MOV   R31                , R25                    ;copy R22 to R24          (1 clock )
 a46:	f9 2f       	mov	r31, r25
		LD    R24                , Z                      ;load val to R24          (2 clocks)
 a48:	80 81       	ld	r24, Z
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 a4a:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <Debug_Tx_Byte_Conf>
		MOV   R30                , R16                    ;copy R16 to R30          (1 clock )
 a4e:	e0 2f       	mov	r30, r16
		MOV   R31                , R17                    ;copy R17 to R31          (1 clock )
 a50:	f1 2f       	mov	r31, r17
		MOV   R24                , R18                    ;copy R18 to R24          (1 clock )
 a52:	82 2f       	mov	r24, r18
        RET                                               ;return from subroutine,  (4 clocks) 
 a54:	08 95       	ret

00000a56 <Debug_Tx_RAM_Area>:

;;===================================Debug Tx RAM Area======================================;;
Debug_Tx_RAM_Area:
        ;print data from RAM address (arguments R24:R25, R22)
	__DUMP_BYTES:
	    CALL  Debug_Tx_From_RAM                           ;send via uart from ram
 a56:	0e 94 1f 05 	call	0xa3e	; 0xa3e <Debug_Tx_From_RAM>
		SUBI  R24                , 0x01                   ;decrement from LSByte
 a5a:	81 50       	subi	r24, 0x01	; 1
        SBCI  R25                , 0x00                   ;decrement if carry
 a5c:	90 40       	sbci	r25, 0x00	; 0
		SUBI  R22                , 0x01                   ;decrement
 a5e:	61 50       	subi	r22, 0x01	; 1
		BRNE  __DUMP_BYTES
 a60:	d1 f7       	brne	.-12     	; 0xa56 <Debug_Tx_RAM_Area>
        RET                                               ;return from subroutine,  (4 clocks) 
 a62:	08 95       	ret

00000a64 <Debug_Print_TSK>:


;;=====================================Debug Dummy Print====================================;;
Debug_Print_TSK:
        ;write 4 bytes, (Arg R22-R25), Args retained
		MOV   R16                , R24                    ;copy R24 to R16          (1 clock )
 a64:	08 2f       	mov	r16, r24
		;LDI   R17                , 48                     ;load 48 to reg           (1 clock )
		;ADD   R16                , R17                    ;to convert val to char   (1 clock )
		LDI   R22                , 'T'                    ;copy char                (1 clock )
 a66:	64 e5       	ldi	r22, 0x54	; 84
		LDI   R23                , 'S'                    ;copy char                (1 clock )
 a68:	73 e5       	ldi	r23, 0x53	; 83
		LDI   R24                , 'k'                    ;copy char                (1 clock )
 a6a:	8b e6       	ldi	r24, 0x6B	; 107
		MOV   R25                , R16                    ;copy char                (1 clock )
 a6c:	90 2f       	mov	r25, r16
		CALL  Debug_Tx_DWord_Conf                         ;send via uart
 a6e:	0e 94 0b 05 	call	0xa16	; 0xa16 <Debug_Tx_DWord_Conf>
		LDI   R24                , '\r'                   ;copy char                (1 clock )
 a72:	8d e0       	ldi	r24, 0x0D	; 13
		LDI   R25                , '\n'                   ;copy char                (1 clock )
 a74:	9a e0       	ldi	r25, 0x0A	; 10
		CALL  Debug_Tx_Word_Conf                          ;send via uart
 a76:	0e 94 01 05 	call	0xa02	; 0xa02 <Debug_Tx_Word_Conf>
        RET                                               ;return from subroutine,  (4 clocks) 
 a7a:	08 95       	ret

00000a7c <_exit>:
 a7c:	f8 94       	cli

00000a7e <__stop_program>:
 a7e:	ff cf       	rjmp	.-2      	; 0xa7e <__stop_program>
