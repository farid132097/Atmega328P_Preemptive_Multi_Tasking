
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000634  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000554  00800100  00800100  000006a8  2**0
                  ALLOC
  2 .stab         00000924  00000000  00000000  000006a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000006d  00000000  00000000  00000fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00001039  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000bd  00000000  00000000  00001079  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000021f  00000000  00000000  00001136  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000b1  00000000  00000000  00001355  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000282  00000000  00000000  00001406  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001688  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000117  00000000  00000000  00001748  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 06 01 	jmp	0x20c	; 0x20c <__vector_16>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	00 00       	nop
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 00       	nop
  76:	00 00       	nop
  78:	00 00       	nop
  7a:	00 00       	nop
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 00       	nop
  82:	00 00       	nop
  84:	00 00       	nop
  86:	00 00       	nop
  88:	c1 c0       	rjmp	.+386    	; 0x20c <__vector_16>

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61
  96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  9a:	0c 94 18 03 	jmp	0x630	; 0x630 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:
 

    
int main(void) {
    
	Kernel_Init();
  a2:	0e 94 7f 02 	call	0x4fe	; 0x4fe <Kernel_Init>
    
	//Kernel_SysTick_Reg_Init(0x03, 0x82);
	
	//Kernel_Task_Create(Kernel_Task_Idle,  5);
	Kernel_Task_Create(Tasks_Task0,  4);
  a6:	89 ef       	ldi	r24, 0xF9	; 249
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	64 e0       	ldi	r22, 0x04	; 4
  ac:	0e 94 d7 01 	call	0x3ae	; 0x3ae <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task1,  0);
  b0:	86 ee       	ldi	r24, 0xE6	; 230
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	0e 94 d7 01 	call	0x3ae	; 0x3ae <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task2,  1);
  ba:	83 ed       	ldi	r24, 0xD3	; 211
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	61 e0       	ldi	r22, 0x01	; 1
  c0:	0e 94 d7 01 	call	0x3ae	; 0x3ae <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task3,  2);
  c4:	86 ec       	ldi	r24, 0xC6	; 198
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	62 e0       	ldi	r22, 0x02	; 2
  ca:	0e 94 d7 01 	call	0x3ae	; 0x3ae <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task4,  3);
  ce:	89 eb       	ldi	r24, 0xB9	; 185
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	63 e0       	ldi	r22, 0x03	; 3
  d4:	0e 94 d7 01 	call	0x3ae	; 0x3ae <Kernel_Task_Create>
	//Kernel_Task_Create(Tasks_Task6,  3);
	//Kernel_Task_Create(Tasks_Task7,  1);
	//Kernel_Task_Create(Tasks_Task8,  7);
	
    
    Debug_Init(0);
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 c4 02 	call	0x588	; 0x588 <Debug_Init>
    Debug_Tx_Byte_Conf(Kernel_Task_Prio_Get(0));
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	0e 94 b6 02 	call	0x56c	; 0x56c <Kernel_Task_Prio_Get>
  e6:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Debug_Tx_Byte_Conf>
    Debug_Tx_Byte_Conf(Kernel_Task_Prio_Get(1));
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	0e 94 b6 02 	call	0x56c	; 0x56c <Kernel_Task_Prio_Get>
  f0:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Debug_Tx_Byte_Conf>
	Debug_Tx_Byte_Conf(Kernel_Task_Prio_Get(2));
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	0e 94 b6 02 	call	0x56c	; 0x56c <Kernel_Task_Prio_Get>
  fa:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Debug_Tx_Byte_Conf>
	Debug_Tx_Byte_Conf(Kernel_Task_Prio_Get(3));
  fe:	83 e0       	ldi	r24, 0x03	; 3
 100:	0e 94 b6 02 	call	0x56c	; 0x56c <Kernel_Task_Prio_Get>
 104:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Debug_Tx_Byte_Conf>
	Debug_Tx_Byte_Conf(Kernel_Task_Prio_Get(4));
 108:	84 e0       	ldi	r24, 0x04	; 4
 10a:	0e 94 b6 02 	call	0x56c	; 0x56c <Kernel_Task_Prio_Get>
 10e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Debug_Tx_Byte_Conf>
	Debug_Tx_Byte_Conf(Kernel_Task_Prio_Get(5));
 112:	85 e0       	ldi	r24, 0x05	; 5
 114:	0e 94 b6 02 	call	0x56c	; 0x56c <Kernel_Task_Prio_Get>
 118:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Debug_Tx_Byte_Conf>
    Debug_Tx_Byte_Conf(Kernel_High_Prio_Task_ID_Get());
 11c:	0e 94 bd 02 	call	0x57a	; 0x57a <Kernel_High_Prio_Task_ID_Get>
 120:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Debug_Tx_Byte_Conf>
	Debug_Tx_Byte_Conf(Kernel_Abs_High_Prio_Task_ID_Get());
 124:	0e 94 c1 02 	call	0x582	; 0x582 <Kernel_Abs_High_Prio_Task_ID_Get>
 128:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Debug_Tx_Byte_Conf>
    
	//DDRD |= (1<<5);
	//PORTD ^= (1<<5);
	Kernel_Start_Tasks();
 12c:	0e 94 43 02 	call	0x486	; 0x486 <Kernel_Start_Tasks>
 130:	ff cf       	rjmp	.-2      	; 0x130 <SRUDR0+0x6a>

00000132 <Tasks_Task8>:
  }
}

void Tasks_Task8(void){
  
  Debug_Init(0);
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 c4 02 	call	0x588	; 0x588 <Debug_Init>
  uint16_t val = 240;
  
  while(1){
    
	  Debug_Tx_Byte_Conf(8);
 13a:	88 e0       	ldi	r24, 0x08	; 8
 13c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Debug_Tx_Byte_Conf>
 140:	fc cf       	rjmp	.-8      	; 0x13a <Tasks_Task8+0x8>

00000142 <Tasks_Task7>:
  }
}

void Tasks_Task7(void){
  
  Debug_Init(0);
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 c4 02 	call	0x588	; 0x588 <Debug_Init>
  uint16_t val = 220;
  
  while(1){
    
	  Debug_Tx_Byte_Conf(7);
 14a:	87 e0       	ldi	r24, 0x07	; 7
 14c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Debug_Tx_Byte_Conf>
 150:	fc cf       	rjmp	.-8      	; 0x14a <Tasks_Task7+0x8>

00000152 <Tasks_Task6>:
  }
}

void Tasks_Task6(void){
  
  Debug_Init(0);
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 c4 02 	call	0x588	; 0x588 <Debug_Init>
  uint16_t val = 200;
  
  while(1){
    
	  Debug_Tx_Byte_Conf(6);
 15a:	86 e0       	ldi	r24, 0x06	; 6
 15c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Debug_Tx_Byte_Conf>
 160:	fc cf       	rjmp	.-8      	; 0x15a <Tasks_Task6+0x8>

00000162 <Tasks_Task5>:
  }
}

void Tasks_Task5(void){
  
  Debug_Init(0);
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 c4 02 	call	0x588	; 0x588 <Debug_Init>
  uint16_t val = 180;
  
  while(1){
    
    Debug_Tx_Byte_Conf(5);
 16a:	85 e0       	ldi	r24, 0x05	; 5
 16c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Debug_Tx_Byte_Conf>
 170:	fc cf       	rjmp	.-8      	; 0x16a <Tasks_Task5+0x8>

00000172 <Tasks_Task4>:
  }
}

void Tasks_Task4(void){
  
  Debug_Init(0);
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 c4 02 	call	0x588	; 0x588 <Debug_Init>
  uint16_t val = 160;
  
  while(1){
    
	
	  Debug_Tx_Byte_Conf(4);
 17a:	84 e0       	ldi	r24, 0x04	; 4
 17c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Debug_Tx_Byte_Conf>
	  //Debug_Tx_Word_Conf(val--);
    Debug_Tx_Byte_Conf(0x10+Kernel_High_Prio_Task_ID_Get());
 180:	0e 94 bd 02 	call	0x57a	; 0x57a <Kernel_High_Prio_Task_ID_Get>
 184:	80 5f       	subi	r24, 0xF0	; 240
 186:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Debug_Tx_Byte_Conf>
 18a:	f7 cf       	rjmp	.-18     	; 0x17a <Tasks_Task4+0x8>

0000018c <Tasks_Task3>:
  }
}

void Tasks_Task3(void){
  
  Debug_Init(0);
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 c4 02 	call	0x588	; 0x588 <Debug_Init>
  uint16_t val = 140;
  
  while(1){
    
	  Debug_Tx_Byte_Conf(3);
 194:	83 e0       	ldi	r24, 0x03	; 3
 196:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Debug_Tx_Byte_Conf>
	  //Debug_Tx_Word_Conf(val--);
    Debug_Tx_Byte_Conf(0x10+Kernel_High_Prio_Task_ID_Get());
 19a:	0e 94 bd 02 	call	0x57a	; 0x57a <Kernel_High_Prio_Task_ID_Get>
 19e:	80 5f       	subi	r24, 0xF0	; 240
 1a0:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Debug_Tx_Byte_Conf>
 1a4:	f7 cf       	rjmp	.-18     	; 0x194 <Tasks_Task3+0x8>

000001a6 <Tasks_Task2>:
	  //Kernel_Task_Sleep(5);
	
  }
}

void Tasks_Task2(void){
 1a6:	1f 93       	push	r17
  
  Debug_Init(0);
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 c4 02 	call	0x588	; 0x588 <Debug_Init>
  DDRD |= (1<<6);
 1b0:	56 9a       	sbi	0x0a, 6	; 10
  uint16_t val = 120;
  
  while(1){
    
    PORTD ^= (1<<6);
 1b2:	10 e4       	ldi	r17, 0x40	; 64
 1b4:	8b b1       	in	r24, 0x0b	; 11
 1b6:	81 27       	eor	r24, r17
 1b8:	8b b9       	out	0x0b, r24	; 11
	  Debug_Tx_Byte_Conf(2);
 1ba:	82 e0       	ldi	r24, 0x02	; 2
 1bc:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Debug_Tx_Byte_Conf>
    //Debug_Tx_Word_Conf(val--);
    Debug_Tx_Byte_Conf(0x10+Kernel_High_Prio_Task_ID_Get());
 1c0:	0e 94 bd 02 	call	0x57a	; 0x57a <Kernel_High_Prio_Task_ID_Get>
 1c4:	80 5f       	subi	r24, 0xF0	; 240
 1c6:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Debug_Tx_Byte_Conf>
 1ca:	f4 cf       	rjmp	.-24     	; 0x1b4 <Tasks_Task2+0xe>

000001cc <Tasks_Task1>:
	  //Kernel_Task_Sleep(2);
	
  }
}

void Tasks_Task1(void){
 1cc:	1f 93       	push	r17
  
  Debug_Init(0);
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 c4 02 	call	0x588	; 0x588 <Debug_Init>
  DDRD |= (1<<5);
 1d6:	55 9a       	sbi	0x0a, 5	; 10
  uint16_t val = 100;
  
  while(1){
    
    PORTD ^= (1<<5);
 1d8:	10 e2       	ldi	r17, 0x20	; 32
 1da:	8b b1       	in	r24, 0x0b	; 11
 1dc:	81 27       	eor	r24, r17
 1de:	8b b9       	out	0x0b, r24	; 11
	  Debug_Tx_Byte_Conf(1);
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Debug_Tx_Byte_Conf>
	  //Debug_Tx_Word_Conf(val--);
    Debug_Tx_Byte_Conf(0x10+Kernel_High_Prio_Task_ID_Get());
 1e6:	0e 94 bd 02 	call	0x57a	; 0x57a <Kernel_High_Prio_Task_ID_Get>
 1ea:	80 5f       	subi	r24, 0xF0	; 240
 1ec:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Debug_Tx_Byte_Conf>
 1f0:	f4 cf       	rjmp	.-24     	; 0x1da <Tasks_Task1+0xe>

000001f2 <Tasks_Task0>:
#include "tasks.h"
#include "debug.h"

void Tasks_Task0(void){
  
  Debug_Init(0);
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 c4 02 	call	0x588	; 0x588 <Debug_Init>
  
  uint16_t val = 80;
  
  while(1){
    
	  Debug_Tx_Byte_Conf(0);
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Debug_Tx_Byte_Conf>
	  //Debug_Tx_Word_Conf(val--);
    Debug_Tx_Byte_Conf(0x10+Kernel_High_Prio_Task_ID_Get());
 200:	0e 94 bd 02 	call	0x57a	; 0x57a <Kernel_High_Prio_Task_ID_Get>
 204:	80 5f       	subi	r24, 0xF0	; 240
 206:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Debug_Tx_Byte_Conf>
 20a:	f7 cf       	rjmp	.-18     	; 0x1fa <Tasks_Task0+0x8>

0000020c <__vector_16>:


;;=================================ISR execution starting===================================;; 
.global  __vector_16
    __vector_16:                                          ;total 26.13uS @8MHz    (211 clocks) 
	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 20c:	29 9a       	sbi	0x05, 1	; 5
        KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 20e:	0f 92       	push	r0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	0f 92       	push	r0
 214:	1f 92       	push	r1
 216:	11 24       	eor	r1, r1
 218:	2f 92       	push	r2
 21a:	3f 92       	push	r3
 21c:	4f 92       	push	r4
 21e:	5f 92       	push	r5
 220:	6f 92       	push	r6
 222:	7f 92       	push	r7
 224:	8f 92       	push	r8
 226:	9f 92       	push	r9
 228:	af 92       	push	r10
 22a:	bf 92       	push	r11
 22c:	cf 92       	push	r12
 22e:	df 92       	push	r13
 230:	ef 92       	push	r14
 232:	ff 92       	push	r15
 234:	0f 93       	push	r16
 236:	1f 93       	push	r17
 238:	2f 93       	push	r18
 23a:	3f 93       	push	r19
 23c:	4f 93       	push	r20
 23e:	5f 93       	push	r21
 240:	6f 93       	push	r22
 242:	7f 93       	push	r23
 244:	8f 93       	push	r24
 246:	9f 93       	push	r25
 248:	af 93       	push	r26
 24a:	bf 93       	push	r27
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	ef 93       	push	r30
 252:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 254:	0d b7       	in	r16, 0x3d	; 61
 256:	1e b7       	in	r17, 0x3e	; 62
 258:	60 91 07 01 	lds	r22, 0x0107
 25c:	26 2f       	mov	r18, r22
 25e:	22 0f       	add	r18, r18
 260:	ea e0       	ldi	r30, 0x0A	; 10
 262:	f1 e0       	ldi	r31, 0x01	; 1
 264:	e2 0f       	add	r30, r18
 266:	20 e0       	ldi	r18, 0x00	; 0
 268:	f2 1f       	adc	r31, r18
 26a:	01 93       	st	Z+, r16
 26c:	10 83       	st	Z, r17
		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 26e:	00 91 06 01 	lds	r16, 0x0106
 272:	00 93 46 00 	sts	0x0046, r16
		KER_TICK_INCREMENT                                ;increment tick counter ( 27 clocks) 
 276:	00 91 00 01 	lds	r16, 0x0100
 27a:	10 91 01 01 	lds	r17, 0x0101
 27e:	20 91 02 01 	lds	r18, 0x0102
 282:	30 91 03 01 	lds	r19, 0x0103
 286:	40 91 04 01 	lds	r20, 0x0104
 28a:	51 e0       	ldi	r21, 0x01	; 1
 28c:	05 0f       	add	r16, r21
 28e:	50 e0       	ldi	r21, 0x00	; 0
 290:	15 1f       	adc	r17, r21
 292:	25 1f       	adc	r18, r21
 294:	35 1f       	adc	r19, r21
 296:	45 1f       	adc	r20, r21
 298:	00 93 00 01 	sts	0x0100, r16
 29c:	10 93 01 01 	sts	0x0101, r17
 2a0:	20 93 02 01 	sts	0x0102, r18
 2a4:	30 93 03 01 	sts	0x0103, r19
 2a8:	40 93 04 01 	sts	0x0104, r20
        
		
		;KER_DEC_SLP_TIMEOUT                               ;decrement of sleep time
		KER_LOAD_NEXT_TASK_ID                             ;load next task_id      ( 13 clocks)
 2ac:	06 2f       	mov	r16, r22
 2ae:	03 95       	inc	r16
 2b0:	70 91 08 01 	lds	r23, 0x0108

000002b4 <_MOD_CONT5>:
 2b4:	07 17       	cp	r16, r23
 2b6:	10 f0       	brcs	.+4      	; 0x2bc <_MOD_DONE5>
 2b8:	07 1b       	sub	r16, r23
 2ba:	fc cf       	rjmp	.-8      	; 0x2b4 <_MOD_CONT5>

000002bc <_MOD_DONE5>:
 2bc:	00 93 07 01 	sts	0x0107, r16
 2c0:	60 2f       	mov	r22, r16
		;KER_RUN_SCHEDULER                                 ;run scheduler          ( 14 clocks) 
	    
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 2c2:	06 2f       	mov	r16, r22
 2c4:	00 0f       	add	r16, r16
 2c6:	ea e0       	ldi	r30, 0x0A	; 10
 2c8:	f1 e0       	ldi	r31, 0x01	; 1
 2ca:	e0 0f       	add	r30, r16
 2cc:	00 e0       	ldi	r16, 0x00	; 0
 2ce:	f0 1f       	adc	r31, r16
 2d0:	01 91       	ld	r16, Z+
 2d2:	10 81       	ld	r17, Z
 2d4:	0d bf       	out	0x3d, r16	; 61
 2d6:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 2d8:	ff 91       	pop	r31
 2da:	ef 91       	pop	r30
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	bf 91       	pop	r27
 2e2:	af 91       	pop	r26
 2e4:	9f 91       	pop	r25
 2e6:	8f 91       	pop	r24
 2e8:	7f 91       	pop	r23
 2ea:	6f 91       	pop	r22
 2ec:	5f 91       	pop	r21
 2ee:	4f 91       	pop	r20
 2f0:	3f 91       	pop	r19
 2f2:	2f 91       	pop	r18
 2f4:	1f 91       	pop	r17
 2f6:	0f 91       	pop	r16
 2f8:	ff 90       	pop	r15
 2fa:	ef 90       	pop	r14
 2fc:	df 90       	pop	r13
 2fe:	cf 90       	pop	r12
 300:	bf 90       	pop	r11
 302:	af 90       	pop	r10
 304:	9f 90       	pop	r9
 306:	8f 90       	pop	r8
 308:	7f 90       	pop	r7
 30a:	6f 90       	pop	r6
 30c:	5f 90       	pop	r5
 30e:	4f 90       	pop	r4
 310:	3f 90       	pop	r3
 312:	2f 90       	pop	r2
 314:	1f 90       	pop	r1
 316:	0f 90       	pop	r0
 318:	0f be       	out	0x3f, r0	; 63
 31a:	0f 90       	pop	r0
	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 31c:	29 98       	cbi	0x05, 1	; 5
		RETI                                              ;return from interrupt  (  4 clocks) 
 31e:	18 95       	reti

00000320 <Kernel_SysTick_Reg_Init>:


;;================================SysTick reg init starting=================================;; 
Kernel_SysTick_Reg_Init:                                  ;total 10.5uS @8MHz     ( 84 clocks) 
        ;arg1 -> prescaler R24, arg2 -> reload val R22
        CLI                                               ;disable global int     (  1 clock ) 
 320:	f8 94       	cli
		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 322:	21 9a       	sbi	0x04, 1	; 4
 324:	29 98       	cbi	0x05, 1	; 5
		
        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 326:	a0 91 1e 01 	lds	r26, 0x011E
 32a:	b0 91 1f 01 	lds	r27, 0x011F
 32e:	0d b7       	in	r16, 0x3d	; 61
 330:	1e b7       	in	r17, 0x3e	; 62
 332:	0d 93       	st	X+, r16
 334:	1d 93       	st	X+, r17
 336:	ed 93       	st	X+, r30
 338:	fd 93       	st	X+, r31
 33a:	a0 93 1e 01 	sts	0x011E, r26
 33e:	b0 93 1f 01 	sts	0x011F, r27

		;clear reg
		LDI   R16                , 0x00                   ;set 0x00 to R16        (  1 clock )
 342:	00 e0       	ldi	r16, 0x00	; 0
        
		;clear tick counter
		STS   KerBase+OFB_TICK0  , R16                    ;clear  KerBase[0]      (  2 clocks) 
 344:	00 93 00 01 	sts	0x0100, r16
		STS   KerBase+OFB_TICK1  , R16                    ;clear  KerBase[1]      (  2 clocks) 
 348:	00 93 01 01 	sts	0x0101, r16
		STS   KerBase+OFB_TICK2  , R16                    ;clear  KerBase[2]      (  2 clocks) 
 34c:	00 93 02 01 	sts	0x0102, r16
		STS   KerBase+OFB_TICK3  , R16                    ;clear  KerBase[3]      (  2 clocks) 
 350:	00 93 03 01 	sts	0x0103, r16
		STS   KerBase+OFB_TICK4  , R16                    ;clear  KerBase[4]      (  2 clocks) 
 354:	00 93 04 01 	sts	0x0104, r16
	    
		;clear system registers
		STS   KerBase+OFB_PRS    , R16                    ;clear  KerBase[5]      (  2 clocks) 
 358:	00 93 05 01 	sts	0x0105, r16
		STS   KerBase+OFB_RLD    , R16                    ;clear  KerBase[6]      (  2 clocks) 
 35c:	00 93 06 01 	sts	0x0106, r16
		STS   KerBase+OFB_TID    , R16                    ;clear  KerBase[7]      (  2 clocks) 
 360:	00 93 07 01 	sts	0x0107, r16
		STS   KerBase+OFB_NTSK   , R16                    ;clear  KerBase[8]      (  2 clocks) 
 364:	00 93 08 01 	sts	0x0108, r16
        STS   KerBase+OFB_PTID   , R16                    ;clear  KerBase[9]      (  2 clocks) 
 368:	00 93 09 01 	sts	0x0109, r16
		
		;clear all timer registers
		STS   SRTCCR0A           , R16                    ;clear TCCR0A           (  2 clocks) 
 36c:	00 93 44 00 	sts	0x0044, r16
		STS   SRTCCR0B           , R16                    ;clear TCCR0B           (  2 clocks) 
 370:	00 93 45 00 	sts	0x0045, r16
		STS   SRTIMSK0           , R16                    ;clear TIMSK0           (  2 clocks) 
 374:	00 93 6e 00 	sts	0x006E, r16
		STS   SRTIFR0            , R16                    ;clear TIFR0            (  2 clocks) 
 378:	00 93 35 00 	sts	0x0035, r16
		STS   SROCR0A            , R16                    ;clear OCR0A            (  2 clocks) 
 37c:	00 93 47 00 	sts	0x0047, r16
		STS   SROCR0B            , R16                    ;clear OCR0B            (  2 clocks) 
 380:	00 93 48 00 	sts	0x0048, r16
		STS   SRTCNT0            , R16                    ;clear TCNT0            (  2 clocks) 
 384:	00 93 46 00 	sts	0x0046, r16
		
		STS   KerBase+OFB_PRS    , R24                    ;KerBase[5] prescaler   (  2 clocks) 
 388:	80 93 05 01 	sts	0x0105, r24
		STS   KerBase+OFB_RLD    , R22                    ;KerBase[6] reload val  (  2 clocks) 
 38c:	60 93 06 01 	sts	0x0106, r22
		
        KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 390:	a0 91 1e 01 	lds	r26, 0x011E
 394:	b0 91 1f 01 	lds	r27, 0x011F
 398:	fe 91       	ld	r31, -X
 39a:	ee 91       	ld	r30, -X
 39c:	1e 91       	ld	r17, -X
 39e:	0e 91       	ld	r16, -X
 3a0:	0d bf       	out	0x3d, r16	; 61
 3a2:	1e bf       	out	0x3e, r17	; 62
 3a4:	a0 93 1e 01 	sts	0x011E, r26
 3a8:	b0 93 1f 01 	sts	0x011F, r27

		RET                                               ;return from subroutine (  4 clocks) 
 3ac:	08 95       	ret

000003ae <Kernel_Task_Create>:

;;===============================kernel task create starting================================;; 
Kernel_Task_Create:                                       ;total 19.86uS @8MHz    (159 clocks) 
        ;func_ptr->R25:R24, task_priority->R22 

        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 3ae:	a0 91 1e 01 	lds	r26, 0x011E
 3b2:	b0 91 1f 01 	lds	r27, 0x011F
 3b6:	0d b7       	in	r16, 0x3d	; 61
 3b8:	1e b7       	in	r17, 0x3e	; 62
 3ba:	0d 93       	st	X+, r16
 3bc:	1d 93       	st	X+, r17
 3be:	ed 93       	st	X+, r30
 3c0:	fd 93       	st	X+, r31
 3c2:	a0 93 1e 01 	sts	0x011E, r26
 3c6:	b0 93 1f 01 	sts	0x011F, r27
		
		;across this function, R16 will be used as task_id 
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 3ca:	00 91 07 01 	lds	r16, 0x0107
		LDI   R17                , 0x00                   ;clear reg              (  1 clock ) 
 3ce:	10 e0       	ldi	r17, 0x00	; 0
		
		;set priority to KerSchPr+task_id
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 3d0:	e6 e3       	ldi	r30, 0x36	; 54
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 3d2:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
 3d4:	e0 0f       	add	r30, r16
		ADC   ZH                 , R17                    ;add high byte+carry    (  1 clock ) 
 3d6:	f1 1f       	adc	r31, r17
		ST    Z                  , R22                    ;save priority          (  2 clocks) 
 3d8:	60 83       	st	Z, r22
		
		;stack pointer for current task (KerStack + KER_STK_SZ*(task_id+1) - 1) ->stack top    
		MOV   R17                , R16                    ;load task_id           (  1 clock ) 
 3da:	10 2f       	mov	r17, r16
		INC   R17                                         ;increment task_id      (  1 clock ) 
 3dc:	13 95       	inc	r17
		LDI   R18                , KER_STK_SZ             ;load stack size        (  1 clock ) 
 3de:	20 e8       	ldi	r18, 0x80	; 128
		MUL   R17                , R18                    ;multiply to get offset (  2 clocks) 
 3e0:	12 9f       	mul	r17, r18
		MOV   ZL                 , R0                     ;load multiplied low    (  1 clocks) 
 3e2:	e0 2d       	mov	r30, r0
		MOV   ZH                 , R1                     ;load multiplied high   (  1 clocks) 
 3e4:	f1 2d       	mov	r31, r1
		SBIW  ZL                 , 0x01                   ;dec multiplied val-1   (  2 clocks) 
 3e6:	31 97       	sbiw	r30, 0x01	; 1
		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 3e8:	11 24       	eor	r1, r1
		LDI   R17                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
 3ea:	14 e5       	ldi	r17, 0x54	; 84
		LDI   R18                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
 3ec:	21 e0       	ldi	r18, 0x01	; 1
		ADD   ZL                 , R17                    ;add low bytes          (  1 clock ) 
 3ee:	e1 0f       	add	r30, r17
		ADC   ZH                 , R18                    ;add high bytes+carry   (  1 clock ) 
 3f0:	f2 1f       	adc	r31, r18
		OUT   IOSPL              , ZL                     ;load SPL               (  1 clock ) 
 3f2:	ed bf       	out	0x3d, r30	; 61
        OUT   IOSPH              , ZH                     ;load SPH               (  1 clock ) 
 3f4:	fe bf       	out	0x3e, r31	; 62
		
		;function argument directly returns word address
	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
 3f6:	8f 93       	push	r24
		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 3f8:	9f 93       	push	r25
		
		;push context to stack of this task
		KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 3fa:	0f 92       	push	r0
 3fc:	0f b6       	in	r0, 0x3f	; 63
 3fe:	0f 92       	push	r0
 400:	1f 92       	push	r1
 402:	11 24       	eor	r1, r1
 404:	2f 92       	push	r2
 406:	3f 92       	push	r3
 408:	4f 92       	push	r4
 40a:	5f 92       	push	r5
 40c:	6f 92       	push	r6
 40e:	7f 92       	push	r7
 410:	8f 92       	push	r8
 412:	9f 92       	push	r9
 414:	af 92       	push	r10
 416:	bf 92       	push	r11
 418:	cf 92       	push	r12
 41a:	df 92       	push	r13
 41c:	ef 92       	push	r14
 41e:	ff 92       	push	r15
 420:	0f 93       	push	r16
 422:	1f 93       	push	r17
 424:	2f 93       	push	r18
 426:	3f 93       	push	r19
 428:	4f 93       	push	r20
 42a:	5f 93       	push	r21
 42c:	6f 93       	push	r22
 42e:	7f 93       	push	r23
 430:	8f 93       	push	r24
 432:	9f 93       	push	r25
 434:	af 93       	push	r26
 436:	bf 93       	push	r27
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	ef 93       	push	r30
 43e:	ff 93       	push	r31
		
		;read stack pointer of current task (necessary when restore)
		IN    R17                , IOSPL                  ;read SPL               (  1 clock ) 
 440:	1d b7       	in	r17, 0x3d	; 61
        IN    R18                , IOSPH                  ;read SPH               (  1 clock ) 
 442:	2e b7       	in	r18, 0x3e	; 62
		
		;calculate the address where current task's SP will be stored and store SP
		MOV   R19                , R16                    ;fetch task_id from arg (  1 clock ) 
 444:	30 2f       	mov	r19, r16
		LSL   R19                                         ;left shift to multiply (  1 clock ) 
 446:	33 0f       	add	r19, r19
		LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 448:	ea e0       	ldi	r30, 0x0A	; 10
		LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 44a:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R19                    ;add offset to array    (  1 clock ) 
 44c:	e3 0f       	add	r30, r19
		ADC   ZH                 , R1                     ;add carry if any       (  1 clock ) 
 44e:	f1 1d       	adc	r31, r1
		ST    Z+                 , R17                    ;SPL at KerPSp+offset   (  2 clocks) 
 450:	11 93       	st	Z+, r17
		ST    z                  , R18                    ;SPH at KerPSp+offset   (  2 clocks) 
 452:	20 83       	st	Z, r18
		
		;increment task_id
		LDS   R17                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 454:	10 91 07 01 	lds	r17, 0x0107
		INC   R17                                         ;increment task_id      (  1 clock ) 
 458:	13 95       	inc	r17
		STS   KerBase+OFB_TID    , R17                    ;store task_id          (  2 clocks) 
 45a:	10 93 07 01 	sts	0x0107, r17

		;increment ntask
		LDS   R17                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 45e:	10 91 08 01 	lds	r17, 0x0108
		INC   R17                                         ;increment ntask        (  1 clock ) 
 462:	13 95       	inc	r17
		STS   KerBase+OFB_NTSK   , R17                    ;store ntask            (  2 clocks) 
 464:	10 93 08 01 	sts	0x0108, r17
		
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 468:	a0 91 1e 01 	lds	r26, 0x011E
 46c:	b0 91 1f 01 	lds	r27, 0x011F
 470:	fe 91       	ld	r31, -X
 472:	ee 91       	ld	r30, -X
 474:	1e 91       	ld	r17, -X
 476:	0e 91       	ld	r16, -X
 478:	0d bf       	out	0x3d, r16	; 61
 47a:	1e bf       	out	0x3e, r17	; 62
 47c:	a0 93 1e 01 	sts	0x011E, r26
 480:	b0 93 1f 01 	sts	0x011F, r27
		
		RET                                               ;return from subroutine (  4 clocks) 
 484:	08 95       	ret

00000486 <Kernel_Start_Tasks>:

;;=================================kernel start tasks starting==============================;; 
Kernel_Start_Tasks:                                       ;total 12.88uS @8MHz    (103 clocks) 
		;start executing from task0
		;save ZP
		MOV   R4                 , ZL                     ;save ZPL               (  2 clocks) 
 486:	4e 2e       	mov	r4, r30
		MOV   R5                 , ZH                     ;save ZPH               (  2 clocks) 
 488:	5f 2e       	mov	r5, r31
		
		;clear task_id
		LDI   R16                , 0x00                   ;load task_id           (  2 clocks) 
 48a:	00 e0       	ldi	r16, 0x00	; 0
		STS   KerBase+OFB_TID    , R16                    ;store task_id          (  2 clocks) 
 48c:	00 93 07 01 	sts	0x0107, r16
		
		;load ZP with addr+offset
		LDI   ZL                 , lo8(KerPSP+0x00)       ;fetch ZPL KerPSP->TID0 (  1 clock ) 
 490:	ea e0       	ldi	r30, 0x0A	; 10
		LDI   ZH                 , hi8(KerPSP+0x00)       ;fetch ZPH KerPSP->TID0 (  1 clock ) 
 492:	f1 e0       	ldi	r31, 0x01	; 1
		
		;load task_id 0 task's SP
		LD    R16                , Z+                     ;load val from Z, inc Z (  2 clocks) 
 494:	01 91       	ld	r16, Z+
		LD    R17                , Z                      ;load val from Z+1      (  2 clocks) 
 496:	10 81       	ld	r17, Z
		
        ;set task_id=0 task's SP
		OUT   IOSPL              , R16                    ;load SPL               (  1 clock ) 
 498:	0d bf       	out	0x3d, r16	; 61
        OUT   IOSPH              , R17                    ;load SPH               (  1 clock ) 
 49a:	1e bf       	out	0x3e, r17	; 62
        
        ;forcefully restore context, in ISR it will be stored automatically
		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 49c:	ff 91       	pop	r31
 49e:	ef 91       	pop	r30
 4a0:	df 91       	pop	r29
 4a2:	cf 91       	pop	r28
 4a4:	bf 91       	pop	r27
 4a6:	af 91       	pop	r26
 4a8:	9f 91       	pop	r25
 4aa:	8f 91       	pop	r24
 4ac:	7f 91       	pop	r23
 4ae:	6f 91       	pop	r22
 4b0:	5f 91       	pop	r21
 4b2:	4f 91       	pop	r20
 4b4:	3f 91       	pop	r19
 4b6:	2f 91       	pop	r18
 4b8:	1f 91       	pop	r17
 4ba:	0f 91       	pop	r16
 4bc:	ff 90       	pop	r15
 4be:	ef 90       	pop	r14
 4c0:	df 90       	pop	r13
 4c2:	cf 90       	pop	r12
 4c4:	bf 90       	pop	r11
 4c6:	af 90       	pop	r10
 4c8:	9f 90       	pop	r9
 4ca:	8f 90       	pop	r8
 4cc:	7f 90       	pop	r7
 4ce:	6f 90       	pop	r6
 4d0:	5f 90       	pop	r5
 4d2:	4f 90       	pop	r4
 4d4:	3f 90       	pop	r3
 4d6:	2f 90       	pop	r2
 4d8:	1f 90       	pop	r1
 4da:	0f 90       	pop	r0
 4dc:	0f be       	out	0x3f, r0	; 63
 4de:	0f 90       	pop	r0

		;restore ZP
		MOV   ZL                 , R4                     ;restore ZPL            (  2 clocks) 
 4e0:	e4 2d       	mov	r30, r4
		MOV   ZH                 , R5                     ;restore ZPL            (  2 clocks) 
 4e2:	f5 2d       	mov	r31, r5
		
		;config timer for system tick
		KER_TIMER_INIT                                    ;init timer, int enable ( 12 clocks) 
 4e4:	00 91 05 01 	lds	r16, 0x0105
 4e8:	10 91 06 01 	lds	r17, 0x0106
 4ec:	00 93 45 00 	sts	0x0045, r16
 4f0:	10 93 46 00 	sts	0x0046, r17
 4f4:	01 e0       	ldi	r16, 0x01	; 1
 4f6:	00 93 6e 00 	sts	0x006E, r16
 4fa:	78 94       	sei
        
		;execute return to jump to task0, pushed while task init
		RET                                               ;return from subroutine (  4 clocks) 
 4fc:	08 95       	ret

000004fe <Kernel_Init>:


;;===================================kernel init starting===================================;; 
Kernel_Init:                                              ;total 37.00uS @8MHz    (296 clocks) 
		;save necessary registers and MSP
		CLR   R1                                          ;gcc expects            (  1 clock ) 
 4fe:	11 24       	eor	r1, r1

        ;store stack top (for MSP) addr to KerSSZ+OFM_MSPI0:1
		LDI   R16                , lo8(KerSSZ+OFM_MSPS)   ;load low address       (  1 clock ) 
 500:	00 e2       	ldi	r16, 0x20	; 32
		LDI   R17                , hi8(KerSSZ+OFM_MSPS)   ;load high address      (  1 clock )
 502:	11 e0       	ldi	r17, 0x01	; 1
        STS   KerSSZ+OFM_MSPI+0  , R16                    ;set mspi to stack top  (  2 clocks) 
 504:	00 93 1e 01 	sts	0x011E, r16
		STS   KerSSZ+OFM_MSPI+1  , R17                    ;set mspi to stack top  (  2 clocks) 
 508:	10 93 1f 01 	sts	0x011F, r17
        
		KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 50c:	a0 91 1e 01 	lds	r26, 0x011E
 510:	b0 91 1f 01 	lds	r27, 0x011F
 514:	0d b7       	in	r16, 0x3d	; 61
 516:	1e b7       	in	r17, 0x3e	; 62
 518:	0d 93       	st	X+, r16
 51a:	1d 93       	st	X+, r17
 51c:	ed 93       	st	X+, r30
 51e:	fd 93       	st	X+, r31
 520:	a0 93 1e 01 	sts	0x011E, r26
 524:	b0 93 1f 01 	sts	0x011F, r27

		;init timer for kernel 
		LDI   R24                , 0x03                   ;set prescaler          (  1 clock ) 
 528:	83 e0       	ldi	r24, 0x03	; 3
		LDI   R22                , 0x82                   ;set reload val         (  1 clock ) 
 52a:	62 e8       	ldi	r22, 0x82	; 130
		CALL  Kernel_SysTick_Reg_Init                     ;init timer             ( 84 clocks) 
 52c:	0e 94 90 01 	call	0x320	; 0x320 <Kernel_SysTick_Reg_Init>
		
		;create idle task at task_id 0, priority 0xFF (lowest)
		LDI   R24                , lo8(Kernel_Task_Idle)  ;load func addr low     (  1 clock ) 
 530:	8c e5       	ldi	r24, 0x5C	; 92
		LDI   R25                , hi8(Kernel_Task_Idle)  ;load func addr high    (  1 clock ) 
 532:	95 e0       	ldi	r25, 0x05	; 5
		LSR   R25                                         ;right shift to divide  (  1 clock ) 
 534:	96 95       	lsr	r25
		ROR   R24                                         ;rotate right th carry  (  1 clock ) 
 536:	87 95       	ror	r24
		LDI   R22                , 0xFF                   ;set max val
 538:	6f ef       	ldi	r22, 0xFF	; 255
		CALL  Kernel_Task_Create                          ;init idle task         (159 clocks) 
 53a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <Kernel_Task_Create>
		
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 53e:	a0 91 1e 01 	lds	r26, 0x011E
 542:	b0 91 1f 01 	lds	r27, 0x011F
 546:	fe 91       	ld	r31, -X
 548:	ee 91       	ld	r30, -X
 54a:	1e 91       	ld	r17, -X
 54c:	0e 91       	ld	r16, -X
 54e:	0d bf       	out	0x3d, r16	; 61
 550:	1e bf       	out	0x3e, r17	; 62
 552:	a0 93 1e 01 	sts	0x011E, r26
 556:	b0 93 1f 01 	sts	0x011F, r27

		;execute return to jump to task0, pushed while task init
		RET                                               ;return from subroutine (  4 clocks) 
 55a:	08 95       	ret

0000055c <Kernel_Task_Idle>:



;;=================================kernel idle task starting================================;; 
Kernel_Task_Idle:                                         ;total 0.5uS @8MHz      (  4 clocks) 
        LDI   R25                , 0x00                   ;set UBRRH              (  1 clock ) 
 55c:	90 e0       	ldi	r25, 0x00	; 0
        LDI   R24                , 0x00                   ;set UBRRL              (  1 clock ) 
 55e:	80 e0       	ldi	r24, 0x00	; 0
        CALL  Debug_Init                                  ;debug init
 560:	0e 94 c4 02 	call	0x588	; 0x588 <Debug_Init>

00000564 <_IDLE_LOOP>:
    _IDLE_LOOP:                                           ;forever loop
	    LDI   R24                , 0x23
 564:	83 e2       	ldi	r24, 0x23	; 35
		CALL  Debug_Tx_Byte_Conf
 566:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Debug_Tx_Byte_Conf>
		RJMP  _IDLE_LOOP                                  ;return from subroutine (  4 clocks) 
 56a:	fc cf       	rjmp	.-8      	; 0x564 <_IDLE_LOOP>

0000056c <Kernel_Task_Prio_Get>:


;;=============================kernel task priority get starting============================;; 
Kernel_Task_Prio_Get:                                     ;total 1.38uS @8MHz     ( 11 clocks) 
		;get priority of the task id, arg (task_id->R24), return R24
		MOV   R16                , R24                    ;copy task_id           (  1 clock ) 
 56c:	08 2f       	mov	r16, r24
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 56e:	e6 e3       	ldi	r30, 0x36	; 54
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 570:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
 572:	e0 0f       	add	r30, r16
		ADC   ZH                 , R1                     ;add high byte+carry    (  1 clock ) 
 574:	f1 1d       	adc	r31, r1
		LD    R24                , Z                      ;load priority          (  2 clocks) 
 576:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 578:	08 95       	ret

0000057a <Kernel_High_Prio_Task_ID_Get>:


;;===========================kernel high priority task id starting==========================;; 
Kernel_High_Prio_Task_ID_Get:
		;internal idle task id = 0, app task start from task id 1, return R24
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 57a:	80 91 09 01 	lds	r24, 0x0109
		DEC   R24                                         ;decrement by 1         (  1 clock ) 
 57e:	8a 95       	dec	r24
		RET                                               ;return from subroutine (  4 clocks) 
 580:	08 95       	ret

00000582 <Kernel_Abs_High_Prio_Task_ID_Get>:


;;=========================kernel abs high priority task id starting========================;; 
Kernel_Abs_High_Prio_Task_ID_Get:
		;get highest priority task id, return R24
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 582:	80 91 09 01 	lds	r24, 0x0109
		RET                                               ;return from subroutine (  4 clocks) 
 586:	08 95       	ret

00000588 <Debug_Init>:


;;===================================debug init starting====================================;;
Debug_Init:                                               ;total 2.38uS @8MHz     ( 19 clocks) 
        ;init registers for UART0 (Arg R25:R24->UBRRH:UBRRL)
		LDI   R16                , (1<<1)                 ;mask U2x               (  1 clock )
 588:	02 e0       	ldi	r16, 0x02	; 2
		STS   SRUCSR0A           , R16                    ;load val to UCSR0A     (  2 clocks)
 58a:	00 93 c0 00 	sts	0x00C0, r16
		MOV   R16                , R25                    ;copy R25->baud rate H  (  1 clock )
 58e:	09 2f       	mov	r16, r25
		STS   SRUBRR0H           , R16                    ;load val to UBRR0H     (  2 clocks)
 590:	00 93 c5 00 	sts	0x00C5, r16
		MOV   R16                , R24                    ;copy R24->baud rate L  (  1 clock )
 594:	08 2f       	mov	r16, r24
		STS   SRUBRR0L           , R16                    ;load val to UBRR0L     (  2 clocks)
 596:	00 93 c4 00 	sts	0x00C4, r16
		LDI   R16                , (1<<1)|(1<<2)          ;config 8 data bit      (  1 clock )
 59a:	06 e0       	ldi	r16, 0x06	; 6
		STS   SRUCSR0C           , R16                    ;load val to UCSR0C     (  2 clocks)
 59c:	00 93 c2 00 	sts	0x00C2, r16
		LDI   R16                , (1<<3)                 ;enable tx              (  1 clock )
 5a0:	08 e0       	ldi	r16, 0x08	; 8
		STS   SRUCSR0B           , R16                    ;load val to UCSR0B     (  2 clocks)
 5a2:	00 93 c1 00 	sts	0x00C1, r16
        RET                                               ;return from subroutine (  4 clocks) 
 5a6:	08 95       	ret

000005a8 <Debug_Tx_Byte>:


;;====================================debug tx starting=====================================;;
Debug_Tx_Byte:                                            ;total 2.00uS+LT @8MHz  ( 16 clocks)
		;write single byte to data register (Arg R24)
		PUSH  R16                                         ;save reg               (  2 clocks)
 5a8:	0f 93       	push	r16
		STS   SRUDR0             , R24                    ;load val to UDR0       (  2 clocks)
 5aa:	80 93 c6 00 	sts	0x00C6, r24

000005ae <__UDRE0_CLEARED>:

    __UDRE0_CLEARED:                                      ;undefined loop wrt ck
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16     (  2 clocks)
 5ae:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x05                   ;skip if UDRE0 is set   (  2 clocks)
 5b2:	05 ff       	sbrs	r16, 5
		RJMP  __UDRE0_CLEARED                             ;wait until UDRE0 is set(  2 clocks)
 5b4:	fc cf       	rjmp	.-8      	; 0x5ae <__UDRE0_CLEARED>
		POP   R16                                         ;restore reg            (  2 clocks)
 5b6:	0f 91       	pop	r16
        RET                                               ;return from subroutine (  4 clocks) 
 5b8:	08 95       	ret

000005ba <Debug_Tx_Byte_Conf>:


;;================================debug tx confirm starting=================================;;
Debug_Tx_Byte_Conf:                                       ;total 2.63uS+LT @8MHz  ( 21 clocks)
        ;write 1 byte, (Arg R24), Arg retained
		STS   SRUDR0             , R24                    ;load val to UDR0       (  2 clocks)
 5ba:	80 93 c6 00 	sts	0x00C6, r24

000005be <__TXC0_CLEARED>:
		
    __TXC0_CLEARED:                                       ;undefined loop wrt ck
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16     (  2 clocks)
 5be:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x06                   ;skip if TXC0 is set    (  2 clocks)
 5c2:	06 ff       	sbrs	r16, 6
		RJMP  __TXC0_CLEARED                              ;wait until TXC0 is set (  2 clocks)
 5c4:	fc cf       	rjmp	.-8      	; 0x5be <__TXC0_CLEARED>
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16     (  2 clocks)
 5c6:	00 91 c0 00 	lds	r16, 0x00C0
		ORI   R16                , (1<<6)                 ;mask bit 6             (  1 clock )
 5ca:	00 64       	ori	r16, 0x40	; 64
		STS   SRUCSR0A           , R16                    ;write reg with bit msk (  2 clocks)
 5cc:	00 93 c0 00 	sts	0x00C0, r16
        RET                                               ;return from subroutine (  4 clocks) 
 5d0:	08 95       	ret

000005d2 <Debug_Tx_Word_Conf>:


;;==============================debug tx word confirm starting==============================;;
Debug_Tx_Word_Conf:                                       ;total 6.38uS+LT @8MHz  ( 51 clocks)
        ;write 2 bytes, (Arg R24, R25), Args retained
		CALL  Debug_Tx_Byte_Conf                          ;send via uart          ( 21 clocks)
 5d2:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Debug_Tx_Byte_Conf>
		PUSH  R24                                         ;save reg               (  2 clocks)
 5d6:	8f 93       	push	r24
		MOV   R24                , R25                    ;copy R25 to R24        (  1 clock )
 5d8:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart          ( 21 clocks)
 5da:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Debug_Tx_Byte_Conf>
		POP   R24                                         ;restore reg            (  2 clocks)
 5de:	8f 91       	pop	r24
        RET                                               ;return from subroutine (  4 clocks) 
 5e0:	08 95       	ret

000005e2 <Debug_Tx_DWord_Conf>:


;;==============================debug tx dword confirm starting=============================;; 
Debug_Tx_DWord_Conf:                                      ;total 12.38uS+LT @8MHz ( 99 clocks) 
        ;write 4 bytes, (Args R25:R22), Args retained
		STS   SRGPIOR1           , R24                    ;store R24 val          (  2 clocks) 
 5e2:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R22                    ;copy R22 to R24        (  1 clock ) 
 5e6:	86 2f       	mov	r24, r22
		CALL  Debug_Tx_Byte_Conf                          ;send via uart          ( 21 clocks) 
 5e8:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Debug_Tx_Byte_Conf>
		MOV   R24                , R23                    ;copy R23 to R24        (  1 clock ) 
 5ec:	87 2f       	mov	r24, r23
		CALL  Debug_Tx_Byte_Conf                          ;send via uart          ( 21 clocks) 
 5ee:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24            (  2 clocks) 
 5f2:	80 91 4a 00 	lds	r24, 0x004A
		CALL  Debug_Tx_Byte_Conf                          ;send via uart          ( 21 clocks) 
 5f6:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Debug_Tx_Byte_Conf>
		STS   SRGPIOR1           , R24                    ;store R24 val          (  2 clocks) 
 5fa:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R25                    ;copy R22 to R24        (  1 clock ) 
 5fe:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart          ( 21 clocks) 
 600:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24 val        (  2 clocks) 
 604:	80 91 4a 00 	lds	r24, 0x004A
        RET                                               ;return from subroutine (  4 clocks) 
 608:	08 95       	ret

0000060a <Debug_Tx_From_RAM>:


;;=============================debug tx confirm from ram starting===========================;; 
Debug_Tx_From_RAM:                                        ;total 4.38uS+LT @8MHz  ( 35 clocks) 
        ;print data from RAM address (Args R25:R24)
		MOV   R16                , R30                    ;copy R30 to R16        (  1 clock ) 
 60a:	0e 2f       	mov	r16, r30
		MOV   R17                , R31                    ;copy R31 to R17        (  1 clock ) 
 60c:	1f 2f       	mov	r17, r31
		MOV   R18                , R24                    ;copy R24 to R18        (  1 clock ) 
 60e:	28 2f       	mov	r18, r24
		MOV   R30                , R24                    ;copy R22 to R24        (  1 clock ) 
 610:	e8 2f       	mov	r30, r24
		MOV   R31                , R25                    ;copy R22 to R24        (  1 clock ) 
 612:	f9 2f       	mov	r31, r25
		LD    R24                , Z                      ;load val to R24        (  2 clocks) 
 614:	80 81       	ld	r24, Z
		CALL  Debug_Tx_Byte_Conf                          ;send via uart          ( 21 clocks) 
 616:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Debug_Tx_Byte_Conf>
		MOV   R30                , R16                    ;copy R16 to R30        (  1 clock ) 
 61a:	e0 2f       	mov	r30, r16
		MOV   R31                , R17                    ;copy R17 to R31        (  1 clock ) 
 61c:	f1 2f       	mov	r31, r17
		MOV   R24                , R18                    ;copy R18 to R24        (  1 clock ) 
 61e:	82 2f       	mov	r24, r18
        RET                                               ;return from subroutine (  4 clocks) 
 620:	08 95       	ret

00000622 <Debug_Tx_RAM_Area>:

;;=============================debug tx confirm ram area starting===========================;; 
Debug_Tx_RAM_Area:                                        ;5.5uS+LT x R22 @8MHz  ( 44 clocks) 
        ;print data from RAM address (arguments R24:R25, R22)
	__DUMP_BYTES:
	    CALL  Debug_Tx_From_RAM                           ;send via uart from ram ( 35 clocks) 
 622:	0e 94 05 03 	call	0x60a	; 0x60a <Debug_Tx_From_RAM>
		SUBI  R24                , 0x01                   ;decrement from LSByte  (  1 clock )
 626:	81 50       	subi	r24, 0x01	; 1
        SBCI  R25                , 0x00                   ;decrement if carry     (  1 clock )
 628:	90 40       	sbci	r25, 0x00	; 0
		SUBI  R22                , 0x01                   ;decrement              (  1 clock )
 62a:	61 50       	subi	r22, 0x01	; 1
		BRNE  __DUMP_BYTES                                ;iterate loops          (  2 clocks)
 62c:	d1 f7       	brne	.-12     	; 0x622 <Debug_Tx_RAM_Area>
        RET                                               ;return from subroutine (  4 clocks) 
 62e:	08 95       	ret

00000630 <_exit>:
 630:	f8 94       	cli

00000632 <__stop_program>:
 632:	ff cf       	rjmp	.-2      	; 0x632 <__stop_program>
