
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000039a  0000042e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000039a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080010a  0080010a  00000438  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000015a  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005ae  00000000  00000000  000005f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002c1  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000061a  00000000  00000000  00000e61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  0000147c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000024e  00000000  00000000  000015bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000119  00000000  00000000  0000180a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e9       	ldi	r30, 0x9A	; 154
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  9e:	0c 94 cb 01 	jmp	0x396	; 0x396 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <task1>:

volatile TaskFunc current_task;
volatile uint8_t task_flag = 0;  // Set by timer ISR to switch tasks

void task1(void) {
    PORTD ^= (1 << PD5);  // Toggle PD5 LED
  a6:	8b b1       	in	r24, 0x0b	; 11
  a8:	90 e2       	ldi	r25, 0x20	; 32
  aa:	89 27       	eor	r24, r25
  ac:	8b b9       	out	0x0b, r24	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ae:	80 e2       	ldi	r24, 0x20	; 32
  b0:	9e e4       	ldi	r25, 0x4E	; 78
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <task1+0xc>
    _delay_ms(10);        // Short delay
}
  b6:	08 95       	ret

000000b8 <task2>:

void task2(void) {
    PORTD ^= (1 << PD6);  // Toggle PD6 LED
  b8:	8b b1       	in	r24, 0x0b	; 11
  ba:	90 e4       	ldi	r25, 0x40	; 64
  bc:	89 27       	eor	r24, r25
  be:	8b b9       	out	0x0b, r24	; 11
  c0:	80 e2       	ldi	r24, 0x20	; 32
  c2:	9e e4       	ldi	r25, 0x4E	; 78
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <task2+0xc>
    _delay_ms(10);
}
  c8:	08 95       	ret

000000ca <timer0_init>:

void timer0_init(void) {
    // Normal mode, prescaler 64
    TCCR0A = 0x00;
  ca:	14 bc       	out	0x24, r1	; 36
    TCCR0B = (1 << CS01) | (1 << CS00);
  cc:	83 e0       	ldi	r24, 0x03	; 3
  ce:	85 bd       	out	0x25, r24	; 37

    TIMSK0 = (1 << TOIE0);  // Enable Timer0 overflow interrupt
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	80 93 6e 00 	sts	0x006E, r24
    TCNT0 = 0;              // Reset timer counter
  d6:	16 bc       	out	0x26, r1	; 38
}
  d8:	08 95       	ret

000000da <__vector_16>:

ISR(TIMER0_OVF_vect) {
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	8f 93       	push	r24
    task_flag = 1;  // Signal main loop to switch tasks
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	80 93 0a 01 	sts	0x010A, r24
}
  ec:	8f 91       	pop	r24
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <main>:

int main(void) {
  f8:	0f 93       	push	r16
  fa:	1f 93       	push	r17
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
    DDRD |= (1 << PD5) | (1 << PD6);   // Set PD5 and PD6 as outputs
 100:	8a b1       	in	r24, 0x0a	; 10
 102:	80 66       	ori	r24, 0x60	; 96
 104:	8a b9       	out	0x0a, r24	; 10
    PORTD &= ~((1 << PD5) | (1 << PD6)); // Start with pins low
 106:	8b b1       	in	r24, 0x0b	; 11
 108:	8f 79       	andi	r24, 0x9F	; 159
 10a:	8b b9       	out	0x0b, r24	; 11

    current_task = task1;    // Start with task1
 10c:	83 e5       	ldi	r24, 0x53	; 83
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	90 93 12 01 	sts	0x0112, r25
 114:	80 93 11 01 	sts	0x0111, r24
    _delay_ms(10);
}

void timer0_init(void) {
    // Normal mode, prescaler 64
    TCCR0A = 0x00;
 118:	14 bc       	out	0x24, r1	; 36
    TCCR0B = (1 << CS01) | (1 << CS00);
 11a:	83 e0       	ldi	r24, 0x03	; 3
 11c:	85 bd       	out	0x25, r24	; 37

    TIMSK0 = (1 << TOIE0);  // Enable Timer0 overflow interrupt
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	80 93 6e 00 	sts	0x006E, r24
    TCNT0 = 0;              // Reset timer counter
 124:	16 bc       	out	0x26, r1	; 38
    PORTD &= ~((1 << PD5) | (1 << PD6)); // Start with pins low

    current_task = task1;    // Start with task1

    timer0_init();
    sei();                  // Enable global interrupts
 126:	78 94       	sei

    while (1) {
        if (task_flag) {
            task_flag = 0;
            // Switch tasks
            if (current_task == task1)
 128:	03 e5       	ldi	r16, 0x53	; 83
 12a:	10 e0       	ldi	r17, 0x00	; 0
                current_task = task2;
 12c:	cc e5       	ldi	r28, 0x5C	; 92
 12e:	d0 e0       	ldi	r29, 0x00	; 0

    timer0_init();
    sei();                  // Enable global interrupts

    while (1) {
        if (task_flag) {
 130:	80 91 0a 01 	lds	r24, 0x010A
 134:	88 23       	and	r24, r24
 136:	91 f0       	breq	.+36     	; 0x15c <main+0x64>
            task_flag = 0;
 138:	10 92 0a 01 	sts	0x010A, r1
            // Switch tasks
            if (current_task == task1)
 13c:	80 91 11 01 	lds	r24, 0x0111
 140:	90 91 12 01 	lds	r25, 0x0112
 144:	83 55       	subi	r24, 0x53	; 83
 146:	90 40       	sbci	r25, 0x00	; 0
 148:	29 f4       	brne	.+10     	; 0x154 <main+0x5c>
                current_task = task2;
 14a:	d0 93 12 01 	sts	0x0112, r29
 14e:	c0 93 11 01 	sts	0x0111, r28
 152:	04 c0       	rjmp	.+8      	; 0x15c <main+0x64>
            else
                current_task = task1;
 154:	10 93 12 01 	sts	0x0112, r17
 158:	00 93 11 01 	sts	0x0111, r16
        }
        current_task();  // Run current task
 15c:	e0 91 11 01 	lds	r30, 0x0111
 160:	f0 91 12 01 	lds	r31, 0x0112
 164:	09 95       	icall
 166:	e4 cf       	rjmp	.-56     	; 0x130 <main+0x38>

00000168 <SysTick_Enable>:
  .OVFUpdateValue = 0,
  .UpdateRate = 0
};


void SysTick_Enable(uint16_t UpdateRateHz){
 168:	8f 92       	push	r8
 16a:	9f 92       	push	r9
 16c:	bf 92       	push	r11
 16e:	cf 92       	push	r12
 170:	df 92       	push	r13
 172:	ef 92       	push	r14
 174:	ff 92       	push	r15
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
 17a:	df 93       	push	r29
 17c:	cf 93       	push	r28
 17e:	cd b7       	in	r28, 0x3d	; 61
 180:	de b7       	in	r29, 0x3e	; 62
 182:	2a 97       	sbiw	r28, 0x0a	; 10
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	f8 94       	cli
 188:	de bf       	out	0x3e, r29	; 62
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	cd bf       	out	0x3d, r28	; 61
 18e:	4c 01       	movw	r8, r24
  uint8_t  clock_div_index = 0;
  uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
 190:	de 01       	movw	r26, r28
 192:	11 96       	adiw	r26, 0x01	; 1
 194:	e0 e0       	ldi	r30, 0x00	; 0
 196:	f1 e0       	ldi	r31, 0x01	; 1
 198:	8a e0       	ldi	r24, 0x0A	; 10
 19a:	01 90       	ld	r0, Z+
 19c:	0d 92       	st	X+, r0
 19e:	81 50       	subi	r24, 0x01	; 1
 1a0:	e1 f7       	brne	.-8      	; 0x19a <SysTick_Enable+0x32>
  int32_t  temp, curr_freq;

  temp = F_CPU;
  temp /= UpdateRateHz;
 1a2:	94 01       	movw	r18, r8
 1a4:	40 e0       	ldi	r20, 0x00	; 0
 1a6:	50 e0       	ldi	r21, 0x00	; 0
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	72 e1       	ldi	r23, 0x12	; 18
 1ac:	8a e7       	ldi	r24, 0x7A	; 122
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 8e 01 	call	0x31c	; 0x31c <__divmodsi4>
 1b4:	b2 2e       	mov	r11, r18
 1b6:	c3 2e       	mov	r12, r19
 1b8:	d4 2e       	mov	r13, r20
 1ba:	05 2f       	mov	r16, r21
 1bc:	7e 01       	movw	r14, r28
 1be:	08 94       	sec
 1c0:	e1 1c       	adc	r14, r1
 1c2:	f1 1c       	adc	r15, r1
 1c4:	c9 01       	movw	r24, r18
 1c6:	da 01       	movw	r26, r20
 1c8:	9c 01       	movw	r18, r24
 1ca:	ad 01       	movw	r20, r26
 1cc:	10 e0       	ldi	r17, 0x00	; 0
 1ce:	13 c0       	rjmp	.+38     	; 0x1f6 <SysTick_Enable+0x8e>
  clock_div_index = 0;
  curr_freq = temp;
	
  while( curr_freq > 0xFF ){
	curr_freq  = temp;
	curr_freq /= clock_div_factor[clock_div_index];
 1d0:	f7 01       	movw	r30, r14
 1d2:	21 91       	ld	r18, Z+
 1d4:	31 91       	ld	r19, Z+
 1d6:	7f 01       	movw	r14, r30
 1d8:	40 e0       	ldi	r20, 0x00	; 0
 1da:	50 e0       	ldi	r21, 0x00	; 0
 1dc:	6b 2d       	mov	r22, r11
 1de:	7c 2d       	mov	r23, r12
 1e0:	8d 2d       	mov	r24, r13
 1e2:	90 2f       	mov	r25, r16
 1e4:	0e 94 8e 01 	call	0x31c	; 0x31c <__divmodsi4>
 1e8:	c9 01       	movw	r24, r18
 1ea:	da 01       	movw	r26, r20
 1ec:	9c 01       	movw	r18, r24
 1ee:	ad 01       	movw	r20, r26
	clock_div_index++;
 1f0:	1f 5f       	subi	r17, 0xFF	; 255
	if(clock_div_index == 5){
 1f2:	15 30       	cpi	r17, 0x05	; 5
 1f4:	31 f0       	breq	.+12     	; 0x202 <SysTick_Enable+0x9a>
  temp /= UpdateRateHz;
	
  clock_div_index = 0;
  curr_freq = temp;
	
  while( curr_freq > 0xFF ){
 1f6:	2f 3f       	cpi	r18, 0xFF	; 255
 1f8:	31 05       	cpc	r19, r1
 1fa:	41 05       	cpc	r20, r1
 1fc:	51 05       	cpc	r21, r1
 1fe:	09 f0       	breq	.+2      	; 0x202 <SysTick_Enable+0x9a>
 200:	3c f7       	brge	.-50     	; 0x1d0 <SysTick_Enable+0x68>
	if(clock_div_index == 5){
	  break;
	}
  }
	
  clock_div_index -= 1;
 202:	81 2f       	mov	r24, r17
 204:	81 50       	subi	r24, 0x01	; 1
	
  TCCR0A = 0x00;
 206:	14 bc       	out	0x24, r1	; 36
  TCCR0B = 0x00;
 208:	15 bc       	out	0x25, r1	; 37
  TIMSK0 = 0x00;
 20a:	10 92 6e 00 	sts	0x006E, r1
  TIFR0  = 0x00;
 20e:	15 ba       	out	0x15, r1	; 21
  OCR0A  = 0x00;
 210:	17 bc       	out	0x27, r1	; 39
  OCR0B  = 0x00;
 212:	18 bc       	out	0x28, r1	; 40
  TCNT0  = 0x00;
 214:	16 bc       	out	0x26, r1	; 38
  OCR0A  = 0x00;
 216:	17 bc       	out	0x27, r1	; 39
  
  if(clock_div_index == 0){
 218:	88 23       	and	r24, r24
 21a:	11 f4       	brne	.+4      	; 0x220 <SysTick_Enable+0xb8>
	TCCR0B = (1<<CS00);
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	0f c0       	rjmp	.+30     	; 0x23e <SysTick_Enable+0xd6>
  }
  else if(clock_div_index == 1){
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	11 f4       	brne	.+4      	; 0x228 <SysTick_Enable+0xc0>
	TCCR0B = (1<<CS01);
 224:	82 e0       	ldi	r24, 0x02	; 2
 226:	0b c0       	rjmp	.+22     	; 0x23e <SysTick_Enable+0xd6>
  }
  else if(clock_div_index == 2){
 228:	82 30       	cpi	r24, 0x02	; 2
 22a:	11 f4       	brne	.+4      	; 0x230 <SysTick_Enable+0xc8>
	TCCR0B = (1<<CS00)|(1<<CS01);
 22c:	83 e0       	ldi	r24, 0x03	; 3
 22e:	07 c0       	rjmp	.+14     	; 0x23e <SysTick_Enable+0xd6>
  }
  else if(clock_div_index == 3){
 230:	83 30       	cpi	r24, 0x03	; 3
 232:	11 f4       	brne	.+4      	; 0x238 <SysTick_Enable+0xd0>
	TCCR0B = (1<<CS02);
 234:	84 e0       	ldi	r24, 0x04	; 4
 236:	03 c0       	rjmp	.+6      	; 0x23e <SysTick_Enable+0xd6>
  }
  else if(clock_div_index == 4){
 238:	84 30       	cpi	r24, 0x04	; 4
 23a:	11 f4       	brne	.+4      	; 0x240 <SysTick_Enable+0xd8>
	TCCR0B = (1<<CS00)|(1<<CS02);
 23c:	85 e0       	ldi	r24, 0x05	; 5
 23e:	85 bd       	out	0x25, r24	; 37
  }
  
  SysTick.OVFUpdateValue = (0xFF-curr_freq);
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	82 1b       	sub	r24, r18
 246:	93 0b       	sbc	r25, r19
 248:	90 93 0e 01 	sts	0x010E, r25
 24c:	80 93 0d 01 	sts	0x010D, r24
  TCNT0  = SysTick.OVFUpdateValue;
 250:	80 91 0d 01 	lds	r24, 0x010D
 254:	90 91 0e 01 	lds	r25, 0x010E
 258:	86 bd       	out	0x26, r24	; 38
  TIMSK0 = (1<<TOIE0);
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	80 93 6e 00 	sts	0x006E, r24
  sei();
 260:	78 94       	sei
  SysTick.UpdateRate = UpdateRateHz;
 262:	90 92 10 01 	sts	0x0110, r9
 266:	80 92 0f 01 	sts	0x010F, r8
}
 26a:	2a 96       	adiw	r28, 0x0a	; 10
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	f8 94       	cli
 270:	de bf       	out	0x3e, r29	; 62
 272:	0f be       	out	0x3f, r0	; 63
 274:	cd bf       	out	0x3d, r28	; 61
 276:	cf 91       	pop	r28
 278:	df 91       	pop	r29
 27a:	1f 91       	pop	r17
 27c:	0f 91       	pop	r16
 27e:	ff 90       	pop	r15
 280:	ef 90       	pop	r14
 282:	df 90       	pop	r13
 284:	cf 90       	pop	r12
 286:	bf 90       	pop	r11
 288:	9f 90       	pop	r9
 28a:	8f 90       	pop	r8
 28c:	08 95       	ret

0000028e <GPIO_Init>:
#include <util/delay.h>
#include "gpio.h"


void GPIO_Init(void){
  GPIO0_DDR  |=  (1<<GPIO0_bp);
 28e:	55 9a       	sbi	0x0a, 5	; 10
  GPIO0_PORT &=~ (1<<GPIO0_bp);
 290:	5d 98       	cbi	0x0b, 5	; 11
  
  GPIO1_DDR  |=  (1<<GPIO1_bp);
 292:	56 9a       	sbi	0x0a, 6	; 10
  GPIO1_PORT &=~ (1<<GPIO1_bp);
 294:	5e 98       	cbi	0x0b, 6	; 11
  
  GPIO2_DDR  |=  (1<<GPIO2_bp);
 296:	38 9a       	sbi	0x07, 0	; 7
  GPIO2_PORT &=~ (1<<GPIO2_bp);
 298:	40 98       	cbi	0x08, 0	; 8
  
  GPIO3_DDR  |=  (1<<GPIO3_bp);
 29a:	39 9a       	sbi	0x07, 1	; 7
  GPIO3_PORT &=~ (1<<GPIO3_bp);
 29c:	41 98       	cbi	0x08, 1	; 8
  
  GPIO4_DDR  |=  (1<<GPIO4_bp);
 29e:	3a 9a       	sbi	0x07, 2	; 7
  GPIO4_PORT &=~ (1<<GPIO4_bp);
 2a0:	42 98       	cbi	0x08, 2	; 8
}
 2a2:	08 95       	ret

000002a4 <GPIO0_Set>:




void GPIO0_Set(uint8_t val){
  if(val == 0){
 2a4:	88 23       	and	r24, r24
 2a6:	11 f4       	brne	.+4      	; 0x2ac <GPIO0_Set+0x8>
    GPIO0_PORT &=~ (1<<GPIO0_bp);
 2a8:	5d 98       	cbi	0x0b, 5	; 11
 2aa:	08 95       	ret
  }
  else{
    GPIO0_PORT |=  (1<<GPIO0_bp);
 2ac:	5d 9a       	sbi	0x0b, 5	; 11
 2ae:	08 95       	ret

000002b0 <GPIO0_Toggle>:
  }
}

void GPIO0_Toggle(void){
  if(GPIO0_PORT & (1<<GPIO0_bp)){
 2b0:	5d 9b       	sbis	0x0b, 5	; 11
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <GPIO0_Toggle+0x8>
    GPIO0_PORT &=~ (1<<GPIO0_bp);
 2b4:	5d 98       	cbi	0x0b, 5	; 11
 2b6:	08 95       	ret
  }
  else{
    GPIO0_PORT |=  (1<<GPIO0_bp);
 2b8:	5d 9a       	sbi	0x0b, 5	; 11
 2ba:	08 95       	ret

000002bc <GPIO1_Set>:




void GPIO1_Set(uint8_t val){
  if(val == 0){
 2bc:	88 23       	and	r24, r24
 2be:	11 f4       	brne	.+4      	; 0x2c4 <GPIO1_Set+0x8>
    GPIO1_PORT &=~ (1<<GPIO1_bp);
 2c0:	5e 98       	cbi	0x0b, 6	; 11
 2c2:	08 95       	ret
  }
  else{
    GPIO1_PORT |=  (1<<GPIO1_bp);
 2c4:	5e 9a       	sbi	0x0b, 6	; 11
 2c6:	08 95       	ret

000002c8 <GPIO1_Toggle>:
  }
}

void GPIO1_Toggle(void){
  if(GPIO1_PORT & (1<<GPIO1_bp)){
 2c8:	5e 9b       	sbis	0x0b, 6	; 11
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <GPIO1_Toggle+0x8>
    GPIO1_PORT &=~ (1<<GPIO1_bp);
 2cc:	5e 98       	cbi	0x0b, 6	; 11
 2ce:	08 95       	ret
  }
  else{
    GPIO1_PORT |=  (1<<GPIO1_bp);
 2d0:	5e 9a       	sbi	0x0b, 6	; 11
 2d2:	08 95       	ret

000002d4 <GPIO2_Set>:




void GPIO2_Set(uint8_t val){
  if(val == 0){
 2d4:	88 23       	and	r24, r24
 2d6:	11 f4       	brne	.+4      	; 0x2dc <GPIO2_Set+0x8>
    GPIO2_PORT &=~ (1<<GPIO2_bp);
 2d8:	40 98       	cbi	0x08, 0	; 8
 2da:	08 95       	ret
  }
  else{
    GPIO2_PORT |=  (1<<GPIO2_bp);
 2dc:	40 9a       	sbi	0x08, 0	; 8
 2de:	08 95       	ret

000002e0 <GPIO2_Toggle>:
  }
}

void GPIO2_Toggle(void){
  if(GPIO2_PORT & (1<<GPIO2_bp)){
 2e0:	40 9b       	sbis	0x08, 0	; 8
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <GPIO2_Toggle+0x8>
    GPIO2_PORT &=~ (1<<GPIO2_bp);
 2e4:	40 98       	cbi	0x08, 0	; 8
 2e6:	08 95       	ret
  }
  else{
    GPIO2_PORT |=  (1<<GPIO2_bp);
 2e8:	40 9a       	sbi	0x08, 0	; 8
 2ea:	08 95       	ret

000002ec <GPIO3_Set>:




void GPIO3_Set(uint8_t val){
  if(val == 0){
 2ec:	88 23       	and	r24, r24
 2ee:	11 f4       	brne	.+4      	; 0x2f4 <GPIO3_Set+0x8>
    GPIO3_PORT &=~ (1<<GPIO3_bp);
 2f0:	41 98       	cbi	0x08, 1	; 8
 2f2:	08 95       	ret
  }
  else{
    GPIO3_PORT |=  (1<<GPIO3_bp);
 2f4:	41 9a       	sbi	0x08, 1	; 8
 2f6:	08 95       	ret

000002f8 <GPIO3_Toggle>:
  }
}

void GPIO3_Toggle(void){
  if(GPIO3_PORT & (1<<GPIO3_bp)){
 2f8:	41 9b       	sbis	0x08, 1	; 8
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <GPIO3_Toggle+0x8>
    GPIO3_PORT &=~ (1<<GPIO3_bp);
 2fc:	41 98       	cbi	0x08, 1	; 8
 2fe:	08 95       	ret
  }
  else{
    GPIO3_PORT |=  (1<<GPIO3_bp);
 300:	41 9a       	sbi	0x08, 1	; 8
 302:	08 95       	ret

00000304 <GPIO4_Set>:




void GPIO4_Set(uint8_t val){
  if(val == 0){
 304:	88 23       	and	r24, r24
 306:	11 f4       	brne	.+4      	; 0x30c <GPIO4_Set+0x8>
    GPIO4_PORT &=~ (1<<GPIO4_bp);
 308:	42 98       	cbi	0x08, 2	; 8
 30a:	08 95       	ret
  }
  else{
    GPIO4_PORT |=  (1<<GPIO4_bp);
 30c:	42 9a       	sbi	0x08, 2	; 8
 30e:	08 95       	ret

00000310 <GPIO4_Toggle>:
  }
}

void GPIO4_Toggle(void){
  if(GPIO4_PORT & (1<<GPIO4_bp)){
 310:	42 9b       	sbis	0x08, 2	; 8
 312:	02 c0       	rjmp	.+4      	; 0x318 <GPIO4_Toggle+0x8>
    GPIO4_PORT &=~ (1<<GPIO4_bp);
 314:	42 98       	cbi	0x08, 2	; 8
 316:	08 95       	ret
  }
  else{
    GPIO4_PORT |=  (1<<GPIO4_bp);
 318:	42 9a       	sbi	0x08, 2	; 8
 31a:	08 95       	ret

0000031c <__divmodsi4>:
 31c:	97 fb       	bst	r25, 7
 31e:	09 2e       	mov	r0, r25
 320:	05 26       	eor	r0, r21
 322:	0e d0       	rcall	.+28     	; 0x340 <__divmodsi4_neg1>
 324:	57 fd       	sbrc	r21, 7
 326:	04 d0       	rcall	.+8      	; 0x330 <__divmodsi4_neg2>
 328:	14 d0       	rcall	.+40     	; 0x352 <__udivmodsi4>
 32a:	0a d0       	rcall	.+20     	; 0x340 <__divmodsi4_neg1>
 32c:	00 1c       	adc	r0, r0
 32e:	38 f4       	brcc	.+14     	; 0x33e <__divmodsi4_exit>

00000330 <__divmodsi4_neg2>:
 330:	50 95       	com	r21
 332:	40 95       	com	r20
 334:	30 95       	com	r19
 336:	21 95       	neg	r18
 338:	3f 4f       	sbci	r19, 0xFF	; 255
 33a:	4f 4f       	sbci	r20, 0xFF	; 255
 33c:	5f 4f       	sbci	r21, 0xFF	; 255

0000033e <__divmodsi4_exit>:
 33e:	08 95       	ret

00000340 <__divmodsi4_neg1>:
 340:	f6 f7       	brtc	.-4      	; 0x33e <__divmodsi4_exit>
 342:	90 95       	com	r25
 344:	80 95       	com	r24
 346:	70 95       	com	r23
 348:	61 95       	neg	r22
 34a:	7f 4f       	sbci	r23, 0xFF	; 255
 34c:	8f 4f       	sbci	r24, 0xFF	; 255
 34e:	9f 4f       	sbci	r25, 0xFF	; 255
 350:	08 95       	ret

00000352 <__udivmodsi4>:
 352:	a1 e2       	ldi	r26, 0x21	; 33
 354:	1a 2e       	mov	r1, r26
 356:	aa 1b       	sub	r26, r26
 358:	bb 1b       	sub	r27, r27
 35a:	fd 01       	movw	r30, r26
 35c:	0d c0       	rjmp	.+26     	; 0x378 <__udivmodsi4_ep>

0000035e <__udivmodsi4_loop>:
 35e:	aa 1f       	adc	r26, r26
 360:	bb 1f       	adc	r27, r27
 362:	ee 1f       	adc	r30, r30
 364:	ff 1f       	adc	r31, r31
 366:	a2 17       	cp	r26, r18
 368:	b3 07       	cpc	r27, r19
 36a:	e4 07       	cpc	r30, r20
 36c:	f5 07       	cpc	r31, r21
 36e:	20 f0       	brcs	.+8      	; 0x378 <__udivmodsi4_ep>
 370:	a2 1b       	sub	r26, r18
 372:	b3 0b       	sbc	r27, r19
 374:	e4 0b       	sbc	r30, r20
 376:	f5 0b       	sbc	r31, r21

00000378 <__udivmodsi4_ep>:
 378:	66 1f       	adc	r22, r22
 37a:	77 1f       	adc	r23, r23
 37c:	88 1f       	adc	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	1a 94       	dec	r1
 382:	69 f7       	brne	.-38     	; 0x35e <__udivmodsi4_loop>
 384:	60 95       	com	r22
 386:	70 95       	com	r23
 388:	80 95       	com	r24
 38a:	90 95       	com	r25
 38c:	9b 01       	movw	r18, r22
 38e:	ac 01       	movw	r20, r24
 390:	bd 01       	movw	r22, r26
 392:	cf 01       	movw	r24, r30
 394:	08 95       	ret

00000396 <_exit>:
 396:	f8 94       	cli

00000398 <__stop_program>:
 398:	ff cf       	rjmp	.-2      	; 0x398 <__stop_program>
