
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000043a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000192  00800100  00800100  000004ae  2**0
                  ALLOC
  2 .stab         00000ad4  00000000  00000000  000004b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000006e  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000001b  00000000  00000000  00001012  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000076  00000000  00000000  0000102d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000041  00000000  00000000  000010a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000060  00000000  00000000  000010e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000020  00000000  00000000  00001144  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000099  00000000  00000000  00001164  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_16>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	00 00       	nop
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 00       	nop
  76:	00 00       	nop
  78:	00 00       	nop
  7a:	00 00       	nop
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 00       	nop
  82:	00 00       	nop
  84:	00 00       	nop
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__vector_16>

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61
  96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  9a:	0c 94 1b 02 	jmp	0x436	; 0x436 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:
//uint64_t cur = 0, next = 0;

int main(void) {
    
	
	Debug_Init();
  a2:	0e 94 c7 01 	call	0x38e	; 0x38e <Debug_Init>
	Kernel_Task_Debug();
  a6:	0e 94 9f 01 	call	0x33e	; 0x33e <Kernel_Task_Debug>
  aa:	ff cf       	rjmp	.-2      	; 0xaa <main+0x8>

000000ac <__vector_16>:
.global  __vector_16
    __vector_16:
	    
		;;============================if kernel debug enabled===============================;;
	    #ifdef KER_DBG_ENABLE
        SBI   KER_DBG_PORT       , KER_DBG_PIN            ;set gpio,                (2 clocks)
  ac:	29 9a       	sbi	0x05, 1	; 5
		
		
		;;==============================context save========================================;;
		;; total 68 clocks for context saving
		#ifdef KER_CNTXT_SV_ISR
        KER_CNTXT_SV
  ae:	0f 92       	push	r0
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	0f 92       	push	r0
  b4:	1f 92       	push	r1
  b6:	11 24       	eor	r1, r1
  b8:	2f 92       	push	r2
  ba:	3f 92       	push	r3
  bc:	4f 92       	push	r4
  be:	5f 92       	push	r5
  c0:	6f 92       	push	r6
  c2:	7f 92       	push	r7
  c4:	8f 92       	push	r8
  c6:	9f 92       	push	r9
  c8:	af 92       	push	r10
  ca:	bf 92       	push	r11
  cc:	cf 92       	push	r12
  ce:	df 92       	push	r13
  d0:	ef 92       	push	r14
  d2:	ff 92       	push	r15
  d4:	0f 93       	push	r16
  d6:	1f 93       	push	r17
  d8:	2f 93       	push	r18
  da:	3f 93       	push	r19
  dc:	4f 93       	push	r20
  de:	5f 93       	push	r21
  e0:	6f 93       	push	r22
  e2:	7f 93       	push	r23
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
  e8:	af 93       	push	r26
  ea:	bf 93       	push	r27
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	ef 93       	push	r30
  f2:	ff 93       	push	r31
		#endif
		
		;;=============================reload counter value=================================;;
		;; total 4 clocks for reloading
		LDS   R16                , Kernel+0x08            ;fetch reload value,      (2 clocks) 
  f4:	00 91 08 01 	lds	r16, 0x0108
		STS   SRTCNT0            , R16                    ;Set value to TCNT0,      (2 clocks) 
  f8:	00 93 46 00 	sts	0x0046, r16
		
		
		;;=============================increment tick counter===============================;;
		;; total 27 clocks for reloading, 40 bit counter
		KER_TICK_INC
  fc:	01 e0       	ldi	r16, 0x01	; 1
  fe:	10 91 00 01 	lds	r17, 0x0100
 102:	10 0f       	add	r17, r16
 104:	10 93 00 01 	sts	0x0100, r17
 108:	00 e0       	ldi	r16, 0x00	; 0
 10a:	10 91 01 01 	lds	r17, 0x0101
 10e:	10 1f       	adc	r17, r16
 110:	10 93 01 01 	sts	0x0101, r17
 114:	10 91 02 01 	lds	r17, 0x0102
 118:	10 1f       	adc	r17, r16
 11a:	10 93 02 01 	sts	0x0102, r17
 11e:	10 91 03 01 	lds	r17, 0x0103
 122:	10 1f       	adc	r17, r16
 124:	10 93 03 01 	sts	0x0103, r17
 128:	10 91 04 01 	lds	r17, 0x0104
 12c:	10 1f       	adc	r17, r16
 12e:	10 93 04 01 	sts	0x0104, r17

00000132 <RS_CNTXT>:
		
	RS_CNTXT:
		;;===============================context restore====================================;;
		;; total 68 clocks for context restore
		#ifdef KER_CNTXT_RS_ISR
		KER_CNTXT_RS
 132:	ff 91       	pop	r31
 134:	ef 91       	pop	r30
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	bf 91       	pop	r27
 13c:	af 91       	pop	r26
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	7f 91       	pop	r23
 144:	6f 91       	pop	r22
 146:	5f 91       	pop	r21
 148:	4f 91       	pop	r20
 14a:	3f 91       	pop	r19
 14c:	2f 91       	pop	r18
 14e:	1f 91       	pop	r17
 150:	0f 91       	pop	r16
 152:	ff 90       	pop	r15
 154:	ef 90       	pop	r14
 156:	df 90       	pop	r13
 158:	cf 90       	pop	r12
 15a:	bf 90       	pop	r11
 15c:	af 90       	pop	r10
 15e:	9f 90       	pop	r9
 160:	8f 90       	pop	r8
 162:	7f 90       	pop	r7
 164:	6f 90       	pop	r6
 166:	5f 90       	pop	r5
 168:	4f 90       	pop	r4
 16a:	3f 90       	pop	r3
 16c:	2f 90       	pop	r2
 16e:	1f 90       	pop	r1
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
		#endif
		
		;;============================if kernel debug enabled===============================;;
		#ifdef KER_DBG_ENABLE
		CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear gpio,              (2 clocks)
 176:	29 98       	cbi	0x05, 1	; 5
		#endif
		
		RETI                                              ;return from interrupt,   (4 clocks) 
 178:	18 95       	reti

0000017a <Kernel_SysTick_Reg_Init>:

;;====================================SysTick Reg Init=======================================;;
;; total 32 clocks for SysTick Reg Init, omited debug gpio config
Kernel_SysTick_Reg_Init:
        ;clear all kernel variables
		LDI   R16                , 0x00                   ;set 0x00 to R16,         (1 clock )
 17a:	00 e0       	ldi	r16, 0x00	; 0
		STS   Kernel+0x00        , R16                    ;clear  kernel[0],        (2 clocks)
 17c:	00 93 00 01 	sts	0x0100, r16
		STS   Kernel+0x01        , R16                    ;clear  kernel[1],        (2 clocks)
 180:	00 93 01 01 	sts	0x0101, r16
		STS   Kernel+0x02        , R16                    ;clear  kernel[2],        (2 clocks)
 184:	00 93 02 01 	sts	0x0102, r16
		STS   Kernel+0x03        , R16                    ;clear  kernel[3],        (2 clocks)
 188:	00 93 03 01 	sts	0x0103, r16
		STS   Kernel+0x04        , R16                    ;clear  kernel[4],        (2 clocks)
 18c:	00 93 04 01 	sts	0x0104, r16
		STS   Kernel+0x05        , R16                    ;clear  kernel[5],        (2 clocks)
 190:	00 93 05 01 	sts	0x0105, r16
		STS   Kernel+0x06        , R16                    ;clear  kernel[6],        (2 clocks)
 194:	00 93 06 01 	sts	0x0106, r16
		STS   Kernel+0x07        , R16                    ;clear  kernel[7],        (2 clocks)
 198:	00 93 07 01 	sts	0x0107, r16
		STS   Kernel+0x08        , R16                    ;clear  kernel[8],        (2 clocks)
 19c:	00 93 08 01 	sts	0x0108, r16
		
		#ifdef KER_DBG_ENABLE
		SBI   KER_DBG_DDR        , KER_DBG_PIN            ;set bit in DDR,          (2 clocks) 
 1a0:	21 9a       	sbi	0x04, 1	; 4
		CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear port bit,          (2 clocks) 
 1a2:	29 98       	cbi	0x05, 1	; 5
		#endif
		
		
        CLI                                               ;disable global interrupt,(1 clock ) 
 1a4:	f8 94       	cli
		LDI   R16                , 0x00                   ;store r16 with 0,        (1 clock ) 
 1a6:	00 e0       	ldi	r16, 0x00	; 0
		STS   SRTCCR0A           , R16                    ;clear TCCR0A,            (2 clocks) 
 1a8:	00 93 44 00 	sts	0x0044, r16
		STS   SRTCCR0B           , R16                    ;clear TCCR0B,            (2 clocks) 
 1ac:	00 93 45 00 	sts	0x0045, r16
		STS   SRTIMSK0           , R16                    ;clear TIMSK0,            (2 clocks) 
 1b0:	00 93 6e 00 	sts	0x006E, r16
		STS   SRTIFR0            , R16                    ;clear TIFR0,             (2 clocks) 
 1b4:	00 93 35 00 	sts	0x0035, r16
		STS   SROCR0A            , R16                    ;clear OCR0A,             (2 clocks) 
 1b8:	00 93 47 00 	sts	0x0047, r16
		STS   SROCR0B            , R16                    ;clear OCR0B,             (2 clocks) 
 1bc:	00 93 48 00 	sts	0x0048, r16
		STS   SRTCNT0            , R16                    ;clear TCNT0,             (2 clocks) 
 1c0:	00 93 46 00 	sts	0x0046, r16
		LDI   R16                , KER_PRS                ;prescaler 64,            (1 clock ) 
 1c4:	03 e0       	ldi	r16, 0x03	; 3
		STS   SRTCCR0B           , R16                    ;set to TCCR0B,           (2 clocks)
 1c6:	00 93 45 00 	sts	0x0045, r16
		LDI   R16                , KER_RLD                ;reload value (130),      (1 clock ) 
 1ca:	02 e8       	ldi	r16, 0x82	; 130
		STS   Kernel+0x08        , R16                    ;Kernel[5] reload value,  (2 clocks) 
 1cc:	00 93 08 01 	sts	0x0108, r16
		STS   SRTCNT0            , R16                    ;set to TCNT0,            (2 clocks) 
 1d0:	00 93 46 00 	sts	0x0046, r16
		LDI   R16                , 0x01                   ;store with TOIE0 enabled,(1 clock ) 
 1d4:	01 e0       	ldi	r16, 0x01	; 1
		STS   SRTIMSK0           , R16                    ;set to TIMSK0,           (2 clocks) 
 1d6:	00 93 6e 00 	sts	0x006E, r16
		;SEI                                               ;enable global interrupt, (1 clock ) 
		RET                                               ;return from subroutine,  (4 clocks) 
 1da:	08 95       	ret

000001dc <Kernel_SysTick_Val_Get>:

;;===================================SysTick Value Get======================================;;
;; total 20 clocks for SysTick Value Get
;; interrupts disabled for 16 clocks
Kernel_SysTick_Val_Get:
        IN    R16                , IOSREG                 ;Save SREG,               (1 clock ) 
 1dc:	0f b7       	in	r16, 0x3f	; 63
        CLI                                               ;Disable interrupts,      (1 clock ) 
 1de:	f8 94       	cli
		LDS   R18		         , Kernel+0x00            ;Byte0 -> R18 (LSB),      (2 clocks) 
 1e0:	20 91 00 01 	lds	r18, 0x0100
		LDS   R19		         , Kernel+0x01            ;Byte1 -> R19,            (2 clocks) 
 1e4:	30 91 01 01 	lds	r19, 0x0101
		LDS   R20		         , Kernel+0x02            ;Byte2 -> R20,            (2 clocks) 
 1e8:	40 91 02 01 	lds	r20, 0x0102
		LDS   R21		         , Kernel+0x03            ;Byte3 -> R21,            (2 clocks) 
 1ec:	50 91 03 01 	lds	r21, 0x0103
		LDS   R22		         , Kernel+0x04            ;Byte4 -> R22,            (2 clocks) 
 1f0:	60 91 04 01 	lds	r22, 0x0104
		LDI   R23		         , 0x00                   ;Byte5 -> R23,            (1 clocks) 
 1f4:	70 e0       	ldi	r23, 0x00	; 0
		LDI   R24		         , 0x00                   ;Byte6 -> R24,            (1 clocks) 
 1f6:	80 e0       	ldi	r24, 0x00	; 0
		LDI   R25		         , 0x00                   ;Byte7 -> R25 (MSB),      (1 clocks) 
 1f8:	90 e0       	ldi	r25, 0x00	; 0
		OUT   IOSREG             , R16          		  ;Restore SREG,            (1 clock )
 1fa:	0f bf       	out	0x3f, r16	; 63
		RET                                               ;return from subroutine,  (4 clocks) 
 1fc:	08 95       	ret

000001fe <Kernel_Interrupt_Sts_Get>:


;;=================================Interrupt Status Get=====================================;;
;; total 10 clocks for Interrupt Status Get
Kernel_Interrupt_Sts_Get:
        LDI   R24		         , 0x00                   ;clear R24,               (1 clock ) 
 1fe:	80 e0       	ldi	r24, 0x00	; 0
        IN    R16		         , IOSREG                 ;save SREG in R16,        (1 clock )
 200:	0f b7       	in	r16, 0x3f	; 63
		SBRC  R16		         , 0x07                   ;check I flag->bit7,      (3 clocks)
 202:	07 fd       	sbrc	r16, 7
		LDI   R24		         , 0x01                   ;set R24 to 1,            (1 clock ) 
 204:	81 e0       	ldi	r24, 0x01	; 1
		RET                                               ;return from subroutine,  (4 clocks) 
 206:	08 95       	ret

00000208 <Kernel_Test_Task0>:


;;===================================Kernel Test Task0======================================;;
Kernel_Test_Task0:
        ;initialize DDR and Port register, total 4 clocks
        SBI   KER_TSK0_DDR       , KER_TSK0_PIN           ;set bit in DDR,          (2 clocks) 
 208:	55 9a       	sbi	0x0a, 5	; 10
		CBI   KER_TSK0_PORT      , KER_TSK0_PIN           ;clear port bit,          (2 clocks)
 20a:	5d 98       	cbi	0x0b, 5	; 11

0000020c <LOOP0>:
		 
    LOOP0:
	    ;pin toggle, total 5 clocks
		IN    R16                , KER_TSK0_PORT          ;load PORT val,           (2 clocks)
 20c:	0b b1       	in	r16, 0x0b	; 11
		LDI   R17                , (1<<KER_TSK0_PIN)      ;bit mask for port pin    (1 clock )
 20e:	10 e2       	ldi	r17, 0x20	; 32
		EOR   R16                , R17                    ;XOR with current val     (1 clock )
 210:	01 27       	eor	r16, r17
		OUT   KER_TSK0_PORT      , R16                    ;set new PORT val,        (1 clock )
 212:	0b b9       	out	0x0b, r16	; 11
		
		;assign delay loop count val, for 30ms 
		LDI   R16                , 0xEB                   ;set loop cnt val,        (1 clock )
 214:	0b ee       	ldi	r16, 0xEB	; 235

00000216 <DLY00>:
		
    DLY00:
	    LDI   R17                , 0xFF                   ;set loop cnt val,        (1 clock )
 216:	1f ef       	ldi	r17, 0xFF	; 255

00000218 <DLY01>:
		
	DLY01:                                                ;inner loop,127.5uS@8Mhz  (4 clocks)
		NOP                                               ;no operation,            (1 clock )
 218:	00 00       	nop
		DEC   R17                                         ;decrement R17 val,       (1 clock )
 21a:	1a 95       	dec	r17
		BRNE  DLY01                                       ;if R17 not equal to 0,   (2 clock ) 
 21c:	e9 f7       	brne	.-6      	; 0x218 <DLY01>
		DEC   R16                                         ;decrement R16 val,       (1 clock )
 21e:	0a 95       	dec	r16
		BRNE  DLY00                                       ;if R16 not equal to 0,   (2 clock ) 
 220:	d1 f7       	brne	.-12     	; 0x216 <DLY00>
		RJMP  LOOP0                                       ;if R16 is 0->jump,       (2 clock ) 
 222:	f4 cf       	rjmp	.-24     	; 0x20c <LOOP0>
		RET                                               ;return from subroutine,  (4 clocks) 
 224:	08 95       	ret

00000226 <Kernel_Test_Task1>:


;;===================================Kernel Test Task1======================================;;
Kernel_Test_Task1:
        ;initialize DDR and Port register, total 4 clocks
        SBI   KER_TSK1_DDR       , KER_TSK1_PIN           ;set bit in DDR,          (2 clocks) 
 226:	56 9a       	sbi	0x0a, 6	; 10
		CBI   KER_TSK1_PORT      , KER_TSK1_PIN           ;clear port bit,          (2 clocks)
 228:	5e 98       	cbi	0x0b, 6	; 11

0000022a <LOOP1>:
		 
    LOOP1:
	    ;pin toggle, total 5 clocks
		IN    R16                , KER_TSK1_PORT          ;load PORT val,           (2 clocks)
 22a:	0b b1       	in	r16, 0x0b	; 11
		LDI   R17                , (1<<KER_TSK1_PIN)      ;bit mask for port pin    (1 clock )
 22c:	10 e4       	ldi	r17, 0x40	; 64
		EOR   R16                , R17                    ;XOR with current val     (1 clock )
 22e:	01 27       	eor	r16, r17
		OUT   KER_TSK1_PORT      , R16                    ;set new PORT val,        (1 clock )
 230:	0b b9       	out	0x0b, r16	; 11
		
		;assign delay loop count val, for 30ms 
		LDI   R16                , 0xEB                   ;set loop cnt val,        (1 clock )
 232:	0b ee       	ldi	r16, 0xEB	; 235

00000234 <DLY10>:
		
    DLY10:
	    LDI   R17                , 0xFF                   ;set loop cnt val,        (1 clock )
 234:	1f ef       	ldi	r17, 0xFF	; 255

00000236 <DLY11>:
		
	DLY11:                                                ;inner loop,127.5uS@8Mhz  (4 clocks)
		NOP                                               ;no operation,            (1 clock )
 236:	00 00       	nop
		DEC   R17                                         ;decrement R17 val,       (1 clock )
 238:	1a 95       	dec	r17
		BRNE  DLY11                                       ;if R17 not equal to 0,   (2 clock ) 
 23a:	e9 f7       	brne	.-6      	; 0x236 <DLY11>
		DEC   R16                                         ;decrement R16 val,       (1 clock )
 23c:	0a 95       	dec	r16
		BRNE  DLY10                                       ;if R16 not equal to 0,   (2 clock ) 
 23e:	d1 f7       	brne	.-12     	; 0x234 <DLY10>
		RJMP  LOOP1                                       ;if R16 is 0->jump,       (2 clock ) 
 240:	f4 cf       	rjmp	.-24     	; 0x22a <LOOP1>

00000242 <Kernel_Test_Task2>:


;;===================================Kernel Test Task2======================================;;
Kernel_Test_Task2:
        ;initialize DDR and Port register, total 4 clocks
        SBI   KER_TSK2_DDR       , KER_TSK2_PIN           ;set bit in DDR,          (2 clocks) 
 242:	57 9a       	sbi	0x0a, 7	; 10
		CBI   KER_TSK2_PORT      , KER_TSK2_PIN           ;clear port bit,          (2 clocks)
 244:	5f 98       	cbi	0x0b, 7	; 11

00000246 <LOOP2>:
		 
    LOOP2:
	    ;pin toggle, total 5 clocks
		IN    R16                , KER_TSK2_PORT          ;load PORT val,           (2 clocks)
 246:	0b b1       	in	r16, 0x0b	; 11
		LDI   R17                , (1<<KER_TSK2_PIN)      ;bit mask for port pin    (1 clock )
 248:	10 e8       	ldi	r17, 0x80	; 128
		EOR   R16                , R17                    ;XOR with current val     (1 clock )
 24a:	01 27       	eor	r16, r17
		OUT   KER_TSK2_PORT      , R16                    ;set new PORT val,        (1 clock )
 24c:	0b b9       	out	0x0b, r16	; 11
		
		;assign delay loop count val, for 30ms 
		LDI   R16                , 0xEB                   ;set loop cnt val,        (1 clock )
 24e:	0b ee       	ldi	r16, 0xEB	; 235

00000250 <DLY20>:
		
    DLY20:
	    LDI   R17                , 0xFF                   ;set loop cnt val,        (1 clock )
 250:	1f ef       	ldi	r17, 0xFF	; 255

00000252 <DLY21>:
		
	DLY21:                                                ;inner loop, 127.5uS@8Mhz (4 clocks)
		NOP                                               ;no operation,            (1 clock )
 252:	00 00       	nop
		DEC   R17                                         ;decrement R17 val,       (1 clock )
 254:	1a 95       	dec	r17
		BRNE  DLY21                                       ;if R17 not equal to 0,   (2 clock ) 
 256:	e9 f7       	brne	.-6      	; 0x252 <DLY21>
		DEC   R16                                         ;decrement R16 val,       (1 clock )
 258:	0a 95       	dec	r16
		BRNE  DLY20                                       ;if R16 not equal to 0,   (2 clock ) 
 25a:	d1 f7       	brne	.-12     	; 0x250 <DLY20>
		RJMP  LOOP2                                       ;if R16 is 0->jump,       (2 clock ) 
 25c:	f4 cf       	rjmp	.-24     	; 0x246 <LOOP2>

0000025e <Kernel_Task0_Init>:
    

;;====================================Kernel Task0 Init=====================================;;
Kernel_Task0_Init:
        ;init stack for task0
		LDI   R16                , lo8(ker_stk0+KER_STZ)  ;fetch top SPL1,          (1 clock )
 25e:	02 e9       	ldi	r16, 0x92	; 146
		LDI   R17                , hi8(ker_stk0+KER_STZ)  ;fetch top SPH1,          (1 clock )
 260:	11 e0       	ldi	r17, 0x01	; 1
		
		
		;debug
		MOV   R24                , R16                    ;copy val to R24          (1 clock )
 262:	80 2f       	mov	r24, r16
		CALL  Debug_Tx_Byte                               ;send via uart
 264:	0e 94 d7 01 	call	0x3ae	; 0x3ae <Debug_Tx_Byte>
		MOV   R24                , R17                    ;copy val to R24          (1 clock )
 268:	81 2f       	mov	r24, r17
		CALL  Debug_Tx_Byte                               ;send via uart
 26a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <Debug_Tx_Byte>
		
		
		OUT   IOSPL              , R16                    ;load SPL                 (1 clock )
 26e:	0d bf       	out	0x3d, r16	; 61
        OUT   IOSPH              , R17                    ;load SPH                 (1 clock )
 270:	1e bf       	out	0x3e, r17	; 62
		
		LDI   R16                , lo8(Kernel_Test_Task0) ;fetch task address low,  (1 clock )
 272:	08 e0       	ldi	r16, 0x08	; 8
		PUSH  R16                                         ;push,                    (2 clocks) 
 274:	0f 93       	push	r16
		LDI   R16                , hi8(Kernel_Test_Task0) ;fetch task address high, (1 clock )
 276:	02 e0       	ldi	r16, 0x02	; 2
		PUSH  R16                                         ;push,                    (2 clocks) 
 278:	0f 93       	push	r16
		
        KER_CNTXT_SV
 27a:	0f 92       	push	r0
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	0f 92       	push	r0
 280:	1f 92       	push	r1
 282:	11 24       	eor	r1, r1
 284:	2f 92       	push	r2
 286:	3f 92       	push	r3
 288:	4f 92       	push	r4
 28a:	5f 92       	push	r5
 28c:	6f 92       	push	r6
 28e:	7f 92       	push	r7
 290:	8f 92       	push	r8
 292:	9f 92       	push	r9
 294:	af 92       	push	r10
 296:	bf 92       	push	r11
 298:	cf 92       	push	r12
 29a:	df 92       	push	r13
 29c:	ef 92       	push	r14
 29e:	ff 92       	push	r15
 2a0:	0f 93       	push	r16
 2a2:	1f 93       	push	r17
 2a4:	2f 93       	push	r18
 2a6:	3f 93       	push	r19
 2a8:	4f 93       	push	r20
 2aa:	5f 93       	push	r21
 2ac:	6f 93       	push	r22
 2ae:	7f 93       	push	r23
 2b0:	8f 93       	push	r24
 2b2:	9f 93       	push	r25
 2b4:	af 93       	push	r26
 2b6:	bf 93       	push	r27
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	ef 93       	push	r30
 2be:	ff 93       	push	r31
		
        IN    R16, IOSPL                                  ;fetch SPL                (1 clock )
 2c0:	0d b7       	in	r16, 0x3d	; 61
        IN    R17, IOSPH                                  ;fetch SPH                (1 clock )
 2c2:	1e b7       	in	r17, 0x3e	; 62
        STS   ker_stp + 0        , R16                    ;set stp of task0         (2 clocks) 
 2c4:	00 93 0c 01 	sts	0x010C, r16
        STS   ker_stp + 1        , R17                    ;set stp of task0         (2 clocks) 
 2c8:	10 93 0d 01 	sts	0x010D, r17
		
        RET                                               ;return from subroutine,  (4 clocks) 
 2cc:	08 95       	ret

000002ce <Kernel_Task1_Init>:


;;====================================Kernel Task1 Init=====================================;;
Kernel_Task1_Init:
        ;init stack for task1
		LDI   R16                , lo8(ker_stk1+KER_STZ)  ;fetch top SPL1,          (1 clock )
 2ce:	02 e1       	ldi	r16, 0x12	; 18
		LDI   R17                , hi8(ker_stk1+KER_STZ)  ;fetch top SPH1,          (1 clock )
 2d0:	12 e0       	ldi	r17, 0x02	; 2
		
		;debug
		MOV   R24                , R16                    ;copy val to R24          (1 clock )
 2d2:	80 2f       	mov	r24, r16
		CALL  Debug_Tx_Byte                               ;send via uart
 2d4:	0e 94 d7 01 	call	0x3ae	; 0x3ae <Debug_Tx_Byte>
		MOV   R24                , R17                    ;copy val to R24          (1 clock )
 2d8:	81 2f       	mov	r24, r17
		CALL  Debug_Tx_Byte                               ;send via uart
 2da:	0e 94 d7 01 	call	0x3ae	; 0x3ae <Debug_Tx_Byte>
		
		OUT   IOSPL              , R16                    ;load SPL                 (1 clock )
 2de:	0d bf       	out	0x3d, r16	; 61
        OUT   IOSPH              , R17                    ;load SPH                 (1 clock )
 2e0:	1e bf       	out	0x3e, r17	; 62
		
		LDI   R16                , lo8(Kernel_Test_Task1) ;fetch task address low,  (1 clock )
 2e2:	06 e2       	ldi	r16, 0x26	; 38
		PUSH  R16                                         ;push,                    (2 clocks) 
 2e4:	0f 93       	push	r16
		LDI   R16                , hi8(Kernel_Test_Task1) ;fetch task address high, (1 clock )
 2e6:	02 e0       	ldi	r16, 0x02	; 2
		PUSH  R16                                         ;push,                    (2 clocks) 
 2e8:	0f 93       	push	r16
		
        KER_CNTXT_SV
 2ea:	0f 92       	push	r0
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	0f 92       	push	r0
 2f0:	1f 92       	push	r1
 2f2:	11 24       	eor	r1, r1
 2f4:	2f 92       	push	r2
 2f6:	3f 92       	push	r3
 2f8:	4f 92       	push	r4
 2fa:	5f 92       	push	r5
 2fc:	6f 92       	push	r6
 2fe:	7f 92       	push	r7
 300:	8f 92       	push	r8
 302:	9f 92       	push	r9
 304:	af 92       	push	r10
 306:	bf 92       	push	r11
 308:	cf 92       	push	r12
 30a:	df 92       	push	r13
 30c:	ef 92       	push	r14
 30e:	ff 92       	push	r15
 310:	0f 93       	push	r16
 312:	1f 93       	push	r17
 314:	2f 93       	push	r18
 316:	3f 93       	push	r19
 318:	4f 93       	push	r20
 31a:	5f 93       	push	r21
 31c:	6f 93       	push	r22
 31e:	7f 93       	push	r23
 320:	8f 93       	push	r24
 322:	9f 93       	push	r25
 324:	af 93       	push	r26
 326:	bf 93       	push	r27
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	ef 93       	push	r30
 32e:	ff 93       	push	r31
		
        IN    R16, IOSPL                                  ;fetch SPL                (1 clock )
 330:	0d b7       	in	r16, 0x3d	; 61
        IN    R17, IOSPH                                  ;fetch SPH                (1 clock )
 332:	1e b7       	in	r17, 0x3e	; 62
        STS   ker_stp + 2        , R16                    ;set stp of task0         (2 clocks) 
 334:	00 93 0e 01 	sts	0x010E, r16
        STS   ker_stp + 3        , R17                    ;set stp of task0         (2 clocks) 
 338:	10 93 0f 01 	sts	0x010F, r17
		
        RET                                               ;return from subroutine,  (4 clocks) 
 33c:	08 95       	ret

0000033e <Kernel_Task_Debug>:


;;====================================Kernel Task Debug=====================================;;
Kernel_Task_Debug:
		
		LDI   R16                , lo8(RAMEND-0)
 33e:	0f ef       	ldi	r16, 0xFF	; 255
		LDI   R17                , hi8(RAMEND-0)
 340:	18 e0       	ldi	r17, 0x08	; 8
		OUT   IOSPL              , R16
 342:	0d bf       	out	0x3d, r16	; 61
		OUT   IOSPH              , R17
 344:	1e bf       	out	0x3e, r17	; 62
		
		IN    R24                , IOSPL
 346:	8d b7       	in	r24, 0x3d	; 61
		IN    R25                , IOSPH
 348:	9e b7       	in	r25, 0x3e	; 62
		CALL  Debug_Tx_Word_Conf 
 34a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <Debug_Tx_Word_Conf>
		;LDI   R24                , lo8(RAMEND-0)
		;LDI   R25                , hi8(RAMEND-0)
		;LDI   R22                , 0x08
		;CALL  Debug_Tx_RAM_Area
		
		LDI   R18                , 0x12
 34e:	22 e1       	ldi	r18, 0x12	; 18
		PUSH  R18	
 350:	2f 93       	push	r18
		LDI   R18                , 0x34
 352:	24 e3       	ldi	r18, 0x34	; 52
		PUSH  R18
 354:	2f 93       	push	r18
		LDI   R18                , 0x56
 356:	26 e5       	ldi	r18, 0x56	; 86
		PUSH  R18
 358:	2f 93       	push	r18
		LDI   R18                , 0x78
 35a:	28 e7       	ldi	r18, 0x78	; 120
		PUSH  R18
 35c:	2f 93       	push	r18
		
        
		
		LDI   R24                , lo8(0x08FF)
 35e:	8f ef       	ldi	r24, 0xFF	; 255
		LDI   R25                , hi8(0x08FF)
 360:	98 e0       	ldi	r25, 0x08	; 8
		LDI   R22                , 0x08
 362:	68 e0       	ldi	r22, 0x08	; 8
		CALL  Debug_Tx_RAM_Area
 364:	0e 94 14 02 	call	0x428	; 0x428 <Debug_Tx_RAM_Area>
		
	    ;CALL  Kernel_Task_Debug1
		RET                         
 368:	08 95       	ret

0000036a <Kernel_Task_Debug1>:

;;====================================Kernel Task Debug1=====================================;;
Kernel_Task_Debug1:
		
		;creating gap between data
		LDI   R24                , 0xFF
 36a:	8f ef       	ldi	r24, 0xFF	; 255
		CALL  Debug_Tx_Byte_Conf
 36c:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <Debug_Tx_Byte_Conf>
		LDI   R24                , 0xFF
 370:	8f ef       	ldi	r24, 0xFF	; 255
		CALL  Debug_Tx_Byte_Conf
 372:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <Debug_Tx_Byte_Conf>
		LDI   R24                , 0xFF
 376:	8f ef       	ldi	r24, 0xFF	; 255
		CALL  Debug_Tx_Byte_Conf
 378:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <Debug_Tx_Byte_Conf>
		
		IN    R24                , IOSPL
 37c:	8d b7       	in	r24, 0x3d	; 61
		IN    R25                , IOSPH
 37e:	9e b7       	in	r25, 0x3e	; 62
		CALL  Debug_Tx_Word_Conf 
 380:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <Debug_Tx_Word_Conf>
		
		LDI   R24                , lo8(RAMEND-0)
 384:	8f ef       	ldi	r24, 0xFF	; 255
		LDI   R25                , hi8(RAMEND-0)
 386:	98 e0       	ldi	r25, 0x08	; 8
		LDI   R22                , 0x08
 388:	68 e0       	ldi	r22, 0x08	; 8
		
		CALL  Debug_Tx_RAM_Area
 38a:	0e 94 14 02 	call	0x428	; 0x428 <Debug_Tx_RAM_Area>

0000038e <Debug_Init>:


;;========================================Debug Init========================================;;
Debug_Init:
        ;init registers for UART0
		LDI   R16                , (1<<1)                 ;mask U2x,                (1 clock )
 38e:	02 e0       	ldi	r16, 0x02	; 2
		STS   SRUCSR0A           , R16                    ;load val to UCSR0A,      (2 clocks)
 390:	00 93 c0 00 	sts	0x00C0, r16
		LDI   R16                , 0x00                   ;clear R16,               (1 clock )
 394:	00 e0       	ldi	r16, 0x00	; 0
		STS   SRUBRR0H           , R16                    ;load val to UBRR0H,      (2 clocks)
 396:	00 93 c5 00 	sts	0x00C5, r16
		LDI   R16                , 0x03                   ;set 0x03, 250k baud,     (1 clock )
 39a:	03 e0       	ldi	r16, 0x03	; 3
		STS   SRUBRR0L           , R16                    ;load val to UBRR0L,      (2 clocks)
 39c:	00 93 c4 00 	sts	0x00C4, r16
		LDI   R16                , (1<<1)|(1<<2)          ;config 8 data bit        (1 clock )
 3a0:	06 e0       	ldi	r16, 0x06	; 6
		STS   SRUCSR0C           , R16                    ;load val to UCSR0C,      (2 clocks)
 3a2:	00 93 c2 00 	sts	0x00C2, r16
		LDI   R16                , (1<<3)                 ;enable tx,               (1 clock )
 3a6:	08 e0       	ldi	r16, 0x08	; 8
		STS   SRUCSR0B           , R16                    ;load val to UCSR0B,      (2 clocks)
 3a8:	00 93 c1 00 	sts	0x00C1, r16
        RET                                               ;return from subroutine,  (4 clocks) 
 3ac:	08 95       	ret

000003ae <Debug_Tx_Byte>:


;;=========================================Debug Tx=========================================;;
Debug_Tx_Byte:
		;write single byte to data register (Arg R24)
		STS   SRGPIOR0           , R16                    ;store R16 val,           (2 clocks)
 3ae:	00 93 3e 00 	sts	0x003E, r16
		STS   SRUDR0             , R24                    ;load val to UDR0,        (2 clocks)
 3b2:	80 93 c6 00 	sts	0x00C6, r24

000003b6 <__WAIT0>:
		
    __WAIT0:
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,      (2 clocks)
 3b6:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x05                   ;skip if UDRE0 is set,    (2 clocks)
 3ba:	05 ff       	sbrs	r16, 5
		RJMP  __WAIT0                                     ;wait until UDRE0 is set, (2 clocks)
 3bc:	fc cf       	rjmp	.-8      	; 0x3b6 <__WAIT0>
		LDS   R16                , SRGPIOR0               ;restore R16 val,         (2 clocks)
 3be:	00 91 3e 00 	lds	r16, 0x003E
        RET                                               ;return from subroutine,  (4 clocks) 
 3c2:	08 95       	ret

000003c4 <Debug_Tx_Byte_Conf>:


;;=========================================Debug Tx=========================================;;
Debug_Tx_Byte_Conf:
        ;write single byte to data register and wait until tx is complete (Arg R24)
		STS   SRGPIOR0           , R16                    ;store R16 val,           (2 clocks)
 3c4:	00 93 3e 00 	sts	0x003E, r16
		STS   SRUDR0             , R24                    ;load val to UDR0,        (2 clocks)
 3c8:	80 93 c6 00 	sts	0x00C6, r24

000003cc <__WAIT1>:
		
    __WAIT1:
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,      (2 clocks)
 3cc:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x06                   ;skip if TXC0 is set,     (2 clocks)
 3d0:	06 ff       	sbrs	r16, 6
		RJMP  __WAIT1                                     ;wait until TXC0 is set,  (2 clocks)
 3d2:	fc cf       	rjmp	.-8      	; 0x3cc <__WAIT1>
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,      (2 clocks)
 3d4:	00 91 c0 00 	lds	r16, 0x00C0
		ORI   R16                , (1<<6)                 ;mask bit 6,              (1 clock )
 3d8:	00 64       	ori	r16, 0x40	; 64
		STS   SRUCSR0A           , R16                    ;load val to UCSR0B,      (2 clocks)
 3da:	00 93 c0 00 	sts	0x00C0, r16
		LDS   R16                , SRGPIOR0               ;restore R16 val,         (2 clocks)
 3de:	00 91 3e 00 	lds	r16, 0x003E
        RET                                               ;return from subroutine,  (4 clocks) 
 3e2:	08 95       	ret

000003e4 <Debug_Tx_Word_Conf>:

;;======================================Debug Tx Word=======================================;;
Debug_Tx_Word_Conf:
        ;write 2 bytes to data register and wait until tx is complete (Arg R24, R25)
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 3e4:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <Debug_Tx_Byte_Conf>
		MOV   R24                , R25                    ;copy R25 to R24          (1 clock )
 3e8:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 3ea:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <Debug_Tx_Byte_Conf>
        RET                                               ;return from subroutine,  (4 clocks) 
 3ee:	08 95       	ret

000003f0 <Debug_Tx_DWord_Conf>:

;;=====================================Debug Tx DWord=======================================;;
Debug_Tx_DWord_Conf:
        ;write 4 bytes to data register and wait until tx is complete (Arg R22-R25)
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks)
 3f0:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R22                    ;copy R22 to R24          (1 clock )
 3f4:	86 2f       	mov	r24, r22
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 3f6:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <Debug_Tx_Byte_Conf>
		MOV   R24                , R23                    ;copy R23 to R24          (1 clock )
 3fa:	87 2f       	mov	r24, r23
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 3fc:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24              (2 clocks)
 400:	80 91 4a 00 	lds	r24, 0x004A
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 404:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <Debug_Tx_Byte_Conf>
		MOV   R24                , R25                    ;copy R22 to R24          (1 clock )
 408:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 40a:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <Debug_Tx_Byte_Conf>
        RET                                               ;return from subroutine,  (4 clocks) 
 40e:	08 95       	ret

00000410 <Debug_Tx_From_RAM>:


;;===================================Debug Tx RAM Area======================================;;
Debug_Tx_From_RAM:
        ;print data from RAM address (Arg R24-R25)
		MOV   R16                , R30                    ;copy R30 to R16          (1 clock )
 410:	0e 2f       	mov	r16, r30
		MOV   R17                , R31                    ;copy R31 to R17          (1 clock )
 412:	1f 2f       	mov	r17, r31
		MOV   R18                , R24                    ;copy R24 to R18          (1 clock )
 414:	28 2f       	mov	r18, r24
		MOV   R30                , R24                    ;copy R22 to R24          (1 clock )
 416:	e8 2f       	mov	r30, r24
		MOV   R31                , R25                    ;copy R22 to R24          (1 clock )
 418:	f9 2f       	mov	r31, r25
		LD    R24                , Z                      ;load val to R24          (2 clocks)
 41a:	80 81       	ld	r24, Z
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 41c:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <Debug_Tx_Byte_Conf>
		MOV   R30                , R16                    ;copy R16 to R30          (1 clock )
 420:	e0 2f       	mov	r30, r16
		MOV   R31                , R17                    ;copy R17 to R31          (1 clock )
 422:	f1 2f       	mov	r31, r17
		MOV   R24                , R18                    ;copy R18 to R24          (1 clock )
 424:	82 2f       	mov	r24, r18
        RET                                               ;return from subroutine,  (4 clocks) 
 426:	08 95       	ret

00000428 <Debug_Tx_RAM_Area>:

;;===================================Debug Tx RAM Area======================================;;
Debug_Tx_RAM_Area:
        ;print data from RAM address (arguments R24:R25, R22)
	__DUMP_BYTES:
	    CALL  Debug_Tx_From_RAM                           ;send via uart from ram
 428:	0e 94 08 02 	call	0x410	; 0x410 <Debug_Tx_From_RAM>
		SUBI  R24                , 0x01                   ;decrement from LSByte
 42c:	81 50       	subi	r24, 0x01	; 1
        SBCI  R25                , 0x00                   ;decrement if carry
 42e:	90 40       	sbci	r25, 0x00	; 0
		SUBI  R22                , 0x01                   ;decrement
 430:	61 50       	subi	r22, 0x01	; 1
		BRNE  __DUMP_BYTES
 432:	d1 f7       	brne	.-12     	; 0x428 <Debug_Tx_RAM_Area>
        RET                                               ;return from subroutine,  (4 clocks) 
 434:	08 95       	ret

00000436 <_exit>:
 436:	f8 94       	cli

00000438 <__stop_program>:
 438:	ff cf       	rjmp	.-2      	; 0x438 <__stop_program>
