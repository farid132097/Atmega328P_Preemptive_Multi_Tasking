
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a76  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000558  00800100  00800100  00000aea  2**0
                  ALLOC
  2 .stab         00000b70  00000000  00000000  00000aec  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000006d  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  000016c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000bd  00000000  00000000  00001709  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000188  00000000  00000000  000017c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000080  00000000  00000000  0000194e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d9  00000000  00000000  000019ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001da8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000010d  00000000  00000000  00001e68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__vector_16>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	00 00       	nop
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 00       	nop
  76:	00 00       	nop
  78:	00 00       	nop
  7a:	00 00       	nop
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 00       	nop
  82:	00 00       	nop
  84:	00 00       	nop
  86:	00 00       	nop
  88:	a0 c1       	rjmp	.+832    	; 0x3ca <__vector_16>

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61
  96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  9a:	0c 94 39 05 	jmp	0xa72	; 0xa72 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:


    
int main(void) {
    
	Kernel_Init();
  a2:	0e 94 c1 03 	call	0x782	; 0x782 <Kernel_Init>

	Kernel_Task_Create(Tasks_Task1,  3);
  a6:	8b eb       	ldi	r24, 0xBB	; 187
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	63 e0       	ldi	r22, 0x03	; 3
  ac:	0e 94 18 03 	call	0x630	; 0x630 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task2,  0);
  b0:	81 e9       	ldi	r24, 0x91	; 145
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	0e 94 18 03 	call	0x630	; 0x630 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task3,  2);
  ba:	87 e6       	ldi	r24, 0x67	; 103
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	62 e0       	ldi	r22, 0x02	; 2
  c0:	0e 94 18 03 	call	0x630	; 0x630 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task4,  1);
  c4:	8d e3       	ldi	r24, 0x3D	; 61
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	0e 94 18 03 	call	0x630	; 0x630 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task5,  4);
  ce:	83 e1       	ldi	r24, 0x13	; 19
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	64 e0       	ldi	r22, 0x04	; 4
  d4:	0e 94 18 03 	call	0x630	; 0x630 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task6,  6);
  d8:	8f ee       	ldi	r24, 0xEF	; 239
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	66 e0       	ldi	r22, 0x06	; 6
  de:	0e 94 18 03 	call	0x630	; 0x630 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task7,  5);
  e2:	8b ec       	ldi	r24, 0xCB	; 203
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	65 e0       	ldi	r22, 0x05	; 5
  e8:	0e 94 18 03 	call	0x630	; 0x630 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task8,  8);
  ec:	87 ea       	ldi	r24, 0xA7	; 167
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	68 e0       	ldi	r22, 0x08	; 8
  f2:	0e 94 18 03 	call	0x630	; 0x630 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task9,  7);
  f6:	83 e8       	ldi	r24, 0x83	; 131
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	67 e0       	ldi	r22, 0x07	; 7
  fc:	0e 94 18 03 	call	0x630	; 0x630 <Kernel_Task_Create>
	
	Kernel_Start_Tasks();
 100:	0e 94 89 03 	call	0x712	; 0x712 <Kernel_Start_Tasks>
 104:	ff cf       	rjmp	.-2      	; 0x104 <SRUDR0+0x3e>

00000106 <Tasks_Task9>:
  }
}

void Tasks_Task9(void){
  
  Debug_Init(0);
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 db 04 	call	0x9b6	; 0x9b6 <Debug_Init>
  
  while(1){
    
	  Debug_Tx_Byte(9);
 10e:	89 e0       	ldi	r24, 0x09	; 9
 110:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(9));
 114:	89 e0       	ldi	r24, 0x09	; 9
 116:	0e 94 b2 04 	call	0x964	; 0x964 <Kernel_Task_Sleep_Time_Get>
 11a:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(9));
 11e:	89 e0       	ldi	r24, 0x09	; 9
 120:	0e 94 bc 04 	call	0x978	; 0x978 <Kernel_Task_Status_Get>
 124:	80 5e       	subi	r24, 0xE0	; 224
 126:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 12a:	0e 94 d5 04 	call	0x9aa	; 0x9aa <Kernel_Abs_High_Prio_Task_ID_Get>
 12e:	80 5f       	subi	r24, 0xF0	; 240
 130:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 134:	0e 94 ce 04 	call	0x99c	; 0x99c <Kernel_Lowest_Prio_Get>
 138:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_CPU_Usage_Get());
 13c:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <Kernel_CPU_Usage_Get>
 140:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Kernel_Task_Sleep(90);
 144:	8a e5       	ldi	r24, 0x5A	; 90
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <Kernel_Task_Sleep>
 14c:	e0 cf       	rjmp	.-64     	; 0x10e <Tasks_Task9+0x8>

0000014e <Tasks_Task8>:
  }
}

void Tasks_Task8(void){
  
  Debug_Init(0);
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 db 04 	call	0x9b6	; 0x9b6 <Debug_Init>
  
  while(1){
    
	  Debug_Tx_Byte(8);
 156:	88 e0       	ldi	r24, 0x08	; 8
 158:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(8));
 15c:	88 e0       	ldi	r24, 0x08	; 8
 15e:	0e 94 b2 04 	call	0x964	; 0x964 <Kernel_Task_Sleep_Time_Get>
 162:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(8));
 166:	88 e0       	ldi	r24, 0x08	; 8
 168:	0e 94 bc 04 	call	0x978	; 0x978 <Kernel_Task_Status_Get>
 16c:	80 5e       	subi	r24, 0xE0	; 224
 16e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 172:	0e 94 d5 04 	call	0x9aa	; 0x9aa <Kernel_Abs_High_Prio_Task_ID_Get>
 176:	80 5f       	subi	r24, 0xF0	; 240
 178:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 17c:	0e 94 ce 04 	call	0x99c	; 0x99c <Kernel_Lowest_Prio_Get>
 180:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_CPU_Usage_Get());
 184:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <Kernel_CPU_Usage_Get>
 188:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Kernel_Task_Sleep(80);
 18c:	80 e5       	ldi	r24, 0x50	; 80
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <Kernel_Task_Sleep>
 194:	e0 cf       	rjmp	.-64     	; 0x156 <Tasks_Task8+0x8>

00000196 <Tasks_Task7>:
  }
}

void Tasks_Task7(void){
  
  Debug_Init(0);
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 db 04 	call	0x9b6	; 0x9b6 <Debug_Init>
  
  while(1){
    
	  Debug_Tx_Byte(7);
 19e:	87 e0       	ldi	r24, 0x07	; 7
 1a0:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(7));
 1a4:	87 e0       	ldi	r24, 0x07	; 7
 1a6:	0e 94 b2 04 	call	0x964	; 0x964 <Kernel_Task_Sleep_Time_Get>
 1aa:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(7));
 1ae:	87 e0       	ldi	r24, 0x07	; 7
 1b0:	0e 94 bc 04 	call	0x978	; 0x978 <Kernel_Task_Status_Get>
 1b4:	80 5e       	subi	r24, 0xE0	; 224
 1b6:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 1ba:	0e 94 d5 04 	call	0x9aa	; 0x9aa <Kernel_Abs_High_Prio_Task_ID_Get>
 1be:	80 5f       	subi	r24, 0xF0	; 240
 1c0:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 1c4:	0e 94 ce 04 	call	0x99c	; 0x99c <Kernel_Lowest_Prio_Get>
 1c8:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_CPU_Usage_Get());
 1cc:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <Kernel_CPU_Usage_Get>
 1d0:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Kernel_Task_Sleep(70);
 1d4:	86 e4       	ldi	r24, 0x46	; 70
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <Kernel_Task_Sleep>
 1dc:	e0 cf       	rjmp	.-64     	; 0x19e <Tasks_Task7+0x8>

000001de <Tasks_Task6>:
  }
}

void Tasks_Task6(void){
  
  Debug_Init(0);
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 db 04 	call	0x9b6	; 0x9b6 <Debug_Init>
  
  while(1){
    
    Debug_Tx_Byte(6);
 1e6:	86 e0       	ldi	r24, 0x06	; 6
 1e8:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(6));
 1ec:	86 e0       	ldi	r24, 0x06	; 6
 1ee:	0e 94 b2 04 	call	0x964	; 0x964 <Kernel_Task_Sleep_Time_Get>
 1f2:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(6));
 1f6:	86 e0       	ldi	r24, 0x06	; 6
 1f8:	0e 94 bc 04 	call	0x978	; 0x978 <Kernel_Task_Status_Get>
 1fc:	80 5e       	subi	r24, 0xE0	; 224
 1fe:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 202:	0e 94 d5 04 	call	0x9aa	; 0x9aa <Kernel_Abs_High_Prio_Task_ID_Get>
 206:	80 5f       	subi	r24, 0xF0	; 240
 208:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 20c:	0e 94 ce 04 	call	0x99c	; 0x99c <Kernel_Lowest_Prio_Get>
 210:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_CPU_Usage_Get());
 214:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <Kernel_CPU_Usage_Get>
 218:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Kernel_Task_Sleep(60);
 21c:	8c e3       	ldi	r24, 0x3C	; 60
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <Kernel_Task_Sleep>
 224:	e0 cf       	rjmp	.-64     	; 0x1e6 <Tasks_Task6+0x8>

00000226 <Tasks_Task5>:
    Kernel_Task_Sleep(40);
	
  }
}

void Tasks_Task5(void){
 226:	1f 93       	push	r17
  
  DDRC |= (1<<5);
 228:	3d 9a       	sbi	0x07, 5	; 7

  Debug_Init(0);
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<5);
 232:	10 e2       	ldi	r17, 0x20	; 32
 234:	88 b1       	in	r24, 0x08	; 8
 236:	81 27       	eor	r24, r17
 238:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(5);
 23a:	85 e0       	ldi	r24, 0x05	; 5
 23c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(5));
 240:	85 e0       	ldi	r24, 0x05	; 5
 242:	0e 94 b2 04 	call	0x964	; 0x964 <Kernel_Task_Sleep_Time_Get>
 246:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(5));
 24a:	85 e0       	ldi	r24, 0x05	; 5
 24c:	0e 94 bc 04 	call	0x978	; 0x978 <Kernel_Task_Status_Get>
 250:	80 5e       	subi	r24, 0xE0	; 224
 252:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 256:	0e 94 d5 04 	call	0x9aa	; 0x9aa <Kernel_Abs_High_Prio_Task_ID_Get>
 25a:	80 5f       	subi	r24, 0xF0	; 240
 25c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 260:	0e 94 ce 04 	call	0x99c	; 0x99c <Kernel_Lowest_Prio_Get>
 264:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_CPU_Usage_Get());
 268:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <Kernel_CPU_Usage_Get>
 26c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Kernel_Task_Sleep(50);
 270:	82 e3       	ldi	r24, 0x32	; 50
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <Kernel_Task_Sleep>
 278:	dd cf       	rjmp	.-70     	; 0x234 <Tasks_Task5+0xe>

0000027a <Tasks_Task4>:
    Kernel_Task_Sleep(30);
	
  }
}

void Tasks_Task4(void){
 27a:	1f 93       	push	r17
  
  DDRC |= (1<<4);
 27c:	3c 9a       	sbi	0x07, 4	; 7

  Debug_Init(0);
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 db 04 	call	0x9b6	; 0x9b6 <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<4);
 286:	10 e1       	ldi	r17, 0x10	; 16
 288:	88 b1       	in	r24, 0x08	; 8
 28a:	81 27       	eor	r24, r17
 28c:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(4);
 28e:	84 e0       	ldi	r24, 0x04	; 4
 290:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(4));
 294:	84 e0       	ldi	r24, 0x04	; 4
 296:	0e 94 b2 04 	call	0x964	; 0x964 <Kernel_Task_Sleep_Time_Get>
 29a:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(4));
 29e:	84 e0       	ldi	r24, 0x04	; 4
 2a0:	0e 94 bc 04 	call	0x978	; 0x978 <Kernel_Task_Status_Get>
 2a4:	80 5e       	subi	r24, 0xE0	; 224
 2a6:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 2aa:	0e 94 d5 04 	call	0x9aa	; 0x9aa <Kernel_Abs_High_Prio_Task_ID_Get>
 2ae:	80 5f       	subi	r24, 0xF0	; 240
 2b0:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 2b4:	0e 94 ce 04 	call	0x99c	; 0x99c <Kernel_Lowest_Prio_Get>
 2b8:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_CPU_Usage_Get());
 2bc:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <Kernel_CPU_Usage_Get>
 2c0:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Kernel_Task_Sleep(40);
 2c4:	88 e2       	ldi	r24, 0x28	; 40
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <Kernel_Task_Sleep>
 2cc:	dd cf       	rjmp	.-70     	; 0x288 <Tasks_Task4+0xe>

000002ce <Tasks_Task3>:
    Kernel_Task_Sleep(20);
	
  }
}

void Tasks_Task3(void){
 2ce:	1f 93       	push	r17
  
  DDRC |= (1<<3);
 2d0:	3b 9a       	sbi	0x07, 3	; 7

  Debug_Init(0);
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 db 04 	call	0x9b6	; 0x9b6 <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<3);
 2da:	18 e0       	ldi	r17, 0x08	; 8
 2dc:	88 b1       	in	r24, 0x08	; 8
 2de:	81 27       	eor	r24, r17
 2e0:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(3);
 2e2:	83 e0       	ldi	r24, 0x03	; 3
 2e4:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(3));
 2e8:	83 e0       	ldi	r24, 0x03	; 3
 2ea:	0e 94 b2 04 	call	0x964	; 0x964 <Kernel_Task_Sleep_Time_Get>
 2ee:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(3));
 2f2:	83 e0       	ldi	r24, 0x03	; 3
 2f4:	0e 94 bc 04 	call	0x978	; 0x978 <Kernel_Task_Status_Get>
 2f8:	80 5e       	subi	r24, 0xE0	; 224
 2fa:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 2fe:	0e 94 d5 04 	call	0x9aa	; 0x9aa <Kernel_Abs_High_Prio_Task_ID_Get>
 302:	80 5f       	subi	r24, 0xF0	; 240
 304:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 308:	0e 94 ce 04 	call	0x99c	; 0x99c <Kernel_Lowest_Prio_Get>
 30c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_CPU_Usage_Get());
 310:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <Kernel_CPU_Usage_Get>
 314:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Kernel_Task_Sleep(30);
 318:	8e e1       	ldi	r24, 0x1E	; 30
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <Kernel_Task_Sleep>
 320:	dd cf       	rjmp	.-70     	; 0x2dc <Tasks_Task3+0xe>

00000322 <Tasks_Task2>:
    Kernel_Task_Sleep(10);
    
  }
}

void Tasks_Task2(void){
 322:	1f 93       	push	r17
  
  DDRC |= (1<<2);
 324:	3a 9a       	sbi	0x07, 2	; 7

  Debug_Init(0);
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 db 04 	call	0x9b6	; 0x9b6 <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<2);
 32e:	14 e0       	ldi	r17, 0x04	; 4
 330:	88 b1       	in	r24, 0x08	; 8
 332:	81 27       	eor	r24, r17
 334:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(2);
 336:	82 e0       	ldi	r24, 0x02	; 2
 338:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(2));
 33c:	82 e0       	ldi	r24, 0x02	; 2
 33e:	0e 94 b2 04 	call	0x964	; 0x964 <Kernel_Task_Sleep_Time_Get>
 342:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(2));
 346:	82 e0       	ldi	r24, 0x02	; 2
 348:	0e 94 bc 04 	call	0x978	; 0x978 <Kernel_Task_Status_Get>
 34c:	80 5e       	subi	r24, 0xE0	; 224
 34e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 352:	0e 94 d5 04 	call	0x9aa	; 0x9aa <Kernel_Abs_High_Prio_Task_ID_Get>
 356:	80 5f       	subi	r24, 0xF0	; 240
 358:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 35c:	0e 94 ce 04 	call	0x99c	; 0x99c <Kernel_Lowest_Prio_Get>
 360:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_CPU_Usage_Get());
 364:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <Kernel_CPU_Usage_Get>
 368:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Kernel_Task_Sleep(20);
 36c:	84 e1       	ldi	r24, 0x14	; 20
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <Kernel_Task_Sleep>
 374:	dd cf       	rjmp	.-70     	; 0x330 <Tasks_Task2+0xe>

00000376 <Tasks_Task1>:
#include <util/delay.h>
#include "kernel.h"
#include "tasks.h"
#include "debug.h"

void Tasks_Task1(void){
 376:	1f 93       	push	r17
  
  DDRC |= (1<<1);
 378:	39 9a       	sbi	0x07, 1	; 7

  Debug_Init(0);
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <Debug_Init>
  
  while(1){
    
    PORTC ^= (1<<1);
 382:	12 e0       	ldi	r17, 0x02	; 2
 384:	88 b1       	in	r24, 0x08	; 8
 386:	81 27       	eor	r24, r17
 388:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(1);
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	0e 94 b2 04 	call	0x964	; 0x964 <Kernel_Task_Sleep_Time_Get>
 396:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	0e 94 bc 04 	call	0x978	; 0x978 <Kernel_Task_Status_Get>
 3a0:	80 5e       	subi	r24, 0xE0	; 224
 3a2:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 3a6:	0e 94 d5 04 	call	0x9aa	; 0x9aa <Kernel_Abs_High_Prio_Task_ID_Get>
 3aa:	80 5f       	subi	r24, 0xF0	; 240
 3ac:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 3b0:	0e 94 ce 04 	call	0x99c	; 0x99c <Kernel_Lowest_Prio_Get>
 3b4:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_CPU_Usage_Get());
 3b8:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <Kernel_CPU_Usage_Get>
 3bc:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
    Kernel_Task_Sleep(10);
 3c0:	8a e0       	ldi	r24, 0x0A	; 10
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <Kernel_Task_Sleep>
 3c8:	dd cf       	rjmp	.-70     	; 0x384 <Tasks_Task1+0xe>

000003ca <__vector_16>:


;;=================================ISR execution starting===================================;; 
.global  __vector_16                                                                           
    __vector_16:                                          ;total 40.00uS @8MHz    (320 clocks) 
	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 3ca:	5d 9a       	sbi	0x0b, 5	; 11
        KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 3cc:	0f 92       	push	r0
 3ce:	0f b6       	in	r0, 0x3f	; 63
 3d0:	0f 92       	push	r0
 3d2:	1f 92       	push	r1
 3d4:	11 24       	eor	r1, r1
 3d6:	2f 92       	push	r2
 3d8:	3f 92       	push	r3
 3da:	4f 92       	push	r4
 3dc:	5f 92       	push	r5
 3de:	6f 92       	push	r6
 3e0:	7f 92       	push	r7
 3e2:	8f 92       	push	r8
 3e4:	9f 92       	push	r9
 3e6:	af 92       	push	r10
 3e8:	bf 92       	push	r11
 3ea:	cf 92       	push	r12
 3ec:	df 92       	push	r13
 3ee:	ef 92       	push	r14
 3f0:	ff 92       	push	r15
 3f2:	0f 93       	push	r16
 3f4:	1f 93       	push	r17
 3f6:	2f 93       	push	r18
 3f8:	3f 93       	push	r19
 3fa:	4f 93       	push	r20
 3fc:	5f 93       	push	r21
 3fe:	6f 93       	push	r22
 400:	7f 93       	push	r23
 402:	8f 93       	push	r24
 404:	9f 93       	push	r25
 406:	af 93       	push	r26
 408:	bf 93       	push	r27
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	ef 93       	push	r30
 410:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 412:	1d b7       	in	r17, 0x3d	; 61
 414:	2e b7       	in	r18, 0x3e	; 62
 416:	ee e0       	ldi	r30, 0x0E	; 14
 418:	f1 e0       	ldi	r31, 0x01	; 1
 41a:	00 91 07 01 	lds	r16, 0x0107
 41e:	00 0f       	add	r16, r16
 420:	e0 0f       	add	r30, r16
 422:	00 e0       	ldi	r16, 0x00	; 0
 424:	f0 1f       	adc	r31, r16
 426:	10 83       	st	Z, r17
 428:	21 83       	std	Z+1, r18	; 0x01
		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 42a:	00 91 06 01 	lds	r16, 0x0106
 42e:	00 93 46 00 	sts	0x0046, r16
		KER_TICK_INCREMENT                                ;increment tick counter ( 26 clocks) 
 432:	00 91 00 01 	lds	r16, 0x0100
 436:	03 95       	inc	r16
 438:	00 93 00 01 	sts	0x0100, r16
 43c:	10 e0       	ldi	r17, 0x00	; 0
 43e:	00 91 01 01 	lds	r16, 0x0101
 442:	01 1f       	adc	r16, r17
 444:	00 93 01 01 	sts	0x0101, r16
 448:	00 91 02 01 	lds	r16, 0x0102
 44c:	01 1f       	adc	r16, r17
 44e:	00 93 02 01 	sts	0x0102, r16
 452:	00 91 03 01 	lds	r16, 0x0103
 456:	01 1f       	adc	r16, r17
 458:	00 93 03 01 	sts	0x0103, r16
 45c:	00 91 04 01 	lds	r16, 0x0104
 460:	01 1f       	adc	r16, r17
 462:	00 93 04 01 	sts	0x0104, r16
		LDI    R24               , SCH_MODE_HANDLER       ;set sch mode           (  1 clock ) 
 466:	80 e0       	ldi	r24, 0x00	; 0
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
 468:	0f ef       	ldi	r16, 0xFF	; 255
 46a:	00 93 09 01 	sts	0x0109, r16
 46e:	00 e0       	ldi	r16, 0x00	; 0
 470:	00 93 0a 01 	sts	0x010A, r16
 474:	98 2f       	mov	r25, r24

00000476 <_KER_SCH_LOOP8>:
 476:	00 93 07 01 	sts	0x0107, r16
 47a:	89 2f       	mov	r24, r25
 47c:	e4 e4       	ldi	r30, 0x44	; 68
 47e:	f1 e0       	ldi	r31, 0x01	; 1
 480:	00 91 07 01 	lds	r16, 0x0107
 484:	00 0f       	add	r16, r16
 486:	e0 0f       	add	r30, r16
 488:	00 e0       	ldi	r16, 0x00	; 0
 48a:	f0 1f       	adc	r31, r16
 48c:	00 81       	ld	r16, Z
 48e:	11 81       	ldd	r17, Z+1	; 0x01
 490:	20 2f       	mov	r18, r16
 492:	21 2b       	or	r18, r17
 494:	59 f0       	breq	.+22     	; 0x4ac <_VAL_NULL9>
 496:	81 30       	cpi	r24, 0x01	; 1
 498:	99 f0       	breq	.+38     	; 0x4c0 <_VAL_NOT_NULL9>
 49a:	21 e0       	ldi	r18, 0x01	; 1
 49c:	02 1b       	sub	r16, r18
 49e:	20 e0       	ldi	r18, 0x00	; 0
 4a0:	12 0b       	sbc	r17, r18
 4a2:	00 83       	st	Z, r16
 4a4:	11 83       	std	Z+1, r17	; 0x01
 4a6:	20 2f       	mov	r18, r16
 4a8:	21 2b       	or	r18, r17
 4aa:	51 f4       	brne	.+20     	; 0x4c0 <_VAL_NOT_NULL9>

000004ac <_VAL_NULL9>:
 4ac:	e0 e3       	ldi	r30, 0x30	; 48
 4ae:	f1 e0       	ldi	r31, 0x01	; 1
 4b0:	00 91 07 01 	lds	r16, 0x0107
 4b4:	e0 0f       	add	r30, r16
 4b6:	00 e0       	ldi	r16, 0x00	; 0
 4b8:	f0 1f       	adc	r31, r16
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	80 83       	st	Z, r24
 4be:	01 c0       	rjmp	.+2      	; 0x4c2 <_EXIT_SLP_TIME9>

000004c0 <_VAL_NOT_NULL9>:
 4c0:	80 e0       	ldi	r24, 0x00	; 0

000004c2 <_EXIT_SLP_TIME9>:
 4c2:	81 30       	cpi	r24, 0x01	; 1
 4c4:	91 f4       	brne	.+36     	; 0x4ea <_KER_SCH_NEXT8>
 4c6:	ea e3       	ldi	r30, 0x3A	; 58
 4c8:	f1 e0       	ldi	r31, 0x01	; 1
 4ca:	00 e0       	ldi	r16, 0x00	; 0
 4cc:	80 91 07 01 	lds	r24, 0x0107
 4d0:	e8 0f       	add	r30, r24
 4d2:	f0 1f       	adc	r31, r16
 4d4:	80 81       	ld	r24, Z
 4d6:	00 91 09 01 	lds	r16, 0x0109
 4da:	80 17       	cp	r24, r16
 4dc:	30 f4       	brcc	.+12     	; 0x4ea <_KER_SCH_NEXT8>
 4de:	80 93 09 01 	sts	0x0109, r24
 4e2:	00 91 07 01 	lds	r16, 0x0107
 4e6:	00 93 0a 01 	sts	0x010A, r16

000004ea <_KER_SCH_NEXT8>:
 4ea:	00 91 07 01 	lds	r16, 0x0107
 4ee:	03 95       	inc	r16
 4f0:	10 91 08 01 	lds	r17, 0x0108
 4f4:	01 17       	cp	r16, r17
 4f6:	08 f4       	brcc	.+2      	; 0x4fa <_KER_SCH_EXIT8>
 4f8:	be cf       	rjmp	.-132    	; 0x476 <_KER_SCH_LOOP8>

000004fa <_KER_SCH_EXIT8>:
 4fa:	00 91 0a 01 	lds	r16, 0x010A
 4fe:	00 93 07 01 	sts	0x0107, r16
		KER_CPU_USAGE                                     ;calc cpu usage         ( 26 clocks) 
 502:	00 91 07 01 	lds	r16, 0x0107
 506:	00 23       	and	r16, r16
 508:	29 f0       	breq	.+10     	; 0x514 <_KER_USG_TICK13>
 50a:	00 91 0c 01 	lds	r16, 0x010C
 50e:	03 95       	inc	r16
 510:	00 93 0c 01 	sts	0x010C, r16

00000514 <_KER_USG_TICK13>:
 514:	00 91 0b 01 	lds	r16, 0x010B
 518:	03 95       	inc	r16
 51a:	04 36       	cpi	r16, 0x64	; 100
 51c:	40 f0       	brcs	.+16     	; 0x52e <_KER_USG_UTC_SV13>
 51e:	00 e0       	ldi	r16, 0x00	; 0
 520:	10 91 0c 01 	lds	r17, 0x010C
 524:	10 93 0d 01 	sts	0x010D, r17
 528:	10 e0       	ldi	r17, 0x00	; 0
 52a:	10 93 0c 01 	sts	0x010C, r17

0000052e <_KER_USG_UTC_SV13>:
 52e:	00 93 0b 01 	sts	0x010B, r16
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 532:	ee e0       	ldi	r30, 0x0E	; 14
 534:	f1 e0       	ldi	r31, 0x01	; 1
 536:	00 91 07 01 	lds	r16, 0x0107
 53a:	00 0f       	add	r16, r16
 53c:	e0 0f       	add	r30, r16
 53e:	00 e0       	ldi	r16, 0x00	; 0
 540:	f0 1f       	adc	r31, r16
 542:	00 81       	ld	r16, Z
 544:	11 81       	ldd	r17, Z+1	; 0x01
 546:	0d bf       	out	0x3d, r16	; 61
 548:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
 54a:	ff 91       	pop	r31
 54c:	ef 91       	pop	r30
 54e:	df 91       	pop	r29
 550:	cf 91       	pop	r28
 552:	bf 91       	pop	r27
 554:	af 91       	pop	r26
 556:	9f 91       	pop	r25
 558:	8f 91       	pop	r24
 55a:	7f 91       	pop	r23
 55c:	6f 91       	pop	r22
 55e:	5f 91       	pop	r21
 560:	4f 91       	pop	r20
 562:	3f 91       	pop	r19
 564:	2f 91       	pop	r18
 566:	1f 91       	pop	r17
 568:	0f 91       	pop	r16
 56a:	ff 90       	pop	r15
 56c:	ef 90       	pop	r14
 56e:	df 90       	pop	r13
 570:	cf 90       	pop	r12
 572:	bf 90       	pop	r11
 574:	af 90       	pop	r10
 576:	9f 90       	pop	r9
 578:	8f 90       	pop	r8
 57a:	7f 90       	pop	r7
 57c:	6f 90       	pop	r6
 57e:	5f 90       	pop	r5
 580:	4f 90       	pop	r4
 582:	3f 90       	pop	r3
 584:	2f 90       	pop	r2
 586:	1f 90       	pop	r1
 588:	0f 90       	pop	r0
 58a:	0f be       	out	0x3f, r0	; 63
 58c:	0f 90       	pop	r0
	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 58e:	5d 98       	cbi	0x0b, 5	; 11
		RETI                                              ;return from interrupt  (  4 clocks) 
 590:	18 95       	reti

00000592 <Kernel_SysTick_Reg_Init>:


;;================================SysTick reg init starting=================================;; 
Kernel_SysTick_Reg_Init:                                  ;total 11.5uS @8MHz     ( 92 clocks) 
        ;arg1 -> prescaler R24, arg2 -> reload val R22                                         
        CLI                                               ;disable global int     (  1 clock ) 
 592:	f8 94       	cli
		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 594:	5d 98       	cbi	0x0b, 5	; 11
 596:	55 9a       	sbi	0x0a, 5	; 10
        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 598:	a0 91 22 01 	lds	r26, 0x0122
 59c:	b0 91 23 01 	lds	r27, 0x0123
 5a0:	0d b7       	in	r16, 0x3d	; 61
 5a2:	1e b7       	in	r17, 0x3e	; 62
 5a4:	0d 93       	st	X+, r16
 5a6:	1d 93       	st	X+, r17
 5a8:	ed 93       	st	X+, r30
 5aa:	fd 93       	st	X+, r31
 5ac:	a0 93 22 01 	sts	0x0122, r26
 5b0:	b0 93 23 01 	sts	0x0123, r27
		;clear reg                                                                             
		LDI   R16                , 0x00                   ;set 0x00 to R16        (  1 clock ) 
 5b4:	00 e0       	ldi	r16, 0x00	; 0
		;clear tick counter                                                                    
		STS   KerBase+OFB_TICK0  , R16                    ;clear  KerBase[0]      (  2 clocks) 
 5b6:	00 93 00 01 	sts	0x0100, r16
		STS   KerBase+OFB_TICK1  , R16                    ;clear  KerBase[1]      (  2 clocks) 
 5ba:	00 93 01 01 	sts	0x0101, r16
		STS   KerBase+OFB_TICK2  , R16                    ;clear  KerBase[2]      (  2 clocks) 
 5be:	00 93 02 01 	sts	0x0102, r16
		STS   KerBase+OFB_TICK3  , R16                    ;clear  KerBase[3]      (  2 clocks) 
 5c2:	00 93 03 01 	sts	0x0103, r16
		STS   KerBase+OFB_TICK4  , R16                    ;clear  KerBase[4]      (  2 clocks) 
 5c6:	00 93 04 01 	sts	0x0104, r16
		;clear system registers                                                                
		STS   KerBase+OFB_PRS    , R16                    ;clear  KerBase[5]      (  2 clocks) 
 5ca:	00 93 05 01 	sts	0x0105, r16
		STS   KerBase+OFB_RLD    , R16                    ;clear  KerBase[6]      (  2 clocks) 
 5ce:	00 93 06 01 	sts	0x0106, r16
		STS   KerBase+OFB_TID    , R16                    ;clear  KerBase[7]      (  2 clocks) 
 5d2:	00 93 07 01 	sts	0x0107, r16
		STS   KerBase+OFB_NTSK   , R16                    ;clear  KerBase[8]      (  2 clocks) 
 5d6:	00 93 08 01 	sts	0x0108, r16
		STS   KerBase+OFB_LPR    , R16                    ;clear  KerBase[9]      (  2 clocks) 
 5da:	00 93 09 01 	sts	0x0109, r16
        STS   KerBase+OFB_PTID   , R16                    ;clear  KerBase[10]     (  2 clocks) 
 5de:	00 93 0a 01 	sts	0x010A, r16
		STS   KerBase+OFB_UTC    , R16                    ;clear  KerBase[11]     (  2 clocks) 
 5e2:	00 93 0b 01 	sts	0x010B, r16
		STS   KerBase+OFB_UATC   , R16                    ;clear  KerBase[12]     (  2 clocks) 
 5e6:	00 93 0c 01 	sts	0x010C, r16
		STS   KerBase+OFB_USAGE  , R16                    ;clear  KerBase[13]     (  2 clocks) 
 5ea:	00 93 0d 01 	sts	0x010D, r16
		;clear all timer registers                                                             
		STS   SRTCCR0A           , R16                    ;clear TCCR0A           (  2 clocks) 
 5ee:	00 93 44 00 	sts	0x0044, r16
		STS   SRTCCR0B           , R16                    ;clear TCCR0B           (  2 clocks) 
 5f2:	00 93 45 00 	sts	0x0045, r16
		STS   SRTIMSK0           , R16                    ;clear TIMSK0           (  2 clocks) 
 5f6:	00 93 6e 00 	sts	0x006E, r16
		STS   SRTIFR0            , R16                    ;clear TIFR0            (  2 clocks) 
 5fa:	00 93 35 00 	sts	0x0035, r16
		STS   SROCR0A            , R16                    ;clear OCR0A            (  2 clocks) 
 5fe:	00 93 47 00 	sts	0x0047, r16
		STS   SROCR0B            , R16                    ;clear OCR0B            (  2 clocks) 
 602:	00 93 48 00 	sts	0x0048, r16
		STS   SRTCNT0            , R16                    ;clear TCNT0            (  2 clocks) 
 606:	00 93 46 00 	sts	0x0046, r16
		;save values for future use                                                            
		STS   KerBase+OFB_PRS    , R24                    ;KerBase[5] prescaler   (  2 clocks) 
 60a:	80 93 05 01 	sts	0x0105, r24
		STS   KerBase+OFB_RLD    , R22                    ;KerBase[6] reload val  (  2 clocks) 
 60e:	60 93 06 01 	sts	0x0106, r22
        KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 612:	a0 91 22 01 	lds	r26, 0x0122
 616:	b0 91 23 01 	lds	r27, 0x0123
 61a:	fe 91       	ld	r31, -X
 61c:	ee 91       	ld	r30, -X
 61e:	1e 91       	ld	r17, -X
 620:	0e 91       	ld	r16, -X
 622:	0d bf       	out	0x3d, r16	; 61
 624:	1e bf       	out	0x3e, r17	; 62
 626:	a0 93 22 01 	sts	0x0122, r26
 62a:	b0 93 23 01 	sts	0x0123, r27
		RET                                               ;return from subroutine (  4 clocks) 
 62e:	08 95       	ret

00000630 <Kernel_Task_Create>:


;;===============================kernel task create starting================================;; 
Kernel_Task_Create:                                       ;total 20.38uS @8MHz    (163 clocks) 
        ;func_ptr->R25:R24, task_priority->R22                                                 
        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 630:	a0 91 22 01 	lds	r26, 0x0122
 634:	b0 91 23 01 	lds	r27, 0x0123
 638:	0d b7       	in	r16, 0x3d	; 61
 63a:	1e b7       	in	r17, 0x3e	; 62
 63c:	0d 93       	st	X+, r16
 63e:	1d 93       	st	X+, r17
 640:	ed 93       	st	X+, r30
 642:	fd 93       	st	X+, r31
 644:	a0 93 22 01 	sts	0x0122, r26
 648:	b0 93 23 01 	sts	0x0123, r27
		;across this function, R16 will be used as task_id                                     
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 64c:	00 91 07 01 	lds	r16, 0x0107
		LDI   R17                , 0x00                   ;clear reg              (  1 clock ) 
 650:	10 e0       	ldi	r17, 0x00	; 0
		;set priority to KerSchPr+task_id                                                      
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 652:	ea e3       	ldi	r30, 0x3A	; 58
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 654:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
 656:	e0 0f       	add	r30, r16
		ADC   ZH                 , R17                    ;add high byte+carry    (  1 clock ) 
 658:	f1 1f       	adc	r31, r17
		ST    Z                  , R22                    ;save priority          (  2 clocks) 
 65a:	60 83       	st	Z, r22
		;stack pointer for current task (KerStack + KER_STK_SZ*(task_id+1) - 1) ->stack top    
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 65c:	00 91 07 01 	lds	r16, 0x0107
		MOV   R17                , R16                    ;load task_id           (  1 clock ) 
 660:	10 2f       	mov	r17, r16
		INC   R17                                         ;increment task_id      (  1 clock ) 
 662:	13 95       	inc	r17
		LDI   R18                , KER_STK_SZ             ;load stack size        (  1 clock ) 
 664:	20 e8       	ldi	r18, 0x80	; 128
		MUL   R17                , R18                    ;multiply to get offset (  2 clocks) 
 666:	12 9f       	mul	r17, r18
		MOV   ZL                 , R0                     ;load multiplied low    (  1 clocks) 
 668:	e0 2d       	mov	r30, r0
		MOV   ZH                 , R1                     ;load multiplied high   (  1 clocks) 
 66a:	f1 2d       	mov	r31, r1
		SBIW  ZL                 , 0x01                   ;dec multiplied val-1   (  2 clocks) 
 66c:	31 97       	sbiw	r30, 0x01	; 1
		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 66e:	11 24       	eor	r1, r1
		LDI   R17                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
 670:	18 e5       	ldi	r17, 0x58	; 88
		LDI   R18                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
 672:	21 e0       	ldi	r18, 0x01	; 1
		ADD   ZL                 , R17                    ;add low bytes          (  1 clock ) 
 674:	e1 0f       	add	r30, r17
		ADC   ZH                 , R18                    ;add high bytes+carry   (  1 clock ) 
 676:	f2 1f       	adc	r31, r18
		OUT   IOSPL              , ZL                     ;load SPL               (  1 clock ) 
 678:	ed bf       	out	0x3d, r30	; 61
        OUT   IOSPH              , ZH                     ;load SPH               (  1 clock ) 
 67a:	fe bf       	out	0x3e, r31	; 62
		;function argument directly returns word address                                       
	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
 67c:	8f 93       	push	r24
		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 67e:	9f 93       	push	r25
		;push context to stack of this task                                                    
		KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 680:	0f 92       	push	r0
 682:	0f b6       	in	r0, 0x3f	; 63
 684:	0f 92       	push	r0
 686:	1f 92       	push	r1
 688:	11 24       	eor	r1, r1
 68a:	2f 92       	push	r2
 68c:	3f 92       	push	r3
 68e:	4f 92       	push	r4
 690:	5f 92       	push	r5
 692:	6f 92       	push	r6
 694:	7f 92       	push	r7
 696:	8f 92       	push	r8
 698:	9f 92       	push	r9
 69a:	af 92       	push	r10
 69c:	bf 92       	push	r11
 69e:	cf 92       	push	r12
 6a0:	df 92       	push	r13
 6a2:	ef 92       	push	r14
 6a4:	ff 92       	push	r15
 6a6:	0f 93       	push	r16
 6a8:	1f 93       	push	r17
 6aa:	2f 93       	push	r18
 6ac:	3f 93       	push	r19
 6ae:	4f 93       	push	r20
 6b0:	5f 93       	push	r21
 6b2:	6f 93       	push	r22
 6b4:	7f 93       	push	r23
 6b6:	8f 93       	push	r24
 6b8:	9f 93       	push	r25
 6ba:	af 93       	push	r26
 6bc:	bf 93       	push	r27
 6be:	cf 93       	push	r28
 6c0:	df 93       	push	r29
 6c2:	ef 93       	push	r30
 6c4:	ff 93       	push	r31
		;read stack pointer of current task (necessary when restore)                           
		IN    R17                , IOSPL                  ;read SPL               (  1 clock ) 
 6c6:	1d b7       	in	r17, 0x3d	; 61
        IN    R18                , IOSPH                  ;read SPH               (  1 clock ) 
 6c8:	2e b7       	in	r18, 0x3e	; 62
		;calculate the address where current task's SP will be stored and store SP             
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 6ca:	00 91 07 01 	lds	r16, 0x0107
		MOV   R19                , R16                    ;copy task_id           (  1 clock ) 
 6ce:	30 2f       	mov	r19, r16
		LSL   R19                                         ;left shift to multiply (  1 clock ) 
 6d0:	33 0f       	add	r19, r19
		LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 6d2:	ee e0       	ldi	r30, 0x0E	; 14
		LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 6d4:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R19                    ;add offset to array    (  1 clock ) 
 6d6:	e3 0f       	add	r30, r19
		LDI   R16                , 0x00                   ;clear reg              (  1 clock ) 
 6d8:	00 e0       	ldi	r16, 0x00	; 0
		ADC   ZH                 , R16                    ;add carry if any       (  1 clock ) 
 6da:	f0 1f       	adc	r31, r16
		ST    Z+                 , R17                    ;SPL at KerPSp+offset   (  2 clocks) 
 6dc:	11 93       	st	Z+, r17
		ST    Z                  , R18                    ;SPH at KerPSp+offset   (  2 clocks) 
 6de:	20 83       	st	Z, r18
		;increment task_id                                                                     
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 6e0:	00 91 07 01 	lds	r16, 0x0107
		INC   R16                                         ;increment task_id      (  1 clock ) 
 6e4:	03 95       	inc	r16
		STS   KerBase+OFB_TID    , R16                    ;store task_id          (  2 clocks) 
 6e6:	00 93 07 01 	sts	0x0107, r16
		;increment ntask                                                                       
		LDS   R16                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 6ea:	00 91 08 01 	lds	r16, 0x0108
		INC   R16                                         ;increment ntask        (  1 clock ) 
 6ee:	03 95       	inc	r16
		STS   KerBase+OFB_NTSK   , R16                    ;store ntask            (  2 clocks) 
 6f0:	00 93 08 01 	sts	0x0108, r16
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 6f4:	a0 91 22 01 	lds	r26, 0x0122
 6f8:	b0 91 23 01 	lds	r27, 0x0123
 6fc:	fe 91       	ld	r31, -X
 6fe:	ee 91       	ld	r30, -X
 700:	1e 91       	ld	r17, -X
 702:	0e 91       	ld	r16, -X
 704:	0d bf       	out	0x3d, r16	; 61
 706:	1e bf       	out	0x3e, r17	; 62
 708:	a0 93 22 01 	sts	0x0122, r26
 70c:	b0 93 23 01 	sts	0x0123, r27
		RET                                               ;return from subroutine (  4 clocks) 
 710:	08 95       	ret

00000712 <Kernel_Start_Tasks>:


;;=================================kernel start tasks starting==============================;; 
Kernel_Start_Tasks:                                       ;total 11.38uS @8MHz    ( 91 clocks) 
		;clear task_id                                                                         
		LDI   R16                , 0x00                   ;load task_id           (  2 clocks) 
 712:	00 e0       	ldi	r16, 0x00	; 0
		STS   KerBase+OFB_TID    , R16                    ;store task_id          (  2 clocks) 
 714:	00 93 07 01 	sts	0x0107, r16
		;load ZP with addr+offset                                                              
		LDI   ZL                 , lo8(KerPSP+0x00)       ;fetch ZPL KerPSP->TID0 (  1 clock ) 
 718:	ee e0       	ldi	r30, 0x0E	; 14
		LDI   ZH                 , hi8(KerPSP+0x00)       ;fetch ZPH KerPSP->TID0 (  1 clock ) 
 71a:	f1 e0       	ldi	r31, 0x01	; 1
		;load task_id 0 task's SP                                                              
		LD    R16                , Z+                     ;load val from Z, inc Z (  2 clocks) 
 71c:	01 91       	ld	r16, Z+
		LD    R17                , Z                      ;load val from Z+1      (  2 clocks) 
 71e:	10 81       	ld	r17, Z
        ;set task_id=0 task's SP                                                               
		OUT   IOSPL              , R16                    ;load SPL               (  1 clock ) 
 720:	0d bf       	out	0x3d, r16	; 61
        OUT   IOSPH              , R17                    ;load SPH               (  1 clock ) 
 722:	1e bf       	out	0x3e, r17	; 62
        ;forcefully restore context, in ISR it will be stored automatically                    
		KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
 724:	ff 91       	pop	r31
 726:	ef 91       	pop	r30
 728:	df 91       	pop	r29
 72a:	cf 91       	pop	r28
 72c:	bf 91       	pop	r27
 72e:	af 91       	pop	r26
 730:	9f 91       	pop	r25
 732:	8f 91       	pop	r24
 734:	7f 91       	pop	r23
 736:	6f 91       	pop	r22
 738:	5f 91       	pop	r21
 73a:	4f 91       	pop	r20
 73c:	3f 91       	pop	r19
 73e:	2f 91       	pop	r18
 740:	1f 91       	pop	r17
 742:	0f 91       	pop	r16
 744:	ff 90       	pop	r15
 746:	ef 90       	pop	r14
 748:	df 90       	pop	r13
 74a:	cf 90       	pop	r12
 74c:	bf 90       	pop	r11
 74e:	af 90       	pop	r10
 750:	9f 90       	pop	r9
 752:	8f 90       	pop	r8
 754:	7f 90       	pop	r7
 756:	6f 90       	pop	r6
 758:	5f 90       	pop	r5
 75a:	4f 90       	pop	r4
 75c:	3f 90       	pop	r3
 75e:	2f 90       	pop	r2
 760:	1f 90       	pop	r1
 762:	0f 90       	pop	r0
 764:	0f be       	out	0x3f, r0	; 63
 766:	0f 90       	pop	r0
		;config timer for system tick                                                          
		KER_TIMER_INIT                                    ;init timer, int enable ( 12 clocks) 
 768:	00 91 05 01 	lds	r16, 0x0105
 76c:	10 91 06 01 	lds	r17, 0x0106
 770:	00 93 45 00 	sts	0x0045, r16
 774:	10 93 46 00 	sts	0x0046, r17
 778:	01 e0       	ldi	r16, 0x01	; 1
 77a:	00 93 6e 00 	sts	0x006E, r16
 77e:	78 94       	sei
		;execute return to jump to task0, pushed while task init                               
		RET                                               ;return from subroutine (  4 clocks) 
 780:	08 95       	ret

00000782 <Kernel_Init>:


;;===================================kernel init starting===================================;; 
Kernel_Init:                                              ;total 38.63uS @8MHz    (309 clocks) 
		;save necessary registers and MSP                                                      
		CLR   R1                                          ;gcc expects            (  1 clock ) 
 782:	11 24       	eor	r1, r1
        ;store stack top (for MSP) addr to KerSSZ+OFM_MSPI0:1                                  
		LDI   R16                , lo8(KerSSZ+OFM_MSPS)   ;load low address       (  1 clock ) 
 784:	04 e2       	ldi	r16, 0x24	; 36
		LDI   R17                , hi8(KerSSZ+OFM_MSPS)   ;load high address      (  1 clock ) 
 786:	11 e0       	ldi	r17, 0x01	; 1
        STS   KerSSZ+OFM_MSPI+0  , R16                    ;set mspi to stack top  (  2 clocks) 
 788:	00 93 22 01 	sts	0x0122, r16
		STS   KerSSZ+OFM_MSPI+1  , R17                    ;set mspi to stack top  (  2 clocks) 
 78c:	10 93 23 01 	sts	0x0123, r17
		KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 790:	a0 91 22 01 	lds	r26, 0x0122
 794:	b0 91 23 01 	lds	r27, 0x0123
 798:	0d b7       	in	r16, 0x3d	; 61
 79a:	1e b7       	in	r17, 0x3e	; 62
 79c:	0d 93       	st	X+, r16
 79e:	1d 93       	st	X+, r17
 7a0:	ed 93       	st	X+, r30
 7a2:	fd 93       	st	X+, r31
 7a4:	a0 93 22 01 	sts	0x0122, r26
 7a8:	b0 93 23 01 	sts	0x0123, r27
		;init timer for kernel                                                                 
		LDI   R24                , 0x03                   ;set prescaler          (  1 clock ) 
 7ac:	83 e0       	ldi	r24, 0x03	; 3
		LDI   R22                , 0x82                   ;set reload val         (  1 clock ) 
 7ae:	62 e8       	ldi	r22, 0x82	; 130
		CALL  Kernel_SysTick_Reg_Init                     ;init timer             ( 92 clocks) 
 7b0:	0e 94 c9 02 	call	0x592	; 0x592 <Kernel_SysTick_Reg_Init>
		;create idle task at task_id 0, priority 0xFF (lowest)                                 
		LDI   R24                , lo8(Kernel_Task_Idle)  ;load func addr low     (  1 clock ) 
 7b4:	80 ee       	ldi	r24, 0xE0	; 224
		LDI   R25                , hi8(Kernel_Task_Idle)  ;load func addr high    (  1 clock ) 
 7b6:	97 e0       	ldi	r25, 0x07	; 7
		LSR   R25                                         ;right shift to divide  (  1 clock ) 
 7b8:	96 95       	lsr	r25
		ROR   R24                                         ;rotate right th carry  (  1 clock ) 
 7ba:	87 95       	ror	r24
		LDI   R22                , 0xFF                   ;set max val            (  1 clock ) 
 7bc:	6f ef       	ldi	r22, 0xFF	; 255
		CALL  Kernel_Task_Create                          ;init idle task         (163 clocks) 
 7be:	0e 94 18 03 	call	0x630	; 0x630 <Kernel_Task_Create>
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 7c2:	a0 91 22 01 	lds	r26, 0x0122
 7c6:	b0 91 23 01 	lds	r27, 0x0123
 7ca:	fe 91       	ld	r31, -X
 7cc:	ee 91       	ld	r30, -X
 7ce:	1e 91       	ld	r17, -X
 7d0:	0e 91       	ld	r16, -X
 7d2:	0d bf       	out	0x3d, r16	; 61
 7d4:	1e bf       	out	0x3e, r17	; 62
 7d6:	a0 93 22 01 	sts	0x0122, r26
 7da:	b0 93 23 01 	sts	0x0123, r27
		;execute return to jump to task0, pushed while task init                               
		RET                                               ;return from subroutine (  4 clocks) 
 7de:	08 95       	ret

000007e0 <Kernel_Task_Idle>:
        ;LDI   R24                , 0x00                   ;set UBRRL              (  1 clock ) 
        ;CALL  Debug_Init                                  ;debug init             ( 19 clocks) 
    _IDLE_LOOP:                                           ;forever loop                        
	    ;LDI   R24                , 0x23                   ;load val               (  1 clock ) 
		;CALL  Debug_Tx_Byte                                                                    
		RJMP  _IDLE_LOOP                                  ;return from subroutine (  4 clocks) 
 7e0:	ff cf       	rjmp	.-2      	; 0x7e0 <Kernel_Task_Idle>

000007e2 <Kernel_Task_Sleep>:


;;================================kernel task sleep starting================================;; 
Kernel_Task_Sleep:                                        ;total 35.5uS @8MHz     (284 clocks) 
        ;save current context                                                                  
        KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
 7e2:	0f 92       	push	r0
 7e4:	0f b6       	in	r0, 0x3f	; 63
 7e6:	f8 94       	cli
 7e8:	0f 92       	push	r0
 7ea:	1f 92       	push	r1
 7ec:	11 24       	eor	r1, r1
 7ee:	2f 92       	push	r2
 7f0:	3f 92       	push	r3
 7f2:	4f 92       	push	r4
 7f4:	5f 92       	push	r5
 7f6:	6f 92       	push	r6
 7f8:	7f 92       	push	r7
 7fa:	8f 92       	push	r8
 7fc:	9f 92       	push	r9
 7fe:	af 92       	push	r10
 800:	bf 92       	push	r11
 802:	cf 92       	push	r12
 804:	df 92       	push	r13
 806:	ef 92       	push	r14
 808:	ff 92       	push	r15
 80a:	0f 93       	push	r16
 80c:	1f 93       	push	r17
 80e:	2f 93       	push	r18
 810:	3f 93       	push	r19
 812:	4f 93       	push	r20
 814:	5f 93       	push	r21
 816:	6f 93       	push	r22
 818:	7f 93       	push	r23
 81a:	8f 93       	push	r24
 81c:	9f 93       	push	r25
 81e:	af 93       	push	r26
 820:	bf 93       	push	r27
 822:	cf 93       	push	r28
 824:	df 93       	push	r29
 826:	ef 93       	push	r30
 828:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 82a:	1d b7       	in	r17, 0x3d	; 61
 82c:	2e b7       	in	r18, 0x3e	; 62
 82e:	ee e0       	ldi	r30, 0x0E	; 14
 830:	f1 e0       	ldi	r31, 0x01	; 1
 832:	00 91 07 01 	lds	r16, 0x0107
 836:	00 0f       	add	r16, r16
 838:	e0 0f       	add	r30, r16
 83a:	00 e0       	ldi	r16, 0x00	; 0
 83c:	f0 1f       	adc	r31, r16
 83e:	10 83       	st	Z, r17
 840:	21 83       	std	Z+1, r18	; 0x01
		;create next task wakeup time (args R25:R24)                                           
		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 842:	e4 e4       	ldi	r30, 0x44	; 68
		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 844:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
 846:	00 91 07 01 	lds	r16, 0x0107
 84a:	00 0f       	add	r16, r16
 84c:	e0 0f       	add	r30, r16
 84e:	00 e0       	ldi	r16, 0x00	; 0
 850:	f0 1f       	adc	r31, r16
		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
 852:	80 83       	st	Z, r24
		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 854:	91 83       	std	Z+1, r25	; 0x01
		;update task scheduler status as blocked                                               
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 856:	e0 e3       	ldi	r30, 0x30	; 48
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 858:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
 85a:	00 91 07 01 	lds	r16, 0x0107
 85e:	e0 0f       	add	r30, r16
 860:	00 e0       	ldi	r16, 0x00	; 0
 862:	f0 1f       	adc	r31, r16
        LDI   R16                , TASK_BLOCK             ;block task until cnt=0 (  1 clock ) 
 864:	00 e0       	ldi	r16, 0x00	; 0
		STD   Z+0                , R16                    ;save block flag        (  2 clocks) 
 866:	00 83       	st	Z, r16
		;run scheduler, load next task sp, restore context                                     
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 868:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
 86a:	0f ef       	ldi	r16, 0xFF	; 255
 86c:	00 93 09 01 	sts	0x0109, r16
 870:	00 e0       	ldi	r16, 0x00	; 0
 872:	00 93 0a 01 	sts	0x010A, r16
 876:	98 2f       	mov	r25, r24

00000878 <_KER_SCH_LOOP41>:
 878:	00 93 07 01 	sts	0x0107, r16
 87c:	89 2f       	mov	r24, r25
 87e:	e4 e4       	ldi	r30, 0x44	; 68
 880:	f1 e0       	ldi	r31, 0x01	; 1
 882:	00 91 07 01 	lds	r16, 0x0107
 886:	00 0f       	add	r16, r16
 888:	e0 0f       	add	r30, r16
 88a:	00 e0       	ldi	r16, 0x00	; 0
 88c:	f0 1f       	adc	r31, r16
 88e:	00 81       	ld	r16, Z
 890:	11 81       	ldd	r17, Z+1	; 0x01
 892:	20 2f       	mov	r18, r16
 894:	21 2b       	or	r18, r17
 896:	59 f0       	breq	.+22     	; 0x8ae <_VAL_NULL42>
 898:	81 30       	cpi	r24, 0x01	; 1
 89a:	99 f0       	breq	.+38     	; 0x8c2 <_VAL_NOT_NULL42>
 89c:	21 e0       	ldi	r18, 0x01	; 1
 89e:	02 1b       	sub	r16, r18
 8a0:	20 e0       	ldi	r18, 0x00	; 0
 8a2:	12 0b       	sbc	r17, r18
 8a4:	00 83       	st	Z, r16
 8a6:	11 83       	std	Z+1, r17	; 0x01
 8a8:	20 2f       	mov	r18, r16
 8aa:	21 2b       	or	r18, r17
 8ac:	51 f4       	brne	.+20     	; 0x8c2 <_VAL_NOT_NULL42>

000008ae <_VAL_NULL42>:
 8ae:	e0 e3       	ldi	r30, 0x30	; 48
 8b0:	f1 e0       	ldi	r31, 0x01	; 1
 8b2:	00 91 07 01 	lds	r16, 0x0107
 8b6:	e0 0f       	add	r30, r16
 8b8:	00 e0       	ldi	r16, 0x00	; 0
 8ba:	f0 1f       	adc	r31, r16
 8bc:	81 e0       	ldi	r24, 0x01	; 1
 8be:	80 83       	st	Z, r24
 8c0:	01 c0       	rjmp	.+2      	; 0x8c4 <_EXIT_SLP_TIME42>

000008c2 <_VAL_NOT_NULL42>:
 8c2:	80 e0       	ldi	r24, 0x00	; 0

000008c4 <_EXIT_SLP_TIME42>:
 8c4:	81 30       	cpi	r24, 0x01	; 1
 8c6:	91 f4       	brne	.+36     	; 0x8ec <_KER_SCH_NEXT41>
 8c8:	ea e3       	ldi	r30, 0x3A	; 58
 8ca:	f1 e0       	ldi	r31, 0x01	; 1
 8cc:	00 e0       	ldi	r16, 0x00	; 0
 8ce:	80 91 07 01 	lds	r24, 0x0107
 8d2:	e8 0f       	add	r30, r24
 8d4:	f0 1f       	adc	r31, r16
 8d6:	80 81       	ld	r24, Z
 8d8:	00 91 09 01 	lds	r16, 0x0109
 8dc:	80 17       	cp	r24, r16
 8de:	30 f4       	brcc	.+12     	; 0x8ec <_KER_SCH_NEXT41>
 8e0:	80 93 09 01 	sts	0x0109, r24
 8e4:	00 91 07 01 	lds	r16, 0x0107
 8e8:	00 93 0a 01 	sts	0x010A, r16

000008ec <_KER_SCH_NEXT41>:
 8ec:	00 91 07 01 	lds	r16, 0x0107
 8f0:	03 95       	inc	r16
 8f2:	10 91 08 01 	lds	r17, 0x0108
 8f6:	01 17       	cp	r16, r17
 8f8:	08 f4       	brcc	.+2      	; 0x8fc <_KER_SCH_EXIT41>
 8fa:	be cf       	rjmp	.-132    	; 0x878 <_KER_SCH_LOOP41>

000008fc <_KER_SCH_EXIT41>:
 8fc:	00 91 0a 01 	lds	r16, 0x010A
 900:	00 93 07 01 	sts	0x0107, r16
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 904:	ee e0       	ldi	r30, 0x0E	; 14
 906:	f1 e0       	ldi	r31, 0x01	; 1
 908:	00 91 07 01 	lds	r16, 0x0107
 90c:	00 0f       	add	r16, r16
 90e:	e0 0f       	add	r30, r16
 910:	00 e0       	ldi	r16, 0x00	; 0
 912:	f0 1f       	adc	r31, r16
 914:	00 81       	ld	r16, Z
 916:	11 81       	ldd	r17, Z+1	; 0x01
 918:	0d bf       	out	0x3d, r16	; 61
 91a:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 91c:	ff 91       	pop	r31
 91e:	ef 91       	pop	r30
 920:	df 91       	pop	r29
 922:	cf 91       	pop	r28
 924:	bf 91       	pop	r27
 926:	af 91       	pop	r26
 928:	9f 91       	pop	r25
 92a:	8f 91       	pop	r24
 92c:	7f 91       	pop	r23
 92e:	6f 91       	pop	r22
 930:	5f 91       	pop	r21
 932:	4f 91       	pop	r20
 934:	3f 91       	pop	r19
 936:	2f 91       	pop	r18
 938:	1f 91       	pop	r17
 93a:	0f 91       	pop	r16
 93c:	ff 90       	pop	r15
 93e:	ef 90       	pop	r14
 940:	df 90       	pop	r13
 942:	cf 90       	pop	r12
 944:	bf 90       	pop	r11
 946:	af 90       	pop	r10
 948:	9f 90       	pop	r9
 94a:	8f 90       	pop	r8
 94c:	7f 90       	pop	r7
 94e:	6f 90       	pop	r6
 950:	5f 90       	pop	r5
 952:	4f 90       	pop	r4
 954:	3f 90       	pop	r3
 956:	2f 90       	pop	r2
 958:	1f 90       	pop	r1
 95a:	0f 90       	pop	r0
 95c:	0f be       	out	0x3f, r0	; 63
 95e:	0f 90       	pop	r0
 960:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
 962:	08 95       	ret

00000964 <Kernel_Task_Sleep_Time_Get>:


;;===========================kernel task sleep time get starting============================;; 
Kernel_Task_Sleep_Time_Get:                               ;total 1.88uS @8MHz     ( 15 clocks) 
		;get remaining sleep time (ms), arg R24, return R25:R24                                
		MOV   R16                , R24                    ;copy                   (  1 clock ) 
 964:	08 2f       	mov	r16, r24
		LSL   R16                                         ;x2                     (  1 clock ) 
 966:	00 0f       	add	r16, r16
		LDI   R30                , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 968:	e4 e4       	ldi	r30, 0x44	; 68
		LDI   R31                , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 96a:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 96c:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 96e:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 970:	f0 1f       	adc	r31, r16
		LD    R24                , Z+                     ;load sleep time        (  2 clocks) 
 972:	81 91       	ld	r24, Z+
		LD    R25                , Z                      ;load sleep time        (  2 clocks) 
 974:	90 81       	ld	r25, Z
		RET                                               ;return from subroutine (  4 clocks) 
 976:	08 95       	ret

00000978 <Kernel_Task_Status_Get>:


;;==============================kernel task status get starting=============================;; 
Kernel_Task_Status_Get:                                   ;total 1.50uS @8MHz     ( 12 clocks) 
		;get task status ->ready/blocked, arg R24, return R24                                  
		MOV   R16                , R24                    ;copy                   (  1 clock ) 
 978:	08 2f       	mov	r16, r24
		LDI   R30                , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 97a:	e0 e3       	ldi	r30, 0x30	; 48
		LDI   R31                , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 97c:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 97e:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 980:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 982:	f0 1f       	adc	r31, r16
		LD    R24                , Z                      ;load task status       (  2 clocks) 
 984:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 986:	08 95       	ret

00000988 <Kernel_NTask_Get>:



;;================================kernel ntask get starting=================================;; 
Kernel_NTask_Get:                                         ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                 , KerBase+OFB_NTSK      ;load ntask             (  2 clock ) 
 988:	80 91 08 01 	lds	r24, 0x0108
		RET                                               ;return from subroutine (  4 clocks) 
 98c:	08 95       	ret

0000098e <Kernel_Task_Prio_Get>:


;;=============================kernel task priority get starting============================;; 
Kernel_Task_Prio_Get:                                     ;total 1.38uS @8MHz     ( 11 clocks) 
		;get priority of the task id, arg (task_id->R24), return R24                           
		MOV   R16                , R24                    ;copy task_id           (  1 clock ) 
 98e:	08 2f       	mov	r16, r24
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 990:	ea e3       	ldi	r30, 0x3A	; 58
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 992:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
 994:	e0 0f       	add	r30, r16
		ADC   ZH                 , R1                     ;add high byte+carry    (  1 clock ) 
 996:	f1 1d       	adc	r31, r1
		LD    R24                , Z                      ;load priority          (  2 clocks) 
 998:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 99a:	08 95       	ret

0000099c <Kernel_Lowest_Prio_Get>:


;;============================kernel lowest priority get starting===========================;; 
Kernel_Lowest_Prio_Get:                                   ;total 0.75uS @8MHz     (  6 clocks) 
		;get lowest priority, return R24                                                       
		LDS   R24                , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
 99c:	80 91 09 01 	lds	r24, 0x0109
		RET                                               ;return from subroutine (  4 clocks) 
 9a0:	08 95       	ret

000009a2 <Kernel_High_Prio_Task_ID_Get>:


;;===========================kernel high priority task id starting==========================;; 
Kernel_High_Prio_Task_ID_Get:                             ;total 0.88uS @8MHz     (  7 clocks) 
		;internal idle task id = 0, app task start from task id 1, return R24                  
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 9a2:	80 91 0a 01 	lds	r24, 0x010A
		DEC   R24                                         ;decrement by 1         (  1 clock ) 
 9a6:	8a 95       	dec	r24
		RET                                               ;return from subroutine (  4 clocks) 
 9a8:	08 95       	ret

000009aa <Kernel_Abs_High_Prio_Task_ID_Get>:


;;=========================kernel abs high priority task id starting========================;; 
Kernel_Abs_High_Prio_Task_ID_Get:                         ;total 0.75uS @8MHz     (  6 clocks) 
		;get highest priority task id, return R24                                              
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 9aa:	80 91 0a 01 	lds	r24, 0x010A
		RET                                               ;return from subroutine (  4 clocks) 
 9ae:	08 95       	ret

000009b0 <Kernel_CPU_Usage_Get>:


;;================================kernel cpu usage get starting=============================;; 
Kernel_CPU_Usage_Get:                                     ;total 0.75uS @8MHz     (  6 clocks) 
		;get cpu usage, return R24                                                             
		LDS   R24                , KerBase+OFB_USAGE      ;load cpu usage         (  2 clocks) 
 9b0:	80 91 0d 01 	lds	r24, 0x010D
		RET                                               ;return from subroutine (  4 clocks) 
 9b4:	08 95       	ret

000009b6 <Debug_Init>:


;;===================================debug init starting====================================;; 
Debug_Init:                                               ;total 2.38uS @8MHz     ( 19 clocks) 
        ;init registers for UART0 (Arg R25:R24->UBRRH:UBRRL)                                   
		LDI   R16                , (1<<1)                 ;mask U2x               (  1 clock ) 
 9b6:	02 e0       	ldi	r16, 0x02	; 2
		STS   SRUCSR0A           , R16                    ;load val to UCSR0A     (  2 clocks) 
 9b8:	00 93 c0 00 	sts	0x00C0, r16
		MOV   R16                , R25                    ;copy R25->baud rate H  (  1 clock ) 
 9bc:	09 2f       	mov	r16, r25
		STS   SRUBRR0H           , R16                    ;load val to UBRR0H     (  2 clocks) 
 9be:	00 93 c5 00 	sts	0x00C5, r16
		MOV   R16                , R24                    ;copy R24->baud rate L  (  1 clock ) 
 9c2:	08 2f       	mov	r16, r24
		STS   SRUBRR0L           , R16                    ;load val to UBRR0L     (  2 clocks) 
 9c4:	00 93 c4 00 	sts	0x00C4, r16
		LDI   R16                , (1<<1)|(1<<2)          ;config 8 data bit      (  1 clock ) 
 9c8:	06 e0       	ldi	r16, 0x06	; 6
		STS   SRUCSR0C           , R16                    ;load val to UCSR0C     (  2 clocks) 
 9ca:	00 93 c2 00 	sts	0x00C2, r16
		LDI   R16                , (1<<3)                 ;enable tx              (  1 clock ) 
 9ce:	08 e0       	ldi	r16, 0x08	; 8
		STS   SRUCSR0B           , R16                    ;load val to UCSR0B     (  2 clocks) 
 9d0:	00 93 c1 00 	sts	0x00C1, r16
        RET                                               ;return from subroutine (  4 clocks) 
 9d4:	08 95       	ret

000009d6 <Debug_Tx_Byte>:


;;====================================debug tx starting=====================================;; 
Debug_Tx_Byte:                                            ;total 2.00uS+LT @8MHz  ( 16 clocks) 
		;write single byte to data register (Arg R24)                                          
		PUSH  R16                                         ;save reg               (  2 clocks) 
 9d6:	0f 93       	push	r16
		STS   SRUDR0             , R24                    ;load val to UDR0       (  2 clocks) 
 9d8:	80 93 c6 00 	sts	0x00C6, r24

000009dc <__UDRE0_CLEARED>:
                                                                                               
    __UDRE0_CLEARED:                                      ;undefined loop wrt ck               
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16     (  2 clocks) 
 9dc:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x05                   ;skip if UDRE0 is set   (  2 clocks) 
 9e0:	05 ff       	sbrs	r16, 5
		RJMP  __UDRE0_CLEARED                             ;wait until UDRE0 is set(  2 clocks) 
 9e2:	fc cf       	rjmp	.-8      	; 0x9dc <__UDRE0_CLEARED>
		POP   R16                                         ;restore reg            (  2 clocks) 
 9e4:	0f 91       	pop	r16
        RET                                               ;return from subroutine (  4 clocks) 
 9e6:	08 95       	ret

000009e8 <Debug_Tx_Word>:


;;==================================debug tx word starting==================================;; 
Debug_Tx_Word:                                            ;total 2.00uS+LT @8MHz  ( 16 clocks) 
		;write 2 bytes, (Arg R24, R25), Args retained                                          
		PUSH  R24                                         ;save reg               (  2 clocks) 
 9e8:	8f 93       	push	r24
		MOV   R24                , R25                    ;copy reg               (  1 clock ) 
 9ea:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte                               ;send via uart          ( 21 clocks) 
 9ec:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
        POP   R24                                         ;restore reg            (  2 clocks) 
 9f0:	8f 91       	pop	r24
		CALL  Debug_Tx_Byte                               ;send via uart          ( 21 clocks) 
 9f2:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Debug_Tx_Byte>
        RET                                               ;return from subroutine (  4 clocks) 
 9f6:	08 95       	ret

000009f8 <Debug_Tx_Byte_Conf>:


;;================================debug tx confirm starting=================================;; 
Debug_Tx_Byte_Conf:                                       ;total 2.63uS+LT @8MHz  ( 21 clocks) 
        ;write 1 byte, (Arg R24), Args retained                                                
		PUSH  R16                                         ;save reg               (  2 clocks) 
 9f8:	0f 93       	push	r16
		STS   SRUDR0             , R24                    ;load val to UDR0,      (  2 clocks) 
 9fa:	80 93 c6 00 	sts	0x00C6, r24

000009fe <__TXC0_CLEARED>:
    __TXC0_CLEARED:                                                                            
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,    (  2 clocks) 
 9fe:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x06                   ;skip if TXC0 is set,   (  2 clocks) 
 a02:	06 ff       	sbrs	r16, 6
		RJMP  __TXC0_CLEARED                              ;wait until TXC0 is set (  2 clocks) 
 a04:	fc cf       	rjmp	.-8      	; 0x9fe <__TXC0_CLEARED>
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,    (  2 clocks) 
 a06:	00 91 c0 00 	lds	r16, 0x00C0
		ORI   R16                , (1<<6)                 ;mask bit 6,            (  1 clock ) 
 a0a:	00 64       	ori	r16, 0x40	; 64
		STS   SRUCSR0A           , R16                    ;write reg with bit msk (  2 clocks) 
 a0c:	00 93 c0 00 	sts	0x00C0, r16
		POP   R16                                         ;restore reg            (  2 clocks) 
 a10:	0f 91       	pop	r16
        RET                                               ;return from subroutine (  4 clocks) 
 a12:	08 95       	ret

00000a14 <Debug_Tx_Word_Conf>:


;;==============================debug tx word confirm starting==============================;; 
Debug_Tx_Word_Conf:                                       ;total 6.38uS+LT @8MHz  ( 51 clocks) 
        ;write 2 bytes, (Arg R24, R25), Args retained                                          
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 a14:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <Debug_Tx_Byte_Conf>
		PUSH  R24                                         ;save reg               (  2 clocks) 
 a18:	8f 93       	push	r24
		MOV   R24                , R25                    ;copy R25 to R24        (  1 clock ) 
 a1a:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 a1c:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <Debug_Tx_Byte_Conf>
		POP   R24                                         ;restore reg            (  2 clocks) 
 a20:	8f 91       	pop	r24
        RET                                               ;return from subroutine (  4 clocks) 
 a22:	08 95       	ret

00000a24 <Debug_Tx_DWord_Conf>:


;;==============================debug tx dword confirm starting=============================;; 
Debug_Tx_DWord_Conf:                                      ;total 12.38uS+LT @8MHz ( 99 clocks) 
        ;write 4 bytes, (Arg R22-R25), Args retained                                           
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks) 
 a24:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R22                    ;copy R22 to R24          (1 clock ) 
 a28:	86 2f       	mov	r24, r22
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 a2a:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <Debug_Tx_Byte_Conf>
		MOV   R24                , R23                    ;copy R23 to R24          (1 clock ) 
 a2e:	87 2f       	mov	r24, r23
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 a30:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24              (2 clocks) 
 a34:	80 91 4a 00 	lds	r24, 0x004A
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 a38:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <Debug_Tx_Byte_Conf>
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks) 
 a3c:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R25                    ;copy R22 to R24          (1 clock ) 
 a40:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 a42:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24 val,         (2 clocks) 
 a46:	80 91 4a 00 	lds	r24, 0x004A
        RET                                               ;return from subroutine,  (4 clocks) 
 a4a:	08 95       	ret

00000a4c <Debug_Tx_From_RAM>:


;;=============================debug tx confirm from ram starting===========================;; 
Debug_Tx_From_RAM:                                        ;total 4.38uS+LT @8MHz  ( 35 clocks) 
        ;print data from RAM address (Arg R24-R25)                                             
		MOV   R16                , R30                    ;copy R30 to R16          (1 clock ) 
 a4c:	0e 2f       	mov	r16, r30
		MOV   R17                , R31                    ;copy R31 to R17          (1 clock ) 
 a4e:	1f 2f       	mov	r17, r31
		MOV   R18                , R24                    ;copy R24 to R18          (1 clock ) 
 a50:	28 2f       	mov	r18, r24
		MOV   R30                , R24                    ;copy R22 to R24          (1 clock ) 
 a52:	e8 2f       	mov	r30, r24
		MOV   R31                , R25                    ;copy R22 to R24          (1 clock ) 
 a54:	f9 2f       	mov	r31, r25
		LD    R24                , Z                      ;load val to R24          (2 clocks) 
 a56:	80 81       	ld	r24, Z
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 a58:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <Debug_Tx_Byte_Conf>
		MOV   R30                , R16                    ;copy R16 to R30          (1 clock ) 
 a5c:	e0 2f       	mov	r30, r16
		MOV   R31                , R17                    ;copy R17 to R31          (1 clock ) 
 a5e:	f1 2f       	mov	r31, r17
		MOV   R24                , R18                    ;copy R18 to R24          (1 clock ) 
 a60:	82 2f       	mov	r24, r18
        RET                                               ;return from subroutine,  (4 clocks) 
 a62:	08 95       	ret

00000a64 <Debug_Tx_RAM_Area>:

;;=============================debug tx confirm ram area starting===========================;; 
Debug_Tx_RAM_Area:                                        ;5.5uS+LT x R22 @8MHz   ( 44 clocks) 
        ;print data from RAM address (arguments R24:R25, R22)                                  
	__DUMP_BYTES:                                                                              
	    CALL  Debug_Tx_From_RAM                           ;send via uart from ram              
 a64:	0e 94 26 05 	call	0xa4c	; 0xa4c <Debug_Tx_From_RAM>
		SUBI  R24                , 0x01                   ;decrement from LSByte               
 a68:	81 50       	subi	r24, 0x01	; 1
        SBCI  R25                , 0x00                   ;decrement if carry                  
 a6a:	90 40       	sbci	r25, 0x00	; 0
		SUBI  R22                , 0x01                   ;decrement                           
 a6c:	61 50       	subi	r22, 0x01	; 1
		BRNE  __DUMP_BYTES                                                                     
 a6e:	d1 f7       	brne	.-12     	; 0xa64 <Debug_Tx_RAM_Area>
        RET                                               ;return from subroutine,  (4 clocks) 
 a70:	08 95       	ret

00000a72 <_exit>:
 a72:	f8 94       	cli

00000a74 <__stop_program>:
 a74:	ff cf       	rjmp	.-2      	; 0xa74 <__stop_program>
