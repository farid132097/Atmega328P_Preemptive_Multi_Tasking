
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000758  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000546  00800100  00800100  000007cc  2**0
                  ALLOC
  2 .stab         00000ab0  00000000  00000000  000007cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000006e  00000000  00000000  0000127c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  000012ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000008d  00000000  00000000  0000132a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000190  00000000  00000000  000013b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000cf  00000000  00000000  00001547  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000212  00000000  00000000  00001616  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00001828  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000105  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ce  00000000  00000000  000019bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 5f 01 	jmp	0x2be	; 0x2be <__vector_16>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	00 00       	nop
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 00       	nop
  76:	00 00       	nop
  78:	00 00       	nop
  7a:	00 00       	nop
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 00       	nop
  82:	00 00       	nop
  84:	00 00       	nop
  86:	00 00       	nop
  88:	1a c1       	rjmp	.+564    	; 0x2be <__vector_16>

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61
  96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  9a:	0c 94 aa 03 	jmp	0x754	; 0x754 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:


int main(void) {
    
	
	Kernel_SysTick_Reg_Init(0x03, 0x82);
  a2:	83 e0       	ldi	r24, 0x03	; 3
  a4:	62 e8       	ldi	r22, 0x82	; 130
  a6:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <Kernel_SysTick_Reg_Init>
	
	Kernel_Task_Init(Tasks_Task0, 0, 0);
  aa:	8d e4       	ldi	r24, 0x4D	; 77
  ac:	91 e0       	ldi	r25, 0x01	; 1
  ae:	60 e0       	ldi	r22, 0x00	; 0
  b0:	40 e0       	ldi	r20, 0x00	; 0
  b2:	0e 94 55 02 	call	0x4aa	; 0x4aa <Kernel_Task_Init>
	Kernel_Task_Init(Tasks_Task1, 1, 0);
  b6:	8b e3       	ldi	r24, 0x3B	; 59
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	61 e0       	ldi	r22, 0x01	; 1
  bc:	40 e0       	ldi	r20, 0x00	; 0
  be:	0e 94 55 02 	call	0x4aa	; 0x4aa <Kernel_Task_Init>
	Kernel_Task_Init(Tasks_Task2, 2, 0);
  c2:	8b e2       	ldi	r24, 0x2B	; 43
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	62 e0       	ldi	r22, 0x02	; 2
  c8:	40 e0       	ldi	r20, 0x00	; 0
  ca:	0e 94 55 02 	call	0x4aa	; 0x4aa <Kernel_Task_Init>
	Kernel_Task_Init(Tasks_Task3, 3, 0);
  ce:	8f e1       	ldi	r24, 0x1F	; 31
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	63 e0       	ldi	r22, 0x03	; 3
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	0e 94 55 02 	call	0x4aa	; 0x4aa <Kernel_Task_Init>
	Kernel_Task_Init(Tasks_Task4, 4, 0);
  da:	83 e1       	ldi	r24, 0x13	; 19
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	64 e0       	ldi	r22, 0x04	; 4
  e0:	40 e0       	ldi	r20, 0x00	; 0
  e2:	0e 94 55 02 	call	0x4aa	; 0x4aa <Kernel_Task_Init>
	Kernel_Start_Tasks();
  e6:	0e 94 ab 02 	call	0x556	; 0x556 <Kernel_Start_Tasks>
  ea:	ff cf       	rjmp	.-2      	; 0xea <SRUDR0+0x24>

000000ec <Tasks_Delay>:
#include "tasks.h"
#include "debug.h"



void Tasks_Delay(uint16_t val){
  ec:	5f 92       	push	r5
  ee:	6f 92       	push	r6
  f0:	7f 92       	push	r7
  f2:	8f 92       	push	r8
  f4:	9f 92       	push	r9
  f6:	af 92       	push	r10
  f8:	bf 92       	push	r11
  fa:	cf 92       	push	r12
  fc:	df 92       	push	r13
  fe:	ef 92       	push	r14
 100:	ff 92       	push	r15
 102:	0f 93       	push	r16
 104:	1f 93       	push	r17
 106:	8c 01       	movw	r16, r24
  uint64_t curr = 0, next = 0;
  curr = Kernel_SysTick_Val_Get();
 108:	0e 94 1d 02 	call	0x43a	; 0x43a <Kernel_SysTick_Val_Get>
 10c:	62 2e       	mov	r6, r18
 10e:	83 2e       	mov	r8, r19
 110:	c4 2e       	mov	r12, r20
 112:	e5 2e       	mov	r14, r21
 114:	f6 2e       	mov	r15, r22
 116:	b7 2f       	mov	r27, r23
  next = curr + val;
 118:	20 e0       	ldi	r18, 0x00	; 0
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	40 e0       	ldi	r20, 0x00	; 0
 11e:	50 e0       	ldi	r21, 0x00	; 0
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	50 2e       	mov	r5, r16
 126:	56 0c       	add	r5, r6
 128:	a1 e0       	ldi	r26, 0x01	; 1
 12a:	50 16       	cp	r5, r16
 12c:	08 f0       	brcs	.+2      	; 0x130 <Tasks_Delay+0x44>
 12e:	a0 e0       	ldi	r26, 0x00	; 0
 130:	e1 2f       	mov	r30, r17
 132:	e8 0d       	add	r30, r8
 134:	f1 e0       	ldi	r31, 0x01	; 1
 136:	e1 17       	cp	r30, r17
 138:	08 f0       	brcs	.+2      	; 0x13c <Tasks_Delay+0x50>
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	7a 2e       	mov	r7, r26
 13e:	7e 0e       	add	r7, r30
 140:	a1 e0       	ldi	r26, 0x01	; 1
 142:	7e 16       	cp	r7, r30
 144:	08 f0       	brcs	.+2      	; 0x148 <Tasks_Delay+0x5c>
 146:	a0 e0       	ldi	r26, 0x00	; 0
 148:	fa 2b       	or	r31, r26
 14a:	e1 e0       	ldi	r30, 0x01	; 1
 14c:	c2 16       	cp	r12, r18
 14e:	08 f0       	brcs	.+2      	; 0x152 <Tasks_Delay+0x66>
 150:	e0 e0       	ldi	r30, 0x00	; 0
 152:	9f 2e       	mov	r9, r31
 154:	9c 0c       	add	r9, r12
 156:	f1 e0       	ldi	r31, 0x01	; 1
 158:	9c 14       	cp	r9, r12
 15a:	08 f0       	brcs	.+2      	; 0x15e <Tasks_Delay+0x72>
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	ef 2b       	or	r30, r31
 160:	f1 e0       	ldi	r31, 0x01	; 1
 162:	e3 16       	cp	r14, r19
 164:	08 f0       	brcs	.+2      	; 0x168 <Tasks_Delay+0x7c>
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	ae 2e       	mov	r10, r30
 16a:	ae 0c       	add	r10, r14
 16c:	e1 e0       	ldi	r30, 0x01	; 1
 16e:	ae 14       	cp	r10, r14
 170:	08 f0       	brcs	.+2      	; 0x174 <Tasks_Delay+0x88>
 172:	e0 e0       	ldi	r30, 0x00	; 0
 174:	fe 2b       	or	r31, r30
 176:	e1 e0       	ldi	r30, 0x01	; 1
 178:	f4 16       	cp	r15, r20
 17a:	08 f0       	brcs	.+2      	; 0x17e <Tasks_Delay+0x92>
 17c:	e0 e0       	ldi	r30, 0x00	; 0
 17e:	bf 2e       	mov	r11, r31
 180:	bf 0c       	add	r11, r15
 182:	f1 e0       	ldi	r31, 0x01	; 1
 184:	bf 14       	cp	r11, r15
 186:	08 f0       	brcs	.+2      	; 0x18a <Tasks_Delay+0x9e>
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	ef 2b       	or	r30, r31
 18c:	f1 e0       	ldi	r31, 0x01	; 1
 18e:	b5 17       	cp	r27, r21
 190:	08 f0       	brcs	.+2      	; 0x194 <Tasks_Delay+0xa8>
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	de 2e       	mov	r13, r30
 196:	db 0e       	add	r13, r27
 198:	e1 e0       	ldi	r30, 0x01	; 1
 19a:	db 16       	cp	r13, r27
 19c:	08 f0       	brcs	.+2      	; 0x1a0 <Tasks_Delay+0xb4>
 19e:	e0 e0       	ldi	r30, 0x00	; 0
 1a0:	fe 2b       	or	r31, r30
 1a2:	a1 e0       	ldi	r26, 0x01	; 1
 1a4:	86 17       	cp	r24, r22
 1a6:	08 f0       	brcs	.+2      	; 0x1aa <Tasks_Delay+0xbe>
 1a8:	a0 e0       	ldi	r26, 0x00	; 0
 1aa:	0f 2f       	mov	r16, r31
 1ac:	08 0f       	add	r16, r24
 1ae:	e1 e0       	ldi	r30, 0x01	; 1
 1b0:	08 17       	cp	r16, r24
 1b2:	08 f0       	brcs	.+2      	; 0x1b6 <Tasks_Delay+0xca>
 1b4:	e0 e0       	ldi	r30, 0x00	; 0
 1b6:	1a 2f       	mov	r17, r26
 1b8:	1e 2b       	or	r17, r30
 1ba:	19 0f       	add	r17, r25
 1bc:	08 c0       	rjmp	.+16     	; 0x1ce <Tasks_Delay+0xe2>
  while( curr < next ){
    curr = Kernel_SysTick_Val_Get();
 1be:	0e 94 1d 02 	call	0x43a	; 0x43a <Kernel_SysTick_Val_Get>
 1c2:	62 2e       	mov	r6, r18
 1c4:	83 2e       	mov	r8, r19
 1c6:	c4 2e       	mov	r12, r20
 1c8:	e5 2e       	mov	r14, r21
 1ca:	f6 2e       	mov	r15, r22
 1cc:	b7 2f       	mov	r27, r23

void Tasks_Delay(uint16_t val){
  uint64_t curr = 0, next = 0;
  curr = Kernel_SysTick_Val_Get();
  next = curr + val;
  while( curr < next ){
 1ce:	91 17       	cp	r25, r17
 1d0:	b0 f3       	brcs	.-20     	; 0x1be <Tasks_Delay+0xd2>
 1d2:	19 17       	cp	r17, r25
 1d4:	d1 f4       	brne	.+52     	; 0x20a <Tasks_Delay+0x11e>
 1d6:	80 17       	cp	r24, r16
 1d8:	90 f3       	brcs	.-28     	; 0x1be <Tasks_Delay+0xd2>
 1da:	08 17       	cp	r16, r24
 1dc:	b1 f4       	brne	.+44     	; 0x20a <Tasks_Delay+0x11e>
 1de:	bd 15       	cp	r27, r13
 1e0:	70 f3       	brcs	.-36     	; 0x1be <Tasks_Delay+0xd2>
 1e2:	db 16       	cp	r13, r27
 1e4:	91 f4       	brne	.+36     	; 0x20a <Tasks_Delay+0x11e>
 1e6:	fb 14       	cp	r15, r11
 1e8:	50 f3       	brcs	.-44     	; 0x1be <Tasks_Delay+0xd2>
 1ea:	bf 14       	cp	r11, r15
 1ec:	71 f4       	brne	.+28     	; 0x20a <Tasks_Delay+0x11e>
 1ee:	ea 14       	cp	r14, r10
 1f0:	30 f3       	brcs	.-52     	; 0x1be <Tasks_Delay+0xd2>
 1f2:	ae 14       	cp	r10, r14
 1f4:	51 f4       	brne	.+20     	; 0x20a <Tasks_Delay+0x11e>
 1f6:	c9 14       	cp	r12, r9
 1f8:	10 f3       	brcs	.-60     	; 0x1be <Tasks_Delay+0xd2>
 1fa:	9c 14       	cp	r9, r12
 1fc:	31 f4       	brne	.+12     	; 0x20a <Tasks_Delay+0x11e>
 1fe:	87 14       	cp	r8, r7
 200:	f0 f2       	brcs	.-68     	; 0x1be <Tasks_Delay+0xd2>
 202:	78 14       	cp	r7, r8
 204:	11 f4       	brne	.+4      	; 0x20a <Tasks_Delay+0x11e>
 206:	65 14       	cp	r6, r5
 208:	d0 f2       	brcs	.-76     	; 0x1be <Tasks_Delay+0xd2>
    curr = Kernel_SysTick_Val_Get();
  }
}
 20a:	1f 91       	pop	r17
 20c:	0f 91       	pop	r16
 20e:	ff 90       	pop	r15
 210:	ef 90       	pop	r14
 212:	df 90       	pop	r13
 214:	cf 90       	pop	r12
 216:	bf 90       	pop	r11
 218:	af 90       	pop	r10
 21a:	9f 90       	pop	r9
 21c:	8f 90       	pop	r8
 21e:	7f 90       	pop	r7
 220:	6f 90       	pop	r6
 222:	5f 90       	pop	r5
 224:	08 95       	ret

00000226 <Tasks_Task4>:
  }
}

void Tasks_Task4(void){
  
  Debug_Init(0);
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 42 03 	call	0x684	; 0x684 <Debug_Init>
  
  while(1){
    
	Debug_Print_TSK(4);
 22e:	84 e0       	ldi	r24, 0x04	; 4
 230:	0e 94 9e 03 	call	0x73c	; 0x73c <Debug_Print_TSK>
	Tasks_Delay(55);
 234:	87 e3       	ldi	r24, 0x37	; 55
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 76 00 	call	0xec	; 0xec <Tasks_Delay>
 23c:	f8 cf       	rjmp	.-16     	; 0x22e <Tasks_Task4+0x8>

0000023e <Tasks_Task3>:
  }
}

void Tasks_Task3(void){
  
  Debug_Init(0);
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 42 03 	call	0x684	; 0x684 <Debug_Init>
  
  while(1){
    
	Debug_Print_TSK(3);
 246:	83 e0       	ldi	r24, 0x03	; 3
 248:	0e 94 9e 03 	call	0x73c	; 0x73c <Debug_Print_TSK>
	Tasks_Delay(42);
 24c:	8a e2       	ldi	r24, 0x2A	; 42
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 76 00 	call	0xec	; 0xec <Tasks_Delay>
 254:	f8 cf       	rjmp	.-16     	; 0x246 <Tasks_Task3+0x8>

00000256 <Tasks_Task2>:
  }
}

void Tasks_Task2(void){
  
  Debug_Init(0);
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 42 03 	call	0x684	; 0x684 <Debug_Init>
  DDRD |= (1<<7);
 25e:	57 9a       	sbi	0x0a, 7	; 10
  
  while(1){
    
    PORTD ^= (1<<7);
 260:	8b b1       	in	r24, 0x0b	; 11
 262:	80 58       	subi	r24, 0x80	; 128
 264:	8b b9       	out	0x0b, r24	; 11
	Debug_Print_TSK(2);
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	0e 94 9e 03 	call	0x73c	; 0x73c <Debug_Print_TSK>
	Tasks_Delay(37);
 26c:	85 e2       	ldi	r24, 0x25	; 37
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 76 00 	call	0xec	; 0xec <Tasks_Delay>
 274:	f5 cf       	rjmp	.-22     	; 0x260 <Tasks_Task2+0xa>

00000276 <Tasks_Task1>:
	Tasks_Delay(12);
	
  }
}

void Tasks_Task1(void){
 276:	1f 93       	push	r17
  
  Debug_Init(0);
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 42 03 	call	0x684	; 0x684 <Debug_Init>
  DDRD |= (1<<6);
 280:	56 9a       	sbi	0x0a, 6	; 10
  
  while(1){
    
    PORTD ^= (1<<6);
 282:	10 e4       	ldi	r17, 0x40	; 64
 284:	8b b1       	in	r24, 0x0b	; 11
 286:	81 27       	eor	r24, r17
 288:	8b b9       	out	0x0b, r24	; 11
	Debug_Print_TSK(1);
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	0e 94 9e 03 	call	0x73c	; 0x73c <Debug_Print_TSK>
	Tasks_Delay(26);
 290:	8a e1       	ldi	r24, 0x1A	; 26
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 76 00 	call	0xec	; 0xec <Tasks_Delay>
 298:	f5 cf       	rjmp	.-22     	; 0x284 <Tasks_Task1+0xe>

0000029a <Tasks_Task0>:
  while( curr < next ){
    curr = Kernel_SysTick_Val_Get();
  }
}

void Tasks_Task0(void){
 29a:	1f 93       	push	r17
  
  Debug_Init(0);
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 42 03 	call	0x684	; 0x684 <Debug_Init>
  DDRD |= (1<<5);
 2a4:	55 9a       	sbi	0x0a, 5	; 10
  
  while(1){
    
    PORTD ^= (1<<5);
 2a6:	10 e2       	ldi	r17, 0x20	; 32
 2a8:	8b b1       	in	r24, 0x0b	; 11
 2aa:	81 27       	eor	r24, r17
 2ac:	8b b9       	out	0x0b, r24	; 11
	Debug_Print_TSK(0);
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	0e 94 9e 03 	call	0x73c	; 0x73c <Debug_Print_TSK>
	Tasks_Delay(12);
 2b4:	8c e0       	ldi	r24, 0x0C	; 12
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 76 00 	call	0xec	; 0xec <Tasks_Delay>
 2bc:	f5 cf       	rjmp	.-22     	; 0x2a8 <Tasks_Task0+0xe>

000002be <__vector_16>:


;;=================================ISR execution starting===================================;; 
.global  __vector_16
    __vector_16:                                          ;total 26.13uS @8MHz    (211 clocks) 
	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 2be:	29 9a       	sbi	0x05, 1	; 5
        KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 2c0:	0f 92       	push	r0
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	0f 92       	push	r0
 2c6:	1f 92       	push	r1
 2c8:	11 24       	eor	r1, r1
 2ca:	2f 92       	push	r2
 2cc:	3f 92       	push	r3
 2ce:	4f 92       	push	r4
 2d0:	5f 92       	push	r5
 2d2:	6f 92       	push	r6
 2d4:	7f 92       	push	r7
 2d6:	8f 92       	push	r8
 2d8:	9f 92       	push	r9
 2da:	af 92       	push	r10
 2dc:	bf 92       	push	r11
 2de:	cf 92       	push	r12
 2e0:	df 92       	push	r13
 2e2:	ef 92       	push	r14
 2e4:	ff 92       	push	r15
 2e6:	0f 93       	push	r16
 2e8:	1f 93       	push	r17
 2ea:	2f 93       	push	r18
 2ec:	3f 93       	push	r19
 2ee:	4f 93       	push	r20
 2f0:	5f 93       	push	r21
 2f2:	6f 93       	push	r22
 2f4:	7f 93       	push	r23
 2f6:	8f 93       	push	r24
 2f8:	9f 93       	push	r25
 2fa:	af 93       	push	r26
 2fc:	bf 93       	push	r27
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	ef 93       	push	r30
 304:	ff 93       	push	r31
		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 306:	00 91 05 01 	lds	r16, 0x0105
 30a:	00 93 46 00 	sts	0x0046, r16
		KER_TICK_INCREMENT                                ;increment tick counter ( 27 clocks)
 30e:	01 e0       	ldi	r16, 0x01	; 1
 310:	10 91 00 01 	lds	r17, 0x0100
 314:	10 0f       	add	r17, r16
 316:	10 93 00 01 	sts	0x0100, r17
 31a:	00 e0       	ldi	r16, 0x00	; 0
 31c:	10 91 01 01 	lds	r17, 0x0101
 320:	10 1f       	adc	r17, r16
 322:	10 93 01 01 	sts	0x0101, r17
 326:	10 91 02 01 	lds	r17, 0x0102
 32a:	10 1f       	adc	r17, r16
 32c:	10 93 02 01 	sts	0x0102, r17
 330:	10 91 03 01 	lds	r17, 0x0103
 334:	10 1f       	adc	r17, r16
 336:	10 93 03 01 	sts	0x0103, r17
 33a:	10 91 04 01 	lds	r17, 0x0104
 33e:	10 1f       	adc	r17, r16
 340:	10 93 04 01 	sts	0x0104, r17
        KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 344:	0d b7       	in	r16, 0x3d	; 61
 346:	1e b7       	in	r17, 0x3e	; 62
 348:	20 91 06 01 	lds	r18, 0x0106
 34c:	22 0f       	add	r18, r18
 34e:	ea e0       	ldi	r30, 0x0A	; 10
 350:	f1 e0       	ldi	r31, 0x01	; 1
 352:	e2 0f       	add	r30, r18
 354:	20 e0       	ldi	r18, 0x00	; 0
 356:	f2 1f       	adc	r31, r18
 358:	01 93       	st	Z+, r16
 35a:	10 83       	st	Z, r17
		KER_LOAD_NEXT_TASK_ID                             ;inc & load next task ID( 13 clocks) 
 35c:	00 91 06 01 	lds	r16, 0x0106
 360:	03 95       	inc	r16
 362:	10 91 07 01 	lds	r17, 0x0107

00000366 <_MOD_CONT5>:
 366:	01 17       	cp	r16, r17
 368:	10 f0       	brcs	.+4      	; 0x36e <_MOD_DONE5>
 36a:	01 1b       	sub	r16, r17
 36c:	fc cf       	rjmp	.-8      	; 0x366 <_MOD_CONT5>

0000036e <_MOD_DONE5>:
 36e:	00 93 06 01 	sts	0x0106, r16
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 372:	00 91 06 01 	lds	r16, 0x0106
 376:	00 0f       	add	r16, r16
 378:	ea e0       	ldi	r30, 0x0A	; 10
 37a:	f1 e0       	ldi	r31, 0x01	; 1
 37c:	e0 0f       	add	r30, r16
 37e:	00 e0       	ldi	r16, 0x00	; 0
 380:	f0 1f       	adc	r31, r16
 382:	01 91       	ld	r16, Z+
 384:	10 81       	ld	r17, Z
 386:	0d bf       	out	0x3d, r16	; 61
 388:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 38a:	ff 91       	pop	r31
 38c:	ef 91       	pop	r30
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	bf 91       	pop	r27
 394:	af 91       	pop	r26
 396:	9f 91       	pop	r25
 398:	8f 91       	pop	r24
 39a:	7f 91       	pop	r23
 39c:	6f 91       	pop	r22
 39e:	5f 91       	pop	r21
 3a0:	4f 91       	pop	r20
 3a2:	3f 91       	pop	r19
 3a4:	2f 91       	pop	r18
 3a6:	1f 91       	pop	r17
 3a8:	0f 91       	pop	r16
 3aa:	ff 90       	pop	r15
 3ac:	ef 90       	pop	r14
 3ae:	df 90       	pop	r13
 3b0:	cf 90       	pop	r12
 3b2:	bf 90       	pop	r11
 3b4:	af 90       	pop	r10
 3b6:	9f 90       	pop	r9
 3b8:	8f 90       	pop	r8
 3ba:	7f 90       	pop	r7
 3bc:	6f 90       	pop	r6
 3be:	5f 90       	pop	r5
 3c0:	4f 90       	pop	r4
 3c2:	3f 90       	pop	r3
 3c4:	2f 90       	pop	r2
 3c6:	1f 90       	pop	r1
 3c8:	0f 90       	pop	r0
 3ca:	0f be       	out	0x3f, r0	; 63
 3cc:	0f 90       	pop	r0
	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 3ce:	29 98       	cbi	0x05, 1	; 5
		RETI                                              ;return from interrupt  (  4 clocks) 
 3d0:	18 95       	reti

000003d2 <Kernel_SysTick_Reg_Init>:



;;================================SysTick reg init starting=================================;; 
Kernel_SysTick_Reg_Init:                                  ;total operation        ( 55 clocks) 
        CLI                                               ;disable global int,    (  1 clock ) 
 3d2:	f8 94       	cli
		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 3d4:	21 9a       	sbi	0x04, 1	; 4
 3d6:	29 98       	cbi	0x05, 1	; 5
		LDI   R16                , 0x00                   ;set 0x00 to R16,       (  1 clock ) 
 3d8:	00 e0       	ldi	r16, 0x00	; 0
		STS   KerBase+0x00       , R16                    ;clear  KerBase[0]      (  2 clocks) 
 3da:	00 93 00 01 	sts	0x0100, r16
		STS   KerBase+0x01       , R16                    ;clear  KerBase[1]      (  2 clocks) 
 3de:	00 93 01 01 	sts	0x0101, r16
		STS   KerBase+0x02       , R16                    ;clear  KerBase[2]      (  2 clocks) 
 3e2:	00 93 02 01 	sts	0x0102, r16
		STS   KerBase+0x03       , R16                    ;clear  KerBase[3]      (  2 clocks) 
 3e6:	00 93 03 01 	sts	0x0103, r16
		STS   KerBase+0x04       , R16                    ;clear  KerBase[4]      (  2 clocks) 
 3ea:	00 93 04 01 	sts	0x0104, r16
		STS   KerBase+0x05       , R16                    ;clear  KerBase[5]      (  2 clocks) 
 3ee:	00 93 05 01 	sts	0x0105, r16
		STS   KerBase+0x06       , R16                    ;clear  KerBase[6]      (  2 clocks) 
 3f2:	00 93 06 01 	sts	0x0106, r16
		STS   KerBase+0x07       , R16                    ;clear  KerBase[7]      (  2 clocks) 
 3f6:	00 93 07 01 	sts	0x0107, r16
		STS   KerBase+0x08       , R16                    ;clear  KerBase[8]      (  2 clocks) 
 3fa:	00 93 08 01 	sts	0x0108, r16
        STS   KerBase+0x09       , R16                    ;clear  KerBase[9]      (  2 clocks) 
 3fe:	00 93 09 01 	sts	0x0109, r16
		STS   KerBase+0x07       , R16                    ;set ntask to 0         (  2 clocks) 
 402:	00 93 07 01 	sts	0x0107, r16
		STS   SRTCCR0A           , R16                    ;clear TCCR0A           (  2 clocks) 
 406:	00 93 44 00 	sts	0x0044, r16
		STS   SRTCCR0B           , R16                    ;clear TCCR0B           (  2 clocks) 
 40a:	00 93 45 00 	sts	0x0045, r16
		STS   SRTIMSK0           , R16                    ;clear TIMSK0           (  2 clocks) 
 40e:	00 93 6e 00 	sts	0x006E, r16
		STS   SRTIFR0            , R16                    ;clear TIFR0            (  2 clocks) 
 412:	00 93 35 00 	sts	0x0035, r16
		STS   SROCR0A            , R16                    ;clear OCR0A            (  2 clocks) 
 416:	00 93 47 00 	sts	0x0047, r16
		STS   SROCR0B            , R16                    ;clear OCR0B            (  2 clocks) 
 41a:	00 93 48 00 	sts	0x0048, r16
		STS   SRTCNT0            , R16                    ;clear TCNT0            (  2 clocks) 
 41e:	00 93 46 00 	sts	0x0046, r16
		MOV   R16                , R24                    ;prescaler from arg1    (  1 clock ) 
 422:	08 2f       	mov	r16, r24
		STS   SRTCCR0B           , R16                    ;set to TCCR0B          (  2 clocks) 
 424:	00 93 45 00 	sts	0x0045, r16
		MOV   R16                , R22                    ;reload val from arg2   (  1 clock ) 
 428:	06 2f       	mov	r16, r22
		STS   KerBase+0x05       , R16                    ;KerBase[5] reload val  (  2 clocks) 
 42a:	00 93 05 01 	sts	0x0105, r16
		STS   SRTCNT0            , R16                    ;set to TCNT0           (  2 clocks) 
 42e:	00 93 46 00 	sts	0x0046, r16
		LDI   R16                , 0x01                   ;bit mask TOIE0         (  1 clock ) 
 432:	01 e0       	ldi	r16, 0x01	; 1
		STS   SRTIMSK0           , R16                    ;set to TIMSK0          (  2 clocks) 
 434:	00 93 6e 00 	sts	0x006E, r16
		RET                                               ;return from subroutine (  4 clocks) 
 438:	08 95       	ret

0000043a <Kernel_SysTick_Val_Get>:

;;===============================SysTick value get starting=================================;; 
Kernel_SysTick_Val_Get:                                   ;total operation        ( 42 clocks) 
    _READ_AGAIN:
	    ;first read & store to actual return registers
		LDS   R18		         , KerBase+0x00           ;byte0 (LSB)            (  2 clocks) 
 43a:	20 91 00 01 	lds	r18, 0x0100
		LDS   R19		         , KerBase+0x01           ;byte1                  (  2 clocks) 
 43e:	30 91 01 01 	lds	r19, 0x0101
		LDS   R20		         , KerBase+0x02           ;byte2                  (  2 clocks) 
 442:	40 91 02 01 	lds	r20, 0x0102
		LDS   R21		         , KerBase+0x03           ;byte3                  (  2 clocks) 
 446:	50 91 03 01 	lds	r21, 0x0103
		LDS   R22		         , KerBase+0x04           ;byte4 (MSB)            (  2 clocks) 
 44a:	60 91 04 01 	lds	r22, 0x0104
		
		;second read to scratch registers
		LDS   R26		         , KerBase+0x00           ;byte0 (LSB)            (  2 clocks) 
 44e:	a0 91 00 01 	lds	r26, 0x0100
		LDS   R27		         , KerBase+0x01           ;byte1                  (  2 clocks) 
 452:	b0 91 01 01 	lds	r27, 0x0101
		LDS   R30		         , KerBase+0x02           ;byte2                  (  2 clocks) 
 456:	e0 91 02 01 	lds	r30, 0x0102
		LDS   R31		         , KerBase+0x03           ;byte3                  (  2 clocks) 
 45a:	f0 91 03 01 	lds	r31, 0x0103
		LDS   R0		         , KerBase+0x04           ;byte4 (MSB)            (  2 clocks) 
 45e:	00 90 04 01 	lds	r0, 0x0104
		
		;compare all pairs
		CP    R18                , R26                    ;compare                (  1 clock ) 
 462:	2a 17       	cp	r18, r26
		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 464:	51 f7       	brne	.-44     	; 0x43a <Kernel_SysTick_Val_Get>
		CP    R19                , R27                    ;compare                (  1 clock ) 
 466:	3b 17       	cp	r19, r27
		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 468:	41 f7       	brne	.-48     	; 0x43a <Kernel_SysTick_Val_Get>
		CP    R20                , R30                    ;compare                (  1 clock ) 
 46a:	4e 17       	cp	r20, r30
		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 46c:	31 f7       	brne	.-52     	; 0x43a <Kernel_SysTick_Val_Get>
		CP    R21                , R31                    ;compare                (  1 clock ) 
 46e:	5f 17       	cp	r21, r31
		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 470:	21 f7       	brne	.-56     	; 0x43a <Kernel_SysTick_Val_Get>
		CP    R22                , R0                     ;compare                (  1 clock ) 
 472:	60 15       	cp	r22, r0
		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 474:	11 f7       	brne	.-60     	; 0x43a <Kernel_SysTick_Val_Get>
		
		;only 5 bytes data are taken, force clear 3 high bytes (64bit return R25:R18)
		LDI   R23		         , 0x00                   ;byte5 -> R23           (  1 clocks) 
 476:	70 e0       	ldi	r23, 0x00	; 0
		LDI   R24		         , 0x00                   ;byte6 -> R24           (  1 clocks) 
 478:	80 e0       	ldi	r24, 0x00	; 0
		LDI   R25		         , 0x00                   ;byte7 -> R25           (  1 clocks) 
 47a:	90 e0       	ldi	r25, 0x00	; 0
		RET                                               ;return from subroutine (  4 clocks) 
 47c:	08 95       	ret

0000047e <Kernel_SysTick_Val_Safely_Get>:



;;============================SysTick value safely get starting=============================;; 
Kernel_SysTick_Val_Safely_Get:                            ;total operation        ( 20 clocks) 
        IN    R2                 , IOSREG                 ;save SREG              (  1 clock ) 
 47e:	2f b6       	in	r2, 0x3f	; 63
        CLI                                               ;disable interrupts     (  1 clock ) 
 480:	f8 94       	cli
		LDS   R18		         , KerBase+0x00           ;byte0 -> R18 (LSB)     (  2 clocks) 
 482:	20 91 00 01 	lds	r18, 0x0100
		LDS   R19		         , KerBase+0x01           ;byte1 -> R19           (  2 clocks) 
 486:	30 91 01 01 	lds	r19, 0x0101
		LDS   R20		         , KerBase+0x02           ;byte2 -> R20           (  2 clocks) 
 48a:	40 91 02 01 	lds	r20, 0x0102
		LDS   R21		         , KerBase+0x03           ;byte3 -> R21           (  2 clocks) 
 48e:	50 91 03 01 	lds	r21, 0x0103
		LDS   R22		         , KerBase+0x04           ;byte4 -> R22           (  2 clocks) 
 492:	60 91 04 01 	lds	r22, 0x0104
		LDI   R23		         , 0x00                   ;byte5 -> R23           (  1 clocks) 
 496:	70 e0       	ldi	r23, 0x00	; 0
		LDI   R24		         , 0x00                   ;byte6 -> R24           (  1 clocks) 
 498:	80 e0       	ldi	r24, 0x00	; 0
		LDI   R25		         , 0x00                   ;byte7 -> R25 (MSB)     (  1 clocks) 
 49a:	90 e0       	ldi	r25, 0x00	; 0
		OUT   IOSREG             , R2          		      ;restore SREG           (  1 clock ) 
 49c:	2f be       	out	0x3f, r2	; 63
		RET                                               ;return from subroutine (  4 clocks) 
 49e:	08 95       	ret

000004a0 <Kernel_Interrupt_Sts_Get>:



;;==============================interrupt status get starting===============================;; 
Kernel_Interrupt_Sts_Get:                                 ;total operation        ( 10 clocks) 
        LDI   R24		         , 0x00                   ;clear R24              (  1 clock ) 
 4a0:	80 e0       	ldi	r24, 0x00	; 0
        IN    R16		         , IOSREG                 ;save SREG in R16       (  1 clock ) 
 4a2:	0f b7       	in	r16, 0x3f	; 63
		SBRC  R16		         , 0x07                   ;check I flag->bit7     (  3 clocks) 
 4a4:	07 fd       	sbrc	r16, 7
		LDI   R24		         , 0x01                   ;set R24 to 1           (  1 clock ) 
 4a6:	81 e0       	ldi	r24, 0x01	; 1
		RET                                               ;return from subroutine (  4 clocks) 
 4a8:	08 95       	ret

000004aa <Kernel_Task_Init>:

;;================================kernel task init starting=================================;; 
Kernel_Task_Init:
        ;func_ptr->R25:R24, task_id->R22, task_priority->R20
        ;save main SP & Z pointer
        IN    R2                 , IOSPL                  ;save SPL of MSP        (  1 clock ) 
 4aa:	2d b6       	in	r2, 0x3d	; 61
        IN    R3                 , IOSPH                  ;save SPH of MSP        (  1 clock ) 
 4ac:	3e b6       	in	r3, 0x3e	; 62
        MOV   R4                 , R30                    ;save ZPL               (  2 clocks) 
 4ae:	4e 2e       	mov	r4, r30
		MOV   R5                 , R31                    ;save ZPH               (  2 clocks) 
 4b0:	5f 2e       	mov	r5, r31
		
		;set priority to KerSch+(task_id*4)+1
		MOV   R16                , R22                    ;load task_id           (  1 clock ) 
 4b2:	06 2f       	mov	r16, r22
		LSL   R16                                         ;x2                     (  1 clock ) 
 4b4:	00 0f       	add	r16, r16
		LSL   R16                                         ;task_id*4              (  1 clock ) 
 4b6:	00 0f       	add	r16, r16
        INC   R16                                         ;task_id*4+1 ->priority (  1 clock ) 
 4b8:	03 95       	inc	r16
		LDI   R30                , lo8(KerSch)            ;load low byte          (  1 clock ) 
 4ba:	ee e1       	ldi	r30, 0x1E	; 30
		LDI   R31                , hi8(KerSch)            ;load high byte         (  1 clock ) 
 4bc:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 4be:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 4c0:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 4c2:	f0 1f       	adc	r31, r16
		ST    Z                  , R20                    ;save priority          (  2 clocks)
 4c4:	40 83       	st	Z, r20
		
		;increment ntask
		LDS   R16                , KerBase+0x07           ;load ntask             (  2 clocks) 
 4c6:	00 91 07 01 	lds	r16, 0x0107
		INC   R16                                         ;increment ntask        (  1 clock ) 
 4ca:	03 95       	inc	r16
		STS   KerBase+0x07       , R16                    ;store ntask            (  2 clocks) 
 4cc:	00 93 07 01 	sts	0x0107, r16
		
		;set stack pointer for current task (KerStack + KER_STK_SZ*(ker_ind+1) - 1) ->stack top   
		MOV   R16                , R22                    ;load task_id           (  1 clock ) 
 4d0:	06 2f       	mov	r16, r22
		INC   R16                                         ;increment task_id      (  1 clock ) 
 4d2:	03 95       	inc	r16
		LDI   R17                , KER_STK_SZ             ;load stack size        (  1 clock ) 
 4d4:	10 e8       	ldi	r17, 0x80	; 128
		MUL   R16                , R17                    ;multiply to get offset (  2 clocks) 
 4d6:	01 9f       	mul	r16, r17
		MOV   R30                , R0                     ;load multiplied low    (  2 clocks) 
 4d8:	e0 2d       	mov	r30, r0
		MOV   R31                , R1                     ;load multiplied high   (  2 clocks) 
 4da:	f1 2d       	mov	r31, r1
		SBIW  R30                , 0x01                   ;KER_STK_SZ*(task_id+1)-1  (  2 clocks) 
 4dc:	31 97       	sbiw	r30, 0x01	; 1
		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 4de:	11 24       	eor	r1, r1
		LDI   R16                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
 4e0:	06 e4       	ldi	r16, 0x46	; 70
		LDI   R17                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
 4e2:	11 e0       	ldi	r17, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 4e4:	e0 0f       	add	r30, r16
		ADC   R31                , R17                    ;add high bytes+carry   (  1 clock ) 
 4e6:	f1 1f       	adc	r31, r17
		OUT   IOSPL              , R30                    ;load SPL               (  1 clock ) 
 4e8:	ed bf       	out	0x3d, r30	; 61
        OUT   IOSPH              , R31                    ;load SPH               (  1 clock ) 
 4ea:	fe bf       	out	0x3e, r31	; 62
		
		;function argument directly returns word address
	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
 4ec:	8f 93       	push	r24
		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 4ee:	9f 93       	push	r25
		
		;push context to stack of this task
		KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 4f0:	0f 92       	push	r0
 4f2:	0f b6       	in	r0, 0x3f	; 63
 4f4:	0f 92       	push	r0
 4f6:	1f 92       	push	r1
 4f8:	11 24       	eor	r1, r1
 4fa:	2f 92       	push	r2
 4fc:	3f 92       	push	r3
 4fe:	4f 92       	push	r4
 500:	5f 92       	push	r5
 502:	6f 92       	push	r6
 504:	7f 92       	push	r7
 506:	8f 92       	push	r8
 508:	9f 92       	push	r9
 50a:	af 92       	push	r10
 50c:	bf 92       	push	r11
 50e:	cf 92       	push	r12
 510:	df 92       	push	r13
 512:	ef 92       	push	r14
 514:	ff 92       	push	r15
 516:	0f 93       	push	r16
 518:	1f 93       	push	r17
 51a:	2f 93       	push	r18
 51c:	3f 93       	push	r19
 51e:	4f 93       	push	r20
 520:	5f 93       	push	r21
 522:	6f 93       	push	r22
 524:	7f 93       	push	r23
 526:	8f 93       	push	r24
 528:	9f 93       	push	r25
 52a:	af 93       	push	r26
 52c:	bf 93       	push	r27
 52e:	cf 93       	push	r28
 530:	df 93       	push	r29
 532:	ef 93       	push	r30
 534:	ff 93       	push	r31
		
		;read stack pointer of current task (necessary when restore)
		IN    R16                , IOSPL                  ;read SPL               (  1 clock ) 
 536:	0d b7       	in	r16, 0x3d	; 61
        IN    R17                , IOSPH                  ;read SPH               (  1 clock ) 
 538:	1e b7       	in	r17, 0x3e	; 62
		
		;calculate the address where current task's SP will be stored and store SP
		MOV   R18                , R22                    ;fetch task_id from arg (  1 clock ) 
 53a:	26 2f       	mov	r18, r22
		LSL   R18                                         ;left shift to multiply (  1 clock ) 
 53c:	22 0f       	add	r18, r18
		LDI   R30                , lo8(KerSP)             ;fetch base pos low     (  1 clock ) 
 53e:	ea e0       	ldi	r30, 0x0A	; 10
		LDI   R31                , hi8(KerSP)             ;fetch base pos high    (  1 clock ) 
 540:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R18                    ;add offset to array    (  1 clock ) 
 542:	e2 0f       	add	r30, r18
		LDI   R18                , 0x00                   ;set 0 to R16           (  1 clock ) 
 544:	20 e0       	ldi	r18, 0x00	; 0
		ADC   R31                , R18                    ;add carry if any       (  1 clock ) 
 546:	f2 1f       	adc	r31, r18
		ST    Z+                 , R16                    ;SPL at KerSp+offset    (  2 clocks) 
 548:	01 93       	st	Z+, r16
		ST    z                  , R17                    ;SPH at KerSp+offset    (  2 clocks) 
 54a:	10 83       	st	Z, r17
		
		;load Main SP, restore Z pointer
		OUT   IOSPL              , R2                     ;load SPL               (  1 clock ) 
 54c:	2d be       	out	0x3d, r2	; 61
        OUT   IOSPH              , R3                     ;load SPH               (  1 clock ) 
 54e:	3e be       	out	0x3e, r3	; 62
		MOV   R30                , R4                     ;push ZPL               (  2 clocks) 
 550:	e4 2d       	mov	r30, r4
		MOV   R31                , R5                     ;push ZPL               (  2 clocks) 
 552:	f5 2d       	mov	r31, r5
		RET                                               ;return from subroutine (  4 clocks) 
 554:	08 95       	ret

00000556 <Kernel_Start_Tasks>:

;;===================================Kernel Task starting===================================;; 
Kernel_Start_Tasks:
		;start executing from task0
		;save ZP
		MOV   R4                 , R30                    ;save ZPL               (  2 clocks) 
 556:	4e 2e       	mov	r4, r30
		MOV   R5                 , R31                    ;save ZPH               (  2 clocks) 
 558:	5f 2e       	mov	r5, r31
		
		;load ZP with addr+offset
		LDI   R30                , lo8(KerSP)             ;fetch ZPL KerSP        (  1 clock ) 
 55a:	ea e0       	ldi	r30, 0x0A	; 10
		LDI   R31                , hi8(KerSP)             ;fetch ZPH KerSP        (  1 clock ) 
 55c:	f1 e0       	ldi	r31, 0x01	; 1
		
		;load last task's SP
		LD    R16                , Z+                     ;load val from Z, inc Z (  2 clocks) 
 55e:	01 91       	ld	r16, Z+
		LD    R17                , Z                      ;load val from Z+1      (  2 clocks) 
 560:	10 81       	ld	r17, Z
		
		;set last task's SP
		OUT   IOSPL              , R16                    ;load SPL               (  1 clock ) 
 562:	0d bf       	out	0x3d, r16	; 61
        OUT   IOSPH              , R17                    ;load SPH               (  1 clock ) 
 564:	1e bf       	out	0x3e, r17	; 62
       
        ;forcefully restore context, in ISR it will be stored automatically
		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 566:	ff 91       	pop	r31
 568:	ef 91       	pop	r30
 56a:	df 91       	pop	r29
 56c:	cf 91       	pop	r28
 56e:	bf 91       	pop	r27
 570:	af 91       	pop	r26
 572:	9f 91       	pop	r25
 574:	8f 91       	pop	r24
 576:	7f 91       	pop	r23
 578:	6f 91       	pop	r22
 57a:	5f 91       	pop	r21
 57c:	4f 91       	pop	r20
 57e:	3f 91       	pop	r19
 580:	2f 91       	pop	r18
 582:	1f 91       	pop	r17
 584:	0f 91       	pop	r16
 586:	ff 90       	pop	r15
 588:	ef 90       	pop	r14
 58a:	df 90       	pop	r13
 58c:	cf 90       	pop	r12
 58e:	bf 90       	pop	r11
 590:	af 90       	pop	r10
 592:	9f 90       	pop	r9
 594:	8f 90       	pop	r8
 596:	7f 90       	pop	r7
 598:	6f 90       	pop	r6
 59a:	5f 90       	pop	r5
 59c:	4f 90       	pop	r4
 59e:	3f 90       	pop	r3
 5a0:	2f 90       	pop	r2
 5a2:	1f 90       	pop	r1
 5a4:	0f 90       	pop	r0
 5a6:	0f be       	out	0x3f, r0	; 63
 5a8:	0f 90       	pop	r0
		
		;restore ZP
		MOV   R30                , R4                     ;restore ZPL            (  2 clocks) 
 5aa:	e4 2d       	mov	r30, r4
		MOV   R31                , R5                     ;restore ZPL            (  2 clocks) 
 5ac:	f5 2d       	mov	r31, r5
		
		;enable global interrupt to start executing task, starting with task0
		SEI                                               ;enable global int      (  1 clock ) 
 5ae:	78 94       	sei
		
		;execute return to jump to task0, pushed while task init
		RET                                               ;return from subroutine (  4 clocks) 
 5b0:	08 95       	ret

000005b2 <Kernel_Task_Yeild>:


;;===================================Kernel Task starting===================================;; 
Kernel_Task_Yeild:
		;save context, save sp, load next task id, load next task sp, restore context
		KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 5b2:	0f 92       	push	r0
 5b4:	0f b6       	in	r0, 0x3f	; 63
 5b6:	0f 92       	push	r0
 5b8:	1f 92       	push	r1
 5ba:	11 24       	eor	r1, r1
 5bc:	2f 92       	push	r2
 5be:	3f 92       	push	r3
 5c0:	4f 92       	push	r4
 5c2:	5f 92       	push	r5
 5c4:	6f 92       	push	r6
 5c6:	7f 92       	push	r7
 5c8:	8f 92       	push	r8
 5ca:	9f 92       	push	r9
 5cc:	af 92       	push	r10
 5ce:	bf 92       	push	r11
 5d0:	cf 92       	push	r12
 5d2:	df 92       	push	r13
 5d4:	ef 92       	push	r14
 5d6:	ff 92       	push	r15
 5d8:	0f 93       	push	r16
 5da:	1f 93       	push	r17
 5dc:	2f 93       	push	r18
 5de:	3f 93       	push	r19
 5e0:	4f 93       	push	r20
 5e2:	5f 93       	push	r21
 5e4:	6f 93       	push	r22
 5e6:	7f 93       	push	r23
 5e8:	8f 93       	push	r24
 5ea:	9f 93       	push	r25
 5ec:	af 93       	push	r26
 5ee:	bf 93       	push	r27
 5f0:	cf 93       	push	r28
 5f2:	df 93       	push	r29
 5f4:	ef 93       	push	r30
 5f6:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 5f8:	0d b7       	in	r16, 0x3d	; 61
 5fa:	1e b7       	in	r17, 0x3e	; 62
 5fc:	20 91 06 01 	lds	r18, 0x0106
 600:	22 0f       	add	r18, r18
 602:	ea e0       	ldi	r30, 0x0A	; 10
 604:	f1 e0       	ldi	r31, 0x01	; 1
 606:	e2 0f       	add	r30, r18
 608:	20 e0       	ldi	r18, 0x00	; 0
 60a:	f2 1f       	adc	r31, r18
 60c:	01 93       	st	Z+, r16
 60e:	10 83       	st	Z, r17
		KER_LOAD_NEXT_TASK_ID                             ;inc & load next task ID( 13 clocks) 
 610:	00 91 06 01 	lds	r16, 0x0106
 614:	03 95       	inc	r16
 616:	10 91 07 01 	lds	r17, 0x0107

0000061a <_MOD_CONT14>:
 61a:	01 17       	cp	r16, r17
 61c:	10 f0       	brcs	.+4      	; 0x622 <_MOD_DONE14>
 61e:	01 1b       	sub	r16, r17
 620:	fc cf       	rjmp	.-8      	; 0x61a <_MOD_CONT14>

00000622 <_MOD_DONE14>:
 622:	00 93 06 01 	sts	0x0106, r16
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 626:	00 91 06 01 	lds	r16, 0x0106
 62a:	00 0f       	add	r16, r16
 62c:	ea e0       	ldi	r30, 0x0A	; 10
 62e:	f1 e0       	ldi	r31, 0x01	; 1
 630:	e0 0f       	add	r30, r16
 632:	00 e0       	ldi	r16, 0x00	; 0
 634:	f0 1f       	adc	r31, r16
 636:	01 91       	ld	r16, Z+
 638:	10 81       	ld	r17, Z
 63a:	0d bf       	out	0x3d, r16	; 61
 63c:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 63e:	ff 91       	pop	r31
 640:	ef 91       	pop	r30
 642:	df 91       	pop	r29
 644:	cf 91       	pop	r28
 646:	bf 91       	pop	r27
 648:	af 91       	pop	r26
 64a:	9f 91       	pop	r25
 64c:	8f 91       	pop	r24
 64e:	7f 91       	pop	r23
 650:	6f 91       	pop	r22
 652:	5f 91       	pop	r21
 654:	4f 91       	pop	r20
 656:	3f 91       	pop	r19
 658:	2f 91       	pop	r18
 65a:	1f 91       	pop	r17
 65c:	0f 91       	pop	r16
 65e:	ff 90       	pop	r15
 660:	ef 90       	pop	r14
 662:	df 90       	pop	r13
 664:	cf 90       	pop	r12
 666:	bf 90       	pop	r11
 668:	af 90       	pop	r10
 66a:	9f 90       	pop	r9
 66c:	8f 90       	pop	r8
 66e:	7f 90       	pop	r7
 670:	6f 90       	pop	r6
 672:	5f 90       	pop	r5
 674:	4f 90       	pop	r4
 676:	3f 90       	pop	r3
 678:	2f 90       	pop	r2
 67a:	1f 90       	pop	r1
 67c:	0f 90       	pop	r0
 67e:	0f be       	out	0x3f, r0	; 63
 680:	0f 90       	pop	r0
		RET                                               ;return from subroutine (  4 clocks) 
 682:	08 95       	ret

00000684 <Debug_Init>:
.global  Debug_Print_TSK

;;========================================Debug Init========================================;;
Debug_Init:
        ;init registers for UART0
		LDI   R16                , (1<<1)                 ;mask U2x,                (1 clock )
 684:	02 e0       	ldi	r16, 0x02	; 2
		STS   SRUCSR0A           , R16                    ;load val to UCSR0A,      (2 clocks)
 686:	00 93 c0 00 	sts	0x00C0, r16
		MOV   R16                , R25                    ;clear R16,               (1 clock )
 68a:	09 2f       	mov	r16, r25
		STS   SRUBRR0H           , R16                    ;load val to UBRR0H,      (2 clocks)
 68c:	00 93 c5 00 	sts	0x00C5, r16
		MOV   R16                , R24                    ;set 0x03, 250k baud,     (1 clock )
 690:	08 2f       	mov	r16, r24
		STS   SRUBRR0L           , R16                    ;load val to UBRR0L,      (2 clocks)
 692:	00 93 c4 00 	sts	0x00C4, r16
		LDI   R16                , (1<<1)|(1<<2)          ;config 8 data bit        (1 clock )
 696:	06 e0       	ldi	r16, 0x06	; 6
		STS   SRUCSR0C           , R16                    ;load val to UCSR0C,      (2 clocks)
 698:	00 93 c2 00 	sts	0x00C2, r16
		LDI   R16                , (1<<3)                 ;enable tx,               (1 clock )
 69c:	08 e0       	ldi	r16, 0x08	; 8
		STS   SRUCSR0B           , R16                    ;load val to UCSR0B,      (2 clocks)
 69e:	00 93 c1 00 	sts	0x00C1, r16
        RET                                               ;return from subroutine,  (4 clocks) 
 6a2:	08 95       	ret

000006a4 <Debug_Tx_Byte>:


;;=========================================Debug Tx=========================================;;
Debug_Tx_Byte:
		;write single byte to data register (Arg R24)
		STS   SRGPIOR0           , R16                    ;store R16 val,           (2 clocks)
 6a4:	00 93 3e 00 	sts	0x003E, r16
		STS   SRUDR0             , R24                    ;load val to UDR0,        (2 clocks)
 6a8:	80 93 c6 00 	sts	0x00C6, r24

000006ac <__UDRE0_CLEARED>:
		
    __UDRE0_CLEARED:
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,      (2 clocks)
 6ac:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x05                   ;skip if UDRE0 is set,    (2 clocks)
 6b0:	05 ff       	sbrs	r16, 5
		RJMP  __UDRE0_CLEARED                             ;wait until UDRE0 is set, (2 clocks)
 6b2:	fc cf       	rjmp	.-8      	; 0x6ac <__UDRE0_CLEARED>
		LDS   R16                , SRGPIOR0               ;restore R16 val,         (2 clocks)
 6b4:	00 91 3e 00 	lds	r16, 0x003E
        RET                                               ;return from subroutine,  (4 clocks) 
 6b8:	08 95       	ret

000006ba <Debug_Tx_Byte_Conf>:


;;=========================================Debug Tx=========================================;;
Debug_Tx_Byte_Conf:
        ;write 1 byte, (Arg R24), Args retained
		STS   SRGPIOR0           , R16                    ;store R16 val,           (2 clocks)
 6ba:	00 93 3e 00 	sts	0x003E, r16
		STS   SRUDR0             , R24                    ;load val to UDR0,        (2 clocks)
 6be:	80 93 c6 00 	sts	0x00C6, r24

000006c2 <__TXC0_CLEARED>:
		
    __TXC0_CLEARED:
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,      (2 clocks)
 6c2:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x06                   ;skip if TXC0 is set,     (2 clocks)
 6c6:	06 ff       	sbrs	r16, 6
		RJMP  __TXC0_CLEARED                              ;wait until TXC0 is set,  (2 clocks)
 6c8:	fc cf       	rjmp	.-8      	; 0x6c2 <__TXC0_CLEARED>
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,      (2 clocks)
 6ca:	00 91 c0 00 	lds	r16, 0x00C0
		ORI   R16                , (1<<6)                 ;mask bit 6,              (1 clock )
 6ce:	00 64       	ori	r16, 0x40	; 64
		STS   SRUCSR0A           , R16                    ;load val to UCSR0B,      (2 clocks)
 6d0:	00 93 c0 00 	sts	0x00C0, r16
		LDS   R16                , SRGPIOR0               ;restore R16 val,         (2 clocks)
 6d4:	00 91 3e 00 	lds	r16, 0x003E
        RET                                               ;return from subroutine,  (4 clocks) 
 6d8:	08 95       	ret

000006da <Debug_Tx_Word_Conf>:

;;======================================Debug Tx Word=======================================;;
Debug_Tx_Word_Conf:
        ;write 2 bytes, (Arg R24, R25), Args retained
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 6da:	0e 94 5d 03 	call	0x6ba	; 0x6ba <Debug_Tx_Byte_Conf>
		STS   SRGPIOR0           , R24                    ;store R24 val,           (2 clocks)
 6de:	80 93 3e 00 	sts	0x003E, r24
		MOV   R24                , R25                    ;copy R25 to R24          (1 clock )
 6e2:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 6e4:	0e 94 5d 03 	call	0x6ba	; 0x6ba <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR0               ;restore R24 val,         (2 clocks)
 6e8:	80 91 3e 00 	lds	r24, 0x003E
        RET                                               ;return from subroutine,  (4 clocks) 
 6ec:	08 95       	ret

000006ee <Debug_Tx_DWord_Conf>:

;;=====================================Debug Tx DWord=======================================;;
Debug_Tx_DWord_Conf:
        ;write 4 bytes, (Arg R22-R25), Args retained
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks)
 6ee:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R22                    ;copy R22 to R24          (1 clock )
 6f2:	86 2f       	mov	r24, r22
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 6f4:	0e 94 5d 03 	call	0x6ba	; 0x6ba <Debug_Tx_Byte_Conf>
		MOV   R24                , R23                    ;copy R23 to R24          (1 clock )
 6f8:	87 2f       	mov	r24, r23
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 6fa:	0e 94 5d 03 	call	0x6ba	; 0x6ba <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24              (2 clocks)
 6fe:	80 91 4a 00 	lds	r24, 0x004A
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 702:	0e 94 5d 03 	call	0x6ba	; 0x6ba <Debug_Tx_Byte_Conf>
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks)
 706:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R25                    ;copy R22 to R24          (1 clock )
 70a:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 70c:	0e 94 5d 03 	call	0x6ba	; 0x6ba <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24 val,         (2 clocks)
 710:	80 91 4a 00 	lds	r24, 0x004A
        RET                                               ;return from subroutine,  (4 clocks) 
 714:	08 95       	ret

00000716 <Debug_Tx_From_RAM>:


;;===================================Debug Tx From RAM======================================;;
Debug_Tx_From_RAM:
        ;print data from RAM address (Arg R24-R25)
		MOV   R16                , R30                    ;copy R30 to R16          (1 clock )
 716:	0e 2f       	mov	r16, r30
		MOV   R17                , R31                    ;copy R31 to R17          (1 clock )
 718:	1f 2f       	mov	r17, r31
		MOV   R18                , R24                    ;copy R24 to R18          (1 clock )
 71a:	28 2f       	mov	r18, r24
		MOV   R30                , R24                    ;copy R22 to R24          (1 clock )
 71c:	e8 2f       	mov	r30, r24
		MOV   R31                , R25                    ;copy R22 to R24          (1 clock )
 71e:	f9 2f       	mov	r31, r25
		LD    R24                , Z                      ;load val to R24          (2 clocks)
 720:	80 81       	ld	r24, Z
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 722:	0e 94 5d 03 	call	0x6ba	; 0x6ba <Debug_Tx_Byte_Conf>
		MOV   R30                , R16                    ;copy R16 to R30          (1 clock )
 726:	e0 2f       	mov	r30, r16
		MOV   R31                , R17                    ;copy R17 to R31          (1 clock )
 728:	f1 2f       	mov	r31, r17
		MOV   R24                , R18                    ;copy R18 to R24          (1 clock )
 72a:	82 2f       	mov	r24, r18
        RET                                               ;return from subroutine,  (4 clocks) 
 72c:	08 95       	ret

0000072e <Debug_Tx_RAM_Area>:

;;===================================Debug Tx RAM Area======================================;;
Debug_Tx_RAM_Area:
        ;print data from RAM address (arguments R24:R25, R22)
	__DUMP_BYTES:
	    CALL  Debug_Tx_From_RAM                           ;send via uart from ram
 72e:	0e 94 8b 03 	call	0x716	; 0x716 <Debug_Tx_From_RAM>
		SUBI  R24                , 0x01                   ;decrement from LSByte
 732:	81 50       	subi	r24, 0x01	; 1
        SBCI  R25                , 0x00                   ;decrement if carry
 734:	90 40       	sbci	r25, 0x00	; 0
		SUBI  R22                , 0x01                   ;decrement
 736:	61 50       	subi	r22, 0x01	; 1
		BRNE  __DUMP_BYTES
 738:	d1 f7       	brne	.-12     	; 0x72e <Debug_Tx_RAM_Area>
        RET                                               ;return from subroutine,  (4 clocks) 
 73a:	08 95       	ret

0000073c <Debug_Print_TSK>:


;;=====================================Debug Dummy Print====================================;;
Debug_Print_TSK:
        ;write 4 bytes, (Arg R22-R25), Args retained
		MOV   R16                , R24                    ;copy R24 to R16          (1 clock )
 73c:	08 2f       	mov	r16, r24
		;LDI   R17                , 48                     ;load 48 to reg           (1 clock )
		;ADD   R16                , R17                    ;to convert val to char   (1 clock )
		LDI   R22                , 'T'                    ;copy char                (1 clock )
 73e:	64 e5       	ldi	r22, 0x54	; 84
		LDI   R23                , 'S'                    ;copy char                (1 clock )
 740:	73 e5       	ldi	r23, 0x53	; 83
		LDI   R24                , 'k'                    ;copy char                (1 clock )
 742:	8b e6       	ldi	r24, 0x6B	; 107
		MOV   R25                , R16                    ;copy char                (1 clock )
 744:	90 2f       	mov	r25, r16
		CALL  Debug_Tx_DWord_Conf                         ;send via uart
 746:	0e 94 77 03 	call	0x6ee	; 0x6ee <Debug_Tx_DWord_Conf>
		LDI   R24                , '\r'                   ;copy char                (1 clock )
 74a:	8d e0       	ldi	r24, 0x0D	; 13
		LDI   R25                , '\n'                   ;copy char                (1 clock )
 74c:	9a e0       	ldi	r25, 0x0A	; 10
		CALL  Debug_Tx_Word_Conf                          ;send via uart
 74e:	0e 94 6d 03 	call	0x6da	; 0x6da <Debug_Tx_Word_Conf>
        RET                                               ;return from subroutine,  (4 clocks) 
 752:	08 95       	ret

00000754 <_exit>:
 754:	f8 94       	cli

00000756 <__stop_program>:
 756:	ff cf       	rjmp	.-2      	; 0x756 <__stop_program>
