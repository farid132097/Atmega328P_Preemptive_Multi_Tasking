
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e02  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000055a  00800100  00800100  00000e76  2**0
                  ALLOC
  2 .stab         00000cc0  00000000  00000000  00000e78  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000006d  00000000  00000000  00001b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00001ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000bd  00000000  00000000  00001be5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001a9  00000000  00000000  00001ca2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000ba  00000000  00000000  00001e4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000486  00000000  00000000  00001f05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  0000238c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000115  00000000  00000000  0000244c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__vector_9>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	00 00       	nop
  70:	00 00       	nop
  72:	00 00       	nop
  74:	14 c0       	rjmp	.+40     	; 0x9e <__bad_interrupt>
  76:	00 00       	nop
  78:	00 00       	nop
  7a:	e1 c1       	rjmp	.+962    	; 0x43e <__vector_9>
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 00       	nop
  82:	00 00       	nop
  84:	00 00       	nop
  86:	00 00       	nop
  88:	0a c0       	rjmp	.+20     	; 0x9e <__bad_interrupt>

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61
  96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  9a:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:



int main(void) {
    
	Kernel_Init();
  a2:	0e 94 90 04 	call	0x920	; 0x920 <Kernel_Init>

	Kernel_Task_Create(Tasks_Task1,  5);
  a6:	8b ee       	ldi	r24, 0xEB	; 235
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	65 e0       	ldi	r22, 0x05	; 5
  ac:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task2,  1);
  b0:	8e eb       	ldi	r24, 0xBE	; 190
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	61 e0       	ldi	r22, 0x01	; 1
  b6:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task3,  2);
  ba:	81 e9       	ldi	r24, 0x91	; 145
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	62 e0       	ldi	r22, 0x02	; 2
  c0:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task4,  3);
  c4:	84 e6       	ldi	r24, 0x64	; 100
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	63 e0       	ldi	r22, 0x03	; 3
  ca:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task5,  0);
  ce:	87 e3       	ldi	r24, 0x37	; 55
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task6,  6);
  d8:	8a e0       	ldi	r24, 0x0A	; 10
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	66 e0       	ldi	r22, 0x06	; 6
  de:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task7,  4);
  e2:	8d ed       	ldi	r24, 0xDD	; 221
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	64 e0       	ldi	r22, 0x04	; 4
  e8:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task8,  8);
  ec:	80 eb       	ldi	r24, 0xB0	; 176
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	68 e0       	ldi	r22, 0x08	; 8
  f2:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task9,  7);
  f6:	83 e8       	ldi	r24, 0x83	; 131
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	67 e0       	ldi	r22, 0x07	; 7
  fc:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <Kernel_Task_Create>
	
	Kernel_Start_Tasks();
 100:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <Kernel_Start_Tasks>
 104:	ff cf       	rjmp	.-2      	; 0x104 <SRUDR0+0x3e>

00000106 <Tasks_Task9>:
  }
}

void Tasks_Task9(void){
  
  Debug_Init(0);
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 a1 06 	call	0xd42	; 0xd42 <Debug_Init>
  
  while(1){

    Kernel_Task_Constant_Latency(300);
 10e:	8c e2       	ldi	r24, 0x2C	; 44
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	0e 94 a0 05 	call	0xb40	; 0xb40 <Kernel_Task_Constant_Latency>
    
	  Debug_Tx_Byte(9);
 116:	89 e0       	ldi	r24, 0x09	; 9
 118:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	0e 94 77 06 	call	0xcee	; 0xcee <Kernel_Task_Sleep_Time_Get>
 122:	0e 94 ba 06 	call	0xd74	; 0xd74 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	0e 94 81 06 	call	0xd02	; 0xd02 <Kernel_Task_Status_Get>
 12c:	80 5e       	subi	r24, 0xE0	; 224
 12e:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(9));
 132:	89 e0       	ldi	r24, 0x09	; 9
 134:	0e 94 77 06 	call	0xcee	; 0xcee <Kernel_Task_Sleep_Time_Get>
 138:	0e 94 ba 06 	call	0xd74	; 0xd74 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(9));
 13c:	89 e0       	ldi	r24, 0x09	; 9
 13e:	0e 94 81 06 	call	0xd02	; 0xd02 <Kernel_Task_Status_Get>
 142:	80 5e       	subi	r24, 0xE0	; 224
 144:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 148:	0e 94 9b 06 	call	0xd36	; 0xd36 <Kernel_Abs_High_Prio_Task_ID_Get>
 14c:	80 5f       	subi	r24, 0xF0	; 240
 14e:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 152:	0e 94 94 06 	call	0xd28	; 0xd28 <Kernel_Lowest_Prio_Get>
 156:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    
    //Kernel_Task_Sleep(90);
    Kernel_Task_Constant_Latency_Sleep();
 15a:	0e 94 b6 05 	call	0xb6c	; 0xb6c <Kernel_Task_Constant_Latency_Sleep>
 15e:	d7 cf       	rjmp	.-82     	; 0x10e <Tasks_Task9+0x8>

00000160 <Tasks_Task8>:
  }
}

void Tasks_Task8(void){
  
  Debug_Init(0);
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 a1 06 	call	0xd42	; 0xd42 <Debug_Init>
  
  while(1){

    Kernel_Task_Constant_Latency(300);
 168:	8c e2       	ldi	r24, 0x2C	; 44
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	0e 94 a0 05 	call	0xb40	; 0xb40 <Kernel_Task_Constant_Latency>
    
	  Debug_Tx_Byte(8);
 170:	88 e0       	ldi	r24, 0x08	; 8
 172:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	0e 94 77 06 	call	0xcee	; 0xcee <Kernel_Task_Sleep_Time_Get>
 17c:	0e 94 ba 06 	call	0xd74	; 0xd74 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	0e 94 81 06 	call	0xd02	; 0xd02 <Kernel_Task_Status_Get>
 186:	80 5e       	subi	r24, 0xE0	; 224
 188:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(8));
 18c:	88 e0       	ldi	r24, 0x08	; 8
 18e:	0e 94 77 06 	call	0xcee	; 0xcee <Kernel_Task_Sleep_Time_Get>
 192:	0e 94 ba 06 	call	0xd74	; 0xd74 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(8));
 196:	88 e0       	ldi	r24, 0x08	; 8
 198:	0e 94 81 06 	call	0xd02	; 0xd02 <Kernel_Task_Status_Get>
 19c:	80 5e       	subi	r24, 0xE0	; 224
 19e:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 1a2:	0e 94 9b 06 	call	0xd36	; 0xd36 <Kernel_Abs_High_Prio_Task_ID_Get>
 1a6:	80 5f       	subi	r24, 0xF0	; 240
 1a8:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 1ac:	0e 94 94 06 	call	0xd28	; 0xd28 <Kernel_Lowest_Prio_Get>
 1b0:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    
    //Kernel_Task_Sleep(80);
    Kernel_Task_Constant_Latency_Sleep();
 1b4:	0e 94 b6 05 	call	0xb6c	; 0xb6c <Kernel_Task_Constant_Latency_Sleep>
 1b8:	d7 cf       	rjmp	.-82     	; 0x168 <Tasks_Task8+0x8>

000001ba <Tasks_Task7>:
  }
}

void Tasks_Task7(void){
  
  Debug_Init(0);
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 a1 06 	call	0xd42	; 0xd42 <Debug_Init>
  
  while(1){

    Kernel_Task_Constant_Latency(300);
 1c2:	8c e2       	ldi	r24, 0x2C	; 44
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	0e 94 a0 05 	call	0xb40	; 0xb40 <Kernel_Task_Constant_Latency>
    
	  Debug_Tx_Byte(7);
 1ca:	87 e0       	ldi	r24, 0x07	; 7
 1cc:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	0e 94 77 06 	call	0xcee	; 0xcee <Kernel_Task_Sleep_Time_Get>
 1d6:	0e 94 ba 06 	call	0xd74	; 0xd74 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	0e 94 81 06 	call	0xd02	; 0xd02 <Kernel_Task_Status_Get>
 1e0:	80 5e       	subi	r24, 0xE0	; 224
 1e2:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(7));
 1e6:	87 e0       	ldi	r24, 0x07	; 7
 1e8:	0e 94 77 06 	call	0xcee	; 0xcee <Kernel_Task_Sleep_Time_Get>
 1ec:	0e 94 ba 06 	call	0xd74	; 0xd74 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(7));
 1f0:	87 e0       	ldi	r24, 0x07	; 7
 1f2:	0e 94 81 06 	call	0xd02	; 0xd02 <Kernel_Task_Status_Get>
 1f6:	80 5e       	subi	r24, 0xE0	; 224
 1f8:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 1fc:	0e 94 9b 06 	call	0xd36	; 0xd36 <Kernel_Abs_High_Prio_Task_ID_Get>
 200:	80 5f       	subi	r24, 0xF0	; 240
 202:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 206:	0e 94 94 06 	call	0xd28	; 0xd28 <Kernel_Lowest_Prio_Get>
 20a:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    
    //Kernel_Task_Sleep(70);
    Kernel_Task_Constant_Latency_Sleep();
 20e:	0e 94 b6 05 	call	0xb6c	; 0xb6c <Kernel_Task_Constant_Latency_Sleep>
 212:	d7 cf       	rjmp	.-82     	; 0x1c2 <Tasks_Task7+0x8>

00000214 <Tasks_Task6>:
  }
}

void Tasks_Task6(void){
  
  Debug_Init(0);
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 a1 06 	call	0xd42	; 0xd42 <Debug_Init>
  
  while(1){

    Kernel_Task_Constant_Latency(300);
 21c:	8c e2       	ldi	r24, 0x2C	; 44
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	0e 94 a0 05 	call	0xb40	; 0xb40 <Kernel_Task_Constant_Latency>
    
    Debug_Tx_Byte(6);
 224:	86 e0       	ldi	r24, 0x06	; 6
 226:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	0e 94 77 06 	call	0xcee	; 0xcee <Kernel_Task_Sleep_Time_Get>
 230:	0e 94 ba 06 	call	0xd74	; 0xd74 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	0e 94 81 06 	call	0xd02	; 0xd02 <Kernel_Task_Status_Get>
 23a:	80 5e       	subi	r24, 0xE0	; 224
 23c:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(6));
 240:	86 e0       	ldi	r24, 0x06	; 6
 242:	0e 94 77 06 	call	0xcee	; 0xcee <Kernel_Task_Sleep_Time_Get>
 246:	0e 94 ba 06 	call	0xd74	; 0xd74 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(6));
 24a:	86 e0       	ldi	r24, 0x06	; 6
 24c:	0e 94 81 06 	call	0xd02	; 0xd02 <Kernel_Task_Status_Get>
 250:	80 5e       	subi	r24, 0xE0	; 224
 252:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 256:	0e 94 9b 06 	call	0xd36	; 0xd36 <Kernel_Abs_High_Prio_Task_ID_Get>
 25a:	80 5f       	subi	r24, 0xF0	; 240
 25c:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 260:	0e 94 94 06 	call	0xd28	; 0xd28 <Kernel_Lowest_Prio_Get>
 264:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    
    //Kernel_Task_Sleep(60);
    Kernel_Task_Constant_Latency_Sleep();
 268:	0e 94 b6 05 	call	0xb6c	; 0xb6c <Kernel_Task_Constant_Latency_Sleep>
 26c:	d7 cf       	rjmp	.-82     	; 0x21c <Tasks_Task6+0x8>

0000026e <Tasks_Task5>:

void Tasks_Task5(void){
  
  //DDRC |= (1<<5);

  Debug_Init(0);
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 a1 06 	call	0xd42	; 0xd42 <Debug_Init>
  
  while(1){

    Kernel_Task_Constant_Latency(300);
 276:	8c e2       	ldi	r24, 0x2C	; 44
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	0e 94 a0 05 	call	0xb40	; 0xb40 <Kernel_Task_Constant_Latency>
    
    //PORTC ^= (1<<5);

	  Debug_Tx_Byte(5);
 27e:	85 e0       	ldi	r24, 0x05	; 5
 280:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	0e 94 77 06 	call	0xcee	; 0xcee <Kernel_Task_Sleep_Time_Get>
 28a:	0e 94 ba 06 	call	0xd74	; 0xd74 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	0e 94 81 06 	call	0xd02	; 0xd02 <Kernel_Task_Status_Get>
 294:	80 5e       	subi	r24, 0xE0	; 224
 296:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(5));
 29a:	85 e0       	ldi	r24, 0x05	; 5
 29c:	0e 94 77 06 	call	0xcee	; 0xcee <Kernel_Task_Sleep_Time_Get>
 2a0:	0e 94 ba 06 	call	0xd74	; 0xd74 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(5));
 2a4:	85 e0       	ldi	r24, 0x05	; 5
 2a6:	0e 94 81 06 	call	0xd02	; 0xd02 <Kernel_Task_Status_Get>
 2aa:	80 5e       	subi	r24, 0xE0	; 224
 2ac:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 2b0:	0e 94 9b 06 	call	0xd36	; 0xd36 <Kernel_Abs_High_Prio_Task_ID_Get>
 2b4:	80 5f       	subi	r24, 0xF0	; 240
 2b6:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 2ba:	0e 94 94 06 	call	0xd28	; 0xd28 <Kernel_Lowest_Prio_Get>
 2be:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    
    //Kernel_Task_Sleep(50);
    Kernel_Task_Constant_Latency_Sleep();
 2c2:	0e 94 b6 05 	call	0xb6c	; 0xb6c <Kernel_Task_Constant_Latency_Sleep>
 2c6:	d7 cf       	rjmp	.-82     	; 0x276 <Tasks_Task5+0x8>

000002c8 <Tasks_Task4>:

void Tasks_Task4(void){
  
  //DDRC |= (1<<4);

  Debug_Init(0);
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 a1 06 	call	0xd42	; 0xd42 <Debug_Init>
  
  while(1){
    
    Kernel_Task_Constant_Latency(300);
 2d0:	8c e2       	ldi	r24, 0x2C	; 44
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	0e 94 a0 05 	call	0xb40	; 0xb40 <Kernel_Task_Constant_Latency>

    //PORTC ^= (1<<4);

	  Debug_Tx_Byte(4);
 2d8:	84 e0       	ldi	r24, 0x04	; 4
 2da:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	0e 94 77 06 	call	0xcee	; 0xcee <Kernel_Task_Sleep_Time_Get>
 2e4:	0e 94 ba 06 	call	0xd74	; 0xd74 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	0e 94 81 06 	call	0xd02	; 0xd02 <Kernel_Task_Status_Get>
 2ee:	80 5e       	subi	r24, 0xE0	; 224
 2f0:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(4));
 2f4:	84 e0       	ldi	r24, 0x04	; 4
 2f6:	0e 94 77 06 	call	0xcee	; 0xcee <Kernel_Task_Sleep_Time_Get>
 2fa:	0e 94 ba 06 	call	0xd74	; 0xd74 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(4));
 2fe:	84 e0       	ldi	r24, 0x04	; 4
 300:	0e 94 81 06 	call	0xd02	; 0xd02 <Kernel_Task_Status_Get>
 304:	80 5e       	subi	r24, 0xE0	; 224
 306:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 30a:	0e 94 9b 06 	call	0xd36	; 0xd36 <Kernel_Abs_High_Prio_Task_ID_Get>
 30e:	80 5f       	subi	r24, 0xF0	; 240
 310:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 314:	0e 94 94 06 	call	0xd28	; 0xd28 <Kernel_Lowest_Prio_Get>
 318:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    
    //Kernel_Task_Sleep(40);
    Kernel_Task_Constant_Latency_Sleep();
 31c:	0e 94 b6 05 	call	0xb6c	; 0xb6c <Kernel_Task_Constant_Latency_Sleep>
 320:	d7 cf       	rjmp	.-82     	; 0x2d0 <Tasks_Task4+0x8>

00000322 <Tasks_Task3>:

void Tasks_Task3(void){
  
  //DDRC |= (1<<3);

  Debug_Init(0);
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 a1 06 	call	0xd42	; 0xd42 <Debug_Init>
  
  while(1){
    
    Kernel_Task_Constant_Latency(300);
 32a:	8c e2       	ldi	r24, 0x2C	; 44
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	0e 94 a0 05 	call	0xb40	; 0xb40 <Kernel_Task_Constant_Latency>

    //PORTC ^= (1<<3);

	  Debug_Tx_Byte(3);
 332:	83 e0       	ldi	r24, 0x03	; 3
 334:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	0e 94 77 06 	call	0xcee	; 0xcee <Kernel_Task_Sleep_Time_Get>
 33e:	0e 94 ba 06 	call	0xd74	; 0xd74 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	0e 94 81 06 	call	0xd02	; 0xd02 <Kernel_Task_Status_Get>
 348:	80 5e       	subi	r24, 0xE0	; 224
 34a:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(3));
 34e:	83 e0       	ldi	r24, 0x03	; 3
 350:	0e 94 77 06 	call	0xcee	; 0xcee <Kernel_Task_Sleep_Time_Get>
 354:	0e 94 ba 06 	call	0xd74	; 0xd74 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(3));
 358:	83 e0       	ldi	r24, 0x03	; 3
 35a:	0e 94 81 06 	call	0xd02	; 0xd02 <Kernel_Task_Status_Get>
 35e:	80 5e       	subi	r24, 0xE0	; 224
 360:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 364:	0e 94 9b 06 	call	0xd36	; 0xd36 <Kernel_Abs_High_Prio_Task_ID_Get>
 368:	80 5f       	subi	r24, 0xF0	; 240
 36a:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 36e:	0e 94 94 06 	call	0xd28	; 0xd28 <Kernel_Lowest_Prio_Get>
 372:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    
    //Kernel_Task_Sleep(30);
    Kernel_Task_Constant_Latency_Sleep();
 376:	0e 94 b6 05 	call	0xb6c	; 0xb6c <Kernel_Task_Constant_Latency_Sleep>
 37a:	d7 cf       	rjmp	.-82     	; 0x32a <Tasks_Task3+0x8>

0000037c <Tasks_Task2>:

void Tasks_Task2(void){
  
  //DDRC |= (1<<2);

  Debug_Init(0);
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 a1 06 	call	0xd42	; 0xd42 <Debug_Init>
  
  while(1){
    
    Kernel_Task_Constant_Latency(300);
 384:	8c e2       	ldi	r24, 0x2C	; 44
 386:	91 e0       	ldi	r25, 0x01	; 1
 388:	0e 94 a0 05 	call	0xb40	; 0xb40 <Kernel_Task_Constant_Latency>

    //PORTC ^= (1<<2);

	  Debug_Tx_Byte(2);
 38c:	82 e0       	ldi	r24, 0x02	; 2
 38e:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	0e 94 77 06 	call	0xcee	; 0xcee <Kernel_Task_Sleep_Time_Get>
 398:	0e 94 ba 06 	call	0xd74	; 0xd74 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	0e 94 81 06 	call	0xd02	; 0xd02 <Kernel_Task_Status_Get>
 3a2:	80 5e       	subi	r24, 0xE0	; 224
 3a4:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(2));
 3a8:	82 e0       	ldi	r24, 0x02	; 2
 3aa:	0e 94 77 06 	call	0xcee	; 0xcee <Kernel_Task_Sleep_Time_Get>
 3ae:	0e 94 ba 06 	call	0xd74	; 0xd74 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(2));
 3b2:	82 e0       	ldi	r24, 0x02	; 2
 3b4:	0e 94 81 06 	call	0xd02	; 0xd02 <Kernel_Task_Status_Get>
 3b8:	80 5e       	subi	r24, 0xE0	; 224
 3ba:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 3be:	0e 94 9b 06 	call	0xd36	; 0xd36 <Kernel_Abs_High_Prio_Task_ID_Get>
 3c2:	80 5f       	subi	r24, 0xF0	; 240
 3c4:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 3c8:	0e 94 94 06 	call	0xd28	; 0xd28 <Kernel_Lowest_Prio_Get>
 3cc:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>

    //Kernel_Task_Sleep(20);
    Kernel_Task_Constant_Latency_Sleep();
 3d0:	0e 94 b6 05 	call	0xb6c	; 0xb6c <Kernel_Task_Constant_Latency_Sleep>
 3d4:	d7 cf       	rjmp	.-82     	; 0x384 <Tasks_Task2+0x8>

000003d6 <Tasks_Task1>:
#include <util/delay.h>
#include "kernel.h"
#include "tasks.h"
#include "debug.h"

void Tasks_Task1(void){
 3d6:	1f 93       	push	r17
  
  //turn off HDC1080 VDD
  DDRD |= (1<<2);
 3d8:	52 9a       	sbi	0x0a, 2	; 10
  PORTD&=~(1<<2);
 3da:	5a 98       	cbi	0x0b, 2	; 11
  
  //Logic low to SCL & SDA
  DDRC |= (1<<4)|(1<<5);
 3dc:	87 b1       	in	r24, 0x07	; 7
 3de:	80 63       	ori	r24, 0x30	; 48
 3e0:	87 b9       	out	0x07, r24	; 7
  PORTC&=~((1<<4)|(1<<5));
 3e2:	88 b1       	in	r24, 0x08	; 8
 3e4:	8f 7c       	andi	r24, 0xCF	; 207
 3e6:	88 b9       	out	0x08, r24	; 8
  //PORTD&=~(1<<4);

  //DDRC |= (1<<1);


  Debug_Init(0);
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 a1 06 	call	0xd42	; 0xd42 <Debug_Init>
    Debug_Tx_Byte(TCCR2B);
    Debug_Tx_Byte(TCNT2);
    Debug_Tx_Byte(TIMSK2);
    Debug_Tx_Byte(TIFR2);
    Debug_Tx_Byte(ASSR);*/
    Kernel_Task_Constant_Latency(5);
 3f0:	85 e0       	ldi	r24, 0x05	; 5
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 a0 05 	call	0xb40	; 0xb40 <Kernel_Task_Constant_Latency>

    //PORTC ^= (1<<1);
    
    //LED on
    PORTD|= (1<<4);
 3f8:	5c 9a       	sbi	0x0b, 4	; 11

	  Debug_Tx_Byte(1);
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	0e 94 77 06 	call	0xcee	; 0xcee <Kernel_Task_Sleep_Time_Get>
 406:	0e 94 ba 06 	call	0xd74	; 0xd74 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	0e 94 81 06 	call	0xd02	; 0xd02 <Kernel_Task_Status_Get>
 410:	80 5e       	subi	r24, 0xE0	; 224
 412:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 416:	0e 94 9b 06 	call	0xd36	; 0xd36 <Kernel_Abs_High_Prio_Task_ID_Get>
 41a:	80 5f       	subi	r24, 0xF0	; 240
 41c:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 420:	0e 94 94 06 	call	0xd28	; 0xd28 <Kernel_Lowest_Prio_Get>
 424:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
 428:	10 e0       	ldi	r17, 0x00	; 0
    for(uint8_t i=0;i<200;i++){
      Debug_Tx_Byte(i);
 42a:	81 2f       	mov	r24, r17
 42c:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
	  Debug_Tx_Byte(1);
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
    for(uint8_t i=0;i<200;i++){
 430:	1f 5f       	subi	r17, 0xFF	; 255
 432:	18 3c       	cpi	r17, 0xC8	; 200
 434:	d1 f7       	brne	.-12     	; 0x42a <KER_TR+0x42>
      Debug_Tx_Byte(i);
    }

    //LED off
    PORTD&=~(1<<4);
 436:	5c 98       	cbi	0x0b, 4	; 11

    //Kernel_Task_Sleep(10);
    Kernel_Task_Constant_Latency_Sleep();
 438:	0e 94 b6 05 	call	0xb6c	; 0xb6c <Kernel_Task_Constant_Latency_Sleep>
 43c:	d9 cf       	rjmp	.-78     	; 0x3f0 <KER_TR+0x8>

0000043e <__vector_9>:
#endif                                                                                         

#ifdef  KER_TOSC_AS_TICK_SRC                                                                   
.global  __vector_9                                                                            
    __vector_9:                                           ;total 40.00uS @8MHz    (344 clocks) 
	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 43e:	5d 9a       	sbi	0x0b, 5	; 11
		KER_EXIT_SLEEP                                    ;exit sleep if enabled  (  5 clocks) 
 440:	20 91 53 00 	lds	r18, 0x0053
 444:	2e 7f       	andi	r18, 0xFE	; 254
 446:	20 93 53 00 	sts	0x0053, r18
        KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 44a:	0f 92       	push	r0
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	0f 92       	push	r0
 450:	1f 92       	push	r1
 452:	11 24       	eor	r1, r1
 454:	2f 92       	push	r2
 456:	3f 92       	push	r3
 458:	4f 92       	push	r4
 45a:	5f 92       	push	r5
 45c:	6f 92       	push	r6
 45e:	7f 92       	push	r7
 460:	8f 92       	push	r8
 462:	9f 92       	push	r9
 464:	af 92       	push	r10
 466:	bf 92       	push	r11
 468:	cf 92       	push	r12
 46a:	df 92       	push	r13
 46c:	ef 92       	push	r14
 46e:	ff 92       	push	r15
 470:	0f 93       	push	r16
 472:	1f 93       	push	r17
 474:	2f 93       	push	r18
 476:	3f 93       	push	r19
 478:	4f 93       	push	r20
 47a:	5f 93       	push	r21
 47c:	6f 93       	push	r22
 47e:	7f 93       	push	r23
 480:	8f 93       	push	r24
 482:	9f 93       	push	r25
 484:	af 93       	push	r26
 486:	bf 93       	push	r27
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
 48c:	ef 93       	push	r30
 48e:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 490:	e0 e1       	ldi	r30, 0x10	; 16
 492:	f1 e0       	ldi	r31, 0x01	; 1
 494:	20 91 07 01 	lds	r18, 0x0107
 498:	22 0f       	add	r18, r18
 49a:	e2 0f       	add	r30, r18
 49c:	20 e0       	ldi	r18, 0x00	; 0
 49e:	f2 1f       	adc	r31, r18
 4a0:	2d b7       	in	r18, 0x3d	; 61
 4a2:	3e b7       	in	r19, 0x3e	; 62
 4a4:	20 83       	st	Z, r18
 4a6:	31 83       	std	Z+1, r19	; 0x01
		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 4a8:	20 91 06 01 	lds	r18, 0x0106
 4ac:	20 93 46 00 	sts	0x0046, r18
		KER_TICK_INCREMENT                                ;increment tick counter ( 26 clocks) 
 4b0:	20 91 00 01 	lds	r18, 0x0100
 4b4:	23 95       	inc	r18
 4b6:	20 93 00 01 	sts	0x0100, r18
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	20 91 01 01 	lds	r18, 0x0101
 4c0:	23 1f       	adc	r18, r19
 4c2:	20 93 01 01 	sts	0x0101, r18
 4c6:	20 91 02 01 	lds	r18, 0x0102
 4ca:	23 1f       	adc	r18, r19
 4cc:	20 93 02 01 	sts	0x0102, r18
 4d0:	20 91 03 01 	lds	r18, 0x0103
 4d4:	23 1f       	adc	r18, r19
 4d6:	20 93 03 01 	sts	0x0103, r18
 4da:	20 91 04 01 	lds	r18, 0x0104
 4de:	23 1f       	adc	r18, r19
 4e0:	20 93 04 01 	sts	0x0104, r18
		LDI    R24               , SCH_MODE_HANDLER       ;set sch mode           (  1 clock ) 
 4e4:	80 e0       	ldi	r24, 0x00	; 0
		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
 4e6:	2f ef       	ldi	r18, 0xFF	; 255
 4e8:	20 93 09 01 	sts	0x0109, r18
 4ec:	20 e0       	ldi	r18, 0x00	; 0
 4ee:	20 93 0a 01 	sts	0x010A, r18
 4f2:	58 2f       	mov	r21, r24

000004f4 <_KER_SCH_LOOP9>:
 4f4:	20 93 07 01 	sts	0x0107, r18
 4f8:	85 2f       	mov	r24, r21
 4fa:	e6 e4       	ldi	r30, 0x46	; 70
 4fc:	f1 e0       	ldi	r31, 0x01	; 1
 4fe:	20 91 07 01 	lds	r18, 0x0107
 502:	22 0f       	add	r18, r18
 504:	e2 0f       	add	r30, r18
 506:	20 e0       	ldi	r18, 0x00	; 0
 508:	f2 1f       	adc	r31, r18
 50a:	20 81       	ld	r18, Z
 50c:	31 81       	ldd	r19, Z+1	; 0x01
 50e:	42 2f       	mov	r20, r18
 510:	43 2b       	or	r20, r19
 512:	59 f0       	breq	.+22     	; 0x52a <_VAL_NULL10>
 514:	81 30       	cpi	r24, 0x01	; 1
 516:	99 f0       	breq	.+38     	; 0x53e <_VAL_NOT_NULL10>
 518:	41 e0       	ldi	r20, 0x01	; 1
 51a:	24 1b       	sub	r18, r20
 51c:	40 e0       	ldi	r20, 0x00	; 0
 51e:	34 0b       	sbc	r19, r20
 520:	20 83       	st	Z, r18
 522:	31 83       	std	Z+1, r19	; 0x01
 524:	42 2f       	mov	r20, r18
 526:	43 2b       	or	r20, r19
 528:	51 f4       	brne	.+20     	; 0x53e <_VAL_NOT_NULL10>

0000052a <_VAL_NULL10>:
 52a:	e2 e3       	ldi	r30, 0x32	; 50
 52c:	f1 e0       	ldi	r31, 0x01	; 1
 52e:	20 91 07 01 	lds	r18, 0x0107
 532:	e2 0f       	add	r30, r18
 534:	20 e0       	ldi	r18, 0x00	; 0
 536:	f2 1f       	adc	r31, r18
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	80 83       	st	Z, r24
 53c:	08 c0       	rjmp	.+16     	; 0x54e <_EXIT_SLP_TIME10>

0000053e <_VAL_NOT_NULL10>:
 53e:	e2 e3       	ldi	r30, 0x32	; 50
 540:	f1 e0       	ldi	r31, 0x01	; 1
 542:	20 91 07 01 	lds	r18, 0x0107
 546:	e2 0f       	add	r30, r18
 548:	20 e0       	ldi	r18, 0x00	; 0
 54a:	f2 1f       	adc	r31, r18
 54c:	80 81       	ld	r24, Z

0000054e <_EXIT_SLP_TIME10>:
 54e:	81 30       	cpi	r24, 0x01	; 1
 550:	19 f0       	breq	.+6      	; 0x558 <_KER_CALC_PRIO9>
 552:	84 30       	cpi	r24, 0x04	; 4
 554:	09 f0       	breq	.+2      	; 0x558 <_KER_CALC_PRIO9>
 556:	12 c0       	rjmp	.+36     	; 0x57c <_KER_SCH_NEXT9>

00000558 <_KER_CALC_PRIO9>:
 558:	ec e3       	ldi	r30, 0x3C	; 60
 55a:	f1 e0       	ldi	r31, 0x01	; 1
 55c:	20 e0       	ldi	r18, 0x00	; 0
 55e:	80 91 07 01 	lds	r24, 0x0107
 562:	e8 0f       	add	r30, r24
 564:	f2 1f       	adc	r31, r18
 566:	80 81       	ld	r24, Z
 568:	20 91 09 01 	lds	r18, 0x0109
 56c:	82 17       	cp	r24, r18
 56e:	30 f4       	brcc	.+12     	; 0x57c <_KER_SCH_NEXT9>
 570:	80 93 09 01 	sts	0x0109, r24
 574:	20 91 07 01 	lds	r18, 0x0107
 578:	20 93 0a 01 	sts	0x010A, r18

0000057c <_KER_SCH_NEXT9>:
 57c:	20 91 07 01 	lds	r18, 0x0107
 580:	23 95       	inc	r18
 582:	30 91 08 01 	lds	r19, 0x0108
 586:	23 17       	cp	r18, r19
 588:	08 f4       	brcc	.+2      	; 0x58c <_KER_SCH_EXIT9>
 58a:	b4 cf       	rjmp	.-152    	; 0x4f4 <_KER_SCH_LOOP9>

0000058c <_KER_SCH_EXIT9>:
 58c:	20 91 0a 01 	lds	r18, 0x010A
 590:	20 93 07 01 	sts	0x0107, r18
		KER_CPU_USAGE                                     ;calc cpu usage         ( 26 clocks) 
 594:	20 91 07 01 	lds	r18, 0x0107
 598:	22 23       	and	r18, r18
 59a:	29 f0       	breq	.+10     	; 0x5a6 <_KER_USG_TICK15>
 59c:	20 91 0c 01 	lds	r18, 0x010C
 5a0:	23 95       	inc	r18
 5a2:	20 93 0c 01 	sts	0x010C, r18

000005a6 <_KER_USG_TICK15>:
 5a6:	20 91 0b 01 	lds	r18, 0x010B
 5aa:	23 95       	inc	r18
 5ac:	24 36       	cpi	r18, 0x64	; 100
 5ae:	40 f0       	brcs	.+16     	; 0x5c0 <_KER_USG_UTC_SV15>
 5b0:	20 e0       	ldi	r18, 0x00	; 0
 5b2:	30 91 0c 01 	lds	r19, 0x010C
 5b6:	30 93 0d 01 	sts	0x010D, r19
 5ba:	30 e0       	ldi	r19, 0x00	; 0
 5bc:	30 93 0c 01 	sts	0x010C, r19

000005c0 <_KER_USG_UTC_SV15>:
 5c0:	20 93 0b 01 	sts	0x010B, r18
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 5c4:	e0 e1       	ldi	r30, 0x10	; 16
 5c6:	f1 e0       	ldi	r31, 0x01	; 1
 5c8:	20 91 07 01 	lds	r18, 0x0107
 5cc:	22 0f       	add	r18, r18
 5ce:	e2 0f       	add	r30, r18
 5d0:	20 e0       	ldi	r18, 0x00	; 0
 5d2:	f2 1f       	adc	r31, r18
 5d4:	20 81       	ld	r18, Z
 5d6:	31 81       	ldd	r19, Z+1	; 0x01
 5d8:	2d bf       	out	0x3d, r18	; 61
 5da:	3e bf       	out	0x3e, r19	; 62
		KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
 5dc:	ff 91       	pop	r31
 5de:	ef 91       	pop	r30
 5e0:	df 91       	pop	r29
 5e2:	cf 91       	pop	r28
 5e4:	bf 91       	pop	r27
 5e6:	af 91       	pop	r26
 5e8:	9f 91       	pop	r25
 5ea:	8f 91       	pop	r24
 5ec:	7f 91       	pop	r23
 5ee:	6f 91       	pop	r22
 5f0:	5f 91       	pop	r21
 5f2:	4f 91       	pop	r20
 5f4:	3f 91       	pop	r19
 5f6:	2f 91       	pop	r18
 5f8:	1f 91       	pop	r17
 5fa:	0f 91       	pop	r16
 5fc:	ff 90       	pop	r15
 5fe:	ef 90       	pop	r14
 600:	df 90       	pop	r13
 602:	cf 90       	pop	r12
 604:	bf 90       	pop	r11
 606:	af 90       	pop	r10
 608:	9f 90       	pop	r9
 60a:	8f 90       	pop	r8
 60c:	7f 90       	pop	r7
 60e:	6f 90       	pop	r6
 610:	5f 90       	pop	r5
 612:	4f 90       	pop	r4
 614:	3f 90       	pop	r3
 616:	2f 90       	pop	r2
 618:	1f 90       	pop	r1
 61a:	0f 90       	pop	r0
 61c:	0f be       	out	0x3f, r0	; 63
 61e:	0f 90       	pop	r0
	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 620:	5d 98       	cbi	0x0b, 5	; 11
		RETI                                              ;return from interrupt  (  4 clocks) 
 622:	18 95       	reti

00000624 <Kernel_SysTick_Reg_Init>:
;used registers          : R18, R19, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
;arg registers           : R24(Prescaler), R22(ReloadVal)                                      
;return registers        : None                                                                
;unsafe access registers : R18, R19, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
Kernel_SysTick_Reg_Init:                                  ;total 11.50uS @8MHz    ( 92 clocks) 
        CLI                                               ;disable global int     (  1 clock ) 
 624:	f8 94       	cli
		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 626:	5d 98       	cbi	0x0b, 5	; 11
 628:	55 9a       	sbi	0x0a, 5	; 10
        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 62a:	a0 91 24 01 	lds	r26, 0x0124
 62e:	b0 91 25 01 	lds	r27, 0x0125
 632:	2d b7       	in	r18, 0x3d	; 61
 634:	3e b7       	in	r19, 0x3e	; 62
 636:	2d 93       	st	X+, r18
 638:	3d 93       	st	X+, r19
 63a:	ed 93       	st	X+, r30
 63c:	fd 93       	st	X+, r31
 63e:	a0 93 24 01 	sts	0x0124, r26
 642:	b0 93 25 01 	sts	0x0125, r27
		;clear reg                                                                             
		LDI   R18                , 0x00                   ;set 0x00 to R18        (  1 clock ) 
 646:	20 e0       	ldi	r18, 0x00	; 0
		;clear tick counter                                                                    
		STS   KerBase+OFB_TICK0  , R18                    ;clear  KerBase[0]      (  2 clocks) 
 648:	20 93 00 01 	sts	0x0100, r18
		STS   KerBase+OFB_TICK1  , R18                    ;clear  KerBase[1]      (  2 clocks) 
 64c:	20 93 01 01 	sts	0x0101, r18
		STS   KerBase+OFB_TICK2  , R18                    ;clear  KerBase[2]      (  2 clocks) 
 650:	20 93 02 01 	sts	0x0102, r18
		STS   KerBase+OFB_TICK3  , R18                    ;clear  KerBase[3]      (  2 clocks) 
 654:	20 93 03 01 	sts	0x0103, r18
		STS   KerBase+OFB_TICK4  , R18                    ;clear  KerBase[4]      (  2 clocks) 
 658:	20 93 04 01 	sts	0x0104, r18
		;clear system registers                                                                
		STS   KerBase+OFB_PRS    , R18                    ;clear  KerBase[5]      (  2 clocks) 
 65c:	20 93 05 01 	sts	0x0105, r18
		STS   KerBase+OFB_RLD    , R18                    ;clear  KerBase[6]      (  2 clocks) 
 660:	20 93 06 01 	sts	0x0106, r18
		STS   KerBase+OFB_TID    , R18                    ;clear  KerBase[7]      (  2 clocks) 
 664:	20 93 07 01 	sts	0x0107, r18
		STS   KerBase+OFB_NTSK   , R18                    ;clear  KerBase[8]      (  2 clocks) 
 668:	20 93 08 01 	sts	0x0108, r18
		STS   KerBase+OFB_LPR    , R18                    ;clear  KerBase[9]      (  2 clocks) 
 66c:	20 93 09 01 	sts	0x0109, r18
        STS   KerBase+OFB_PTID   , R18                    ;clear  KerBase[10]     (  2 clocks) 
 670:	20 93 0a 01 	sts	0x010A, r18
		STS   KerBase+OFB_UTC    , R18                    ;clear  KerBase[11]     (  2 clocks) 
 674:	20 93 0b 01 	sts	0x010B, r18
		STS   KerBase+OFB_UATC   , R18                    ;clear  KerBase[12]     (  2 clocks) 
 678:	20 93 0c 01 	sts	0x010C, r18
		STS   KerBase+OFB_USAGE  , R18                    ;clear  KerBase[13]     (  2 clocks) 
 67c:	20 93 0d 01 	sts	0x010D, r18
		STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
		LDI   R18                , 0x00                   ;clear WDE              (  1 clock ) 
		STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
		#endif                                                                                 
		#ifdef KER_TOSC_AS_TICK_SRC                                                            
        LDI   R18                , 0x00                   ;clear interrupt enbits (  1 clock ) 
 680:	20 e0       	ldi	r18, 0x00	; 0
		STS   SRTIMSK2           , R18                    ;set val to TIMSK2      (  2 clocks) 
 682:	20 93 70 00 	sts	0x0070, r18
		LDI   R18                , 0x00                   ;clear reg              (  1 clock ) 
 686:	20 e0       	ldi	r18, 0x00	; 0
		STS   SRTCCR2B           , R18                    ;set val to TCCR2B      (  2 clocks) 
 688:	20 93 b1 00 	sts	0x00B1, r18
		LDI   R18                , 0x00                   ;clear AS2 bit          (  1 clock ) 
 68c:	20 e0       	ldi	r18, 0x00	; 0
		STS   SRASSR             , R18                    ;set val to ASSR        (  2 clocks) 
 68e:	20 93 b6 00 	sts	0x00B6, r18
		#endif                                                                                 
		;save values for future use                                                            
		STS   KerBase+OFB_PRS    , R24                    ;KerBase[5] prescaler   (  2 clocks) 
 692:	80 93 05 01 	sts	0x0105, r24
		STS   KerBase+OFB_RLD    , R22                    ;KerBase[6] reload val  (  2 clocks) 
 696:	60 93 06 01 	sts	0x0106, r22
        KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 69a:	a0 91 24 01 	lds	r26, 0x0124
 69e:	b0 91 25 01 	lds	r27, 0x0125
 6a2:	fe 91       	ld	r31, -X
 6a4:	ee 91       	ld	r30, -X
 6a6:	3e 91       	ld	r19, -X
 6a8:	2e 91       	ld	r18, -X
 6aa:	2d bf       	out	0x3d, r18	; 61
 6ac:	3e bf       	out	0x3e, r19	; 62
 6ae:	a0 93 24 01 	sts	0x0124, r26
 6b2:	b0 93 25 01 	sts	0x0125, r27
		RET                                               ;return from subroutine (  4 clocks) 
 6b6:	08 95       	ret

000006b8 <Kernel_Task_Create>:
;used registers          : R18, R19, R20, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)    
;arg registers           : R25:R24(FuncPtr), R22(TaskPriority)                                 
;return registers        : None                                                                
;unsafe access registers : R18, R19, R20, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)    
Kernel_Task_Create:                                       ;total 21.50uS @8MHz    (172 clocks) 
        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 6b8:	a0 91 24 01 	lds	r26, 0x0124
 6bc:	b0 91 25 01 	lds	r27, 0x0125
 6c0:	2d b7       	in	r18, 0x3d	; 61
 6c2:	3e b7       	in	r19, 0x3e	; 62
 6c4:	2d 93       	st	X+, r18
 6c6:	3d 93       	st	X+, r19
 6c8:	ed 93       	st	X+, r30
 6ca:	fd 93       	st	X+, r31
 6cc:	a0 93 24 01 	sts	0x0124, r26
 6d0:	b0 93 25 01 	sts	0x0125, r27
		;set priority to KerSchPr+task_id                                                      
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 6d4:	ec e3       	ldi	r30, 0x3C	; 60
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 6d6:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 6d8:	20 91 07 01 	lds	r18, 0x0107
 6dc:	e2 0f       	add	r30, r18
 6de:	20 e0       	ldi	r18, 0x00	; 0
 6e0:	f2 1f       	adc	r31, r18
		ST    Z                  , R22                    ;save priority          (  2 clocks) 
 6e2:	60 83       	st	Z, r22
		;set task status to KerSchSts+task_id                                                  
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 6e4:	e2 e3       	ldi	r30, 0x32	; 50
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 6e6:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 6e8:	20 91 07 01 	lds	r18, 0x0107
 6ec:	e2 0f       	add	r30, r18
 6ee:	20 e0       	ldi	r18, 0x00	; 0
 6f0:	f2 1f       	adc	r31, r18
		LDI   R18                , TASK_READY             ;set status as ready    (  1 clock ) 
 6f2:	21 e0       	ldi	r18, 0x01	; 1
		ST    Z                  , R18                    ;save status            (  2 clocks) 
 6f4:	20 83       	st	Z, r18
		;stack pointer for current task (KerStack + KER_STK_SZ*(task_id+1) - 1) ->stack top    
		LDS   R18                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 6f6:	20 91 07 01 	lds	r18, 0x0107
		INC   R18                                         ;increment task_id      (  1 clock ) 
 6fa:	23 95       	inc	r18
		LDI   R19                , KER_STK_SZ             ;load stack size        (  1 clock ) 
 6fc:	30 e8       	ldi	r19, 0x80	; 128
		MUL   R18                , R19                    ;multiply to get offset (  2 clocks) 
 6fe:	23 9f       	mul	r18, r19
		MOV   ZL                 , R0                     ;load multiplied low    (  1 clocks) 
 700:	e0 2d       	mov	r30, r0
		MOV   ZH                 , R1                     ;load multiplied high   (  1 clocks) 
 702:	f1 2d       	mov	r31, r1
		SBIW  ZL                 , 0x01                   ;dec multiplied val-1   (  2 clocks) 
 704:	31 97       	sbiw	r30, 0x01	; 1
		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 706:	11 24       	eor	r1, r1
		LDI   R18                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
 708:	2a e5       	ldi	r18, 0x5A	; 90
		LDI   R19                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
 70a:	31 e0       	ldi	r19, 0x01	; 1
		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
 70c:	e2 0f       	add	r30, r18
		ADC   ZH                 , R19                    ;add high bytes+carry   (  1 clock ) 
 70e:	f3 1f       	adc	r31, r19
		OUT   IOSPL              , ZL                     ;load SPL               (  1 clock ) 
 710:	ed bf       	out	0x3d, r30	; 61
        OUT   IOSPH              , ZH                     ;load SPH               (  1 clock ) 
 712:	fe bf       	out	0x3e, r31	; 62
		;function argument directly returns word address                                       
	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
 714:	8f 93       	push	r24
		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 716:	9f 93       	push	r25
		;push context to stack of this task                                                    
		KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 718:	0f 92       	push	r0
 71a:	0f b6       	in	r0, 0x3f	; 63
 71c:	0f 92       	push	r0
 71e:	1f 92       	push	r1
 720:	11 24       	eor	r1, r1
 722:	2f 92       	push	r2
 724:	3f 92       	push	r3
 726:	4f 92       	push	r4
 728:	5f 92       	push	r5
 72a:	6f 92       	push	r6
 72c:	7f 92       	push	r7
 72e:	8f 92       	push	r8
 730:	9f 92       	push	r9
 732:	af 92       	push	r10
 734:	bf 92       	push	r11
 736:	cf 92       	push	r12
 738:	df 92       	push	r13
 73a:	ef 92       	push	r14
 73c:	ff 92       	push	r15
 73e:	0f 93       	push	r16
 740:	1f 93       	push	r17
 742:	2f 93       	push	r18
 744:	3f 93       	push	r19
 746:	4f 93       	push	r20
 748:	5f 93       	push	r21
 74a:	6f 93       	push	r22
 74c:	7f 93       	push	r23
 74e:	8f 93       	push	r24
 750:	9f 93       	push	r25
 752:	af 93       	push	r26
 754:	bf 93       	push	r27
 756:	cf 93       	push	r28
 758:	df 93       	push	r29
 75a:	ef 93       	push	r30
 75c:	ff 93       	push	r31
		;read stack pointer of current task (necessary when restore)                           
		IN    R18                , IOSPL                  ;read SPL               (  1 clock ) 
 75e:	2d b7       	in	r18, 0x3d	; 61
        IN    R19                , IOSPH                  ;read SPH               (  1 clock ) 
 760:	3e b7       	in	r19, 0x3e	; 62
		;calculate the address where current task's SP will be stored and store SP             
		LDS   R20                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 762:	40 91 07 01 	lds	r20, 0x0107
		LSL   R20                                         ;left shift to multiply (  1 clock ) 
 766:	44 0f       	add	r20, r20
		LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 768:	e0 e1       	ldi	r30, 0x10	; 16
		LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 76a:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R20                    ;add offset to array    (  1 clock ) 
 76c:	e4 0f       	add	r30, r20
		LDI   R20                , 0x00                   ;clear reg              (  1 clock ) 
 76e:	40 e0       	ldi	r20, 0x00	; 0
		ADC   ZH                 , R20                    ;add carry if any       (  1 clock ) 
 770:	f4 1f       	adc	r31, r20
		ST    Z+                 , R18                    ;SPL at KerPSp+offset   (  2 clocks) 
 772:	21 93       	st	Z+, r18
		ST    Z                  , R19                    ;SPH at KerPSp+offset   (  2 clocks) 
 774:	30 83       	st	Z, r19
		;increment task_id                                                                     
		LDS   R18                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 776:	20 91 07 01 	lds	r18, 0x0107
		INC   R18                                         ;increment task_id      (  1 clock ) 
 77a:	23 95       	inc	r18
		STS   KerBase+OFB_TID    , R18                    ;store task_id          (  2 clocks) 
 77c:	20 93 07 01 	sts	0x0107, r18
		;increment ntask                                                                       
		LDS   R18                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 780:	20 91 08 01 	lds	r18, 0x0108
		INC   R18                                         ;increment ntask        (  1 clock ) 
 784:	23 95       	inc	r18
		STS   KerBase+OFB_NTSK   , R18                    ;store ntask            (  2 clocks) 
 786:	20 93 08 01 	sts	0x0108, r18
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 78a:	a0 91 24 01 	lds	r26, 0x0124
 78e:	b0 91 25 01 	lds	r27, 0x0125
 792:	fe 91       	ld	r31, -X
 794:	ee 91       	ld	r30, -X
 796:	3e 91       	ld	r19, -X
 798:	2e 91       	ld	r18, -X
 79a:	2d bf       	out	0x3d, r18	; 61
 79c:	3e bf       	out	0x3e, r19	; 62
 79e:	a0 93 24 01 	sts	0x0124, r26
 7a2:	b0 93 25 01 	sts	0x0125, r27
		RET                                               ;return from subroutine (  4 clocks) 
 7a6:	08 95       	ret

000007a8 <Kernel_Start_Tasks>:
;used registers          : R0~R31                                                              
;arg registers           : None                                                                
;return registers        : None                                                                
;unsafe access registers : R18, R19, R20, R24, R25, R30(ZL), R31(ZH)                           
Kernel_Start_Tasks:                                       ;total 25.63uS @8MHz    (205 clocks) 
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 7a8:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
 7aa:	2f ef       	ldi	r18, 0xFF	; 255
 7ac:	20 93 09 01 	sts	0x0109, r18
 7b0:	20 e0       	ldi	r18, 0x00	; 0
 7b2:	20 93 0a 01 	sts	0x010A, r18
 7b6:	58 2f       	mov	r21, r24

000007b8 <_KER_SCH_LOOP32>:
 7b8:	20 93 07 01 	sts	0x0107, r18
 7bc:	85 2f       	mov	r24, r21
 7be:	e6 e4       	ldi	r30, 0x46	; 70
 7c0:	f1 e0       	ldi	r31, 0x01	; 1
 7c2:	20 91 07 01 	lds	r18, 0x0107
 7c6:	22 0f       	add	r18, r18
 7c8:	e2 0f       	add	r30, r18
 7ca:	20 e0       	ldi	r18, 0x00	; 0
 7cc:	f2 1f       	adc	r31, r18
 7ce:	20 81       	ld	r18, Z
 7d0:	31 81       	ldd	r19, Z+1	; 0x01
 7d2:	42 2f       	mov	r20, r18
 7d4:	43 2b       	or	r20, r19
 7d6:	59 f0       	breq	.+22     	; 0x7ee <_VAL_NULL33>
 7d8:	81 30       	cpi	r24, 0x01	; 1
 7da:	99 f0       	breq	.+38     	; 0x802 <_VAL_NOT_NULL33>
 7dc:	41 e0       	ldi	r20, 0x01	; 1
 7de:	24 1b       	sub	r18, r20
 7e0:	40 e0       	ldi	r20, 0x00	; 0
 7e2:	34 0b       	sbc	r19, r20
 7e4:	20 83       	st	Z, r18
 7e6:	31 83       	std	Z+1, r19	; 0x01
 7e8:	42 2f       	mov	r20, r18
 7ea:	43 2b       	or	r20, r19
 7ec:	51 f4       	brne	.+20     	; 0x802 <_VAL_NOT_NULL33>

000007ee <_VAL_NULL33>:
 7ee:	e2 e3       	ldi	r30, 0x32	; 50
 7f0:	f1 e0       	ldi	r31, 0x01	; 1
 7f2:	20 91 07 01 	lds	r18, 0x0107
 7f6:	e2 0f       	add	r30, r18
 7f8:	20 e0       	ldi	r18, 0x00	; 0
 7fa:	f2 1f       	adc	r31, r18
 7fc:	81 e0       	ldi	r24, 0x01	; 1
 7fe:	80 83       	st	Z, r24
 800:	08 c0       	rjmp	.+16     	; 0x812 <_EXIT_SLP_TIME33>

00000802 <_VAL_NOT_NULL33>:
 802:	e2 e3       	ldi	r30, 0x32	; 50
 804:	f1 e0       	ldi	r31, 0x01	; 1
 806:	20 91 07 01 	lds	r18, 0x0107
 80a:	e2 0f       	add	r30, r18
 80c:	20 e0       	ldi	r18, 0x00	; 0
 80e:	f2 1f       	adc	r31, r18
 810:	80 81       	ld	r24, Z

00000812 <_EXIT_SLP_TIME33>:
 812:	81 30       	cpi	r24, 0x01	; 1
 814:	19 f0       	breq	.+6      	; 0x81c <_KER_CALC_PRIO32>
 816:	84 30       	cpi	r24, 0x04	; 4
 818:	09 f0       	breq	.+2      	; 0x81c <_KER_CALC_PRIO32>
 81a:	12 c0       	rjmp	.+36     	; 0x840 <_KER_SCH_NEXT32>

0000081c <_KER_CALC_PRIO32>:
 81c:	ec e3       	ldi	r30, 0x3C	; 60
 81e:	f1 e0       	ldi	r31, 0x01	; 1
 820:	20 e0       	ldi	r18, 0x00	; 0
 822:	80 91 07 01 	lds	r24, 0x0107
 826:	e8 0f       	add	r30, r24
 828:	f2 1f       	adc	r31, r18
 82a:	80 81       	ld	r24, Z
 82c:	20 91 09 01 	lds	r18, 0x0109
 830:	82 17       	cp	r24, r18
 832:	30 f4       	brcc	.+12     	; 0x840 <_KER_SCH_NEXT32>
 834:	80 93 09 01 	sts	0x0109, r24
 838:	20 91 07 01 	lds	r18, 0x0107
 83c:	20 93 0a 01 	sts	0x010A, r18

00000840 <_KER_SCH_NEXT32>:
 840:	20 91 07 01 	lds	r18, 0x0107
 844:	23 95       	inc	r18
 846:	30 91 08 01 	lds	r19, 0x0108
 84a:	23 17       	cp	r18, r19
 84c:	08 f4       	brcc	.+2      	; 0x850 <_KER_SCH_EXIT32>
 84e:	b4 cf       	rjmp	.-152    	; 0x7b8 <_KER_SCH_LOOP32>

00000850 <_KER_SCH_EXIT32>:
 850:	20 91 0a 01 	lds	r18, 0x010A
 854:	20 93 07 01 	sts	0x0107, r18
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 858:	e0 e1       	ldi	r30, 0x10	; 16
 85a:	f1 e0       	ldi	r31, 0x01	; 1
 85c:	20 91 07 01 	lds	r18, 0x0107
 860:	22 0f       	add	r18, r18
 862:	e2 0f       	add	r30, r18
 864:	20 e0       	ldi	r18, 0x00	; 0
 866:	f2 1f       	adc	r31, r18
 868:	20 81       	ld	r18, Z
 86a:	31 81       	ldd	r19, Z+1	; 0x01
 86c:	2d bf       	out	0x3d, r18	; 61
 86e:	3e bf       	out	0x3e, r19	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 870:	ff 91       	pop	r31
 872:	ef 91       	pop	r30
 874:	df 91       	pop	r29
 876:	cf 91       	pop	r28
 878:	bf 91       	pop	r27
 87a:	af 91       	pop	r26
 87c:	9f 91       	pop	r25
 87e:	8f 91       	pop	r24
 880:	7f 91       	pop	r23
 882:	6f 91       	pop	r22
 884:	5f 91       	pop	r21
 886:	4f 91       	pop	r20
 888:	3f 91       	pop	r19
 88a:	2f 91       	pop	r18
 88c:	1f 91       	pop	r17
 88e:	0f 91       	pop	r16
 890:	ff 90       	pop	r15
 892:	ef 90       	pop	r14
 894:	df 90       	pop	r13
 896:	cf 90       	pop	r12
 898:	bf 90       	pop	r11
 89a:	af 90       	pop	r10
 89c:	9f 90       	pop	r9
 89e:	8f 90       	pop	r8
 8a0:	7f 90       	pop	r7
 8a2:	6f 90       	pop	r6
 8a4:	5f 90       	pop	r5
 8a6:	4f 90       	pop	r4
 8a8:	3f 90       	pop	r3
 8aa:	2f 90       	pop	r2
 8ac:	1f 90       	pop	r1
 8ae:	0f 90       	pop	r0
 8b0:	0f be       	out	0x3f, r0	; 63
 8b2:	0f 90       	pop	r0
 8b4:	78 94       	sei
		                                                                                       
		STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
		SEI                                               ;force enable interrupt (  1 clock ) 
		#endif                                                                                 
                                                                                               
		#ifdef KER_TOSC_AS_TICK_SRC                                                            
 8b6:	20 e0       	ldi	r18, 0x00	; 0
 8b8:	20 93 70 00 	sts	0x0070, r18
 8bc:	20 e2       	ldi	r18, 0x20	; 32
 8be:	20 93 b6 00 	sts	0x00B6, r18
 8c2:	20 e0       	ldi	r18, 0x00	; 0
 8c4:	20 93 b0 00 	sts	0x00B0, r18
 8c8:	25 e0       	ldi	r18, 0x05	; 5
 8ca:	20 93 b1 00 	sts	0x00B1, r18
 8ce:	20 e0       	ldi	r18, 0x00	; 0
 8d0:	20 93 b2 00 	sts	0x00B2, r18

000008d4 <_KER_TC2_AUB43>:
 8d4:	20 91 b6 00 	lds	r18, 0x00B6
 8d8:	22 70       	andi	r18, 0x02	; 2
 8da:	e1 f7       	brne	.-8      	; 0x8d4 <_KER_TC2_AUB43>

000008dc <_KER_TC2_BUB43>:
 8dc:	20 91 b6 00 	lds	r18, 0x00B6
 8e0:	21 70       	andi	r18, 0x01	; 1
 8e2:	e1 f7       	brne	.-8      	; 0x8dc <_KER_TC2_BUB43>

000008e4 <_KER_TC2_UB43>:
 8e4:	20 91 b6 00 	lds	r18, 0x00B6
 8e8:	20 71       	andi	r18, 0x10	; 16
 8ea:	e1 f7       	brne	.-8      	; 0x8e4 <_KER_TC2_UB43>

000008ec <_KER_TC2_TOV243>:
 8ec:	20 91 37 00 	lds	r18, 0x0037
 8f0:	21 70       	andi	r18, 0x01	; 1
 8f2:	19 f0       	breq	.+6      	; 0x8fa <_KER_TC2_OCF2A43>
 8f4:	21 e0       	ldi	r18, 0x01	; 1
 8f6:	20 93 37 00 	sts	0x0037, r18

000008fa <_KER_TC2_OCF2A43>:
 8fa:	20 91 37 00 	lds	r18, 0x0037
 8fe:	22 70       	andi	r18, 0x02	; 2
 900:	19 f0       	breq	.+6      	; 0x908 <_KER_TC2_OCF2B43>
 902:	22 e0       	ldi	r18, 0x02	; 2
 904:	20 93 37 00 	sts	0x0037, r18

00000908 <_KER_TC2_OCF2B43>:
 908:	20 91 37 00 	lds	r18, 0x0037
 90c:	24 70       	andi	r18, 0x04	; 4
 90e:	19 f0       	breq	.+6      	; 0x916 <_KER_TC2_INTEN43>
 910:	24 e0       	ldi	r18, 0x04	; 4
 912:	20 93 37 00 	sts	0x0037, r18

00000916 <_KER_TC2_INTEN43>:
 916:	21 e0       	ldi	r18, 0x01	; 1
 918:	20 93 70 00 	sts	0x0070, r18
 91c:	78 94       	sei
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
		;config timer for system tick                                                          
		KER_TIMER_INIT                                    ;init timer, int enable ( 12 clocks) 
		;execute return to jump to highest priority task                                       
		RET                                               ;return from subroutine (  4 clocks) 
 91e:	08 95       	ret

00000920 <Kernel_Init>:
;used registers          : R1, R18, R19, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
;arg registers           : None                                                                
;return registers        : None                                                                
;unsafe access registers : R1, R18, R19, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
Kernel_Init:                                              ;total 39.75uS @8MHz    (318 clocks) 
		CLR   R1                                          ;gcc expects            (  1 clock ) 
 920:	11 24       	eor	r1, r1
        ;store stack top (for MSP) addr to KerSSZ+OFM_MSPI0:1                                  
		LDI   R18                , lo8(KerSSZ+OFM_MSPS)   ;load low address       (  1 clock ) 
 922:	26 e2       	ldi	r18, 0x26	; 38
		LDI   R19                , hi8(KerSSZ+OFM_MSPS)   ;load high address      (  1 clock ) 
 924:	31 e0       	ldi	r19, 0x01	; 1
        STS   KerSSZ+OFM_MSPI+0  , R18                    ;set mspi to stack top  (  2 clocks) 
 926:	20 93 24 01 	sts	0x0124, r18
		STS   KerSSZ+OFM_MSPI+1  , R19                    ;set mspi to stack top  (  2 clocks) 
 92a:	30 93 25 01 	sts	0x0125, r19
		KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 92e:	a0 91 24 01 	lds	r26, 0x0124
 932:	b0 91 25 01 	lds	r27, 0x0125
 936:	2d b7       	in	r18, 0x3d	; 61
 938:	3e b7       	in	r19, 0x3e	; 62
 93a:	2d 93       	st	X+, r18
 93c:	3d 93       	st	X+, r19
 93e:	ed 93       	st	X+, r30
 940:	fd 93       	st	X+, r31
 942:	a0 93 24 01 	sts	0x0124, r26
 946:	b0 93 25 01 	sts	0x0125, r27
		;init timer for kernel                                                                 
		LDI   R24                , 0x03                   ;set prescaler          (  1 clock ) 
 94a:	83 e0       	ldi	r24, 0x03	; 3
		LDI   R22                , 0x82                   ;set reload val         (  1 clock ) 
 94c:	62 e8       	ldi	r22, 0x82	; 130
		CALL  Kernel_SysTick_Reg_Init                     ;init timer             ( 92 clocks) 
 94e:	0e 94 12 03 	call	0x624	; 0x624 <Kernel_SysTick_Reg_Init>
		;create idle task at task_id 0, priority 0xFF (lowest)                                 
		LDI   R24                , lo8(Kernel_Task_Idle)  ;load func addr low     (  1 clock ) 
 952:	8e e7       	ldi	r24, 0x7E	; 126
		LDI   R25                , hi8(Kernel_Task_Idle)  ;load func addr high    (  1 clock ) 
 954:	99 e0       	ldi	r25, 0x09	; 9
		LSR   R25                                         ;right shift to divide  (  1 clock ) 
 956:	96 95       	lsr	r25
		ROR   R24                                         ;rotate right th carry  (  1 clock ) 
 958:	87 95       	ror	r24
		LDI   R22                , 0xFF                   ;set max val            (  1 clock ) 
 95a:	6f ef       	ldi	r22, 0xFF	; 255
		CALL  Kernel_Task_Create                          ;init idle task         (172 clocks) 
 95c:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <Kernel_Task_Create>
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 960:	a0 91 24 01 	lds	r26, 0x0124
 964:	b0 91 25 01 	lds	r27, 0x0125
 968:	fe 91       	ld	r31, -X
 96a:	ee 91       	ld	r30, -X
 96c:	3e 91       	ld	r19, -X
 96e:	2e 91       	ld	r18, -X
 970:	2d bf       	out	0x3d, r18	; 61
 972:	3e bf       	out	0x3e, r19	; 62
 974:	a0 93 24 01 	sts	0x0124, r26
 978:	b0 93 25 01 	sts	0x0125, r27
		;execute return to jump to task0, pushed while task init                               
		RET                                               ;return from subroutine (  4 clocks) 
 97c:	08 95       	ret

0000097e <Kernel_Task_Idle>:
                                                                                               
		#ifdef KER_SLEEP_MODE_POWER_DOWN                                                       
		LDI   R18                , 0x04                   ;set SM[2:0] val        (  1 clock ) 
        #endif                                                                                 
		                                                                                       
		#ifdef KER_SLEEP_MODE_POWER_SAVE                                                       
 97e:	26 e0       	ldi	r18, 0x06	; 6
 980:	20 93 53 00 	sts	0x0053, r18
 984:	20 93 0e 01 	sts	0x010E, r18

00000988 <_IDLE_LOOP>:
;return registers        : None                                                                
;unsafe access registers : None                                                                
Kernel_Task_Idle:                                                                              
	    KER_SLEEP_INIT                                    ;sleep init             (  5 clocks) 
    _IDLE_LOOP:                                           ;forever loop                        
	    KER_DISABLE_ANALOG_DOMAIN                         ;disable adc, ac        ( 10 clocks) 
 988:	20 91 7a 00 	lds	r18, 0x007A
 98c:	2f 7e       	andi	r18, 0xEF	; 239
 98e:	20 93 7a 00 	sts	0x007A, r18
 992:	20 91 50 00 	lds	r18, 0x0050
 996:	20 68       	ori	r18, 0x80	; 128
 998:	20 93 50 00 	sts	0x0050, r18
	    KER_ENTER_SLEEP                                   ;enter sleep mode       (  6 clocks) 
 99c:	20 91 53 00 	lds	r18, 0x0053
 9a0:	21 60       	ori	r18, 0x01	; 1
 9a2:	20 93 53 00 	sts	0x0053, r18
 9a6:	88 95       	sleep
		RJMP  _IDLE_LOOP                                  ;jump to loop start     (  2 clocks) 
 9a8:	ef cf       	rjmp	.-34     	; 0x988 <_IDLE_LOOP>

000009aa <Kernel_Task_Sleep>:
;arg registers           : R25:R24(SleepTime)                                                  
;return registers        : None                                                                
;unsafe access registers : R18, R19, R20, R24, R25, R30(ZL), R31(ZH)                           
Kernel_Task_Sleep:                                        ;total 37.25uS @8MHz    (298 clocks) 
        ;save current context                                                                  
        KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
 9aa:	0f 92       	push	r0
 9ac:	0f b6       	in	r0, 0x3f	; 63
 9ae:	f8 94       	cli
 9b0:	0f 92       	push	r0
 9b2:	1f 92       	push	r1
 9b4:	11 24       	eor	r1, r1
 9b6:	2f 92       	push	r2
 9b8:	3f 92       	push	r3
 9ba:	4f 92       	push	r4
 9bc:	5f 92       	push	r5
 9be:	6f 92       	push	r6
 9c0:	7f 92       	push	r7
 9c2:	8f 92       	push	r8
 9c4:	9f 92       	push	r9
 9c6:	af 92       	push	r10
 9c8:	bf 92       	push	r11
 9ca:	cf 92       	push	r12
 9cc:	df 92       	push	r13
 9ce:	ef 92       	push	r14
 9d0:	ff 92       	push	r15
 9d2:	0f 93       	push	r16
 9d4:	1f 93       	push	r17
 9d6:	2f 93       	push	r18
 9d8:	3f 93       	push	r19
 9da:	4f 93       	push	r20
 9dc:	5f 93       	push	r21
 9de:	6f 93       	push	r22
 9e0:	7f 93       	push	r23
 9e2:	8f 93       	push	r24
 9e4:	9f 93       	push	r25
 9e6:	af 93       	push	r26
 9e8:	bf 93       	push	r27
 9ea:	cf 93       	push	r28
 9ec:	df 93       	push	r29
 9ee:	ef 93       	push	r30
 9f0:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 9f2:	e0 e1       	ldi	r30, 0x10	; 16
 9f4:	f1 e0       	ldi	r31, 0x01	; 1
 9f6:	20 91 07 01 	lds	r18, 0x0107
 9fa:	22 0f       	add	r18, r18
 9fc:	e2 0f       	add	r30, r18
 9fe:	20 e0       	ldi	r18, 0x00	; 0
 a00:	f2 1f       	adc	r31, r18
 a02:	2d b7       	in	r18, 0x3d	; 61
 a04:	3e b7       	in	r19, 0x3e	; 62
 a06:	20 83       	st	Z, r18
 a08:	31 83       	std	Z+1, r19	; 0x01
		;create next task wakeup time (args R25:R24)                                           
		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 a0a:	e6 e4       	ldi	r30, 0x46	; 70
		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 a0c:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
 a0e:	20 91 07 01 	lds	r18, 0x0107
 a12:	22 0f       	add	r18, r18
 a14:	e2 0f       	add	r30, r18
 a16:	20 e0       	ldi	r18, 0x00	; 0
 a18:	f2 1f       	adc	r31, r18
		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
 a1a:	80 83       	st	Z, r24
		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 a1c:	91 83       	std	Z+1, r25	; 0x01
		;update task scheduler status as blocked                                               
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 a1e:	e2 e3       	ldi	r30, 0x32	; 50
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 a20:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
 a22:	20 91 07 01 	lds	r18, 0x0107
 a26:	e2 0f       	add	r30, r18
 a28:	20 e0       	ldi	r18, 0x00	; 0
 a2a:	f2 1f       	adc	r31, r18
        LDI   R18                , TASK_BLOCKED           ;block task until cnt=0 (  1 clock ) 
 a2c:	20 e0       	ldi	r18, 0x00	; 0
		STD   Z+0                , R18                    ;save block flag        (  2 clocks) 
 a2e:	20 83       	st	Z, r18
		;run scheduler, load next task sp, restore context                                     
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 a30:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
 a32:	2f ef       	ldi	r18, 0xFF	; 255
 a34:	20 93 09 01 	sts	0x0109, r18
 a38:	20 e0       	ldi	r18, 0x00	; 0
 a3a:	20 93 0a 01 	sts	0x010A, r18
 a3e:	58 2f       	mov	r21, r24

00000a40 <_KER_SCH_LOOP56>:
 a40:	20 93 07 01 	sts	0x0107, r18
 a44:	85 2f       	mov	r24, r21
 a46:	e6 e4       	ldi	r30, 0x46	; 70
 a48:	f1 e0       	ldi	r31, 0x01	; 1
 a4a:	20 91 07 01 	lds	r18, 0x0107
 a4e:	22 0f       	add	r18, r18
 a50:	e2 0f       	add	r30, r18
 a52:	20 e0       	ldi	r18, 0x00	; 0
 a54:	f2 1f       	adc	r31, r18
 a56:	20 81       	ld	r18, Z
 a58:	31 81       	ldd	r19, Z+1	; 0x01
 a5a:	42 2f       	mov	r20, r18
 a5c:	43 2b       	or	r20, r19
 a5e:	59 f0       	breq	.+22     	; 0xa76 <_VAL_NULL57>
 a60:	81 30       	cpi	r24, 0x01	; 1
 a62:	99 f0       	breq	.+38     	; 0xa8a <_VAL_NOT_NULL57>
 a64:	41 e0       	ldi	r20, 0x01	; 1
 a66:	24 1b       	sub	r18, r20
 a68:	40 e0       	ldi	r20, 0x00	; 0
 a6a:	34 0b       	sbc	r19, r20
 a6c:	20 83       	st	Z, r18
 a6e:	31 83       	std	Z+1, r19	; 0x01
 a70:	42 2f       	mov	r20, r18
 a72:	43 2b       	or	r20, r19
 a74:	51 f4       	brne	.+20     	; 0xa8a <_VAL_NOT_NULL57>

00000a76 <_VAL_NULL57>:
 a76:	e2 e3       	ldi	r30, 0x32	; 50
 a78:	f1 e0       	ldi	r31, 0x01	; 1
 a7a:	20 91 07 01 	lds	r18, 0x0107
 a7e:	e2 0f       	add	r30, r18
 a80:	20 e0       	ldi	r18, 0x00	; 0
 a82:	f2 1f       	adc	r31, r18
 a84:	81 e0       	ldi	r24, 0x01	; 1
 a86:	80 83       	st	Z, r24
 a88:	08 c0       	rjmp	.+16     	; 0xa9a <_EXIT_SLP_TIME57>

00000a8a <_VAL_NOT_NULL57>:
 a8a:	e2 e3       	ldi	r30, 0x32	; 50
 a8c:	f1 e0       	ldi	r31, 0x01	; 1
 a8e:	20 91 07 01 	lds	r18, 0x0107
 a92:	e2 0f       	add	r30, r18
 a94:	20 e0       	ldi	r18, 0x00	; 0
 a96:	f2 1f       	adc	r31, r18
 a98:	80 81       	ld	r24, Z

00000a9a <_EXIT_SLP_TIME57>:
 a9a:	81 30       	cpi	r24, 0x01	; 1
 a9c:	19 f0       	breq	.+6      	; 0xaa4 <_KER_CALC_PRIO56>
 a9e:	84 30       	cpi	r24, 0x04	; 4
 aa0:	09 f0       	breq	.+2      	; 0xaa4 <_KER_CALC_PRIO56>
 aa2:	12 c0       	rjmp	.+36     	; 0xac8 <_KER_SCH_NEXT56>

00000aa4 <_KER_CALC_PRIO56>:
 aa4:	ec e3       	ldi	r30, 0x3C	; 60
 aa6:	f1 e0       	ldi	r31, 0x01	; 1
 aa8:	20 e0       	ldi	r18, 0x00	; 0
 aaa:	80 91 07 01 	lds	r24, 0x0107
 aae:	e8 0f       	add	r30, r24
 ab0:	f2 1f       	adc	r31, r18
 ab2:	80 81       	ld	r24, Z
 ab4:	20 91 09 01 	lds	r18, 0x0109
 ab8:	82 17       	cp	r24, r18
 aba:	30 f4       	brcc	.+12     	; 0xac8 <_KER_SCH_NEXT56>
 abc:	80 93 09 01 	sts	0x0109, r24
 ac0:	20 91 07 01 	lds	r18, 0x0107
 ac4:	20 93 0a 01 	sts	0x010A, r18

00000ac8 <_KER_SCH_NEXT56>:
 ac8:	20 91 07 01 	lds	r18, 0x0107
 acc:	23 95       	inc	r18
 ace:	30 91 08 01 	lds	r19, 0x0108
 ad2:	23 17       	cp	r18, r19
 ad4:	08 f4       	brcc	.+2      	; 0xad8 <_KER_SCH_EXIT56>
 ad6:	b4 cf       	rjmp	.-152    	; 0xa40 <_KER_SCH_LOOP56>

00000ad8 <_KER_SCH_EXIT56>:
 ad8:	20 91 0a 01 	lds	r18, 0x010A
 adc:	20 93 07 01 	sts	0x0107, r18
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 ae0:	e0 e1       	ldi	r30, 0x10	; 16
 ae2:	f1 e0       	ldi	r31, 0x01	; 1
 ae4:	20 91 07 01 	lds	r18, 0x0107
 ae8:	22 0f       	add	r18, r18
 aea:	e2 0f       	add	r30, r18
 aec:	20 e0       	ldi	r18, 0x00	; 0
 aee:	f2 1f       	adc	r31, r18
 af0:	20 81       	ld	r18, Z
 af2:	31 81       	ldd	r19, Z+1	; 0x01
 af4:	2d bf       	out	0x3d, r18	; 61
 af6:	3e bf       	out	0x3e, r19	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 af8:	ff 91       	pop	r31
 afa:	ef 91       	pop	r30
 afc:	df 91       	pop	r29
 afe:	cf 91       	pop	r28
 b00:	bf 91       	pop	r27
 b02:	af 91       	pop	r26
 b04:	9f 91       	pop	r25
 b06:	8f 91       	pop	r24
 b08:	7f 91       	pop	r23
 b0a:	6f 91       	pop	r22
 b0c:	5f 91       	pop	r21
 b0e:	4f 91       	pop	r20
 b10:	3f 91       	pop	r19
 b12:	2f 91       	pop	r18
 b14:	1f 91       	pop	r17
 b16:	0f 91       	pop	r16
 b18:	ff 90       	pop	r15
 b1a:	ef 90       	pop	r14
 b1c:	df 90       	pop	r13
 b1e:	cf 90       	pop	r12
 b20:	bf 90       	pop	r11
 b22:	af 90       	pop	r10
 b24:	9f 90       	pop	r9
 b26:	8f 90       	pop	r8
 b28:	7f 90       	pop	r7
 b2a:	6f 90       	pop	r6
 b2c:	5f 90       	pop	r5
 b2e:	4f 90       	pop	r4
 b30:	3f 90       	pop	r3
 b32:	2f 90       	pop	r2
 b34:	1f 90       	pop	r1
 b36:	0f 90       	pop	r0
 b38:	0f be       	out	0x3f, r0	; 63
 b3a:	0f 90       	pop	r0
 b3c:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
 b3e:	08 95       	ret

00000b40 <Kernel_Task_Constant_Latency>:
;arg registers           : R25:R24(SleepTime)                                                  
;return registers        : None                                                                
;unsafe access registers : R18, R24, R25, R30(ZL), R31(ZH)                                     
Kernel_Task_Constant_Latency:                             ;total 3.50uS @8MHz     ( 28 clocks) 
		;create next task wakeup time (args R25:R24)                                           
		CLI                                               ;disable interrupt      (  1 clock ) 
 b40:	f8 94       	cli
		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 b42:	e6 e4       	ldi	r30, 0x46	; 70
		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 b44:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
 b46:	20 91 07 01 	lds	r18, 0x0107
 b4a:	22 0f       	add	r18, r18
 b4c:	e2 0f       	add	r30, r18
 b4e:	20 e0       	ldi	r18, 0x00	; 0
 b50:	f2 1f       	adc	r31, r18
		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
 b52:	80 83       	st	Z, r24
		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 b54:	91 83       	std	Z+1, r25	; 0x01
		;update task scheduler status as constant latency                                      
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 b56:	e2 e3       	ldi	r30, 0x32	; 50
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 b58:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
 b5a:	20 91 07 01 	lds	r18, 0x0107
 b5e:	e2 0f       	add	r30, r18
 b60:	20 e0       	ldi	r18, 0x00	; 0
 b62:	f2 1f       	adc	r31, r18
        LDI   R18                , TASK_CONS_LAT          ;save as cons_lat       (  1 clock ) 
 b64:	24 e0       	ldi	r18, 0x04	; 4
		STD   Z+0                , R18                    ;save block flag        (  2 clocks) 
 b66:	20 83       	st	Z, r18
		SEI                                               ;enable interrupt       (  1 clock ) 
 b68:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
 b6a:	08 95       	ret

00000b6c <Kernel_Task_Constant_Latency_Sleep>:
;arg registers           : R25:R24(SleepTime)                                                  
;return registers        : None                                                                
;unsafe access registers : R18, R19, R20, R24, R25, R30(ZL), R31(ZH)                           
Kernel_Task_Constant_Latency_Sleep:                       ;total 35.75uS @8MHz    (286 clocks) 
		;save current context                                                                  
        KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
 b6c:	0f 92       	push	r0
 b6e:	0f b6       	in	r0, 0x3f	; 63
 b70:	f8 94       	cli
 b72:	0f 92       	push	r0
 b74:	1f 92       	push	r1
 b76:	11 24       	eor	r1, r1
 b78:	2f 92       	push	r2
 b7a:	3f 92       	push	r3
 b7c:	4f 92       	push	r4
 b7e:	5f 92       	push	r5
 b80:	6f 92       	push	r6
 b82:	7f 92       	push	r7
 b84:	8f 92       	push	r8
 b86:	9f 92       	push	r9
 b88:	af 92       	push	r10
 b8a:	bf 92       	push	r11
 b8c:	cf 92       	push	r12
 b8e:	df 92       	push	r13
 b90:	ef 92       	push	r14
 b92:	ff 92       	push	r15
 b94:	0f 93       	push	r16
 b96:	1f 93       	push	r17
 b98:	2f 93       	push	r18
 b9a:	3f 93       	push	r19
 b9c:	4f 93       	push	r20
 b9e:	5f 93       	push	r21
 ba0:	6f 93       	push	r22
 ba2:	7f 93       	push	r23
 ba4:	8f 93       	push	r24
 ba6:	9f 93       	push	r25
 ba8:	af 93       	push	r26
 baa:	bf 93       	push	r27
 bac:	cf 93       	push	r28
 bae:	df 93       	push	r29
 bb0:	ef 93       	push	r30
 bb2:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 bb4:	e0 e1       	ldi	r30, 0x10	; 16
 bb6:	f1 e0       	ldi	r31, 0x01	; 1
 bb8:	20 91 07 01 	lds	r18, 0x0107
 bbc:	22 0f       	add	r18, r18
 bbe:	e2 0f       	add	r30, r18
 bc0:	20 e0       	ldi	r18, 0x00	; 0
 bc2:	f2 1f       	adc	r31, r18
 bc4:	2d b7       	in	r18, 0x3d	; 61
 bc6:	3e b7       	in	r19, 0x3e	; 62
 bc8:	20 83       	st	Z, r18
 bca:	31 83       	std	Z+1, r19	; 0x01
		;update task scheduler status as blocked                                               
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 bcc:	e2 e3       	ldi	r30, 0x32	; 50
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 bce:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
 bd0:	20 91 07 01 	lds	r18, 0x0107
 bd4:	e2 0f       	add	r30, r18
 bd6:	20 e0       	ldi	r18, 0x00	; 0
 bd8:	f2 1f       	adc	r31, r18
        LDI   R18                , TASK_BLOCKED           ;blocked until cnt=0    (  1 clock ) 
 bda:	20 e0       	ldi	r18, 0x00	; 0
		STD   Z+0                , R18                    ;save block flag        (  2 clocks) 
 bdc:	20 83       	st	Z, r18
		;run scheduler, load next task sp, restore context                                     
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 bde:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
 be0:	2f ef       	ldi	r18, 0xFF	; 255
 be2:	20 93 09 01 	sts	0x0109, r18
 be6:	20 e0       	ldi	r18, 0x00	; 0
 be8:	20 93 0a 01 	sts	0x010A, r18
 bec:	58 2f       	mov	r21, r24

00000bee <_KER_SCH_LOOP75>:
 bee:	20 93 07 01 	sts	0x0107, r18
 bf2:	85 2f       	mov	r24, r21
 bf4:	e6 e4       	ldi	r30, 0x46	; 70
 bf6:	f1 e0       	ldi	r31, 0x01	; 1
 bf8:	20 91 07 01 	lds	r18, 0x0107
 bfc:	22 0f       	add	r18, r18
 bfe:	e2 0f       	add	r30, r18
 c00:	20 e0       	ldi	r18, 0x00	; 0
 c02:	f2 1f       	adc	r31, r18
 c04:	20 81       	ld	r18, Z
 c06:	31 81       	ldd	r19, Z+1	; 0x01
 c08:	42 2f       	mov	r20, r18
 c0a:	43 2b       	or	r20, r19
 c0c:	59 f0       	breq	.+22     	; 0xc24 <_VAL_NULL76>
 c0e:	81 30       	cpi	r24, 0x01	; 1
 c10:	99 f0       	breq	.+38     	; 0xc38 <_VAL_NOT_NULL76>
 c12:	41 e0       	ldi	r20, 0x01	; 1
 c14:	24 1b       	sub	r18, r20
 c16:	40 e0       	ldi	r20, 0x00	; 0
 c18:	34 0b       	sbc	r19, r20
 c1a:	20 83       	st	Z, r18
 c1c:	31 83       	std	Z+1, r19	; 0x01
 c1e:	42 2f       	mov	r20, r18
 c20:	43 2b       	or	r20, r19
 c22:	51 f4       	brne	.+20     	; 0xc38 <_VAL_NOT_NULL76>

00000c24 <_VAL_NULL76>:
 c24:	e2 e3       	ldi	r30, 0x32	; 50
 c26:	f1 e0       	ldi	r31, 0x01	; 1
 c28:	20 91 07 01 	lds	r18, 0x0107
 c2c:	e2 0f       	add	r30, r18
 c2e:	20 e0       	ldi	r18, 0x00	; 0
 c30:	f2 1f       	adc	r31, r18
 c32:	81 e0       	ldi	r24, 0x01	; 1
 c34:	80 83       	st	Z, r24
 c36:	08 c0       	rjmp	.+16     	; 0xc48 <_EXIT_SLP_TIME76>

00000c38 <_VAL_NOT_NULL76>:
 c38:	e2 e3       	ldi	r30, 0x32	; 50
 c3a:	f1 e0       	ldi	r31, 0x01	; 1
 c3c:	20 91 07 01 	lds	r18, 0x0107
 c40:	e2 0f       	add	r30, r18
 c42:	20 e0       	ldi	r18, 0x00	; 0
 c44:	f2 1f       	adc	r31, r18
 c46:	80 81       	ld	r24, Z

00000c48 <_EXIT_SLP_TIME76>:
 c48:	81 30       	cpi	r24, 0x01	; 1
 c4a:	19 f0       	breq	.+6      	; 0xc52 <_KER_CALC_PRIO75>
 c4c:	84 30       	cpi	r24, 0x04	; 4
 c4e:	09 f0       	breq	.+2      	; 0xc52 <_KER_CALC_PRIO75>
 c50:	12 c0       	rjmp	.+36     	; 0xc76 <_KER_SCH_NEXT75>

00000c52 <_KER_CALC_PRIO75>:
 c52:	ec e3       	ldi	r30, 0x3C	; 60
 c54:	f1 e0       	ldi	r31, 0x01	; 1
 c56:	20 e0       	ldi	r18, 0x00	; 0
 c58:	80 91 07 01 	lds	r24, 0x0107
 c5c:	e8 0f       	add	r30, r24
 c5e:	f2 1f       	adc	r31, r18
 c60:	80 81       	ld	r24, Z
 c62:	20 91 09 01 	lds	r18, 0x0109
 c66:	82 17       	cp	r24, r18
 c68:	30 f4       	brcc	.+12     	; 0xc76 <_KER_SCH_NEXT75>
 c6a:	80 93 09 01 	sts	0x0109, r24
 c6e:	20 91 07 01 	lds	r18, 0x0107
 c72:	20 93 0a 01 	sts	0x010A, r18

00000c76 <_KER_SCH_NEXT75>:
 c76:	20 91 07 01 	lds	r18, 0x0107
 c7a:	23 95       	inc	r18
 c7c:	30 91 08 01 	lds	r19, 0x0108
 c80:	23 17       	cp	r18, r19
 c82:	08 f4       	brcc	.+2      	; 0xc86 <_KER_SCH_EXIT75>
 c84:	b4 cf       	rjmp	.-152    	; 0xbee <_KER_SCH_LOOP75>

00000c86 <_KER_SCH_EXIT75>:
 c86:	20 91 0a 01 	lds	r18, 0x010A
 c8a:	20 93 07 01 	sts	0x0107, r18
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 c8e:	e0 e1       	ldi	r30, 0x10	; 16
 c90:	f1 e0       	ldi	r31, 0x01	; 1
 c92:	20 91 07 01 	lds	r18, 0x0107
 c96:	22 0f       	add	r18, r18
 c98:	e2 0f       	add	r30, r18
 c9a:	20 e0       	ldi	r18, 0x00	; 0
 c9c:	f2 1f       	adc	r31, r18
 c9e:	20 81       	ld	r18, Z
 ca0:	31 81       	ldd	r19, Z+1	; 0x01
 ca2:	2d bf       	out	0x3d, r18	; 61
 ca4:	3e bf       	out	0x3e, r19	; 62
		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 ca6:	ff 91       	pop	r31
 ca8:	ef 91       	pop	r30
 caa:	df 91       	pop	r29
 cac:	cf 91       	pop	r28
 cae:	bf 91       	pop	r27
 cb0:	af 91       	pop	r26
 cb2:	9f 91       	pop	r25
 cb4:	8f 91       	pop	r24
 cb6:	7f 91       	pop	r23
 cb8:	6f 91       	pop	r22
 cba:	5f 91       	pop	r21
 cbc:	4f 91       	pop	r20
 cbe:	3f 91       	pop	r19
 cc0:	2f 91       	pop	r18
 cc2:	1f 91       	pop	r17
 cc4:	0f 91       	pop	r16
 cc6:	ff 90       	pop	r15
 cc8:	ef 90       	pop	r14
 cca:	df 90       	pop	r13
 ccc:	cf 90       	pop	r12
 cce:	bf 90       	pop	r11
 cd0:	af 90       	pop	r10
 cd2:	9f 90       	pop	r9
 cd4:	8f 90       	pop	r8
 cd6:	7f 90       	pop	r7
 cd8:	6f 90       	pop	r6
 cda:	5f 90       	pop	r5
 cdc:	4f 90       	pop	r4
 cde:	3f 90       	pop	r3
 ce0:	2f 90       	pop	r2
 ce2:	1f 90       	pop	r1
 ce4:	0f 90       	pop	r0
 ce6:	0f be       	out	0x3f, r0	; 63
 ce8:	0f 90       	pop	r0
 cea:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
 cec:	08 95       	ret

00000cee <Kernel_Task_Sleep_Time_Get>:
;used registers          : R18, R24, R25, R30(ZL), R31(ZH)                                     
;arg registers           : R24(TaskID)                                                         
;return registers        : R25:R24(SleepTime)                                                  
;unsafe access registers : R18, R24, R25, R30(ZL), R31(ZH)                                     
Kernel_Task_Sleep_Time_Get:                               ;total 1.88uS @8MHz     ( 15 clocks) 
		MOV   R18                , R24                    ;copy                   (  1 clock ) 
 cee:	28 2f       	mov	r18, r24
		LSL   R18                                         ;x2                     (  1 clock ) 
 cf0:	22 0f       	add	r18, r18
		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 cf2:	e6 e4       	ldi	r30, 0x46	; 70
		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 cf4:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
 cf6:	e2 0f       	add	r30, r18
		LDI   R18                , 0x00                   ;load 0                 (  1 clock ) 
 cf8:	20 e0       	ldi	r18, 0x00	; 0
		ADC   ZH                 , R18                    ;add high byte+carry    (  1 clock ) 
 cfa:	f2 1f       	adc	r31, r18
		LDD   R24                , Z+0                    ;load sleep time        (  2 clocks) 
 cfc:	80 81       	ld	r24, Z
		LDD   R25                , Z+1                    ;load sleep time        (  2 clocks) 
 cfe:	91 81       	ldd	r25, Z+1	; 0x01
		RET                                               ;return from subroutine (  4 clocks) 
 d00:	08 95       	ret

00000d02 <Kernel_Task_Status_Get>:
;used registers          : R18, R24, R30(ZL), R31(ZH)                                          
;arg registers           : R24(TaskID)                                                         
;return registers        : R24(TaskSts)                                                        
;unsafe access registers : R18, R24, R30(ZL), R31(ZH)                                          
Kernel_Task_Status_Get:                                   ;total 1.50uS @8MHz     ( 12 clocks) 
		MOV   R18                , R24                    ;copy                   (  1 clock ) 
 d02:	28 2f       	mov	r18, r24
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 d04:	e2 e3       	ldi	r30, 0x32	; 50
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 d06:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
 d08:	e2 0f       	add	r30, r18
		LDI   R18                , 0x00                   ;load 0                 (  1 clock ) 
 d0a:	20 e0       	ldi	r18, 0x00	; 0
		ADC   ZH                 , R18                    ;add high byte+carry    (  1 clock ) 
 d0c:	f2 1f       	adc	r31, r18
		LD    R24                , Z                      ;load task status       (  2 clocks) 
 d0e:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 d10:	08 95       	ret

00000d12 <Kernel_NTask_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(NTask)                                                          
;unsafe access registers : R24                                                                 
Kernel_NTask_Get:                                         ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                 , KerBase+OFB_NTSK      ;load ntask             (  2 clock ) 
 d12:	80 91 08 01 	lds	r24, 0x0108
		RET                                               ;return from subroutine (  4 clocks) 
 d16:	08 95       	ret

00000d18 <Kernel_Task_Prio_Get>:
;arg registers           : R24(TaskID)                                                         
;return registers        : R24(TaskPriority)                                                   
;unsafe access registers : R18, R24, R30(ZL), R31(ZH)                                          
Kernel_Task_Prio_Get:                                     ;total 1.50uS @8MHz     ( 12 clocks) 
		;get priority of the task id, arg (task_id->R24), return R24                           
		MOV   R18                , R24                    ;copy task_id           (  1 clock ) 
 d18:	28 2f       	mov	r18, r24
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 d1a:	ec e3       	ldi	r30, 0x3C	; 60
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 d1c:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
 d1e:	e2 0f       	add	r30, r18
		LDI   R18                , 0x00                   ;clear reg              (  1 clock ) 
 d20:	20 e0       	ldi	r18, 0x00	; 0
		ADC   ZH                 , R18                    ;add high byte+carry    (  1 clock ) 
 d22:	f2 1f       	adc	r31, r18
		LD    R24                , Z                      ;load priority          (  2 clocks) 
 d24:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 d26:	08 95       	ret

00000d28 <Kernel_Lowest_Prio_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(LowestPriorityVal)                                              
;unsafe access registers : R24                                                                 
Kernel_Lowest_Prio_Get:                                   ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
 d28:	80 91 09 01 	lds	r24, 0x0109
		RET                                               ;return from subroutine (  4 clocks) 
 d2c:	08 95       	ret

00000d2e <Kernel_High_Prio_Task_ID_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(HighstPriorityTaskID)->UserTaskID (Excluding Idle Task)         
;unsafe access registers : R24                                                                 
Kernel_High_Prio_Task_ID_Get:                             ;total 0.88uS @8MHz     (  7 clocks) 
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 d2e:	80 91 0a 01 	lds	r24, 0x010A
		DEC   R24                                         ;decrement by 1         (  1 clock ) 
 d32:	8a 95       	dec	r24
		RET                                               ;return from subroutine (  4 clocks) 
 d34:	08 95       	ret

00000d36 <Kernel_Abs_High_Prio_Task_ID_Get>:
;used registers          : R24                                                                 
;arg registers           : None                                                                
;return registers        : R24(HighstPriorityTaskID)->AbsoluteTaskID (Including Idle Task)     
;unsafe access registers : R24                                                                 
Kernel_Abs_High_Prio_Task_ID_Get:                         ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 d36:	80 91 0a 01 	lds	r24, 0x010A
		RET                                               ;return from subroutine (  4 clocks) 
 d3a:	08 95       	ret

00000d3c <Kernel_CPU_Usage_Get>:
;arg registers           : None                                                                
;return registers        : R24(CurrentCpuUsage)->In percentage                                 
;unsafe access registers : R24                                                                 
Kernel_CPU_Usage_Get:                                     ;total 0.75uS @8MHz     (  6 clocks) 
		;get cpu usage, return R24                                                             
		LDS   R24                , KerBase+OFB_USAGE      ;load cpu usage         (  2 clocks) 
 d3c:	80 91 0d 01 	lds	r24, 0x010D
		RET                                               ;return from subroutine (  4 clocks) 
 d40:	08 95       	ret

00000d42 <Debug_Init>:


;;===================================debug init starting====================================;; 
Debug_Init:                                               ;total 2.38uS @8MHz     ( 19 clocks) 
        ;init registers for UART0 (Arg R25:R24->UBRRH:UBRRL)                                   
		LDI   R18                , (1<<1)                 ;mask U2x               (  1 clock ) 
 d42:	22 e0       	ldi	r18, 0x02	; 2
		STS   SRUCSR0A           , R18                    ;load val to UCSR0A     (  2 clocks) 
 d44:	20 93 c0 00 	sts	0x00C0, r18
		MOV   R18                , R25                    ;copy R25->baud rate H  (  1 clock ) 
 d48:	29 2f       	mov	r18, r25
		STS   SRUBRR0H           , R18                    ;load val to UBRR0H     (  2 clocks) 
 d4a:	20 93 c5 00 	sts	0x00C5, r18
		MOV   R18                , R24                    ;copy R24->baud rate L  (  1 clock ) 
 d4e:	28 2f       	mov	r18, r24
		STS   SRUBRR0L           , R18                    ;load val to UBRR0L     (  2 clocks) 
 d50:	20 93 c4 00 	sts	0x00C4, r18
		LDI   R18                , (1<<1)|(1<<2)          ;config 8 data bit      (  1 clock ) 
 d54:	26 e0       	ldi	r18, 0x06	; 6
		STS   SRUCSR0C           , R18                    ;load val to UCSR0C     (  2 clocks) 
 d56:	20 93 c2 00 	sts	0x00C2, r18
		LDI   R18                , (1<<3)                 ;enable tx              (  1 clock ) 
 d5a:	28 e0       	ldi	r18, 0x08	; 8
		STS   SRUCSR0B           , R18                    ;load val to UCSR0B     (  2 clocks) 
 d5c:	20 93 c1 00 	sts	0x00C1, r18
        RET                                               ;return from subroutine (  4 clocks) 
 d60:	08 95       	ret

00000d62 <Debug_Tx_Byte>:


;;====================================debug tx starting=====================================;; 
Debug_Tx_Byte:                                            ;total 2.00uS+LT @8MHz  ( 16 clocks) 
		;write single byte to data register (Arg R24)                                          
		PUSH  R18                                         ;save reg               (  2 clocks) 
 d62:	2f 93       	push	r18
		STS   SRUDR0             , R24                    ;load val to UDR0       (  2 clocks) 
 d64:	80 93 c6 00 	sts	0x00C6, r24

00000d68 <__UDRE0_CLEARED>:
                                                                                               
    __UDRE0_CLEARED:                                      ;undefined loop wrt ck               
		LDS   R18                , SRUCSR0A               ;load UCSR0A to R18     (  2 clocks) 
 d68:	20 91 c0 00 	lds	r18, 0x00C0
		SBRS  R18                , 0x05                   ;skip if UDRE0 is set   (  2 clocks) 
 d6c:	25 ff       	sbrs	r18, 5
		RJMP  __UDRE0_CLEARED                             ;wait until UDRE0 is set(  2 clocks) 
 d6e:	fc cf       	rjmp	.-8      	; 0xd68 <__UDRE0_CLEARED>
		POP   R18                                         ;restore reg            (  2 clocks) 
 d70:	2f 91       	pop	r18
        RET                                               ;return from subroutine (  4 clocks) 
 d72:	08 95       	ret

00000d74 <Debug_Tx_Word>:


;;==================================debug tx word starting==================================;; 
Debug_Tx_Word:                                            ;total 2.00uS+LT @8MHz  ( 16 clocks) 
		;write 2 bytes, (Arg R24, R25), Args retained                                          
		PUSH  R24                                         ;save reg               (  2 clocks) 
 d74:	8f 93       	push	r24
		MOV   R24                , R25                    ;copy reg               (  1 clock ) 
 d76:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte                               ;send via uart          ( 21 clocks) 
 d78:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
        POP   R24                                         ;restore reg            (  2 clocks) 
 d7c:	8f 91       	pop	r24
		CALL  Debug_Tx_Byte                               ;send via uart          ( 21 clocks) 
 d7e:	0e 94 b1 06 	call	0xd62	; 0xd62 <Debug_Tx_Byte>
        RET                                               ;return from subroutine (  4 clocks) 
 d82:	08 95       	ret

00000d84 <Debug_Tx_Byte_Conf>:


;;================================debug tx confirm starting=================================;; 
Debug_Tx_Byte_Conf:                                       ;total 2.63uS+LT @8MHz  ( 21 clocks) 
        ;write 1 byte, (Arg R24), Args retained                                                
		PUSH  R18                                         ;save reg               (  2 clocks) 
 d84:	2f 93       	push	r18
		STS   SRUDR0             , R24                    ;load val to UDR0,      (  2 clocks) 
 d86:	80 93 c6 00 	sts	0x00C6, r24

00000d8a <__TXC0_CLEARED>:
    __TXC0_CLEARED:                                                                            
		LDS   R18                , SRUCSR0A               ;load UCSR0A to R18,    (  2 clocks) 
 d8a:	20 91 c0 00 	lds	r18, 0x00C0
		SBRS  R18                , 0x06                   ;skip if TXC0 is set,   (  2 clocks) 
 d8e:	26 ff       	sbrs	r18, 6
		RJMP  __TXC0_CLEARED                              ;wait until TXC0 is set (  2 clocks) 
 d90:	fc cf       	rjmp	.-8      	; 0xd8a <__TXC0_CLEARED>
		LDS   R18                , SRUCSR0A               ;load UCSR0A to R18,    (  2 clocks) 
 d92:	20 91 c0 00 	lds	r18, 0x00C0
		ORI   R18                , (1<<6)                 ;mask bit 6,            (  1 clock ) 
 d96:	20 64       	ori	r18, 0x40	; 64
		STS   SRUCSR0A           , R18                    ;write reg with bit msk (  2 clocks) 
 d98:	20 93 c0 00 	sts	0x00C0, r18
		POP   R18                                         ;restore reg            (  2 clocks) 
 d9c:	2f 91       	pop	r18
        RET                                               ;return from subroutine (  4 clocks) 
 d9e:	08 95       	ret

00000da0 <Debug_Tx_Word_Conf>:


;;==============================debug tx word confirm starting==============================;; 
Debug_Tx_Word_Conf:                                       ;total 6.38uS+LT @8MHz  ( 51 clocks) 
        ;write 2 bytes, (Arg R24, R25), Args retained                                          
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 da0:	0e 94 c2 06 	call	0xd84	; 0xd84 <Debug_Tx_Byte_Conf>
		PUSH  R24                                         ;save reg               (  2 clocks) 
 da4:	8f 93       	push	r24
		MOV   R24                , R25                    ;copy R25 to R24        (  1 clock ) 
 da6:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 da8:	0e 94 c2 06 	call	0xd84	; 0xd84 <Debug_Tx_Byte_Conf>
		POP   R24                                         ;restore reg            (  2 clocks) 
 dac:	8f 91       	pop	r24
        RET                                               ;return from subroutine (  4 clocks) 
 dae:	08 95       	ret

00000db0 <Debug_Tx_DWord_Conf>:


;;==============================debug tx dword confirm starting=============================;; 
Debug_Tx_DWord_Conf:                                      ;total 12.38uS+LT @8MHz ( 99 clocks) 
        ;write 4 bytes, (Arg R22-R25), Args retained                                           
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks) 
 db0:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R22                    ;copy R22 to R24          (1 clock ) 
 db4:	86 2f       	mov	r24, r22
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 db6:	0e 94 c2 06 	call	0xd84	; 0xd84 <Debug_Tx_Byte_Conf>
		MOV   R24                , R23                    ;copy R23 to R24          (1 clock ) 
 dba:	87 2f       	mov	r24, r23
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 dbc:	0e 94 c2 06 	call	0xd84	; 0xd84 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24              (2 clocks) 
 dc0:	80 91 4a 00 	lds	r24, 0x004A
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 dc4:	0e 94 c2 06 	call	0xd84	; 0xd84 <Debug_Tx_Byte_Conf>
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks) 
 dc8:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R25                    ;copy R22 to R24          (1 clock ) 
 dcc:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 dce:	0e 94 c2 06 	call	0xd84	; 0xd84 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24 val,         (2 clocks) 
 dd2:	80 91 4a 00 	lds	r24, 0x004A
        RET                                               ;return from subroutine,  (4 clocks) 
 dd6:	08 95       	ret

00000dd8 <Debug_Tx_From_RAM>:


;;=============================debug tx confirm from ram starting===========================;; 
Debug_Tx_From_RAM:                                        ;total 4.38uS+LT @8MHz  ( 35 clocks) 
        ;print data from RAM address (Arg R24-R25)                                             
		MOV   R16                , R30                    ;copy R30 to R16          (1 clock ) 
 dd8:	0e 2f       	mov	r16, r30
		MOV   R17                , R31                    ;copy R31 to R17          (1 clock ) 
 dda:	1f 2f       	mov	r17, r31
		MOV   R18                , R24                    ;copy R24 to R18          (1 clock ) 
 ddc:	28 2f       	mov	r18, r24
		MOV   R30                , R24                    ;copy R22 to R24          (1 clock ) 
 dde:	e8 2f       	mov	r30, r24
		MOV   R31                , R25                    ;copy R22 to R24          (1 clock ) 
 de0:	f9 2f       	mov	r31, r25
		LD    R24                , Z                      ;load val to R24          (2 clocks) 
 de2:	80 81       	ld	r24, Z
		CALL  Debug_Tx_Byte_Conf                          ;send via uart                       
 de4:	0e 94 c2 06 	call	0xd84	; 0xd84 <Debug_Tx_Byte_Conf>
		MOV   R30                , R16                    ;copy R16 to R30          (1 clock ) 
 de8:	e0 2f       	mov	r30, r16
		MOV   R31                , R17                    ;copy R17 to R31          (1 clock ) 
 dea:	f1 2f       	mov	r31, r17
		MOV   R24                , R18                    ;copy R18 to R24          (1 clock ) 
 dec:	82 2f       	mov	r24, r18
        RET                                               ;return from subroutine,  (4 clocks) 
 dee:	08 95       	ret

00000df0 <Debug_Tx_RAM_Area>:

;;=============================debug tx confirm ram area starting===========================;; 
Debug_Tx_RAM_Area:                                        ;5.5uS+LT x R22 @8MHz   ( 44 clocks) 
        ;print data from RAM address (arguments R24:R25, R22)                                  
	__DUMP_BYTES:                                                                              
	    CALL  Debug_Tx_From_RAM                           ;send via uart from ram              
 df0:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <Debug_Tx_From_RAM>
		SUBI  R24                , 0x01                   ;decrement from LSByte               
 df4:	81 50       	subi	r24, 0x01	; 1
        SBCI  R25                , 0x00                   ;decrement if carry                  
 df6:	90 40       	sbci	r25, 0x00	; 0
		SUBI  R22                , 0x01                   ;decrement                           
 df8:	61 50       	subi	r22, 0x01	; 1
		BRNE  __DUMP_BYTES                                                                     
 dfa:	d1 f7       	brne	.-12     	; 0xdf0 <Debug_Tx_RAM_Area>
        RET                                               ;return from subroutine,  (4 clocks) 
 dfc:	08 95       	ret

00000dfe <_exit>:
 dfe:	f8 94       	cli

00000e00 <__stop_program>:
 e00:	ff cf       	rjmp	.-2      	; 0xe00 <__stop_program>
