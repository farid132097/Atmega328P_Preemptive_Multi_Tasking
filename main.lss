
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a06  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000556  00800100  00800100  00000a7a  2**0
                  ALLOC
  2 .stab         00000b58  00000000  00000000  00000a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000006d  00000000  00000000  000015d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00001641  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000bd  00000000  00000000  00001681  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000188  00000000  00000000  0000173e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000080  00000000  00000000  000018c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a1  00000000  00000000  00001946  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001ce8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000010d  00000000  00000000  00001da8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 cb 01 	jmp	0x396	; 0x396 <__vector_16>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	00 00       	nop
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 00       	nop
  76:	00 00       	nop
  78:	00 00       	nop
  7a:	00 00       	nop
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 00       	nop
  82:	00 00       	nop
  84:	00 00       	nop
  86:	00 00       	nop
  88:	86 c1       	rjmp	.+780    	; 0x396 <__vector_16>

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61
  96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  9a:	0c 94 01 05 	jmp	0xa02	; 0xa02 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:
 

    
int main(void) {
    
	Kernel_Init();
  a2:	0e 94 87 03 	call	0x70e	; 0x70e <Kernel_Init>

	Kernel_Task_Create(Tasks_Task1,  0);
  a6:	85 ea       	ldi	r24, 0xA5	; 165
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	0e 94 de 02 	call	0x5bc	; 0x5bc <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task2,  1);
  b0:	8f e7       	ldi	r24, 0x7F	; 127
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	61 e0       	ldi	r22, 0x01	; 1
  b6:	0e 94 de 02 	call	0x5bc	; 0x5bc <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task3,  2);
  ba:	89 e5       	ldi	r24, 0x59	; 89
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	62 e0       	ldi	r22, 0x02	; 2
  c0:	0e 94 de 02 	call	0x5bc	; 0x5bc <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task4,  3);
  c4:	83 e3       	ldi	r24, 0x33	; 51
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	63 e0       	ldi	r22, 0x03	; 3
  ca:	0e 94 de 02 	call	0x5bc	; 0x5bc <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task5,  4);
  ce:	8d e0       	ldi	r24, 0x0D	; 13
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	64 e0       	ldi	r22, 0x04	; 4
  d4:	0e 94 de 02 	call	0x5bc	; 0x5bc <Kernel_Task_Create>
	
    Debug_Init(0);
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 a3 04 	call	0x946	; 0x946 <Debug_Init>
    Debug_Tx_Byte_Conf(Kernel_Task_Prio_Get(0));
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	0e 94 92 04 	call	0x924	; 0x924 <Kernel_Task_Prio_Get>
  e6:	0e 94 c4 04 	call	0x988	; 0x988 <Debug_Tx_Byte_Conf>
    Debug_Tx_Byte_Conf(Kernel_Task_Prio_Get(1));
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	0e 94 92 04 	call	0x924	; 0x924 <Kernel_Task_Prio_Get>
  f0:	0e 94 c4 04 	call	0x988	; 0x988 <Debug_Tx_Byte_Conf>
	Debug_Tx_Byte_Conf(Kernel_Task_Prio_Get(2));
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	0e 94 92 04 	call	0x924	; 0x924 <Kernel_Task_Prio_Get>
  fa:	0e 94 c4 04 	call	0x988	; 0x988 <Debug_Tx_Byte_Conf>
	Debug_Tx_Byte_Conf(Kernel_Task_Prio_Get(3));
  fe:	83 e0       	ldi	r24, 0x03	; 3
 100:	0e 94 92 04 	call	0x924	; 0x924 <Kernel_Task_Prio_Get>
 104:	0e 94 c4 04 	call	0x988	; 0x988 <Debug_Tx_Byte_Conf>
	Debug_Tx_Byte_Conf(Kernel_Task_Prio_Get(4));
 108:	84 e0       	ldi	r24, 0x04	; 4
 10a:	0e 94 92 04 	call	0x924	; 0x924 <Kernel_Task_Prio_Get>
 10e:	0e 94 c4 04 	call	0x988	; 0x988 <Debug_Tx_Byte_Conf>
	Debug_Tx_Byte_Conf(Kernel_Task_Prio_Get(5));
 112:	85 e0       	ldi	r24, 0x05	; 5
 114:	0e 94 92 04 	call	0x924	; 0x924 <Kernel_Task_Prio_Get>
 118:	0e 94 c4 04 	call	0x988	; 0x988 <Debug_Tx_Byte_Conf>
	
	Debug_Tx_Byte_Conf(Kernel_NTask_Get());
 11c:	0e 94 8f 04 	call	0x91e	; 0x91e <Kernel_NTask_Get>
 120:	0e 94 c4 04 	call	0x988	; 0x988 <Debug_Tx_Byte_Conf>
    Debug_Tx_Byte_Conf(Kernel_High_Prio_Task_ID_Get());
 124:	0e 94 9c 04 	call	0x938	; 0x938 <Kernel_High_Prio_Task_ID_Get>
 128:	0e 94 c4 04 	call	0x988	; 0x988 <Debug_Tx_Byte_Conf>
	Debug_Tx_Byte_Conf(Kernel_Abs_High_Prio_Task_ID_Get());
 12c:	0e 94 a0 04 	call	0x940	; 0x940 <Kernel_Abs_High_Prio_Task_ID_Get>
 130:	0e 94 c4 04 	call	0x988	; 0x988 <Debug_Tx_Byte_Conf>
    
	Kernel_Start_Tasks();
 134:	0e 94 4f 03 	call	0x69e	; 0x69e <Kernel_Start_Tasks>
 138:	ff cf       	rjmp	.-2      	; 0x138 <SRUDR0+0x72>

0000013a <Tasks_Task9>:
  }
}

void Tasks_Task9(void){
  
  Debug_Init(0);
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 a3 04 	call	0x946	; 0x946 <Debug_Init>
  
  while(1){
    
	  Debug_Tx_Byte(9);
 142:	89 e0       	ldi	r24, 0x09	; 9
 144:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(9));
 148:	89 e0       	ldi	r24, 0x09	; 9
 14a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <Kernel_Task_Sleep_Time_Get>
 14e:	0e 94 bc 04 	call	0x978	; 0x978 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(9));
 152:	89 e0       	ldi	r24, 0x09	; 9
 154:	0e 94 87 04 	call	0x90e	; 0x90e <Kernel_Task_Status_Get>
 158:	80 5e       	subi	r24, 0xE0	; 224
 15a:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 15e:	0e 94 a0 04 	call	0x940	; 0x940 <Kernel_Abs_High_Prio_Task_ID_Get>
 162:	80 5f       	subi	r24, 0xF0	; 240
 164:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 168:	0e 94 99 04 	call	0x932	; 0x932 <Kernel_Lowest_Prio_Get>
 16c:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
 170:	e8 cf       	rjmp	.-48     	; 0x142 <Tasks_Task9+0x8>

00000172 <Tasks_Task8>:
  }
}

void Tasks_Task8(void){
  
  Debug_Init(0);
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 a3 04 	call	0x946	; 0x946 <Debug_Init>
  
  while(1){
    
	  Debug_Tx_Byte(8);
 17a:	88 e0       	ldi	r24, 0x08	; 8
 17c:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(8));
 180:	88 e0       	ldi	r24, 0x08	; 8
 182:	0e 94 7d 04 	call	0x8fa	; 0x8fa <Kernel_Task_Sleep_Time_Get>
 186:	0e 94 bc 04 	call	0x978	; 0x978 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(8));
 18a:	88 e0       	ldi	r24, 0x08	; 8
 18c:	0e 94 87 04 	call	0x90e	; 0x90e <Kernel_Task_Status_Get>
 190:	80 5e       	subi	r24, 0xE0	; 224
 192:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 196:	0e 94 a0 04 	call	0x940	; 0x940 <Kernel_Abs_High_Prio_Task_ID_Get>
 19a:	80 5f       	subi	r24, 0xF0	; 240
 19c:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 1a0:	0e 94 99 04 	call	0x932	; 0x932 <Kernel_Lowest_Prio_Get>
 1a4:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
 1a8:	e8 cf       	rjmp	.-48     	; 0x17a <Tasks_Task8+0x8>

000001aa <Tasks_Task7>:
  }
}

void Tasks_Task7(void){
  
  Debug_Init(0);
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 a3 04 	call	0x946	; 0x946 <Debug_Init>
  
  while(1){
    
	  Debug_Tx_Byte(7);
 1b2:	87 e0       	ldi	r24, 0x07	; 7
 1b4:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(7));
 1b8:	87 e0       	ldi	r24, 0x07	; 7
 1ba:	0e 94 7d 04 	call	0x8fa	; 0x8fa <Kernel_Task_Sleep_Time_Get>
 1be:	0e 94 bc 04 	call	0x978	; 0x978 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(7));
 1c2:	87 e0       	ldi	r24, 0x07	; 7
 1c4:	0e 94 87 04 	call	0x90e	; 0x90e <Kernel_Task_Status_Get>
 1c8:	80 5e       	subi	r24, 0xE0	; 224
 1ca:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 1ce:	0e 94 a0 04 	call	0x940	; 0x940 <Kernel_Abs_High_Prio_Task_ID_Get>
 1d2:	80 5f       	subi	r24, 0xF0	; 240
 1d4:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 1d8:	0e 94 99 04 	call	0x932	; 0x932 <Kernel_Lowest_Prio_Get>
 1dc:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
 1e0:	e8 cf       	rjmp	.-48     	; 0x1b2 <Tasks_Task7+0x8>

000001e2 <Tasks_Task6>:
  }
}

void Tasks_Task6(void){
  
  Debug_Init(0);
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 a3 04 	call	0x946	; 0x946 <Debug_Init>
  
  while(1){
    
    Debug_Tx_Byte(6);
 1ea:	86 e0       	ldi	r24, 0x06	; 6
 1ec:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(6));
 1f0:	86 e0       	ldi	r24, 0x06	; 6
 1f2:	0e 94 7d 04 	call	0x8fa	; 0x8fa <Kernel_Task_Sleep_Time_Get>
 1f6:	0e 94 bc 04 	call	0x978	; 0x978 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(6));
 1fa:	86 e0       	ldi	r24, 0x06	; 6
 1fc:	0e 94 87 04 	call	0x90e	; 0x90e <Kernel_Task_Status_Get>
 200:	80 5e       	subi	r24, 0xE0	; 224
 202:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 206:	0e 94 a0 04 	call	0x940	; 0x940 <Kernel_Abs_High_Prio_Task_ID_Get>
 20a:	80 5f       	subi	r24, 0xF0	; 240
 20c:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 210:	0e 94 99 04 	call	0x932	; 0x932 <Kernel_Lowest_Prio_Get>
 214:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
 218:	e8 cf       	rjmp	.-48     	; 0x1ea <Tasks_Task6+0x8>

0000021a <Tasks_Task5>:
    Kernel_Task_Sleep(2000);
	
  }
}

void Tasks_Task5(void){
 21a:	1f 93       	push	r17
  
  DDRC |= (1<<5);
 21c:	3d 9a       	sbi	0x07, 5	; 7

  Debug_Init(0);
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 a3 04 	call	0x946	; 0x946 <Debug_Init>
  //Kernel_Task_Sleep(1000);
  
  while(1){
    
    PORTC ^= (1<<5);
 226:	10 e2       	ldi	r17, 0x20	; 32
 228:	88 b1       	in	r24, 0x08	; 8
 22a:	81 27       	eor	r24, r17
 22c:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(5);
 22e:	85 e0       	ldi	r24, 0x05	; 5
 230:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(5));
 234:	85 e0       	ldi	r24, 0x05	; 5
 236:	0e 94 7d 04 	call	0x8fa	; 0x8fa <Kernel_Task_Sleep_Time_Get>
 23a:	0e 94 bc 04 	call	0x978	; 0x978 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(5));
 23e:	85 e0       	ldi	r24, 0x05	; 5
 240:	0e 94 87 04 	call	0x90e	; 0x90e <Kernel_Task_Status_Get>
 244:	80 5e       	subi	r24, 0xE0	; 224
 246:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 24a:	0e 94 a0 04 	call	0x940	; 0x940 <Kernel_Abs_High_Prio_Task_ID_Get>
 24e:	80 5f       	subi	r24, 0xF0	; 240
 250:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 254:	0e 94 99 04 	call	0x932	; 0x932 <Kernel_Lowest_Prio_Get>
 258:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
    Kernel_Task_Sleep(1000);
 25c:	88 ee       	ldi	r24, 0xE8	; 232
 25e:	93 e0       	ldi	r25, 0x03	; 3
 260:	0e 94 be 03 	call	0x77c	; 0x77c <Kernel_Task_Sleep>
 264:	e1 cf       	rjmp	.-62     	; 0x228 <Tasks_Task5+0xe>

00000266 <Tasks_Task4>:
    Kernel_Task_Sleep(3000);
	
  }
}

void Tasks_Task4(void){
 266:	1f 93       	push	r17
  
  DDRC |= (1<<4);
 268:	3c 9a       	sbi	0x07, 4	; 7

  Debug_Init(0);
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 a3 04 	call	0x946	; 0x946 <Debug_Init>
  //Kernel_Task_Sleep(2000);
  
  while(1){
    
    PORTC ^= (1<<4);
 272:	10 e1       	ldi	r17, 0x10	; 16
 274:	88 b1       	in	r24, 0x08	; 8
 276:	81 27       	eor	r24, r17
 278:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(4);
 27a:	84 e0       	ldi	r24, 0x04	; 4
 27c:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(4));
 280:	84 e0       	ldi	r24, 0x04	; 4
 282:	0e 94 7d 04 	call	0x8fa	; 0x8fa <Kernel_Task_Sleep_Time_Get>
 286:	0e 94 bc 04 	call	0x978	; 0x978 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(4));
 28a:	84 e0       	ldi	r24, 0x04	; 4
 28c:	0e 94 87 04 	call	0x90e	; 0x90e <Kernel_Task_Status_Get>
 290:	80 5e       	subi	r24, 0xE0	; 224
 292:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 296:	0e 94 a0 04 	call	0x940	; 0x940 <Kernel_Abs_High_Prio_Task_ID_Get>
 29a:	80 5f       	subi	r24, 0xF0	; 240
 29c:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 2a0:	0e 94 99 04 	call	0x932	; 0x932 <Kernel_Lowest_Prio_Get>
 2a4:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
    Kernel_Task_Sleep(2000);
 2a8:	80 ed       	ldi	r24, 0xD0	; 208
 2aa:	97 e0       	ldi	r25, 0x07	; 7
 2ac:	0e 94 be 03 	call	0x77c	; 0x77c <Kernel_Task_Sleep>
 2b0:	e1 cf       	rjmp	.-62     	; 0x274 <Tasks_Task4+0xe>

000002b2 <Tasks_Task3>:
    Kernel_Task_Sleep(4000);
	
  }
}

void Tasks_Task3(void){
 2b2:	1f 93       	push	r17
  
  DDRC |= (1<<3);
 2b4:	3b 9a       	sbi	0x07, 3	; 7

  Debug_Init(0);
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 a3 04 	call	0x946	; 0x946 <Debug_Init>
  //Kernel_Task_Sleep(3000);
  
  while(1){
    
    PORTC ^= (1<<3);
 2be:	18 e0       	ldi	r17, 0x08	; 8
 2c0:	88 b1       	in	r24, 0x08	; 8
 2c2:	81 27       	eor	r24, r17
 2c4:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(3);
 2c6:	83 e0       	ldi	r24, 0x03	; 3
 2c8:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(3));
 2cc:	83 e0       	ldi	r24, 0x03	; 3
 2ce:	0e 94 7d 04 	call	0x8fa	; 0x8fa <Kernel_Task_Sleep_Time_Get>
 2d2:	0e 94 bc 04 	call	0x978	; 0x978 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(3));
 2d6:	83 e0       	ldi	r24, 0x03	; 3
 2d8:	0e 94 87 04 	call	0x90e	; 0x90e <Kernel_Task_Status_Get>
 2dc:	80 5e       	subi	r24, 0xE0	; 224
 2de:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 2e2:	0e 94 a0 04 	call	0x940	; 0x940 <Kernel_Abs_High_Prio_Task_ID_Get>
 2e6:	80 5f       	subi	r24, 0xF0	; 240
 2e8:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 2ec:	0e 94 99 04 	call	0x932	; 0x932 <Kernel_Lowest_Prio_Get>
 2f0:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
    Kernel_Task_Sleep(3000);
 2f4:	88 eb       	ldi	r24, 0xB8	; 184
 2f6:	9b e0       	ldi	r25, 0x0B	; 11
 2f8:	0e 94 be 03 	call	0x77c	; 0x77c <Kernel_Task_Sleep>
 2fc:	e1 cf       	rjmp	.-62     	; 0x2c0 <Tasks_Task3+0xe>

000002fe <Tasks_Task2>:
    Kernel_Task_Sleep(5000);
    
  }
}

void Tasks_Task2(void){
 2fe:	1f 93       	push	r17
  
  DDRC |= (1<<2);
 300:	3a 9a       	sbi	0x07, 2	; 7

  Debug_Init(0);
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e 94 a3 04 	call	0x946	; 0x946 <Debug_Init>
  //Kernel_Task_Sleep(4000);
  
  while(1){
    
    PORTC ^= (1<<2);
 30a:	14 e0       	ldi	r17, 0x04	; 4
 30c:	88 b1       	in	r24, 0x08	; 8
 30e:	81 27       	eor	r24, r17
 310:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(2);
 312:	82 e0       	ldi	r24, 0x02	; 2
 314:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(2));
 318:	82 e0       	ldi	r24, 0x02	; 2
 31a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <Kernel_Task_Sleep_Time_Get>
 31e:	0e 94 bc 04 	call	0x978	; 0x978 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(2));
 322:	82 e0       	ldi	r24, 0x02	; 2
 324:	0e 94 87 04 	call	0x90e	; 0x90e <Kernel_Task_Status_Get>
 328:	80 5e       	subi	r24, 0xE0	; 224
 32a:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 32e:	0e 94 a0 04 	call	0x940	; 0x940 <Kernel_Abs_High_Prio_Task_ID_Get>
 332:	80 5f       	subi	r24, 0xF0	; 240
 334:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 338:	0e 94 99 04 	call	0x932	; 0x932 <Kernel_Lowest_Prio_Get>
 33c:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
    Kernel_Task_Sleep(4000);
 340:	80 ea       	ldi	r24, 0xA0	; 160
 342:	9f e0       	ldi	r25, 0x0F	; 15
 344:	0e 94 be 03 	call	0x77c	; 0x77c <Kernel_Task_Sleep>
 348:	e1 cf       	rjmp	.-62     	; 0x30c <Tasks_Task2+0xe>

0000034a <Tasks_Task1>:
#include <util/delay.h>
#include "kernel.h"
#include "tasks.h"
#include "debug.h"

void Tasks_Task1(void){
 34a:	1f 93       	push	r17
  
  DDRC |= (1<<1);
 34c:	39 9a       	sbi	0x07, 1	; 7

  Debug_Init(0);
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 a3 04 	call	0x946	; 0x946 <Debug_Init>
  //Kernel_Task_Sleep(5000);
  
  while(1){
    
    PORTC ^= (1<<1);
 356:	12 e0       	ldi	r17, 0x02	; 2
 358:	88 b1       	in	r24, 0x08	; 8
 35a:	81 27       	eor	r24, r17
 35c:	88 b9       	out	0x08, r24	; 8

	  Debug_Tx_Byte(1);
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
    Debug_Tx_Word(Kernel_Task_Sleep_Time_Get(1));
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	0e 94 7d 04 	call	0x8fa	; 0x8fa <Kernel_Task_Sleep_Time_Get>
 36a:	0e 94 bc 04 	call	0x978	; 0x978 <Debug_Tx_Word>
    Debug_Tx_Byte(0x20+Kernel_Task_Status_Get(1));
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	0e 94 87 04 	call	0x90e	; 0x90e <Kernel_Task_Status_Get>
 374:	80 5e       	subi	r24, 0xE0	; 224
 376:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
    Debug_Tx_Byte(0x10+Kernel_Abs_High_Prio_Task_ID_Get());
 37a:	0e 94 a0 04 	call	0x940	; 0x940 <Kernel_Abs_High_Prio_Task_ID_Get>
 37e:	80 5f       	subi	r24, 0xF0	; 240
 380:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
    Debug_Tx_Byte(Kernel_Lowest_Prio_Get());
 384:	0e 94 99 04 	call	0x932	; 0x932 <Kernel_Lowest_Prio_Get>
 388:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
    Kernel_Task_Sleep(5000);
 38c:	88 e8       	ldi	r24, 0x88	; 136
 38e:	93 e1       	ldi	r25, 0x13	; 19
 390:	0e 94 be 03 	call	0x77c	; 0x77c <Kernel_Task_Sleep>
 394:	e1 cf       	rjmp	.-62     	; 0x358 <Tasks_Task1+0xe>

00000396 <__vector_16>:


;;=================================ISR execution starting===================================;; 
.global  __vector_16                                                                           
    __vector_16:                                          ;total 26.13uS @8MHz    (211 clocks) 
	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 396:	5d 9a       	sbi	0x0b, 5	; 11
        KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 398:	0f 92       	push	r0
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	0f 92       	push	r0
 39e:	1f 92       	push	r1
 3a0:	11 24       	eor	r1, r1
 3a2:	2f 92       	push	r2
 3a4:	3f 92       	push	r3
 3a6:	4f 92       	push	r4
 3a8:	5f 92       	push	r5
 3aa:	6f 92       	push	r6
 3ac:	7f 92       	push	r7
 3ae:	8f 92       	push	r8
 3b0:	9f 92       	push	r9
 3b2:	af 92       	push	r10
 3b4:	bf 92       	push	r11
 3b6:	cf 92       	push	r12
 3b8:	df 92       	push	r13
 3ba:	ef 92       	push	r14
 3bc:	ff 92       	push	r15
 3be:	0f 93       	push	r16
 3c0:	1f 93       	push	r17
 3c2:	2f 93       	push	r18
 3c4:	3f 93       	push	r19
 3c6:	4f 93       	push	r20
 3c8:	5f 93       	push	r21
 3ca:	6f 93       	push	r22
 3cc:	7f 93       	push	r23
 3ce:	8f 93       	push	r24
 3d0:	9f 93       	push	r25
 3d2:	af 93       	push	r26
 3d4:	bf 93       	push	r27
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	ef 93       	push	r30
 3dc:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 3de:	1d b7       	in	r17, 0x3d	; 61
 3e0:	2e b7       	in	r18, 0x3e	; 62
 3e2:	ec e0       	ldi	r30, 0x0C	; 12
 3e4:	f1 e0       	ldi	r31, 0x01	; 1
 3e6:	00 91 07 01 	lds	r16, 0x0107
 3ea:	00 0f       	add	r16, r16
 3ec:	e0 0f       	add	r30, r16
 3ee:	00 e0       	ldi	r16, 0x00	; 0
 3f0:	f0 1f       	adc	r31, r16
 3f2:	10 83       	st	Z, r17
 3f4:	21 83       	std	Z+1, r18	; 0x01
		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 3f6:	00 91 06 01 	lds	r16, 0x0106
 3fa:	00 93 46 00 	sts	0x0046, r16
		KER_TICK_INCREMENT                                ;increment tick counter ( 27 clocks) 
 3fe:	00 91 00 01 	lds	r16, 0x0100
 402:	03 95       	inc	r16
 404:	00 93 00 01 	sts	0x0100, r16
 408:	10 e0       	ldi	r17, 0x00	; 0
 40a:	00 91 01 01 	lds	r16, 0x0101
 40e:	01 1f       	adc	r16, r17
 410:	00 93 01 01 	sts	0x0101, r16
 414:	00 91 02 01 	lds	r16, 0x0102
 418:	01 1f       	adc	r16, r17
 41a:	00 93 02 01 	sts	0x0102, r16
 41e:	00 91 03 01 	lds	r16, 0x0103
 422:	01 1f       	adc	r16, r17
 424:	00 93 03 01 	sts	0x0103, r16
 428:	00 91 04 01 	lds	r16, 0x0104
 42c:	01 1f       	adc	r16, r17
 42e:	00 93 04 01 	sts	0x0104, r16
		LDI    R24               , SCH_MODE_HANDLER       ;set sch mode           (  1 clock ) 
 432:	80 e0       	ldi	r24, 0x00	; 0
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 14 clocks) 
 434:	0f ef       	ldi	r16, 0xFF	; 255
 436:	00 93 09 01 	sts	0x0109, r16
 43a:	00 e0       	ldi	r16, 0x00	; 0
 43c:	00 93 0a 01 	sts	0x010A, r16
 440:	98 2f       	mov	r25, r24

00000442 <_KER_SCH_LOOP6>:
 442:	00 93 07 01 	sts	0x0107, r16
 446:	89 2f       	mov	r24, r25
 448:	e2 e4       	ldi	r30, 0x42	; 66
 44a:	f1 e0       	ldi	r31, 0x01	; 1
 44c:	00 91 07 01 	lds	r16, 0x0107
 450:	00 0f       	add	r16, r16
 452:	e0 0f       	add	r30, r16
 454:	00 e0       	ldi	r16, 0x00	; 0
 456:	f0 1f       	adc	r31, r16
 458:	00 81       	ld	r16, Z
 45a:	11 81       	ldd	r17, Z+1	; 0x01
 45c:	20 2f       	mov	r18, r16
 45e:	21 2b       	or	r18, r17
 460:	59 f0       	breq	.+22     	; 0x478 <_VAL_NULL7>
 462:	81 30       	cpi	r24, 0x01	; 1
 464:	99 f0       	breq	.+38     	; 0x48c <_VAL_NOT_NULL7>
 466:	21 e0       	ldi	r18, 0x01	; 1
 468:	02 1b       	sub	r16, r18
 46a:	20 e0       	ldi	r18, 0x00	; 0
 46c:	12 0b       	sbc	r17, r18
 46e:	00 83       	st	Z, r16
 470:	11 83       	std	Z+1, r17	; 0x01
 472:	20 2f       	mov	r18, r16
 474:	21 2b       	or	r18, r17
 476:	51 f4       	brne	.+20     	; 0x48c <_VAL_NOT_NULL7>

00000478 <_VAL_NULL7>:
 478:	ee e2       	ldi	r30, 0x2E	; 46
 47a:	f1 e0       	ldi	r31, 0x01	; 1
 47c:	00 91 07 01 	lds	r16, 0x0107
 480:	e0 0f       	add	r30, r16
 482:	00 e0       	ldi	r16, 0x00	; 0
 484:	f0 1f       	adc	r31, r16
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	80 83       	st	Z, r24
 48a:	01 c0       	rjmp	.+2      	; 0x48e <_EXIT_SLP_TIME7>

0000048c <_VAL_NOT_NULL7>:
 48c:	80 e0       	ldi	r24, 0x00	; 0

0000048e <_EXIT_SLP_TIME7>:
 48e:	81 30       	cpi	r24, 0x01	; 1
 490:	91 f4       	brne	.+36     	; 0x4b6 <_KER_SCH_NEXT6>
 492:	e8 e3       	ldi	r30, 0x38	; 56
 494:	f1 e0       	ldi	r31, 0x01	; 1
 496:	00 e0       	ldi	r16, 0x00	; 0
 498:	80 91 07 01 	lds	r24, 0x0107
 49c:	e8 0f       	add	r30, r24
 49e:	f0 1f       	adc	r31, r16
 4a0:	80 81       	ld	r24, Z
 4a2:	00 91 09 01 	lds	r16, 0x0109
 4a6:	80 17       	cp	r24, r16
 4a8:	30 f4       	brcc	.+12     	; 0x4b6 <_KER_SCH_NEXT6>
 4aa:	80 93 09 01 	sts	0x0109, r24
 4ae:	00 91 07 01 	lds	r16, 0x0107
 4b2:	00 93 0a 01 	sts	0x010A, r16

000004b6 <_KER_SCH_NEXT6>:
 4b6:	00 91 07 01 	lds	r16, 0x0107
 4ba:	03 95       	inc	r16
 4bc:	10 91 08 01 	lds	r17, 0x0108
 4c0:	01 17       	cp	r16, r17
 4c2:	08 f4       	brcc	.+2      	; 0x4c6 <_KER_SCH_EXIT6>
 4c4:	be cf       	rjmp	.-132    	; 0x442 <_KER_SCH_LOOP6>

000004c6 <_KER_SCH_EXIT6>:
 4c6:	00 91 0a 01 	lds	r16, 0x010A
 4ca:	00 93 07 01 	sts	0x0107, r16
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 4ce:	ec e0       	ldi	r30, 0x0C	; 12
 4d0:	f1 e0       	ldi	r31, 0x01	; 1
 4d2:	00 91 07 01 	lds	r16, 0x0107
 4d6:	00 0f       	add	r16, r16
 4d8:	e0 0f       	add	r30, r16
 4da:	00 e0       	ldi	r16, 0x00	; 0
 4dc:	f0 1f       	adc	r31, r16
 4de:	00 81       	ld	r16, Z
 4e0:	11 81       	ldd	r17, Z+1	; 0x01
 4e2:	0d bf       	out	0x3d, r16	; 61
 4e4:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 4e6:	ff 91       	pop	r31
 4e8:	ef 91       	pop	r30
 4ea:	df 91       	pop	r29
 4ec:	cf 91       	pop	r28
 4ee:	bf 91       	pop	r27
 4f0:	af 91       	pop	r26
 4f2:	9f 91       	pop	r25
 4f4:	8f 91       	pop	r24
 4f6:	7f 91       	pop	r23
 4f8:	6f 91       	pop	r22
 4fa:	5f 91       	pop	r21
 4fc:	4f 91       	pop	r20
 4fe:	3f 91       	pop	r19
 500:	2f 91       	pop	r18
 502:	1f 91       	pop	r17
 504:	0f 91       	pop	r16
 506:	ff 90       	pop	r15
 508:	ef 90       	pop	r14
 50a:	df 90       	pop	r13
 50c:	cf 90       	pop	r12
 50e:	bf 90       	pop	r11
 510:	af 90       	pop	r10
 512:	9f 90       	pop	r9
 514:	8f 90       	pop	r8
 516:	7f 90       	pop	r7
 518:	6f 90       	pop	r6
 51a:	5f 90       	pop	r5
 51c:	4f 90       	pop	r4
 51e:	3f 90       	pop	r3
 520:	2f 90       	pop	r2
 522:	1f 90       	pop	r1
 524:	0f 90       	pop	r0
 526:	0f be       	out	0x3f, r0	; 63
 528:	0f 90       	pop	r0
	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 52a:	5d 98       	cbi	0x0b, 5	; 11
		RETI                                              ;return from interrupt  (  4 clocks) 
 52c:	18 95       	reti

0000052e <Kernel_SysTick_Reg_Init>:


;;================================SysTick reg init starting=================================;; 
Kernel_SysTick_Reg_Init:                                  ;total 10.5uS @8MHz     ( 84 clocks) 
        ;arg1 -> prescaler R24, arg2 -> reload val R22
        CLI                                               ;disable global int     (  1 clock ) 
 52e:	f8 94       	cli
		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 530:	5d 98       	cbi	0x0b, 5	; 11
 532:	55 9a       	sbi	0x0a, 5	; 10
		
        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 534:	a0 91 20 01 	lds	r26, 0x0120
 538:	b0 91 21 01 	lds	r27, 0x0121
 53c:	0d b7       	in	r16, 0x3d	; 61
 53e:	1e b7       	in	r17, 0x3e	; 62
 540:	0d 93       	st	X+, r16
 542:	1d 93       	st	X+, r17
 544:	ed 93       	st	X+, r30
 546:	fd 93       	st	X+, r31
 548:	a0 93 20 01 	sts	0x0120, r26
 54c:	b0 93 21 01 	sts	0x0121, r27

		;clear reg
		LDI   R16                , 0x00                   ;set 0x00 to R16        (  1 clock )
 550:	00 e0       	ldi	r16, 0x00	; 0
        
		;clear tick counter
		STS   KerBase+OFB_TICK0  , R16                    ;clear  KerBase[0]      (  2 clocks) 
 552:	00 93 00 01 	sts	0x0100, r16
		STS   KerBase+OFB_TICK1  , R16                    ;clear  KerBase[1]      (  2 clocks) 
 556:	00 93 01 01 	sts	0x0101, r16
		STS   KerBase+OFB_TICK2  , R16                    ;clear  KerBase[2]      (  2 clocks) 
 55a:	00 93 02 01 	sts	0x0102, r16
		STS   KerBase+OFB_TICK3  , R16                    ;clear  KerBase[3]      (  2 clocks) 
 55e:	00 93 03 01 	sts	0x0103, r16
		STS   KerBase+OFB_TICK4  , R16                    ;clear  KerBase[4]      (  2 clocks) 
 562:	00 93 04 01 	sts	0x0104, r16
	    
		;clear system registers
		STS   KerBase+OFB_PRS    , R16                    ;clear  KerBase[5]      (  2 clocks) 
 566:	00 93 05 01 	sts	0x0105, r16
		STS   KerBase+OFB_RLD    , R16                    ;clear  KerBase[6]      (  2 clocks) 
 56a:	00 93 06 01 	sts	0x0106, r16
		STS   KerBase+OFB_TID    , R16                    ;clear  KerBase[7]      (  2 clocks) 
 56e:	00 93 07 01 	sts	0x0107, r16
		STS   KerBase+OFB_NTSK   , R16                    ;clear  KerBase[8]      (  2 clocks) 
 572:	00 93 08 01 	sts	0x0108, r16
        STS   KerBase+OFB_PTID   , R16                    ;clear  KerBase[9]      (  2 clocks) 
 576:	00 93 0a 01 	sts	0x010A, r16
		
		;clear all timer registers
		STS   SRTCCR0A           , R16                    ;clear TCCR0A           (  2 clocks) 
 57a:	00 93 44 00 	sts	0x0044, r16
		STS   SRTCCR0B           , R16                    ;clear TCCR0B           (  2 clocks) 
 57e:	00 93 45 00 	sts	0x0045, r16
		STS   SRTIMSK0           , R16                    ;clear TIMSK0           (  2 clocks) 
 582:	00 93 6e 00 	sts	0x006E, r16
		STS   SRTIFR0            , R16                    ;clear TIFR0            (  2 clocks) 
 586:	00 93 35 00 	sts	0x0035, r16
		STS   SROCR0A            , R16                    ;clear OCR0A            (  2 clocks) 
 58a:	00 93 47 00 	sts	0x0047, r16
		STS   SROCR0B            , R16                    ;clear OCR0B            (  2 clocks) 
 58e:	00 93 48 00 	sts	0x0048, r16
		STS   SRTCNT0            , R16                    ;clear TCNT0            (  2 clocks) 
 592:	00 93 46 00 	sts	0x0046, r16
		
		STS   KerBase+OFB_PRS    , R24                    ;KerBase[5] prescaler   (  2 clocks) 
 596:	80 93 05 01 	sts	0x0105, r24
		STS   KerBase+OFB_RLD    , R22                    ;KerBase[6] reload val  (  2 clocks) 
 59a:	60 93 06 01 	sts	0x0106, r22
		
        KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 59e:	a0 91 20 01 	lds	r26, 0x0120
 5a2:	b0 91 21 01 	lds	r27, 0x0121
 5a6:	fe 91       	ld	r31, -X
 5a8:	ee 91       	ld	r30, -X
 5aa:	1e 91       	ld	r17, -X
 5ac:	0e 91       	ld	r16, -X
 5ae:	0d bf       	out	0x3d, r16	; 61
 5b0:	1e bf       	out	0x3e, r17	; 62
 5b2:	a0 93 20 01 	sts	0x0120, r26
 5b6:	b0 93 21 01 	sts	0x0121, r27

		RET                                               ;return from subroutine (  4 clocks) 
 5ba:	08 95       	ret

000005bc <Kernel_Task_Create>:

;;===============================kernel task create starting================================;; 
Kernel_Task_Create:                                       ;total 19.86uS @8MHz    (162 clocks) 
        ;func_ptr->R25:R24, task_priority->R22 

        KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 5bc:	a0 91 20 01 	lds	r26, 0x0120
 5c0:	b0 91 21 01 	lds	r27, 0x0121
 5c4:	0d b7       	in	r16, 0x3d	; 61
 5c6:	1e b7       	in	r17, 0x3e	; 62
 5c8:	0d 93       	st	X+, r16
 5ca:	1d 93       	st	X+, r17
 5cc:	ed 93       	st	X+, r30
 5ce:	fd 93       	st	X+, r31
 5d0:	a0 93 20 01 	sts	0x0120, r26
 5d4:	b0 93 21 01 	sts	0x0121, r27
		
		;across this function, R16 will be used as task_id 
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 5d8:	00 91 07 01 	lds	r16, 0x0107
		LDI   R17                , 0x00                   ;clear reg              (  1 clock ) 
 5dc:	10 e0       	ldi	r17, 0x00	; 0
		
		;set priority to KerSchPr+task_id
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 5de:	e8 e3       	ldi	r30, 0x38	; 56
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 5e0:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
 5e2:	e0 0f       	add	r30, r16
		ADC   ZH                 , R17                    ;add high byte+carry    (  1 clock ) 
 5e4:	f1 1f       	adc	r31, r17
		ST    Z                  , R22                    ;save priority          (  2 clocks) 
 5e6:	60 83       	st	Z, r22
		
		;stack pointer for current task (KerStack + KER_STK_SZ*(task_id+1) - 1) ->stack top    
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 5e8:	00 91 07 01 	lds	r16, 0x0107
		MOV   R17                , R16                    ;load task_id           (  1 clock ) 
 5ec:	10 2f       	mov	r17, r16
		INC   R17                                         ;increment task_id      (  1 clock ) 
 5ee:	13 95       	inc	r17
		LDI   R18                , KER_STK_SZ             ;load stack size        (  1 clock ) 
 5f0:	20 e8       	ldi	r18, 0x80	; 128
		MUL   R17                , R18                    ;multiply to get offset (  2 clocks) 
 5f2:	12 9f       	mul	r17, r18
		MOV   ZL                 , R0                     ;load multiplied low    (  1 clocks) 
 5f4:	e0 2d       	mov	r30, r0
		MOV   ZH                 , R1                     ;load multiplied high   (  1 clocks) 
 5f6:	f1 2d       	mov	r31, r1
		SBIW  ZL                 , 0x01                   ;dec multiplied val-1   (  2 clocks) 
 5f8:	31 97       	sbiw	r30, 0x01	; 1
		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 5fa:	11 24       	eor	r1, r1
		LDI   R17                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
 5fc:	16 e5       	ldi	r17, 0x56	; 86
		LDI   R18                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
 5fe:	21 e0       	ldi	r18, 0x01	; 1
		ADD   ZL                 , R17                    ;add low bytes          (  1 clock ) 
 600:	e1 0f       	add	r30, r17
		ADC   ZH                 , R18                    ;add high bytes+carry   (  1 clock ) 
 602:	f2 1f       	adc	r31, r18
		OUT   IOSPL              , ZL                     ;load SPL               (  1 clock ) 
 604:	ed bf       	out	0x3d, r30	; 61
        OUT   IOSPH              , ZH                     ;load SPH               (  1 clock ) 
 606:	fe bf       	out	0x3e, r31	; 62
		
		;function argument directly returns word address
	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
 608:	8f 93       	push	r24
		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 60a:	9f 93       	push	r25
		
		;push context to stack of this task
		KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 60c:	0f 92       	push	r0
 60e:	0f b6       	in	r0, 0x3f	; 63
 610:	0f 92       	push	r0
 612:	1f 92       	push	r1
 614:	11 24       	eor	r1, r1
 616:	2f 92       	push	r2
 618:	3f 92       	push	r3
 61a:	4f 92       	push	r4
 61c:	5f 92       	push	r5
 61e:	6f 92       	push	r6
 620:	7f 92       	push	r7
 622:	8f 92       	push	r8
 624:	9f 92       	push	r9
 626:	af 92       	push	r10
 628:	bf 92       	push	r11
 62a:	cf 92       	push	r12
 62c:	df 92       	push	r13
 62e:	ef 92       	push	r14
 630:	ff 92       	push	r15
 632:	0f 93       	push	r16
 634:	1f 93       	push	r17
 636:	2f 93       	push	r18
 638:	3f 93       	push	r19
 63a:	4f 93       	push	r20
 63c:	5f 93       	push	r21
 63e:	6f 93       	push	r22
 640:	7f 93       	push	r23
 642:	8f 93       	push	r24
 644:	9f 93       	push	r25
 646:	af 93       	push	r26
 648:	bf 93       	push	r27
 64a:	cf 93       	push	r28
 64c:	df 93       	push	r29
 64e:	ef 93       	push	r30
 650:	ff 93       	push	r31
		
		;read stack pointer of current task (necessary when restore)
		IN    R17                , IOSPL                  ;read SPL               (  1 clock ) 
 652:	1d b7       	in	r17, 0x3d	; 61
        IN    R18                , IOSPH                  ;read SPH               (  1 clock ) 
 654:	2e b7       	in	r18, 0x3e	; 62
		
		;calculate the address where current task's SP will be stored and store SP
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 656:	00 91 07 01 	lds	r16, 0x0107
		MOV   R19                , R16                    ;copy task_id           (  1 clock ) 
 65a:	30 2f       	mov	r19, r16
		LSL   R19                                         ;left shift to multiply (  1 clock ) 
 65c:	33 0f       	add	r19, r19
		LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 65e:	ec e0       	ldi	r30, 0x0C	; 12
		LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 660:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R19                    ;add offset to array    (  1 clock ) 
 662:	e3 0f       	add	r30, r19
		LDI   R16                , 0x00                   ;clear reg              (  1 clock ) 
 664:	00 e0       	ldi	r16, 0x00	; 0
		ADC   ZH                 , R16                    ;add carry if any       (  1 clock ) 
 666:	f0 1f       	adc	r31, r16
		ST    Z+                 , R17                    ;SPL at KerPSp+offset   (  2 clocks) 
 668:	11 93       	st	Z+, r17
		ST    Z                  , R18                    ;SPH at KerPSp+offset   (  2 clocks) 
 66a:	20 83       	st	Z, r18
		
		;increment task_id
		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 66c:	00 91 07 01 	lds	r16, 0x0107
		INC   R16                                         ;increment task_id      (  1 clock ) 
 670:	03 95       	inc	r16
		STS   KerBase+OFB_TID    , R16                    ;store task_id          (  2 clocks) 
 672:	00 93 07 01 	sts	0x0107, r16

		;increment ntask
		LDS   R16                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 676:	00 91 08 01 	lds	r16, 0x0108
		INC   R16                                         ;increment ntask        (  1 clock ) 
 67a:	03 95       	inc	r16
		STS   KerBase+OFB_NTSK   , R16                    ;store ntask            (  2 clocks) 
 67c:	00 93 08 01 	sts	0x0108, r16
		
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 680:	a0 91 20 01 	lds	r26, 0x0120
 684:	b0 91 21 01 	lds	r27, 0x0121
 688:	fe 91       	ld	r31, -X
 68a:	ee 91       	ld	r30, -X
 68c:	1e 91       	ld	r17, -X
 68e:	0e 91       	ld	r16, -X
 690:	0d bf       	out	0x3d, r16	; 61
 692:	1e bf       	out	0x3e, r17	; 62
 694:	a0 93 20 01 	sts	0x0120, r26
 698:	b0 93 21 01 	sts	0x0121, r27
		
		RET                                               ;return from subroutine (  4 clocks) 
 69c:	08 95       	ret

0000069e <Kernel_Start_Tasks>:
		;save ZP
		;MOV   R4                 , ZL                     ;save ZPL               (  2 clocks) 
		;MOV   R5                 , ZH                     ;save ZPH               (  2 clocks) 
		
		;clear task_id
		LDI   R16                , 0x00                   ;load task_id           (  2 clocks) 
 69e:	00 e0       	ldi	r16, 0x00	; 0
		STS   KerBase+OFB_TID    , R16                    ;store task_id          (  2 clocks) 
 6a0:	00 93 07 01 	sts	0x0107, r16
		
		;load ZP with addr+offset
		LDI   ZL                 , lo8(KerPSP+0x00)       ;fetch ZPL KerPSP->TID0 (  1 clock ) 
 6a4:	ec e0       	ldi	r30, 0x0C	; 12
		LDI   ZH                 , hi8(KerPSP+0x00)       ;fetch ZPH KerPSP->TID0 (  1 clock ) 
 6a6:	f1 e0       	ldi	r31, 0x01	; 1
		
		;load task_id 0 task's SP
		LD    R16                , Z+                     ;load val from Z, inc Z (  2 clocks) 
 6a8:	01 91       	ld	r16, Z+
		LD    R17                , Z                      ;load val from Z+1      (  2 clocks) 
 6aa:	10 81       	ld	r17, Z
		
        ;set task_id=0 task's SP
		OUT   IOSPL              , R16                    ;load SPL               (  1 clock ) 
 6ac:	0d bf       	out	0x3d, r16	; 61
        OUT   IOSPH              , R17                    ;load SPH               (  1 clock ) 
 6ae:	1e bf       	out	0x3e, r17	; 62
        
        ;forcefully restore context, in ISR it will be stored automatically
		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 6b0:	ff 91       	pop	r31
 6b2:	ef 91       	pop	r30
 6b4:	df 91       	pop	r29
 6b6:	cf 91       	pop	r28
 6b8:	bf 91       	pop	r27
 6ba:	af 91       	pop	r26
 6bc:	9f 91       	pop	r25
 6be:	8f 91       	pop	r24
 6c0:	7f 91       	pop	r23
 6c2:	6f 91       	pop	r22
 6c4:	5f 91       	pop	r21
 6c6:	4f 91       	pop	r20
 6c8:	3f 91       	pop	r19
 6ca:	2f 91       	pop	r18
 6cc:	1f 91       	pop	r17
 6ce:	0f 91       	pop	r16
 6d0:	ff 90       	pop	r15
 6d2:	ef 90       	pop	r14
 6d4:	df 90       	pop	r13
 6d6:	cf 90       	pop	r12
 6d8:	bf 90       	pop	r11
 6da:	af 90       	pop	r10
 6dc:	9f 90       	pop	r9
 6de:	8f 90       	pop	r8
 6e0:	7f 90       	pop	r7
 6e2:	6f 90       	pop	r6
 6e4:	5f 90       	pop	r5
 6e6:	4f 90       	pop	r4
 6e8:	3f 90       	pop	r3
 6ea:	2f 90       	pop	r2
 6ec:	1f 90       	pop	r1
 6ee:	0f 90       	pop	r0
 6f0:	0f be       	out	0x3f, r0	; 63
 6f2:	0f 90       	pop	r0
		;restore ZP
		;MOV   ZL                 , R4                     ;restore ZPL            (  2 clocks) 
		;MOV   ZH                 , R5                     ;restore ZPL            (  2 clocks) 
		
		;config timer for system tick
		KER_TIMER_INIT                                    ;init timer, int enable ( 12 clocks) 
 6f4:	00 91 05 01 	lds	r16, 0x0105
 6f8:	10 91 06 01 	lds	r17, 0x0106
 6fc:	00 93 45 00 	sts	0x0045, r16
 700:	10 93 46 00 	sts	0x0046, r17
 704:	01 e0       	ldi	r16, 0x01	; 1
 706:	00 93 6e 00 	sts	0x006E, r16
 70a:	78 94       	sei
        
		;execute return to jump to task0, pushed while task init
		RET                                               ;return from subroutine (  4 clocks) 
 70c:	08 95       	ret

0000070e <Kernel_Init>:


;;===================================kernel init starting===================================;; 
Kernel_Init:                                              ;total 37.00uS @8MHz    (296 clocks) 
		;save necessary registers and MSP
		CLR   R1                                          ;gcc expects            (  1 clock ) 
 70e:	11 24       	eor	r1, r1

        ;store stack top (for MSP) addr to KerSSZ+OFM_MSPI0:1
		LDI   R16                , lo8(KerSSZ+OFM_MSPS)   ;load low address       (  1 clock ) 
 710:	02 e2       	ldi	r16, 0x22	; 34
		LDI   R17                , hi8(KerSSZ+OFM_MSPS)   ;load high address      (  1 clock )
 712:	11 e0       	ldi	r17, 0x01	; 1
        STS   KerSSZ+OFM_MSPI+0  , R16                    ;set mspi to stack top  (  2 clocks) 
 714:	00 93 20 01 	sts	0x0120, r16
		STS   KerSSZ+OFM_MSPI+1  , R17                    ;set mspi to stack top  (  2 clocks) 
 718:	10 93 21 01 	sts	0x0121, r17
        
		KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 71c:	a0 91 20 01 	lds	r26, 0x0120
 720:	b0 91 21 01 	lds	r27, 0x0121
 724:	0d b7       	in	r16, 0x3d	; 61
 726:	1e b7       	in	r17, 0x3e	; 62
 728:	0d 93       	st	X+, r16
 72a:	1d 93       	st	X+, r17
 72c:	ed 93       	st	X+, r30
 72e:	fd 93       	st	X+, r31
 730:	a0 93 20 01 	sts	0x0120, r26
 734:	b0 93 21 01 	sts	0x0121, r27

		;init timer for kernel 
		LDI   R24                , 0x03                   ;set prescaler          (  1 clock ) 
 738:	83 e0       	ldi	r24, 0x03	; 3
		LDI   R22                , 0x82                   ;set reload val         (  1 clock ) 
 73a:	62 e8       	ldi	r22, 0x82	; 130
		CALL  Kernel_SysTick_Reg_Init                     ;init timer             ( 84 clocks) 
 73c:	0e 94 97 02 	call	0x52e	; 0x52e <Kernel_SysTick_Reg_Init>
		
		;create idle task at task_id 0, priority 0xFF (lowest)
		LDI   R24                , lo8(Kernel_Task_Idle)  ;load func addr low     (  1 clock ) 
 740:	8c e6       	ldi	r24, 0x6C	; 108
		LDI   R25                , hi8(Kernel_Task_Idle)  ;load func addr high    (  1 clock ) 
 742:	97 e0       	ldi	r25, 0x07	; 7
		LSR   R25                                         ;right shift to divide  (  1 clock ) 
 744:	96 95       	lsr	r25
		ROR   R24                                         ;rotate right th carry  (  1 clock ) 
 746:	87 95       	ror	r24
		LDI   R22                , 0xFF                   ;set max val
 748:	6f ef       	ldi	r22, 0xFF	; 255
		CALL  Kernel_Task_Create                          ;init idle task         (159 clocks) 
 74a:	0e 94 de 02 	call	0x5bc	; 0x5bc <Kernel_Task_Create>
		
		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 74e:	a0 91 20 01 	lds	r26, 0x0120
 752:	b0 91 21 01 	lds	r27, 0x0121
 756:	fe 91       	ld	r31, -X
 758:	ee 91       	ld	r30, -X
 75a:	1e 91       	ld	r17, -X
 75c:	0e 91       	ld	r16, -X
 75e:	0d bf       	out	0x3d, r16	; 61
 760:	1e bf       	out	0x3e, r17	; 62
 762:	a0 93 20 01 	sts	0x0120, r26
 766:	b0 93 21 01 	sts	0x0121, r27

		;execute return to jump to task0, pushed while task init
		RET                                               ;return from subroutine (  4 clocks) 
 76a:	08 95       	ret

0000076c <Kernel_Task_Idle>:



;;=================================kernel idle task starting================================;; 
Kernel_Task_Idle:                                         ;total 0.5uS @8MHz      (  4 clocks) 
        LDI   R25                , 0x00                   ;set UBRRH              (  1 clock ) 
 76c:	90 e0       	ldi	r25, 0x00	; 0
        LDI   R24                , 0x00                   ;set UBRRL              (  1 clock ) 
 76e:	80 e0       	ldi	r24, 0x00	; 0
        CALL  Debug_Init                                  ;debug init
 770:	0e 94 a3 04 	call	0x946	; 0x946 <Debug_Init>

00000774 <_IDLE_LOOP>:
    _IDLE_LOOP:                                           ;forever loop
	    LDI   R24                , 0x23
 774:	83 e2       	ldi	r24, 0x23	; 35
		CALL  Debug_Tx_Byte      
 776:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
		RJMP  _IDLE_LOOP                                  ;return from subroutine (  4 clocks) 
 77a:	fc cf       	rjmp	.-8      	; 0x774 <_IDLE_LOOP>

0000077c <Kernel_Task_Sleep>:


;;================================kernel task sleep starting================================;; 
Kernel_Task_Sleep:
        ;save current context
        KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 77c:	0f 92       	push	r0
 77e:	0f b6       	in	r0, 0x3f	; 63
 780:	0f 92       	push	r0
 782:	1f 92       	push	r1
 784:	11 24       	eor	r1, r1
 786:	2f 92       	push	r2
 788:	3f 92       	push	r3
 78a:	4f 92       	push	r4
 78c:	5f 92       	push	r5
 78e:	6f 92       	push	r6
 790:	7f 92       	push	r7
 792:	8f 92       	push	r8
 794:	9f 92       	push	r9
 796:	af 92       	push	r10
 798:	bf 92       	push	r11
 79a:	cf 92       	push	r12
 79c:	df 92       	push	r13
 79e:	ef 92       	push	r14
 7a0:	ff 92       	push	r15
 7a2:	0f 93       	push	r16
 7a4:	1f 93       	push	r17
 7a6:	2f 93       	push	r18
 7a8:	3f 93       	push	r19
 7aa:	4f 93       	push	r20
 7ac:	5f 93       	push	r21
 7ae:	6f 93       	push	r22
 7b0:	7f 93       	push	r23
 7b2:	8f 93       	push	r24
 7b4:	9f 93       	push	r25
 7b6:	af 93       	push	r26
 7b8:	bf 93       	push	r27
 7ba:	cf 93       	push	r28
 7bc:	df 93       	push	r29
 7be:	ef 93       	push	r30
 7c0:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks)
 7c2:	1d b7       	in	r17, 0x3d	; 61
 7c4:	2e b7       	in	r18, 0x3e	; 62
 7c6:	ec e0       	ldi	r30, 0x0C	; 12
 7c8:	f1 e0       	ldi	r31, 0x01	; 1
 7ca:	00 91 07 01 	lds	r16, 0x0107
 7ce:	00 0f       	add	r16, r16
 7d0:	e0 0f       	add	r30, r16
 7d2:	00 e0       	ldi	r16, 0x00	; 0
 7d4:	f0 1f       	adc	r31, r16
 7d6:	10 83       	st	Z, r17
 7d8:	21 83       	std	Z+1, r18	; 0x01
		;CLI
		;create next task wakeup time (args R25:R24)
		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 7da:	e2 e4       	ldi	r30, 0x42	; 66
		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 7dc:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
 7de:	00 91 07 01 	lds	r16, 0x0107
 7e2:	00 0f       	add	r16, r16
 7e4:	e0 0f       	add	r30, r16
 7e6:	00 e0       	ldi	r16, 0x00	; 0
 7e8:	f0 1f       	adc	r31, r16
		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
 7ea:	80 83       	st	Z, r24
		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 7ec:	91 83       	std	Z+1, r25	; 0x01
		
		;update task scheduler status as blocked
		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 7ee:	ee e2       	ldi	r30, 0x2E	; 46
		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 7f0:	f1 e0       	ldi	r31, 0x01	; 1
		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
 7f2:	00 91 07 01 	lds	r16, 0x0107
 7f6:	e0 0f       	add	r30, r16
 7f8:	00 e0       	ldi	r16, 0x00	; 0
 7fa:	f0 1f       	adc	r31, r16
        LDI   R16                , TASK_BLOCK             ;block task until cnt=0 (  1 clock ) 
 7fc:	00 e0       	ldi	r16, 0x00	; 0
		STD   Z+0                , R16                    ;save block flag        (  2 clocks) 
 7fe:	00 83       	st	Z, r16

		;SEI
		;run scheduler, load next task sp, restore context
		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 800:	81 e0       	ldi	r24, 0x01	; 1
		KER_RUN_SCHEDULER                                 ;run scheduler          ( 14 clocks)
 802:	0f ef       	ldi	r16, 0xFF	; 255
 804:	00 93 09 01 	sts	0x0109, r16
 808:	00 e0       	ldi	r16, 0x00	; 0
 80a:	00 93 0a 01 	sts	0x010A, r16
 80e:	98 2f       	mov	r25, r24

00000810 <_KER_SCH_LOOP30>:
 810:	00 93 07 01 	sts	0x0107, r16
 814:	89 2f       	mov	r24, r25
 816:	e2 e4       	ldi	r30, 0x42	; 66
 818:	f1 e0       	ldi	r31, 0x01	; 1
 81a:	00 91 07 01 	lds	r16, 0x0107
 81e:	00 0f       	add	r16, r16
 820:	e0 0f       	add	r30, r16
 822:	00 e0       	ldi	r16, 0x00	; 0
 824:	f0 1f       	adc	r31, r16
 826:	00 81       	ld	r16, Z
 828:	11 81       	ldd	r17, Z+1	; 0x01
 82a:	20 2f       	mov	r18, r16
 82c:	21 2b       	or	r18, r17
 82e:	59 f0       	breq	.+22     	; 0x846 <_VAL_NULL31>
 830:	81 30       	cpi	r24, 0x01	; 1
 832:	99 f0       	breq	.+38     	; 0x85a <_VAL_NOT_NULL31>
 834:	21 e0       	ldi	r18, 0x01	; 1
 836:	02 1b       	sub	r16, r18
 838:	20 e0       	ldi	r18, 0x00	; 0
 83a:	12 0b       	sbc	r17, r18
 83c:	00 83       	st	Z, r16
 83e:	11 83       	std	Z+1, r17	; 0x01
 840:	20 2f       	mov	r18, r16
 842:	21 2b       	or	r18, r17
 844:	51 f4       	brne	.+20     	; 0x85a <_VAL_NOT_NULL31>

00000846 <_VAL_NULL31>:
 846:	ee e2       	ldi	r30, 0x2E	; 46
 848:	f1 e0       	ldi	r31, 0x01	; 1
 84a:	00 91 07 01 	lds	r16, 0x0107
 84e:	e0 0f       	add	r30, r16
 850:	00 e0       	ldi	r16, 0x00	; 0
 852:	f0 1f       	adc	r31, r16
 854:	81 e0       	ldi	r24, 0x01	; 1
 856:	80 83       	st	Z, r24
 858:	01 c0       	rjmp	.+2      	; 0x85c <_EXIT_SLP_TIME31>

0000085a <_VAL_NOT_NULL31>:
 85a:	80 e0       	ldi	r24, 0x00	; 0

0000085c <_EXIT_SLP_TIME31>:
 85c:	81 30       	cpi	r24, 0x01	; 1
 85e:	91 f4       	brne	.+36     	; 0x884 <_KER_SCH_NEXT30>
 860:	e8 e3       	ldi	r30, 0x38	; 56
 862:	f1 e0       	ldi	r31, 0x01	; 1
 864:	00 e0       	ldi	r16, 0x00	; 0
 866:	80 91 07 01 	lds	r24, 0x0107
 86a:	e8 0f       	add	r30, r24
 86c:	f0 1f       	adc	r31, r16
 86e:	80 81       	ld	r24, Z
 870:	00 91 09 01 	lds	r16, 0x0109
 874:	80 17       	cp	r24, r16
 876:	30 f4       	brcc	.+12     	; 0x884 <_KER_SCH_NEXT30>
 878:	80 93 09 01 	sts	0x0109, r24
 87c:	00 91 07 01 	lds	r16, 0x0107
 880:	00 93 0a 01 	sts	0x010A, r16

00000884 <_KER_SCH_NEXT30>:
 884:	00 91 07 01 	lds	r16, 0x0107
 888:	03 95       	inc	r16
 88a:	10 91 08 01 	lds	r17, 0x0108
 88e:	01 17       	cp	r16, r17
 890:	08 f4       	brcc	.+2      	; 0x894 <_KER_SCH_EXIT30>
 892:	be cf       	rjmp	.-132    	; 0x810 <_KER_SCH_LOOP30>

00000894 <_KER_SCH_EXIT30>:
 894:	00 91 0a 01 	lds	r16, 0x010A
 898:	00 93 07 01 	sts	0x0107, r16
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 89c:	ec e0       	ldi	r30, 0x0C	; 12
 89e:	f1 e0       	ldi	r31, 0x01	; 1
 8a0:	00 91 07 01 	lds	r16, 0x0107
 8a4:	00 0f       	add	r16, r16
 8a6:	e0 0f       	add	r30, r16
 8a8:	00 e0       	ldi	r16, 0x00	; 0
 8aa:	f0 1f       	adc	r31, r16
 8ac:	00 81       	ld	r16, Z
 8ae:	11 81       	ldd	r17, Z+1	; 0x01
 8b0:	0d bf       	out	0x3d, r16	; 61
 8b2:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 8b4:	ff 91       	pop	r31
 8b6:	ef 91       	pop	r30
 8b8:	df 91       	pop	r29
 8ba:	cf 91       	pop	r28
 8bc:	bf 91       	pop	r27
 8be:	af 91       	pop	r26
 8c0:	9f 91       	pop	r25
 8c2:	8f 91       	pop	r24
 8c4:	7f 91       	pop	r23
 8c6:	6f 91       	pop	r22
 8c8:	5f 91       	pop	r21
 8ca:	4f 91       	pop	r20
 8cc:	3f 91       	pop	r19
 8ce:	2f 91       	pop	r18
 8d0:	1f 91       	pop	r17
 8d2:	0f 91       	pop	r16
 8d4:	ff 90       	pop	r15
 8d6:	ef 90       	pop	r14
 8d8:	df 90       	pop	r13
 8da:	cf 90       	pop	r12
 8dc:	bf 90       	pop	r11
 8de:	af 90       	pop	r10
 8e0:	9f 90       	pop	r9
 8e2:	8f 90       	pop	r8
 8e4:	7f 90       	pop	r7
 8e6:	6f 90       	pop	r6
 8e8:	5f 90       	pop	r5
 8ea:	4f 90       	pop	r4
 8ec:	3f 90       	pop	r3
 8ee:	2f 90       	pop	r2
 8f0:	1f 90       	pop	r1
 8f2:	0f 90       	pop	r0
 8f4:	0f be       	out	0x3f, r0	; 63
 8f6:	0f 90       	pop	r0
		
		RET                                               ;return from subroutine (  4 clocks) 
 8f8:	08 95       	ret

000008fa <Kernel_Task_Sleep_Time_Get>:


;;===========================kernel task sleep time get starting============================;; 
Kernel_Task_Sleep_Time_Get:
		;get remaining sleep time (ms), arg R24, return R25:R24
		MOV   R16                , R24                    ;copy                   (  1 clock ) 
 8fa:	08 2f       	mov	r16, r24
		LSL   R16                                         ;x2                     (  1 clock ) 
 8fc:	00 0f       	add	r16, r16
		LDI   R30                , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 8fe:	e2 e4       	ldi	r30, 0x42	; 66
		LDI   R31                , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 900:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 902:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 904:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 906:	f0 1f       	adc	r31, r16
		LD    R24                , Z+                     ;load sleep time        (  2 clocks) 
 908:	81 91       	ld	r24, Z+
		LD    R25                , Z                      ;load sleep time        (  2 clocks) 
 90a:	90 81       	ld	r25, Z
		RET                                               ;return from subroutine (  4 clocks) 
 90c:	08 95       	ret

0000090e <Kernel_Task_Status_Get>:


;;==============================kernel task status get starting=============================;; 
Kernel_Task_Status_Get:
		;get task status ->ready/blocked, arg R24, return R24
		MOV   R16                , R24                    ;copy                   (  1 clock ) 
 90e:	08 2f       	mov	r16, r24
		LDI   R30                , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 910:	ee e2       	ldi	r30, 0x2E	; 46
		LDI   R31                , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 912:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 914:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 916:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 918:	f0 1f       	adc	r31, r16
		LD    R24                , Z                      ;load task status       (  2 clocks) 
 91a:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 91c:	08 95       	ret

0000091e <Kernel_NTask_Get>:



;;================================kernel ntask get starting=================================;; 
Kernel_NTask_Get:                                         ;total 0.75uS @8MHz     (  6 clocks) 
		LDS   R24                 , KerBase+OFB_NTSK      ;load ntask             (  2 clock ) 
 91e:	80 91 08 01 	lds	r24, 0x0108
		RET                                               ;return from subroutine (  4 clocks) 
 922:	08 95       	ret

00000924 <Kernel_Task_Prio_Get>:


;;=============================kernel task priority get starting============================;; 
Kernel_Task_Prio_Get:                                     ;total 1.38uS @8MHz     ( 11 clocks) 
		;get priority of the task id, arg (task_id->R24), return R24
		MOV   R16                , R24                    ;copy task_id           (  1 clock ) 
 924:	08 2f       	mov	r16, r24
		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 926:	e8 e3       	ldi	r30, 0x38	; 56
		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 928:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
 92a:	e0 0f       	add	r30, r16
		ADC   ZH                 , R1                     ;add high byte+carry    (  1 clock ) 
 92c:	f1 1d       	adc	r31, r1
		LD    R24                , Z                      ;load priority          (  2 clocks) 
 92e:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 930:	08 95       	ret

00000932 <Kernel_Lowest_Prio_Get>:


;;============================kernel lowest priority get starting===========================;; 
Kernel_Lowest_Prio_Get:                                   ;total 0.75uS @8MHz     (  6 clocks) 
		;get lowest priority, return R24
		LDS   R24                , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
 932:	80 91 09 01 	lds	r24, 0x0109
		RET                                               ;return from subroutine (  4 clocks) 
 936:	08 95       	ret

00000938 <Kernel_High_Prio_Task_ID_Get>:


;;===========================kernel high priority task id starting==========================;; 
Kernel_High_Prio_Task_ID_Get:
		;internal idle task id = 0, app task start from task id 1, return R24
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 938:	80 91 0a 01 	lds	r24, 0x010A
		DEC   R24                                         ;decrement by 1         (  1 clock ) 
 93c:	8a 95       	dec	r24
		RET                                               ;return from subroutine (  4 clocks) 
 93e:	08 95       	ret

00000940 <Kernel_Abs_High_Prio_Task_ID_Get>:


;;=========================kernel abs high priority task id starting========================;; 
Kernel_Abs_High_Prio_Task_ID_Get:
		;get highest priority task id, return R24
		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 940:	80 91 0a 01 	lds	r24, 0x010A
		RET                                               ;return from subroutine (  4 clocks) 
 944:	08 95       	ret

00000946 <Debug_Init>:


;;===================================debug init starting====================================;;
Debug_Init:                                               ;total 2.38uS @8MHz     ( 19 clocks) 
        ;init registers for UART0 (Arg R25:R24->UBRRH:UBRRL)
		LDI   R16                , (1<<1)                 ;mask U2x               (  1 clock )
 946:	02 e0       	ldi	r16, 0x02	; 2
		STS   SRUCSR0A           , R16                    ;load val to UCSR0A     (  2 clocks)
 948:	00 93 c0 00 	sts	0x00C0, r16
		MOV   R16                , R25                    ;copy R25->baud rate H  (  1 clock )
 94c:	09 2f       	mov	r16, r25
		STS   SRUBRR0H           , R16                    ;load val to UBRR0H     (  2 clocks)
 94e:	00 93 c5 00 	sts	0x00C5, r16
		MOV   R16                , R24                    ;copy R24->baud rate L  (  1 clock )
 952:	08 2f       	mov	r16, r24
		STS   SRUBRR0L           , R16                    ;load val to UBRR0L     (  2 clocks)
 954:	00 93 c4 00 	sts	0x00C4, r16
		LDI   R16                , (1<<1)|(1<<2)          ;config 8 data bit      (  1 clock )
 958:	06 e0       	ldi	r16, 0x06	; 6
		STS   SRUCSR0C           , R16                    ;load val to UCSR0C     (  2 clocks)
 95a:	00 93 c2 00 	sts	0x00C2, r16
		LDI   R16                , (1<<3)                 ;enable tx              (  1 clock )
 95e:	08 e0       	ldi	r16, 0x08	; 8
		STS   SRUCSR0B           , R16                    ;load val to UCSR0B     (  2 clocks)
 960:	00 93 c1 00 	sts	0x00C1, r16
        RET                                               ;return from subroutine (  4 clocks) 
 964:	08 95       	ret

00000966 <Debug_Tx_Byte>:


;;====================================debug tx starting=====================================;; 
Debug_Tx_Byte:                                            ;total 2.00uS+LT @8MHz  ( 16 clocks) 
		;write single byte to data register (Arg R24)                                          
		PUSH  R16                                         ;save reg               (  2 clocks) 
 966:	0f 93       	push	r16
		STS   SRUDR0             , R24                    ;load val to UDR0       (  2 clocks) 
 968:	80 93 c6 00 	sts	0x00C6, r24

0000096c <__UDRE0_CLEARED>:
                                                                                               
    __UDRE0_CLEARED:                                      ;undefined loop wrt ck               
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16     (  2 clocks) 
 96c:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x05                   ;skip if UDRE0 is set   (  2 clocks) 
 970:	05 ff       	sbrs	r16, 5
		RJMP  __UDRE0_CLEARED                             ;wait until UDRE0 is set(  2 clocks) 
 972:	fc cf       	rjmp	.-8      	; 0x96c <__UDRE0_CLEARED>
		POP   R16                                         ;restore reg            (  2 clocks) 
 974:	0f 91       	pop	r16
        RET                                               ;return from subroutine (  4 clocks) 
 976:	08 95       	ret

00000978 <Debug_Tx_Word>:


;;==================================debug tx word starting==================================;; 
Debug_Tx_Word:                                            ;total 2.00uS+LT @8MHz  ( 16 clocks) 
		;write 2 bytes, (Arg R24, R25), Args retained                                          
		PUSH  R24                                         ;save reg               (  2 clocks) 
 978:	8f 93       	push	r24
		MOV   R24                , R25                    ;copy reg               (  1 clock ) 
 97a:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte                               ;send via uart          ( 21 clocks) 
 97c:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
        POP   R24                                         ;restore reg            (  2 clocks) 
 980:	8f 91       	pop	r24
		CALL  Debug_Tx_Byte                               ;send via uart          ( 21 clocks) 
 982:	0e 94 b3 04 	call	0x966	; 0x966 <Debug_Tx_Byte>
        RET                                               ;return from subroutine (  4 clocks) 
 986:	08 95       	ret

00000988 <Debug_Tx_Byte_Conf>:


;;================================debug tx confirm starting=================================;;
Debug_Tx_Byte_Conf:                                       ;total 2.63uS+LT @8MHz  ( 21 clocks)
        ;write 1 byte, (Arg R24), Args retained
		PUSH  R16                                         ;save reg               (  2 clocks)
 988:	0f 93       	push	r16
		STS   SRUDR0             , R24                    ;load val to UDR0,      (  2 clocks)
 98a:	80 93 c6 00 	sts	0x00C6, r24

0000098e <__TXC0_CLEARED>:
		
    __TXC0_CLEARED:
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,    (  2 clocks)
 98e:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x06                   ;skip if TXC0 is set,   (  2 clocks)
 992:	06 ff       	sbrs	r16, 6
		RJMP  __TXC0_CLEARED                              ;wait until TXC0 is set (  2 clocks)
 994:	fc cf       	rjmp	.-8      	; 0x98e <__TXC0_CLEARED>
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,    (  2 clocks)
 996:	00 91 c0 00 	lds	r16, 0x00C0
		ORI   R16                , (1<<6)                 ;mask bit 6,            (  1 clock )
 99a:	00 64       	ori	r16, 0x40	; 64
		STS   SRUCSR0A           , R16                    ;write reg with bit msk (  2 clocks)
 99c:	00 93 c0 00 	sts	0x00C0, r16
		POP   R16                                         ;restore reg            (  2 clocks)
 9a0:	0f 91       	pop	r16
        RET                                               ;return from subroutine (  4 clocks) 
 9a2:	08 95       	ret

000009a4 <Debug_Tx_Word_Conf>:


;;==============================debug tx word confirm starting==============================;;
Debug_Tx_Word_Conf:                                       ;total 6.38uS+LT @8MHz  ( 51 clocks)
        ;write 2 bytes, (Arg R24, R25), Args retained
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 9a4:	0e 94 c4 04 	call	0x988	; 0x988 <Debug_Tx_Byte_Conf>
		PUSH  R24                                         ;save reg               (  2 clocks)
 9a8:	8f 93       	push	r24
		MOV   R24                , R25                    ;copy R25 to R24        (  1 clock )
 9aa:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 9ac:	0e 94 c4 04 	call	0x988	; 0x988 <Debug_Tx_Byte_Conf>
		POP   R24                                         ;restore reg            (  2 clocks)
 9b0:	8f 91       	pop	r24
        RET                                               ;return from subroutine (  4 clocks) 
 9b2:	08 95       	ret

000009b4 <Debug_Tx_DWord_Conf>:


;;==============================debug tx dword confirm starting=============================;; 
Debug_Tx_DWord_Conf:                                      ;total 12.38uS+LT @8MHz ( 99 clocks) 
        ;write 4 bytes, (Arg R22-R25), Args retained
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks)
 9b4:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R22                    ;copy R22 to R24          (1 clock )
 9b8:	86 2f       	mov	r24, r22
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 9ba:	0e 94 c4 04 	call	0x988	; 0x988 <Debug_Tx_Byte_Conf>
		MOV   R24                , R23                    ;copy R23 to R24          (1 clock )
 9be:	87 2f       	mov	r24, r23
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 9c0:	0e 94 c4 04 	call	0x988	; 0x988 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24              (2 clocks)
 9c4:	80 91 4a 00 	lds	r24, 0x004A
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 9c8:	0e 94 c4 04 	call	0x988	; 0x988 <Debug_Tx_Byte_Conf>
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks)
 9cc:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R25                    ;copy R22 to R24          (1 clock )
 9d0:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 9d2:	0e 94 c4 04 	call	0x988	; 0x988 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24 val,         (2 clocks)
 9d6:	80 91 4a 00 	lds	r24, 0x004A
        RET                                               ;return from subroutine,  (4 clocks) 
 9da:	08 95       	ret

000009dc <Debug_Tx_From_RAM>:


;;=============================debug tx confirm from ram starting===========================;; 
Debug_Tx_From_RAM:                                        ;total 4.38uS+LT @8MHz  ( 35 clocks) 
        ;print data from RAM address (Arg R24-R25)
		MOV   R16                , R30                    ;copy R30 to R16          (1 clock )
 9dc:	0e 2f       	mov	r16, r30
		MOV   R17                , R31                    ;copy R31 to R17          (1 clock )
 9de:	1f 2f       	mov	r17, r31
		MOV   R18                , R24                    ;copy R24 to R18          (1 clock )
 9e0:	28 2f       	mov	r18, r24
		MOV   R30                , R24                    ;copy R22 to R24          (1 clock )
 9e2:	e8 2f       	mov	r30, r24
		MOV   R31                , R25                    ;copy R22 to R24          (1 clock )
 9e4:	f9 2f       	mov	r31, r25
		LD    R24                , Z                      ;load val to R24          (2 clocks)
 9e6:	80 81       	ld	r24, Z
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 9e8:	0e 94 c4 04 	call	0x988	; 0x988 <Debug_Tx_Byte_Conf>
		MOV   R30                , R16                    ;copy R16 to R30          (1 clock )
 9ec:	e0 2f       	mov	r30, r16
		MOV   R31                , R17                    ;copy R17 to R31          (1 clock )
 9ee:	f1 2f       	mov	r31, r17
		MOV   R24                , R18                    ;copy R18 to R24          (1 clock )
 9f0:	82 2f       	mov	r24, r18
        RET                                               ;return from subroutine,  (4 clocks) 
 9f2:	08 95       	ret

000009f4 <Debug_Tx_RAM_Area>:

;;=============================debug tx confirm ram area starting===========================;; 
Debug_Tx_RAM_Area:                                        ;5.5uS+LT x R22 @8MHz  ( 44 clocks) 
        ;print data from RAM address (arguments R24:R25, R22)
	__DUMP_BYTES:
	    CALL  Debug_Tx_From_RAM                           ;send via uart from ram
 9f4:	0e 94 ee 04 	call	0x9dc	; 0x9dc <Debug_Tx_From_RAM>
		SUBI  R24                , 0x01                   ;decrement from LSByte
 9f8:	81 50       	subi	r24, 0x01	; 1
        SBCI  R25                , 0x00                   ;decrement if carry
 9fa:	90 40       	sbci	r25, 0x00	; 0
		SUBI  R22                , 0x01                   ;decrement
 9fc:	61 50       	subi	r22, 0x01	; 1
		BRNE  __DUMP_BYTES
 9fe:	d1 f7       	brne	.-12     	; 0x9f4 <Debug_Tx_RAM_Area>
        RET                                               ;return from subroutine,  (4 clocks) 
 a00:	08 95       	ret

00000a02 <_exit>:
 a02:	f8 94       	cli

00000a04 <__stop_program>:
 a04:	ff cf       	rjmp	.-2      	; 0xa04 <__stop_program>
