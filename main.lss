
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000061a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000051e  00800100  00800100  0000068e  2**0
                  ALLOC
  2 .stab         00000b34  00000000  00000000  00000690  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000006d  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00001231  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000006d  00000000  00000000  00001271  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000161  00000000  00000000  000012de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000c2  00000000  00000000  0000143f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000017e  00000000  00000000  00001501  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00001680  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000e4  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000078  00000000  00000000  000017d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_16>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	00 00       	nop
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 00       	nop
  76:	00 00       	nop
  78:	00 00       	nop
  7a:	00 00       	nop
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 00       	nop
  82:	00 00       	nop
  84:	00 00       	nop
  86:	00 00       	nop
  88:	4e c0       	rjmp	.+156    	; 0x126 <__vector_16>

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61
  96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  9a:	0c 94 0b 03 	jmp	0x616	; 0x616 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:

int main(void) {
    
	
	//Debug_Init();
	Kernel_SysTick_Reg_Init(1000);
  a2:	88 ee       	ldi	r24, 0xE8	; 232
  a4:	93 e0       	ldi	r25, 0x03	; 3
  a6:	0e 94 1b 01 	call	0x236	; 0x236 <Kernel_SysTick_Reg_Init>
	//Kernel_Task_Start();
	
	//Kernel_Task0_Init();
	//Kernel_Task1_Init();
	
	Kernel_Task0_Init_Arg(Tasks_Task0, 0, 0);
  aa:	88 e8       	ldi	r24, 0x88	; 136
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	60 e0       	ldi	r22, 0x00	; 0
  b0:	40 e0       	ldi	r20, 0x00	; 0
  b2:	0e 94 26 02 	call	0x44c	; 0x44c <Kernel_Task0_Init_Arg>
	Kernel_Task1_Init_Arg(Tasks_Task1, 1, 0);
  b6:	8d e7       	ldi	r24, 0x7D	; 125
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	61 e0       	ldi	r22, 0x01	; 1
  bc:	40 e0       	ldi	r20, 0x00	; 0
  be:	0e 94 61 02 	call	0x4c2	; 0x4c2 <Kernel_Task1_Init_Arg>
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <SRUCSR0C>

000000c4 <Tasks_Delay>:
#include <util/delay.h>
#include "kernel.h"
#include "tasks.h"


void Tasks_Delay(uint16_t val){
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	ec 01       	movw	r28, r24
  uint16_t curr = 0, next = 0;
  curr = Kernel_SysTick_Val_Get();
  ca:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Kernel_SysTick_Val_Get>
  ce:	c9 01       	movw	r24, r18
  next = curr + val;
  d0:	c2 0f       	add	r28, r18
  d2:	d3 1f       	adc	r29, r19
  d4:	03 c0       	rjmp	.+6      	; 0xdc <SRUDR0+0x16>
  while( curr < next ){
    curr = Kernel_SysTick_Val_Get();
  d6:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Kernel_SysTick_Val_Get>
  da:	c9 01       	movw	r24, r18

void Tasks_Delay(uint16_t val){
  uint16_t curr = 0, next = 0;
  curr = Kernel_SysTick_Val_Get();
  next = curr + val;
  while( curr < next ){
  dc:	8c 17       	cp	r24, r28
  de:	9d 07       	cpc	r25, r29
  e0:	d0 f3       	brcs	.-12     	; 0xd6 <SRUDR0+0x10>
    curr = Kernel_SysTick_Val_Get();
  }
}
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <Tasks_Task2>:
  }
}

void Tasks_Task2(void){
  
  DDRD |= (1<<7);
  e8:	57 9a       	sbi	0x0a, 7	; 10
  
  while(1){
    
    PORTD ^= (1<<7);
  ea:	8b b1       	in	r24, 0x0b	; 11
  ec:	80 58       	subi	r24, 0x80	; 128
  ee:	8b b9       	out	0x0b, r24	; 11
	Tasks_Delay(70);
  f0:	86 e4       	ldi	r24, 0x46	; 70
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 62 00 	call	0xc4	; 0xc4 <Tasks_Delay>
  f8:	f8 cf       	rjmp	.-16     	; 0xea <Tasks_Task2+0x2>

000000fa <Tasks_Task1>:
	Tasks_Delay(12);
	
  }
}

void Tasks_Task1(void){
  fa:	1f 93       	push	r17

  DDRD |= (1<<6);
  fc:	56 9a       	sbi	0x0a, 6	; 10
  
  while(1){
    
    PORTD ^= (1<<6);
  fe:	10 e4       	ldi	r17, 0x40	; 64
 100:	8b b1       	in	r24, 0x0b	; 11
 102:	81 27       	eor	r24, r17
 104:	8b b9       	out	0x0b, r24	; 11
	Tasks_Delay(41);
 106:	89 e2       	ldi	r24, 0x29	; 41
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 62 00 	call	0xc4	; 0xc4 <Tasks_Delay>
 10e:	f8 cf       	rjmp	.-16     	; 0x100 <Tasks_Task1+0x6>

00000110 <Tasks_Task0>:
  while( curr < next ){
    curr = Kernel_SysTick_Val_Get();
  }
}

void Tasks_Task0(void){
 110:	1f 93       	push	r17
  
  DDRD |= (1<<5);
 112:	55 9a       	sbi	0x0a, 5	; 10
  
  while(1){
    
    PORTD ^= (1<<5);
 114:	10 e2       	ldi	r17, 0x20	; 32
 116:	8b b1       	in	r24, 0x0b	; 11
 118:	81 27       	eor	r24, r17
 11a:	8b b9       	out	0x0b, r24	; 11
	Tasks_Delay(12);
 11c:	8c e0       	ldi	r24, 0x0C	; 12
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 62 00 	call	0xc4	; 0xc4 <Tasks_Delay>
 124:	f8 cf       	rjmp	.-16     	; 0x116 <Tasks_Task0+0x6>

00000126 <__vector_16>:


;;===================================ISR execution start====================================;; 
.global  __vector_16
    __vector_16:                                          ;total operation        (208 clocks) 
	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 126:	29 9a       	sbi	0x05, 1	; 5
        KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	1f 92       	push	r1
 130:	11 24       	eor	r1, r1
 132:	2f 92       	push	r2
 134:	3f 92       	push	r3
 136:	4f 92       	push	r4
 138:	5f 92       	push	r5
 13a:	6f 92       	push	r6
 13c:	7f 92       	push	r7
 13e:	8f 92       	push	r8
 140:	9f 92       	push	r9
 142:	af 92       	push	r10
 144:	bf 92       	push	r11
 146:	cf 92       	push	r12
 148:	df 92       	push	r13
 14a:	ef 92       	push	r14
 14c:	ff 92       	push	r15
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	2f 93       	push	r18
 154:	3f 93       	push	r19
 156:	4f 93       	push	r20
 158:	5f 93       	push	r21
 15a:	6f 93       	push	r22
 15c:	7f 93       	push	r23
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	af 93       	push	r26
 164:	bf 93       	push	r27
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	ef 93       	push	r30
 16c:	ff 93       	push	r31
		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 16e:	00 91 05 01 	lds	r16, 0x0105
 172:	00 93 46 00 	sts	0x0046, r16
		KER_TICK_INCREMENT                                ;increment tick counter ( 27 clocks) 
 176:	01 e0       	ldi	r16, 0x01	; 1
 178:	10 91 00 01 	lds	r17, 0x0100
 17c:	10 0f       	add	r17, r16
 17e:	10 93 00 01 	sts	0x0100, r17
 182:	00 e0       	ldi	r16, 0x00	; 0
 184:	10 91 01 01 	lds	r17, 0x0101
 188:	10 1f       	adc	r17, r16
 18a:	10 93 01 01 	sts	0x0101, r17
 18e:	10 91 02 01 	lds	r17, 0x0102
 192:	10 1f       	adc	r17, r16
 194:	10 93 02 01 	sts	0x0102, r17
 198:	10 91 03 01 	lds	r17, 0x0103
 19c:	10 1f       	adc	r17, r16
 19e:	10 93 03 01 	sts	0x0103, r17
 1a2:	10 91 04 01 	lds	r17, 0x0104
 1a6:	10 1f       	adc	r17, r16
 1a8:	10 93 04 01 	sts	0x0104, r17
		KER_TASK_SWITCH                                   ;task switching         ( 38 clocks) 
 1ac:	8d b7       	in	r24, 0x3d	; 61
 1ae:	9e b7       	in	r25, 0x3e	; 62
 1b0:	00 91 06 01 	lds	r16, 0x0106
 1b4:	00 0f       	add	r16, r16
 1b6:	ea e0       	ldi	r30, 0x0A	; 10
 1b8:	f1 e0       	ldi	r31, 0x01	; 1
 1ba:	e0 0f       	add	r30, r16
 1bc:	00 e0       	ldi	r16, 0x00	; 0
 1be:	f0 1f       	adc	r31, r16
 1c0:	81 93       	st	Z+, r24
 1c2:	90 83       	st	Z, r25
 1c4:	00 91 06 01 	lds	r16, 0x0106
 1c8:	03 95       	inc	r16
 1ca:	10 91 07 01 	lds	r17, 0x0107

000001ce <_MOD_CONT>:
 1ce:	01 17       	cp	r16, r17
 1d0:	10 f0       	brcs	.+4      	; 0x1d6 <_MOD_DONE>
 1d2:	01 1b       	sub	r16, r17
 1d4:	fc cf       	rjmp	.-8      	; 0x1ce <_MOD_CONT>

000001d6 <_MOD_DONE>:
 1d6:	00 93 06 01 	sts	0x0106, r16
 1da:	00 0f       	add	r16, r16
 1dc:	ea e0       	ldi	r30, 0x0A	; 10
 1de:	f1 e0       	ldi	r31, 0x01	; 1
 1e0:	e0 0f       	add	r30, r16
 1e2:	00 e0       	ldi	r16, 0x00	; 0
 1e4:	f0 1f       	adc	r31, r16
 1e6:	81 91       	ld	r24, Z+
 1e8:	90 81       	ld	r25, Z
 1ea:	8d bf       	out	0x3d, r24	; 61
 1ec:	9e bf       	out	0x3e, r25	; 62
		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 1ee:	ff 91       	pop	r31
 1f0:	ef 91       	pop	r30
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	bf 91       	pop	r27
 1f8:	af 91       	pop	r26
 1fa:	9f 91       	pop	r25
 1fc:	8f 91       	pop	r24
 1fe:	7f 91       	pop	r23
 200:	6f 91       	pop	r22
 202:	5f 91       	pop	r21
 204:	4f 91       	pop	r20
 206:	3f 91       	pop	r19
 208:	2f 91       	pop	r18
 20a:	1f 91       	pop	r17
 20c:	0f 91       	pop	r16
 20e:	ff 90       	pop	r15
 210:	ef 90       	pop	r14
 212:	df 90       	pop	r13
 214:	cf 90       	pop	r12
 216:	bf 90       	pop	r11
 218:	af 90       	pop	r10
 21a:	9f 90       	pop	r9
 21c:	8f 90       	pop	r8
 21e:	7f 90       	pop	r7
 220:	6f 90       	pop	r6
 222:	5f 90       	pop	r5
 224:	4f 90       	pop	r4
 226:	3f 90       	pop	r3
 228:	2f 90       	pop	r2
 22a:	1f 90       	pop	r1
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 232:	29 98       	cbi	0x05, 1	; 5
		RETI                                              ;return from interrupt  (  4 clocks) 
 234:	18 95       	reti

00000236 <Kernel_SysTick_Reg_Init>:



;;==================================SysTick reg init start==================================;; 
Kernel_SysTick_Reg_Init:                                  ;total operation        ( 55 clocks) 
        CLI                                               ;disable global int,    (  1 clock ) 
 236:	f8 94       	cli
		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 238:	21 9a       	sbi	0x04, 1	; 4
 23a:	29 98       	cbi	0x05, 1	; 5
		LDI   R16                , 0x00                   ;set 0x00 to R16,       (  1 clock ) 
 23c:	00 e0       	ldi	r16, 0x00	; 0
		STS   KerBase+0x00       , R16                    ;clear  KerBase[0]      (  2 clocks) 
 23e:	00 93 00 01 	sts	0x0100, r16
		STS   KerBase+0x01       , R16                    ;clear  KerBase[1]      (  2 clocks) 
 242:	00 93 01 01 	sts	0x0101, r16
		STS   KerBase+0x02       , R16                    ;clear  KerBase[2]      (  2 clocks) 
 246:	00 93 02 01 	sts	0x0102, r16
		STS   KerBase+0x03       , R16                    ;clear  KerBase[3]      (  2 clocks) 
 24a:	00 93 03 01 	sts	0x0103, r16
		STS   KerBase+0x04       , R16                    ;clear  KerBase[4]      (  2 clocks) 
 24e:	00 93 04 01 	sts	0x0104, r16
		STS   KerBase+0x05       , R16                    ;clear  KerBase[5]      (  2 clocks) 
 252:	00 93 05 01 	sts	0x0105, r16
		STS   KerBase+0x06       , R16                    ;clear  KerBase[6]      (  2 clocks) 
 256:	00 93 06 01 	sts	0x0106, r16
		STS   KerBase+0x07       , R16                    ;clear  KerBase[7]      (  2 clocks) 
 25a:	00 93 07 01 	sts	0x0107, r16
		STS   KerBase+0x08       , R16                    ;clear  KerBase[8]      (  2 clocks) 
 25e:	00 93 08 01 	sts	0x0108, r16
        STS   KerBase+0x09       , R16                    ;clear  KerBase[9]      (  2 clocks) 
 262:	00 93 09 01 	sts	0x0109, r16
		LDI   R16                , KER_NTASK              ;load ntask to reg      (  1 clock ) 
 266:	02 e0       	ldi	r16, 0x02	; 2
		STS   KerBase+0x07       , R16                    ;store ntask            (  2 clocks) 
 268:	00 93 07 01 	sts	0x0107, r16
		LDI   R16                , 0x00                   ;store r16 with 0       (  1 clock ) 
 26c:	00 e0       	ldi	r16, 0x00	; 0
		STS   SRTCCR0A           , R16                    ;clear TCCR0A           (  2 clocks) 
 26e:	00 93 44 00 	sts	0x0044, r16
		STS   SRTCCR0B           , R16                    ;clear TCCR0B           (  2 clocks) 
 272:	00 93 45 00 	sts	0x0045, r16
		STS   SRTIMSK0           , R16                    ;clear TIMSK0           (  2 clocks) 
 276:	00 93 6e 00 	sts	0x006E, r16
		STS   SRTIFR0            , R16                    ;clear TIFR0            (  2 clocks) 
 27a:	00 93 35 00 	sts	0x0035, r16
		STS   SROCR0A            , R16                    ;clear OCR0A            (  2 clocks) 
 27e:	00 93 47 00 	sts	0x0047, r16
		STS   SROCR0B            , R16                    ;clear OCR0B            (  2 clocks) 
 282:	00 93 48 00 	sts	0x0048, r16
		STS   SRTCNT0            , R16                    ;clear TCNT0            (  2 clocks) 
 286:	00 93 46 00 	sts	0x0046, r16
		LDI   R16                , KER_PRS                ;prescaler 64           (  1 clock ) 
 28a:	03 e0       	ldi	r16, 0x03	; 3
		STS   SRTCCR0B           , R16                    ;set to TCCR0B          (  2 clocks) 
 28c:	00 93 45 00 	sts	0x0045, r16
		LDI   R16                , KER_RLD                ;reload value (130)     (  1 clock ) 
 290:	02 e8       	ldi	r16, 0x82	; 130
		STS   KerBase+0x05       , R16                    ;KerBase[5] reload val  (  2 clocks) 
 292:	00 93 05 01 	sts	0x0105, r16
		STS   SRTCNT0            , R16                    ;set to TCNT0           (  2 clocks) 
 296:	00 93 46 00 	sts	0x0046, r16
		LDI   R16                , 0x01                   ;bit mask TOIE0         (  1 clock ) 
 29a:	01 e0       	ldi	r16, 0x01	; 1
		STS   SRTIMSK0           , R16                    ;set to TIMSK0          (  2 clocks) 
 29c:	00 93 6e 00 	sts	0x006E, r16
		RET                                               ;return from subroutine (  4 clocks) 
 2a0:	08 95       	ret

000002a2 <Kernel_SysTick_Val_Get>:



;;=================================SysTick value get start==================================;; 
Kernel_SysTick_Val_Get:                                   ;total operation        ( 20 clocks) 
        IN    R16                , IOSREG                 ;save SREG              (  1 clock ) 
 2a2:	0f b7       	in	r16, 0x3f	; 63
        CLI                                               ;disable interrupts     (  1 clock ) 
 2a4:	f8 94       	cli
		LDS   R18		         , KerBase+0x00           ;byte0 -> R18 (LSB)     (  2 clocks) 
 2a6:	20 91 00 01 	lds	r18, 0x0100
		LDS   R19		         , KerBase+0x01           ;byte1 -> R19           (  2 clocks) 
 2aa:	30 91 01 01 	lds	r19, 0x0101
		LDS   R20		         , KerBase+0x02           ;byte2 -> R20           (  2 clocks) 
 2ae:	40 91 02 01 	lds	r20, 0x0102
		LDS   R21		         , KerBase+0x03           ;byte3 -> R21           (  2 clocks) 
 2b2:	50 91 03 01 	lds	r21, 0x0103
		LDS   R22		         , KerBase+0x04           ;byte4 -> R22           (  2 clocks) 
 2b6:	60 91 04 01 	lds	r22, 0x0104
		LDI   R23		         , 0x00                   ;byte5 -> R23           (  1 clocks) 
 2ba:	70 e0       	ldi	r23, 0x00	; 0
		LDI   R24		         , 0x00                   ;byte6 -> R24           (  1 clocks) 
 2bc:	80 e0       	ldi	r24, 0x00	; 0
		LDI   R25		         , 0x00                   ;byte7 -> R25 (MSB)     (  1 clocks) 
 2be:	90 e0       	ldi	r25, 0x00	; 0
		OUT   IOSREG             , R16          		  ;restore SREG           (  1 clock ) 
 2c0:	0f bf       	out	0x3f, r16	; 63
		RET                                               ;return from subroutine (  4 clocks) 
 2c2:	08 95       	ret

000002c4 <Kernel_Interrupt_Sts_Get>:



;;===============================interrupt status get start=================================;; 
Kernel_Interrupt_Sts_Get:                                 ;total operation        ( 10 clocks) 
        LDI   R24		         , 0x00                   ;clear R24              (  1 clock ) 
 2c4:	80 e0       	ldi	r24, 0x00	; 0
        IN    R16		         , IOSREG                 ;save SREG in R16       (  1 clock ) 
 2c6:	0f b7       	in	r16, 0x3f	; 63
		SBRC  R16		         , 0x07                   ;check I flag->bit7     (  3 clocks) 
 2c8:	07 fd       	sbrc	r16, 7
		LDI   R24		         , 0x01                   ;set R24 to 1           (  1 clock ) 
 2ca:	81 e0       	ldi	r24, 0x01	; 1
		RET                                               ;return from subroutine (  4 clocks) 
 2cc:	08 95       	ret

000002ce <Kernel_Task_Init>:
;;====================================Kernel Task Init======================================;; 
Kernel_Task_Init:
        ;func_ptr->R25:R24, task_index->R22, task_priority->R20
		
        ;save main SP & Z pointer
        IN    R2                 , IOSPL                  ;read SPL of MSP        (  1 clock ) 
 2ce:	2d b6       	in	r2, 0x3d	; 61
        IN    R3                 , IOSPH                  ;read SPH of MSP        (  1 clock ) 
 2d0:	3e b6       	in	r3, 0x3e	; 62
        MOV   R4                 , R30                    ;push ZPL               (  2 clocks)
 2d2:	4e 2e       	mov	r4, r30
		MOV   R5                 , R31                    ;push ZPL               (  2 clocks)
 2d4:	5f 2e       	mov	r5, r31
		
		;store task index to RAM from argument
		STS   KerBase+0x06       , R22                    ;save task_ind in RAM   (  2 clocks)
 2d6:	60 93 06 01 	sts	0x0106, r22
		
		;set stack pointer for current tas (KerBase + KER_STZ*ker_ind - 1)
		MOV   R16                , R22                    ;load task_ind          (  1 clock ) 
 2da:	06 2f       	mov	r16, r22
		LDI   R17                , KER_STZ                ;load with stack size   (  1 clock ) 
 2dc:	10 e8       	ldi	r17, 0x80	; 128
		MUL   R16                , R17                    ;multiply to get offset (  2 clocks) 
 2de:	01 9f       	mul	r16, r17
		MOV   R30                , R0                     ;load multiplied low    (  2 clocks) 
 2e0:	e0 2d       	mov	r30, r0
		MOV   R31                , R1                     ;load multiplied high   (  2 clocks) 
 2e2:	f1 2d       	mov	r31, r1
		SBIW  R30                , 0x01                   ;base+KER_STZ*ker_ind-1 (  2 clocks) 
 2e4:	31 97       	sbiw	r30, 0x01	; 1
		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 2e6:	11 24       	eor	r1, r1
		OUT   IOSPL              , R30                    ;load SPL               (  1 clock ) 
 2e8:	ed bf       	out	0x3d, r30	; 61
        OUT   IOSPH              , R31                    ;load SPH               (  1 clock ) 
 2ea:	fe bf       	out	0x3e, r31	; 62
        ;MOV   R17                , R25                    ;high byte func_ptr     (  1 clock ) 
        ;LSR   R17                                         ;shift right high byte  (  1 clock ) 
        ;ROR   R16                                         ;add carry to low byte  (  1 clock ) 
		
		;push word address of task function to stack of this task
	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
 2ec:	8f 93       	push	r24
		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 2ee:	9f 93       	push	r25
		
		;push context to stack of this task
		KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 2f0:	0f 92       	push	r0
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	0f 92       	push	r0
 2f6:	1f 92       	push	r1
 2f8:	11 24       	eor	r1, r1
 2fa:	2f 92       	push	r2
 2fc:	3f 92       	push	r3
 2fe:	4f 92       	push	r4
 300:	5f 92       	push	r5
 302:	6f 92       	push	r6
 304:	7f 92       	push	r7
 306:	8f 92       	push	r8
 308:	9f 92       	push	r9
 30a:	af 92       	push	r10
 30c:	bf 92       	push	r11
 30e:	cf 92       	push	r12
 310:	df 92       	push	r13
 312:	ef 92       	push	r14
 314:	ff 92       	push	r15
 316:	0f 93       	push	r16
 318:	1f 93       	push	r17
 31a:	2f 93       	push	r18
 31c:	3f 93       	push	r19
 31e:	4f 93       	push	r20
 320:	5f 93       	push	r21
 322:	6f 93       	push	r22
 324:	7f 93       	push	r23
 326:	8f 93       	push	r24
 328:	9f 93       	push	r25
 32a:	af 93       	push	r26
 32c:	bf 93       	push	r27
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
 332:	ef 93       	push	r30
 334:	ff 93       	push	r31
		
		;read stack pointer of current task (necessary when restore)
		IN    R16                , IOSPL                  ;read SPL               (  1 clock ) 
 336:	0d b7       	in	r16, 0x3d	; 61
        IN    R17                , IOSPH                  ;read SPH               (  1 clock ) 
 338:	1e b7       	in	r17, 0x3e	; 62
		
		;calculate the address where current task's SP will be stored and store SP
		LDS   R18                , KerBase+0x06           ;fetch task_ind         (  2 clocks) 
 33a:	20 91 06 01 	lds	r18, 0x0106
		LSL   R18                                         ;left shift to multiply (  1 clock ) 
 33e:	22 0f       	add	r18, r18
		LDI   R30                , lo8(KerSP)             ;fetch base pos low     (  1 clock ) 
 340:	ea e0       	ldi	r30, 0x0A	; 10
		LDI   R31                , hi8(KerSP)             ;fetch base pos high    (  1 clock ) 
 342:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R18                    ;add offset to array    (  1 clock ) 
 344:	e2 0f       	add	r30, r18
		LDI   R18                , 0x00                   ;set 0 to R16           (  1 clock ) 
 346:	20 e0       	ldi	r18, 0x00	; 0
		ADC   R31                , R18                    ;add carry if any       (  1 clock ) 
 348:	f2 1f       	adc	r31, r18
		ST    Z+                 , R16                    ;SPL at KerSp+offset    (  2 clocks) 
 34a:	01 93       	st	Z+, r16
		ST    z                  , R17                    ;SPH at KerSp+offset    (  2 clocks) 
 34c:	10 83       	st	Z, r17
		
		;load Main SP, restore Z pointer
		OUT   IOSPL              , R2                     ;load SPL               (  1 clock )
 34e:	2d be       	out	0x3d, r2	; 61
        OUT   IOSPH              , R3                     ;load SPH               (  1 clock )
 350:	3e be       	out	0x3e, r3	; 62
		MOV   R30                , R4                     ;push ZPL               (  2 clocks)
 352:	e4 2d       	mov	r30, r4
		MOV   R31                , R5                     ;push ZPL               (  2 clocks)
 354:	f5 2d       	mov	r31, r5
		RET                                               ;return from subroutine (  4 clocks) 
 356:	08 95       	ret

00000358 <Kernel_Task_Start>:


;;====================================Kernel Task start=====================================;;
Kernel_Task_Start:
        ;set SP as task0 sp
		LDS   R16                , KerSP+0x00             ;fetch base pos low     (  1 clock ) 
 358:	00 91 0a 01 	lds	r16, 0x010A
		LDS   R17                , KerSP+0x01             ;fetch base pos high    (  1 clock )
 35c:	10 91 0b 01 	lds	r17, 0x010B
		OUT   IOSPL              , R16                    ;load SPL               (  1 clock )
 360:	0d bf       	out	0x3d, r16	; 61
        OUT   IOSPH              , R17                    ;load SPH               (  1 clock )
 362:	1e bf       	out	0x3e, r17	; 62
       
        ;forcefully restore context, in ISR it will be stored automatically
		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks)
 364:	ff 91       	pop	r31
 366:	ef 91       	pop	r30
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	bf 91       	pop	r27
 36e:	af 91       	pop	r26
 370:	9f 91       	pop	r25
 372:	8f 91       	pop	r24
 374:	7f 91       	pop	r23
 376:	6f 91       	pop	r22
 378:	5f 91       	pop	r21
 37a:	4f 91       	pop	r20
 37c:	3f 91       	pop	r19
 37e:	2f 91       	pop	r18
 380:	1f 91       	pop	r17
 382:	0f 91       	pop	r16
 384:	ff 90       	pop	r15
 386:	ef 90       	pop	r14
 388:	df 90       	pop	r13
 38a:	cf 90       	pop	r12
 38c:	bf 90       	pop	r11
 38e:	af 90       	pop	r10
 390:	9f 90       	pop	r9
 392:	8f 90       	pop	r8
 394:	7f 90       	pop	r7
 396:	6f 90       	pop	r6
 398:	5f 90       	pop	r5
 39a:	4f 90       	pop	r4
 39c:	3f 90       	pop	r3
 39e:	2f 90       	pop	r2
 3a0:	1f 90       	pop	r1
 3a2:	0f 90       	pop	r0
 3a4:	0f be       	out	0x3f, r0	; 63
 3a6:	0f 90       	pop	r0
		
		;enable global interrupt to start executing task, starting with task0
		SEI                                               ;enable global int      (  1 clock )
 3a8:	78 94       	sei
		
		;execute return to jump to task0 function address, pushed while task init
		RET                                               ;return from subroutine (  4 clocks)
 3aa:	08 95       	ret

000003ac <Kernel_Task0_Init>:
;;====================================Kernel Task0 Init=====================================;;
Kernel_Task0_Init:
        ;init stack for task0
		
		;save MSP
		IN    R2                 , IOSPL
 3ac:	2d b6       	in	r2, 0x3d	; 61
		IN    R3                 , IOSPH
 3ae:	3e b6       	in	r3, 0x3e	; 62
		
		;set stack for task0
		LDI   R16                , lo8(KerStack+KER_STZ-1);fetch top SPL0,          (1 clock )
 3b0:	0d e9       	ldi	r16, 0x9D	; 157
		LDI   R17                , hi8(KerStack+KER_STZ-1);fetch top SPH0,          (1 clock )
 3b2:	11 e0       	ldi	r17, 0x01	; 1
		OUT   IOSPL              , R16                    ;load SPL                 (1 clock )
 3b4:	0d bf       	out	0x3d, r16	; 61
        OUT   IOSPH              , R17                    ;load SPH                 (1 clock )
 3b6:	1e bf       	out	0x3e, r17	; 62
		
		;psuh return address of task0
		LDI   R16                , lo8(Tasks_Task0)       ;fetch task address low   (1 clock )
 3b8:	00 e1       	ldi	r16, 0x10	; 16
		LDI   R17                , hi8(Tasks_Task0)       ;fetch task address high  (1 clock )
 3ba:	11 e0       	ldi	r17, 0x01	; 1
		LSR   R17                                         ;right shift high byte    (1 clock )
 3bc:	16 95       	lsr	r17
		ROR   R16                                         ;rotate right th carry    (1 clock )
 3be:	07 95       	ror	r16
		PUSH  R16                                         ;push word addr low       (2 clocks)
 3c0:	0f 93       	push	r16
		PUSH  R17                                         ;push word addr high      (2 clocks) 
 3c2:	1f 93       	push	r17
		
        KER_CONTEXT_SAVE
 3c4:	0f 92       	push	r0
 3c6:	0f b6       	in	r0, 0x3f	; 63
 3c8:	0f 92       	push	r0
 3ca:	1f 92       	push	r1
 3cc:	11 24       	eor	r1, r1
 3ce:	2f 92       	push	r2
 3d0:	3f 92       	push	r3
 3d2:	4f 92       	push	r4
 3d4:	5f 92       	push	r5
 3d6:	6f 92       	push	r6
 3d8:	7f 92       	push	r7
 3da:	8f 92       	push	r8
 3dc:	9f 92       	push	r9
 3de:	af 92       	push	r10
 3e0:	bf 92       	push	r11
 3e2:	cf 92       	push	r12
 3e4:	df 92       	push	r13
 3e6:	ef 92       	push	r14
 3e8:	ff 92       	push	r15
 3ea:	0f 93       	push	r16
 3ec:	1f 93       	push	r17
 3ee:	2f 93       	push	r18
 3f0:	3f 93       	push	r19
 3f2:	4f 93       	push	r20
 3f4:	5f 93       	push	r21
 3f6:	6f 93       	push	r22
 3f8:	7f 93       	push	r23
 3fa:	8f 93       	push	r24
 3fc:	9f 93       	push	r25
 3fe:	af 93       	push	r26
 400:	bf 93       	push	r27
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
 406:	ef 93       	push	r30
 408:	ff 93       	push	r31
		
		;save PSP of task0
        IN    R16                , IOSPL                  ;read SPL                 (1 clock )
 40a:	0d b7       	in	r16, 0x3d	; 61
        IN    R17                , IOSPH                  ;read SPH                 (1 clock )
 40c:	1e b7       	in	r17, 0x3e	; 62
        STS   KerSP + 0          , R16                    ;set stp of task0         (2 clocks) 
 40e:	00 93 0a 01 	sts	0x010A, r16
        STS   KerSP + 1          , R17                    ;set stp of task0         (2 clocks) 
 412:	10 93 0b 01 	sts	0x010B, r17
		
		;set task index -> 0
		LDI   R16                , 0x00                   ;set R16 to 0x00          (1 clock )
 416:	00 e0       	ldi	r16, 0x00	; 0
		STS   KerBase+0x06       , R16                    ;set task index = 0       (2 clocks) 
 418:	00 93 06 01 	sts	0x0106, r16
		
		;restore MSP
		OUT   IOSPL              , R2                     ;load SPL                 (1 clock )
 41c:	2d be       	out	0x3d, r2	; 61
        OUT   IOSPH              , R3                     ;load SPH                 (1 clock )
 41e:	3e be       	out	0x3e, r3	; 62
        RET                                               ;return from subroutine   (4 clocks) 
 420:	08 95       	ret

00000422 <Kernel_Task1_Init>:
		;save MSP
		;IN    R2                 , IOSPL
		;IN    R3                 , IOSPH
		
		;set stack for task1
		LDI   R16                , lo8(KerStack+KER_STZ*2-1);fetch top SPL1,          (1 clock )
 422:	0d e1       	ldi	r16, 0x1D	; 29
		LDI   R17                , hi8(KerStack+KER_STZ*2-1);fetch top SPH1,          (1 clock )
 424:	12 e0       	ldi	r17, 0x02	; 2
		OUT   IOSPL              , R16                    ;load SPL                 (1 clock )
 426:	0d bf       	out	0x3d, r16	; 61
        OUT   IOSPH              , R17                    ;load SPH                 (1 clock )
 428:	1e bf       	out	0x3e, r17	; 62
		
		;psuh return address of task1
		LDI   R16                , lo8(Tasks_Task1)       ;fetch task address low   (1 clock )
 42a:	0a ef       	ldi	r16, 0xFA	; 250
		LDI   R17                , hi8(Tasks_Task1)       ;fetch task address high  (1 clock )
 42c:	10 e0       	ldi	r17, 0x00	; 0
		LSR   R17                                         ;right shift high byte    (1 clock )
 42e:	16 95       	lsr	r17
		ROR   R16                                         ;rotate right th carry    (1 clock )
 430:	07 95       	ror	r16
		PUSH  R16                                         ;push word addr low       (2 clocks)
 432:	0f 93       	push	r16
		PUSH  R17                                         ;push word addr high      (2 clocks) 
 434:	1f 93       	push	r17
		
        ;KER_CNTXT_SV
		
		;save PSP of task1
        IN    R16                , IOSPL                  ;read SPL                 (1 clock )
 436:	0d b7       	in	r16, 0x3d	; 61
        IN    R17                , IOSPH                  ;read SPH                 (1 clock )
 438:	1e b7       	in	r17, 0x3e	; 62
        STS   KerSP + 2          , R16                    ;set stp of task1         (2 clocks) 
 43a:	00 93 0c 01 	sts	0x010C, r16
        STS   KerSP + 3          , R17                    ;set stp of task1         (2 clocks) 
 43e:	10 93 0d 01 	sts	0x010D, r17
		
		;set task index -> 1
		LDI   R16                , 0x01                   ;set R16 to 0x01          (1 clock )
 442:	01 e0       	ldi	r16, 0x01	; 1
		STS   KerBase+0x06       , R16                    ;set task index = 1       (2 clocks) 
 444:	00 93 06 01 	sts	0x0106, r16
		
		;restore MSP
		;OUT   IOSPL              , R2                     ;load SPL                 (1 clock )
        ;OUT   IOSPH              , R3                     ;load SPH                 (1 clock )
		SEI
 448:	78 94       	sei
        RET                                               ;return from subroutine   (4 clocks)  
 44a:	08 95       	ret

0000044c <Kernel_Task0_Init_Arg>:
;;====================================Kernel Task0 Init=====================================;;
Kernel_Task0_Init_Arg:
        ;init stack for task0
		
		;save main SP & Z pointer
        IN    R2                 , IOSPL                  ;read SPL of MSP        (  1 clock ) 
 44c:	2d b6       	in	r2, 0x3d	; 61
        IN    R3                 , IOSPH                  ;read SPH of MSP        (  1 clock ) 
 44e:	3e b6       	in	r3, 0x3e	; 62
        MOV   R4                 , R30                    ;push ZPL               (  2 clocks) 
 450:	4e 2e       	mov	r4, r30
		MOV   R5                 , R31                    ;push ZPL               (  2 clocks) 
 452:	5f 2e       	mov	r5, r31
		
		;set stack for task0
		LDI   R16                , lo8(KerStack+KER_STZ-1);fetch top SPL0,          (1 clock )
 454:	0d e9       	ldi	r16, 0x9D	; 157
		LDI   R17                , hi8(KerStack+KER_STZ-1);fetch top SPH0,          (1 clock )
 456:	11 e0       	ldi	r17, 0x01	; 1
		OUT   IOSPL              , R16                    ;load SPL                 (1 clock )
 458:	0d bf       	out	0x3d, r16	; 61
        OUT   IOSPH              , R17                    ;load SPH                 (1 clock )
 45a:	1e bf       	out	0x3e, r17	; 62
		
		
		;psuh return address of task0
		PUSH  R24                                         ;push word addr low       (2 clocks)
 45c:	8f 93       	push	r24
		PUSH  R25                                         ;push word addr high      (2 clocks) 
 45e:	9f 93       	push	r25
		
		
        KER_CONTEXT_SAVE
 460:	0f 92       	push	r0
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	0f 92       	push	r0
 466:	1f 92       	push	r1
 468:	11 24       	eor	r1, r1
 46a:	2f 92       	push	r2
 46c:	3f 92       	push	r3
 46e:	4f 92       	push	r4
 470:	5f 92       	push	r5
 472:	6f 92       	push	r6
 474:	7f 92       	push	r7
 476:	8f 92       	push	r8
 478:	9f 92       	push	r9
 47a:	af 92       	push	r10
 47c:	bf 92       	push	r11
 47e:	cf 92       	push	r12
 480:	df 92       	push	r13
 482:	ef 92       	push	r14
 484:	ff 92       	push	r15
 486:	0f 93       	push	r16
 488:	1f 93       	push	r17
 48a:	2f 93       	push	r18
 48c:	3f 93       	push	r19
 48e:	4f 93       	push	r20
 490:	5f 93       	push	r21
 492:	6f 93       	push	r22
 494:	7f 93       	push	r23
 496:	8f 93       	push	r24
 498:	9f 93       	push	r25
 49a:	af 93       	push	r26
 49c:	bf 93       	push	r27
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
 4a2:	ef 93       	push	r30
 4a4:	ff 93       	push	r31
		
		;save PSP of task0
        IN    R16                , IOSPL                  ;read SPL                 (1 clock ) 
 4a6:	0d b7       	in	r16, 0x3d	; 61
        IN    R17                , IOSPH                  ;read SPH                 (1 clock ) 
 4a8:	1e b7       	in	r17, 0x3e	; 62
        STS   KerSP + 0          , R16                    ;set stp of task0         (2 clocks) 
 4aa:	00 93 0a 01 	sts	0x010A, r16
        STS   KerSP + 1          , R17                    ;set stp of task0         (2 clocks) 
 4ae:	10 93 0b 01 	sts	0x010B, r17
		
		;set task index -> 0
		LDI   R16                , 0x00                   ;set R16 to 0x00          (1 clock ) 
 4b2:	00 e0       	ldi	r16, 0x00	; 0
		STS   KerBase+0x06       , R16                    ;set task index = 0       (2 clocks) 
 4b4:	00 93 06 01 	sts	0x0106, r16
		
		;restore MSP
		OUT   IOSPL              , R2                     ;load SPL                 (1 clock ) 
 4b8:	2d be       	out	0x3d, r2	; 61
        OUT   IOSPH              , R3                     ;load SPH                 (1 clock ) 
 4ba:	3e be       	out	0x3e, r3	; 62
		MOV   R30                , R4                     ;push ZPL               (  2 clocks) 
 4bc:	e4 2d       	mov	r30, r4
		MOV   R31                , R5                     ;push ZPL               (  2 clocks) 
 4be:	f5 2d       	mov	r31, r5
        RET                                               ;return from subroutine   (4 clocks) 
 4c0:	08 95       	ret

000004c2 <Kernel_Task1_Init_Arg>:
		;save MSP
		;IN    R2                 , IOSPL
		;IN    R3                 , IOSPH
		
		;set stack for task1
		LDI   R16                , lo8(KerStack+KER_STZ*2-1);fetch top SPL1,          (1 clock )
 4c2:	0d e1       	ldi	r16, 0x1D	; 29
		LDI   R17                , hi8(KerStack+KER_STZ*2-1);fetch top SPH1,          (1 clock )
 4c4:	12 e0       	ldi	r17, 0x02	; 2
		OUT   IOSPL              , R16                    ;load SPL                 (1 clock )
 4c6:	0d bf       	out	0x3d, r16	; 61
        OUT   IOSPH              , R17                    ;load SPH                 (1 clock )
 4c8:	1e bf       	out	0x3e, r17	; 62
		
		PUSH  R24                                         ;push word addr low       (2 clocks)
 4ca:	8f 93       	push	r24
		PUSH  R25                                         ;push word addr high      (2 clocks) 
 4cc:	9f 93       	push	r25
		
        KER_CONTEXT_SAVE
 4ce:	0f 92       	push	r0
 4d0:	0f b6       	in	r0, 0x3f	; 63
 4d2:	0f 92       	push	r0
 4d4:	1f 92       	push	r1
 4d6:	11 24       	eor	r1, r1
 4d8:	2f 92       	push	r2
 4da:	3f 92       	push	r3
 4dc:	4f 92       	push	r4
 4de:	5f 92       	push	r5
 4e0:	6f 92       	push	r6
 4e2:	7f 92       	push	r7
 4e4:	8f 92       	push	r8
 4e6:	9f 92       	push	r9
 4e8:	af 92       	push	r10
 4ea:	bf 92       	push	r11
 4ec:	cf 92       	push	r12
 4ee:	df 92       	push	r13
 4f0:	ef 92       	push	r14
 4f2:	ff 92       	push	r15
 4f4:	0f 93       	push	r16
 4f6:	1f 93       	push	r17
 4f8:	2f 93       	push	r18
 4fa:	3f 93       	push	r19
 4fc:	4f 93       	push	r20
 4fe:	5f 93       	push	r21
 500:	6f 93       	push	r22
 502:	7f 93       	push	r23
 504:	8f 93       	push	r24
 506:	9f 93       	push	r25
 508:	af 93       	push	r26
 50a:	bf 93       	push	r27
 50c:	cf 93       	push	r28
 50e:	df 93       	push	r29
 510:	ef 93       	push	r30
 512:	ff 93       	push	r31
		KER_CONTEXT_RESTORE
 514:	ff 91       	pop	r31
 516:	ef 91       	pop	r30
 518:	df 91       	pop	r29
 51a:	cf 91       	pop	r28
 51c:	bf 91       	pop	r27
 51e:	af 91       	pop	r26
 520:	9f 91       	pop	r25
 522:	8f 91       	pop	r24
 524:	7f 91       	pop	r23
 526:	6f 91       	pop	r22
 528:	5f 91       	pop	r21
 52a:	4f 91       	pop	r20
 52c:	3f 91       	pop	r19
 52e:	2f 91       	pop	r18
 530:	1f 91       	pop	r17
 532:	0f 91       	pop	r16
 534:	ff 90       	pop	r15
 536:	ef 90       	pop	r14
 538:	df 90       	pop	r13
 53a:	cf 90       	pop	r12
 53c:	bf 90       	pop	r11
 53e:	af 90       	pop	r10
 540:	9f 90       	pop	r9
 542:	8f 90       	pop	r8
 544:	7f 90       	pop	r7
 546:	6f 90       	pop	r6
 548:	5f 90       	pop	r5
 54a:	4f 90       	pop	r4
 54c:	3f 90       	pop	r3
 54e:	2f 90       	pop	r2
 550:	1f 90       	pop	r1
 552:	0f 90       	pop	r0
 554:	0f be       	out	0x3f, r0	; 63
 556:	0f 90       	pop	r0
		
		;save PSP of task1
        IN    R16                , IOSPL                  ;read SPL                 (1 clock )
 558:	0d b7       	in	r16, 0x3d	; 61
        IN    R17                , IOSPH                  ;read SPH                 (1 clock )
 55a:	1e b7       	in	r17, 0x3e	; 62
        STS   KerSP + 2          , R16                    ;set stp of task1         (2 clocks) 
 55c:	00 93 0c 01 	sts	0x010C, r16
        STS   KerSP + 3          , R17                    ;set stp of task1         (2 clocks) 
 560:	10 93 0d 01 	sts	0x010D, r17
		
		;set task index -> 1
		LDI   R16                , 0x01                   ;set R16 to 0x01          (1 clock )
 564:	01 e0       	ldi	r16, 0x01	; 1
		STS   KerBase+0x06       , R16                    ;set task index = 1       (2 clocks) 
 566:	00 93 06 01 	sts	0x0106, r16
		
		;restore MSP
		;OUT   IOSPL              , R2                     ;load SPL                 (1 clock )
        ;OUT   IOSPH              , R3                     ;load SPH                 (1 clock )
		SEI
 56a:	78 94       	sei
 56c:	08 95       	ret

0000056e <Debug_Init>:


;;========================================Debug Init========================================;;
Debug_Init:
        ;init registers for UART0
		LDI   R16                , (1<<1)                 ;mask U2x,                (1 clock )
 56e:	02 e0       	ldi	r16, 0x02	; 2
		STS   SRUCSR0A           , R16                    ;load val to UCSR0A,      (2 clocks)
 570:	00 93 c0 00 	sts	0x00C0, r16
		LDI   R16                , 0x00                   ;clear R16,               (1 clock )
 574:	00 e0       	ldi	r16, 0x00	; 0
		STS   SRUBRR0H           , R16                    ;load val to UBRR0H,      (2 clocks)
 576:	00 93 c5 00 	sts	0x00C5, r16
		LDI   R16                , 0x03                   ;set 0x03, 250k baud,     (1 clock )
 57a:	03 e0       	ldi	r16, 0x03	; 3
		STS   SRUBRR0L           , R16                    ;load val to UBRR0L,      (2 clocks)
 57c:	00 93 c4 00 	sts	0x00C4, r16
		LDI   R16                , (1<<1)|(1<<2)          ;config 8 data bit        (1 clock )
 580:	06 e0       	ldi	r16, 0x06	; 6
		STS   SRUCSR0C           , R16                    ;load val to UCSR0C,      (2 clocks)
 582:	00 93 c2 00 	sts	0x00C2, r16
		LDI   R16                , (1<<3)                 ;enable tx,               (1 clock )
 586:	08 e0       	ldi	r16, 0x08	; 8
		STS   SRUCSR0B           , R16                    ;load val to UCSR0B,      (2 clocks)
 588:	00 93 c1 00 	sts	0x00C1, r16
        RET                                               ;return from subroutine,  (4 clocks) 
 58c:	08 95       	ret

0000058e <Debug_Tx_Byte>:


;;=========================================Debug Tx=========================================;;
Debug_Tx_Byte:
		;write single byte to data register (Arg R24)
		STS   SRGPIOR0           , R16                    ;store R16 val,           (2 clocks)
 58e:	00 93 3e 00 	sts	0x003E, r16
		STS   SRUDR0             , R24                    ;load val to UDR0,        (2 clocks)
 592:	80 93 c6 00 	sts	0x00C6, r24

00000596 <__UDRE0_CLEARED>:
		
    __UDRE0_CLEARED:
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,      (2 clocks)
 596:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x05                   ;skip if UDRE0 is set,    (2 clocks)
 59a:	05 ff       	sbrs	r16, 5
		RJMP  __UDRE0_CLEARED                             ;wait until UDRE0 is set, (2 clocks)
 59c:	fc cf       	rjmp	.-8      	; 0x596 <__UDRE0_CLEARED>
		LDS   R16                , SRGPIOR0               ;restore R16 val,         (2 clocks)
 59e:	00 91 3e 00 	lds	r16, 0x003E
        RET                                               ;return from subroutine,  (4 clocks) 
 5a2:	08 95       	ret

000005a4 <Debug_Tx_Byte_Conf>:


;;=========================================Debug Tx=========================================;;
Debug_Tx_Byte_Conf:
        ;write single byte to data register and wait until tx is complete (Arg R24)
		STS   SRGPIOR0           , R16                    ;store R16 val,           (2 clocks)
 5a4:	00 93 3e 00 	sts	0x003E, r16
		STS   SRUDR0             , R24                    ;load val to UDR0,        (2 clocks)
 5a8:	80 93 c6 00 	sts	0x00C6, r24

000005ac <__TXC0_CLEARED>:
		
    __TXC0_CLEARED:
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,      (2 clocks)
 5ac:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x06                   ;skip if TXC0 is set,     (2 clocks)
 5b0:	06 ff       	sbrs	r16, 6
		RJMP  __TXC0_CLEARED                              ;wait until TXC0 is set,  (2 clocks)
 5b2:	fc cf       	rjmp	.-8      	; 0x5ac <__TXC0_CLEARED>
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,      (2 clocks)
 5b4:	00 91 c0 00 	lds	r16, 0x00C0
		ORI   R16                , (1<<6)                 ;mask bit 6,              (1 clock )
 5b8:	00 64       	ori	r16, 0x40	; 64
		STS   SRUCSR0A           , R16                    ;load val to UCSR0B,      (2 clocks)
 5ba:	00 93 c0 00 	sts	0x00C0, r16
		LDS   R16                , SRGPIOR0               ;restore R16 val,         (2 clocks)
 5be:	00 91 3e 00 	lds	r16, 0x003E
        RET                                               ;return from subroutine,  (4 clocks) 
 5c2:	08 95       	ret

000005c4 <Debug_Tx_Word_Conf>:

;;======================================Debug Tx Word=======================================;;
Debug_Tx_Word_Conf:
        ;write 2 bytes to data register and wait until tx is complete (Arg R24, R25)
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 5c4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <Debug_Tx_Byte_Conf>
		MOV   R24                , R25                    ;copy R25 to R24          (1 clock )
 5c8:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 5ca:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <Debug_Tx_Byte_Conf>
        RET                                               ;return from subroutine,  (4 clocks) 
 5ce:	08 95       	ret

000005d0 <Debug_Tx_DWord_Conf>:

;;=====================================Debug Tx DWord=======================================;;
Debug_Tx_DWord_Conf:
        ;write 4 bytes to data register and wait until tx is complete (Arg R22-R25)
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks)
 5d0:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R22                    ;copy R22 to R24          (1 clock )
 5d4:	86 2f       	mov	r24, r22
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 5d6:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <Debug_Tx_Byte_Conf>
		MOV   R24                , R23                    ;copy R23 to R24          (1 clock )
 5da:	87 2f       	mov	r24, r23
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 5dc:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24              (2 clocks)
 5e0:	80 91 4a 00 	lds	r24, 0x004A
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 5e4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <Debug_Tx_Byte_Conf>
		MOV   R24                , R25                    ;copy R22 to R24          (1 clock )
 5e8:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 5ea:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <Debug_Tx_Byte_Conf>
        RET                                               ;return from subroutine,  (4 clocks) 
 5ee:	08 95       	ret

000005f0 <Debug_Tx_From_RAM>:


;;===================================Debug Tx From RAM======================================;;
Debug_Tx_From_RAM:
        ;print data from RAM address (Arg R24-R25)
		MOV   R16                , R30                    ;copy R30 to R16          (1 clock )
 5f0:	0e 2f       	mov	r16, r30
		MOV   R17                , R31                    ;copy R31 to R17          (1 clock )
 5f2:	1f 2f       	mov	r17, r31
		MOV   R18                , R24                    ;copy R24 to R18          (1 clock )
 5f4:	28 2f       	mov	r18, r24
		MOV   R30                , R24                    ;copy R22 to R24          (1 clock )
 5f6:	e8 2f       	mov	r30, r24
		MOV   R31                , R25                    ;copy R22 to R24          (1 clock )
 5f8:	f9 2f       	mov	r31, r25
		LD    R24                , Z                      ;load val to R24          (2 clocks)
 5fa:	80 81       	ld	r24, Z
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 5fc:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <Debug_Tx_Byte_Conf>
		MOV   R30                , R16                    ;copy R16 to R30          (1 clock )
 600:	e0 2f       	mov	r30, r16
		MOV   R31                , R17                    ;copy R17 to R31          (1 clock )
 602:	f1 2f       	mov	r31, r17
		MOV   R24                , R18                    ;copy R18 to R24          (1 clock )
 604:	82 2f       	mov	r24, r18
        RET                                               ;return from subroutine,  (4 clocks) 
 606:	08 95       	ret

00000608 <Debug_Tx_RAM_Area>:

;;===================================Debug Tx RAM Area======================================;;
Debug_Tx_RAM_Area:
        ;print data from RAM address (arguments R24:R25, R22)
	__DUMP_BYTES:
	    CALL  Debug_Tx_From_RAM                           ;send via uart from ram
 608:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <Debug_Tx_From_RAM>
		SUBI  R24                , 0x01                   ;decrement from LSByte
 60c:	81 50       	subi	r24, 0x01	; 1
        SBCI  R25                , 0x00                   ;decrement if carry
 60e:	90 40       	sbci	r25, 0x00	; 0
		SUBI  R22                , 0x01                   ;decrement
 610:	61 50       	subi	r22, 0x01	; 1
		BRNE  __DUMP_BYTES
 612:	d1 f7       	brne	.-12     	; 0x608 <Debug_Tx_RAM_Area>
        RET                                               ;return from subroutine,  (4 clocks) 
 614:	08 95       	ret

00000616 <_exit>:
 616:	f8 94       	cli

00000618 <__stop_program>:
 618:	ff cf       	rjmp	.-2      	; 0x618 <__stop_program>
