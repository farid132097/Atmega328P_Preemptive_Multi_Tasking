
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000546  00800100  00800100  00000962  2**0
                  ALLOC
  2 .stab         00000cc0  00000000  00000000  00000964  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000006d  00000000  00000000  00001624  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00001691  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000bd  00000000  00000000  000016d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000022f  00000000  00000000  0000178e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000c8  00000000  00000000  000019bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a8  00000000  00000000  00001a85  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001d30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000116  00000000  00000000  00001df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000140  00000000  00000000  00001f06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__vector_16>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	00 00       	nop
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 00       	nop
  76:	00 00       	nop
  78:	00 00       	nop
  7a:	00 00       	nop
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 00       	nop
  82:	00 00       	nop
  84:	00 00       	nop
  86:	00 00       	nop
  88:	17 c1       	rjmp	.+558    	; 0x2b8 <__vector_16>

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61
  96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  9a:	0c 94 75 04 	jmp	0x8ea	; 0x8ea <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:


int main(void) {
    
	
	Kernel_SysTick_Reg_Init(0x03, 0x82);
  a2:	83 e0       	ldi	r24, 0x03	; 3
  a4:	62 e8       	ldi	r22, 0x82	; 130
  a6:	0e 94 0b 02 	call	0x416	; 0x416 <Kernel_SysTick_Reg_Init>
	
	Kernel_Task_Create(Tasks_Task0,  0);
  aa:	85 e8       	ldi	r24, 0x85	; 133
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	60 e0       	ldi	r22, 0x00	; 0
  b0:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task2,  0);
  b4:	8c e1       	ldi	r24, 0x1C	; 28
  b6:	91 e0       	ldi	r25, 0x01	; 1
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task3,  0);
  be:	83 e0       	ldi	r24, 0x03	; 3
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task4,  0);
  c8:	8a ee       	ldi	r24, 0xEA	; 234
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task5,  0);
  d2:	81 ed       	ldi	r24, 0xD1	; 209
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task6,  0);
  dc:	88 eb       	ldi	r24, 0xB8	; 184
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task7,  0);
  e6:	8f e9       	ldi	r24, 0x9F	; 159
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task8,  0);
  f0:	86 e8       	ldi	r24, 0x86	; 134
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Kernel_Task_Create>
	Kernel_Task_Create(Tasks_Task1,  0);
  fa:	8c e3       	ldi	r24, 0x3C	; 60
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Kernel_Task_Create>
	
	Kernel_Start_Tasks();
 104:	0e 94 c6 02 	call	0x58c	; 0x58c <Kernel_Start_Tasks>
 108:	ff cf       	rjmp	.-2      	; 0x108 <SRUDR0+0x42>

0000010a <Tasks_Task0>:
#include "tasks.h"
#include "debug.h"



void Tasks_Task0(void){
 10a:	ff cf       	rjmp	.-2      	; 0x10a <Tasks_Task0>

0000010c <Tasks_Task8>:
	Kernel_Task_Sleep(38);
	
  }
}

void Tasks_Task8(void){
 10c:	0f 93       	push	r16
 10e:	1f 93       	push	r17
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
  
  Debug_Init(0);
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 0d 04 	call	0x81a	; 0x81a <Debug_Init>
 11c:	c0 ef       	ldi	r28, 0xF0	; 240
 11e:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t val = 240;
  
  while(1){
    
	Debug_Tx_Byte_Conf(8);
 120:	88 e0       	ldi	r24, 0x08	; 8
 122:	0e 94 28 04 	call	0x850	; 0x850 <Debug_Tx_Byte_Conf>
	Debug_Tx_Word_Conf(val--);
 126:	8e 01       	movw	r16, r28
 128:	01 50       	subi	r16, 0x01	; 1
 12a:	10 40       	sbci	r17, 0x00	; 0
 12c:	ce 01       	movw	r24, r28
 12e:	0e 94 38 04 	call	0x870	; 0x870 <Debug_Tx_Word_Conf>
	Kernel_Task_Sleep(42);
 132:	8a e2       	ldi	r24, 0x2A	; 42
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 ff 02 	call	0x5fe	; 0x5fe <Kernel_Task_Sleep>
 13a:	e8 01       	movw	r28, r16
 13c:	f1 cf       	rjmp	.-30     	; 0x120 <Tasks_Task8+0x14>

0000013e <Tasks_Task7>:
	Kernel_Task_Sleep(31);
	
  }
}

void Tasks_Task7(void){
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
  
  Debug_Init(0);
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 0d 04 	call	0x81a	; 0x81a <Debug_Init>
 14e:	cc ed       	ldi	r28, 0xDC	; 220
 150:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t val = 220;
  
  while(1){
    
	Debug_Tx_Byte_Conf(7);
 152:	87 e0       	ldi	r24, 0x07	; 7
 154:	0e 94 28 04 	call	0x850	; 0x850 <Debug_Tx_Byte_Conf>
	Debug_Tx_Word_Conf(val--);
 158:	8e 01       	movw	r16, r28
 15a:	01 50       	subi	r16, 0x01	; 1
 15c:	10 40       	sbci	r17, 0x00	; 0
 15e:	ce 01       	movw	r24, r28
 160:	0e 94 38 04 	call	0x870	; 0x870 <Debug_Tx_Word_Conf>
	Kernel_Task_Sleep(38);
 164:	86 e2       	ldi	r24, 0x26	; 38
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 ff 02 	call	0x5fe	; 0x5fe <Kernel_Task_Sleep>
 16c:	e8 01       	movw	r28, r16
 16e:	f1 cf       	rjmp	.-30     	; 0x152 <Tasks_Task7+0x14>

00000170 <Tasks_Task6>:
	Kernel_Task_Sleep(29);
	
  }
}

void Tasks_Task6(void){
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
  
  Debug_Init(0);
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 0d 04 	call	0x81a	; 0x81a <Debug_Init>
 180:	c8 ec       	ldi	r28, 0xC8	; 200
 182:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t val = 200;
  
  while(1){
    
	Debug_Tx_Byte_Conf(6);
 184:	86 e0       	ldi	r24, 0x06	; 6
 186:	0e 94 28 04 	call	0x850	; 0x850 <Debug_Tx_Byte_Conf>
	Debug_Tx_Word_Conf(val--);
 18a:	8e 01       	movw	r16, r28
 18c:	01 50       	subi	r16, 0x01	; 1
 18e:	10 40       	sbci	r17, 0x00	; 0
 190:	ce 01       	movw	r24, r28
 192:	0e 94 38 04 	call	0x870	; 0x870 <Debug_Tx_Word_Conf>
	Kernel_Task_Sleep(31);
 196:	8f e1       	ldi	r24, 0x1F	; 31
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <Kernel_Task_Sleep>
 19e:	e8 01       	movw	r28, r16
 1a0:	f1 cf       	rjmp	.-30     	; 0x184 <Tasks_Task6+0x14>

000001a2 <Tasks_Task5>:
	Kernel_Task_Sleep(26);
	
  }
}

void Tasks_Task5(void){
 1a2:	0f 93       	push	r16
 1a4:	1f 93       	push	r17
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
  
  Debug_Init(0);
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 0d 04 	call	0x81a	; 0x81a <Debug_Init>
 1b2:	c4 eb       	ldi	r28, 0xB4	; 180
 1b4:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t val = 180;
  
  while(1){
    
    Debug_Tx_Byte_Conf(5);
 1b6:	85 e0       	ldi	r24, 0x05	; 5
 1b8:	0e 94 28 04 	call	0x850	; 0x850 <Debug_Tx_Byte_Conf>
	Debug_Tx_Word_Conf(val--);
 1bc:	8e 01       	movw	r16, r28
 1be:	01 50       	subi	r16, 0x01	; 1
 1c0:	10 40       	sbci	r17, 0x00	; 0
 1c2:	ce 01       	movw	r24, r28
 1c4:	0e 94 38 04 	call	0x870	; 0x870 <Debug_Tx_Word_Conf>
	Kernel_Task_Sleep(29);
 1c8:	8d e1       	ldi	r24, 0x1D	; 29
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 ff 02 	call	0x5fe	; 0x5fe <Kernel_Task_Sleep>
 1d0:	e8 01       	movw	r28, r16
 1d2:	f1 cf       	rjmp	.-30     	; 0x1b6 <Tasks_Task5+0x14>

000001d4 <Tasks_Task4>:
	Kernel_Task_Sleep(24);
	
  }
}

void Tasks_Task4(void){
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
  
  Debug_Init(0);
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 0d 04 	call	0x81a	; 0x81a <Debug_Init>
 1e4:	c0 ea       	ldi	r28, 0xA0	; 160
 1e6:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t val = 160;
  
  while(1){
    
	Debug_Tx_Byte_Conf(4);
 1e8:	84 e0       	ldi	r24, 0x04	; 4
 1ea:	0e 94 28 04 	call	0x850	; 0x850 <Debug_Tx_Byte_Conf>
	Debug_Tx_Word_Conf(val--);
 1ee:	8e 01       	movw	r16, r28
 1f0:	01 50       	subi	r16, 0x01	; 1
 1f2:	10 40       	sbci	r17, 0x00	; 0
 1f4:	ce 01       	movw	r24, r28
 1f6:	0e 94 38 04 	call	0x870	; 0x870 <Debug_Tx_Word_Conf>
	Kernel_Task_Sleep(26);
 1fa:	8a e1       	ldi	r24, 0x1A	; 26
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 ff 02 	call	0x5fe	; 0x5fe <Kernel_Task_Sleep>
 202:	e8 01       	movw	r28, r16
 204:	f1 cf       	rjmp	.-30     	; 0x1e8 <Tasks_Task4+0x14>

00000206 <Tasks_Task3>:
	Kernel_Task_Sleep(17);
	
  }
}

void Tasks_Task3(void){
 206:	0f 93       	push	r16
 208:	1f 93       	push	r17
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
  
  Debug_Init(0);
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 0d 04 	call	0x81a	; 0x81a <Debug_Init>
 216:	cc e8       	ldi	r28, 0x8C	; 140
 218:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t val = 140;
  
  while(1){
    
	Debug_Tx_Byte_Conf(3);
 21a:	83 e0       	ldi	r24, 0x03	; 3
 21c:	0e 94 28 04 	call	0x850	; 0x850 <Debug_Tx_Byte_Conf>
	Debug_Tx_Word_Conf(val--);
 220:	8e 01       	movw	r16, r28
 222:	01 50       	subi	r16, 0x01	; 1
 224:	10 40       	sbci	r17, 0x00	; 0
 226:	ce 01       	movw	r24, r28
 228:	0e 94 38 04 	call	0x870	; 0x870 <Debug_Tx_Word_Conf>
	Kernel_Task_Sleep(24);
 22c:	88 e1       	ldi	r24, 0x18	; 24
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 ff 02 	call	0x5fe	; 0x5fe <Kernel_Task_Sleep>
 234:	e8 01       	movw	r28, r16
 236:	f1 cf       	rjmp	.-30     	; 0x21a <Tasks_Task3+0x14>

00000238 <Tasks_Task2>:
	Kernel_Task_Sleep(10);
	
  }
}

void Tasks_Task2(void){
 238:	ff 92       	push	r15
 23a:	0f 93       	push	r16
 23c:	1f 93       	push	r17
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
  
  Debug_Init(0);
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 0d 04 	call	0x81a	; 0x81a <Debug_Init>
  DDRD |= (1<<6);
 24a:	56 9a       	sbi	0x0a, 6	; 10
 24c:	c8 e7       	ldi	r28, 0x78	; 120
 24e:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t val = 120;
  
  while(1){
    
    PORTD ^= (1<<6);
 250:	80 e4       	ldi	r24, 0x40	; 64
 252:	f8 2e       	mov	r15, r24
 254:	8b b1       	in	r24, 0x0b	; 11
 256:	8f 25       	eor	r24, r15
 258:	8b b9       	out	0x0b, r24	; 11
	Debug_Tx_Byte_Conf(2);
 25a:	82 e0       	ldi	r24, 0x02	; 2
 25c:	0e 94 28 04 	call	0x850	; 0x850 <Debug_Tx_Byte_Conf>
    Debug_Tx_Word_Conf(val--);
 260:	8e 01       	movw	r16, r28
 262:	01 50       	subi	r16, 0x01	; 1
 264:	10 40       	sbci	r17, 0x00	; 0
 266:	ce 01       	movw	r24, r28
 268:	0e 94 38 04 	call	0x870	; 0x870 <Debug_Tx_Word_Conf>
	Kernel_Task_Sleep(17);
 26c:	81 e1       	ldi	r24, 0x11	; 17
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 ff 02 	call	0x5fe	; 0x5fe <Kernel_Task_Sleep>
 274:	e8 01       	movw	r28, r16
 276:	ee cf       	rjmp	.-36     	; 0x254 <Tasks_Task2+0x1c>

00000278 <Tasks_Task1>:
    
	
  }
}

void Tasks_Task1(void){
 278:	ff 92       	push	r15
 27a:	0f 93       	push	r16
 27c:	1f 93       	push	r17
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
  
  Debug_Init(0);
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 0d 04 	call	0x81a	; 0x81a <Debug_Init>
  DDRD |= (1<<5);
 28a:	55 9a       	sbi	0x0a, 5	; 10
 28c:	c4 e6       	ldi	r28, 0x64	; 100
 28e:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t val = 100;
  
  while(1){
    
    PORTD ^= (1<<5);
 290:	90 e2       	ldi	r25, 0x20	; 32
 292:	f9 2e       	mov	r15, r25
 294:	8b b1       	in	r24, 0x0b	; 11
 296:	8f 25       	eor	r24, r15
 298:	8b b9       	out	0x0b, r24	; 11
	Debug_Tx_Byte_Conf(1);
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	0e 94 28 04 	call	0x850	; 0x850 <Debug_Tx_Byte_Conf>
	Debug_Tx_Word_Conf(val--);
 2a0:	8e 01       	movw	r16, r28
 2a2:	01 50       	subi	r16, 0x01	; 1
 2a4:	10 40       	sbci	r17, 0x00	; 0
 2a6:	ce 01       	movw	r24, r28
 2a8:	0e 94 38 04 	call	0x870	; 0x870 <Debug_Tx_Word_Conf>
	Kernel_Task_Sleep(10);
 2ac:	8a e0       	ldi	r24, 0x0A	; 10
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <Kernel_Task_Sleep>
 2b4:	e8 01       	movw	r28, r16
 2b6:	ee cf       	rjmp	.-36     	; 0x294 <Tasks_Task1+0x1c>

000002b8 <__vector_16>:


;;=================================ISR execution starting===================================;; 
.global  __vector_16
    __vector_16:                                          ;total 26.13uS @8MHz    (211 clocks) 
	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 2b8:	29 9a       	sbi	0x05, 1	; 5
        KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 2ba:	0f 92       	push	r0
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	0f 92       	push	r0
 2c0:	1f 92       	push	r1
 2c2:	11 24       	eor	r1, r1
 2c4:	2f 92       	push	r2
 2c6:	3f 92       	push	r3
 2c8:	4f 92       	push	r4
 2ca:	5f 92       	push	r5
 2cc:	6f 92       	push	r6
 2ce:	7f 92       	push	r7
 2d0:	8f 92       	push	r8
 2d2:	9f 92       	push	r9
 2d4:	af 92       	push	r10
 2d6:	bf 92       	push	r11
 2d8:	cf 92       	push	r12
 2da:	df 92       	push	r13
 2dc:	ef 92       	push	r14
 2de:	ff 92       	push	r15
 2e0:	0f 93       	push	r16
 2e2:	1f 93       	push	r17
 2e4:	2f 93       	push	r18
 2e6:	3f 93       	push	r19
 2e8:	4f 93       	push	r20
 2ea:	5f 93       	push	r21
 2ec:	6f 93       	push	r22
 2ee:	7f 93       	push	r23
 2f0:	8f 93       	push	r24
 2f2:	9f 93       	push	r25
 2f4:	af 93       	push	r26
 2f6:	bf 93       	push	r27
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	ef 93       	push	r30
 2fe:	ff 93       	push	r31
		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 300:	00 91 06 01 	lds	r16, 0x0106
 304:	00 93 46 00 	sts	0x0046, r16
		KER_TICK_INCREMENT                                ;increment tick counter ( 27 clocks) 
 308:	00 91 00 01 	lds	r16, 0x0100
 30c:	03 95       	inc	r16
 30e:	00 93 00 01 	sts	0x0100, r16
 312:	00 91 01 01 	lds	r16, 0x0101
 316:	01 1d       	adc	r16, r1
 318:	00 93 01 01 	sts	0x0101, r16
 31c:	00 91 02 01 	lds	r16, 0x0102
 320:	01 1d       	adc	r16, r1
 322:	00 93 02 01 	sts	0x0102, r16
 326:	00 91 03 01 	lds	r16, 0x0103
 32a:	01 1d       	adc	r16, r1
 32c:	00 93 03 01 	sts	0x0103, r16
 330:	00 91 04 01 	lds	r16, 0x0104
 334:	01 1d       	adc	r16, r1
 336:	00 93 04 01 	sts	0x0104, r16
        KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 33a:	0d b7       	in	r16, 0x3d	; 61
 33c:	1e b7       	in	r17, 0x3e	; 62
 33e:	20 91 07 01 	lds	r18, 0x0107
 342:	22 0f       	add	r18, r18
 344:	ea e0       	ldi	r30, 0x0A	; 10
 346:	f1 e0       	ldi	r31, 0x01	; 1
 348:	e2 0f       	add	r30, r18
 34a:	f1 1d       	adc	r31, r1
 34c:	01 93       	st	Z+, r16
 34e:	10 83       	st	Z, r17
		
		KER_DEC_SLP_TIMEOUT                               ;decrement of sleep time
 350:	00 91 08 01 	lds	r16, 0x0108

00000354 <_UPDATE_TASK_READY5>:
 354:	0a 95       	dec	r16
 356:	20 2f       	mov	r18, r16
 358:	22 0f       	add	r18, r18
 35a:	e2 e3       	ldi	r30, 0x32	; 50
 35c:	f1 e0       	ldi	r31, 0x01	; 1
 35e:	e2 0f       	add	r30, r18
 360:	f1 1d       	adc	r31, r1
 362:	a1 91       	ld	r26, Z+
 364:	b0 81       	ld	r27, Z
 366:	2a 2f       	mov	r18, r26
 368:	2b 2b       	or	r18, r27
 36a:	41 f0       	breq	.+16     	; 0x37c <_VAL_NULL5>
 36c:	11 97       	sbiw	r26, 0x01	; 1
 36e:	b0 83       	st	Z, r27
 370:	a2 93       	st	-Z, r26
 372:	2a 2f       	mov	r18, r26
 374:	2b 2b       	or	r18, r27
 376:	11 f0       	breq	.+4      	; 0x37c <_VAL_NULL5>
 378:	0c 94 c4 01 	jmp	0x388	; 0x388 <_LOOP5>

0000037c <_VAL_NULL5>:
 37c:	ee e1       	ldi	r30, 0x1E	; 30
 37e:	f1 e0       	ldi	r31, 0x01	; 1
 380:	e0 0f       	add	r30, r16
 382:	f1 1d       	adc	r31, r1
 384:	21 e0       	ldi	r18, 0x01	; 1
 386:	20 83       	st	Z, r18

00000388 <_LOOP5>:
 388:	00 30       	cpi	r16, 0x00	; 0
 38a:	21 f7       	brne	.-56     	; 0x354 <_UPDATE_TASK_READY5>
		KER_RUN_SCHEDULER                                 ;run task if ready
 38c:	00 91 08 01 	lds	r16, 0x0108

00000390 <_CH_TASK_READY6>:
 390:	0a 95       	dec	r16
 392:	10 2f       	mov	r17, r16
 394:	ee e1       	ldi	r30, 0x1E	; 30
 396:	f1 e0       	ldi	r31, 0x01	; 1
 398:	e1 0f       	add	r30, r17
 39a:	f1 1d       	adc	r31, r1
 39c:	10 81       	ld	r17, Z
 39e:	11 30       	cpi	r17, 0x01	; 1
 3a0:	21 f0       	breq	.+8      	; 0x3aa <_NEXT_TASK_FOUND6>

000003a2 <_LOOP_CNT6>:
 3a2:	00 30       	cpi	r16, 0x00	; 0
 3a4:	a9 f7       	brne	.-22     	; 0x390 <_CH_TASK_READY6>
 3a6:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <_IDLE_TASK6>

000003aa <_NEXT_TASK_FOUND6>:
 3aa:	00 93 07 01 	sts	0x0107, r16
 3ae:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <_EXIT6>

000003b2 <_IDLE_TASK6>:
 3b2:	00 e0       	ldi	r16, 0x00	; 0
 3b4:	00 93 07 01 	sts	0x0107, r16

000003b8 <_EXIT6>:
	    
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 3b8:	00 91 07 01 	lds	r16, 0x0107
 3bc:	00 0f       	add	r16, r16
 3be:	ea e0       	ldi	r30, 0x0A	; 10
 3c0:	f1 e0       	ldi	r31, 0x01	; 1
 3c2:	e0 0f       	add	r30, r16
 3c4:	f1 1d       	adc	r31, r1
 3c6:	01 91       	ld	r16, Z+
 3c8:	10 81       	ld	r17, Z
 3ca:	0d bf       	out	0x3d, r16	; 61
 3cc:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 3ce:	ff 91       	pop	r31
 3d0:	ef 91       	pop	r30
 3d2:	df 91       	pop	r29
 3d4:	cf 91       	pop	r28
 3d6:	bf 91       	pop	r27
 3d8:	af 91       	pop	r26
 3da:	9f 91       	pop	r25
 3dc:	8f 91       	pop	r24
 3de:	7f 91       	pop	r23
 3e0:	6f 91       	pop	r22
 3e2:	5f 91       	pop	r21
 3e4:	4f 91       	pop	r20
 3e6:	3f 91       	pop	r19
 3e8:	2f 91       	pop	r18
 3ea:	1f 91       	pop	r17
 3ec:	0f 91       	pop	r16
 3ee:	ff 90       	pop	r15
 3f0:	ef 90       	pop	r14
 3f2:	df 90       	pop	r13
 3f4:	cf 90       	pop	r12
 3f6:	bf 90       	pop	r11
 3f8:	af 90       	pop	r10
 3fa:	9f 90       	pop	r9
 3fc:	8f 90       	pop	r8
 3fe:	7f 90       	pop	r7
 400:	6f 90       	pop	r6
 402:	5f 90       	pop	r5
 404:	4f 90       	pop	r4
 406:	3f 90       	pop	r3
 408:	2f 90       	pop	r2
 40a:	1f 90       	pop	r1
 40c:	0f 90       	pop	r0
 40e:	0f be       	out	0x3f, r0	; 63
 410:	0f 90       	pop	r0
	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 412:	29 98       	cbi	0x05, 1	; 5
		RETI                                              ;return from interrupt  (  4 clocks) 
 414:	18 95       	reti

00000416 <Kernel_SysTick_Reg_Init>:



;;================================SysTick reg init starting=================================;; 
Kernel_SysTick_Reg_Init:                                  ;total operation        ( 55 clocks) 
        CLI                                               ;disable global int,    (  1 clock ) 
 416:	f8 94       	cli
		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 418:	21 9a       	sbi	0x04, 1	; 4
 41a:	29 98       	cbi	0x05, 1	; 5
		LDI   R16                , 0x00                   ;set 0x00 to R16,       (  1 clock ) 
 41c:	00 e0       	ldi	r16, 0x00	; 0
		
		;clear tick counter
		STS   KerBase+OFF_TICK0  , R16                    ;clear  KerBase[0]      (  2 clocks) 
 41e:	00 93 00 01 	sts	0x0100, r16
		STS   KerBase+OFF_TICK1  , R16                    ;clear  KerBase[1]      (  2 clocks) 
 422:	00 93 01 01 	sts	0x0101, r16
		STS   KerBase+OFF_TICK2  , R16                    ;clear  KerBase[2]      (  2 clocks) 
 426:	00 93 02 01 	sts	0x0102, r16
		STS   KerBase+OFF_TICK3  , R16                    ;clear  KerBase[3]      (  2 clocks) 
 42a:	00 93 03 01 	sts	0x0103, r16
		STS   KerBase+OFF_TICK4  , R16                    ;clear  KerBase[4]      (  2 clocks) 
 42e:	00 93 04 01 	sts	0x0104, r16
		
		;clear prescaler
		STS   KerBase+OFF_PRS    , R16                    ;clear  KerBase[5]      (  2 clocks) 
 432:	00 93 05 01 	sts	0x0105, r16
		
		;clear reload value
		STS   KerBase+OFF_RLD    , R16                    ;clear  KerBase[6]      (  2 clocks) 
 436:	00 93 06 01 	sts	0x0106, r16
		
		;clear task id
		STS   KerBase+OFF_TID    , R16                    ;clear  KerBase[7]      (  2 clocks) 
 43a:	00 93 07 01 	sts	0x0107, r16
		
		;clear ntask
		STS   KerBase+OFF_NTSK   , R16                    ;clear  KerBase[8]      (  2 clocks) 
 43e:	00 93 08 01 	sts	0x0108, r16
		
		;reserved, not used
        STS   KerBase+0x09       , R16                    ;clear  KerBase[9]      (  2 clocks) 
 442:	00 93 09 01 	sts	0x0109, r16
		
		;clear all timer registers
		STS   SRTCCR0A           , R16                    ;clear TCCR0A           (  2 clocks) 
 446:	00 93 44 00 	sts	0x0044, r16
		STS   SRTCCR0B           , R16                    ;clear TCCR0B           (  2 clocks) 
 44a:	00 93 45 00 	sts	0x0045, r16
		STS   SRTIMSK0           , R16                    ;clear TIMSK0           (  2 clocks) 
 44e:	00 93 6e 00 	sts	0x006E, r16
		STS   SRTIFR0            , R16                    ;clear TIFR0            (  2 clocks) 
 452:	00 93 35 00 	sts	0x0035, r16
		STS   SROCR0A            , R16                    ;clear OCR0A            (  2 clocks) 
 456:	00 93 47 00 	sts	0x0047, r16
		STS   SROCR0B            , R16                    ;clear OCR0B            (  2 clocks) 
 45a:	00 93 48 00 	sts	0x0048, r16
		STS   SRTCNT0            , R16                    ;clear TCNT0            (  2 clocks) 
 45e:	00 93 46 00 	sts	0x0046, r16
		
		;store prescaler value
		MOV   R16                , R24                    ;prescaler from arg1    (  1 clock ) 
 462:	08 2f       	mov	r16, r24
		STS   KerBase+OFF_PRS    , R16                    ;KerBase[5] prescaler   (  2 clocks) 
 464:	00 93 05 01 	sts	0x0105, r16
        
		;store reload value
		MOV   R16                , R22                    ;reload val from arg2   (  1 clock ) 
 468:	06 2f       	mov	r16, r22
		STS   KerBase+OFF_RLD    , R16                    ;KerBase[6] reload val  (  2 clocks) 
 46a:	00 93 06 01 	sts	0x0106, r16
		
		RET                                               ;return from subroutine (  4 clocks) 
 46e:	08 95       	ret

00000470 <Kernel_SysTick_Val_Get>:

;;===============================SysTick value get starting=================================;; 
Kernel_SysTick_Val_Get:                                   ;total operation        ( 42 clocks) 
    _READ_AGAIN:
	    ;first read & store to actual return registers
		LDS   R18		         , KerBase+OFF_TICK0      ;byte0 (LSB)            (  2 clocks) 
 470:	20 91 00 01 	lds	r18, 0x0100
		LDS   R19		         , KerBase+OFF_TICK1      ;byte1                  (  2 clocks) 
 474:	30 91 01 01 	lds	r19, 0x0101
		LDS   R20		         , KerBase+OFF_TICK2      ;byte2                  (  2 clocks) 
 478:	40 91 02 01 	lds	r20, 0x0102
		LDS   R21		         , KerBase+OFF_TICK3      ;byte3                  (  2 clocks) 
 47c:	50 91 03 01 	lds	r21, 0x0103
		LDS   R22		         , KerBase+OFF_TICK4      ;byte4 (MSB)            (  2 clocks) 
 480:	60 91 04 01 	lds	r22, 0x0104
		
		;second read to scratch registers
		LDS   R26		         , KerBase+OFF_TICK0      ;byte0 (LSB)            (  2 clocks) 
 484:	a0 91 00 01 	lds	r26, 0x0100
		LDS   R27		         , KerBase+OFF_TICK1      ;byte1                  (  2 clocks) 
 488:	b0 91 01 01 	lds	r27, 0x0101
		LDS   R30		         , KerBase+OFF_TICK2      ;byte2                  (  2 clocks) 
 48c:	e0 91 02 01 	lds	r30, 0x0102
		LDS   R31		         , KerBase+OFF_TICK3      ;byte3                  (  2 clocks) 
 490:	f0 91 03 01 	lds	r31, 0x0103
		LDS   R0		         , KerBase+OFF_TICK4      ;byte4 (MSB)            (  2 clocks) 
 494:	00 90 04 01 	lds	r0, 0x0104
		
		;compare all pairs
		CP    R18                , R26                    ;compare                (  1 clock ) 
 498:	2a 17       	cp	r18, r26
		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 49a:	51 f7       	brne	.-44     	; 0x470 <Kernel_SysTick_Val_Get>
		CP    R19                , R27                    ;compare                (  1 clock ) 
 49c:	3b 17       	cp	r19, r27
		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 49e:	41 f7       	brne	.-48     	; 0x470 <Kernel_SysTick_Val_Get>
		CP    R20                , R30                    ;compare                (  1 clock ) 
 4a0:	4e 17       	cp	r20, r30
		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 4a2:	31 f7       	brne	.-52     	; 0x470 <Kernel_SysTick_Val_Get>
		CP    R21                , R31                    ;compare                (  1 clock ) 
 4a4:	5f 17       	cp	r21, r31
		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 4a6:	21 f7       	brne	.-56     	; 0x470 <Kernel_SysTick_Val_Get>
		CP    R22                , R0                     ;compare                (  1 clock ) 
 4a8:	60 15       	cp	r22, r0
		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 4aa:	11 f7       	brne	.-60     	; 0x470 <Kernel_SysTick_Val_Get>
		
		;only 5 bytes data are taken, force clear 3 high bytes (64bit return R25:R18)
		LDI   R23		         , 0x00                   ;byte5 -> R23           (  1 clocks) 
 4ac:	70 e0       	ldi	r23, 0x00	; 0
		LDI   R24		         , 0x00                   ;byte6 -> R24           (  1 clocks) 
 4ae:	80 e0       	ldi	r24, 0x00	; 0
		LDI   R25		         , 0x00                   ;byte7 -> R25           (  1 clocks) 
 4b0:	90 e0       	ldi	r25, 0x00	; 0
		RET                                               ;return from subroutine (  4 clocks) 
 4b2:	08 95       	ret

000004b4 <Kernel_SysTick_Val_Safely_Get>:



;;============================SysTick value safely get starting=============================;; 
Kernel_SysTick_Val_Safely_Get:                            ;total operation        ( 20 clocks) 
        IN    R2                 , IOSREG                 ;save SREG              (  1 clock ) 
 4b4:	2f b6       	in	r2, 0x3f	; 63
        CLI                                               ;disable interrupts     (  1 clock ) 
 4b6:	f8 94       	cli
		LDS   R18		         , KerBase+OFF_TICK0      ;byte0 -> R18 (LSB)     (  2 clocks) 
 4b8:	20 91 00 01 	lds	r18, 0x0100
		LDS   R19		         , KerBase+OFF_TICK1      ;byte1 -> R19           (  2 clocks) 
 4bc:	30 91 01 01 	lds	r19, 0x0101
		LDS   R20		         , KerBase+OFF_TICK2      ;byte2 -> R20           (  2 clocks) 
 4c0:	40 91 02 01 	lds	r20, 0x0102
		LDS   R21		         , KerBase+OFF_TICK3      ;byte3 -> R21           (  2 clocks) 
 4c4:	50 91 03 01 	lds	r21, 0x0103
		LDS   R22		         , KerBase+OFF_TICK4      ;byte4 -> R22           (  2 clocks) 
 4c8:	60 91 04 01 	lds	r22, 0x0104
		LDI   R23		         , 0x00                   ;byte5 -> R23           (  1 clocks) 
 4cc:	70 e0       	ldi	r23, 0x00	; 0
		LDI   R24		         , 0x00                   ;byte6 -> R24           (  1 clocks) 
 4ce:	80 e0       	ldi	r24, 0x00	; 0
		LDI   R25		         , 0x00                   ;byte7 -> R25 (MSB)     (  1 clocks) 
 4d0:	90 e0       	ldi	r25, 0x00	; 0
		OUT   IOSREG             , R2          		      ;restore SREG           (  1 clock ) 
 4d2:	2f be       	out	0x3f, r2	; 63
		RET                                               ;return from subroutine (  4 clocks) 
 4d4:	08 95       	ret

000004d6 <Kernel_Interrupt_Sts_Get>:



;;==============================interrupt status get starting===============================;; 
Kernel_Interrupt_Sts_Get:                                 ;total operation        ( 10 clocks) 
        LDI   R24		         , 0x00                   ;clear R24              (  1 clock ) 
 4d6:	80 e0       	ldi	r24, 0x00	; 0
        IN    R16		         , IOSREG                 ;save SREG in R16       (  1 clock ) 
 4d8:	0f b7       	in	r16, 0x3f	; 63
		SBRC  R16		         , 0x07                   ;check I flag->bit7     (  3 clocks) 
 4da:	07 fd       	sbrc	r16, 7
		LDI   R24		         , 0x01                   ;set R24 to 1           (  1 clock ) 
 4dc:	81 e0       	ldi	r24, 0x01	; 1
		RET                                               ;return from subroutine (  4 clocks) 
 4de:	08 95       	ret

000004e0 <Kernel_Init>:

;;==================================kernel init starting====================================;; 
Kernel_Init:
        ;func_ptr->R25:R24, task_id->R22, task_priority->R20
        ;save main SP & Z pointer
        IN    R2                 , IOSPL                  ;save SPL of MSP        (  1 clock ) 
 4e0:	2d b6       	in	r2, 0x3d	; 61
		
		RET                                               ;return from subroutine (  4 clocks) 
 4e2:	08 95       	ret

000004e4 <Kernel_Task_Create>:

;;===============================kernel task create starting================================;; 
Kernel_Task_Create:
        ;func_ptr->R25:R24, task_priority->R22
        ;save main SP & Z pointer
        IN    R2                 , IOSPL                  ;save SPL of MSP        (  1 clock ) 
 4e4:	2d b6       	in	r2, 0x3d	; 61
        IN    R3                 , IOSPH                  ;save SPH of MSP        (  1 clock ) 
 4e6:	3e b6       	in	r3, 0x3e	; 62
        MOV   R4                 , R30                    ;save ZPL               (  2 clocks) 
 4e8:	4e 2e       	mov	r4, r30
		MOV   R5                 , R31                    ;save ZPH               (  2 clocks) 
 4ea:	5f 2e       	mov	r5, r31
		;ADC   R31                , R16                    ;add offset to array    (  1 clock )
		;LDI   R16                , TASK_READY             ;set TASK_READY         (  1 clock ) 
		;ST    Z                  , R16                    ;update flag            (  2 clocks)
		
		;set priority to KerSchPr
		LDS   R16                , KerBase+OFF_TID        ;load task_id           (  2 clocks) 
 4ec:	00 91 07 01 	lds	r16, 0x0107
		LDI   R30                , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 4f0:	e8 e2       	ldi	r30, 0x28	; 40
		LDI   R31                , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 4f2:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 4f4:	e0 0f       	add	r30, r16
		ADC   R31                , R1                     ;add high byte+carry    (  1 clock ) 
 4f6:	f1 1d       	adc	r31, r1
		ST    Z                  , R22                    ;save priority          (  2 clocks)
 4f8:	60 83       	st	Z, r22
		
		;increment ntask
		LDS   R16                , KerBase+OFF_NTSK       ;load ntask             (  2 clocks) 
 4fa:	00 91 08 01 	lds	r16, 0x0108
		INC   R16                                         ;increment ntask        (  1 clock ) 
 4fe:	03 95       	inc	r16
		STS   KerBase+OFF_NTSK   , R16                    ;store ntask            (  2 clocks) 
 500:	00 93 08 01 	sts	0x0108, r16
		
		;set stack pointer for current task (KerStack + KER_STK_SZ*(ker_ind+1) - 1) ->stack top   
		MOV   R16                , R22                    ;load task_id           (  1 clock ) 
 504:	06 2f       	mov	r16, r22
		INC   R16                                         ;increment task_id      (  1 clock ) 
 506:	03 95       	inc	r16
		LDI   R17                , KER_STK_SZ             ;load stack size        (  1 clock ) 
 508:	10 e8       	ldi	r17, 0x80	; 128
		MUL   R16                , R17                    ;multiply to get offset (  2 clocks) 
 50a:	01 9f       	mul	r16, r17
		MOV   R30                , R0                     ;load multiplied low    (  2 clocks) 
 50c:	e0 2d       	mov	r30, r0
		MOV   R31                , R1                     ;load multiplied high   (  2 clocks) 
 50e:	f1 2d       	mov	r31, r1
		SBIW  R30                , 0x01                   ;KER_STK_SZ*(task_id+1)-1  (  2 clocks) 
 510:	31 97       	sbiw	r30, 0x01	; 1
		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 512:	11 24       	eor	r1, r1
		LDI   R16                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
 514:	06 e4       	ldi	r16, 0x46	; 70
		LDI   R17                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
 516:	11 e0       	ldi	r17, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 518:	e0 0f       	add	r30, r16
		ADC   R31                , R17                    ;add high bytes+carry   (  1 clock ) 
 51a:	f1 1f       	adc	r31, r17
		OUT   IOSPL              , R30                    ;load SPL               (  1 clock ) 
 51c:	ed bf       	out	0x3d, r30	; 61
        OUT   IOSPH              , R31                    ;load SPH               (  1 clock ) 
 51e:	fe bf       	out	0x3e, r31	; 62
		
		;function argument directly returns word address
	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
 520:	8f 93       	push	r24
		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 522:	9f 93       	push	r25
		
		SEI                                               ;force enable interrupt (  1 clock ) 
 524:	78 94       	sei
		
		;push context to stack of this task
		KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 526:	0f 92       	push	r0
 528:	0f b6       	in	r0, 0x3f	; 63
 52a:	0f 92       	push	r0
 52c:	1f 92       	push	r1
 52e:	11 24       	eor	r1, r1
 530:	2f 92       	push	r2
 532:	3f 92       	push	r3
 534:	4f 92       	push	r4
 536:	5f 92       	push	r5
 538:	6f 92       	push	r6
 53a:	7f 92       	push	r7
 53c:	8f 92       	push	r8
 53e:	9f 92       	push	r9
 540:	af 92       	push	r10
 542:	bf 92       	push	r11
 544:	cf 92       	push	r12
 546:	df 92       	push	r13
 548:	ef 92       	push	r14
 54a:	ff 92       	push	r15
 54c:	0f 93       	push	r16
 54e:	1f 93       	push	r17
 550:	2f 93       	push	r18
 552:	3f 93       	push	r19
 554:	4f 93       	push	r20
 556:	5f 93       	push	r21
 558:	6f 93       	push	r22
 55a:	7f 93       	push	r23
 55c:	8f 93       	push	r24
 55e:	9f 93       	push	r25
 560:	af 93       	push	r26
 562:	bf 93       	push	r27
 564:	cf 93       	push	r28
 566:	df 93       	push	r29
 568:	ef 93       	push	r30
 56a:	ff 93       	push	r31
		
		;read stack pointer of current task (necessary when restore)
		IN    R16                , IOSPL                  ;read SPL               (  1 clock ) 
 56c:	0d b7       	in	r16, 0x3d	; 61
        IN    R17                , IOSPH                  ;read SPH               (  1 clock ) 
 56e:	1e b7       	in	r17, 0x3e	; 62
		
		;calculate the address where current task's SP will be stored and store SP
		MOV   R18                , R22                    ;fetch task_id from arg (  1 clock ) 
 570:	26 2f       	mov	r18, r22
		LSL   R18                                         ;left shift to multiply (  1 clock ) 
 572:	22 0f       	add	r18, r18
		LDI   R30                , lo8(KerSP)             ;fetch base pos low     (  1 clock ) 
 574:	ea e0       	ldi	r30, 0x0A	; 10
		LDI   R31                , hi8(KerSP)             ;fetch base pos high    (  1 clock ) 
 576:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R18                    ;add offset to array    (  1 clock ) 
 578:	e2 0f       	add	r30, r18
		LDI   R18                , 0x00                   ;set 0 to R16           (  1 clock ) 
 57a:	20 e0       	ldi	r18, 0x00	; 0
		ADC   R31                , R18                    ;add carry if any       (  1 clock ) 
 57c:	f2 1f       	adc	r31, r18
		ST    Z+                 , R16                    ;SPL at KerSp+offset    (  2 clocks) 
 57e:	01 93       	st	Z+, r16
		ST    z                  , R17                    ;SPH at KerSp+offset    (  2 clocks) 
 580:	10 83       	st	Z, r17
		
		;load Main SP, restore Z pointer
		OUT   IOSPL              , R2                     ;load SPL               (  1 clock ) 
 582:	2d be       	out	0x3d, r2	; 61
        OUT   IOSPH              , R3                     ;load SPH               (  1 clock ) 
 584:	3e be       	out	0x3e, r3	; 62
		MOV   R30                , R4                     ;push ZPL               (  2 clocks) 
 586:	e4 2d       	mov	r30, r4
		MOV   R31                , R5                     ;push ZPL               (  2 clocks) 
 588:	f5 2d       	mov	r31, r5
		
		
		RET                                               ;return from subroutine (  4 clocks) 
 58a:	08 95       	ret

0000058c <Kernel_Start_Tasks>:

;;===================================kernel task starting===================================;; 
Kernel_Start_Tasks:
		;start executing from task0
		;save ZP
		MOV   R4                 , R30                    ;save ZPL               (  2 clocks) 
 58c:	4e 2e       	mov	r4, r30
		MOV   R5                 , R31                    ;save ZPH               (  2 clocks) 
 58e:	5f 2e       	mov	r5, r31
		
		;load ZP with addr+offset
		LDI   R30                , lo8(KerSP)             ;fetch ZPL KerSP        (  1 clock ) 
 590:	ea e0       	ldi	r30, 0x0A	; 10
		LDI   R31                , hi8(KerSP)             ;fetch ZPH KerSP        (  1 clock ) 
 592:	f1 e0       	ldi	r31, 0x01	; 1
		
		;load last task's SP
		LD    R16                , Z+                     ;load val from Z, inc Z (  2 clocks) 
 594:	01 91       	ld	r16, Z+
		LD    R17                , Z                      ;load val from Z+1      (  2 clocks) 
 596:	10 81       	ld	r17, Z
		
		;set last task's SP
		OUT   IOSPL              , R16                    ;load SPL               (  1 clock ) 
 598:	0d bf       	out	0x3d, r16	; 61
        OUT   IOSPH              , R17                    ;load SPH               (  1 clock ) 
 59a:	1e bf       	out	0x3e, r17	; 62
       
        ;forcefully restore context, in ISR it will be stored automatically
		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 59c:	ff 91       	pop	r31
 59e:	ef 91       	pop	r30
 5a0:	df 91       	pop	r29
 5a2:	cf 91       	pop	r28
 5a4:	bf 91       	pop	r27
 5a6:	af 91       	pop	r26
 5a8:	9f 91       	pop	r25
 5aa:	8f 91       	pop	r24
 5ac:	7f 91       	pop	r23
 5ae:	6f 91       	pop	r22
 5b0:	5f 91       	pop	r21
 5b2:	4f 91       	pop	r20
 5b4:	3f 91       	pop	r19
 5b6:	2f 91       	pop	r18
 5b8:	1f 91       	pop	r17
 5ba:	0f 91       	pop	r16
 5bc:	ff 90       	pop	r15
 5be:	ef 90       	pop	r14
 5c0:	df 90       	pop	r13
 5c2:	cf 90       	pop	r12
 5c4:	bf 90       	pop	r11
 5c6:	af 90       	pop	r10
 5c8:	9f 90       	pop	r9
 5ca:	8f 90       	pop	r8
 5cc:	7f 90       	pop	r7
 5ce:	6f 90       	pop	r6
 5d0:	5f 90       	pop	r5
 5d2:	4f 90       	pop	r4
 5d4:	3f 90       	pop	r3
 5d6:	2f 90       	pop	r2
 5d8:	1f 90       	pop	r1
 5da:	0f 90       	pop	r0
 5dc:	0f be       	out	0x3f, r0	; 63
 5de:	0f 90       	pop	r0
		
		;restore ZP
		MOV   R30                , R4                     ;restore ZPL            (  2 clocks) 
 5e0:	e4 2d       	mov	r30, r4
		MOV   R31                , R5                     ;restore ZPL            (  2 clocks) 
 5e2:	f5 2d       	mov	r31, r5
		
		
		LDS   R16		         , KerBase+OFF_PRS        ;load prescaler         (  2 clocks) 
 5e4:	00 91 05 01 	lds	r16, 0x0105
		LDS   R17		         , KerBase+OFF_RLD        ;load reload val        (  2 clocks) 
 5e8:	10 91 06 01 	lds	r17, 0x0106
		STS   SRTCCR0B           , R16                    ;prescaler-> TCCR0B     (  2 clocks) 
 5ec:	00 93 45 00 	sts	0x0045, r16
		STS   SRTCNT0            , R17                    ;reload val-> TCNT0     (  2 clocks) 
 5f0:	10 93 46 00 	sts	0x0046, r17
		LDI   R16                , 0x01                   ;bit mask TOIE0         (  1 clock ) 
 5f4:	01 e0       	ldi	r16, 0x01	; 1
		STS   SRTIMSK0           , R16                    ;set to TIMSK0          (  2 clocks) 
 5f6:	00 93 6e 00 	sts	0x006E, r16
		
		;execute return to jump to task0, pushed while task init
		RET                                               ;return from subroutine (  4 clocks) 
 5fa:	08 95       	ret

000005fc <Kernel_Task_Idle>:


;;================================kernel task delay starting================================;; 
Kernel_Task_Idle:
    _IDLE_LOOP:
		RJMP  _IDLE_LOOP                                  ;return from subroutine (  4 clocks) 
 5fc:	ff cf       	rjmp	.-2      	; 0x5fc <Kernel_Task_Idle>

000005fe <Kernel_Task_Sleep>:


;;================================kernel task delay starting================================;; 
Kernel_Task_Sleep:
        ;save current context
        KER_CONTEXT_SAVE_YEILD                            ;save context           ( 68 clocks) 
 5fe:	0f 92       	push	r0
 600:	0f b6       	in	r0, 0x3f	; 63
 602:	f8 94       	cli
 604:	0f 92       	push	r0
 606:	1f 92       	push	r1
 608:	11 24       	eor	r1, r1
 60a:	2f 92       	push	r2
 60c:	3f 92       	push	r3
 60e:	4f 92       	push	r4
 610:	5f 92       	push	r5
 612:	6f 92       	push	r6
 614:	7f 92       	push	r7
 616:	8f 92       	push	r8
 618:	9f 92       	push	r9
 61a:	af 92       	push	r10
 61c:	bf 92       	push	r11
 61e:	cf 92       	push	r12
 620:	df 92       	push	r13
 622:	ef 92       	push	r14
 624:	ff 92       	push	r15
 626:	0f 93       	push	r16
 628:	1f 93       	push	r17
 62a:	2f 93       	push	r18
 62c:	3f 93       	push	r19
 62e:	4f 93       	push	r20
 630:	5f 93       	push	r21
 632:	6f 93       	push	r22
 634:	7f 93       	push	r23
 636:	8f 93       	push	r24
 638:	9f 93       	push	r25
 63a:	af 93       	push	r26
 63c:	bf 93       	push	r27
 63e:	cf 93       	push	r28
 640:	df 93       	push	r29
 642:	ef 93       	push	r30
 644:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks)
 646:	0d b7       	in	r16, 0x3d	; 61
 648:	1e b7       	in	r17, 0x3e	; 62
 64a:	20 91 07 01 	lds	r18, 0x0107
 64e:	22 0f       	add	r18, r18
 650:	ea e0       	ldi	r30, 0x0A	; 10
 652:	f1 e0       	ldi	r31, 0x01	; 1
 654:	e2 0f       	add	r30, r18
 656:	f1 1d       	adc	r31, r1
 658:	01 93       	st	Z+, r16
 65a:	10 83       	st	Z, r17
		
		;create next task wakeup time (args R25:R24)
		LDS   R16                , KerBase+OFF_TID        ;load tak_id            (  2 clocks) 
 65c:	00 91 07 01 	lds	r16, 0x0107
		MOV   R17                , R16                    ;copy                   (  1 clock ) 
 660:	10 2f       	mov	r17, r16
		LSL   R17                                         ;x2                     (  1 clock ) 
 662:	11 0f       	add	r17, r17
		LDI   R30                , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 664:	e2 e3       	ldi	r30, 0x32	; 50
		LDI   R31                , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 666:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R17                    ;add low bytes          (  1 clock ) 
 668:	e1 0f       	add	r30, r17
		LDI   R17                , 0x00                   ;load 0                 (  1 clock ) 
 66a:	10 e0       	ldi	r17, 0x00	; 0
		ADC   R31                , R17                    ;add high byte+carry    (  1 clock ) 
 66c:	f1 1f       	adc	r31, r17
		ST    Z+                 , R24                    ;save sleep time        (  2 clocks) 
 66e:	81 93       	st	Z+, r24
		ST    Z                  , R25                    ;save sleep time        (  2 clocks) 
 670:	90 83       	st	Z, r25
		
		;update task scheduler status as blocked
		LDI   R30                , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 672:	ee e1       	ldi	r30, 0x1E	; 30
		LDI   R31                , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 674:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 676:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 678:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 67a:	f0 1f       	adc	r31, r16
        LDI   R16                , TASK_BLOCK             ;block task until cnt=0 (  1 clock ) 
 67c:	00 e0       	ldi	r16, 0x00	; 0
		ST    Z                  , R16                    ;save block flag        (  2 clocks) 
 67e:	00 83       	st	Z, r16
		
		;run scheduler, load next task sp, restore context
		KER_RUN_SCHEDULER                                 ;run scheduler for tasks( 14 clocks) 
 680:	00 91 08 01 	lds	r16, 0x0108

00000684 <_CH_TASK_READY15>:
 684:	0a 95       	dec	r16
 686:	10 2f       	mov	r17, r16
 688:	ee e1       	ldi	r30, 0x1E	; 30
 68a:	f1 e0       	ldi	r31, 0x01	; 1
 68c:	e1 0f       	add	r30, r17
 68e:	f1 1d       	adc	r31, r1
 690:	10 81       	ld	r17, Z
 692:	11 30       	cpi	r17, 0x01	; 1
 694:	21 f0       	breq	.+8      	; 0x69e <_NEXT_TASK_FOUND15>

00000696 <_LOOP_CNT15>:
 696:	00 30       	cpi	r16, 0x00	; 0
 698:	a9 f7       	brne	.-22     	; 0x684 <_CH_TASK_READY15>
 69a:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <_IDLE_TASK15>

0000069e <_NEXT_TASK_FOUND15>:
 69e:	00 93 07 01 	sts	0x0107, r16
 6a2:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <_EXIT15>

000006a6 <_IDLE_TASK15>:
 6a6:	00 e0       	ldi	r16, 0x00	; 0
 6a8:	00 93 07 01 	sts	0x0107, r16

000006ac <_EXIT15>:
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 6ac:	00 91 07 01 	lds	r16, 0x0107
 6b0:	00 0f       	add	r16, r16
 6b2:	ea e0       	ldi	r30, 0x0A	; 10
 6b4:	f1 e0       	ldi	r31, 0x01	; 1
 6b6:	e0 0f       	add	r30, r16
 6b8:	f1 1d       	adc	r31, r1
 6ba:	01 91       	ld	r16, Z+
 6bc:	10 81       	ld	r17, Z
 6be:	0d bf       	out	0x3d, r16	; 61
 6c0:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE_YEILD                         ;restore context        ( 67 clocks) 
 6c2:	ff 91       	pop	r31
 6c4:	ef 91       	pop	r30
 6c6:	df 91       	pop	r29
 6c8:	cf 91       	pop	r28
 6ca:	bf 91       	pop	r27
 6cc:	af 91       	pop	r26
 6ce:	9f 91       	pop	r25
 6d0:	8f 91       	pop	r24
 6d2:	7f 91       	pop	r23
 6d4:	6f 91       	pop	r22
 6d6:	5f 91       	pop	r21
 6d8:	4f 91       	pop	r20
 6da:	3f 91       	pop	r19
 6dc:	2f 91       	pop	r18
 6de:	1f 91       	pop	r17
 6e0:	0f 91       	pop	r16
 6e2:	ff 90       	pop	r15
 6e4:	ef 90       	pop	r14
 6e6:	df 90       	pop	r13
 6e8:	cf 90       	pop	r12
 6ea:	bf 90       	pop	r11
 6ec:	af 90       	pop	r10
 6ee:	9f 90       	pop	r9
 6f0:	8f 90       	pop	r8
 6f2:	7f 90       	pop	r7
 6f4:	6f 90       	pop	r6
 6f6:	5f 90       	pop	r5
 6f8:	4f 90       	pop	r4
 6fa:	3f 90       	pop	r3
 6fc:	2f 90       	pop	r2
 6fe:	1f 90       	pop	r1
 700:	0f 90       	pop	r0
 702:	0f be       	out	0x3f, r0	; 63
 704:	0f 90       	pop	r0
 706:	78 94       	sei
		
		RET                                               ;return from subroutine (  4 clocks) 
 708:	08 95       	ret

0000070a <Kernel_Task_Sleep_Time_Get>:


;;================================kernel task delay starting================================;; 
Kernel_Task_Sleep_Time_Get:
		;create next task wakeup time
		LDS   R16                , KerBase+OFF_TID        ;load tak_id            (  2 clocks) 
 70a:	00 91 07 01 	lds	r16, 0x0107
		LSL   R16                                         ;x2                     (  1 clock ) 
 70e:	00 0f       	add	r16, r16
		LDI   R30                , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 710:	e2 e3       	ldi	r30, 0x32	; 50
		LDI   R31                , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 712:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 714:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 716:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 718:	f0 1f       	adc	r31, r16
		LD    R24                , Z+                     ;load sleep time        (  2 clocks) 
 71a:	81 91       	ld	r24, Z+
		LD    R25                , Z                      ;load sleep time        (  2 clocks) 
 71c:	90 81       	ld	r25, Z
		RET                                               ;return from subroutine (  4 clocks) 
 71e:	08 95       	ret

00000720 <Kernel_Task_Sts_Get>:


;;================================kernel task delay starting================================;; 
Kernel_Task_Sts_Get:
		;create next task wakeup time
		LDS   R16                , KerBase+OFF_TID        ;load tak_id            (  2 clocks) 
 720:	00 91 07 01 	lds	r16, 0x0107
		LDI   R30                , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 724:	ee e1       	ldi	r30, 0x1E	; 30
		LDI   R31                , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 726:	f1 e0       	ldi	r31, 0x01	; 1
		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 728:	e0 0f       	add	r30, r16
		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 72a:	00 e0       	ldi	r16, 0x00	; 0
		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 72c:	f0 1f       	adc	r31, r16
		LD    R24                , Z                      ;load sleep time        (  2 clocks) 
 72e:	80 81       	ld	r24, Z
		RET                                               ;return from subroutine (  4 clocks) 
 730:	08 95       	ret

00000732 <Kernel_Task_Yeild>:


;;================================kernel task yeild starting================================;; 
Kernel_Task_Yeild:
		;save context, save sp, run scheduler, load next task sp, restore context
		KER_CONTEXT_SAVE_YEILD                            ;save context           ( 68 clocks) 
 732:	0f 92       	push	r0
 734:	0f b6       	in	r0, 0x3f	; 63
 736:	f8 94       	cli
 738:	0f 92       	push	r0
 73a:	1f 92       	push	r1
 73c:	11 24       	eor	r1, r1
 73e:	2f 92       	push	r2
 740:	3f 92       	push	r3
 742:	4f 92       	push	r4
 744:	5f 92       	push	r5
 746:	6f 92       	push	r6
 748:	7f 92       	push	r7
 74a:	8f 92       	push	r8
 74c:	9f 92       	push	r9
 74e:	af 92       	push	r10
 750:	bf 92       	push	r11
 752:	cf 92       	push	r12
 754:	df 92       	push	r13
 756:	ef 92       	push	r14
 758:	ff 92       	push	r15
 75a:	0f 93       	push	r16
 75c:	1f 93       	push	r17
 75e:	2f 93       	push	r18
 760:	3f 93       	push	r19
 762:	4f 93       	push	r20
 764:	5f 93       	push	r21
 766:	6f 93       	push	r22
 768:	7f 93       	push	r23
 76a:	8f 93       	push	r24
 76c:	9f 93       	push	r25
 76e:	af 93       	push	r26
 770:	bf 93       	push	r27
 772:	cf 93       	push	r28
 774:	df 93       	push	r29
 776:	ef 93       	push	r30
 778:	ff 93       	push	r31
		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 77a:	0d b7       	in	r16, 0x3d	; 61
 77c:	1e b7       	in	r17, 0x3e	; 62
 77e:	20 91 07 01 	lds	r18, 0x0107
 782:	22 0f       	add	r18, r18
 784:	ea e0       	ldi	r30, 0x0A	; 10
 786:	f1 e0       	ldi	r31, 0x01	; 1
 788:	e2 0f       	add	r30, r18
 78a:	f1 1d       	adc	r31, r1
 78c:	01 93       	st	Z+, r16
 78e:	10 83       	st	Z, r17
		KER_RUN_SCHEDULER                                 ;run scheduler for tasks( 14 clocks) 
 790:	00 91 08 01 	lds	r16, 0x0108

00000794 <_CH_TASK_READY20>:
 794:	0a 95       	dec	r16
 796:	10 2f       	mov	r17, r16
 798:	ee e1       	ldi	r30, 0x1E	; 30
 79a:	f1 e0       	ldi	r31, 0x01	; 1
 79c:	e1 0f       	add	r30, r17
 79e:	f1 1d       	adc	r31, r1
 7a0:	10 81       	ld	r17, Z
 7a2:	11 30       	cpi	r17, 0x01	; 1
 7a4:	21 f0       	breq	.+8      	; 0x7ae <_NEXT_TASK_FOUND20>

000007a6 <_LOOP_CNT20>:
 7a6:	00 30       	cpi	r16, 0x00	; 0
 7a8:	a9 f7       	brne	.-22     	; 0x794 <_CH_TASK_READY20>
 7aa:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <_IDLE_TASK20>

000007ae <_NEXT_TASK_FOUND20>:
 7ae:	00 93 07 01 	sts	0x0107, r16
 7b2:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <_EXIT20>

000007b6 <_IDLE_TASK20>:
 7b6:	00 e0       	ldi	r16, 0x00	; 0
 7b8:	00 93 07 01 	sts	0x0107, r16

000007bc <_EXIT20>:
		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 7bc:	00 91 07 01 	lds	r16, 0x0107
 7c0:	00 0f       	add	r16, r16
 7c2:	ea e0       	ldi	r30, 0x0A	; 10
 7c4:	f1 e0       	ldi	r31, 0x01	; 1
 7c6:	e0 0f       	add	r30, r16
 7c8:	f1 1d       	adc	r31, r1
 7ca:	01 91       	ld	r16, Z+
 7cc:	10 81       	ld	r17, Z
 7ce:	0d bf       	out	0x3d, r16	; 61
 7d0:	1e bf       	out	0x3e, r17	; 62
		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 7d2:	ff 91       	pop	r31
 7d4:	ef 91       	pop	r30
 7d6:	df 91       	pop	r29
 7d8:	cf 91       	pop	r28
 7da:	bf 91       	pop	r27
 7dc:	af 91       	pop	r26
 7de:	9f 91       	pop	r25
 7e0:	8f 91       	pop	r24
 7e2:	7f 91       	pop	r23
 7e4:	6f 91       	pop	r22
 7e6:	5f 91       	pop	r21
 7e8:	4f 91       	pop	r20
 7ea:	3f 91       	pop	r19
 7ec:	2f 91       	pop	r18
 7ee:	1f 91       	pop	r17
 7f0:	0f 91       	pop	r16
 7f2:	ff 90       	pop	r15
 7f4:	ef 90       	pop	r14
 7f6:	df 90       	pop	r13
 7f8:	cf 90       	pop	r12
 7fa:	bf 90       	pop	r11
 7fc:	af 90       	pop	r10
 7fe:	9f 90       	pop	r9
 800:	8f 90       	pop	r8
 802:	7f 90       	pop	r7
 804:	6f 90       	pop	r6
 806:	5f 90       	pop	r5
 808:	4f 90       	pop	r4
 80a:	3f 90       	pop	r3
 80c:	2f 90       	pop	r2
 80e:	1f 90       	pop	r1
 810:	0f 90       	pop	r0
 812:	0f be       	out	0x3f, r0	; 63
 814:	0f 90       	pop	r0
		SEI                                               ;enable interrupt       (  1 clock ) 
 816:	78 94       	sei
		RET                                               ;return from subroutine (  4 clocks) 
 818:	08 95       	ret

0000081a <Debug_Init>:
.global  Debug_Print_TSK

;;========================================Debug Init========================================;;
Debug_Init:
        ;init registers for UART0
		LDI   R16                , (1<<1)                 ;mask U2x,                (1 clock )
 81a:	02 e0       	ldi	r16, 0x02	; 2
		STS   SRUCSR0A           , R16                    ;load val to UCSR0A,      (2 clocks)
 81c:	00 93 c0 00 	sts	0x00C0, r16
		MOV   R16                , R25                    ;clear R16,               (1 clock )
 820:	09 2f       	mov	r16, r25
		STS   SRUBRR0H           , R16                    ;load val to UBRR0H,      (2 clocks)
 822:	00 93 c5 00 	sts	0x00C5, r16
		MOV   R16                , R24                    ;set 0x03, 250k baud,     (1 clock )
 826:	08 2f       	mov	r16, r24
		STS   SRUBRR0L           , R16                    ;load val to UBRR0L,      (2 clocks)
 828:	00 93 c4 00 	sts	0x00C4, r16
		LDI   R16                , (1<<1)|(1<<2)          ;config 8 data bit        (1 clock )
 82c:	06 e0       	ldi	r16, 0x06	; 6
		STS   SRUCSR0C           , R16                    ;load val to UCSR0C,      (2 clocks)
 82e:	00 93 c2 00 	sts	0x00C2, r16
		LDI   R16                , (1<<3)                 ;enable tx,               (1 clock )
 832:	08 e0       	ldi	r16, 0x08	; 8
		STS   SRUCSR0B           , R16                    ;load val to UCSR0B,      (2 clocks)
 834:	00 93 c1 00 	sts	0x00C1, r16
        RET                                               ;return from subroutine,  (4 clocks) 
 838:	08 95       	ret

0000083a <Debug_Tx_Byte>:


;;=========================================Debug Tx=========================================;;
Debug_Tx_Byte:
		;write single byte to data register (Arg R24)
		STS   SRGPIOR0           , R16                    ;store R16 val,           (2 clocks)
 83a:	00 93 3e 00 	sts	0x003E, r16
		STS   SRUDR0             , R24                    ;load val to UDR0,        (2 clocks)
 83e:	80 93 c6 00 	sts	0x00C6, r24

00000842 <__UDRE0_CLEARED>:
		
    __UDRE0_CLEARED:
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,      (2 clocks)
 842:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x05                   ;skip if UDRE0 is set,    (2 clocks)
 846:	05 ff       	sbrs	r16, 5
		RJMP  __UDRE0_CLEARED                             ;wait until UDRE0 is set, (2 clocks)
 848:	fc cf       	rjmp	.-8      	; 0x842 <__UDRE0_CLEARED>
		LDS   R16                , SRGPIOR0               ;restore R16 val,         (2 clocks)
 84a:	00 91 3e 00 	lds	r16, 0x003E
        RET                                               ;return from subroutine,  (4 clocks) 
 84e:	08 95       	ret

00000850 <Debug_Tx_Byte_Conf>:


;;=========================================Debug Tx=========================================;;
Debug_Tx_Byte_Conf:
        ;write 1 byte, (Arg R24), Args retained
		STS   SRGPIOR0           , R16                    ;store R16 val,           (2 clocks)
 850:	00 93 3e 00 	sts	0x003E, r16
		STS   SRUDR0             , R24                    ;load val to UDR0,        (2 clocks)
 854:	80 93 c6 00 	sts	0x00C6, r24

00000858 <__TXC0_CLEARED>:
		
    __TXC0_CLEARED:
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,      (2 clocks)
 858:	00 91 c0 00 	lds	r16, 0x00C0
		SBRS  R16                , 0x06                   ;skip if TXC0 is set,     (2 clocks)
 85c:	06 ff       	sbrs	r16, 6
		RJMP  __TXC0_CLEARED                              ;wait until TXC0 is set,  (2 clocks)
 85e:	fc cf       	rjmp	.-8      	; 0x858 <__TXC0_CLEARED>
		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,      (2 clocks)
 860:	00 91 c0 00 	lds	r16, 0x00C0
		ORI   R16                , (1<<6)                 ;mask bit 6,              (1 clock )
 864:	00 64       	ori	r16, 0x40	; 64
		STS   SRUCSR0A           , R16                    ;load val to UCSR0B,      (2 clocks)
 866:	00 93 c0 00 	sts	0x00C0, r16
		LDS   R16                , SRGPIOR0               ;restore R16 val,         (2 clocks)
 86a:	00 91 3e 00 	lds	r16, 0x003E
        RET                                               ;return from subroutine,  (4 clocks) 
 86e:	08 95       	ret

00000870 <Debug_Tx_Word_Conf>:

;;======================================Debug Tx Word=======================================;;
Debug_Tx_Word_Conf:
        ;write 2 bytes, (Arg R24, R25), Args retained
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 870:	0e 94 28 04 	call	0x850	; 0x850 <Debug_Tx_Byte_Conf>
		STS   SRGPIOR0           , R24                    ;store R24 val,           (2 clocks)
 874:	80 93 3e 00 	sts	0x003E, r24
		MOV   R24                , R25                    ;copy R25 to R24          (1 clock )
 878:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 87a:	0e 94 28 04 	call	0x850	; 0x850 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR0               ;restore R24 val,         (2 clocks)
 87e:	80 91 3e 00 	lds	r24, 0x003E
        RET                                               ;return from subroutine,  (4 clocks) 
 882:	08 95       	ret

00000884 <Debug_Tx_DWord_Conf>:

;;=====================================Debug Tx DWord=======================================;;
Debug_Tx_DWord_Conf:
        ;write 4 bytes, (Arg R22-R25), Args retained
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks)
 884:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R22                    ;copy R22 to R24          (1 clock )
 888:	86 2f       	mov	r24, r22
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 88a:	0e 94 28 04 	call	0x850	; 0x850 <Debug_Tx_Byte_Conf>
		MOV   R24                , R23                    ;copy R23 to R24          (1 clock )
 88e:	87 2f       	mov	r24, r23
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 890:	0e 94 28 04 	call	0x850	; 0x850 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24              (2 clocks)
 894:	80 91 4a 00 	lds	r24, 0x004A
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 898:	0e 94 28 04 	call	0x850	; 0x850 <Debug_Tx_Byte_Conf>
		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks)
 89c:	80 93 4a 00 	sts	0x004A, r24
		MOV   R24                , R25                    ;copy R22 to R24          (1 clock )
 8a0:	89 2f       	mov	r24, r25
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 8a2:	0e 94 28 04 	call	0x850	; 0x850 <Debug_Tx_Byte_Conf>
		LDS   R24                , SRGPIOR1               ;restore R24 val,         (2 clocks)
 8a6:	80 91 4a 00 	lds	r24, 0x004A
        RET                                               ;return from subroutine,  (4 clocks) 
 8aa:	08 95       	ret

000008ac <Debug_Tx_From_RAM>:


;;===================================Debug Tx From RAM======================================;;
Debug_Tx_From_RAM:
        ;print data from RAM address (Arg R24-R25)
		MOV   R16                , R30                    ;copy R30 to R16          (1 clock )
 8ac:	0e 2f       	mov	r16, r30
		MOV   R17                , R31                    ;copy R31 to R17          (1 clock )
 8ae:	1f 2f       	mov	r17, r31
		MOV   R18                , R24                    ;copy R24 to R18          (1 clock )
 8b0:	28 2f       	mov	r18, r24
		MOV   R30                , R24                    ;copy R22 to R24          (1 clock )
 8b2:	e8 2f       	mov	r30, r24
		MOV   R31                , R25                    ;copy R22 to R24          (1 clock )
 8b4:	f9 2f       	mov	r31, r25
		LD    R24                , Z                      ;load val to R24          (2 clocks)
 8b6:	80 81       	ld	r24, Z
		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 8b8:	0e 94 28 04 	call	0x850	; 0x850 <Debug_Tx_Byte_Conf>
		MOV   R30                , R16                    ;copy R16 to R30          (1 clock )
 8bc:	e0 2f       	mov	r30, r16
		MOV   R31                , R17                    ;copy R17 to R31          (1 clock )
 8be:	f1 2f       	mov	r31, r17
		MOV   R24                , R18                    ;copy R18 to R24          (1 clock )
 8c0:	82 2f       	mov	r24, r18
        RET                                               ;return from subroutine,  (4 clocks) 
 8c2:	08 95       	ret

000008c4 <Debug_Tx_RAM_Area>:

;;===================================Debug Tx RAM Area======================================;;
Debug_Tx_RAM_Area:
        ;print data from RAM address (arguments R24:R25, R22)
	__DUMP_BYTES:
	    CALL  Debug_Tx_From_RAM                           ;send via uart from ram
 8c4:	0e 94 56 04 	call	0x8ac	; 0x8ac <Debug_Tx_From_RAM>
		SUBI  R24                , 0x01                   ;decrement from LSByte
 8c8:	81 50       	subi	r24, 0x01	; 1
        SBCI  R25                , 0x00                   ;decrement if carry
 8ca:	90 40       	sbci	r25, 0x00	; 0
		SUBI  R22                , 0x01                   ;decrement
 8cc:	61 50       	subi	r22, 0x01	; 1
		BRNE  __DUMP_BYTES
 8ce:	d1 f7       	brne	.-12     	; 0x8c4 <Debug_Tx_RAM_Area>
        RET                                               ;return from subroutine,  (4 clocks) 
 8d0:	08 95       	ret

000008d2 <Debug_Print_TSK>:


;;=====================================Debug Dummy Print====================================;;
Debug_Print_TSK:
        ;write 4 bytes, (Arg R22-R25), Args retained
		MOV   R16                , R24                    ;copy R24 to R16          (1 clock )
 8d2:	08 2f       	mov	r16, r24
		;LDI   R17                , 48                     ;load 48 to reg           (1 clock )
		;ADD   R16                , R17                    ;to convert val to char   (1 clock )
		LDI   R22                , 'T'                    ;copy char                (1 clock )
 8d4:	64 e5       	ldi	r22, 0x54	; 84
		LDI   R23                , 'S'                    ;copy char                (1 clock )
 8d6:	73 e5       	ldi	r23, 0x53	; 83
		LDI   R24                , 'k'                    ;copy char                (1 clock )
 8d8:	8b e6       	ldi	r24, 0x6B	; 107
		MOV   R25                , R16                    ;copy char                (1 clock )
 8da:	90 2f       	mov	r25, r16
		CALL  Debug_Tx_DWord_Conf                         ;send via uart
 8dc:	0e 94 42 04 	call	0x884	; 0x884 <Debug_Tx_DWord_Conf>
		LDI   R24                , '\r'                   ;copy char                (1 clock )
 8e0:	8d e0       	ldi	r24, 0x0D	; 13
		LDI   R25                , '\n'                   ;copy char                (1 clock )
 8e2:	9a e0       	ldi	r25, 0x0A	; 10
		CALL  Debug_Tx_Word_Conf                          ;send via uart
 8e4:	0e 94 38 04 	call	0x870	; 0x870 <Debug_Tx_Word_Conf>
        RET                                               ;return from subroutine,  (4 clocks) 
 8e8:	08 95       	ret

000008ea <_exit>:
 8ea:	f8 94       	cli

000008ec <__stop_program>:
 8ec:	ff cf       	rjmp	.-2      	; 0x8ec <__stop_program>
