   1               	# 1 "kernel.S"
   1               	
   0               	
   0               	
   2               	#include <avr/io.h>
   1               	/* Copyright (c) 2002,2003,2005,2006,2007 Marek Michalkiewicz, Joerg Wunsch
   2               	   Copyright (c) 2007 Eric B. Weddington
   3               	   All rights reserved.
   4               	
   5               	   Redistribution and use in source and binary forms, with or without
   6               	   modification, are permitted provided that the following conditions are met:
   7               	
   8               	   * Redistributions of source code must retain the above copyright
   9               	     notice, this list of conditions and the following disclaimer.
  10               	
  11               	   * Redistributions in binary form must reproduce the above copyright
  12               	     notice, this list of conditions and the following disclaimer in
  13               	     the documentation and/or other materials provided with the
  14               	     distribution.
  15               	
  16               	   * Neither the name of the copyright holders nor the names of
  17               	     contributors may be used to endorse or promote products derived
  18               	     from this software without specific prior written permission.
  19               	
  20               	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21               	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22               	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23               	  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24               	  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25               	  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26               	  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27               	  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28               	  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29               	  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30               	  POSSIBILITY OF SUCH DAMAGE. */
  31               	
  32               	/* $Id: io.h,v 1.52.2.28 2009/12/20 17:02:53 arcanum Exp $ */
  33               	
  34               	/** \file */
  35               	/** \defgroup avr_io <avr/io.h>: AVR device-specific IO definitions
  36               	    \code #include <avr/io.h> \endcode
  37               	
  38               	    This header file includes the apropriate IO definitions for the
  39               	    device that has been specified by the <tt>-mmcu=</tt> compiler
  40               	    command-line switch.  This is done by diverting to the appropriate
  41               	    file <tt>&lt;avr/io</tt><em>XXXX</em><tt>.h&gt;</tt> which should
  42               	    never be included directly.  Some register names common to all
  43               	    AVR devices are defined directly within <tt>&lt;avr/common.h&gt;</tt>,
  44               	    which is included in <tt>&lt;avr/io.h&gt;</tt>,
  45               	    but most of the details come from the respective include file.
  46               	
  47               	    Note that this file always includes the following files:
  48               	    \code 
  49               	    #include <avr/sfr_defs.h>
  50               	    #include <avr/portpins.h>
  51               	    #include <avr/common.h>
  52               	    #include <avr/version.h>
  53               	    \endcode
  54               	    See \ref avr_sfr for more details about that header file.
  55               	
  56               	    Included are definitions of the IO register set and their
  57               	    respective bit values as specified in the Atmel documentation.
  58               	    Note that inconsistencies in naming conventions,
  59               	    so even identical functions sometimes get different names on
  60               	    different devices.
  61               	
  62               	    Also included are the specific names useable for interrupt
  63               	    function definitions as documented
  64               	    \ref avr_signames "here".
  65               	
  66               	    Finally, the following macros are defined:
  67               	
  68               	    - \b RAMEND
  69               	    <br>
  70               	    The last on-chip RAM address.
  71               	    <br>
  72               	    - \b XRAMEND
  73               	    <br>
  74               	    The last possible RAM location that is addressable. This is equal to 
  75               	    RAMEND for devices that do not allow for external RAM. For devices 
  76               	    that allow external RAM, this will be larger than RAMEND.
  77               	    <br>
  78               	    - \b E2END
  79               	    <br>
  80               	    The last EEPROM address.
  81               	    <br>
  82               	    - \b FLASHEND
  83               	    <br>
  84               	    The last byte address in the Flash program space.
  85               	    <br>
  86               	    - \b SPM_PAGESIZE
  87               	    <br>
  88               	    For devices with bootloader support, the flash pagesize
  89               	    (in bytes) to be used for the \c SPM instruction. 
  90               	    - \b E2PAGESIZE
  91               	    <br>
  92               	    The size of the EEPROM page.
  93               	    
  94               	*/
  95               	
  96               	#ifndef _AVR_IO_H_
  97               	#define _AVR_IO_H_
  98               	
  99               	#include <avr/sfr_defs.h>
   1               	/* Copyright (c) 2002, Marek Michalkiewicz <marekm@amelek.gda.pl>
 100               	
 101               	#if defined (__AVR_AT94K__)
 102               	#  include <avr/ioat94k.h>
 103               	#elif defined (__AVR_AT43USB320__)
 104               	#  include <avr/io43u32x.h>
 105               	#elif defined (__AVR_AT43USB355__)
 106               	#  include <avr/io43u35x.h>
 107               	#elif defined (__AVR_AT76C711__)
 108               	#  include <avr/io76c711.h>
 109               	#elif defined (__AVR_AT86RF401__)
 110               	#  include <avr/io86r401.h>
 111               	#elif defined (__AVR_AT90PWM1__)
 112               	#  include <avr/io90pwm1.h>
 113               	#elif defined (__AVR_AT90PWM2__)
 114               	#  include <avr/io90pwmx.h>
 115               	#elif defined (__AVR_AT90PWM2B__)
 116               	#  include <avr/io90pwm2b.h>
 117               	#elif defined (__AVR_AT90PWM3__)
 118               	#  include <avr/io90pwmx.h>
 119               	#elif defined (__AVR_AT90PWM3B__)
 120               	#  include <avr/io90pwm3b.h>
 121               	#elif defined (__AVR_AT90PWM216__)
 122               	#  include <avr/io90pwm216.h>
 123               	#elif defined (__AVR_AT90PWM316__)
 124               	#  include <avr/io90pwm316.h>
 125               	#elif defined (__AVR_AT90PWM81__)
 126               	#  include <avr/io90pwm81.h>
 127               	#elif defined (__AVR_ATmega8U2__)
 128               	#  include <avr/iom8u2.h>
 129               	#elif defined (__AVR_ATmega16M1__)
 130               	#  include <avr/iom16m1.h>
 131               	#elif defined (__AVR_ATmega16U2__)
 132               	#  include <avr/iom16u2.h>
 133               	#elif defined (__AVR_ATmega16U4__)
 134               	#  include <avr/iom16u4.h>
 135               	#elif defined (__AVR_ATmega32C1__)
 136               	#  include <avr/iom32c1.h>
 137               	#elif defined (__AVR_ATmega32M1__)
 138               	#  include <avr/iom32m1.h>
 139               	#elif defined (__AVR_ATmega32U2__)
 140               	#  include <avr/iom32u2.h>
 141               	#elif defined (__AVR_ATmega32U4__)
 142               	#  include <avr/iom32u4.h>
 143               	#elif defined (__AVR_ATmega32U6__)
 144               	#  include <avr/iom32u6.h>
 145               	#elif defined (__AVR_ATmega64C1__)
 146               	#  include <avr/iom64c1.h>
 147               	#elif defined (__AVR_ATmega64M1__)
 148               	#  include <avr/iom64m1.h>
 149               	#elif defined (__AVR_ATmega128__)
 150               	#  include <avr/iom128.h>
 151               	#elif defined (__AVR_ATmega1280__)
 152               	#  include <avr/iom1280.h>
 153               	#elif defined (__AVR_ATmega1281__)
 154               	#  include <avr/iom1281.h>
 155               	#elif defined (__AVR_ATmega1284P__)
 156               	#  include <avr/iom1284p.h>
 157               	#elif defined (__AVR_ATmega128RFA1__)
 158               	#  include <avr/iom128rfa1.h>
 159               	#elif defined (__AVR_ATmega2560__)
 160               	#  include <avr/iom2560.h>
 161               	#elif defined (__AVR_ATmega2561__)
 162               	#  include <avr/iom2561.h>
 163               	#elif defined (__AVR_AT90CAN32__)
 164               	#  include <avr/iocan32.h>
 165               	#elif defined (__AVR_AT90CAN64__)
 166               	#  include <avr/iocan64.h>
 167               	#elif defined (__AVR_AT90CAN128__)
 168               	#  include <avr/iocan128.h>
 169               	#elif defined (__AVR_AT90USB82__)
 170               	#  include <avr/iousb82.h>
 171               	#elif defined (__AVR_AT90USB162__)
 172               	#  include <avr/iousb162.h>
 173               	#elif defined (__AVR_AT90USB646__)
 174               	#  include <avr/iousb646.h>
 175               	#elif defined (__AVR_AT90USB647__)
 176               	#  include <avr/iousb647.h>
 177               	#elif defined (__AVR_AT90USB1286__)
 178               	#  include <avr/iousb1286.h>
 179               	#elif defined (__AVR_AT90USB1287__)
 180               	#  include <avr/iousb1287.h>
 181               	#elif defined (__AVR_ATmega64__)
 182               	#  include <avr/iom64.h>
 183               	#elif defined (__AVR_ATmega640__)
 184               	#  include <avr/iom640.h>
 185               	#elif defined (__AVR_ATmega644__) || defined (__AVR_ATmega644A__)
 186               	#  include <avr/iom644.h>
 187               	#elif defined (__AVR_ATmega644P__)
 188               	#  include <avr/iom644p.h>
 189               	#elif defined (__AVR_ATmega644PA__)
 190               	#  include <avr/iom644pa.h>
 191               	#elif defined (__AVR_ATmega645__) || defined (__AVR_ATmega645A__) || defined (__AVR_ATmega645P__)
 192               	#  include <avr/iom645.h>
 193               	#elif defined (__AVR_ATmega6450__) || defined (__AVR_ATmega6450A__) || defined (__AVR_ATmega6450P__
 194               	#  include <avr/iom6450.h>
 195               	#elif defined (__AVR_ATmega649__) || defined (__AVR_ATmega649A__)
 196               	#  include <avr/iom649.h>
 197               	#elif defined (__AVR_ATmega6490__) || defined (__AVR_ATmega6490A__) || defined (__AVR_ATmega6490P__
 198               	#  include <avr/iom6490.h>
 199               	#elif defined (__AVR_ATmega649P__)
 200               	#  include <avr/iom649p.h>
 201               	#elif defined (__AVR_ATmega64HVE__)
 202               	#  include <avr/iom64hve.h>
 203               	#elif defined (__AVR_ATmega103__)
 204               	#  include <avr/iom103.h>
 205               	#elif defined (__AVR_ATmega32__)
 206               	#  include <avr/iom32.h>
 207               	#elif defined (__AVR_ATmega323__)
 208               	#  include <avr/iom323.h>
 209               	#elif defined (__AVR_ATmega324P__) || defined (__AVR_ATmega324A__)
 210               	#  include <avr/iom324.h>
 211               	#elif defined (__AVR_ATmega324PA__)
 212               	#  include <avr/iom324pa.h>
 213               	#elif defined (__AVR_ATmega325__)
 214               	#  include <avr/iom325.h>
 215               	#elif defined (__AVR_ATmega325P__)
 216               	#  include <avr/iom325.h>
 217               	#elif defined (__AVR_ATmega3250__)
 218               	#  include <avr/iom3250.h>
 219               	#elif defined (__AVR_ATmega3250P__)
 220               	#  include <avr/iom3250.h>
 221               	#elif defined (__AVR_ATmega328P__) || defined (__AVR_ATmega328__)
 222               	#  include <avr/iom328p.h>
   1               	/* Copyright (c) 2007 Atmel Corporation
 223               	#elif defined (__AVR_ATmega329__)
 224               	#  include <avr/iom329.h>
 225               	#elif defined (__AVR_ATmega329P__) || defined (__AVR_ATmega329PA__)
 226               	#  include <avr/iom329.h>
 227               	#elif defined (__AVR_ATmega3290__)
 228               	#  include <avr/iom3290.h>
 229               	#elif defined (__AVR_ATmega3290P__)
 230               	#  include <avr/iom3290.h>
 231               	#elif defined (__AVR_ATmega32HVB__)
 232               	#  include <avr/iom32hvb.h>
 233               	#elif defined (__AVR_ATmega406__)
 234               	#  include <avr/iom406.h>
 235               	#elif defined (__AVR_ATmega16__)
 236               	#  include <avr/iom16.h>
 237               	#elif defined (__AVR_ATmega16A__)
 238               	#  include <avr/iom16a.h>
 239               	#elif defined (__AVR_ATmega161__)
 240               	#  include <avr/iom161.h>
 241               	#elif defined (__AVR_ATmega162__)
 242               	#  include <avr/iom162.h>
 243               	#elif defined (__AVR_ATmega163__)
 244               	#  include <avr/iom163.h>
 245               	#elif defined (__AVR_ATmega164P__) || defined (__AVR_ATmega164A__)
 246               	#  include <avr/iom164.h>
 247               	#elif defined (__AVR_ATmega165__) || defined (__AVR_ATmega165A__)
 248               	#  include <avr/iom165.h>
 249               	#elif defined (__AVR_ATmega165P__)
 250               	#  include <avr/iom165p.h>
 251               	#elif defined (__AVR_ATmega168__) || defined (__AVR_ATmega168A__)
 252               	#  include <avr/iom168.h>
 253               	#elif defined (__AVR_ATmega168P__)
 254               	#  include <avr/iom168p.h>
 255               	#elif defined (__AVR_ATmega169__) || defined (__AVR_ATmega169A__)
 256               	#  include <avr/iom169.h>
 257               	#elif defined (__AVR_ATmega169P__)
 258               	#  include <avr/iom169p.h>
 259               	#elif defined (__AVR_ATmega169PA__)
 260               	#  include <avr/iom169pa.h>
 261               	#elif defined (__AVR_ATmega8HVA__)
 262               	#  include <avr/iom8hva.h>
 263               	#elif defined (__AVR_ATmega16HVA__)
 264               	#  include <avr/iom16hva.h>
 265               	#elif defined (__AVR_ATmega16HVA2__)
 266               	#  include <avr/iom16hva2.h>
 267               	#elif defined (__AVR_ATmega16HVB__)
 268               	#  include <avr/iom16hvb.h>
 269               	#elif defined (__AVR_ATmega8__)
 270               	#  include <avr/iom8.h>
 271               	#elif defined (__AVR_ATmega48__) || defined (__AVR_ATmega48A__)
 272               	#  include <avr/iom48.h>
 273               	#elif defined (__AVR_ATmega48P__)
 274               	#  include <avr/iom48p.h>
 275               	#elif defined (__AVR_ATmega88__) || defined (__AVR_ATmega88A__)
 276               	#  include <avr/iom88.h>
 277               	#elif defined (__AVR_ATmega88P__)
 278               	#  include <avr/iom88p.h>
 279               	#elif defined (__AVR_ATmega88PA__)
 280               	#  include <avr/iom88pa.h>
 281               	#elif defined (__AVR_ATmega8515__)
 282               	#  include <avr/iom8515.h>
 283               	#elif defined (__AVR_ATmega8535__)
 284               	#  include <avr/iom8535.h>
 285               	#elif defined (__AVR_AT90S8535__)
 286               	#  include <avr/io8535.h>
 287               	#elif defined (__AVR_AT90C8534__)
 288               	#  include <avr/io8534.h>
 289               	#elif defined (__AVR_AT90S8515__)
 290               	#  include <avr/io8515.h>
 291               	#elif defined (__AVR_AT90S4434__)
 292               	#  include <avr/io4434.h>
 293               	#elif defined (__AVR_AT90S4433__)
 294               	#  include <avr/io4433.h>
 295               	#elif defined (__AVR_AT90S4414__)
 296               	#  include <avr/io4414.h>
 297               	#elif defined (__AVR_ATtiny22__)
 298               	#  include <avr/iotn22.h>
 299               	#elif defined (__AVR_ATtiny26__)
 300               	#  include <avr/iotn26.h>
 301               	#elif defined (__AVR_AT90S2343__)
 302               	#  include <avr/io2343.h>
 303               	#elif defined (__AVR_AT90S2333__)
 304               	#  include <avr/io2333.h>
 305               	#elif defined (__AVR_AT90S2323__)
 306               	#  include <avr/io2323.h>
 307               	#elif defined (__AVR_AT90S2313__)
 308               	#  include <avr/io2313.h>
 309               	#elif defined (__AVR_ATtiny2313__)
 310               	#  include <avr/iotn2313.h>
 311               	#elif defined (__AVR_ATtiny2313A__)
 312               	#  include <avr/iotn2313a.h>
 313               	#elif defined (__AVR_ATtiny13__)
 314               	#  include <avr/iotn13.h>
 315               	#elif defined (__AVR_ATtiny13A__)
 316               	#  include <avr/iotn13a.h>
 317               	#elif defined (__AVR_ATtiny25__)
 318               	#  include <avr/iotn25.h>
 319               	#elif defined (__AVR_ATtiny4313__)
 320               	#  include <avr/iotn4313.h>
 321               	#elif defined (__AVR_ATtiny45__)
 322               	#  include <avr/iotn45.h>
 323               	#elif defined (__AVR_ATtiny85__)
 324               	#  include <avr/iotn85.h>
 325               	#elif defined (__AVR_ATtiny24__)
 326               	#  include <avr/iotn24.h>
 327               	#elif defined (__AVR_ATtiny24A__)
 328               	#  include <avr/iotn24a.h>
 329               	#elif defined (__AVR_ATtiny44__)
 330               	#  include <avr/iotn44.h>
 331               	#elif defined (__AVR_ATtiny44A__)
 332               	#  include <avr/iotn44a.h>
 333               	#elif defined (__AVR_ATtiny84__)
 334               	#  include <avr/iotn84.h>
 335               	#elif defined (__AVR_ATtiny261__)
 336               	#  include <avr/iotn261.h>
 337               	#elif defined (__AVR_ATtiny261A__)
 338               	#  include <avr/iotn261a.h>
 339               	#elif defined (__AVR_ATtiny461__)
 340               	#  include <avr/iotn461.h>
 341               	#elif defined (__AVR_ATtiny461A__)
 342               	#  include <avr/iotn461a.h>
 343               	#elif defined (__AVR_ATtiny861__)
 344               	#  include <avr/iotn861.h>
 345               	#elif defined (__AVR_ATtiny861A__)
 346               	#  include <avr/iotn861a.h>
 347               	#elif defined (__AVR_ATtiny43U__)
 348               	#  include <avr/iotn43u.h>
 349               	#elif defined (__AVR_ATtiny48__)
 350               	#  include <avr/iotn48.h>
 351               	#elif defined (__AVR_ATtiny88__)
 352               	#  include <avr/iotn88.h>
 353               	#elif defined (__AVR_ATtiny87__)
 354               	#  include <avr/iotn87.h>
 355               	#elif defined (__AVR_ATtiny167__)
 356               	#  include <avr/iotn167.h>
 357               	#elif defined (__AVR_AT90SCR100__)
 358               	#  include <avr/io90scr100.h>
 359               	#elif defined (__AVR_ATxmega16A4__)
 360               	#  include <avr/iox16a4.h>
 361               	#elif defined (__AVR_ATxmega16D4__)
 362               	#  include <avr/iox16d4.h>
 363               	#elif defined (__AVR_ATxmega32A4__)
 364               	#  include <avr/iox32a4.h>
 365               	#elif defined (__AVR_ATxmega32D4__)
 366               	#  include <avr/iox32d4.h>
 367               	#elif defined (__AVR_ATxmega64A1__)
 368               	#  include <avr/iox64a1.h>
 369               	#elif defined (__AVR_ATxmega64A3__)
 370               	#  include <avr/iox64a3.h>
 371               	#elif defined (__AVR_ATxmega64D3__)
 372               	#  include <avr/iox64d3.h>
 373               	#elif defined (__AVR_ATxmega128A1__)
 374               	#  include <avr/iox128a1.h>
 375               	#elif defined (__AVR_ATxmega128A3__)
 376               	#  include <avr/iox128a3.h>
 377               	#elif defined (__AVR_ATxmega128D3__)
 378               	#  include <avr/iox128d3.h>
 379               	#elif defined (__AVR_ATxmega192A3__)
 380               	#  include <avr/iox192a3.h>
 381               	#elif defined (__AVR_ATxmega192D3__)
 382               	#  include <avr/iox192d3.h>
 383               	#elif defined (__AVR_ATxmega256A3__)
 384               	#  include <avr/iox256a3.h>
 385               	#elif defined (__AVR_ATxmega256A3B__)
 386               	#  include <avr/iox256a3b.h>
 387               	#elif defined (__AVR_ATxmega256D3__)
 388               	#  include <avr/iox256d3.h>
 389               	#elif defined (__AVR_ATA6289__)
 390               	#  include <avr/ioa6289.h>
 391               	/* avr1: the following only supported for assembler programs */
 392               	#elif defined (__AVR_ATtiny28__)
 393               	#  include <avr/iotn28.h>
 394               	#elif defined (__AVR_AT90S1200__)
 395               	#  include <avr/io1200.h>
 396               	#elif defined (__AVR_ATtiny15__)
 397               	#  include <avr/iotn15.h>
 398               	#elif defined (__AVR_ATtiny12__)
 399               	#  include <avr/iotn12.h>
 400               	#elif defined (__AVR_ATtiny11__)
 401               	#  include <avr/iotn11.h>
 402               	#else
 403               	#  if !defined(__COMPILING_AVR_LIBC__)
 404               	#    warning "device type not defined"
 405               	#  endif
 406               	#endif
 407               	
 408               	#include <avr/portpins.h>
   1               	/* Copyright (c) 2003  Theodore A. Roth
 409               	
 410               	#include <avr/common.h>
   1               	/* Copyright (c) 2007 Eric B. Weddington
 411               	
 412               	#include <avr/version.h>
   1               	/* Copyright (c) 2005, Joerg Wunsch                               -*- c -*-
 413               	
 414               	/* Include fuse.h after individual IO header files. */
 415               	#include <avr/fuse.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 416               	
 417               	/* Include lock.h after individual IO header files. */
 418               	#include <avr/lock.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 419               	
   3               	#include <avr/interrupt.h>
   1               	/* Copyright (c) 2002,2005,2007 Marek Michalkiewicz
   4               	#include "kernel.h"
   1               	
   5               	#include "debug.h"
   1               	
   6               	
   7               	
   8               	
   9               	
  10               	
  11               	;;============================define user address or macro starting=========================;; 
  12               	.equ     KER_TR ,         1000    ;TickRate in Hz, only defined, not calculated
  13               	.equ     KER_PRS,         0x03    ;For prescaler 64, manually select
  14               	.equ     KER_RLD,         0x82    ;KER_RLD = 0xFF-(F_CPU/KER_PRS/KER_TR), check overflow
  15               	.equ     KER_STK_SZ,      128     ;stack size in bytes for each task
  16               	.equ     KER_MX_NTSK,     10      ;max number of tasks
  17               	;;==============================define user address or macro end============================;; 
  18               	
  19               	
  20               	
  21               	
  22               	
  23               	;;===============================define data offsets starting===============================;; 
  24               	.equ     OFB_TICK0,       0x00    ;tick count byte0 offset from KerBase
  25               	.equ     OFB_TICK1,       0x01    ;tick count byte1 offset from KerBase
  26               	.equ     OFB_TICK2,       0x02    ;tick count byte2 offset from KerBase
  27               	.equ     OFB_TICK3,       0x03    ;tick count byte3 offset from KerBase
  28               	.equ     OFB_TICK4,       0x04    ;tick count byte4 offset from KerBase
  29               	.equ     OFB_PRS  ,       0x05    ;counter prescaler offset from KerBase
  30               	.equ     OFB_RLD  ,       0x06    ;counter reload offset from KerBase
  31               	.equ     OFB_TID  ,       0x07    ;task id offset from KerBase
  32               	.equ     OFB_NTSK ,       0x08    ;ntask offset from KerBase
  33               	.equ     OFB_PTID ,       0x09    ;priority task_id offset from KerBase
  34               	.equ     OFM_MSPI ,       0x00    ;main stack pointer index field offset from MSPZP
  35               	.equ     OFM_MSPS ,       0x02    ;main stack pointer starting offset from MSPZP
  36               	;;==================================define data offsets end=================================;; 
  37               	
  38               	
  39               	
  40               	
  41               	
  42               	;;===============================define system macro starting===============================;; 
  43               	.equ     TASK_READY,      0x01    ;bit 0 in system status reg
  44               	.equ     TASK_BLOCK,      0x00    ;bit 0 in system status reg
  45               	;;==================================define system macro end=================================;; 
  46               	
  47               	
  48               	
  49               	
  50               	
  51               	;;===========================define hardware reg address starting===========================;; 
  52               	.equ     SRSREG  ,        0x5F    ;manually defined SREG in SRAM
  53               	.equ     SRSPH   ,        0x5E    ;manually defined SPH in SRAM
  54               	.equ     SRSPL   ,        0x5D    ;manually defined SPL in SRAM
  55               	
  56               	.equ     SRTIMSK0,        0x6E    ;manually defined TIMSK0 in SRAM
  57               	.equ     SROCR0B ,        0x48    ;manually defined OCR0B in SRAM
  58               	.equ     SROCR0A ,        0x47    ;manually defined OCR0A in SRAM
  59               	.equ     SRTCNT0 ,        0x46    ;manually defined TCNT0 in SRAM
  60               	.equ     SRTCCR0B,        0x45    ;manually defined TCCR0B in SRAM
  61               	.equ     SRTCCR0A,        0x44    ;manually defined TCCR0A in SRAM
  62               	.equ     SRTIFR0 ,        0x35    ;manually defined TIFR0 in SRAM
  63               	
  64               	.equ     IOOCR0B ,        0x28    ;manually defined OCR0B in IO
  65               	.equ     IOOCR0A ,        0x27    ;manually defined OCR0A in IO
  66               	.equ     IOTCNT0 ,        0x26    ;manually defined TCNT0 in IO
  67               	.equ     IOTCCR0B,        0x25    ;manually defined TCCR0B in IO
  68               	.equ     IOTCCR0A,        0x24    ;manually defined TCCR0A in IO
  69               	.equ     IOTIFR0 ,        0x15    ;manually defined TIFR0 in IO
  70               	
  71               	.equ     IOSREG  ,        0x3F    ;manually defined SREG in IO
  72               	.equ     IOSPH   ,        0x3E    ;manually defined SPH in IO
  73               	.equ     IOSPL   ,        0x3D    ;manually defined SPL in IO
  74               	;;==============================define hardware reg address end=============================;; 
  75               	
  76               	
  77               	
  78               	
  79               	
  80               	;;=============================define global variables starting=============================;; 
  81               	.section   .bss
  82               	
  83               	.global    KerBase                 ;declare global space for kernel
  84 0000 0000 0000 	KerBase:   .skip 10                ;Tick(5), prs(1), rld(1), task_id(1), ntask(1), ptid(1)
  84      0000 0000 
  84      0000 
  85               	
  86               	.global    KerPSP                  ;declare global space for process stack pointers
  87 000a 0000 0000 	KerPSP:    .skip KER_MX_NTSK*2     ;2 bytes for each task
  87      0000 0000 
  87      0000 0000 
  87      0000 0000 
  87      0000 0000 
  88               	
  89               	.global    KerSMSPZP               ;declare global space for stack for main stack pointers
  90 001e 0000 0000 	KerSMSPZP: .skip 14                ;stack_ptr(1), rsvd(1), MSPZP0(4), MSPZP1(4)...
  90      0000 0000 
  90      0000 0000 
  90      0000 
  91               	
  92               	.global    KerSchSts               ;declare global space for scheduler status
  93 002c 0000 0000 	KerSchSts: .skip KER_MX_NTSK*1     ;status(1)
  93      0000 0000 
  93      0000 
  94               	
  95               	.global    KerSchPr                ;declare global space for scheduler priority
  96 0036 0000 0000 	KerSchPr:  .skip KER_MX_NTSK*1     ;priority(1)
  96      0000 0000 
  96      0000 
  97               	
  98               	.global    KerSchSlp               ;declare global space for task sleep
  99 0040 0000 0000 	KerSchSlp: .skip KER_MX_NTSK*2     ;timing(2)
  99      0000 0000 
  99      0000 0000 
  99      0000 0000 
  99      0000 0000 
 100               	
 101               	.global    KerStack                ;declare global space for stack
 102 0054 0000 0000 	KerStack:  .skip KER_STK_SZ*10     ;KER_STK_SZ bytes for each task
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 103               	;;==============================define global variables end=================================;; 
 104               	
 105               	
 106               	
 107               	
 108               	
 109               	;;===============================define vector section starting=============================;; 
 110               	.section .vectors, "ax", @progbits
 111               	
 112 0000 0000 0000 	.org    0x20
 112      0000 0000 
 112      0000 0000 
 112      0000 0000 
 112      0000 0000 
 112      0000 0000 
 112      0000 0000 
 112      0000 0000 
 113:kernel.S      ****         RJMP  __vector_16
 114               	;;=================================define vector section end================================;; 
 115               	
 116               	
 117               	
 118               	
 119               	
 120               	;;===============================define text section starting===============================;; 
 121               	.section .text
 122               	;;==================================define text section end=================================;; 
 123               	
 124               	
 125               	
 126               	
 127               	
 128               	;;==============================define global functions starting============================;; 
 129               	.global  Kernel_SysTick_Reg_Init
 130               	.global  Kernel_SysTick_Val_Get
 131               	.global  Kernel_SysTick_Val_Safely_Get
 132               	.global  Kernel_Interrupt_Sts_Get
 133               	.global  Kernel_Init
 134               	.global  Kernel_Task_Create
 135               	.global  Kernel_Start_Tasks
 136               	.global  Kernel_Task_Idle
 137               	.global  Kernel_Task_Sleep
 138               	.global  Kernel_Task_Sleep_Time_Get
 139               	.global  Kernel_Task_Sts_Get
 140               	.global  Kernel_Task_Prio_Get
 141               	.global  Kernel_High_Prio_Task_ID_Get
 142               	.global  Kernel_Abs_High_Prio_Task_ID_Get
 143               	;;================================define global functions end===============================;; 
 144               	
 145               	
 146               	       
 147               	;;============================debug pin operation init starting=============================;; 
 148               	.macro  KER_TIMER_INIT                                    ;total 1.5uS @8MHz      ( 12 clocks) 
 149               	        LDS   R16		         , KerBase+OFB_PRS        ;load prescaler         (  2 clocks) 
 150               			LDS   R17		         , KerBase+OFB_RLD        ;load reload val        (  2 clocks) 
 151               			STS   SRTCCR0B           , R16                    ;prescaler-> TCCR0B     (  2 clocks) 
 152               			STS   SRTCNT0            , R17                    ;reload val-> TCNT0     (  2 clocks) 
 153               			LDI   R16                , 0x01                   ;bit mask TOIE0         (  1 clock ) 
 154               			STS   SRTIMSK0           , R16                    ;set to TIMSK0          (  2 clocks) 
 155               			SEI                                               ;force enable interrupt (  1 clock ) 
 156               	.endm
 157               	;;==============================debug pin operation init end================================;; 
 158               	
 159               	
 160               	
 161               	
 162               	
 163               	;;============================debug pin operation init starting=============================;; 
 164               	.macro  KER_DEBUG_PIN_INIT                                ;total 0.5uS @8MHz      (  4 clocks) 
 165               	        #ifdef KER_DBG_ENABLE                                                                  
 166               			SBI   KER_DBG_DDR        , KER_DBG_PIN            ;set bit in DDR         (  2 clocks) 
 167               			CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear port bit         (  2 clocks) 
 168               			#endif
 169               	.endm
 170               	;;==============================debug pin operation init end================================;; 
 171               	
 172               	
 173               	
 174               	
 175               	
 176               	;;===========================debug pin operation set starting===============================;; 
 177               	.macro  KER_DEBUG_PIN_SET                                 ;total 0.25uS @8MHz     (  2 clocks) 
 178               	        #ifdef KER_DBG_ENABLE                                                                  
 179               	        SBI   KER_DBG_PORT       , KER_DBG_PIN            ;set gpio               (  2 clocks) 
 180               			#endif
 181               	.endm
 182               	;;==============================debug pin operation set end=================================;; 
 183               	
 184               	
 185               	
 186               	
 187               	
 188               	;;===========================debug pin operation clear starting=============================;; 
 189               	.macro  KER_DEBUG_PIN_CLEAR                               ;total 0.25uS @8MHz     (  2 clocks) 
 190               	        #ifdef KER_DBG_ENABLE                                                                  
 191               			CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear gpio             (  2 clocks) 
 192               			#endif
 193               	.endm
 194               	;;==============================debug pin operation clear end===============================;; 
 195               	
 196               	
 197               	
 198               	
 199               	
 200               	;;==============================reload counter value starting===============================;; 
 201               	.macro  KER_COUNTER_RELOAD                                ;total 0.5uS @8MHz      (  4 clocks) 
 202               	        LDS   R16                , KerBase+OFB_RLD        ;load reload value      (  2 clocks) 
 203               			STS   SRTCNT0            , R16                    ;Set value to TCNT0     (  2 clocks) 
 204               	.endm
 205               	;;=================================reload counter value end=================================;; 
 206               	
 207               	
 208               	
 209               	
 210               	
 211               	;;==================================context save starting===================================;; 
 212               	.macro  KER_CONTEXT_SAVE                                  ;total 8.5uS @8MHz      ( 68 clocks) 
 213               	        PUSH  R0                                          ;save R0                (  2 clocks) 
 214               			IN    R0                 , IOSREG                 ;load SREG              (  1 clock ) 
 215               			PUSH  R0                                          ;save SREG              (  2 clocks) 
 216               			PUSH  R1                                          ;save R1                (  2 clocks) 
 217               			CLR   R1                                          ;clear R1               (  1 clock ) 
 218               			PUSH  R2                                          ;save R2                (  2 clocks) 
 219               			PUSH  R3                                          ;save R3                (  2 clocks) 
 220               			PUSH  R4                                          ;save R4                (  2 clocks) 
 221               			PUSH  R5                                          ;save R5                (  2 clocks) 
 222               			PUSH  R6                                          ;save R6                (  2 clocks) 
 223               			PUSH  R7                                          ;save R7                (  2 clocks) 
 224               			PUSH  R8                                          ;save R8                (  2 clocks) 
 225               			PUSH  R9                                          ;save R9                (  2 clocks) 
 226               			PUSH  R10                                         ;save R10               (  2 clocks) 
 227               			PUSH  R11                                         ;save R11               (  2 clocks) 
 228               			PUSH  R12                                         ;save R12               (  2 clocks) 
 229               			PUSH  R13                                         ;save R13               (  2 clocks) 
 230               			PUSH  R14                                         ;save R14               (  2 clocks) 
 231               			PUSH  R15                                         ;save R15               (  2 clocks) 
 232               			PUSH  R16                                         ;save R16               (  2 clocks) 
 233               			PUSH  R17                                         ;save R17               (  2 clocks) 
 234               			PUSH  R18                                         ;save R18               (  2 clocks) 
 235               			PUSH  R19                                         ;save R19               (  2 clocks) 
 236               			PUSH  R20                                         ;save R20               (  2 clocks) 
 237               			PUSH  R21                                         ;save R21               (  2 clocks) 
 238               			PUSH  R22                                         ;save R22               (  2 clocks) 
 239               			PUSH  R23                                         ;save R23               (  2 clocks) 
 240               			PUSH  R24                                         ;save R24               (  2 clocks) 
 241               			PUSH  R25                                         ;save R25               (  2 clocks) 
 242               			PUSH  R26                                         ;save R26               (  2 clocks) 
 243               			PUSH  R27                                         ;save R27               (  2 clocks) 
 244               			PUSH  R28                                         ;save R28               (  2 clocks) 
 245               			PUSH  R29                                         ;save R29               (  2 clocks) 
 246               			PUSH  R30                                         ;save R30               (  2 clocks) 
 247               			PUSH  R31                                         ;save R31               (  2 clocks) 
 248               	.endm
 249               	;;=====================================context save end=====================================;; 
 250               	
 251               	
 252               	
 253               	
 254               	
 255               	;;================================context restore starting==================================;; 
 256               	.macro  KER_CONTEXT_RESTORE                               ;total 8.38uS @8MHz     ( 67 clocks) 
 257               			POP   R31                                         ;restore R31            (  2 clocks) 
 258               			POP   R30                                         ;restore R30            (  2 clocks) 
 259               			POP   R29                                         ;restore R29            (  2 clocks) 
 260               			POP   R28                                         ;restore R28            (  2 clocks) 
 261               			POP   R27                                         ;restore R27            (  2 clocks) 
 262               			POP   R26                                         ;restore R26            (  2 clocks) 
 263               			POP   R25                                         ;restore R25            (  2 clocks) 
 264               			POP   R24                                         ;restore R24            (  2 clocks) 
 265               			POP   R23                                         ;restore R23            (  2 clocks) 
 266               			POP   R22                                         ;restore R22            (  2 clocks) 
 267               			POP   R21                                         ;restore R21            (  2 clocks) 
 268               			POP   R20                                         ;restore R20            (  2 clocks) 
 269               			POP   R19                                         ;restore R19            (  2 clocks) 
 270               			POP   R18                                         ;restore R18            (  2 clocks) 
 271               			POP   R17                                         ;restore R17            (  2 clocks) 
 272               			POP   R16                                         ;restore R16            (  2 clocks) 
 273               			POP   R15                                         ;restore R15            (  2 clocks) 
 274               			POP   R14                                         ;restore R14            (  2 clocks) 
 275               			POP   R13                                         ;restore R13            (  2 clocks) 
 276               			POP   R12                                         ;restore R12            (  2 clocks) 
 277               			POP   R11                                         ;restore R11            (  2 clocks) 
 278               			POP   R10                                         ;restore R10            (  2 clocks) 
 279               			POP   R9                                          ;restore R9             (  2 clocks) 
 280               			POP   R8                                          ;restore R8             (  2 clocks) 
 281               			POP   R7                                          ;restore R7             (  2 clocks) 
 282               			POP   R6                                          ;restore R6             (  2 clocks) 
 283               			POP   R5                                          ;restore R5             (  2 clocks) 
 284               			POP   R4                                          ;restore R4             (  2 clocks) 
 285               			POP   R3                                          ;restore R3             (  2 clocks) 
 286               			POP   R2                                          ;restore R2             (  2 clocks) 
 287               			POP   R1                                          ;restore R1             (  2 clocks) 
 288               			POP   R0                                          ;fetch SREG             (  2 clocks) 
 289               			OUT   IOSREG             , R0                     ;load SREG              (  1 clock ) 
 290               			POP   R0                                          ;restore R0             (  2 clocks) 
 291               	.endm
 292               	;;===================================context restore end====================================;; 
 293               	
 294               	
 295               	
 296               	
 297               	
 298               	;;===============================save current task sp starting==============================;; 
 299               	.macro  KER_SAVE_CURR_TASK_SP                             ;total 1.75uS @8MHz     ( 14 clocks) 
 300               			IN    R16                , IOSPL                  ;fetch SPL0             (  1 clock ) 
 301               			IN    R17                , IOSPH                  ;fetch SPH0             (  1 clock ) 
 302               			LDS   R18                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 303               			LSL   R18                                         ;left shift to multiply (  1 clock ) 
 304               			LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 305               			LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 306               			ADD   ZL                 , R18                    ;add offset to array    (  1 clock ) 
 307               			LDI   R18                , 0x00                   ;clear for carry prop   (  1 clock ) 
 308               			ADC   ZH                 , R18                    ;add carry, R1 zero reg (  1 clock ) 
 309               			ST    Z+                 , R16                    ;store SPL at ZP        (  2 clocks) 
 310               			ST    z                  , R17                    ;store SPH ZP+1         (  2 clocks) 
 311               	.endm
 312               	;;================================save current task sp end==================================;; 
 313               	
 314               	
 315               	
 316               	
 317               	
 318               	;;==============================load next task id starting==================================;; 
 319               	.macro  KER_LOAD_NEXT_TASK_ID                             ;total 1.63uS @8MHz     ( 13 clocks) 
 320               			LDS   R16                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 321               			INC   R16                                         ;increment task_id      (  1 clock ) 
 322               			LDS   R17                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 323               		_MOD_CONT\@:                                          ;use local label
 324               		    CP    R16                , R17                    ;compare R17 with R16   (  1 clock ) 
 325               			BRLO  _MOD_DONE\@                                 ;if R16<R17, done       (  2 clocks) 
 326               			SUB   R16                , R17                    ;subtract R17 from R16  (  1 clock ) 
 327               			RJMP  _MOD_CONT\@                                 ;go to loop start       (  2 clocks) 
 328               		_MOD_DONE\@:                                          ;use local label
 329               		    STS   KerBase+OFB_TID    , R16                    ;save task_id%ntask     (  2 clocks) 
 330               	.endm
 331               	;;=================================load next task id end====================================;; 
 332               	
 333               	
 334               	
 335               	
 336               	
 337               	;;==============================increment tick counter starting=============================;; 
 338               	.macro  KER_TICK_INCREMENT                                ;total 3.38uS @8MHz     ( 27 clocks) 
 339               			LDS   R16                , KerBase+OFB_TICK0      ;load Byte0             (  2 clocks) 
 340               	        LDS   R17                , KerBase+OFB_TICK1      ;load Byte1             (  2 clocks) 
 341               			LDS   R18                , KerBase+OFB_TICK2      ;load Byte2             (  2 clocks) 
 342               			LDS   R19                , KerBase+OFB_TICK3      ;load Byte3             (  2 clocks) 
 343               			LDS   R20                , KerBase+OFB_TICK4      ;load Byte4             (  2 clocks) 
 344               			LDI   R21                , 0x01                   ;set reg value 1        (  1 clock ) 
 345               	        ADD   R16                , R21                    ;add 1 with Byte0       (  1 clock ) 
 346               			LDI   R21                , 0x00                   ;clear for carry prop   (  1 clock ) 
 347               	        ADC   R17                , R21                    ;add if carry           (  1 clock ) 
 348               			ADC   R18                , R21                    ;add if carry           (  1 clock ) 
 349               			ADC   R19                , R21                    ;add if carry           (  1 clock ) 
 350               			ADC   R20                , R21                    ;add if carry           (  1 clock ) 
 351               	        STS   KerBase+OFB_TICK0  , R16                    ;set Byte0              (  2 clocks) 
 352               	        STS   KerBase+OFB_TICK1  , R17                    ;set Byte1              (  2 clocks) 
 353               			STS   KerBase+OFB_TICK2  , R18                    ;set Byte2              (  2 clocks) 
 354               			STS   KerBase+OFB_TICK3  , R19                    ;set Byte3              (  2 clocks) 
 355               			STS   KerBase+OFB_TICK4  , R20                    ;set Byte4              (  2 clocks) 
 356               	.endm
 357               	;;=================================increment tick counter end===============================;; 
 358               	
 359               	
 360               	
 361               	
 362               	
 363               	;;==============================load task id & sp starting==================================;; 
 364               	.macro  KER_LOAD_TASK_ID_AND_SP                           ;total 1.75uS @8MHz     ( 14 clocks) 
 365               			LDS   R16                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 366               			LSL   R16                                         ;left shift to multiply (  1 clock ) 
 367               			LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 368               			LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 369               			ADD   ZL                 , R16                    ;add offset to array    (  1 clock ) 
 370               			LDI   R16                , 0x00                   ;clear for carry prop   (  1 clock ) 
 371               			ADC   ZH                 , R16                    ;add carry if any       (  1 clock ) 
 372               			LD    R16                , Z+                     ;load SPL at ZP         (  2 clocks) 
 373               			LD    R17                , Z                      ;load SPH at ZP         (  2 clocks) 
 374               			OUT   IOSPL              , R16                    ;load SPL0              (  1 clock ) 
 375               			OUT   IOSPH              , R17                    ;load SPH0              (  1 clock ) 
 376               	.endm
 377               	;;=================================load task id & sp end====================================;; 
 378               	
 379               	
 380               	
 381               	
 382               	
 383               	;;================================push msp & zp starting====================================;; 
 384               	.macro  KER_PUSH_MSP_ZP                                   ;total 1.75uS @8MHz     ( 14 clocks) 
 385               			LDS   R16                , KerSMSPZP+OFM_MSPI     ;load stack_ind         (  2 clocks) 
 386               			LSL   R16                                         ;x2                     (  1 clock ) 
 387               			LSL   R16                                         ;x2                     (  1 clock ) 
 388               			LDI   R17                , OFM_MSPS               ;load offset val        (  1 clock ) 
 389               			ADD   R16                , R17                    ;stack_ind*4+OFM_MSPS   (  1 clock ) 
 390               			LDI   XL                 , lo8(KerSMSPZP)         ;load low addr          (  1 clock ) 
 391               			LDI   XH                 , hi8(KerSMSPZP)         ;load high addr         (  1 clock ) 
 392               			LDI   R17                , 0x00                   ;clear                  (  1 clock ) 
 393               			ADD   XL                 , R16                    ;XL+offset              (  1 clock ) 
 394               			ADC   XH                 , R17                    ;XH+carry               (  1 clock ) 
 395               			ST    X+                 , IOSPL                  ;store main SPL         (  2 clocks) 
 396               			ST    X+                 , IOSPH                  ;store main SPH         (  2 clocks) 
 397               			ST    X+                 , ZL                     ;store main SPL         (  2 clocks) 
 398               			ST    X                  , ZH                     ;store main SPL         (  2 clocks) 
 399               	.endm
 400               	;;===================================push msp & zp end======================================;; 
 401               	
 402               	
 403               	
 404               	
 405               	
 406               	;;=================================pop msp & zp starting====================================;; 
 407               	.macro  KER_POP_MSP_ZP                                    ;total 1.75uS @8MHz     ( 14 clocks) 
 408               			LDS   R16                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 409               			LSL   R16                                         ;left shift to multiply (  1 clock ) 
 410               	.endm
 411               	;;====================================pop msp & zp end======================================;; 
 412               	
 413               	
 414               	
 415               	
 416               	
 417               	;;=================================ISR execution starting===================================;; 
 418               	.global  __vector_16
 419               	    __vector_16:                                          ;total 26.13uS @8MHz    (211 clocks) 
 420:kernel.S      **** 	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 421:kernel.S      ****         KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 422:kernel.S      **** 		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 423:kernel.S      **** 		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 424:kernel.S      **** 		KER_TICK_INCREMENT                                ;increment tick counter ( 27 clocks) 
 425               	        
 426               			
 427               			;KER_DEC_SLP_TIMEOUT                               ;decrement of sleep time
 428:kernel.S      **** 		KER_LOAD_NEXT_TASK_ID                             ;load next task_id      ( 13 clocks)
 429               			;KER_RUN_SCHEDULER                                 ;run scheduler          ( 14 clocks) 
 430               		    
 431:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 12 clocks) 
 432:kernel.S      **** 		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 433:kernel.S      **** 	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 434:kernel.S      **** 		RETI                                              ;return from interrupt  (  4 clocks) 
 435               	;;====================================ISR execution end=====================================;; 
 436               	
 437               	
 438               	
 439               	
 440               	
 441               	;;================================SysTick reg init starting=================================;; 
 442               	Kernel_SysTick_Reg_Init:                                  ;total 6.0uS @8MHz      ( 48 clocks) 
 443               	        ;arg1 -> prescaler R24, arg2 -> reload val R22
 444:kernel.S      ****         CLI                                               ;disable global int     (  1 clock ) 
 445:kernel.S      **** 		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 446:kernel.S      **** 		LDI   R16                , 0x00                   ;set 0x00 to R16        (  1 clock ) 
 447               			
 448               			;main stack pointer index set to stack top (0 -> KerMSPZP+OFM_MSPS)
 449:kernel.S      ****         STS   KerSMSPZP+OFM_MSPI , R16                    ;set mspi to stack top  (  2 clocks) 
 450               	
 451               			;clear tick counter
 452:kernel.S      **** 		STS   KerBase+OFB_TICK0  , R16                    ;clear  KerBase[0]      (  2 clocks) 
 453:kernel.S      **** 		STS   KerBase+OFB_TICK1  , R16                    ;clear  KerBase[1]      (  2 clocks) 
 454:kernel.S      **** 		STS   KerBase+OFB_TICK2  , R16                    ;clear  KerBase[2]      (  2 clocks) 
 455:kernel.S      **** 		STS   KerBase+OFB_TICK3  , R16                    ;clear  KerBase[3]      (  2 clocks) 
 456:kernel.S      **** 		STS   KerBase+OFB_TICK4  , R16                    ;clear  KerBase[4]      (  2 clocks) 
 457               		    
 458               			;clear system registers
 459:kernel.S      **** 		STS   KerBase+OFB_PRS    , R16                    ;clear  KerBase[5]      (  2 clocks) 
 460:kernel.S      **** 		STS   KerBase+OFB_RLD    , R16                    ;clear  KerBase[6]      (  2 clocks) 
 461:kernel.S      **** 		STS   KerBase+OFB_TID    , R16                    ;clear  KerBase[7]      (  2 clocks) 
 462:kernel.S      **** 		STS   KerBase+OFB_NTSK   , R16                    ;clear  KerBase[8]      (  2 clocks) 
 463:kernel.S      ****         STS   KerBase+OFB_PTID   , R16                    ;clear  KerBase[9]      (  2 clocks) 
 464               			
 465               			;clear all timer registers
 466:kernel.S      **** 		STS   SRTCCR0A           , R16                    ;clear TCCR0A           (  2 clocks) 
 467:kernel.S      **** 		STS   SRTCCR0B           , R16                    ;clear TCCR0B           (  2 clocks) 
 468:kernel.S      **** 		STS   SRTIMSK0           , R16                    ;clear TIMSK0           (  2 clocks) 
 469:kernel.S      **** 		STS   SRTIFR0            , R16                    ;clear TIFR0            (  2 clocks) 
 470:kernel.S      **** 		STS   SROCR0A            , R16                    ;clear OCR0A            (  2 clocks) 
 471:kernel.S      **** 		STS   SROCR0B            , R16                    ;clear OCR0B            (  2 clocks) 
 472:kernel.S      **** 		STS   SRTCNT0            , R16                    ;clear TCNT0            (  2 clocks) 
 473               			
 474:kernel.S      **** 		STS   KerBase+OFB_PRS    , R24                    ;KerBase[5] prescaler   (  2 clocks) 
 475:kernel.S      **** 		STS   KerBase+OFB_RLD    , R22                    ;KerBase[6] reload val  (  2 clocks) 
 476               			
 477:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 478               	;;===================================SysTick reg init end===================================;; 
 479               	
 480               	
 481               	
 482               	
 483               	
 484               	;;===============================kernel task create starting================================;; 
 485               	Kernel_Task_Create:                                       ;total operation        (130 clocks) 
 486               	        ;func_ptr->R25:R24, task_priority->R22 
 487               	        ;save main SP & Z pointer 
 488:kernel.S      ****         IN    R2                 , IOSPL                  ;save SPL of MSP        (  1 clock ) 
 489:kernel.S      ****         IN    R3                 , IOSPH                  ;save SPH of MSP        (  1 clock ) 
 490:kernel.S      ****         MOV   R4                 , ZL                     ;save ZPL               (  1 clock ) 
 491:kernel.S      **** 		MOV   R5                 , ZH                     ;save ZPH               (  1 clock ) 
 492               	        
 493               			
 494               			;across this function, R16 will be used as task_id 
 495:kernel.S      **** 		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 496:kernel.S      **** 		LDI   R17                , 0x00                   ;clear reg              (  1 clock ) 
 497               			
 498               			;set priority to KerSchPr+task_id
 499:kernel.S      **** 		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 500:kernel.S      **** 		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 501:kernel.S      **** 		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
 502:kernel.S      **** 		ADC   ZH                 , R17                    ;add high byte+carry    (  1 clock ) 
 503:kernel.S      **** 		ST    Z                  , R22                    ;save priority          (  2 clocks) 
 504               			
 505               			;stack pointer for current task (KerStack + KER_STK_SZ*(task_id+1) - 1) ->stack top    
 506:kernel.S      **** 		MOV   R17                , R16                    ;load task_id           (  1 clock ) 
 507:kernel.S      **** 		INC   R17                                         ;increment task_id      (  1 clock ) 
 508:kernel.S      **** 		LDI   R18                , KER_STK_SZ             ;load stack size        (  1 clock ) 
 509:kernel.S      **** 		MUL   R17                , R18                    ;multiply to get offset (  2 clocks) 
 510:kernel.S      **** 		MOV   ZL                 , R0                     ;load multiplied low    (  1 clocks) 
 511:kernel.S      **** 		MOV   ZH                 , R1                     ;load multiplied high   (  1 clocks) 
 512:kernel.S      **** 		SBIW  ZL                 , 0x01                   ;dec multiplied val-1   (  2 clocks) 
 513:kernel.S      **** 		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 514:kernel.S      **** 		LDI   R17                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
 515:kernel.S      **** 		LDI   R18                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
 516:kernel.S      **** 		ADD   ZL                 , R17                    ;add low bytes          (  1 clock ) 
 517:kernel.S      **** 		ADC   ZH                 , R18                    ;add high bytes+carry   (  1 clock ) 
 518:kernel.S      **** 		OUT   IOSPL              , ZL                     ;load SPL               (  1 clock ) 
 519:kernel.S      ****         OUT   IOSPH              , ZH                     ;load SPH               (  1 clock ) 
 520               			
 521               			;function argument directly returns word address
 522:kernel.S      **** 	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
 523:kernel.S      **** 		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 524               			
 525               			;push context to stack of this task
 526:kernel.S      **** 		KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 527               			
 528               			;read stack pointer of current task (necessary when restore)
 529:kernel.S      **** 		IN    R17                , IOSPL                  ;read SPL               (  1 clock ) 
 530:kernel.S      ****         IN    R18                , IOSPH                  ;read SPH               (  1 clock ) 
 531               			
 532               			;calculate the address where current task's SP will be stored and store SP
 533:kernel.S      **** 		MOV   R19                , R16                    ;fetch task_id from arg (  1 clock ) 
 534:kernel.S      **** 		LSL   R19                                         ;left shift to multiply (  1 clock ) 
 535:kernel.S      **** 		LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 536:kernel.S      **** 		LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 537:kernel.S      **** 		ADD   ZL                 , R19                    ;add offset to array    (  1 clock ) 
 538:kernel.S      **** 		ADC   ZH                 , R1                     ;add carry if any       (  1 clock ) 
 539:kernel.S      **** 		ST    Z+                 , R17                    ;SPL at KerPSp+offset   (  2 clocks) 
 540:kernel.S      **** 		ST    z                  , R18                    ;SPH at KerPSp+offset   (  2 clocks) 
 541               			
 542               			;increment task_id
 543:kernel.S      **** 		LDS   R17                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 544:kernel.S      **** 		INC   R17                                         ;increment task_id      (  1 clock ) 
 545:kernel.S      **** 		STS   KerBase+OFB_TID    , R17                    ;store task_id          (  2 clocks) 
 546               	
 547               			;increment ntask
 548:kernel.S      **** 		LDS   R17                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 549:kernel.S      **** 		INC   R17                                         ;increment ntask        (  1 clock ) 
 550:kernel.S      **** 		STS   KerBase+OFB_NTSK   , R17                    ;store ntask            (  2 clocks) 
 551               			
 552               			;load Main SP, restore Z pointer
 553:kernel.S      **** 		OUT   IOSPL              , R2                     ;load SPL               (  1 clock ) 
 554:kernel.S      ****         OUT   IOSPH              , R3                     ;load SPH               (  1 clock ) 
 555:kernel.S      **** 		MOV   ZL                 , R4                     ;push ZPL               (  1 clock ) 
 556:kernel.S      **** 		MOV   ZH                 , R5                     ;push ZPL               (  1 clock ) 
 557               			
 558:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 559               	;;==================================kernel task create end==================================;; 
 560               	
 561               	
 562               	
 563               	
 564               	
 565               	;;=================================kernel start tasks starting==============================;; 
 566               	Kernel_Start_Tasks:
 567               			;start executing from task0
 568               			;save ZP
 569:kernel.S      **** 		MOV   R4                 , ZL                     ;save ZPL               (  2 clocks) 
 570:kernel.S      **** 		MOV   R5                 , ZH                     ;save ZPH               (  2 clocks) 
 571               			
 572               			;clear task_id
 573:kernel.S      **** 		LDI   R16                , 0x00                   ;load task_id           (  2 clocks) 
 574:kernel.S      **** 		STS   KerBase+OFB_TID    , R16                    ;store task_id          (  2 clocks) 
 575               			
 576               			;load ZP with addr+offset
 577:kernel.S      **** 		LDI   ZL                 , lo8(KerPSP+0x00)       ;fetch ZPL KerPSP->TID0 (  1 clock ) 
 578:kernel.S      **** 		LDI   ZH                 , hi8(KerPSP+0x00)       ;fetch ZPH KerPSP->TID0 (  1 clock ) 
 579               			
 580               			;load task_id 0 task's SP
 581:kernel.S      **** 		LD    R16                , Z+                     ;load val from Z, inc Z (  2 clocks) 
 582:kernel.S      **** 		LD    R17                , Z                      ;load val from Z+1      (  2 clocks) 
 583               			
 584               	        ;set task_id=0 task's SP
 585:kernel.S      **** 		OUT   IOSPL              , R16                    ;load SPL               (  1 clock ) 
 586:kernel.S      ****         OUT   IOSPH              , R17                    ;load SPH               (  1 clock ) 
 587               	        
 588               	        ;forcefully restore context, in ISR it will be stored automatically
 589:kernel.S      **** 		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 590               	
 591               			;restore ZP
 592:kernel.S      **** 		MOV   ZL                 , R4                     ;restore ZPL            (  2 clocks) 
 593:kernel.S      **** 		MOV   ZH                 , R5                     ;restore ZPL            (  2 clocks) 
 594               			
 595               			;config timer for system tick
 596:kernel.S      **** 		KER_TIMER_INIT                                    ;init timer, int enable ( 12 clocks) 
 597               	        
 598               			;execute return to jump to task0, pushed while task init
 599:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 600               	;;==================================kernel start tasks end==================================;; 
 601               	
 602               	
 603               	
 604               	
 605               	
 606               	;;===================================kernel init starting===================================;; 
 607               	Kernel_Init:
 608               			;save necessary registers and MSP
 609:kernel.S      **** 		CLR   R1                                          ;gcc expects            (  1 clock ) 
 610:kernel.S      **** 		IN    R16                , IOSPL                  ;load main SPL          (  1 clock ) 
 611:kernel.S      **** 		IN    R17                , IOSPH                  ;load main SPH          (  1 clock ) 
 612:kernel.S      **** 		PUSH  R16                                         ;save main SPL          (  2 clocks)
 613:kernel.S      **** 		PUSH  R17                                         ;save main SPH          (  2 clocks)
 614:kernel.S      **** 		PUSH  ZL                                          ;save ZPL               (  2 clocks) 
 615:kernel.S      **** 		PUSH  ZH                                          ;save ZPH               (  2 clocks) 
 616               	
 617               			;init timer for kernel 
 618:kernel.S      **** 		LDI   R24                , 0x03                   ;set prescaler          (  1 clock ) 
 619:kernel.S      **** 		LDI   R22                , 0x82                   ;set reload val         (  1 clock ) 
 620:kernel.S      **** 		CALL  Kernel_SysTick_Reg_Init                     ;init timer             ( 55 clocks) 
 621               			
 622               			;create idle task at task_id 0, priority 0xFF (lowest)
 623:kernel.S      **** 		LDI   R24                , lo8(Kernel_Task_Idle)  ;load func addr low     (  1 clock ) 
 624:kernel.S      **** 		LDI   R25                , hi8(Kernel_Task_Idle)  ;load func addr high    (  1 clock ) 
 625:kernel.S      **** 		LSR   R25                                         ;right shift to divide  (  1 clock ) 
 626:kernel.S      **** 		ROR   R24                                         ;rotate right th carry  (  1 clock ) 
 627:kernel.S      **** 		LDI   R22                , 0xFF                   ;set max val
 628:kernel.S      **** 		CALL  Kernel_Task_Create                          ;init idle task         (130 clocks) 
 629               			
 630               			;restore necessary registers and MSP
 631:kernel.S      **** 		POP   ZH                                          ;restore ZPL            (  2 clocks) 
 632:kernel.S      **** 		POP   ZL                                          ;restore ZPH            (  2 clocks) 
 633:kernel.S      **** 		POP   R17                                         ;load main SPH          (  1 clock ) 
 634:kernel.S      **** 		POP   R16                                         ;load main SPH          (  1 clock ) 
 635:kernel.S      **** 		OUT   IOSPL              , R16                    ;save main SPL          (  1 clock ) 
 636:kernel.S      **** 		OUT   IOSPH              , R17                    ;save main SPL          (  1 clock ) 
 637               	
 638               			;execute return to jump to task0, pushed while task init
 639:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 640               	;;======================================kernel init end=====================================;; 
 641               	
 642               	
 643               	
 644               	
 645               	
 646               	;;=================================kernel idle task starting================================;; 
 647               	Kernel_Task_Idle:                                         ;jumps to this function when idle
 648:kernel.S      ****         LDI   R25                , 0x00                   ;set UBRRH              (  1 clock ) 
 649:kernel.S      ****         LDI   R24                , 0x00                   ;set UBRRL              (  1 clock ) 
 650:kernel.S      ****         CALL  Debug_Init                                  ;debug init
 651               	    _IDLE_LOOP:                                           ;forever loop
 652:kernel.S      **** 	    LDI   R24                , 0x23
 653:kernel.S      **** 		CALL  Debug_Tx_Byte_Conf
 654:kernel.S      **** 		RJMP  _IDLE_LOOP                                  ;return from subroutine (  4 clocks) 
 655               	;;==================================kernel idle task end====================================;; 
 656               	
 657               	
 658               	
 659               	
 660               	
 661               	;;=============================kernel task priority get starting============================;; 
 662               	Kernel_Task_Prio_Get:
 663               			;get priority of the task id, arg (task_id->R24), return R24
 664:kernel.S      **** 		MOV   R16                , R24                    ;copy task_id           (  1 clock ) 
 665:kernel.S      **** 		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 666:kernel.S      **** 		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 667:kernel.S      **** 		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
 668:kernel.S      **** 		ADC   ZH                 , R1                     ;add high byte+carry    (  1 clock ) 
 669:kernel.S      **** 		LD    R24                , Z                      ;load priority          (  2 clocks) 
 670:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 671               	;;================================kernel task priority get end==============================;; 
DEFINED SYMBOLS
            kernel.S:12     *ABS*:000003e8 KER_TR
            kernel.S:13     *ABS*:00000003 KER_PRS
            kernel.S:14     *ABS*:00000082 KER_RLD
            kernel.S:15     *ABS*:00000080 KER_STK_SZ
            kernel.S:16     *ABS*:0000000a KER_MX_NTSK
            kernel.S:24     *ABS*:00000000 OFB_TICK0
            kernel.S:25     *ABS*:00000001 OFB_TICK1
            kernel.S:26     *ABS*:00000002 OFB_TICK2
            kernel.S:27     *ABS*:00000003 OFB_TICK3
            kernel.S:28     *ABS*:00000004 OFB_TICK4
            kernel.S:29     *ABS*:00000005 OFB_PRS
            kernel.S:30     *ABS*:00000006 OFB_RLD
            kernel.S:31     *ABS*:00000007 OFB_TID
            kernel.S:32     *ABS*:00000008 OFB_NTSK
            kernel.S:33     *ABS*:00000009 OFB_PTID
            kernel.S:34     *ABS*:00000000 OFM_MSPI
            kernel.S:35     *ABS*:00000002 OFM_MSPS
            kernel.S:43     *ABS*:00000001 TASK_READY
            kernel.S:44     *ABS*:00000000 TASK_BLOCK
            kernel.S:52     *ABS*:0000005f SRSREG
            kernel.S:53     *ABS*:0000005e SRSPH
            kernel.S:54     *ABS*:0000005d SRSPL
            kernel.S:56     *ABS*:0000006e SRTIMSK0
            kernel.S:57     *ABS*:00000048 SROCR0B
            kernel.S:58     *ABS*:00000047 SROCR0A
            kernel.S:59     *ABS*:00000046 SRTCNT0
            kernel.S:60     *ABS*:00000045 SRTCCR0B
            kernel.S:61     *ABS*:00000044 SRTCCR0A
            kernel.S:62     *ABS*:00000035 SRTIFR0
            kernel.S:64     *ABS*:00000028 IOOCR0B
            kernel.S:65     *ABS*:00000027 IOOCR0A
            kernel.S:66     *ABS*:00000026 IOTCNT0
            kernel.S:67     *ABS*:00000025 IOTCCR0B
            kernel.S:68     *ABS*:00000024 IOTCCR0A
            kernel.S:69     *ABS*:00000015 IOTIFR0
            kernel.S:71     *ABS*:0000003f IOSREG
            kernel.S:72     *ABS*:0000003e IOSPH
            kernel.S:73     *ABS*:0000003d IOSPL
            kernel.S:84     .bss:00000000 KerBase
            kernel.S:87     .bss:0000000a KerPSP
            kernel.S:90     .bss:0000001e KerSMSPZP
            kernel.S:93     .bss:0000002c KerSchSts
            kernel.S:96     .bss:00000036 KerSchPr
            kernel.S:99     .bss:00000040 KerSchSlp
            kernel.S:102    .bss:00000054 KerStack
            kernel.S:419    .text:00000000 __vector_16
            kernel.S:442    .text:00000114 Kernel_SysTick_Reg_Init
            kernel.S:607    .text:00000296 Kernel_Init
            kernel.S:485    .text:0000016e Kernel_Task_Create
            kernel.S:566    .text:0000021e Kernel_Start_Tasks
            kernel.S:647    .text:000002c8 Kernel_Task_Idle
            kernel.S:662    .text:000002d8 Kernel_Task_Prio_Get
            kernel.S:428    .text:000000a8 _MOD_CONT5
            kernel.S:428    .text:000000b0 _MOD_DONE5
            kernel.S:651    .text:000002d0 _IDLE_LOOP

UNDEFINED SYMBOLS
Kernel_SysTick_Val_Get
Kernel_SysTick_Val_Safely_Get
Kernel_Interrupt_Sts_Get
Kernel_Task_Sleep
Kernel_Task_Sleep_Time_Get
Kernel_Task_Sts_Get
Kernel_High_Prio_Task_ID_Get
Kernel_Abs_High_Prio_Task_ID_Get
Debug_Init
Debug_Tx_Byte_Conf
