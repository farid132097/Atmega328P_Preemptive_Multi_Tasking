   1               	# 1 "kernel.S"
   1               	
   0               	
   0               	
   2               	#include <avr/io.h>
   1               	/* Copyright (c) 2002,2003,2005,2006,2007 Marek Michalkiewicz, Joerg Wunsch
   2               	   Copyright (c) 2007 Eric B. Weddington
   3               	   All rights reserved.
   4               	
   5               	   Redistribution and use in source and binary forms, with or without
   6               	   modification, are permitted provided that the following conditions are met:
   7               	
   8               	   * Redistributions of source code must retain the above copyright
   9               	     notice, this list of conditions and the following disclaimer.
  10               	
  11               	   * Redistributions in binary form must reproduce the above copyright
  12               	     notice, this list of conditions and the following disclaimer in
  13               	     the documentation and/or other materials provided with the
  14               	     distribution.
  15               	
  16               	   * Neither the name of the copyright holders nor the names of
  17               	     contributors may be used to endorse or promote products derived
  18               	     from this software without specific prior written permission.
  19               	
  20               	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21               	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22               	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23               	  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24               	  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25               	  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26               	  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27               	  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28               	  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29               	  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30               	  POSSIBILITY OF SUCH DAMAGE. */
  31               	
  32               	/* $Id: io.h,v 1.52.2.28 2009/12/20 17:02:53 arcanum Exp $ */
  33               	
  34               	/** \file */
  35               	/** \defgroup avr_io <avr/io.h>: AVR device-specific IO definitions
  36               	    \code #include <avr/io.h> \endcode
  37               	
  38               	    This header file includes the apropriate IO definitions for the
  39               	    device that has been specified by the <tt>-mmcu=</tt> compiler
  40               	    command-line switch.  This is done by diverting to the appropriate
  41               	    file <tt>&lt;avr/io</tt><em>XXXX</em><tt>.h&gt;</tt> which should
  42               	    never be included directly.  Some register names common to all
  43               	    AVR devices are defined directly within <tt>&lt;avr/common.h&gt;</tt>,
  44               	    which is included in <tt>&lt;avr/io.h&gt;</tt>,
  45               	    but most of the details come from the respective include file.
  46               	
  47               	    Note that this file always includes the following files:
  48               	    \code 
  49               	    #include <avr/sfr_defs.h>
  50               	    #include <avr/portpins.h>
  51               	    #include <avr/common.h>
  52               	    #include <avr/version.h>
  53               	    \endcode
  54               	    See \ref avr_sfr for more details about that header file.
  55               	
  56               	    Included are definitions of the IO register set and their
  57               	    respective bit values as specified in the Atmel documentation.
  58               	    Note that inconsistencies in naming conventions,
  59               	    so even identical functions sometimes get different names on
  60               	    different devices.
  61               	
  62               	    Also included are the specific names useable for interrupt
  63               	    function definitions as documented
  64               	    \ref avr_signames "here".
  65               	
  66               	    Finally, the following macros are defined:
  67               	
  68               	    - \b RAMEND
  69               	    <br>
  70               	    The last on-chip RAM address.
  71               	    <br>
  72               	    - \b XRAMEND
  73               	    <br>
  74               	    The last possible RAM location that is addressable. This is equal to 
  75               	    RAMEND for devices that do not allow for external RAM. For devices 
  76               	    that allow external RAM, this will be larger than RAMEND.
  77               	    <br>
  78               	    - \b E2END
  79               	    <br>
  80               	    The last EEPROM address.
  81               	    <br>
  82               	    - \b FLASHEND
  83               	    <br>
  84               	    The last byte address in the Flash program space.
  85               	    <br>
  86               	    - \b SPM_PAGESIZE
  87               	    <br>
  88               	    For devices with bootloader support, the flash pagesize
  89               	    (in bytes) to be used for the \c SPM instruction. 
  90               	    - \b E2PAGESIZE
  91               	    <br>
  92               	    The size of the EEPROM page.
  93               	    
  94               	*/
  95               	
  96               	#ifndef _AVR_IO_H_
  97               	#define _AVR_IO_H_
  98               	
  99               	#include <avr/sfr_defs.h>
   1               	/* Copyright (c) 2002, Marek Michalkiewicz <marekm@amelek.gda.pl>
 100               	
 101               	#if defined (__AVR_AT94K__)
 102               	#  include <avr/ioat94k.h>
 103               	#elif defined (__AVR_AT43USB320__)
 104               	#  include <avr/io43u32x.h>
 105               	#elif defined (__AVR_AT43USB355__)
 106               	#  include <avr/io43u35x.h>
 107               	#elif defined (__AVR_AT76C711__)
 108               	#  include <avr/io76c711.h>
 109               	#elif defined (__AVR_AT86RF401__)
 110               	#  include <avr/io86r401.h>
 111               	#elif defined (__AVR_AT90PWM1__)
 112               	#  include <avr/io90pwm1.h>
 113               	#elif defined (__AVR_AT90PWM2__)
 114               	#  include <avr/io90pwmx.h>
 115               	#elif defined (__AVR_AT90PWM2B__)
 116               	#  include <avr/io90pwm2b.h>
 117               	#elif defined (__AVR_AT90PWM3__)
 118               	#  include <avr/io90pwmx.h>
 119               	#elif defined (__AVR_AT90PWM3B__)
 120               	#  include <avr/io90pwm3b.h>
 121               	#elif defined (__AVR_AT90PWM216__)
 122               	#  include <avr/io90pwm216.h>
 123               	#elif defined (__AVR_AT90PWM316__)
 124               	#  include <avr/io90pwm316.h>
 125               	#elif defined (__AVR_AT90PWM81__)
 126               	#  include <avr/io90pwm81.h>
 127               	#elif defined (__AVR_ATmega8U2__)
 128               	#  include <avr/iom8u2.h>
 129               	#elif defined (__AVR_ATmega16M1__)
 130               	#  include <avr/iom16m1.h>
 131               	#elif defined (__AVR_ATmega16U2__)
 132               	#  include <avr/iom16u2.h>
 133               	#elif defined (__AVR_ATmega16U4__)
 134               	#  include <avr/iom16u4.h>
 135               	#elif defined (__AVR_ATmega32C1__)
 136               	#  include <avr/iom32c1.h>
 137               	#elif defined (__AVR_ATmega32M1__)
 138               	#  include <avr/iom32m1.h>
 139               	#elif defined (__AVR_ATmega32U2__)
 140               	#  include <avr/iom32u2.h>
 141               	#elif defined (__AVR_ATmega32U4__)
 142               	#  include <avr/iom32u4.h>
 143               	#elif defined (__AVR_ATmega32U6__)
 144               	#  include <avr/iom32u6.h>
 145               	#elif defined (__AVR_ATmega64C1__)
 146               	#  include <avr/iom64c1.h>
 147               	#elif defined (__AVR_ATmega64M1__)
 148               	#  include <avr/iom64m1.h>
 149               	#elif defined (__AVR_ATmega128__)
 150               	#  include <avr/iom128.h>
 151               	#elif defined (__AVR_ATmega1280__)
 152               	#  include <avr/iom1280.h>
 153               	#elif defined (__AVR_ATmega1281__)
 154               	#  include <avr/iom1281.h>
 155               	#elif defined (__AVR_ATmega1284P__)
 156               	#  include <avr/iom1284p.h>
 157               	#elif defined (__AVR_ATmega128RFA1__)
 158               	#  include <avr/iom128rfa1.h>
 159               	#elif defined (__AVR_ATmega2560__)
 160               	#  include <avr/iom2560.h>
 161               	#elif defined (__AVR_ATmega2561__)
 162               	#  include <avr/iom2561.h>
 163               	#elif defined (__AVR_AT90CAN32__)
 164               	#  include <avr/iocan32.h>
 165               	#elif defined (__AVR_AT90CAN64__)
 166               	#  include <avr/iocan64.h>
 167               	#elif defined (__AVR_AT90CAN128__)
 168               	#  include <avr/iocan128.h>
 169               	#elif defined (__AVR_AT90USB82__)
 170               	#  include <avr/iousb82.h>
 171               	#elif defined (__AVR_AT90USB162__)
 172               	#  include <avr/iousb162.h>
 173               	#elif defined (__AVR_AT90USB646__)
 174               	#  include <avr/iousb646.h>
 175               	#elif defined (__AVR_AT90USB647__)
 176               	#  include <avr/iousb647.h>
 177               	#elif defined (__AVR_AT90USB1286__)
 178               	#  include <avr/iousb1286.h>
 179               	#elif defined (__AVR_AT90USB1287__)
 180               	#  include <avr/iousb1287.h>
 181               	#elif defined (__AVR_ATmega64__)
 182               	#  include <avr/iom64.h>
 183               	#elif defined (__AVR_ATmega640__)
 184               	#  include <avr/iom640.h>
 185               	#elif defined (__AVR_ATmega644__) || defined (__AVR_ATmega644A__)
 186               	#  include <avr/iom644.h>
 187               	#elif defined (__AVR_ATmega644P__)
 188               	#  include <avr/iom644p.h>
 189               	#elif defined (__AVR_ATmega644PA__)
 190               	#  include <avr/iom644pa.h>
 191               	#elif defined (__AVR_ATmega645__) || defined (__AVR_ATmega645A__) || defined (__AVR_ATmega645P__)
 192               	#  include <avr/iom645.h>
 193               	#elif defined (__AVR_ATmega6450__) || defined (__AVR_ATmega6450A__) || defined (__AVR_ATmega6450P__
 194               	#  include <avr/iom6450.h>
 195               	#elif defined (__AVR_ATmega649__) || defined (__AVR_ATmega649A__)
 196               	#  include <avr/iom649.h>
 197               	#elif defined (__AVR_ATmega6490__) || defined (__AVR_ATmega6490A__) || defined (__AVR_ATmega6490P__
 198               	#  include <avr/iom6490.h>
 199               	#elif defined (__AVR_ATmega649P__)
 200               	#  include <avr/iom649p.h>
 201               	#elif defined (__AVR_ATmega64HVE__)
 202               	#  include <avr/iom64hve.h>
 203               	#elif defined (__AVR_ATmega103__)
 204               	#  include <avr/iom103.h>
 205               	#elif defined (__AVR_ATmega32__)
 206               	#  include <avr/iom32.h>
 207               	#elif defined (__AVR_ATmega323__)
 208               	#  include <avr/iom323.h>
 209               	#elif defined (__AVR_ATmega324P__) || defined (__AVR_ATmega324A__)
 210               	#  include <avr/iom324.h>
 211               	#elif defined (__AVR_ATmega324PA__)
 212               	#  include <avr/iom324pa.h>
 213               	#elif defined (__AVR_ATmega325__)
 214               	#  include <avr/iom325.h>
 215               	#elif defined (__AVR_ATmega325P__)
 216               	#  include <avr/iom325.h>
 217               	#elif defined (__AVR_ATmega3250__)
 218               	#  include <avr/iom3250.h>
 219               	#elif defined (__AVR_ATmega3250P__)
 220               	#  include <avr/iom3250.h>
 221               	#elif defined (__AVR_ATmega328P__) || defined (__AVR_ATmega328__)
 222               	#  include <avr/iom328p.h>
   1               	/* Copyright (c) 2007 Atmel Corporation
 223               	#elif defined (__AVR_ATmega329__)
 224               	#  include <avr/iom329.h>
 225               	#elif defined (__AVR_ATmega329P__) || defined (__AVR_ATmega329PA__)
 226               	#  include <avr/iom329.h>
 227               	#elif defined (__AVR_ATmega3290__)
 228               	#  include <avr/iom3290.h>
 229               	#elif defined (__AVR_ATmega3290P__)
 230               	#  include <avr/iom3290.h>
 231               	#elif defined (__AVR_ATmega32HVB__)
 232               	#  include <avr/iom32hvb.h>
 233               	#elif defined (__AVR_ATmega406__)
 234               	#  include <avr/iom406.h>
 235               	#elif defined (__AVR_ATmega16__)
 236               	#  include <avr/iom16.h>
 237               	#elif defined (__AVR_ATmega16A__)
 238               	#  include <avr/iom16a.h>
 239               	#elif defined (__AVR_ATmega161__)
 240               	#  include <avr/iom161.h>
 241               	#elif defined (__AVR_ATmega162__)
 242               	#  include <avr/iom162.h>
 243               	#elif defined (__AVR_ATmega163__)
 244               	#  include <avr/iom163.h>
 245               	#elif defined (__AVR_ATmega164P__) || defined (__AVR_ATmega164A__)
 246               	#  include <avr/iom164.h>
 247               	#elif defined (__AVR_ATmega165__) || defined (__AVR_ATmega165A__)
 248               	#  include <avr/iom165.h>
 249               	#elif defined (__AVR_ATmega165P__)
 250               	#  include <avr/iom165p.h>
 251               	#elif defined (__AVR_ATmega168__) || defined (__AVR_ATmega168A__)
 252               	#  include <avr/iom168.h>
 253               	#elif defined (__AVR_ATmega168P__)
 254               	#  include <avr/iom168p.h>
 255               	#elif defined (__AVR_ATmega169__) || defined (__AVR_ATmega169A__)
 256               	#  include <avr/iom169.h>
 257               	#elif defined (__AVR_ATmega169P__)
 258               	#  include <avr/iom169p.h>
 259               	#elif defined (__AVR_ATmega169PA__)
 260               	#  include <avr/iom169pa.h>
 261               	#elif defined (__AVR_ATmega8HVA__)
 262               	#  include <avr/iom8hva.h>
 263               	#elif defined (__AVR_ATmega16HVA__)
 264               	#  include <avr/iom16hva.h>
 265               	#elif defined (__AVR_ATmega16HVA2__)
 266               	#  include <avr/iom16hva2.h>
 267               	#elif defined (__AVR_ATmega16HVB__)
 268               	#  include <avr/iom16hvb.h>
 269               	#elif defined (__AVR_ATmega8__)
 270               	#  include <avr/iom8.h>
 271               	#elif defined (__AVR_ATmega48__) || defined (__AVR_ATmega48A__)
 272               	#  include <avr/iom48.h>
 273               	#elif defined (__AVR_ATmega48P__)
 274               	#  include <avr/iom48p.h>
 275               	#elif defined (__AVR_ATmega88__) || defined (__AVR_ATmega88A__)
 276               	#  include <avr/iom88.h>
 277               	#elif defined (__AVR_ATmega88P__)
 278               	#  include <avr/iom88p.h>
 279               	#elif defined (__AVR_ATmega88PA__)
 280               	#  include <avr/iom88pa.h>
 281               	#elif defined (__AVR_ATmega8515__)
 282               	#  include <avr/iom8515.h>
 283               	#elif defined (__AVR_ATmega8535__)
 284               	#  include <avr/iom8535.h>
 285               	#elif defined (__AVR_AT90S8535__)
 286               	#  include <avr/io8535.h>
 287               	#elif defined (__AVR_AT90C8534__)
 288               	#  include <avr/io8534.h>
 289               	#elif defined (__AVR_AT90S8515__)
 290               	#  include <avr/io8515.h>
 291               	#elif defined (__AVR_AT90S4434__)
 292               	#  include <avr/io4434.h>
 293               	#elif defined (__AVR_AT90S4433__)
 294               	#  include <avr/io4433.h>
 295               	#elif defined (__AVR_AT90S4414__)
 296               	#  include <avr/io4414.h>
 297               	#elif defined (__AVR_ATtiny22__)
 298               	#  include <avr/iotn22.h>
 299               	#elif defined (__AVR_ATtiny26__)
 300               	#  include <avr/iotn26.h>
 301               	#elif defined (__AVR_AT90S2343__)
 302               	#  include <avr/io2343.h>
 303               	#elif defined (__AVR_AT90S2333__)
 304               	#  include <avr/io2333.h>
 305               	#elif defined (__AVR_AT90S2323__)
 306               	#  include <avr/io2323.h>
 307               	#elif defined (__AVR_AT90S2313__)
 308               	#  include <avr/io2313.h>
 309               	#elif defined (__AVR_ATtiny2313__)
 310               	#  include <avr/iotn2313.h>
 311               	#elif defined (__AVR_ATtiny2313A__)
 312               	#  include <avr/iotn2313a.h>
 313               	#elif defined (__AVR_ATtiny13__)
 314               	#  include <avr/iotn13.h>
 315               	#elif defined (__AVR_ATtiny13A__)
 316               	#  include <avr/iotn13a.h>
 317               	#elif defined (__AVR_ATtiny25__)
 318               	#  include <avr/iotn25.h>
 319               	#elif defined (__AVR_ATtiny4313__)
 320               	#  include <avr/iotn4313.h>
 321               	#elif defined (__AVR_ATtiny45__)
 322               	#  include <avr/iotn45.h>
 323               	#elif defined (__AVR_ATtiny85__)
 324               	#  include <avr/iotn85.h>
 325               	#elif defined (__AVR_ATtiny24__)
 326               	#  include <avr/iotn24.h>
 327               	#elif defined (__AVR_ATtiny24A__)
 328               	#  include <avr/iotn24a.h>
 329               	#elif defined (__AVR_ATtiny44__)
 330               	#  include <avr/iotn44.h>
 331               	#elif defined (__AVR_ATtiny44A__)
 332               	#  include <avr/iotn44a.h>
 333               	#elif defined (__AVR_ATtiny84__)
 334               	#  include <avr/iotn84.h>
 335               	#elif defined (__AVR_ATtiny261__)
 336               	#  include <avr/iotn261.h>
 337               	#elif defined (__AVR_ATtiny261A__)
 338               	#  include <avr/iotn261a.h>
 339               	#elif defined (__AVR_ATtiny461__)
 340               	#  include <avr/iotn461.h>
 341               	#elif defined (__AVR_ATtiny461A__)
 342               	#  include <avr/iotn461a.h>
 343               	#elif defined (__AVR_ATtiny861__)
 344               	#  include <avr/iotn861.h>
 345               	#elif defined (__AVR_ATtiny861A__)
 346               	#  include <avr/iotn861a.h>
 347               	#elif defined (__AVR_ATtiny43U__)
 348               	#  include <avr/iotn43u.h>
 349               	#elif defined (__AVR_ATtiny48__)
 350               	#  include <avr/iotn48.h>
 351               	#elif defined (__AVR_ATtiny88__)
 352               	#  include <avr/iotn88.h>
 353               	#elif defined (__AVR_ATtiny87__)
 354               	#  include <avr/iotn87.h>
 355               	#elif defined (__AVR_ATtiny167__)
 356               	#  include <avr/iotn167.h>
 357               	#elif defined (__AVR_AT90SCR100__)
 358               	#  include <avr/io90scr100.h>
 359               	#elif defined (__AVR_ATxmega16A4__)
 360               	#  include <avr/iox16a4.h>
 361               	#elif defined (__AVR_ATxmega16D4__)
 362               	#  include <avr/iox16d4.h>
 363               	#elif defined (__AVR_ATxmega32A4__)
 364               	#  include <avr/iox32a4.h>
 365               	#elif defined (__AVR_ATxmega32D4__)
 366               	#  include <avr/iox32d4.h>
 367               	#elif defined (__AVR_ATxmega64A1__)
 368               	#  include <avr/iox64a1.h>
 369               	#elif defined (__AVR_ATxmega64A3__)
 370               	#  include <avr/iox64a3.h>
 371               	#elif defined (__AVR_ATxmega64D3__)
 372               	#  include <avr/iox64d3.h>
 373               	#elif defined (__AVR_ATxmega128A1__)
 374               	#  include <avr/iox128a1.h>
 375               	#elif defined (__AVR_ATxmega128A3__)
 376               	#  include <avr/iox128a3.h>
 377               	#elif defined (__AVR_ATxmega128D3__)
 378               	#  include <avr/iox128d3.h>
 379               	#elif defined (__AVR_ATxmega192A3__)
 380               	#  include <avr/iox192a3.h>
 381               	#elif defined (__AVR_ATxmega192D3__)
 382               	#  include <avr/iox192d3.h>
 383               	#elif defined (__AVR_ATxmega256A3__)
 384               	#  include <avr/iox256a3.h>
 385               	#elif defined (__AVR_ATxmega256A3B__)
 386               	#  include <avr/iox256a3b.h>
 387               	#elif defined (__AVR_ATxmega256D3__)
 388               	#  include <avr/iox256d3.h>
 389               	#elif defined (__AVR_ATA6289__)
 390               	#  include <avr/ioa6289.h>
 391               	/* avr1: the following only supported for assembler programs */
 392               	#elif defined (__AVR_ATtiny28__)
 393               	#  include <avr/iotn28.h>
 394               	#elif defined (__AVR_AT90S1200__)
 395               	#  include <avr/io1200.h>
 396               	#elif defined (__AVR_ATtiny15__)
 397               	#  include <avr/iotn15.h>
 398               	#elif defined (__AVR_ATtiny12__)
 399               	#  include <avr/iotn12.h>
 400               	#elif defined (__AVR_ATtiny11__)
 401               	#  include <avr/iotn11.h>
 402               	#else
 403               	#  if !defined(__COMPILING_AVR_LIBC__)
 404               	#    warning "device type not defined"
 405               	#  endif
 406               	#endif
 407               	
 408               	#include <avr/portpins.h>
   1               	/* Copyright (c) 2003  Theodore A. Roth
 409               	
 410               	#include <avr/common.h>
   1               	/* Copyright (c) 2007 Eric B. Weddington
 411               	
 412               	#include <avr/version.h>
   1               	/* Copyright (c) 2005, Joerg Wunsch                               -*- c -*-
 413               	
 414               	/* Include fuse.h after individual IO header files. */
 415               	#include <avr/fuse.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 416               	
 417               	/* Include lock.h after individual IO header files. */
 418               	#include <avr/lock.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 419               	
   3               	#include <avr/interrupt.h>
   1               	/* Copyright (c) 2002,2005,2007 Marek Michalkiewicz
   4               	#include "kernel.h"
   1               	
   5               	
   6               	;define user macros 
   7               	.equ     KER_TR ,         1000   ;TickRate in Hz, only defined, not calculated
   8               	.equ     KER_PRS,         0x03   ;For prescaler 64, manually select
   9               	.equ     KER_RLD,         0x82   ;ReloadVal = 0xFF-(F_CPU/prescaler/KER_TR)
  10               	
  11               	.equ     KER_TSK0_DDR,    0x0A   ;DDRD IO address
  12               	.equ     KER_TSK0_PORT,   0x0B   ;PORTD IO address
  13               	.equ     KER_TSK0_PIN,    0x05   ;PORTD5 pin
  14               	
  15               	.equ     KER_TSK1_DDR,    0x0A   ;DDRD IO address
  16               	.equ     KER_TSK1_PORT,   0x0B   ;PORTD IO address
  17               	.equ     KER_TSK1_PIN,    0x06   ;PORTD6 pin
  18               	
  19               	.equ     KER_TSK2_DDR,    0x0A   ;DDRD IO address
  20               	.equ     KER_TSK2_PORT,   0x0B   ;PORTD IO address
  21               	.equ     KER_TSK2_PIN,    0x07   ;PORTD7 pin
  22               	
  23               	.equ     KER_STZ,         128    ;stack size for each task
  24               	
  25               	
  26               	;define hardware register addresses macros 
  27               	.equ     SRSREG,          0x5F   ;manually defined SREG in SRAM
  28               	.equ     SRSPH,           0x5E   ;manually defined SPH in SRAM
  29               	.equ     SRSPL,           0x5D   ;manually defined SPL in SRAM
  30               	
  31               	.equ     SRTIMSK0,        0x6E   ;manually defined TIMSK0 in SRAM
  32               	.equ     SROCR0B,         0x48   ;manually defined OCR0B in SRAM
  33               	.equ     SROCR0A,         0x47   ;manually defined OCR0A in SRAM
  34               	.equ     SRTCNT0,         0x46   ;manually defined TCNT0 in SRAM
  35               	.equ     SRTCCR0B,        0x45   ;manually defined TCCR0B in SRAM
  36               	.equ     SRTCCR0A,        0x44   ;manually defined TCCR0A in SRAM
  37               	.equ     SRTIFR0,         0x35   ;manually defined TIFR0 in SRAM
  38               	
  39               	.equ     IOOCR0B,         0x28   ;manually defined OCR0B in IO
  40               	.equ     IOOCR0A,         0x27   ;manually defined OCR0A in IO
  41               	.equ     IOTCNT0,         0x26   ;manually defined TCNT0 in IO
  42               	.equ     IOTCCR0B,        0x25   ;manually defined TCCR0B in IO
  43               	.equ     IOTCCR0A,        0x24   ;manually defined TCCR0A in IO
  44               	.equ     IOTIFR0,         0x15   ;manually defined TIFR0 in IO
  45               	
  46               	.equ     IOSREG,          0x3F   ;manually defined SREG in IO
  47               	.equ     IOSPH,           0x3E   ;manually defined SPH in IO
  48               	.equ     IOSPL,           0x3D   ;manually defined SPL in IO
  49               	
  50               	
  51               	
  52               	
  53               	;Initialize global variables
  54               	.section .bss
  55               	.global  Kernel                  ;declare global space for kernel
  56               	Kernel:
  57 0000 0000 0000 	.skip 9                          ;5B->TickCounter, 1B->ovf
  57      0000 0000 
  57      00
  58               	
  59               	.global  ker_tski                ;declare global space for task index
  60               	ker_tski:
  61 0009 00        	.skip 1   
  62               	
  63               	.global  ker_stp                 ;declare global space for stack pointers
  64               	ker_stp:
  65 000a 0000 0000 	.skip 6                         
  65      0000 
  66               	
  67               	.global  ker_stk0                ;declare global space for stack of task0
  68               	ker_stk0:
  69 0010 0000 0000 	.skip KER_STZ                         
  69      0000 0000 
  69      0000 0000 
  69      0000 0000 
  69      0000 0000 
  69      0000 0000 
  69      0000 0000 
  69      0000 0000 
  69      0000 0000 
  69      0000 0000 
  69      0000 0000 
  69      0000 0000 
  69      0000 0000 
  69      0000 0000 
  69      0000 0000 
  69      0000 0000 
  69      0000 0000 
  69      0000 0000 
  69      0000 0000 
  69      0000 0000 
  69      0000 0000 
  69      0000 0000 
  69      0000 0000 
  69      0000 0000 
  69      0000 0000 
  69      0000 0000 
  69      0000 0000 
  69      0000 0000 
  69      0000 0000 
  69      0000 0000 
  69      0000 0000 
  69      0000 0000 
  70               	
  71               	.global  ker_stk1                ;declare global space for stack of task1
  72               	ker_stk1:
  73 0090 0000 0000 	.skip KER_STZ                        
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  74               	
  75               	.global  ker_stk2                ;declare global space for stack of task2
  76               	ker_stk2:
  77 0110 0000 0000 	.skip KER_STZ                         
  77      0000 0000 
  77      0000 0000 
  77      0000 0000 
  77      0000 0000 
  77      0000 0000 
  77      0000 0000 
  77      0000 0000 
  77      0000 0000 
  77      0000 0000 
  77      0000 0000 
  77      0000 0000 
  77      0000 0000 
  77      0000 0000 
  77      0000 0000 
  77      0000 0000 
  77      0000 0000 
  77      0000 0000 
  77      0000 0000 
  77      0000 0000 
  77      0000 0000 
  77      0000 0000 
  77      0000 0000 
  77      0000 0000 
  77      0000 0000 
  77      0000 0000 
  77      0000 0000 
  77      0000 0000 
  77      0000 0000 
  77      0000 0000 
  77      0000 0000 
  77      0000 0000 
  78               	
  79               	
  80               	
  81               	
  82               	;Initialize vectors
  83               	.section .vectors, "ax", @progbits
  84 0000 0000 0000 	.org    0x20
  84      0000 0000 
  84      0000 0000 
  84      0000 0000 
  84      0000 0000 
  84      0000 0000 
  84      0000 0000 
  84      0000 0000 
  85:kernel.S      ****         RJMP  __vector_16
  86               	
  87               	
  88               	
  89               	;Code section start
  90               	.section .text
  91               	
  92               	
  93               	
  94               	;Initialize global functions
  95               	.global  Kernel_SysTick_Reg_Init
  96               	.global  Kernel_SysTick_Val_Get
  97               	.global  Kernel_Interrupt_Sts_Get
  98               	
  99               	.global  Kernel_Test_Task0
 100               	.global  Kernel_Test_Task1
 101               	.global  Kernel_Test_Task2
 102               	
 103               	.global  Kernel_Task0_Init
 104               	.global  Kernel_Task1_Init
 105               	.global  Kernel_Task2_Init
 106               	
 107               	
 108               	;Initialize interrupt vector subroutine
 109               	.global  __vector_16
 110               	    __vector_16:
 111               		    
 112               			;;============================if kernel debug enabled===============================;;
 113               		    #ifdef KER_DBG_ENABLE
 114:kernel.S      ****         SBI   KER_DBG_PORT       , KER_DBG_PIN            ;set gpio,                (2 clocks)
 115               			#endif
 116               			
 117               			
 118               			;;==============================context save========================================;;
 119               			;; total 68 clocks for context saving
 120:kernel.S      ****         PUSH  R0                                          ;save R0,                 (2 clocks)
 121:kernel.S      **** 		IN    R0                 , IOSREG                 ;load SREG,               (1 clock )
 122:kernel.S      **** 		PUSH  R0                                          ;save SREG,               (2 clocks)
 123:kernel.S      **** 		PUSH  R1                                          ;save R1,                 (2 clocks)   
 124:kernel.S      **** 		CLR   R1                                          ;clear R1,                (1 clock )
 125:kernel.S      **** 		PUSH  R2                                          ;save R2,                 (2 clocks)   
 126:kernel.S      **** 		PUSH  R3                                          ;save R3,                 (2 clocks)   
 127:kernel.S      **** 		PUSH  R4                                          ;save R4,                 (2 clocks)   
 128:kernel.S      **** 		PUSH  R5                                          ;save R5,                 (2 clocks)   
 129:kernel.S      **** 		PUSH  R6                                          ;save R6,                 (2 clocks)   
 130:kernel.S      **** 		PUSH  R7                                          ;save R7,                 (2 clocks)   
 131:kernel.S      **** 		PUSH  R8                                          ;save R8,                 (2 clocks)   
 132:kernel.S      **** 		PUSH  R9                                          ;save R9,                 (2 clocks)   
 133:kernel.S      **** 		PUSH  R10                                         ;save R10,                (2 clocks)   
 134:kernel.S      **** 		PUSH  R11                                         ;save R11,                (2 clocks)  
 135:kernel.S      **** 		PUSH  R12                                         ;save R12,                (2 clocks)  
 136:kernel.S      **** 		PUSH  R13                                         ;save R13,                (2 clocks)  
 137:kernel.S      **** 		PUSH  R14                                         ;save R14,                (2 clocks)  
 138:kernel.S      **** 		PUSH  R15                                         ;save R15,                (2 clocks)  
 139:kernel.S      **** 		PUSH  R16                                         ;save R16,                (2 clocks)  
 140:kernel.S      **** 		PUSH  R17                                         ;save R17,                (2 clocks)  
 141:kernel.S      **** 		PUSH  R18                                         ;save R18,                (2 clocks)  
 142:kernel.S      **** 		PUSH  R19                                         ;save R19,                (2 clocks)  
 143:kernel.S      **** 		PUSH  R20                                         ;save R20,                (2 clocks)  
 144:kernel.S      **** 		PUSH  R21                                         ;save R21,                (2 clocks)  
 145:kernel.S      **** 		PUSH  R22                                         ;save R22,                (2 clocks)  
 146:kernel.S      **** 		PUSH  R23                                         ;save R23,                (2 clocks)  
 147:kernel.S      **** 		PUSH  R24                                         ;save R24,                (2 clocks)  
 148:kernel.S      **** 		PUSH  R25                                         ;save R25,                (2 clocks)  
 149:kernel.S      **** 		PUSH  R26                                         ;save R26,                (2 clocks)  
 150:kernel.S      **** 		PUSH  R27                                         ;save R27,                (2 clocks)  
 151:kernel.S      **** 		PUSH  R28                                         ;save R28,                (2 clocks)  
 152:kernel.S      **** 		PUSH  R29                                         ;save R29,                (2 clocks)  
 153:kernel.S      **** 		PUSH  R30                                         ;save R30,                (2 clocks)  
 154:kernel.S      **** 		PUSH  R31                                         ;save R31,                (2 clocks)  
 155               			
 156               			
 157               			;;=============================reload counter value=================================;;
 158               			;; total 4 clocks for reloading
 159:kernel.S      **** 		LDS   R16                , Kernel+0x08            ;fetch reload value,      (2 clocks) 
 160:kernel.S      **** 		STS   SRTCNT0            , R16                    ;Set value to TCNT0,      (2 clocks) 
 161               			
 162               			
 163               			;;=============================increment tick counter===============================;;
 164               			;; total 26 clocks for reloading, 40 bit counter
 165:kernel.S      **** 		LDI   R16                , 0x01                   ;load 1 to R16,           (1 clock )
 166:kernel.S      **** 		LDS   R17                , Kernel+0x00            ;load Byte0,              (2 clocks)
 167:kernel.S      **** 		ADD   R17                , R16                    ;add 1 with Byte0,        (1 clock )
 168:kernel.S      **** 		STS   Kernel+0x00        , R17                    ;set Byte0,               (2 clocks)
 169:kernel.S      **** 		LDS   R17                , Kernel+0x01            ;load Byte1,              (2 clocks)
 170:kernel.S      **** 		ADC   R17                , R1                     ;add carry with Byte1,    (1 clock )
 171:kernel.S      **** 		STS   Kernel+0x01        , R17                    ;set Byte1,               (2 clocks)
 172:kernel.S      **** 		LDS   R17                , Kernel+0x02            ;load Byte2,              (2 clocks)
 173:kernel.S      **** 		ADC   R17                , R1                     ;add carry with Byte2,    (1 clock )
 174:kernel.S      **** 		STS   Kernel+0x02        , R17                    ;set Byte2,               (2 clocks)
 175:kernel.S      **** 		LDS   R17                , Kernel+0x03            ;load Byte3,              (2 clocks)
 176:kernel.S      **** 		ADC   R17                , R1                     ;add carry with Byte3,    (1 clock )
 177:kernel.S      **** 		STS   Kernel+0x03        , R17                    ;set Byte3,               (2 clocks)
 178:kernel.S      **** 		LDS   R17                , Kernel+0x04            ;load Byte4,              (2 clocks)
 179:kernel.S      **** 		ADC   R17                , R1                     ;add carry with Byte4,    (1 clock )
 180:kernel.S      **** 		STS   Kernel+0x04        , R17                    ;set Byte4,               (2 clocks)
 181               			
 182               			
 183               			;;========================check current task index, save SP=========================;;
 184               			;;
 185               		    ;LDS   R16                , ker_tski               ;fetch task index,        (2 clocks)
 186               			;CPI   R16                , 0                      ;check if val!=0          (1 clock )
 187               			;BRNE  TSK1                                        ;goto saving task1 SP     (2 clocks)
 188               			
 189               			
 190               			
 191               			;;======================save stack pointer0, set task index 1=======================;;
 192               			;;
 193               		;TSK0:
 194               		    ;IN    R24                , IOSPL                  ;fetch SPL0,              (1 clock )
 195               			;IN    R25                , IOSPH                  ;fetch SPH0,              (1 clock )
 196               			;STS   ker_stp+0x00       , R24                    ;load  SPL0,              (2 clocks)
 197               			;STS   ker_stp+0x01       , R25                    ;load  SPH0,              (2 clocks)
 198               			;LDI   R16                , 0x01                   ;set ker_tski to 1,       (1 clock )
 199               			;STS   ker_tski           , R16                    ;load  ker_tski=1,        (2 clocks)
 200               			;skip TSK1, switch task by loading task1 SP 
 201               			;LDS   R24                , ker_stp+0x02           ;fetch SPL0,              (2 clocks)
 202               			;LDS   R25                , ker_stp+0x03           ;fetch SPH0,              (2 clocks)
 203               			;OUT   IOSPL              , R24                    ;load SPL0,               (1 clock )
 204               			;OUT   IOSPH              , R25                    ;load SPH0,               (1 clock )
 205               			;RJMP  RS_CNTXT                                    ;jump to restore context, (2 clocks)
 206               			
 207               			
 208               		    ;;======================save stack pointer1, set task index 0=======================;;
 209               			;;
 210               		;TSK1:
 211               		    ;IN    R24                , IOSPL                  ;fetch SPL0,              (1 clock )
 212               			;IN    R25                , IOSPH                  ;fetch SPH0,              (1 clock )
 213               			;STS   ker_stp+0x02       , R24                    ;load  SPL0,              (2 clocks)
 214               			;STS   ker_stp+0x03       , R25                    ;load  SPH0,              (2 clocks)
 215               			;LDI   R16                , 0x00                   ;set ker_tski to 0,       (1 clock )
 216               			;STS   ker_tski           , R16                    ;load  ker_tski=0,        (2 clocks)
 217               			;switch task by loading task0 SP 
 218               			;LDS   R24                , ker_stp+0x00           ;fetch SPL0,              (2 clocks)
 219               			;LDS   R25                , ker_stp+0x01           ;fetch SPH0,              (2 clocks)
 220               			;OUT   IOSPL              , R24                    ;load SPL0,               (1 clock )
 221               			;OUT   IOSPH              , R25                    ;load SPH0,               (1 clock )
 222               			
 223               			
 224               		;RS_CNTXT:
 225               			;;===============================context restore====================================;;
 226               			;; total 68 clocks for context restore
 227:kernel.S      **** 		POP   R31                                         ;restore R31,             (2 clocks) 
 228:kernel.S      **** 		POP   R30                                         ;restore R30,             (2 clocks) 
 229:kernel.S      **** 		POP   R29                                         ;restore R29,             (2 clocks)
 230:kernel.S      **** 		POP   R28                                         ;restore R28,             (2 clocks) 
 231:kernel.S      **** 		POP   R27                                         ;restore R27,             (2 clocks) 
 232:kernel.S      **** 		POP   R26                                         ;restore R26,             (2 clocks) 
 233:kernel.S      **** 		POP   R25                                         ;restore R25,             (2 clocks) 
 234:kernel.S      **** 		POP   R24                                         ;restore R24,             (2 clocks) 
 235:kernel.S      **** 		POP   R23                                         ;restore R23,             (2 clocks) 
 236:kernel.S      **** 		POP   R22                                         ;restore R22,             (2 clocks) 
 237:kernel.S      **** 		POP   R21                                         ;restore R21,             (2 clocks) 
 238:kernel.S      **** 		POP   R20                                         ;restore R20,             (2 clocks) 
 239:kernel.S      **** 		POP   R19                                         ;restore R19,             (2 clocks) 
 240:kernel.S      **** 		POP   R18                                         ;restore R18,             (2 clocks) 
 241:kernel.S      **** 		POP   R17                                         ;restore R17,             (2 clocks) 
 242:kernel.S      **** 		POP   R16                                         ;restore R16,             (2 clocks) 
 243:kernel.S      **** 		POP   R15                                         ;restore R15,             (2 clocks) 
 244:kernel.S      **** 		POP   R14                                         ;restore R14,             (2 clocks) 
 245:kernel.S      **** 		POP   R13                                         ;restore R13,             (2 clocks) 
 246:kernel.S      **** 		POP   R12                                         ;restore R12,             (2 clocks) 
 247:kernel.S      **** 		POP   R11                                         ;restore R11,             (2 clocks) 
 248:kernel.S      **** 		POP   R10                                         ;restore R10,             (2 clocks) 
 249:kernel.S      **** 		POP   R9                                          ;restore R9,              (2 clocks) 
 250:kernel.S      **** 		POP   R8                                          ;restore R8,              (2 clocks) 
 251:kernel.S      **** 		POP   R7                                          ;restore R7,              (2 clocks) 
 252:kernel.S      **** 		POP   R6                                          ;restore R6,              (2 clocks) 
 253:kernel.S      **** 		POP   R5                                          ;restore R5,              (2 clocks) 
 254:kernel.S      **** 		POP   R4                                          ;restore R4,              (2 clocks) 
 255:kernel.S      **** 		POP   R3                                          ;restore R3,              (2 clocks) 
 256:kernel.S      **** 		POP   R2                                          ;restore R2,              (2 clocks) 
 257:kernel.S      **** 		POP   R1                                          ;restore R1,              (2 clocks) 
 258:kernel.S      **** 		POP   R0                                          ;fetch SREG,              (2 clocks) 
 259:kernel.S      **** 		OUT   0x3F               , R0                     ;load SREG,               (1 clock ) 
 260:kernel.S      **** 		POP   R0                                          ;restore R0,              (2 clocks) 
 261               			
 262               			
 263               			;;============================if kernel debug enabled===============================;;
 264               			#ifdef KER_DBG_ENABLE
 265:kernel.S      **** 		CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear gpio,              (2 clocks)
 266               			#endif
 267               			
 268:kernel.S      **** 		RETI                                              ;return from interrupt,   (4 clocks) 
 269               	
 270               	
 271               	
 272               	;;====================================SysTick Reg Init=======================================;;
 273               	;; total 32 clocks for SysTick Reg Init, omited debug gpio config
 274               	Kernel_SysTick_Reg_Init:
 275               	        ;clear all kernel variables
 276:kernel.S      **** 		LDI   R16                , 0x00                   ;set ker_tski to 0,       (1 clock )
 277:kernel.S      **** 		STS   ker_tski           , R16                    ;load  ker_tski=0,        (2 clocks)
 278:kernel.S      **** 		STS   Kernel+0x00        , R16                    ;clear  kernel[0],        (2 clocks)
 279:kernel.S      **** 		STS   Kernel+0x01        , R16                    ;clear  kernel[1],        (2 clocks)
 280:kernel.S      **** 		STS   Kernel+0x02        , R16                    ;clear  kernel[2],        (2 clocks)
 281:kernel.S      **** 		STS   Kernel+0x03        , R16                    ;clear  kernel[3],        (2 clocks)
 282:kernel.S      **** 		STS   Kernel+0x04        , R16                    ;clear  kernel[4],        (2 clocks)
 283:kernel.S      **** 		STS   Kernel+0x05        , R16                    ;clear  kernel[5],        (2 clocks)
 284:kernel.S      **** 		STS   Kernel+0x06        , R16                    ;clear  kernel[6],        (2 clocks)
 285:kernel.S      **** 		STS   Kernel+0x07        , R16                    ;clear  kernel[7],        (2 clocks)
 286:kernel.S      **** 		STS   Kernel+0x08        , R16                    ;clear  kernel[8],        (2 clocks)
 287               			
 288               			#ifdef KER_DBG_ENABLE
 289:kernel.S      **** 		SBI   KER_DBG_DDR        , KER_DBG_PIN            ;set bit in DDR,          (2 clocks) 
 290:kernel.S      **** 		CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear port bit,          (2 clocks) 
 291               			#endif
 292               			
 293               			
 294:kernel.S      ****         CLI                                               ;disable global interrupt,(1 clock ) 
 295:kernel.S      **** 		LDI   R16                , 0x00                   ;store r16 with 0,        (1 clock ) 
 296:kernel.S      **** 		STS   SRTCCR0A           , R16                    ;clear TCCR0A,            (2 clocks) 
 297:kernel.S      **** 		STS   SRTCCR0B           , R16                    ;clear TCCR0B,            (2 clocks) 
 298:kernel.S      **** 		STS   SRTIMSK0           , R16                    ;clear TIMSK0,            (2 clocks) 
 299:kernel.S      **** 		STS   SRTIFR0            , R16                    ;clear TIFR0,             (2 clocks) 
 300:kernel.S      **** 		STS   SROCR0A            , R16                    ;clear OCR0A,             (2 clocks) 
 301:kernel.S      **** 		STS   SROCR0B            , R16                    ;clear OCR0B,             (2 clocks) 
 302:kernel.S      **** 		STS   SRTCNT0            , R16                    ;clear TCNT0,             (2 clocks) 
 303:kernel.S      **** 		LDI   R16                , KER_PRS                ;prescaler 64,            (1 clock ) 
 304:kernel.S      **** 		STS   SRTCCR0B           , R16                    ;set to TCCR0B,           (2 clocks)
 305:kernel.S      **** 		LDI   R16                , KER_RLD                ;reload value (130),      (1 clock ) 
 306:kernel.S      **** 		STS   Kernel+0x08        , R16                    ;Kernel[5] reload value,  (2 clocks) 
 307:kernel.S      **** 		STS   SRTCNT0            , R16                    ;set to TCNT0,            (2 clocks) 
 308:kernel.S      **** 		LDI   R16                , 0x01                   ;store with TOIE0 enabled,(1 clock ) 
 309:kernel.S      **** 		STS   SRTIMSK0           , R16                    ;set to TIMSK0,           (2 clocks) 
 310:kernel.S      **** 		SEI                                               ;enable global interrupt, (1 clock ) 
 311:kernel.S      **** 		RET                                               ;return from subroutine,  (4 clocks) 
 312               	
 313               	
 314               	
 315               	;;===================================SysTick Value Get======================================;;
 316               	;; total 20 clocks for SysTick Value Get
 317               	;; interrupts disabled for 16 clocks
 318               	Kernel_SysTick_Val_Get:
 319:kernel.S      ****         IN    R16                , IOSREG                 ;Save SREG,               (1 clock ) 
 320:kernel.S      ****         CLI                                               ;Disable interrupts,      (1 clock ) 
 321:kernel.S      **** 		LDS   R18		         , Kernel+0x00            ;Byte0 -> R18 (LSB),      (2 clocks) 
 322:kernel.S      **** 		LDS   R19		         , Kernel+0x01            ;Byte1 -> R19,            (2 clocks) 
 323:kernel.S      **** 		LDS   R20		         , Kernel+0x02            ;Byte2 -> R20,            (2 clocks) 
 324:kernel.S      **** 		LDS   R21		         , Kernel+0x03            ;Byte3 -> R21,            (2 clocks) 
 325:kernel.S      **** 		LDS   R22		         , Kernel+0x04            ;Byte4 -> R22,            (2 clocks) 
 326:kernel.S      **** 		LDI   R23		         , 0x00                   ;Byte4 -> R23,            (2 clocks) 
 327:kernel.S      **** 		LDI   R24		         , 0x00                   ;Byte4 -> R24,            (2 clocks) 
 328:kernel.S      **** 		LDI   R25		         , 0x00                   ;Byte4 -> R25 (MSB),      (2 clocks) 
 329:kernel.S      **** 		OUT   IOSREG             , R16          		  ;Restore SREG,            (1 clock )
 330:kernel.S      **** 		RET                                               ;return from subroutine,  (4 clocks) 
 331               	
 332               	
 333               	
 334               	;;=================================Interrupt Status Get=====================================;;
 335               	;; total 10 clocks for Interrupt Status Get
 336               	Kernel_Interrupt_Sts_Get:
 337:kernel.S      ****         LDI   R24		         , 0x00                   ;clear R24,               (1 clock ) 
 338:kernel.S      ****         IN    R16		         , IOSREG                 ;save SREG in R16,        (1 clock )
 339:kernel.S      **** 		SBRC  R16		         , 0x07                   ;check I flag->bit7,      (3 clocks)
 340:kernel.S      **** 		LDI   R24		         , 0x01                   ;set R24 to 1,            (1 clock ) 
 341:kernel.S      **** 		RET                                               ;return from subroutine,  (4 clocks) 
 342               	
 343               	
 344               	
 345               	
 346               	
 347               	
 348               	
 349               	
 350               	
 351               	
 352               	
 353               	
 354               	
 355               	;;===================================Kernel Test Task0======================================;;
 356               	Kernel_Test_Task0:
 357               	        ;initialize DDR and Port register, total 4 clocks
 358:kernel.S      ****         SBI   KER_TSK0_DDR       , KER_TSK0_PIN           ;set bit in DDR,          (2 clocks) 
 359:kernel.S      **** 		CBI   KER_TSK0_PORT      , KER_TSK0_PIN           ;clear port bit,          (2 clocks)
 360               			 
 361               	    LOOP0:
 362               		    ;pin toggle, total 5 clocks
 363:kernel.S      **** 		IN    R16                , KER_TSK0_PORT          ;load PORT val,           (2 clocks)
 364:kernel.S      **** 		LDI   R17                , (1<<KER_TSK0_PIN)      ;bit mask for port pin    (1 clock )
 365:kernel.S      **** 		EOR   R16                , R17                    ;XOR with current val     (1 clock )
 366:kernel.S      **** 		OUT   KER_TSK0_PORT      , R16                    ;set new PORT val,        (1 clock )
 367               			
 368               			;assign delay loop count val, for 30ms 
 369:kernel.S      **** 		LDI   R16                , 0xEB                   ;set loop cnt val,        (1 clock )
 370               			
 371               	    DLY00:
 372:kernel.S      **** 	    LDI   R17                , 0xFF                   ;set loop cnt val,        (1 clock )
 373               			
 374               		DLY01:                                                ;inner loop,127.5uS@8Mhz  (4 clocks)
 375:kernel.S      **** 		NOP                                               ;no operation,            (1 clock )
 376:kernel.S      **** 		DEC   R17                                         ;decrement R17 val,       (1 clock )
 377:kernel.S      **** 		BRNE  DLY01                                       ;if R17 not equal to 0,   (2 clock ) 
 378:kernel.S      **** 		DEC   R16                                         ;decrement R16 val,       (1 clock )
 379:kernel.S      **** 		BRNE  DLY00                                       ;if R16 not equal to 0,   (2 clock ) 
 380:kernel.S      **** 		RJMP  LOOP0                                       ;if R16 is 0->jump,       (2 clock ) 
 381:kernel.S      **** 		RET                                               ;return from subroutine,  (4 clocks) 
 382               	
 383               	
 384               	
 385               	;;===================================Kernel Test Task1======================================;;
 386               	Kernel_Test_Task1:
 387               	        ;initialize DDR and Port register, total 4 clocks
 388:kernel.S      ****         SBI   KER_TSK1_DDR       , KER_TSK1_PIN           ;set bit in DDR,          (2 clocks) 
 389:kernel.S      **** 		CBI   KER_TSK1_PORT      , KER_TSK1_PIN           ;clear port bit,          (2 clocks)
 390               			 
 391               	    LOOP1:
 392               		    ;pin toggle, total 5 clocks
 393:kernel.S      **** 		IN    R16                , KER_TSK1_PORT          ;load PORT val,           (2 clocks)
 394:kernel.S      **** 		LDI   R17                , (1<<KER_TSK1_PIN)      ;bit mask for port pin    (1 clock )
 395:kernel.S      **** 		EOR   R16                , R17                    ;XOR with current val     (1 clock )
 396:kernel.S      **** 		OUT   KER_TSK1_PORT      , R16                    ;set new PORT val,        (1 clock )
 397               			
 398               			;assign delay loop count val, for 30ms 
 399:kernel.S      **** 		LDI   R16                , 0xEB                   ;set loop cnt val,        (1 clock )
 400               			
 401               	    DLY10:
 402:kernel.S      **** 	    LDI   R17                , 0xFF                   ;set loop cnt val,        (1 clock )
 403               			
 404               		DLY11:                                                ;inner loop,127.5uS@8Mhz  (4 clocks)
 405:kernel.S      **** 		NOP                                               ;no operation,            (1 clock )
 406:kernel.S      **** 		DEC   R17                                         ;decrement R17 val,       (1 clock )
 407:kernel.S      **** 		BRNE  DLY11                                       ;if R17 not equal to 0,   (2 clock ) 
 408:kernel.S      **** 		DEC   R16                                         ;decrement R16 val,       (1 clock )
 409:kernel.S      **** 		BRNE  DLY10                                       ;if R16 not equal to 0,   (2 clock ) 
 410:kernel.S      **** 		RJMP  LOOP1                                       ;if R16 is 0->jump,       (2 clock ) 
 411               	
 412               	
 413               	
 414               	;;===================================Kernel Test Task2======================================;;
 415               	Kernel_Test_Task2:
 416               	        ;initialize DDR and Port register, total 4 clocks
 417:kernel.S      ****         SBI   KER_TSK2_DDR       , KER_TSK2_PIN           ;set bit in DDR,          (2 clocks) 
 418:kernel.S      **** 		CBI   KER_TSK2_PORT      , KER_TSK2_PIN           ;clear port bit,          (2 clocks)
 419               			 
 420               	    LOOP2:
 421               		    ;pin toggle, total 5 clocks
 422:kernel.S      **** 		IN    R16                , KER_TSK2_PORT          ;load PORT val,           (2 clocks)
 423:kernel.S      **** 		LDI   R17                , (1<<KER_TSK2_PIN)      ;bit mask for port pin    (1 clock )
 424:kernel.S      **** 		EOR   R16                , R17                    ;XOR with current val     (1 clock )
 425:kernel.S      **** 		OUT   KER_TSK2_PORT      , R16                    ;set new PORT val,        (1 clock )
 426               			
 427               			;assign delay loop count val, for 30ms 
 428:kernel.S      **** 		LDI   R16                , 0xEB                   ;set loop cnt val,        (1 clock )
 429               			
 430               	    DLY20:
 431:kernel.S      **** 	    LDI   R17                , 0xFF                   ;set loop cnt val,        (1 clock )
 432               			
 433               		DLY21:                                                ;inner loop, 127.5uS@8Mhz (4 clocks)
 434:kernel.S      **** 		NOP                                               ;no operation,            (1 clock )
 435:kernel.S      **** 		DEC   R17                                         ;decrement R17 val,       (1 clock )
 436:kernel.S      **** 		BRNE  DLY21                                       ;if R17 not equal to 0,   (2 clock ) 
 437:kernel.S      **** 		DEC   R16                                         ;decrement R16 val,       (1 clock )
 438:kernel.S      **** 		BRNE  DLY20                                       ;if R16 not equal to 0,   (2 clock ) 
 439:kernel.S      **** 		RJMP  LOOP2                                       ;if R16 is 0->jump,       (2 clock ) 
 440               	    
 441               	
 442               	;;====================================Kernel Task0 Init=====================================;;
 443               	Kernel_Task0_Init:
 444               	        ;init stack for task0
 445:kernel.S      **** 		LDI   R18                , lo8(ker_stk0+KER_STZ)  ;fetch top SPL1,          (1 clock )
 446:kernel.S      **** 		LDI   R19                , hi8(ker_stk0+KER_STZ)  ;fetch top SPH1,          (1 clock )
 447               			
 448:kernel.S      **** 		OUT   IOSPL              , R18
 449:kernel.S      ****         OUT   IOSPH              , R19
 450               			
 451:kernel.S      **** 		LDI   R16                , lo8(Kernel_Test_Task0)
 452:kernel.S      ****         PUSH  R16
 453:kernel.S      ****         LDI   R16                , hi8(Kernel_Test_Task0)
 454:kernel.S      ****         PUSH  R16
 455               			
 456               			;push task1 entry to stack1
 457:kernel.S      **** 		LDI   R16                , lo8(Kernel_Test_Task0) ;fetch task1 entry low,   (1 clock )
 458:kernel.S      **** 		PUSH  R16                                         ;push to SPL1,            (1 clock )
 459:kernel.S      **** 		LDI   R16                , hi8(Kernel_Test_Task0) ;fetch task1 entry high,  (1 clock )
 460:kernel.S      **** 		PUSH  R16                                         ;push to SPH1,            (1 clock )
 461               			
 462               			
 463               	        ;;==============================context save========================================;;
 464               			;; total 68 clocks for context saving
 465:kernel.S      ****         PUSH  R0                                          ;save R0,                 (2 clocks)
 466:kernel.S      **** 		IN    R0                 , IOSREG                 ;load SREG,               (1 clock )
 467:kernel.S      **** 		PUSH  R0                                          ;save SREG,               (2 clocks)
 468:kernel.S      **** 		PUSH  R1                                          ;save R1,                 (2 clocks)   
 469:kernel.S      **** 		CLR   R1                                          ;clear R1,                (1 clock )
 470:kernel.S      **** 		PUSH  R2                                          ;save R2,                 (2 clocks)   
 471:kernel.S      **** 		PUSH  R3                                          ;save R3,                 (2 clocks)   
 472:kernel.S      **** 		PUSH  R4                                          ;save R4,                 (2 clocks)   
 473:kernel.S      **** 		PUSH  R5                                          ;save R5,                 (2 clocks)   
 474:kernel.S      **** 		PUSH  R6                                          ;save R6,                 (2 clocks)   
 475:kernel.S      **** 		PUSH  R7                                          ;save R7,                 (2 clocks)   
 476:kernel.S      **** 		PUSH  R8                                          ;save R8,                 (2 clocks)   
 477:kernel.S      **** 		PUSH  R9                                          ;save R9,                 (2 clocks)   
 478:kernel.S      **** 		PUSH  R10                                         ;save R10,                (2 clocks)   
 479:kernel.S      **** 		PUSH  R11                                         ;save R11,                (2 clocks)  
 480:kernel.S      **** 		PUSH  R12                                         ;save R12,                (2 clocks)  
 481:kernel.S      **** 		PUSH  R13                                         ;save R13,                (2 clocks)  
 482:kernel.S      **** 		PUSH  R14                                         ;save R14,                (2 clocks)  
 483:kernel.S      **** 		PUSH  R15                                         ;save R15,                (2 clocks)  
 484:kernel.S      **** 		PUSH  R16                                         ;save R16,                (2 clocks)  
 485:kernel.S      **** 		PUSH  R17                                         ;save R17,                (2 clocks)  
 486:kernel.S      **** 		PUSH  R18                                         ;save R18,                (2 clocks)  
 487:kernel.S      **** 		PUSH  R19                                         ;save R19,                (2 clocks)  
 488:kernel.S      **** 		PUSH  R20                                         ;save R20,                (2 clocks)  
 489:kernel.S      **** 		PUSH  R21                                         ;save R21,                (2 clocks)  
 490:kernel.S      **** 		PUSH  R22                                         ;save R22,                (2 clocks)  
 491:kernel.S      **** 		PUSH  R23                                         ;save R23,                (2 clocks)  
 492:kernel.S      **** 		PUSH  R24                                         ;save R24,                (2 clocks)  
 493:kernel.S      **** 		PUSH  R25                                         ;save R25,                (2 clocks)  
 494:kernel.S      **** 		PUSH  R26                                         ;save R26,                (2 clocks)  
 495:kernel.S      **** 		PUSH  R27                                         ;save R27,                (2 clocks)  
 496:kernel.S      **** 		PUSH  R28                                         ;save R28,                (2 clocks)  
 497:kernel.S      **** 		PUSH  R29                                         ;save R29,                (2 clocks)  
 498:kernel.S      **** 		PUSH  R30                                         ;save R30,                (2 clocks)  
 499:kernel.S      **** 		PUSH  R31                                         ;save R31,                (2 clocks) 
 500               			
 501               			;--- Step 5: Save current SP into ker_stp[1] (task1 pointer) ---
 502:kernel.S      ****         IN    R20, IOSPL
 503:kernel.S      ****         IN    R21, IOSPH
 504:kernel.S      ****         STS   ker_stp + 0        , R20                    ; Task 1 is index 1
 505:kernel.S      ****         STS   ker_stp + 1        , R21
 506:kernel.S      ****         RET                                               ;return from subroutine,  (4 clocks) 
 507               	
 508               	
 509               	
 510               	;;====================================Kernel Task0 Init=====================================;;
 511               	Kernel_Task1_Init:
 512               	        ;init stack for task0
 513:kernel.S      **** 		LDI   R18                , lo8(ker_stk1+KER_STZ)  ;fetch top SPL1,          (1 clock )
 514:kernel.S      **** 		LDI   R19                , hi8(ker_stk1+KER_STZ)  ;fetch top SPH1,          (1 clock )
 515               			
 516:kernel.S      **** 		OUT   IOSPL              , R18
 517:kernel.S      ****         OUT   IOSPH              , R19
 518               			
 519:kernel.S      **** 		LDI   R16                , lo8(Kernel_Test_Task1)
 520:kernel.S      ****         PUSH  R16
 521:kernel.S      ****         LDI   R16                , hi8(Kernel_Test_Task1)
 522:kernel.S      ****         PUSH  R16
 523               			
 524               			;push task1 entry to stack1
 525:kernel.S      **** 		LDI   R16                , lo8(Kernel_Test_Task1) ;fetch task1 entry low,   (1 clock )
 526:kernel.S      **** 		PUSH  R16                                         ;push to SPL1,            (1 clock )
 527:kernel.S      **** 		LDI   R16                , hi8(Kernel_Test_Task1) ;fetch task1 entry high,  (1 clock )
 528:kernel.S      **** 		PUSH  R16                                         ;push to SPH1,            (1 clock )
 529               			
 530               			
 531               	        ;;==============================context save========================================;;
 532               			;; total 68 clocks for context saving
 533:kernel.S      ****         PUSH  R0                                          ;save R0,                 (2 clocks)
 534:kernel.S      **** 		IN    R0                 , IOSREG                 ;load SREG,               (1 clock )
 535:kernel.S      **** 		PUSH  R0                                          ;save SREG,               (2 clocks)
 536:kernel.S      **** 		PUSH  R1                                          ;save R1,                 (2 clocks)   
 537:kernel.S      **** 		CLR   R1                                          ;clear R1,                (1 clock )
 538:kernel.S      **** 		PUSH  R2                                          ;save R2,                 (2 clocks)   
 539:kernel.S      **** 		PUSH  R3                                          ;save R3,                 (2 clocks)   
 540:kernel.S      **** 		PUSH  R4                                          ;save R4,                 (2 clocks)   
 541:kernel.S      **** 		PUSH  R5                                          ;save R5,                 (2 clocks)   
 542:kernel.S      **** 		PUSH  R6                                          ;save R6,                 (2 clocks)   
 543:kernel.S      **** 		PUSH  R7                                          ;save R7,                 (2 clocks)   
 544:kernel.S      **** 		PUSH  R8                                          ;save R8,                 (2 clocks)   
 545:kernel.S      **** 		PUSH  R9                                          ;save R9,                 (2 clocks)   
 546:kernel.S      **** 		PUSH  R10                                         ;save R10,                (2 clocks)   
 547:kernel.S      **** 		PUSH  R11                                         ;save R11,                (2 clocks)  
 548:kernel.S      **** 		PUSH  R12                                         ;save R12,                (2 clocks)  
 549:kernel.S      **** 		PUSH  R13                                         ;save R13,                (2 clocks)  
 550:kernel.S      **** 		PUSH  R14                                         ;save R14,                (2 clocks)  
 551:kernel.S      **** 		PUSH  R15                                         ;save R15,                (2 clocks)  
 552:kernel.S      **** 		PUSH  R16                                         ;save R16,                (2 clocks)  
 553:kernel.S      **** 		PUSH  R17                                         ;save R17,                (2 clocks)  
 554:kernel.S      **** 		PUSH  R18                                         ;save R18,                (2 clocks)  
 555:kernel.S      **** 		PUSH  R19                                         ;save R19,                (2 clocks)  
 556:kernel.S      **** 		PUSH  R20                                         ;save R20,                (2 clocks)  
 557:kernel.S      **** 		PUSH  R21                                         ;save R21,                (2 clocks)  
 558:kernel.S      **** 		PUSH  R22                                         ;save R22,                (2 clocks)  
 559:kernel.S      **** 		PUSH  R23                                         ;save R23,                (2 clocks)  
 560:kernel.S      **** 		PUSH  R24                                         ;save R24,                (2 clocks)  
 561:kernel.S      **** 		PUSH  R25                                         ;save R25,                (2 clocks)  
 562:kernel.S      **** 		PUSH  R26                                         ;save R26,                (2 clocks)  
 563:kernel.S      **** 		PUSH  R27                                         ;save R27,                (2 clocks)  
 564:kernel.S      **** 		PUSH  R28                                         ;save R28,                (2 clocks)  
 565:kernel.S      **** 		PUSH  R29                                         ;save R29,                (2 clocks)  
 566:kernel.S      **** 		PUSH  R30                                         ;save R30,                (2 clocks)  
 567:kernel.S      **** 		PUSH  R31                                         ;save R31,                (2 clocks) 
 568               			
 569               			;--- Step 5: Save current SP into ker_stp[1] (task1 pointer) ---
 570:kernel.S      ****         IN    R20, IOSPL
 571:kernel.S      ****         IN    R21, IOSPH
 572:kernel.S      ****         STS   ker_stp + 2        , R20                    ; Task 1 is index 1
 573:kernel.S      ****         STS   ker_stp + 3        , R21
 574:kernel.S      ****         RET                                               ;return from subroutine,  (4 clocks) 
DEFINED SYMBOLS
            kernel.S:7      *ABS*:000003e8 KER_TR
            kernel.S:8      *ABS*:00000003 KER_PRS
            kernel.S:9      *ABS*:00000082 KER_RLD
            kernel.S:11     *ABS*:0000000a KER_TSK0_DDR
            kernel.S:12     *ABS*:0000000b KER_TSK0_PORT
            kernel.S:13     *ABS*:00000005 KER_TSK0_PIN
            kernel.S:15     *ABS*:0000000a KER_TSK1_DDR
            kernel.S:16     *ABS*:0000000b KER_TSK1_PORT
            kernel.S:17     *ABS*:00000006 KER_TSK1_PIN
            kernel.S:19     *ABS*:0000000a KER_TSK2_DDR
            kernel.S:20     *ABS*:0000000b KER_TSK2_PORT
            kernel.S:21     *ABS*:00000007 KER_TSK2_PIN
            kernel.S:23     *ABS*:00000080 KER_STZ
            kernel.S:27     *ABS*:0000005f SRSREG
            kernel.S:28     *ABS*:0000005e SRSPH
            kernel.S:29     *ABS*:0000005d SRSPL
            kernel.S:31     *ABS*:0000006e SRTIMSK0
            kernel.S:32     *ABS*:00000048 SROCR0B
            kernel.S:33     *ABS*:00000047 SROCR0A
            kernel.S:34     *ABS*:00000046 SRTCNT0
            kernel.S:35     *ABS*:00000045 SRTCCR0B
            kernel.S:36     *ABS*:00000044 SRTCCR0A
            kernel.S:37     *ABS*:00000035 SRTIFR0
            kernel.S:39     *ABS*:00000028 IOOCR0B
            kernel.S:40     *ABS*:00000027 IOOCR0A
            kernel.S:41     *ABS*:00000026 IOTCNT0
            kernel.S:42     *ABS*:00000025 IOTCCR0B
            kernel.S:43     *ABS*:00000024 IOTCCR0A
            kernel.S:44     *ABS*:00000015 IOTIFR0
            kernel.S:46     *ABS*:0000003f IOSREG
            kernel.S:47     *ABS*:0000003e IOSPH
            kernel.S:48     *ABS*:0000003d IOSPL
            kernel.S:56     .bss:00000000 Kernel
            kernel.S:60     .bss:00000009 ker_tski
            kernel.S:64     .bss:0000000a ker_stp
            kernel.S:68     .bss:00000010 ker_stk0
            kernel.S:72     .bss:00000090 ker_stk1
            kernel.S:76     .bss:00000110 ker_stk2
            kernel.S:110    .text:00000000 __vector_16
            kernel.S:274    .text:000000cc Kernel_SysTick_Reg_Init
            kernel.S:318    .text:00000134 Kernel_SysTick_Val_Get
            kernel.S:336    .text:00000156 Kernel_Interrupt_Sts_Get
            kernel.S:356    .text:00000160 Kernel_Test_Task0
            kernel.S:386    .text:0000017e Kernel_Test_Task1
            kernel.S:415    .text:0000019a Kernel_Test_Task2
            kernel.S:443    .text:000001b6 Kernel_Task0_Init
            kernel.S:511    .text:00000222 Kernel_Task1_Init
            kernel.S:361    .text:00000164 LOOP0
            kernel.S:371    .text:0000016e DLY00
            kernel.S:374    .text:00000170 DLY01
            kernel.S:391    .text:00000182 LOOP1
            kernel.S:401    .text:0000018c DLY10
            kernel.S:404    .text:0000018e DLY11
            kernel.S:420    .text:0000019e LOOP2
            kernel.S:430    .text:000001a8 DLY20
            kernel.S:433    .text:000001aa DLY21

UNDEFINED SYMBOLS
Kernel_Task2_Init
