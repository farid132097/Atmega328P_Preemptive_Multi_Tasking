   1               	# 1 "kernel.S"
   1               	
   0               	
   0               	
   2               	#include <avr/io.h>
   1               	/* Copyright (c) 2002,2003,2005,2006,2007 Marek Michalkiewicz, Joerg Wunsch
   2               	   Copyright (c) 2007 Eric B. Weddington
   3               	   All rights reserved.
   4               	
   5               	   Redistribution and use in source and binary forms, with or without
   6               	   modification, are permitted provided that the following conditions are met:
   7               	
   8               	   * Redistributions of source code must retain the above copyright
   9               	     notice, this list of conditions and the following disclaimer.
  10               	
  11               	   * Redistributions in binary form must reproduce the above copyright
  12               	     notice, this list of conditions and the following disclaimer in
  13               	     the documentation and/or other materials provided with the
  14               	     distribution.
  15               	
  16               	   * Neither the name of the copyright holders nor the names of
  17               	     contributors may be used to endorse or promote products derived
  18               	     from this software without specific prior written permission.
  19               	
  20               	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21               	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22               	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23               	  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24               	  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25               	  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26               	  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27               	  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28               	  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29               	  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30               	  POSSIBILITY OF SUCH DAMAGE. */
  31               	
  32               	/* $Id: io.h,v 1.52.2.28 2009/12/20 17:02:53 arcanum Exp $ */
  33               	
  34               	/** \file */
  35               	/** \defgroup avr_io <avr/io.h>: AVR device-specific IO definitions
  36               	    \code #include <avr/io.h> \endcode
  37               	
  38               	    This header file includes the apropriate IO definitions for the
  39               	    device that has been specified by the <tt>-mmcu=</tt> compiler
  40               	    command-line switch.  This is done by diverting to the appropriate
  41               	    file <tt>&lt;avr/io</tt><em>XXXX</em><tt>.h&gt;</tt> which should
  42               	    never be included directly.  Some register names common to all
  43               	    AVR devices are defined directly within <tt>&lt;avr/common.h&gt;</tt>,
  44               	    which is included in <tt>&lt;avr/io.h&gt;</tt>,
  45               	    but most of the details come from the respective include file.
  46               	
  47               	    Note that this file always includes the following files:
  48               	    \code 
  49               	    #include <avr/sfr_defs.h>
  50               	    #include <avr/portpins.h>
  51               	    #include <avr/common.h>
  52               	    #include <avr/version.h>
  53               	    \endcode
  54               	    See \ref avr_sfr for more details about that header file.
  55               	
  56               	    Included are definitions of the IO register set and their
  57               	    respective bit values as specified in the Atmel documentation.
  58               	    Note that inconsistencies in naming conventions,
  59               	    so even identical functions sometimes get different names on
  60               	    different devices.
  61               	
  62               	    Also included are the specific names useable for interrupt
  63               	    function definitions as documented
  64               	    \ref avr_signames "here".
  65               	
  66               	    Finally, the following macros are defined:
  67               	
  68               	    - \b RAMEND
  69               	    <br>
  70               	    The last on-chip RAM address.
  71               	    <br>
  72               	    - \b XRAMEND
  73               	    <br>
  74               	    The last possible RAM location that is addressable. This is equal to 
  75               	    RAMEND for devices that do not allow for external RAM. For devices 
  76               	    that allow external RAM, this will be larger than RAMEND.
  77               	    <br>
  78               	    - \b E2END
  79               	    <br>
  80               	    The last EEPROM address.
  81               	    <br>
  82               	    - \b FLASHEND
  83               	    <br>
  84               	    The last byte address in the Flash program space.
  85               	    <br>
  86               	    - \b SPM_PAGESIZE
  87               	    <br>
  88               	    For devices with bootloader support, the flash pagesize
  89               	    (in bytes) to be used for the \c SPM instruction. 
  90               	    - \b E2PAGESIZE
  91               	    <br>
  92               	    The size of the EEPROM page.
  93               	    
  94               	*/
  95               	
  96               	#ifndef _AVR_IO_H_
  97               	#define _AVR_IO_H_
  98               	
  99               	#include <avr/sfr_defs.h>
   1               	/* Copyright (c) 2002, Marek Michalkiewicz <marekm@amelek.gda.pl>
 100               	
 101               	#if defined (__AVR_AT94K__)
 102               	#  include <avr/ioat94k.h>
 103               	#elif defined (__AVR_AT43USB320__)
 104               	#  include <avr/io43u32x.h>
 105               	#elif defined (__AVR_AT43USB355__)
 106               	#  include <avr/io43u35x.h>
 107               	#elif defined (__AVR_AT76C711__)
 108               	#  include <avr/io76c711.h>
 109               	#elif defined (__AVR_AT86RF401__)
 110               	#  include <avr/io86r401.h>
 111               	#elif defined (__AVR_AT90PWM1__)
 112               	#  include <avr/io90pwm1.h>
 113               	#elif defined (__AVR_AT90PWM2__)
 114               	#  include <avr/io90pwmx.h>
 115               	#elif defined (__AVR_AT90PWM2B__)
 116               	#  include <avr/io90pwm2b.h>
 117               	#elif defined (__AVR_AT90PWM3__)
 118               	#  include <avr/io90pwmx.h>
 119               	#elif defined (__AVR_AT90PWM3B__)
 120               	#  include <avr/io90pwm3b.h>
 121               	#elif defined (__AVR_AT90PWM216__)
 122               	#  include <avr/io90pwm216.h>
 123               	#elif defined (__AVR_AT90PWM316__)
 124               	#  include <avr/io90pwm316.h>
 125               	#elif defined (__AVR_AT90PWM81__)
 126               	#  include <avr/io90pwm81.h>
 127               	#elif defined (__AVR_ATmega8U2__)
 128               	#  include <avr/iom8u2.h>
 129               	#elif defined (__AVR_ATmega16M1__)
 130               	#  include <avr/iom16m1.h>
 131               	#elif defined (__AVR_ATmega16U2__)
 132               	#  include <avr/iom16u2.h>
 133               	#elif defined (__AVR_ATmega16U4__)
 134               	#  include <avr/iom16u4.h>
 135               	#elif defined (__AVR_ATmega32C1__)
 136               	#  include <avr/iom32c1.h>
 137               	#elif defined (__AVR_ATmega32M1__)
 138               	#  include <avr/iom32m1.h>
 139               	#elif defined (__AVR_ATmega32U2__)
 140               	#  include <avr/iom32u2.h>
 141               	#elif defined (__AVR_ATmega32U4__)
 142               	#  include <avr/iom32u4.h>
 143               	#elif defined (__AVR_ATmega32U6__)
 144               	#  include <avr/iom32u6.h>
 145               	#elif defined (__AVR_ATmega64C1__)
 146               	#  include <avr/iom64c1.h>
 147               	#elif defined (__AVR_ATmega64M1__)
 148               	#  include <avr/iom64m1.h>
 149               	#elif defined (__AVR_ATmega128__)
 150               	#  include <avr/iom128.h>
 151               	#elif defined (__AVR_ATmega1280__)
 152               	#  include <avr/iom1280.h>
 153               	#elif defined (__AVR_ATmega1281__)
 154               	#  include <avr/iom1281.h>
 155               	#elif defined (__AVR_ATmega1284P__)
 156               	#  include <avr/iom1284p.h>
 157               	#elif defined (__AVR_ATmega128RFA1__)
 158               	#  include <avr/iom128rfa1.h>
 159               	#elif defined (__AVR_ATmega2560__)
 160               	#  include <avr/iom2560.h>
 161               	#elif defined (__AVR_ATmega2561__)
 162               	#  include <avr/iom2561.h>
 163               	#elif defined (__AVR_AT90CAN32__)
 164               	#  include <avr/iocan32.h>
 165               	#elif defined (__AVR_AT90CAN64__)
 166               	#  include <avr/iocan64.h>
 167               	#elif defined (__AVR_AT90CAN128__)
 168               	#  include <avr/iocan128.h>
 169               	#elif defined (__AVR_AT90USB82__)
 170               	#  include <avr/iousb82.h>
 171               	#elif defined (__AVR_AT90USB162__)
 172               	#  include <avr/iousb162.h>
 173               	#elif defined (__AVR_AT90USB646__)
 174               	#  include <avr/iousb646.h>
 175               	#elif defined (__AVR_AT90USB647__)
 176               	#  include <avr/iousb647.h>
 177               	#elif defined (__AVR_AT90USB1286__)
 178               	#  include <avr/iousb1286.h>
 179               	#elif defined (__AVR_AT90USB1287__)
 180               	#  include <avr/iousb1287.h>
 181               	#elif defined (__AVR_ATmega64__)
 182               	#  include <avr/iom64.h>
 183               	#elif defined (__AVR_ATmega640__)
 184               	#  include <avr/iom640.h>
 185               	#elif defined (__AVR_ATmega644__) || defined (__AVR_ATmega644A__)
 186               	#  include <avr/iom644.h>
 187               	#elif defined (__AVR_ATmega644P__)
 188               	#  include <avr/iom644p.h>
 189               	#elif defined (__AVR_ATmega644PA__)
 190               	#  include <avr/iom644pa.h>
 191               	#elif defined (__AVR_ATmega645__) || defined (__AVR_ATmega645A__) || defined (__AVR_ATmega645P__)
 192               	#  include <avr/iom645.h>
 193               	#elif defined (__AVR_ATmega6450__) || defined (__AVR_ATmega6450A__) || defined (__AVR_ATmega6450P__
 194               	#  include <avr/iom6450.h>
 195               	#elif defined (__AVR_ATmega649__) || defined (__AVR_ATmega649A__)
 196               	#  include <avr/iom649.h>
 197               	#elif defined (__AVR_ATmega6490__) || defined (__AVR_ATmega6490A__) || defined (__AVR_ATmega6490P__
 198               	#  include <avr/iom6490.h>
 199               	#elif defined (__AVR_ATmega649P__)
 200               	#  include <avr/iom649p.h>
 201               	#elif defined (__AVR_ATmega64HVE__)
 202               	#  include <avr/iom64hve.h>
 203               	#elif defined (__AVR_ATmega103__)
 204               	#  include <avr/iom103.h>
 205               	#elif defined (__AVR_ATmega32__)
 206               	#  include <avr/iom32.h>
 207               	#elif defined (__AVR_ATmega323__)
 208               	#  include <avr/iom323.h>
 209               	#elif defined (__AVR_ATmega324P__) || defined (__AVR_ATmega324A__)
 210               	#  include <avr/iom324.h>
 211               	#elif defined (__AVR_ATmega324PA__)
 212               	#  include <avr/iom324pa.h>
 213               	#elif defined (__AVR_ATmega325__)
 214               	#  include <avr/iom325.h>
 215               	#elif defined (__AVR_ATmega325P__)
 216               	#  include <avr/iom325.h>
 217               	#elif defined (__AVR_ATmega3250__)
 218               	#  include <avr/iom3250.h>
 219               	#elif defined (__AVR_ATmega3250P__)
 220               	#  include <avr/iom3250.h>
 221               	#elif defined (__AVR_ATmega328P__) || defined (__AVR_ATmega328__)
 222               	#  include <avr/iom328p.h>
   1               	/* Copyright (c) 2007 Atmel Corporation
 223               	#elif defined (__AVR_ATmega329__)
 224               	#  include <avr/iom329.h>
 225               	#elif defined (__AVR_ATmega329P__) || defined (__AVR_ATmega329PA__)
 226               	#  include <avr/iom329.h>
 227               	#elif defined (__AVR_ATmega3290__)
 228               	#  include <avr/iom3290.h>
 229               	#elif defined (__AVR_ATmega3290P__)
 230               	#  include <avr/iom3290.h>
 231               	#elif defined (__AVR_ATmega32HVB__)
 232               	#  include <avr/iom32hvb.h>
 233               	#elif defined (__AVR_ATmega406__)
 234               	#  include <avr/iom406.h>
 235               	#elif defined (__AVR_ATmega16__)
 236               	#  include <avr/iom16.h>
 237               	#elif defined (__AVR_ATmega16A__)
 238               	#  include <avr/iom16a.h>
 239               	#elif defined (__AVR_ATmega161__)
 240               	#  include <avr/iom161.h>
 241               	#elif defined (__AVR_ATmega162__)
 242               	#  include <avr/iom162.h>
 243               	#elif defined (__AVR_ATmega163__)
 244               	#  include <avr/iom163.h>
 245               	#elif defined (__AVR_ATmega164P__) || defined (__AVR_ATmega164A__)
 246               	#  include <avr/iom164.h>
 247               	#elif defined (__AVR_ATmega165__) || defined (__AVR_ATmega165A__)
 248               	#  include <avr/iom165.h>
 249               	#elif defined (__AVR_ATmega165P__)
 250               	#  include <avr/iom165p.h>
 251               	#elif defined (__AVR_ATmega168__) || defined (__AVR_ATmega168A__)
 252               	#  include <avr/iom168.h>
 253               	#elif defined (__AVR_ATmega168P__)
 254               	#  include <avr/iom168p.h>
 255               	#elif defined (__AVR_ATmega169__) || defined (__AVR_ATmega169A__)
 256               	#  include <avr/iom169.h>
 257               	#elif defined (__AVR_ATmega169P__)
 258               	#  include <avr/iom169p.h>
 259               	#elif defined (__AVR_ATmega169PA__)
 260               	#  include <avr/iom169pa.h>
 261               	#elif defined (__AVR_ATmega8HVA__)
 262               	#  include <avr/iom8hva.h>
 263               	#elif defined (__AVR_ATmega16HVA__)
 264               	#  include <avr/iom16hva.h>
 265               	#elif defined (__AVR_ATmega16HVA2__)
 266               	#  include <avr/iom16hva2.h>
 267               	#elif defined (__AVR_ATmega16HVB__)
 268               	#  include <avr/iom16hvb.h>
 269               	#elif defined (__AVR_ATmega8__)
 270               	#  include <avr/iom8.h>
 271               	#elif defined (__AVR_ATmega48__) || defined (__AVR_ATmega48A__)
 272               	#  include <avr/iom48.h>
 273               	#elif defined (__AVR_ATmega48P__)
 274               	#  include <avr/iom48p.h>
 275               	#elif defined (__AVR_ATmega88__) || defined (__AVR_ATmega88A__)
 276               	#  include <avr/iom88.h>
 277               	#elif defined (__AVR_ATmega88P__)
 278               	#  include <avr/iom88p.h>
 279               	#elif defined (__AVR_ATmega88PA__)
 280               	#  include <avr/iom88pa.h>
 281               	#elif defined (__AVR_ATmega8515__)
 282               	#  include <avr/iom8515.h>
 283               	#elif defined (__AVR_ATmega8535__)
 284               	#  include <avr/iom8535.h>
 285               	#elif defined (__AVR_AT90S8535__)
 286               	#  include <avr/io8535.h>
 287               	#elif defined (__AVR_AT90C8534__)
 288               	#  include <avr/io8534.h>
 289               	#elif defined (__AVR_AT90S8515__)
 290               	#  include <avr/io8515.h>
 291               	#elif defined (__AVR_AT90S4434__)
 292               	#  include <avr/io4434.h>
 293               	#elif defined (__AVR_AT90S4433__)
 294               	#  include <avr/io4433.h>
 295               	#elif defined (__AVR_AT90S4414__)
 296               	#  include <avr/io4414.h>
 297               	#elif defined (__AVR_ATtiny22__)
 298               	#  include <avr/iotn22.h>
 299               	#elif defined (__AVR_ATtiny26__)
 300               	#  include <avr/iotn26.h>
 301               	#elif defined (__AVR_AT90S2343__)
 302               	#  include <avr/io2343.h>
 303               	#elif defined (__AVR_AT90S2333__)
 304               	#  include <avr/io2333.h>
 305               	#elif defined (__AVR_AT90S2323__)
 306               	#  include <avr/io2323.h>
 307               	#elif defined (__AVR_AT90S2313__)
 308               	#  include <avr/io2313.h>
 309               	#elif defined (__AVR_ATtiny2313__)
 310               	#  include <avr/iotn2313.h>
 311               	#elif defined (__AVR_ATtiny2313A__)
 312               	#  include <avr/iotn2313a.h>
 313               	#elif defined (__AVR_ATtiny13__)
 314               	#  include <avr/iotn13.h>
 315               	#elif defined (__AVR_ATtiny13A__)
 316               	#  include <avr/iotn13a.h>
 317               	#elif defined (__AVR_ATtiny25__)
 318               	#  include <avr/iotn25.h>
 319               	#elif defined (__AVR_ATtiny4313__)
 320               	#  include <avr/iotn4313.h>
 321               	#elif defined (__AVR_ATtiny45__)
 322               	#  include <avr/iotn45.h>
 323               	#elif defined (__AVR_ATtiny85__)
 324               	#  include <avr/iotn85.h>
 325               	#elif defined (__AVR_ATtiny24__)
 326               	#  include <avr/iotn24.h>
 327               	#elif defined (__AVR_ATtiny24A__)
 328               	#  include <avr/iotn24a.h>
 329               	#elif defined (__AVR_ATtiny44__)
 330               	#  include <avr/iotn44.h>
 331               	#elif defined (__AVR_ATtiny44A__)
 332               	#  include <avr/iotn44a.h>
 333               	#elif defined (__AVR_ATtiny84__)
 334               	#  include <avr/iotn84.h>
 335               	#elif defined (__AVR_ATtiny261__)
 336               	#  include <avr/iotn261.h>
 337               	#elif defined (__AVR_ATtiny261A__)
 338               	#  include <avr/iotn261a.h>
 339               	#elif defined (__AVR_ATtiny461__)
 340               	#  include <avr/iotn461.h>
 341               	#elif defined (__AVR_ATtiny461A__)
 342               	#  include <avr/iotn461a.h>
 343               	#elif defined (__AVR_ATtiny861__)
 344               	#  include <avr/iotn861.h>
 345               	#elif defined (__AVR_ATtiny861A__)
 346               	#  include <avr/iotn861a.h>
 347               	#elif defined (__AVR_ATtiny43U__)
 348               	#  include <avr/iotn43u.h>
 349               	#elif defined (__AVR_ATtiny48__)
 350               	#  include <avr/iotn48.h>
 351               	#elif defined (__AVR_ATtiny88__)
 352               	#  include <avr/iotn88.h>
 353               	#elif defined (__AVR_ATtiny87__)
 354               	#  include <avr/iotn87.h>
 355               	#elif defined (__AVR_ATtiny167__)
 356               	#  include <avr/iotn167.h>
 357               	#elif defined (__AVR_AT90SCR100__)
 358               	#  include <avr/io90scr100.h>
 359               	#elif defined (__AVR_ATxmega16A4__)
 360               	#  include <avr/iox16a4.h>
 361               	#elif defined (__AVR_ATxmega16D4__)
 362               	#  include <avr/iox16d4.h>
 363               	#elif defined (__AVR_ATxmega32A4__)
 364               	#  include <avr/iox32a4.h>
 365               	#elif defined (__AVR_ATxmega32D4__)
 366               	#  include <avr/iox32d4.h>
 367               	#elif defined (__AVR_ATxmega64A1__)
 368               	#  include <avr/iox64a1.h>
 369               	#elif defined (__AVR_ATxmega64A3__)
 370               	#  include <avr/iox64a3.h>
 371               	#elif defined (__AVR_ATxmega64D3__)
 372               	#  include <avr/iox64d3.h>
 373               	#elif defined (__AVR_ATxmega128A1__)
 374               	#  include <avr/iox128a1.h>
 375               	#elif defined (__AVR_ATxmega128A3__)
 376               	#  include <avr/iox128a3.h>
 377               	#elif defined (__AVR_ATxmega128D3__)
 378               	#  include <avr/iox128d3.h>
 379               	#elif defined (__AVR_ATxmega192A3__)
 380               	#  include <avr/iox192a3.h>
 381               	#elif defined (__AVR_ATxmega192D3__)
 382               	#  include <avr/iox192d3.h>
 383               	#elif defined (__AVR_ATxmega256A3__)
 384               	#  include <avr/iox256a3.h>
 385               	#elif defined (__AVR_ATxmega256A3B__)
 386               	#  include <avr/iox256a3b.h>
 387               	#elif defined (__AVR_ATxmega256D3__)
 388               	#  include <avr/iox256d3.h>
 389               	#elif defined (__AVR_ATA6289__)
 390               	#  include <avr/ioa6289.h>
 391               	/* avr1: the following only supported for assembler programs */
 392               	#elif defined (__AVR_ATtiny28__)
 393               	#  include <avr/iotn28.h>
 394               	#elif defined (__AVR_AT90S1200__)
 395               	#  include <avr/io1200.h>
 396               	#elif defined (__AVR_ATtiny15__)
 397               	#  include <avr/iotn15.h>
 398               	#elif defined (__AVR_ATtiny12__)
 399               	#  include <avr/iotn12.h>
 400               	#elif defined (__AVR_ATtiny11__)
 401               	#  include <avr/iotn11.h>
 402               	#else
 403               	#  if !defined(__COMPILING_AVR_LIBC__)
 404               	#    warning "device type not defined"
 405               	#  endif
 406               	#endif
 407               	
 408               	#include <avr/portpins.h>
   1               	/* Copyright (c) 2003  Theodore A. Roth
 409               	
 410               	#include <avr/common.h>
   1               	/* Copyright (c) 2007 Eric B. Weddington
 411               	
 412               	#include <avr/version.h>
   1               	/* Copyright (c) 2005, Joerg Wunsch                               -*- c -*-
 413               	
 414               	/* Include fuse.h after individual IO header files. */
 415               	#include <avr/fuse.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 416               	
 417               	/* Include lock.h after individual IO header files. */
 418               	#include <avr/lock.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 419               	
   3               	#include <avr/interrupt.h>
   1               	/* Copyright (c) 2002,2005,2007 Marek Michalkiewicz
   4               	#include "kernel.h"
   1               	
   5               	
   6               	
   7               	
   8               	
   9               	
  10               	
  11               	;;============================define user address or macro starting=========================;; 
  12               	.equ     KER_TR ,         1000    ;TickRate in Hz, only defined, not calculated
  13               	.equ     KER_PRS,         0x03    ;For prescaler 64, manually select
  14               	.equ     KER_RLD,         0x82    ;KER_RLD = 0xFF-(F_CPU/KER_PRS/KER_TR), check overflow
  15               	.equ     KER_STK_SZ,      128     ;stack size in bytes for each task
  16               	.equ     KER_MX_NTSK,     10      ;max number of tasks
  17               	;;==============================define user address or macro end============================;; 
  18               	
  19               	
  20               	
  21               	
  22               	
  23               	;;===============================define system macro starting===============================;; 
  24               	.equ     TASK_READY ,     0x01    ;bit 0 in system status reg
  25               	.equ     TASK_BLOCK ,     0x00    ;bit 0 in system status reg
  26               	;;==================================define system macro end=================================;; 
  27               	
  28               	
  29               	
  30               	
  31               	
  32               	;;===========================define hardware reg address starting===========================;; 
  33               	.equ     SRSREG,          0x5F    ;manually defined SREG in SRAM
  34               	.equ     SRSPH,           0x5E    ;manually defined SPH in SRAM
  35               	.equ     SRSPL,           0x5D    ;manually defined SPL in SRAM
  36               	
  37               	.equ     SRTIMSK0,        0x6E    ;manually defined TIMSK0 in SRAM
  38               	.equ     SROCR0B,         0x48    ;manually defined OCR0B in SRAM
  39               	.equ     SROCR0A,         0x47    ;manually defined OCR0A in SRAM
  40               	.equ     SRTCNT0,         0x46    ;manually defined TCNT0 in SRAM
  41               	.equ     SRTCCR0B,        0x45    ;manually defined TCCR0B in SRAM
  42               	.equ     SRTCCR0A,        0x44    ;manually defined TCCR0A in SRAM
  43               	.equ     SRTIFR0,         0x35    ;manually defined TIFR0 in SRAM
  44               	
  45               	.equ     IOOCR0B,         0x28    ;manually defined OCR0B in IO
  46               	.equ     IOOCR0A,         0x27    ;manually defined OCR0A in IO
  47               	.equ     IOTCNT0,         0x26    ;manually defined TCNT0 in IO
  48               	.equ     IOTCCR0B,        0x25    ;manually defined TCCR0B in IO
  49               	.equ     IOTCCR0A,        0x24    ;manually defined TCCR0A in IO
  50               	.equ     IOTIFR0,         0x15    ;manually defined TIFR0 in IO
  51               	
  52               	.equ     IOSREG,          0x3F    ;manually defined SREG in IO
  53               	.equ     IOSPH,           0x3E    ;manually defined SPH in IO
  54               	.equ     IOSPL,           0x3D    ;manually defined SPL in IO
  55               	;;==============================define hardware reg address end=============================;; 
  56               	
  57               	
  58               	
  59               	
  60               	
  61               	;;=============================define global variables starting=============================;; 
  62               	.section   .bss
  63               	
  64               	.global    KerBase                 ;declare global space for kernel
  65 0000 0000 0000 	KerBase:   .skip 10                ;TickCnt(5), rld_val(1), task_id(1), ntask(1), rsrvd(2)
  65      0000 0000 
  65      0000 
  66               	
  67               	.global    KerSP                   ;declare global space for stack pointers
  68 000a 0000 0000 	KerSP:     .skip KER_MX_NTSK*2     ;2 bytes for each task
  68      0000 0000 
  68      0000 0000 
  68      0000 0000 
  68      0000 0000 
  69               	
  70               	.global    KerSchSts               ;declare global space for scheduler status
  71 001e 0000 0000 	KerSchSts: .skip KER_MX_NTSK*1     ;status(1)
  71      0000 0000 
  71      0000 
  72               	
  73               	.global    KerSchPr                ;declare global space for scheduler priority
  74 0028 0000 0000 	KerSchPr:  .skip KER_MX_NTSK*1     ;priority(1)
  74      0000 0000 
  74      0000 
  75               	
  76               	.global    KerSchSlp               ;declare global space for task sleep
  77 0032 0000 0000 	KerSchSlp: .skip KER_MX_NTSK*2     ;timing(2)
  77      0000 0000 
  77      0000 0000 
  77      0000 0000 
  77      0000 0000 
  78               	
  79               	.global    KerStack                ;declare global space for stack
  80 0046 0000 0000 	KerStack:  .skip KER_STK_SZ*10     ;KER_STK_SZ bytes for each task
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  81               	;;==============================define global variables end=================================;; 
  82               	
  83               	
  84               	
  85               	
  86               	
  87               	;;===============================define vector section starting=============================;; 
  88               	.section .vectors, "ax", @progbits
  89               	
  90 0000 0000 0000 	.org    0x20
  90      0000 0000 
  90      0000 0000 
  90      0000 0000 
  90      0000 0000 
  90      0000 0000 
  90      0000 0000 
  90      0000 0000 
  91:kernel.S      ****         RJMP  __vector_16
  92               	;;=================================define vector section end================================;; 
  93               	
  94               	
  95               	
  96               	
  97               	
  98               	;;===============================define text section starting===============================;; 
  99               	.section .text
 100               	;;==================================define text section end=================================;; 
 101               	
 102               	
 103               	
 104               	
 105               	
 106               	;;==============================define global functions starting============================;; 
 107               	.global  Kernel_SysTick_Reg_Init
 108               	.global  Kernel_SysTick_Val_Get
 109               	.global  Kernel_SysTick_Val_Safely_Get
 110               	.global  Kernel_Interrupt_Sts_Get
 111               	.global  Kernel_Task_Init
 112               	.global  Kernel_Start_Tasks
 113               	.global  Kernel_Task_Sleep
 114               	.global  Kernel_Task_Sleep_Time_Get
 115               	.global  Kernel_Task_Sts_Get
 116               	.global  Kernel_Task_Yeild
 117               	;;================================define global functions end===============================;; 
 118               	
 119               	
 120               	
 121               	
 122               	
 123               	;;============================debug pin operation init starting=============================;; 
 124               	.macro  KER_DEBUG_PIN_INIT                                ;total 0.5uS @8MHz      (  4 clocks) 
 125               	        #ifdef KER_DBG_ENABLE                                                                  
 126               			SBI   KER_DBG_DDR        , KER_DBG_PIN            ;set bit in DDR         (  2 clocks) 
 127               			CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear port bit         (  2 clocks) 
 128               			#endif
 129               	.endm
 130               	;;==============================debug pin operation init end================================;; 
 131               	
 132               	
 133               	
 134               	
 135               	
 136               	;;===========================debug pin operation set starting===============================;; 
 137               	.macro  KER_DEBUG_PIN_SET                                 ;total 0.25uS @8MHz     (  2 clocks) 
 138               	        #ifdef KER_DBG_ENABLE                                                                  
 139               	        SBI   KER_DBG_PORT       , KER_DBG_PIN            ;set gpio               (  2 clocks) 
 140               			#endif
 141               	.endm
 142               	;;==============================debug pin operation set end=================================;; 
 143               	
 144               	
 145               	
 146               	
 147               	
 148               	;;===========================debug pin operation clear starting=============================;; 
 149               	.macro  KER_DEBUG_PIN_CLEAR                               ;total 0.25uS @8MHz     (  2 clocks) 
 150               	        #ifdef KER_DBG_ENABLE                                                                  
 151               			CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear gpio             (  2 clocks) 
 152               			#endif
 153               	.endm
 154               	;;==============================debug pin operation clear end===============================;; 
 155               	
 156               	
 157               	
 158               	
 159               	
 160               	;;==============================reload counter value starting===============================;; 
 161               	.macro  KER_COUNTER_RELOAD                                ;total 0.5uS @8MHz      (  4 clocks) 
 162               	        LDS   R16                , KerBase+0x05           ;load reload value      (  2 clocks) 
 163               			STS   SRTCNT0            , R16                    ;Set value to TCNT0     (  2 clocks) 
 164               	.endm
 165               	;;=================================reload counter value end=================================;; 
 166               	
 167               	
 168               	
 169               	
 170               	
 171               	;;==================================context save starting===================================;; 
 172               	.macro  KER_CONTEXT_SAVE                                  ;total 8.5uS @8MHz      ( 68 clocks) 
 173               	        PUSH  R0                                          ;push R0                (  2 clocks) 
 174               			IN    R0                 , IOSREG                 ;save SREG              (  1 clock ) 
 175               			PUSH  R0                                          ;save SREG              (  2 clocks) 
 176               			PUSH  R1                                          ;save R1                (  2 clocks) 
 177               			CLR   R1                                          ;clear R1               (  1 clock ) 
 178               			PUSH  R2                                          ;save R2                (  2 clocks) 
 179               			PUSH  R3                                          ;save R3                (  2 clocks) 
 180               			PUSH  R4                                          ;save R4                (  2 clocks) 
 181               			PUSH  R5                                          ;save R5                (  2 clocks) 
 182               			PUSH  R6                                          ;save R6                (  2 clocks) 
 183               			PUSH  R7                                          ;save R7                (  2 clocks) 
 184               			PUSH  R8                                          ;save R8                (  2 clocks) 
 185               			PUSH  R9                                          ;save R9                (  2 clocks) 
 186               			PUSH  R10                                         ;save R10               (  2 clocks) 
 187               			PUSH  R11                                         ;save R11               (  2 clocks) 
 188               			PUSH  R12                                         ;save R12               (  2 clocks) 
 189               			PUSH  R13                                         ;save R13               (  2 clocks) 
 190               			PUSH  R14                                         ;save R14               (  2 clocks) 
 191               			PUSH  R15                                         ;save R15               (  2 clocks) 
 192               			PUSH  R16                                         ;save R16               (  2 clocks) 
 193               			PUSH  R17                                         ;save R17               (  2 clocks) 
 194               			PUSH  R18                                         ;save R18               (  2 clocks) 
 195               			PUSH  R19                                         ;save R19               (  2 clocks) 
 196               			PUSH  R20                                         ;save R20               (  2 clocks) 
 197               			PUSH  R21                                         ;save R21               (  2 clocks) 
 198               			PUSH  R22                                         ;save R22               (  2 clocks) 
 199               			PUSH  R23                                         ;save R23               (  2 clocks) 
 200               			PUSH  R24                                         ;save R24               (  2 clocks) 
 201               			PUSH  R25                                         ;save R25               (  2 clocks) 
 202               			PUSH  R26                                         ;save R26               (  2 clocks) 
 203               			PUSH  R27                                         ;save R27               (  2 clocks) 
 204               			PUSH  R28                                         ;save R28               (  2 clocks) 
 205               			PUSH  R29                                         ;save R29               (  2 clocks) 
 206               			PUSH  R30                                         ;save R30               (  2 clocks) 
 207               			PUSH  R31                                         ;save R31               (  2 clocks) 
 208               	.endm
 209               	;;=====================================context save end=====================================;; 
 210               	
 211               	
 212               	
 213               	
 214               	
 215               	;;================================context restore starting==================================;; 
 216               	.macro  KER_CONTEXT_RESTORE                               ;total 8.38uS @8MHz     ( 67 clocks) 
 217               			POP   R31                                         ;restore R31            (  2 clocks) 
 218               			POP   R30                                         ;restore R30            (  2 clocks) 
 219               			POP   R29                                         ;restore R29            (  2 clocks) 
 220               			POP   R28                                         ;restore R28            (  2 clocks) 
 221               			POP   R27                                         ;restore R27            (  2 clocks) 
 222               			POP   R26                                         ;restore R26            (  2 clocks) 
 223               			POP   R25                                         ;restore R25            (  2 clocks) 
 224               			POP   R24                                         ;restore R24            (  2 clocks) 
 225               			POP   R23                                         ;restore R23            (  2 clocks) 
 226               			POP   R22                                         ;restore R22            (  2 clocks) 
 227               			POP   R21                                         ;restore R21            (  2 clocks) 
 228               			POP   R20                                         ;restore R20            (  2 clocks) 
 229               			POP   R19                                         ;restore R19            (  2 clocks) 
 230               			POP   R18                                         ;restore R18            (  2 clocks) 
 231               			POP   R17                                         ;restore R17            (  2 clocks) 
 232               			POP   R16                                         ;restore R16            (  2 clocks) 
 233               			POP   R15                                         ;restore R15            (  2 clocks) 
 234               			POP   R14                                         ;restore R14            (  2 clocks) 
 235               			POP   R13                                         ;restore R13            (  2 clocks) 
 236               			POP   R12                                         ;restore R12            (  2 clocks) 
 237               			POP   R11                                         ;restore R11            (  2 clocks) 
 238               			POP   R10                                         ;restore R10            (  2 clocks) 
 239               			POP   R9                                          ;restore R9             (  2 clocks) 
 240               			POP   R8                                          ;restore R8             (  2 clocks) 
 241               			POP   R7                                          ;restore R7             (  2 clocks) 
 242               			POP   R6                                          ;restore R6             (  2 clocks) 
 243               			POP   R5                                          ;restore R5             (  2 clocks) 
 244               			POP   R4                                          ;restore R4             (  2 clocks) 
 245               			POP   R3                                          ;restore R3             (  2 clocks) 
 246               			POP   R2                                          ;restore R2             (  2 clocks) 
 247               			POP   R1                                          ;restore R1             (  2 clocks) 
 248               			POP   R0                                          ;fetch SREG             (  2 clocks) 
 249               			OUT   IOSREG             , R0                     ;load SREG              (  1 clock ) 
 250               			POP   R0                                          ;restore R0             (  2 clocks) 
 251               	.endm
 252               	;;===================================context restore end====================================;; 
 253               	
 254               	
 255               	
 256               	
 257               	
 258               	;;==============================increment tick counter starting=============================;; 
 259               	.macro  KER_TICK_INCREMENT                                ;total 3.38uS @8MHz     ( 27 clocks) 
 260               			LDI   R16                , 0x01                   ;load 1 to R16          (  1 clock ) 
 261               			LDS   R17                , KerBase+0x00           ;load Byte0             (  2 clocks) 
 262               			ADD   R17                , R16                    ;add 1 with Byte0       (  1 clock ) 
 263               			STS   KerBase+0x00       , R17                    ;set Byte0              (  2 clocks) 
 264               			LDI   R16                , 0x00                   ;load 0 to R16          (  1 clock ) 
 265               			LDS   R17                , KerBase+0x01           ;load Byte1             (  2 clocks) 
 266               			ADC   R17                , R16                    ;add carry with Byte1   (  1 clock ) 
 267               			STS   KerBase+0x01       , R17                    ;set Byte1              (  2 clocks) 
 268               			LDS   R17                , KerBase+0x02           ;load Byte2             (  2 clocks) 
 269               			ADC   R17                , R16                    ;add carry with Byte2   (  1 clock ) 
 270               			STS   KerBase+0x02       , R17                    ;set Byte2              (  2 clocks) 
 271               			LDS   R17                , KerBase+0x03           ;load Byte3             (  2 clocks) 
 272               			ADC   R17                , R16                    ;add carry with Byte3   (  1 clock ) 
 273               			STS   KerBase+0x03       , R17                    ;set Byte3              (  2 clocks) 
 274               			LDS   R17                , KerBase+0x04           ;load Byte4             (  2 clocks) 
 275               			ADC   R17                , R16                    ;add carry with Byte4   (  1 clock ) 
 276               			STS   KerBase+0x04       , R17                    ;set Byte4              (  2 clocks) 
 277               	.endm
 278               	;;=================================increment tick counter end===============================;; 
 279               	
 280               	
 281               	
 282               	
 283               	
 284               	;;===============================save current task sp starting==============================;; 
 285               	.macro  KER_SAVE_CURR_TASK_SP                             ;total 1.75uS @8MHz     ( 14 clocks) 
 286               			IN    R16                , IOSPL                  ;fetch SPL0             (  1 clock ) 
 287               			IN    R17                , IOSPH                  ;fetch SPH0             (  1 clock ) 
 288               			LDS   R18                , KerBase+0x06           ;fetch task_id          (  2 clocks) 
 289               			LSL   R18                                         ;left shift to multiply (  1 clock ) 
 290               			LDI   R30                , lo8(KerSP)             ;fetch base pos low     (  1 clock ) 
 291               			LDI   R31                , hi8(KerSP)             ;fetch base pos high    (  1 clock ) 
 292               			ADD   R30                , R18                    ;add offset to array    (  1 clock ) 
 293               			LDI   R18                , 0x00                   ;set 0 to R16           (  1 clock ) 
 294               			ADC   R31                , R18                    ;add carry if any       (  1 clock ) 
 295               			ST    Z+                 , R16                    ;store SPL at ZP        (  2 clocks) 
 296               			ST    z                  , R17                    ;store SPH ZP+1         (  2 clocks) 
 297               	.endm
 298               	;;================================save current task sp end==================================;; 
 299               	
 300               	
 301               	
 302               	
 303               	
 304               	;;==============================load next task id starting==================================;; 
 305               	.macro  KER_LOAD_NEXT_TASK_ID                             ;total 1.63uS @8MHz     ( 13 clocks) 
 306               			LDS   R16                , KerBase+0x06           ;fetch task_id          (  2 clocks) 
 307               			INC   R16                                         ;increment task index   (  1 clock ) 
 308               			LDS   R17                , KerBase+0x07           ;load ntask             (  2 clocks) 
 309               		_MOD_CONT\@:                                          ;use local label
 310               		    CP    R16                , R17                    ;compare R17 with R16   (  1 clock ) 
 311               			BRLO  _MOD_DONE\@                                 ;if R16<R17, done       (  2 clocks) 
 312               			SUB   R16                , R17                    ;subtract R17 from R16  (  1 clock ) 
 313               			RJMP  _MOD_CONT\@                                 ;go to loop start       (  2 clocks) 
 314               		_MOD_DONE\@:                                          ;use local label
 315               		    STS   KerBase+0x06       , R16                    ;save task_id%ntask     (  2 clocks) 
 316               	.endm
 317               	;;=================================load next task id end====================================;; 
 318               	
 319               	
 320               	
 321               	
 322               	
 323               	;;===============================decrease timeout starting==================================;; 
 324               	.macro  KER_DEC_SLP_TIMEOUT                               ;total 1.75uS @8MHz     ( 14 clocks) 
 325               	        LDS   R16                , KerBase+0x07           ;load ntask             (  2 clocks) 
 326               		 
 327               		_UPDATE_TASK_READY\@:
 328               			;start from ntask-1
 329               			DEC   R16                                         ;start from ntask-1     (  1 clock )
 330               			
 331               			;find ram address for sleep counter
 332               			MOV   R18                , R16                    ;load task_id           (  1 clocks)
 333               			LSL   R18                                         ;x2                     (  1 clock )
 334               			LDI   R30                , lo8(KerSchSlp)         ;fetch base pos low     (  1 clock ) 
 335               			LDI   R31                , hi8(KerSchSlp)         ;fetch base pos high    (  1 clock )
 336               	        ADD   R30                , R18                    ;add offset to array    (  1 clock ) 
 337               			LDI   R18                , 0x00                   ;set 0 to R16           (  1 clock ) 
 338               			ADC   R31                , R18                    ;add offset to array    (  1 clock ) 
 339               			
 340               			;fetch current value from ram, if val=0, skip decrement
 341               	        LD    R26                , Z+                     ;load val low byte      (  2 clocks) 
 342               			LD    R27                , Z                      ;load val high byte     (  2 clocks) 
 343               			MOV   R18                , R26                    ;copy                   (  1 clock ) 
 344               			OR    R18                , R27                    ;or high & low bytes    (  1 clock ) 
 345               			BREQ  _VAL_NULL\@                                 ;val=0, save sts        (  2 clocks) 
 346               			
 347               			;decrease val by 1
 348               			SBIW  R26                , 0x01                   ;decrement 1 from XP    (  2 clocks) 
 349               			ST    Z                  , R27                    ;store low byte         (  2 clocks) 
 350               			ST    -Z                 , R26                    ;store high byte        (  2 clocks) 
 351               			MOV   R18                , R26                    ;copy                   (  1 clock ) 
 352               			OR    R18                , R27                    ;or high & low bytes    (  1 clock ) 
 353               			BREQ  _VAL_NULL\@                                 ;val=0, save sts        (  2 clocks) 
 354               			JMP   _LOOP\@
 355               	        
 356               	    _VAL_NULL\@:
 357               		    ;find ram address for status
 358               		    LDI   R30                , lo8(KerSchSts)         ;fetch base pos low     (  1 clock ) 
 359               			LDI   R31                , hi8(KerSchSts)         ;fetch base pos high    (  1 clock ) 
 360               			ADD   R30                , R16                    ;add offset to array    (  1 clock ) 
 361               			LDI   R18                , 0x00                   ;set 0                  (  1 clock ) 
 362               			ADC   R31                , R18                    ;add offset to array    (  1 clock ) 
 363               			
 364               			;update flag as task is ready
 365               			LDI   R18                , TASK_READY             ;set TASK_READY         (  1 clock ) 
 366               			ST    Z                  , R18                    ;update flag            (  2 clocks)
 367               			
 368               		_LOOP\@:
 369               			;if task_id!=0, start again
 370               			CPI   R16                , 0x00                   ;compare with 0         (  1 clock )
 371               			BRNE  _UPDATE_TASK_READY\@
 372               	.endm
 373               	;;=================================decrease timeout end=====================================;; 
 374               	
 375               	
 376               	
 377               	
 378               	
 379               	;;==================================run scheduler starting==================================;; 
 380               	.macro  KER_RUN_SCHEDULER                                 ;total 1.75uS @8MHz     ( 14 clocks) 
 381               	        LDS   R16                , KerBase+0x07           ;load ntask             (  2 clocks) 
 382               			
 383               	    _CH_TASK_READY\@:
 384               		    ;decrease by 1, start with ntask-1
 385               		    DEC   R16                                         ;decrement              (  1 clock ) 
 386               			
 387               			MOV   R17                , R16                    ;copy                   (  1 clock ) 
 388               			LDI   R30                , lo8(KerSchSts)         ;fetch base pos low     (  1 clock ) 
 389               			LDI   R31                , hi8(KerSchSts)         ;fetch base pos high    (  1 clock ) 
 390               			ADD   R30                , R17                    ;add offset to array    (  1 clock ) 
 391               			LDI   R17                , 0x00                   ;set 0 to R16           (  1 clock ) 
 392               			ADD   R31                , R17                    ;add offset to array    (  1 clock )
 393               	        LD    R17                , Z                      ;load KerSchSts+task_id (  2 clocks)
 394               			CPI   R17                , TASK_READY             ;compare with task ready(  1 clock )
 395               			BREQ  _NEXT_TASK_FOUND\@
 396               			
 397               		_LOOP_CNT\@:
 398               			CPI   R16                , 0x00                   ;compare with 0         (  1 clock )
 399               			BRNE  _CH_TASK_READY\@
 400               			JMP   _IDLE_TASK\@
 401               			
 402               		_NEXT_TASK_FOUND\@:
 403               		    STS   KerBase+0x06       , R16                    ;save selected task_id  (  2 clocks)
 404               	        JMP   _EXIT\@
 405               			
 406               		_IDLE_TASK\@:
 407               		    LDI   R16                , 0x00                   ;idle task is task0     (  1 clock ) 
 408               		    STS   KerBase+0x06       , R16                    ;save selected task_id  (  2 clocks)
 409               			
 410               		_EXIT\@:
 411               	.endm
 412               	;;====================================run scheduler end=====================================;; 
 413               	
 414               	
 415               	
 416               	
 417               	
 418               	;;==============================load task id & sp starting==================================;; 
 419               	.macro  KER_LOAD_TASK_ID_AND_SP                           ;total 1.75uS @8MHz     ( 14 clocks) 
 420               		    LDS   R16                , KerBase+0x06           ;load task_id           (  2 clocks) 
 421               			LSL   R16                                         ;left shift to multiply (  1 clock ) 
 422               			LDI   R30                , lo8(KerSP)             ;fetch base pos low     (  1 clock ) 
 423               			LDI   R31                , hi8(KerSP)             ;fetch base pos high    (  1 clock ) 
 424               			ADD   R30                , R16                    ;add offset to array    (  1 clock ) 
 425               			LDI   R16                , 0x00                   ;set 0 to R16           (  1 clock ) 
 426               			ADC   R31                , R16                    ;add carry if any       (  1 clock ) 
 427               			LD    R16                , Z+                     ;load SPL at ZP         (  2 clocks) 
 428               			LD    R17                , Z                      ;load SPH at ZP         (  2 clocks) 
 429               			OUT   IOSPL              , R16                    ;load SPL0              (  1 clock ) 
 430               			OUT   IOSPH              , R17                    ;load SPH0              (  1 clock ) 
 431               	.endm
 432               	;;=================================load task id & sp end====================================;; 
 433               	
 434               	
 435               	
 436               	
 437               	
 438               	;;=================================ISR execution starting===================================;; 
 439               	.global  __vector_16
 440               	    __vector_16:                                          ;total 26.13uS @8MHz    (211 clocks) 
 441:kernel.S      **** 	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 442:kernel.S      ****         KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 443:kernel.S      **** 		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 444:kernel.S      **** 		KER_TICK_INCREMENT                                ;increment tick counter ( 27 clocks) 
 445:kernel.S      ****         KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 446               			;KER_LOAD_NEXT_TASK_ID                             ;inc & load next task ID( 13 clocks) 
 447               			
 448:kernel.S      **** 		KER_DEC_SLP_TIMEOUT
 449:kernel.S      **** 		KER_RUN_SCHEDULER
 450               		    
 451:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 452:kernel.S      **** 		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 453:kernel.S      **** 	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 454:kernel.S      **** 		RETI                                              ;return from interrupt  (  4 clocks) 
 455               	;;====================================ISR execution end=====================================;; 
 456               	
 457               	
 458               	
 459               	
 460               	
 461               	;;================================SysTick reg init starting=================================;; 
 462               	Kernel_SysTick_Reg_Init:                                  ;total operation        ( 55 clocks) 
 463:kernel.S      ****         CLI                                               ;disable global int,    (  1 clock ) 
 464:kernel.S      **** 		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 465:kernel.S      **** 		LDI   R16                , 0x00                   ;set 0x00 to R16,       (  1 clock ) 
 466:kernel.S      **** 		STS   KerBase+0x00       , R16                    ;clear  KerBase[0]      (  2 clocks) 
 467:kernel.S      **** 		STS   KerBase+0x01       , R16                    ;clear  KerBase[1]      (  2 clocks) 
 468:kernel.S      **** 		STS   KerBase+0x02       , R16                    ;clear  KerBase[2]      (  2 clocks) 
 469:kernel.S      **** 		STS   KerBase+0x03       , R16                    ;clear  KerBase[3]      (  2 clocks) 
 470:kernel.S      **** 		STS   KerBase+0x04       , R16                    ;clear  KerBase[4]      (  2 clocks) 
 471:kernel.S      **** 		STS   KerBase+0x05       , R16                    ;clear  KerBase[5]      (  2 clocks) 
 472:kernel.S      **** 		STS   KerBase+0x06       , R16                    ;clear  KerBase[6]      (  2 clocks) 
 473:kernel.S      **** 		STS   KerBase+0x07       , R16                    ;clear  KerBase[7]      (  2 clocks) 
 474:kernel.S      **** 		STS   KerBase+0x08       , R16                    ;clear  KerBase[8]      (  2 clocks) 
 475:kernel.S      ****         STS   KerBase+0x09       , R16                    ;clear  KerBase[9]      (  2 clocks) 
 476:kernel.S      **** 		STS   KerBase+0x07       , R16                    ;set ntask to 0         (  2 clocks) 
 477:kernel.S      **** 		STS   SRTCCR0A           , R16                    ;clear TCCR0A           (  2 clocks) 
 478:kernel.S      **** 		STS   SRTCCR0B           , R16                    ;clear TCCR0B           (  2 clocks) 
 479:kernel.S      **** 		STS   SRTIMSK0           , R16                    ;clear TIMSK0           (  2 clocks) 
 480:kernel.S      **** 		STS   SRTIFR0            , R16                    ;clear TIFR0            (  2 clocks) 
 481:kernel.S      **** 		STS   SROCR0A            , R16                    ;clear OCR0A            (  2 clocks) 
 482:kernel.S      **** 		STS   SROCR0B            , R16                    ;clear OCR0B            (  2 clocks) 
 483:kernel.S      **** 		STS   SRTCNT0            , R16                    ;clear TCNT0            (  2 clocks) 
 484:kernel.S      **** 		MOV   R16                , R24                    ;prescaler from arg1    (  1 clock ) 
 485:kernel.S      **** 		STS   SRTCCR0B           , R16                    ;set to TCCR0B          (  2 clocks) 
 486:kernel.S      **** 		MOV   R16                , R22                    ;reload val from arg2   (  1 clock ) 
 487:kernel.S      **** 		STS   KerBase+0x05       , R16                    ;KerBase[5] reload val  (  2 clocks) 
 488:kernel.S      **** 		STS   SRTCNT0            , R16                    ;set to TCNT0           (  2 clocks) 
 489:kernel.S      **** 		LDI   R16                , 0x01                   ;bit mask TOIE0         (  1 clock ) 
 490:kernel.S      **** 		STS   SRTIMSK0           , R16                    ;set to TIMSK0          (  2 clocks) 
 491:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 492               	;;===================================SysTick reg init end===================================;; 
 493               	
 494               	
 495               	
 496               	
 497               	
 498               	;;===============================SysTick value get starting=================================;; 
 499               	Kernel_SysTick_Val_Get:                                   ;total operation        ( 42 clocks) 
 500               	    _READ_AGAIN:
 501               		    ;first read & store to actual return registers
 502:kernel.S      **** 		LDS   R18		         , KerBase+0x00           ;byte0 (LSB)            (  2 clocks) 
 503:kernel.S      **** 		LDS   R19		         , KerBase+0x01           ;byte1                  (  2 clocks) 
 504:kernel.S      **** 		LDS   R20		         , KerBase+0x02           ;byte2                  (  2 clocks) 
 505:kernel.S      **** 		LDS   R21		         , KerBase+0x03           ;byte3                  (  2 clocks) 
 506:kernel.S      **** 		LDS   R22		         , KerBase+0x04           ;byte4 (MSB)            (  2 clocks) 
 507               			
 508               			;second read to scratch registers
 509:kernel.S      **** 		LDS   R26		         , KerBase+0x00           ;byte0 (LSB)            (  2 clocks) 
 510:kernel.S      **** 		LDS   R27		         , KerBase+0x01           ;byte1                  (  2 clocks) 
 511:kernel.S      **** 		LDS   R30		         , KerBase+0x02           ;byte2                  (  2 clocks) 
 512:kernel.S      **** 		LDS   R31		         , KerBase+0x03           ;byte3                  (  2 clocks) 
 513:kernel.S      **** 		LDS   R0		         , KerBase+0x04           ;byte4 (MSB)            (  2 clocks) 
 514               			
 515               			;compare all pairs
 516:kernel.S      **** 		CP    R18                , R26                    ;compare                (  1 clock ) 
 517:kernel.S      **** 		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 518:kernel.S      **** 		CP    R19                , R27                    ;compare                (  1 clock ) 
 519:kernel.S      **** 		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 520:kernel.S      **** 		CP    R20                , R30                    ;compare                (  1 clock ) 
 521:kernel.S      **** 		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 522:kernel.S      **** 		CP    R21                , R31                    ;compare                (  1 clock ) 
 523:kernel.S      **** 		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 524:kernel.S      **** 		CP    R22                , R0                     ;compare                (  1 clock ) 
 525:kernel.S      **** 		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 526               			
 527               			;only 5 bytes data are taken, force clear 3 high bytes (64bit return R25:R18)
 528:kernel.S      **** 		LDI   R23		         , 0x00                   ;byte5 -> R23           (  1 clocks) 
 529:kernel.S      **** 		LDI   R24		         , 0x00                   ;byte6 -> R24           (  1 clocks) 
 530:kernel.S      **** 		LDI   R25		         , 0x00                   ;byte7 -> R25           (  1 clocks) 
 531:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 532               	;;==================================SysTick value get end===================================;; 
 533               	
 534               	
 535               	
 536               	
 537               	
 538               	;;============================SysTick value safely get starting=============================;; 
 539               	Kernel_SysTick_Val_Safely_Get:                            ;total operation        ( 20 clocks) 
 540:kernel.S      ****         IN    R2                 , IOSREG                 ;save SREG              (  1 clock ) 
 541:kernel.S      ****         CLI                                               ;disable interrupts     (  1 clock ) 
 542:kernel.S      **** 		LDS   R18		         , KerBase+0x00           ;byte0 -> R18 (LSB)     (  2 clocks) 
 543:kernel.S      **** 		LDS   R19		         , KerBase+0x01           ;byte1 -> R19           (  2 clocks) 
 544:kernel.S      **** 		LDS   R20		         , KerBase+0x02           ;byte2 -> R20           (  2 clocks) 
 545:kernel.S      **** 		LDS   R21		         , KerBase+0x03           ;byte3 -> R21           (  2 clocks) 
 546:kernel.S      **** 		LDS   R22		         , KerBase+0x04           ;byte4 -> R22           (  2 clocks) 
 547:kernel.S      **** 		LDI   R23		         , 0x00                   ;byte5 -> R23           (  1 clocks) 
 548:kernel.S      **** 		LDI   R24		         , 0x00                   ;byte6 -> R24           (  1 clocks) 
 549:kernel.S      **** 		LDI   R25		         , 0x00                   ;byte7 -> R25 (MSB)     (  1 clocks) 
 550:kernel.S      **** 		OUT   IOSREG             , R2          		      ;restore SREG           (  1 clock ) 
 551:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 552               	;;===============================SysTick value safely get end===============================;; 
 553               	
 554               	
 555               	
 556               	
 557               	
 558               	;;==============================interrupt status get starting===============================;; 
 559               	Kernel_Interrupt_Sts_Get:                                 ;total operation        ( 10 clocks) 
 560:kernel.S      ****         LDI   R24		         , 0x00                   ;clear R24              (  1 clock ) 
 561:kernel.S      ****         IN    R16		         , IOSREG                 ;save SREG in R16       (  1 clock ) 
 562:kernel.S      **** 		SBRC  R16		         , 0x07                   ;check I flag->bit7     (  3 clocks) 
 563:kernel.S      **** 		LDI   R24		         , 0x01                   ;set R24 to 1           (  1 clock ) 
 564:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 565               	;;================================interrupt status get end==================================;; 
 566               	
 567               	
 568               	
 569               	
 570               	;;================================kernel task init starting=================================;; 
 571               	Kernel_Task_Init:
 572               	        ;func_ptr->R25:R24, task_id->R22, task_priority->R20
 573               	        ;save main SP & Z pointer
 574:kernel.S      ****         IN    R2                 , IOSPL                  ;save SPL of MSP        (  1 clock ) 
 575:kernel.S      ****         IN    R3                 , IOSPH                  ;save SPH of MSP        (  1 clock ) 
 576:kernel.S      ****         MOV   R4                 , R30                    ;save ZPL               (  2 clocks) 
 577:kernel.S      **** 		MOV   R5                 , R31                    ;save ZPH               (  2 clocks) 
 578               			
 579               			;set task status as ready
 580               			;MOV   R16                , R22                    ;load task_id           (  1 clock ) 
 581               			;LDI   R30                , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 582               			;LDI   R31                , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 583               			;ADD   R30                , R16                    ;add offset to array    (  1 clock ) 
 584               			;LDI   R16                , 0x00                   ;set 0 to R16           (  1 clock ) 
 585               			;ADC   R31                , R16                    ;add offset to array    (  1 clock )
 586               			;LDI   R16                , TASK_READY             ;set TASK_READY         (  1 clock ) 
 587               			;ST    Z                  , R16                    ;update flag            (  2 clocks)
 588               			
 589               			;set priority to KerSch+(task_id*4)+1
 590:kernel.S      **** 		MOV   R16                , R22                    ;load task_id           (  1 clock ) 
 591:kernel.S      **** 		LDI   R30                , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 592:kernel.S      **** 		LDI   R31                , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 593:kernel.S      **** 		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 594:kernel.S      **** 		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 595:kernel.S      **** 		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 596:kernel.S      **** 		ST    Z                  , R20                    ;save priority          (  2 clocks)
 597               			
 598               			;increment ntask
 599:kernel.S      **** 		LDS   R16                , KerBase+0x07           ;load ntask             (  2 clocks) 
 600:kernel.S      **** 		INC   R16                                         ;increment ntask        (  1 clock ) 
 601:kernel.S      **** 		STS   KerBase+0x07       , R16                    ;store ntask            (  2 clocks) 
 602               			
 603               			;set stack pointer for current task (KerStack + KER_STK_SZ*(ker_ind+1) - 1) ->stack top   
 604:kernel.S      **** 		MOV   R16                , R22                    ;load task_id           (  1 clock ) 
 605:kernel.S      **** 		INC   R16                                         ;increment task_id      (  1 clock ) 
 606:kernel.S      **** 		LDI   R17                , KER_STK_SZ             ;load stack size        (  1 clock ) 
 607:kernel.S      **** 		MUL   R16                , R17                    ;multiply to get offset (  2 clocks) 
 608:kernel.S      **** 		MOV   R30                , R0                     ;load multiplied low    (  2 clocks) 
 609:kernel.S      **** 		MOV   R31                , R1                     ;load multiplied high   (  2 clocks) 
 610:kernel.S      **** 		SBIW  R30                , 0x01                   ;KER_STK_SZ*(task_id+1)-1  (  2 clocks) 
 611:kernel.S      **** 		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 612:kernel.S      **** 		LDI   R16                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
 613:kernel.S      **** 		LDI   R17                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
 614:kernel.S      **** 		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 615:kernel.S      **** 		ADC   R31                , R17                    ;add high bytes+carry   (  1 clock ) 
 616:kernel.S      **** 		OUT   IOSPL              , R30                    ;load SPL               (  1 clock ) 
 617:kernel.S      ****         OUT   IOSPH              , R31                    ;load SPH               (  1 clock ) 
 618               			
 619               			;function argument directly returns word address
 620:kernel.S      **** 	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
 621:kernel.S      **** 		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 622               			
 623               			;push context to stack of this task
 624:kernel.S      **** 		KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 625               			
 626               			;read stack pointer of current task (necessary when restore)
 627:kernel.S      **** 		IN    R16                , IOSPL                  ;read SPL               (  1 clock ) 
 628:kernel.S      ****         IN    R17                , IOSPH                  ;read SPH               (  1 clock ) 
 629               			
 630               			;calculate the address where current task's SP will be stored and store SP
 631:kernel.S      **** 		MOV   R18                , R22                    ;fetch task_id from arg (  1 clock ) 
 632:kernel.S      **** 		LSL   R18                                         ;left shift to multiply (  1 clock ) 
 633:kernel.S      **** 		LDI   R30                , lo8(KerSP)             ;fetch base pos low     (  1 clock ) 
 634:kernel.S      **** 		LDI   R31                , hi8(KerSP)             ;fetch base pos high    (  1 clock ) 
 635:kernel.S      **** 		ADD   R30                , R18                    ;add offset to array    (  1 clock ) 
 636:kernel.S      **** 		LDI   R18                , 0x00                   ;set 0 to R16           (  1 clock ) 
 637:kernel.S      **** 		ADC   R31                , R18                    ;add carry if any       (  1 clock ) 
 638:kernel.S      **** 		ST    Z+                 , R16                    ;SPL at KerSp+offset    (  2 clocks) 
 639:kernel.S      **** 		ST    z                  , R17                    ;SPH at KerSp+offset    (  2 clocks) 
 640               			
 641               			;load Main SP, restore Z pointer
 642:kernel.S      **** 		OUT   IOSPL              , R2                     ;load SPL               (  1 clock ) 
 643:kernel.S      ****         OUT   IOSPH              , R3                     ;load SPH               (  1 clock ) 
 644:kernel.S      **** 		MOV   R30                , R4                     ;push ZPL               (  2 clocks) 
 645:kernel.S      **** 		MOV   R31                , R5                     ;push ZPL               (  2 clocks) 
 646:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 647               	;;===================================kernel task init end===================================;; 
 648               	
 649               	
 650               	
 651               	
 652               	
 653               	;;===================================kernel task starting===================================;; 
 654               	Kernel_Start_Tasks:
 655               			;start executing from task0
 656               			;save ZP
 657:kernel.S      **** 		MOV   R4                 , R30                    ;save ZPL               (  2 clocks) 
 658:kernel.S      **** 		MOV   R5                 , R31                    ;save ZPH               (  2 clocks) 
 659               			
 660               			;load ZP with addr+offset
 661:kernel.S      **** 		LDI   R30                , lo8(KerSP)             ;fetch ZPL KerSP        (  1 clock ) 
 662:kernel.S      **** 		LDI   R31                , hi8(KerSP)             ;fetch ZPH KerSP        (  1 clock ) 
 663               			
 664               			;load last task's SP
 665:kernel.S      **** 		LD    R16                , Z+                     ;load val from Z, inc Z (  2 clocks) 
 666:kernel.S      **** 		LD    R17                , Z                      ;load val from Z+1      (  2 clocks) 
 667               			
 668               			;set last task's SP
 669:kernel.S      **** 		OUT   IOSPL              , R16                    ;load SPL               (  1 clock ) 
 670:kernel.S      ****         OUT   IOSPH              , R17                    ;load SPH               (  1 clock ) 
 671               	       
 672               	        ;forcefully restore context, in ISR it will be stored automatically
 673:kernel.S      **** 		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 674               			
 675               			;restore ZP
 676:kernel.S      **** 		MOV   R30                , R4                     ;restore ZPL            (  2 clocks) 
 677:kernel.S      **** 		MOV   R31                , R5                     ;restore ZPL            (  2 clocks) 
 678               			
 679               			;enable global interrupt to start executing task, starting with task0
 680:kernel.S      **** 		SEI                                               ;enable global int      (  1 clock ) 
 681               			
 682               			;execute return to jump to task0, pushed while task init
 683:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 684               	;;======================================kernel task end=====================================;; 
 685               	
 686               	
 687               	
 688               	
 689               	
 690               	;;================================kernel task delay starting================================;; 
 691               	Kernel_Task_Idle:
 692               	    _IDLE_LOOP:
 693:kernel.S      **** 		RJMP  _IDLE_LOOP                                  ;return from subroutine (  4 clocks) 
 694               	;;=================================kernel task delay end====================================;; 
 695               	
 696               	
 697               	
 698               	
 699               	;;================================kernel task delay starting================================;; 
 700               	Kernel_Task_Sleep:
 701               			;create next task wakeup time
 702:kernel.S      **** 		LDS   R16                , KerBase+0x06           ;load tak_id            (  2 clocks) 
 703:kernel.S      **** 		MOV   R17                , R16                    ;copy                   (  1 clock ) 
 704:kernel.S      **** 		LSL   R17                                         ;x2                     (  1 clock ) 
 705:kernel.S      **** 		LDI   R30                , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 706:kernel.S      **** 		LDI   R31                , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 707:kernel.S      **** 		ADD   R30                , R17                    ;add low bytes          (  1 clock ) 
 708:kernel.S      **** 		LDI   R17                , 0x00                   ;load 0                 (  1 clock ) 
 709:kernel.S      **** 		ADC   R31                , R17                    ;add high byte+carry    (  1 clock ) 
 710:kernel.S      **** 		ST    Z+                 , R24                    ;save sleep time        (  2 clocks) 
 711:kernel.S      **** 		ST    Z                  , R25                    ;save sleep time        (  2 clocks) 
 712               			
 713:kernel.S      **** 		LDI   R30                , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 714:kernel.S      **** 		LDI   R31                , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 715:kernel.S      **** 		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 716:kernel.S      **** 		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 717:kernel.S      **** 		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 718:kernel.S      ****         LDI   R16                , TASK_BLOCK             ;block task until cnt=0 (  1 clock ) 
 719:kernel.S      **** 		ST    Z                  , R16                    ;save block flag        (  2 clocks) 
 720               			
 721               	    _WAIT_TASK_READY:
 722:kernel.S      **** 		LD    R16                , Z                      ;load val               (  2 clocks) 
 723:kernel.S      **** 		CPI   R16                , TASK_READY             ;compare with task ready(  1 clock ) 
 724:kernel.S      **** 		BRNE  _WAIT_TASK_READY
 725               			
 726:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 727               	;;=================================kernel task delay end====================================;; 
 728               	
 729               	
 730               	
 731               	
 732               	
 733               	;;================================kernel task delay starting================================;; 
 734               	Kernel_Task_Sleep_Time_Get:
 735               			;create next task wakeup time
 736:kernel.S      **** 		LDS   R16                , KerBase+0x06           ;load tak_id            (  2 clocks) 
 737:kernel.S      **** 		LSL   R16                                         ;x2                     (  1 clock ) 
 738:kernel.S      **** 		LDI   R30                , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 739:kernel.S      **** 		LDI   R31                , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 740:kernel.S      **** 		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 741:kernel.S      **** 		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 742:kernel.S      **** 		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 743:kernel.S      **** 		LD    R24                , Z+                     ;load sleep time        (  2 clocks) 
 744:kernel.S      **** 		LD    R25                , Z                      ;load sleep time        (  2 clocks) 
 745:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 746               	;;=================================kernel task delay end====================================;;
 747               	
 748               	
 749               	
 750               	
 751               	
 752               	;;================================kernel task delay starting================================;; 
 753               	Kernel_Task_Sts_Get:
 754               			;create next task wakeup time
 755:kernel.S      **** 		LDS   R16                , KerBase+0x06           ;load tak_id            (  2 clocks) 
 756:kernel.S      **** 		LDI   R30                , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 757:kernel.S      **** 		LDI   R31                , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 758:kernel.S      **** 		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 759:kernel.S      **** 		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 760:kernel.S      **** 		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 761:kernel.S      **** 		LD    R24                , Z                      ;load sleep time        (  2 clocks) 
 762:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 763               	;;=================================kernel task delay end====================================;;
 764               	
 765               	
 766               	
 767               	
 768               	
 769               	;;================================kernel task yeild starting================================;; 
 770               	Kernel_Task_Yeild:
 771               			;save context, save sp, load next task id, load next task sp, restore context
 772:kernel.S      **** 		KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 773:kernel.S      **** 		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 774:kernel.S      **** 		KER_LOAD_NEXT_TASK_ID                             ;inc & load next task ID( 13 clocks) 
 775:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 776:kernel.S      **** 		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 777:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 778               	;;=================================kernel task yeild end====================================;; 
DEFINED SYMBOLS
            kernel.S:12     *ABS*:000003e8 KER_TR
            kernel.S:13     *ABS*:00000003 KER_PRS
            kernel.S:14     *ABS*:00000082 KER_RLD
            kernel.S:15     *ABS*:00000080 KER_STK_SZ
            kernel.S:16     *ABS*:0000000a KER_MX_NTSK
            kernel.S:24     *ABS*:00000001 TASK_READY
            kernel.S:25     *ABS*:00000000 TASK_BLOCK
            kernel.S:33     *ABS*:0000005f SRSREG
            kernel.S:34     *ABS*:0000005e SRSPH
            kernel.S:35     *ABS*:0000005d SRSPL
            kernel.S:37     *ABS*:0000006e SRTIMSK0
            kernel.S:38     *ABS*:00000048 SROCR0B
            kernel.S:39     *ABS*:00000047 SROCR0A
            kernel.S:40     *ABS*:00000046 SRTCNT0
            kernel.S:41     *ABS*:00000045 SRTCCR0B
            kernel.S:42     *ABS*:00000044 SRTCCR0A
            kernel.S:43     *ABS*:00000035 SRTIFR0
            kernel.S:45     *ABS*:00000028 IOOCR0B
            kernel.S:46     *ABS*:00000027 IOOCR0A
            kernel.S:47     *ABS*:00000026 IOTCNT0
            kernel.S:48     *ABS*:00000025 IOTCCR0B
            kernel.S:49     *ABS*:00000024 IOTCCR0A
            kernel.S:50     *ABS*:00000015 IOTIFR0
            kernel.S:52     *ABS*:0000003f IOSREG
            kernel.S:53     *ABS*:0000003e IOSPH
            kernel.S:54     *ABS*:0000003d IOSPL
            kernel.S:65     .bss:00000000 KerBase
            kernel.S:68     .bss:0000000a KerSP
            kernel.S:71     .bss:0000001e KerSchSts
            kernel.S:74     .bss:00000028 KerSchPr
            kernel.S:77     .bss:00000032 KerSchSlp
            kernel.S:80     .bss:00000046 KerStack
            kernel.S:440    .text:00000000 __vector_16
            kernel.S:462    .text:0000016c Kernel_SysTick_Reg_Init
            kernel.S:499    .text:000001d4 Kernel_SysTick_Val_Get
            kernel.S:539    .text:00000218 Kernel_SysTick_Val_Safely_Get
            kernel.S:559    .text:0000023a Kernel_Interrupt_Sts_Get
            kernel.S:571    .text:00000244 Kernel_Task_Init
            kernel.S:654    .text:000002ea Kernel_Start_Tasks
            kernel.S:700    .text:00000348 Kernel_Task_Sleep
            kernel.S:734    .text:00000374 Kernel_Task_Sleep_Time_Get
            kernel.S:753    .text:0000038a Kernel_Task_Sts_Get
            kernel.S:770    .text:0000039c Kernel_Task_Yeild
            kernel.S:448    .text:000000a2 _UPDATE_TASK_READY5
            kernel.S:448    .text:000000cc _VAL_NULL5
            kernel.S:448    .text:000000da _LOOP5
            kernel.S:449    .text:000000e2 _CH_TASK_READY6
            kernel.S:449    .text:000000fe _NEXT_TASK_FOUND6
            kernel.S:449    .text:000000f6 _LOOP_CNT6
            kernel.S:449    .text:00000106 _IDLE_TASK6
            kernel.S:449    .text:0000010c _EXIT6
            kernel.S:500    .text:000001d4 _READ_AGAIN
            kernel.S:691    .text:00000346 Kernel_Task_Idle
            kernel.S:692    .text:00000346 _IDLE_LOOP
            kernel.S:721    .text:0000036c _WAIT_TASK_READY
            kernel.S:774    .text:00000404 _MOD_CONT15
            kernel.S:774    .text:0000040c _MOD_DONE15

NO UNDEFINED SYMBOLS
