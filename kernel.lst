   1               	# 1 "kernel.S"
   1               	
   0               	
   0               	
   2               	#include <avr/io.h>
   1               	/* Copyright (c) 2002,2003,2005,2006,2007 Marek Michalkiewicz, Joerg Wunsch
   2               	   Copyright (c) 2007 Eric B. Weddington
   3               	   All rights reserved.
   4               	
   5               	   Redistribution and use in source and binary forms, with or without
   6               	   modification, are permitted provided that the following conditions are met:
   7               	
   8               	   * Redistributions of source code must retain the above copyright
   9               	     notice, this list of conditions and the following disclaimer.
  10               	
  11               	   * Redistributions in binary form must reproduce the above copyright
  12               	     notice, this list of conditions and the following disclaimer in
  13               	     the documentation and/or other materials provided with the
  14               	     distribution.
  15               	
  16               	   * Neither the name of the copyright holders nor the names of
  17               	     contributors may be used to endorse or promote products derived
  18               	     from this software without specific prior written permission.
  19               	
  20               	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21               	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22               	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23               	  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24               	  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25               	  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26               	  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27               	  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28               	  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29               	  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30               	  POSSIBILITY OF SUCH DAMAGE. */
  31               	
  32               	/* $Id: io.h,v 1.52.2.28 2009/12/20 17:02:53 arcanum Exp $ */
  33               	
  34               	/** \file */
  35               	/** \defgroup avr_io <avr/io.h>: AVR device-specific IO definitions
  36               	    \code #include <avr/io.h> \endcode
  37               	
  38               	    This header file includes the apropriate IO definitions for the
  39               	    device that has been specified by the <tt>-mmcu=</tt> compiler
  40               	    command-line switch.  This is done by diverting to the appropriate
  41               	    file <tt>&lt;avr/io</tt><em>XXXX</em><tt>.h&gt;</tt> which should
  42               	    never be included directly.  Some register names common to all
  43               	    AVR devices are defined directly within <tt>&lt;avr/common.h&gt;</tt>,
  44               	    which is included in <tt>&lt;avr/io.h&gt;</tt>,
  45               	    but most of the details come from the respective include file.
  46               	
  47               	    Note that this file always includes the following files:
  48               	    \code 
  49               	    #include <avr/sfr_defs.h>
  50               	    #include <avr/portpins.h>
  51               	    #include <avr/common.h>
  52               	    #include <avr/version.h>
  53               	    \endcode
  54               	    See \ref avr_sfr for more details about that header file.
  55               	
  56               	    Included are definitions of the IO register set and their
  57               	    respective bit values as specified in the Atmel documentation.
  58               	    Note that inconsistencies in naming conventions,
  59               	    so even identical functions sometimes get different names on
  60               	    different devices.
  61               	
  62               	    Also included are the specific names useable for interrupt
  63               	    function definitions as documented
  64               	    \ref avr_signames "here".
  65               	
  66               	    Finally, the following macros are defined:
  67               	
  68               	    - \b RAMEND
  69               	    <br>
  70               	    The last on-chip RAM address.
  71               	    <br>
  72               	    - \b XRAMEND
  73               	    <br>
  74               	    The last possible RAM location that is addressable. This is equal to 
  75               	    RAMEND for devices that do not allow for external RAM. For devices 
  76               	    that allow external RAM, this will be larger than RAMEND.
  77               	    <br>
  78               	    - \b E2END
  79               	    <br>
  80               	    The last EEPROM address.
  81               	    <br>
  82               	    - \b FLASHEND
  83               	    <br>
  84               	    The last byte address in the Flash program space.
  85               	    <br>
  86               	    - \b SPM_PAGESIZE
  87               	    <br>
  88               	    For devices with bootloader support, the flash pagesize
  89               	    (in bytes) to be used for the \c SPM instruction. 
  90               	    - \b E2PAGESIZE
  91               	    <br>
  92               	    The size of the EEPROM page.
  93               	    
  94               	*/
  95               	
  96               	#ifndef _AVR_IO_H_
  97               	#define _AVR_IO_H_
  98               	
  99               	#include <avr/sfr_defs.h>
   1               	/* Copyright (c) 2002, Marek Michalkiewicz <marekm@amelek.gda.pl>
 100               	
 101               	#if defined (__AVR_AT94K__)
 102               	#  include <avr/ioat94k.h>
 103               	#elif defined (__AVR_AT43USB320__)
 104               	#  include <avr/io43u32x.h>
 105               	#elif defined (__AVR_AT43USB355__)
 106               	#  include <avr/io43u35x.h>
 107               	#elif defined (__AVR_AT76C711__)
 108               	#  include <avr/io76c711.h>
 109               	#elif defined (__AVR_AT86RF401__)
 110               	#  include <avr/io86r401.h>
 111               	#elif defined (__AVR_AT90PWM1__)
 112               	#  include <avr/io90pwm1.h>
 113               	#elif defined (__AVR_AT90PWM2__)
 114               	#  include <avr/io90pwmx.h>
 115               	#elif defined (__AVR_AT90PWM2B__)
 116               	#  include <avr/io90pwm2b.h>
 117               	#elif defined (__AVR_AT90PWM3__)
 118               	#  include <avr/io90pwmx.h>
 119               	#elif defined (__AVR_AT90PWM3B__)
 120               	#  include <avr/io90pwm3b.h>
 121               	#elif defined (__AVR_AT90PWM216__)
 122               	#  include <avr/io90pwm216.h>
 123               	#elif defined (__AVR_AT90PWM316__)
 124               	#  include <avr/io90pwm316.h>
 125               	#elif defined (__AVR_AT90PWM81__)
 126               	#  include <avr/io90pwm81.h>
 127               	#elif defined (__AVR_ATmega8U2__)
 128               	#  include <avr/iom8u2.h>
 129               	#elif defined (__AVR_ATmega16M1__)
 130               	#  include <avr/iom16m1.h>
 131               	#elif defined (__AVR_ATmega16U2__)
 132               	#  include <avr/iom16u2.h>
 133               	#elif defined (__AVR_ATmega16U4__)
 134               	#  include <avr/iom16u4.h>
 135               	#elif defined (__AVR_ATmega32C1__)
 136               	#  include <avr/iom32c1.h>
 137               	#elif defined (__AVR_ATmega32M1__)
 138               	#  include <avr/iom32m1.h>
 139               	#elif defined (__AVR_ATmega32U2__)
 140               	#  include <avr/iom32u2.h>
 141               	#elif defined (__AVR_ATmega32U4__)
 142               	#  include <avr/iom32u4.h>
 143               	#elif defined (__AVR_ATmega32U6__)
 144               	#  include <avr/iom32u6.h>
 145               	#elif defined (__AVR_ATmega64C1__)
 146               	#  include <avr/iom64c1.h>
 147               	#elif defined (__AVR_ATmega64M1__)
 148               	#  include <avr/iom64m1.h>
 149               	#elif defined (__AVR_ATmega128__)
 150               	#  include <avr/iom128.h>
 151               	#elif defined (__AVR_ATmega1280__)
 152               	#  include <avr/iom1280.h>
 153               	#elif defined (__AVR_ATmega1281__)
 154               	#  include <avr/iom1281.h>
 155               	#elif defined (__AVR_ATmega1284P__)
 156               	#  include <avr/iom1284p.h>
 157               	#elif defined (__AVR_ATmega128RFA1__)
 158               	#  include <avr/iom128rfa1.h>
 159               	#elif defined (__AVR_ATmega2560__)
 160               	#  include <avr/iom2560.h>
 161               	#elif defined (__AVR_ATmega2561__)
 162               	#  include <avr/iom2561.h>
 163               	#elif defined (__AVR_AT90CAN32__)
 164               	#  include <avr/iocan32.h>
 165               	#elif defined (__AVR_AT90CAN64__)
 166               	#  include <avr/iocan64.h>
 167               	#elif defined (__AVR_AT90CAN128__)
 168               	#  include <avr/iocan128.h>
 169               	#elif defined (__AVR_AT90USB82__)
 170               	#  include <avr/iousb82.h>
 171               	#elif defined (__AVR_AT90USB162__)
 172               	#  include <avr/iousb162.h>
 173               	#elif defined (__AVR_AT90USB646__)
 174               	#  include <avr/iousb646.h>
 175               	#elif defined (__AVR_AT90USB647__)
 176               	#  include <avr/iousb647.h>
 177               	#elif defined (__AVR_AT90USB1286__)
 178               	#  include <avr/iousb1286.h>
 179               	#elif defined (__AVR_AT90USB1287__)
 180               	#  include <avr/iousb1287.h>
 181               	#elif defined (__AVR_ATmega64__)
 182               	#  include <avr/iom64.h>
 183               	#elif defined (__AVR_ATmega640__)
 184               	#  include <avr/iom640.h>
 185               	#elif defined (__AVR_ATmega644__) || defined (__AVR_ATmega644A__)
 186               	#  include <avr/iom644.h>
 187               	#elif defined (__AVR_ATmega644P__)
 188               	#  include <avr/iom644p.h>
 189               	#elif defined (__AVR_ATmega644PA__)
 190               	#  include <avr/iom644pa.h>
 191               	#elif defined (__AVR_ATmega645__) || defined (__AVR_ATmega645A__) || defined (__AVR_ATmega645P__)
 192               	#  include <avr/iom645.h>
 193               	#elif defined (__AVR_ATmega6450__) || defined (__AVR_ATmega6450A__) || defined (__AVR_ATmega6450P__
 194               	#  include <avr/iom6450.h>
 195               	#elif defined (__AVR_ATmega649__) || defined (__AVR_ATmega649A__)
 196               	#  include <avr/iom649.h>
 197               	#elif defined (__AVR_ATmega6490__) || defined (__AVR_ATmega6490A__) || defined (__AVR_ATmega6490P__
 198               	#  include <avr/iom6490.h>
 199               	#elif defined (__AVR_ATmega649P__)
 200               	#  include <avr/iom649p.h>
 201               	#elif defined (__AVR_ATmega64HVE__)
 202               	#  include <avr/iom64hve.h>
 203               	#elif defined (__AVR_ATmega103__)
 204               	#  include <avr/iom103.h>
 205               	#elif defined (__AVR_ATmega32__)
 206               	#  include <avr/iom32.h>
 207               	#elif defined (__AVR_ATmega323__)
 208               	#  include <avr/iom323.h>
 209               	#elif defined (__AVR_ATmega324P__) || defined (__AVR_ATmega324A__)
 210               	#  include <avr/iom324.h>
 211               	#elif defined (__AVR_ATmega324PA__)
 212               	#  include <avr/iom324pa.h>
 213               	#elif defined (__AVR_ATmega325__)
 214               	#  include <avr/iom325.h>
 215               	#elif defined (__AVR_ATmega325P__)
 216               	#  include <avr/iom325.h>
 217               	#elif defined (__AVR_ATmega3250__)
 218               	#  include <avr/iom3250.h>
 219               	#elif defined (__AVR_ATmega3250P__)
 220               	#  include <avr/iom3250.h>
 221               	#elif defined (__AVR_ATmega328P__) || defined (__AVR_ATmega328__)
 222               	#  include <avr/iom328p.h>
   1               	/* Copyright (c) 2007 Atmel Corporation
 223               	#elif defined (__AVR_ATmega329__)
 224               	#  include <avr/iom329.h>
 225               	#elif defined (__AVR_ATmega329P__) || defined (__AVR_ATmega329PA__)
 226               	#  include <avr/iom329.h>
 227               	#elif defined (__AVR_ATmega3290__)
 228               	#  include <avr/iom3290.h>
 229               	#elif defined (__AVR_ATmega3290P__)
 230               	#  include <avr/iom3290.h>
 231               	#elif defined (__AVR_ATmega32HVB__)
 232               	#  include <avr/iom32hvb.h>
 233               	#elif defined (__AVR_ATmega406__)
 234               	#  include <avr/iom406.h>
 235               	#elif defined (__AVR_ATmega16__)
 236               	#  include <avr/iom16.h>
 237               	#elif defined (__AVR_ATmega16A__)
 238               	#  include <avr/iom16a.h>
 239               	#elif defined (__AVR_ATmega161__)
 240               	#  include <avr/iom161.h>
 241               	#elif defined (__AVR_ATmega162__)
 242               	#  include <avr/iom162.h>
 243               	#elif defined (__AVR_ATmega163__)
 244               	#  include <avr/iom163.h>
 245               	#elif defined (__AVR_ATmega164P__) || defined (__AVR_ATmega164A__)
 246               	#  include <avr/iom164.h>
 247               	#elif defined (__AVR_ATmega165__) || defined (__AVR_ATmega165A__)
 248               	#  include <avr/iom165.h>
 249               	#elif defined (__AVR_ATmega165P__)
 250               	#  include <avr/iom165p.h>
 251               	#elif defined (__AVR_ATmega168__) || defined (__AVR_ATmega168A__)
 252               	#  include <avr/iom168.h>
 253               	#elif defined (__AVR_ATmega168P__)
 254               	#  include <avr/iom168p.h>
 255               	#elif defined (__AVR_ATmega169__) || defined (__AVR_ATmega169A__)
 256               	#  include <avr/iom169.h>
 257               	#elif defined (__AVR_ATmega169P__)
 258               	#  include <avr/iom169p.h>
 259               	#elif defined (__AVR_ATmega169PA__)
 260               	#  include <avr/iom169pa.h>
 261               	#elif defined (__AVR_ATmega8HVA__)
 262               	#  include <avr/iom8hva.h>
 263               	#elif defined (__AVR_ATmega16HVA__)
 264               	#  include <avr/iom16hva.h>
 265               	#elif defined (__AVR_ATmega16HVA2__)
 266               	#  include <avr/iom16hva2.h>
 267               	#elif defined (__AVR_ATmega16HVB__)
 268               	#  include <avr/iom16hvb.h>
 269               	#elif defined (__AVR_ATmega8__)
 270               	#  include <avr/iom8.h>
 271               	#elif defined (__AVR_ATmega48__) || defined (__AVR_ATmega48A__)
 272               	#  include <avr/iom48.h>
 273               	#elif defined (__AVR_ATmega48P__)
 274               	#  include <avr/iom48p.h>
 275               	#elif defined (__AVR_ATmega88__) || defined (__AVR_ATmega88A__)
 276               	#  include <avr/iom88.h>
 277               	#elif defined (__AVR_ATmega88P__)
 278               	#  include <avr/iom88p.h>
 279               	#elif defined (__AVR_ATmega88PA__)
 280               	#  include <avr/iom88pa.h>
 281               	#elif defined (__AVR_ATmega8515__)
 282               	#  include <avr/iom8515.h>
 283               	#elif defined (__AVR_ATmega8535__)
 284               	#  include <avr/iom8535.h>
 285               	#elif defined (__AVR_AT90S8535__)
 286               	#  include <avr/io8535.h>
 287               	#elif defined (__AVR_AT90C8534__)
 288               	#  include <avr/io8534.h>
 289               	#elif defined (__AVR_AT90S8515__)
 290               	#  include <avr/io8515.h>
 291               	#elif defined (__AVR_AT90S4434__)
 292               	#  include <avr/io4434.h>
 293               	#elif defined (__AVR_AT90S4433__)
 294               	#  include <avr/io4433.h>
 295               	#elif defined (__AVR_AT90S4414__)
 296               	#  include <avr/io4414.h>
 297               	#elif defined (__AVR_ATtiny22__)
 298               	#  include <avr/iotn22.h>
 299               	#elif defined (__AVR_ATtiny26__)
 300               	#  include <avr/iotn26.h>
 301               	#elif defined (__AVR_AT90S2343__)
 302               	#  include <avr/io2343.h>
 303               	#elif defined (__AVR_AT90S2333__)
 304               	#  include <avr/io2333.h>
 305               	#elif defined (__AVR_AT90S2323__)
 306               	#  include <avr/io2323.h>
 307               	#elif defined (__AVR_AT90S2313__)
 308               	#  include <avr/io2313.h>
 309               	#elif defined (__AVR_ATtiny2313__)
 310               	#  include <avr/iotn2313.h>
 311               	#elif defined (__AVR_ATtiny2313A__)
 312               	#  include <avr/iotn2313a.h>
 313               	#elif defined (__AVR_ATtiny13__)
 314               	#  include <avr/iotn13.h>
 315               	#elif defined (__AVR_ATtiny13A__)
 316               	#  include <avr/iotn13a.h>
 317               	#elif defined (__AVR_ATtiny25__)
 318               	#  include <avr/iotn25.h>
 319               	#elif defined (__AVR_ATtiny4313__)
 320               	#  include <avr/iotn4313.h>
 321               	#elif defined (__AVR_ATtiny45__)
 322               	#  include <avr/iotn45.h>
 323               	#elif defined (__AVR_ATtiny85__)
 324               	#  include <avr/iotn85.h>
 325               	#elif defined (__AVR_ATtiny24__)
 326               	#  include <avr/iotn24.h>
 327               	#elif defined (__AVR_ATtiny24A__)
 328               	#  include <avr/iotn24a.h>
 329               	#elif defined (__AVR_ATtiny44__)
 330               	#  include <avr/iotn44.h>
 331               	#elif defined (__AVR_ATtiny44A__)
 332               	#  include <avr/iotn44a.h>
 333               	#elif defined (__AVR_ATtiny84__)
 334               	#  include <avr/iotn84.h>
 335               	#elif defined (__AVR_ATtiny261__)
 336               	#  include <avr/iotn261.h>
 337               	#elif defined (__AVR_ATtiny261A__)
 338               	#  include <avr/iotn261a.h>
 339               	#elif defined (__AVR_ATtiny461__)
 340               	#  include <avr/iotn461.h>
 341               	#elif defined (__AVR_ATtiny461A__)
 342               	#  include <avr/iotn461a.h>
 343               	#elif defined (__AVR_ATtiny861__)
 344               	#  include <avr/iotn861.h>
 345               	#elif defined (__AVR_ATtiny861A__)
 346               	#  include <avr/iotn861a.h>
 347               	#elif defined (__AVR_ATtiny43U__)
 348               	#  include <avr/iotn43u.h>
 349               	#elif defined (__AVR_ATtiny48__)
 350               	#  include <avr/iotn48.h>
 351               	#elif defined (__AVR_ATtiny88__)
 352               	#  include <avr/iotn88.h>
 353               	#elif defined (__AVR_ATtiny87__)
 354               	#  include <avr/iotn87.h>
 355               	#elif defined (__AVR_ATtiny167__)
 356               	#  include <avr/iotn167.h>
 357               	#elif defined (__AVR_AT90SCR100__)
 358               	#  include <avr/io90scr100.h>
 359               	#elif defined (__AVR_ATxmega16A4__)
 360               	#  include <avr/iox16a4.h>
 361               	#elif defined (__AVR_ATxmega16D4__)
 362               	#  include <avr/iox16d4.h>
 363               	#elif defined (__AVR_ATxmega32A4__)
 364               	#  include <avr/iox32a4.h>
 365               	#elif defined (__AVR_ATxmega32D4__)
 366               	#  include <avr/iox32d4.h>
 367               	#elif defined (__AVR_ATxmega64A1__)
 368               	#  include <avr/iox64a1.h>
 369               	#elif defined (__AVR_ATxmega64A3__)
 370               	#  include <avr/iox64a3.h>
 371               	#elif defined (__AVR_ATxmega64D3__)
 372               	#  include <avr/iox64d3.h>
 373               	#elif defined (__AVR_ATxmega128A1__)
 374               	#  include <avr/iox128a1.h>
 375               	#elif defined (__AVR_ATxmega128A3__)
 376               	#  include <avr/iox128a3.h>
 377               	#elif defined (__AVR_ATxmega128D3__)
 378               	#  include <avr/iox128d3.h>
 379               	#elif defined (__AVR_ATxmega192A3__)
 380               	#  include <avr/iox192a3.h>
 381               	#elif defined (__AVR_ATxmega192D3__)
 382               	#  include <avr/iox192d3.h>
 383               	#elif defined (__AVR_ATxmega256A3__)
 384               	#  include <avr/iox256a3.h>
 385               	#elif defined (__AVR_ATxmega256A3B__)
 386               	#  include <avr/iox256a3b.h>
 387               	#elif defined (__AVR_ATxmega256D3__)
 388               	#  include <avr/iox256d3.h>
 389               	#elif defined (__AVR_ATA6289__)
 390               	#  include <avr/ioa6289.h>
 391               	/* avr1: the following only supported for assembler programs */
 392               	#elif defined (__AVR_ATtiny28__)
 393               	#  include <avr/iotn28.h>
 394               	#elif defined (__AVR_AT90S1200__)
 395               	#  include <avr/io1200.h>
 396               	#elif defined (__AVR_ATtiny15__)
 397               	#  include <avr/iotn15.h>
 398               	#elif defined (__AVR_ATtiny12__)
 399               	#  include <avr/iotn12.h>
 400               	#elif defined (__AVR_ATtiny11__)
 401               	#  include <avr/iotn11.h>
 402               	#else
 403               	#  if !defined(__COMPILING_AVR_LIBC__)
 404               	#    warning "device type not defined"
 405               	#  endif
 406               	#endif
 407               	
 408               	#include <avr/portpins.h>
   1               	/* Copyright (c) 2003  Theodore A. Roth
 409               	
 410               	#include <avr/common.h>
   1               	/* Copyright (c) 2007 Eric B. Weddington
 411               	
 412               	#include <avr/version.h>
   1               	/* Copyright (c) 2005, Joerg Wunsch                               -*- c -*-
 413               	
 414               	/* Include fuse.h after individual IO header files. */
 415               	#include <avr/fuse.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 416               	
 417               	/* Include lock.h after individual IO header files. */
 418               	#include <avr/lock.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 419               	
   3               	#include <avr/interrupt.h>
   1               	/* Copyright (c) 2002,2005,2007 Marek Michalkiewicz
   4               	#include "kernel.h"
   1               	
   5               	#include "debug.h"
   1               	
   6               	
   7               	
   8               	
   9               	
  10               	
  11               	;;============================define user address or macro starting=========================;; 
  12               	.equ     KER_TR ,         1000                            ;TickRate in Hz, only defined, not calcul
  13               	.equ     KER_PRS,         0x03                            ;For prescaler 64, manually select
  14               	.equ     KER_RLD,         0x82                            ;KER_RLD = 0xFF-(F_CPU/KER_PRS/KER_TR), c
  15               	.equ     KER_STK_SZ,      128                             ;stack size in bytes for each task
  16               	.equ     KER_MX_NTSK,     10                              ;max number of tasks
  17               	;;==============================define user address or macro end============================;; 
  18               	
  19               	
  20               	
  21               	
  22               	
  23               	;;===============================define data offsets starting===============================;; 
  24               	.equ     OFB_TICK0,       0x00                            ;tick count byte0 offset from KerBase
  25               	.equ     OFB_TICK1,       0x01                            ;tick count byte1 offset from KerBase
  26               	.equ     OFB_TICK2,       0x02                            ;tick count byte2 offset from KerBase
  27               	.equ     OFB_TICK3,       0x03                            ;tick count byte3 offset from KerBase
  28               	.equ     OFB_TICK4,       0x04                            ;tick count byte4 offset from KerBase
  29               	.equ     OFB_PRS  ,       0x05                            ;counter prescaler offset from KerBase
  30               	.equ     OFB_RLD  ,       0x06                            ;counter reload offset from KerBase
  31               	.equ     OFB_TID  ,       0x07                            ;task id offset from KerBase
  32               	.equ     OFB_NTSK ,       0x08                            ;ntask offset from KerBase
  33               	.equ     OFB_LPR  ,       0x09                            ;lowest priority offset from KerBase
  34               	.equ     OFB_PTID ,       0x0A                            ;priority task_id offset from KerBase
  35               	.equ     OFM_MSPI ,       0x00                            ;main stack pointer index field offset fr
  36               	.equ     OFM_MSPS ,       0x02                            ;main stack pointer starting offset from 
  37               	;;==================================define data offsets end=================================;; 
  38               	
  39               	
  40               	
  41               	
  42               	
  43               	;;===============================define system macro starting===============================;; 
  44               	.equ     TASK_READY,      0x01                            ;bit 0 in system status reg
  45               	.equ     TASK_BLOCK,      0x00                            ;bit 0 in system status reg
  46               	;;==================================define system macro end=================================;; 
  47               	
  48               	
  49               	
  50               	
  51               	
  52               	;;===========================define hardware reg address starting===========================;; 
  53               	.equ     SRSREG  ,        0x5F                            ;manually defined SREG in SRAM
  54               	.equ     SRSPH   ,        0x5E                            ;manually defined SPH in SRAM
  55               	.equ     SRSPL   ,        0x5D                            ;manually defined SPL in SRAM
  56               	
  57               	.equ     SRTIMSK0,        0x6E                            ;manually defined TIMSK0 in SRAM
  58               	.equ     SROCR0B ,        0x48                            ;manually defined OCR0B in SRAM
  59               	.equ     SROCR0A ,        0x47                            ;manually defined OCR0A in SRAM
  60               	.equ     SRTCNT0 ,        0x46                            ;manually defined TCNT0 in SRAM
  61               	.equ     SRTCCR0B,        0x45                            ;manually defined TCCR0B in SRAM
  62               	.equ     SRTCCR0A,        0x44                            ;manually defined TCCR0A in SRAM
  63               	.equ     SRTIFR0 ,        0x35                            ;manually defined TIFR0 in SRAM
  64               	
  65               	.equ     IOOCR0B ,        0x28                            ;manually defined OCR0B in IO
  66               	.equ     IOOCR0A ,        0x27                            ;manually defined OCR0A in IO
  67               	.equ     IOTCNT0 ,        0x26                            ;manually defined TCNT0 in IO
  68               	.equ     IOTCCR0B,        0x25                            ;manually defined TCCR0B in IO
  69               	.equ     IOTCCR0A,        0x24                            ;manually defined TCCR0A in IO
  70               	.equ     IOTIFR0 ,        0x15                            ;manually defined TIFR0 in IO
  71               	
  72               	.equ     IOSREG  ,        0x3F                            ;manually defined SREG in IO
  73               	.equ     IOSPH   ,        0x3E                            ;manually defined SPH in IO
  74               	.equ     IOSPL   ,        0x3D                            ;manually defined SPL in IO
  75               	;;==============================define hardware reg address end=============================;; 
  76               	
  77               	
  78               	
  79               	
  80               	
  81               	;;=============================define global variables starting=============================;; 
  82               	.section   .bss
  83               	
  84               	.global    KerBase                                        ;declare global space for kernel
  85 0000 0000 0000 	KerBase:   .skip 12                                       ;see offset section
  85      0000 0000 
  85      0000 0000 
  86               	
  87               	.global    KerPSP                                         ;space for process stack pointers
  88 000c 0000 0000 	KerPSP:    .skip KER_MX_NTSK*2                            ;2 bytes for each task
  88      0000 0000 
  88      0000 0000 
  88      0000 0000 
  88      0000 0000 
  89               	
  90               	.global    KerSSZ                                         ;stack for main stack pointers
  91 0020 0000 0000 	KerSSZ:    .skip 14                                       ;stack_ptr(2), MSPZPn(4)
  91      0000 0000 
  91      0000 0000 
  91      0000 
  92               	
  93               	.global    KerSchSts                                      ;space for scheduler status
  94 002e 0000 0000 	KerSchSts: .skip KER_MX_NTSK*1                            ;status(1)
  94      0000 0000 
  94      0000 
  95               	
  96               	.global    KerSchPr                                       ;space for scheduler priority
  97 0038 0000 0000 	KerSchPr:  .skip KER_MX_NTSK*1                            ;priority(1)
  97      0000 0000 
  97      0000 
  98               	
  99               	.global    KerSchSlp                                      ;space for task sleep
 100 0042 0000 0000 	KerSchSlp: .skip KER_MX_NTSK*2                            ;timing(2)
 100      0000 0000 
 100      0000 0000 
 100      0000 0000 
 100      0000 0000 
 101               	
 102               	.global    KerStack                                       ;space for stack
 103 0056 0000 0000 	KerStack:  .skip KER_STK_SZ*KER_MX_NTSK                   ;KER_STK_SZ bytes for each task
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 104               	;;==============================define global variables end=================================;; 
 105               	
 106               	
 107               	
 108               	
 109               	
 110               	;;===============================define vector section starting=============================;; 
 111               	.section .vectors, "ax", @progbits
 112               	
 113 0000 0000 0000 	.org    0x20
 113      0000 0000 
 113      0000 0000 
 113      0000 0000 
 113      0000 0000 
 113      0000 0000 
 113      0000 0000 
 113      0000 0000 
 114:kernel.S      ****         RJMP  __vector_16
 115               	;;=================================define vector section end================================;; 
 116               	
 117               	
 118               	
 119               	
 120               	
 121               	;;===============================define text section starting===============================;; 
 122               	.section .text
 123               	;;==================================define text section end=================================;; 
 124               	
 125               	
 126               	
 127               	
 128               	
 129               	;;==============================define global functions starting============================;; 
 130               	.global  Kernel_SysTick_Reg_Init
 131               	.global  Kernel_SysTick_Val_Get
 132               	.global  Kernel_SysTick_Val_Safely_Get
 133               	.global  Kernel_Interrupt_Sts_Get
 134               	.global  Kernel_Init
 135               	.global  Kernel_Task_Create
 136               	.global  Kernel_Start_Tasks
 137               	.global  Kernel_Task_Idle
 138               	.global  Kernel_Task_Sleep
 139               	.global  Kernel_Task_Sleep_Time_Get
 140               	.global  Kernel_Task_Status_Get
 141               	.global  Kernel_NTask_Get
 142               	.global  Kernel_Task_Prio_Get
 143               	.global  Kernel_Lowest_Prio_Get
 144               	.global  Kernel_High_Prio_Task_ID_Get
 145               	.global  Kernel_Abs_High_Prio_Task_ID_Get
 146               	;;================================define global functions end===============================;; 
 147               	
 148               	
 149               	
 150               	
 151               	
 152               	;;============================debug pin operation init starting=============================;; 
 153               	;used registers          : R16, R17                                                            
 154               	;unsafe access registers : None                                                                
 155               	.macro  KER_TIMER_INIT                                    ;total 1.5uS @8MHz      ( 12 clocks) 
 156               	        LDS   R16		         , KerBase+OFB_PRS        ;load prescaler         (  2 clocks) 
 157               			LDS   R17		         , KerBase+OFB_RLD        ;load reload val        (  2 clocks) 
 158               			STS   SRTCCR0B           , R16                    ;prescaler-> TCCR0B     (  2 clocks) 
 159               			STS   SRTCNT0            , R17                    ;reload val-> TCNT0     (  2 clocks) 
 160               			LDI   R16                , 0x01                   ;bit mask TOIE0         (  1 clock ) 
 161               			STS   SRTIMSK0           , R16                    ;set to TIMSK0          (  2 clocks) 
 162               			SEI                                               ;force enable interrupt (  1 clock ) 
 163               	.endm                                                                                          
 164               	;;==============================debug pin operation init end================================;; 
 165               	
 166               	
 167               	
 168               	
 169               	
 170               	;;============================debug pin operation init starting=============================;; 
 171               	;used registers          : None                                                                
 172               	;unsafe access registers : None                                                                
 173               	.macro  KER_DEBUG_PIN_INIT                                ;total 0.5uS @8MHz      (  4 clocks) 
 174               	        #ifdef KER_DBG_ENABLE                                                                  
 175               			CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear port bit         (  2 clocks) 
 176               			SBI   KER_DBG_DDR        , KER_DBG_PIN            ;set bit in DDR         (  2 clocks) 
 177               			#endif                                                                                 
 178               	.endm                                                                                          
 179               	;;==============================debug pin operation init end================================;; 
 180               	
 181               	
 182               	
 183               	
 184               	
 185               	;;===========================debug pin operation set starting===============================;; 
 186               	;used registers          : None                                                                
 187               	;unsafe access registers : None                                                                
 188               	.macro  KER_DEBUG_PIN_SET                                 ;total 0.25uS @8MHz     (  2 clocks) 
 189               	        #ifdef KER_DBG_ENABLE                                                                  
 190               	        SBI   KER_DBG_PORT       , KER_DBG_PIN            ;set gpio               (  2 clocks) 
 191               			#endif                                                                                 
 192               	.endm                                                                                          
 193               	;;==============================debug pin operation set end=================================;; 
 194               	
 195               	
 196               	
 197               	
 198               	
 199               	;;===========================debug pin operation clear starting=============================;; 
 200               	;used registers          : None                                                                
 201               	;unsafe access registers : None                                                                
 202               	.macro  KER_DEBUG_PIN_CLEAR                               ;total 0.25uS @8MHz     (  2 clocks) 
 203               	        #ifdef KER_DBG_ENABLE                                                                  
 204               			CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear gpio             (  2 clocks) 
 205               			#endif                                                                                 
 206               	.endm                                                                                          
 207               	;;==============================debug pin operation clear end===============================;; 
 208               	
 209               	
 210               	
 211               	
 212               	
 213               	;;==============================reload counter value starting===============================;; 
 214               	;used registers          : R16                                                                 
 215               	;unsafe access registers : None                                                                
 216               	.macro  KER_COUNTER_RELOAD                                ;total 0.5uS @8MHz      (  4 clocks) 
 217               	        LDS   R16                , KerBase+OFB_RLD        ;load reload value      (  2 clocks) 
 218               			STS   SRTCNT0            , R16                    ;Set value to TCNT0     (  2 clocks) 
 219               	.endm                                                                                          
 220               	;;=================================reload counter value end=================================;; 
 221               	
 222               	
 223               	
 224               	
 225               	
 226               	;;==================================context save starting===================================;; 
 227               	;used registers          : R0~R31                                                              
 228               	;unsafe access registers : None                                                                
 229               	.macro  KER_CONTEXT_SAVE                                  ;total 8.5uS @8MHz      ( 68 clocks) 
 230               	        PUSH  R0                                          ;save R0                (  2 clocks) 
 231               			IN    R0                 , IOSREG                 ;load SREG              (  1 clock ) 
 232               			PUSH  R0                                          ;save SREG              (  2 clocks) 
 233               			PUSH  R1                                          ;save R1                (  2 clocks) 
 234               			CLR   R1                                          ;clear R1               (  1 clock ) 
 235               			PUSH  R2                                          ;save R2                (  2 clocks) 
 236               			PUSH  R3                                          ;save R3                (  2 clocks) 
 237               			PUSH  R4                                          ;save R4                (  2 clocks) 
 238               			PUSH  R5                                          ;save R5                (  2 clocks) 
 239               			PUSH  R6                                          ;save R6                (  2 clocks) 
 240               			PUSH  R7                                          ;save R7                (  2 clocks) 
 241               			PUSH  R8                                          ;save R8                (  2 clocks) 
 242               			PUSH  R9                                          ;save R9                (  2 clocks) 
 243               			PUSH  R10                                         ;save R10               (  2 clocks) 
 244               			PUSH  R11                                         ;save R11               (  2 clocks) 
 245               			PUSH  R12                                         ;save R12               (  2 clocks) 
 246               			PUSH  R13                                         ;save R13               (  2 clocks) 
 247               			PUSH  R14                                         ;save R14               (  2 clocks) 
 248               			PUSH  R15                                         ;save R15               (  2 clocks) 
 249               			PUSH  R16                                         ;save R16               (  2 clocks) 
 250               			PUSH  R17                                         ;save R17               (  2 clocks) 
 251               			PUSH  R18                                         ;save R18               (  2 clocks) 
 252               			PUSH  R19                                         ;save R19               (  2 clocks) 
 253               			PUSH  R20                                         ;save R20               (  2 clocks) 
 254               			PUSH  R21                                         ;save R21               (  2 clocks) 
 255               			PUSH  R22                                         ;save R22               (  2 clocks) 
 256               			PUSH  R23                                         ;save R23               (  2 clocks) 
 257               			PUSH  R24                                         ;save R24               (  2 clocks) 
 258               			PUSH  R25                                         ;save R25               (  2 clocks) 
 259               			PUSH  R26                                         ;save R26               (  2 clocks) 
 260               			PUSH  R27                                         ;save R27               (  2 clocks) 
 261               			PUSH  R28                                         ;save R28               (  2 clocks) 
 262               			PUSH  R29                                         ;save R29               (  2 clocks) 
 263               			PUSH  R30                                         ;save R30               (  2 clocks) 
 264               			PUSH  R31                                         ;save R31               (  2 clocks) 
 265               	.endm                                                                                          
 266               	;;=====================================context save end=====================================;; 
 267               	
 268               	
 269               	
 270               	
 271               	
 272               	;;================================context restore starting==================================;; 
 273               	;used registers          : R0~R31                                                              
 274               	;unsafe access registers : None                                                                
 275               	.macro  KER_CONTEXT_RESTORE                               ;total 8.38uS @8MHz     ( 67 clocks) 
 276               			POP   R31                                         ;restore R31            (  2 clocks) 
 277               			POP   R30                                         ;restore R30            (  2 clocks) 
 278               			POP   R29                                         ;restore R29            (  2 clocks) 
 279               			POP   R28                                         ;restore R28            (  2 clocks) 
 280               			POP   R27                                         ;restore R27            (  2 clocks) 
 281               			POP   R26                                         ;restore R26            (  2 clocks) 
 282               			POP   R25                                         ;restore R25            (  2 clocks) 
 283               			POP   R24                                         ;restore R24            (  2 clocks) 
 284               			POP   R23                                         ;restore R23            (  2 clocks) 
 285               			POP   R22                                         ;restore R22            (  2 clocks) 
 286               			POP   R21                                         ;restore R21            (  2 clocks) 
 287               			POP   R20                                         ;restore R20            (  2 clocks) 
 288               			POP   R19                                         ;restore R19            (  2 clocks) 
 289               			POP   R18                                         ;restore R18            (  2 clocks) 
 290               			POP   R17                                         ;restore R17            (  2 clocks) 
 291               			POP   R16                                         ;restore R16            (  2 clocks) 
 292               			POP   R15                                         ;restore R15            (  2 clocks) 
 293               			POP   R14                                         ;restore R14            (  2 clocks) 
 294               			POP   R13                                         ;restore R13            (  2 clocks) 
 295               			POP   R12                                         ;restore R12            (  2 clocks) 
 296               			POP   R11                                         ;restore R11            (  2 clocks) 
 297               			POP   R10                                         ;restore R10            (  2 clocks) 
 298               			POP   R9                                          ;restore R9             (  2 clocks) 
 299               			POP   R8                                          ;restore R8             (  2 clocks) 
 300               			POP   R7                                          ;restore R7             (  2 clocks) 
 301               			POP   R6                                          ;restore R6             (  2 clocks) 
 302               			POP   R5                                          ;restore R5             (  2 clocks) 
 303               			POP   R4                                          ;restore R4             (  2 clocks) 
 304               			POP   R3                                          ;restore R3             (  2 clocks) 
 305               			POP   R2                                          ;restore R2             (  2 clocks) 
 306               			POP   R1                                          ;restore R1             (  2 clocks) 
 307               			POP   R0                                          ;fetch SREG             (  2 clocks) 
 308               			OUT   IOSREG             , R0                     ;load SREG              (  1 clock ) 
 309               			POP   R0                                          ;restore R0             (  2 clocks) 
 310               	.endm                                                                                          
 311               	;;===================================context restore end====================================;; 
 312               	
 313               	
 314               	
 315               	
 316               	
 317               	;;=========================calculate offset addr in words starting==========================;; 
 318               	;used registers          : R16, R30, R31, args {R30, R31}, returns {R30, R31} wrt OFB_TID      
 319               	;unsafe access registers : R16                                                                 
 320               	.macro  KER_CALC_ADDR_OFF_WORD                            ;total 0.75uS @8MHz     (  6 clocks) 
 321               	        LDS   R16                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 322               			LSL   R16                                         ;left shift to multiply (  1 clock ) 
 323               			ADD   ZL                 , R16                    ;add offset to array    (  1 clock ) 
 324               			LDI   R16                , 0x00                   ;clear for carry prop   (  1 clock ) 
 325               			ADC   ZH                 , R16                    ;add carry if any       (  1 clock ) 
 326               	.endm                                                                                          
 327               	;;=============================calculate offset addr in words end===========================;; 
 328               	
 329               	
 330               	
 331               	
 332               	
 333               	;;=========================calculate offset addr in bytes starting==========================;; 
 334               	;used registers          : R16, R30, R31, args {R30, R31}, returns {R30, R31} wrt OFB_TID      
 335               	;unsafe access registers : R16                                                                 
 336               	.macro  KER_CALC_ADDR_OFF_BYTES                           ;total 0.63uS @8MHz     (  5 clocks) 
 337               	        LDS   R16                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 338               			ADD   ZL                 , R16                    ;add offset to array    (  1 clock ) 
 339               			LDI   R16                , 0x00                   ;clear for carry prop   (  1 clock ) 
 340               			ADC   ZH                 , R16                    ;add carry if any       (  1 clock ) 
 341               	.endm                                                                                          
 342               	;;=============================calculate offset addr in bytes end===========================;; 
 343               	
 344               	
 345               	
 346               	
 347               	
 348               	;;===============================save current task sp starting==============================;; 
 349               	;used registers          : R16, R17, R18, R30, R31                                             
 350               	;unsafe access registers : None                                                                
 351               	.macro  KER_SAVE_CURR_TASK_SP                             ;total 1.75uS @8MHz     ( 14 clocks) 
 352               			IN    R16                , IOSPL                  ;fetch SPL0             (  1 clock ) 
 353               			IN    R17                , IOSPH                  ;fetch SPH0             (  1 clock ) 
 354               			LDS   R18                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 355               			LSL   R18                                         ;left shift to multiply (  1 clock ) 
 356               			LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 357               			LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 358               			ADD   ZL                 , R18                    ;add offset to array    (  1 clock ) 
 359               			LDI   R18                , 0x00                   ;clear for carry prop   (  1 clock ) 
 360               			ADC   ZH                 , R18                    ;add carry, R1 zero reg (  1 clock ) 
 361               			STD   Z+0                , R16                    ;store SPL at ZP+0      (  2 clocks) 
 362               			STD   Z+1                , R17                    ;store SPH at ZP+1      (  2 clocks) 
 363               	.endm                                                                                          
 364               	;;================================save current task sp end==================================;; 
 365               	
 366               	
 367               	
 368               	
 369               	
 370               	;;==============================load next task id starting==================================;; 
 371               	;used registers          : R16, R17                                                            
 372               	;unsafe access registers : None                                                                
 373               	.macro  KER_LOAD_NEXT_TASK_ID                             ;total 1.63uS @8MHz     ( 13 clocks) 
 374               			LDS   R16                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 375               			INC   R16                                         ;increment task_id      (  1 clock ) 
 376               			LDS   R17                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 377               		_MOD_CONT\@:                                          ;use local label                     
 378               		    CP    R16                , R17                    ;compare R17 with R16   (  1 clock ) 
 379               			BRLO  _MOD_DONE\@                                 ;if R16<R17, done       (  2 clocks) 
 380               			SUB   R16                , R17                    ;subtract R17 from R16  (  1 clock ) 
 381               			RJMP  _MOD_CONT\@                                 ;go to loop start       (  2 clocks) 
 382               		_MOD_DONE\@:                                          ;use local label                     
 383               		    STS   KerBase+OFB_TID    , R16                    ;save task_id%ntask     (  2 clocks) 
 384               	.endm                                                                                          
 385               	;;=================================load next task id end====================================;; 
 386               	
 387               	
 388               	
 389               	
 390               	
 391               	;;==============================increment tick counter starting=============================;; 
 392               	;used registers          : R16, R17, R18, R19, R20, R21                                        
 393               	;unsafe access registers : None                                                                
 394               	.macro  KER_TICK_INCREMENT                                ;total 3.38uS @8MHz     ( 27 clocks) 
 395               			LDS   R16                , KerBase+OFB_TICK0      ;load Byte0             (  2 clocks) 
 396               	        LDS   R17                , KerBase+OFB_TICK1      ;load Byte1             (  2 clocks) 
 397               			LDS   R18                , KerBase+OFB_TICK2      ;load Byte2             (  2 clocks) 
 398               			LDS   R19                , KerBase+OFB_TICK3      ;load Byte3             (  2 clocks) 
 399               			LDS   R20                , KerBase+OFB_TICK4      ;load Byte4             (  2 clocks) 
 400               			LDI   R21                , 0x01                   ;set reg value 1        (  1 clock ) 
 401               	        ADD   R16                , R21                    ;add 1 with Byte0       (  1 clock ) 
 402               			LDI   R21                , 0x00                   ;clear for carry prop   (  1 clock ) 
 403               	        ADC   R17                , R21                    ;add if carry           (  1 clock ) 
 404               			ADC   R18                , R21                    ;add if carry           (  1 clock ) 
 405               			ADC   R19                , R21                    ;add if carry           (  1 clock ) 
 406               			ADC   R20                , R21                    ;add if carry           (  1 clock ) 
 407               	        STS   KerBase+OFB_TICK0  , R16                    ;set Byte0              (  2 clocks) 
 408               	        STS   KerBase+OFB_TICK1  , R17                    ;set Byte1              (  2 clocks) 
 409               			STS   KerBase+OFB_TICK2  , R18                    ;set Byte2              (  2 clocks) 
 410               			STS   KerBase+OFB_TICK3  , R19                    ;set Byte3              (  2 clocks) 
 411               			STS   KerBase+OFB_TICK4  , R20                    ;set Byte4              (  2 clocks) 
 412               	.endm                                                                                          
 413               	;;=================================increment tick counter end===============================;; 
 414               	
 415               	
 416               	
 417               	
 418               	
 419               	;;==============================load task id & sp starting==================================;; 
 420               	;used registers          : R16, R17, R30, R31                                                  
 421               	;unsafe access registers : None                                                                
 422               	.macro  KER_LOAD_TASK_ID_AND_SP                           ;total 1.75uS @8MHz     ( 14 clocks) 
 423               			LDS   R16                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 424               			LSL   R16                                         ;left shift to multiply (  1 clock ) 
 425               			LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 426               			LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 427               			ADD   ZL                 , R16                    ;add offset to array    (  1 clock ) 
 428               			LDI   R16                , 0x00                   ;clear for carry prop   (  1 clock ) 
 429               			ADC   ZH                 , R16                    ;add carry if any       (  1 clock ) 
 430               			LD    R16                , Z+                     ;load SPL at ZP         (  2 clocks) 
 431               			LD    R17                , Z                      ;load SPH at ZP         (  2 clocks) 
 432               			OUT   IOSPL              , R16                    ;load SPL0              (  1 clock ) 
 433               			OUT   IOSPH              , R17                    ;load SPH0              (  1 clock ) 
 434               	.endm                                                                                          
 435               	;;=================================load task id & sp end====================================;; 
 436               	
 437               	
 438               	
 439               	
 440               	
 441               	;;================================push msp & zp starting====================================;; 
 442               	;used registers          : R16, R17, R26, R27, R30, R31                                        
 443               	;unsafe access registers : None                                                                
 444               	.macro  KER_PUSH_MSP_ZP                                   ;total 2.25uS @8MHz     ( 18 clocks) 
 445               	        LDS   XL                 , KerSSZ+OFM_MSPI+0      ;load val low           (  2 clocks) 
 446               			LDS   XH                 , KerSSZ+OFM_MSPI+1      ;load val high          (  2 clocks) 
 447               			IN    R16                , IOSPL                  ;copy                   (  1 clock ) 
 448               			IN    R17                , IOSPH                  ;copy                   (  1 clock ) 
 449               			ST    X+                 , R16                    ;store main SPL         (  2 clocks) 
 450               	        ST    X+                 , R17                    ;store main SPH         (  2 clocks) 
 451               			ST    X+                 , ZL                     ;store main ZL          (  2 clocks) 
 452               			ST    X+                 , ZH                     ;store main ZH          (  2 clocks) 
 453               			STS   KerSSZ+OFM_MSPI+0  , XL                     ;store new index        (  2 clocks) 
 454               			STS   KerSSZ+OFM_MSPI+1  , XH                     ;store new index        (  2 clocks) 
 455               	.endm                                                                                          
 456               	;;===================================push msp & zp end======================================;; 
 457               	
 458               	
 459               	
 460               	
 461               	
 462               	;;=================================pop msp & zp starting====================================;; 
 463               	;used registers          : R16, R17, R26, R27, R30, R31                                        
 464               	;unsafe access registers : None                                                                
 465               	.macro  KER_POP_MSP_ZP                                    ;total 2.25uS @8MHz     ( 18 clocks) 
 466               			LDS   XL                 , KerSSZ+OFM_MSPI+0      ;load val low           (  2 clocks) 
 467               			LDS   XH                 , KerSSZ+OFM_MSPI+1      ;load val high          (  2 clocks) 
 468               			LD    ZH                 , -X                     ;load ZH                (  2 clocks) 
 469               			LD    ZL                 , -X                     ;load ZL                (  2 clocks) 
 470               			LD    R17                , -X                     ;load main SPH          (  2 clocks) 
 471               			LD    R16                , -X                     ;load main SPL          (  2 clocks) 
 472               			OUT   IOSPL              , R16                    ;set SPL                (  1 clock ) 
 473               			OUT   IOSPH              , R17                    ;set SPH                (  1 clock ) 
 474               			STS   KerSSZ+OFM_MSPI+0  , XL                     ;store new index        (  2 clocks) 
 475               			STS   KerSSZ+OFM_MSPI+1  , XH                     ;store new index        (  2 clocks) 
 476               	.endm                                                                                          
 477               	;;====================================pop msp & zp end======================================;; 
 478               	
 479               	
 480               	
 481               	
 482               	
 483               	;;===============================decrease timeout starting==================================;; 
 484               	;used registers          : R16, R17, R18, R24, R30, R31, arg R24[0->ISR,1->Thrd], returns R24  
 485               	;unsafe access registers : None                                                                
 486               	.macro  KER_DEC_SLP_TIMEOUT                               ;total 4.75uS @8MHz     ( 38 clocks) 
 487               			LDI   ZL                 , lo8(KerSchSlp)         ;fetch base pos low     (  1 clock ) 
 488               			LDI   ZH                 , hi8(KerSchSlp)         ;fetch base pos high    (  1 clock ) 
 489               			KER_CALC_ADDR_OFF_WORD                            ;calc offset            (  6 clocks) 
 490               	        
 491               			;fetch current value from ram, if val=0, skip decrement
 492               	        LD    R16                , Z+                     ;load val low byte      (  2 clocks) 
 493               			LD    R17                , Z                      ;load val high byte     (  2 clocks) 
 494               			MOV   R18                , R16                    ;copy                   (  1 clock ) 
 495               			OR    R18                , R17                    ;or high & low bytes    (  1 clock ) 
 496               			BREQ  _VAL_NULL\@                                 ;val=0, save sts        (  2 clocks) 
 497               	        
 498               	        ;CPI   R24                , 0x01                   ;if arg=1, thrd mode    (  1 clock ) 
 499               			;BREQ  _VAL_NOT_NULL\@                             ;no need to dec val     (  2 clocks) 
 500               	        
 501               			;R17:R16 contains 16 bit sleep timer val, decrease val by 1
 502               			LDI   R18                , 0x01                   ;set val 1              (  1 clock ) 
 503               	        SUB   R16                , R18                    ;subtract low byte      (  1 clock ) 
 504               			LDI   R18                , 0x00                   ;clear                  (  1 clock ) 
 505               			SBC   R17                , R18                    ;subtract carry if any  (  1 clock ) 
 506               	        
 507               			;store new value
 508               			ST    Z                  , R17                    ;store high byte        (  2 clocks) 
 509               			ST    -Z                 , R16                    ;store low byte         (  2 clocks) 
 510               			MOV   R18                , R16                    ;copy                   (  1 clock ) 
 511               			OR    R18                , R17                    ;or high & low bytes    (  1 clock ) 
 512               			BRNE  _VAL_NOT_NULL\@                             ;val!=0                 (  2 clocks) 
 513               	
 514               		_VAL_NULL\@:
 515               		    ;find ram address for status
 516               		    LDI   ZL                 , lo8(KerSchSts)         ;fetch base pos low     (  1 clock ) 
 517               			LDI   ZH                 , hi8(KerSchSts)         ;fetch base pos high    (  1 clock ) 
 518               	        KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks)
 519               			
 520               			;update flag as task is ready
 521               			LDI   R16                , TASK_READY             ;set TASK_READY         (  1 clock ) 
 522               			ST    Z                  , R16                    ;update flag            (  2 clocks) 
 523               			LDI   R24                , TASK_READY             ;use as return val      (  1 clock ) 
 524               			RJMP  _EXIT_SLP_TIME\@                            ;jump to exit           (  2 clocks) 
 525               	
 526               	    _VAL_NOT_NULL\@:
 527               		    LDI   R24                , TASK_BLOCK             ;use as return val      (  1 clock ) 
 528               	
 529               	    _EXIT_SLP_TIME\@:
 530               	.endm                                                                                          
 531               	;;=================================decrease timeout end=====================================;; 
 532               	
 533               	
 534               	
 535               	
 536               	
 537               	;;===========================current task priority starting=================================;; 
 538               	;used registers          : R16, R24, R30, R31, returns R24 as current task priority            
 539               	;unsafe access registers : None                                                                
 540               	.macro  KER_CURR_TASK_PRIO                                ;total 1.13uS @8MHz     (  9 clocks) 
 541               			LDI    ZL                 , lo8(KerSchPr)         ;load low addr          (  1 clock ) 
 542               			LDI    ZH                 , hi8(KerSchPr)         ;load high addr         (  1 clock ) 
 543               			LDI    R16                , 0x00                  ;clear reg, for carry   (  1 clock ) 
 544               			LDS    R24                , KerBase+OFB_TID       ;load task id           (  2 clocks) 
 545               	        ADD    ZL                 , R24                   ;add low addr           (  1 clock ) 
 546               			ADC    ZH                 , R16                   ;add carry if any       (  1 clock ) 
 547               			LD     R24                , Z                     ;load current tid prio  (  2 clocks) 
 548               	.endm                                                                                          
 549               	;;==============================current task priority end===================================;; 
 550               	
 551               	
 552               	
 553               	
 554               	
 555               	;;================================run scheduler starting====================================;; 
 556               	;used registers          : R16, R24, R30, R31, returns R24 as current task priority            
 557               	;unsafe access registers : None       
 558               	.macro  KER_RUN_SCHEDULER                                 ;total 4.88uS @8MHz     ( 39 clocks) 
 559               			LDI    R16                , 0xFF                  ;set 0xff               (  1 clock ) 
 560               			STS    KerBase+OFB_LPR    , R16                   ;lowest priority        (  2 clocks) 
 561               			LDI    R16                , 0x00                  ;start from 0           (  1 clock ) 
 562               			STS    KerBase+OFB_PTID   , R16                   ;highest prio tid=0     (  2 clocks) 
 563               		_LOOP\@:                                                                                   
 564               		    ;store task id to run from KER_DEC_SLP_TIMEOUT                                         
 565               			STS    KerBase+OFB_TID    , R16                   ;store task id          (  2 clocks) 
 566               	        ;sleep time decrement, update ready/blocked status                                     
 567               			LDI    R24                , 0x00                  ;isr mode, dec slp val  (  1 clock ) 
 568               			KER_DEC_SLP_TIMEOUT                               ;update return vars     ( 49 clocks) 
 569               	        CPI    R24                , TASK_READY            ;compare                (  1 clock ) 
 570               	        BRNE   _NEXT_TASK\@                               ;skip if task not ready (  2 clocks) 
 571               	        ;calculate current task priority
 572               			KER_CURR_TASK_PRIO                                ;get task prio ->R24    (  9 clocks) 
 573               	        ;compare current task priority with lowest priority so far                             
 574               			LDS    R16                , KerBase+OFB_LPR       ;load lowest priority   (  2 clocks) 
 575               			CP     R24                , R16                   ;compare                (  1 clock ) 
 576               			BRSH   _NEXT_TASK\@                               ;if prio>=lowest prio   (  2 clocks) 
 577               			;found new lowest priority                                                             
 578               			STS    KerBase+OFB_LPR    , R24                   ;save lowest priority   (  2 clocks) 
 579               			LDS    R16                , KerBase+OFB_TID       ;load task id           (  2 clocks) 
 580               			STS    KerBase+OFB_PTID   , R16                   ;save lowest priority   (  2 clocks) 
 581               	
 582               	    _NEXT_TASK\@:
 583               		    LDS    R16                , KerBase+OFB_TID       ;load task id           (  2 clocks) 
 584               			INC    R16                                        ;increment by 1         (  1 clock ) 
 585               			LDS    R17                , KerBase+OFB_NTSK      ;load ntask             (  2 clocks) 
 586               			CP     R16                , R17                   ;compare with ntask     (  2 clocks) 
 587               			BRLO   _LOOP\@                                    ;if task_id<ntask       (  2 clocks) 
 588               	        LDS    R16                , KerBase+OFB_PTID      ;load high prio task id (  2 clocks) 
 589               			STS    KerBase+OFB_TID    , R16                   ;for test only          (  2 clocks)
 590               	.endm                                                                                          
 591               	;;===================================run scheduler end======================================;; 
 592               	
 593               	
 594               	
 595               	
 596               	
 597               	;;=================================ISR execution starting===================================;; 
 598               	.global  __vector_16                                                                           
 599               	    __vector_16:                                          ;total 26.13uS @8MHz    (211 clocks) 
 600:kernel.S      **** 	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 601:kernel.S      ****         KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 602:kernel.S      **** 		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 603:kernel.S      **** 		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 604:kernel.S      **** 		KER_TICK_INCREMENT                                ;increment tick counter ( 27 clocks) 
 605:kernel.S      **** 		KER_RUN_SCHEDULER                                 ;run scheduler          ( 14 clocks) 
 606:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 607:kernel.S      **** 		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 608:kernel.S      **** 	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 609:kernel.S      **** 		RETI                                              ;return from interrupt  (  4 clocks) 
 610               	;;====================================ISR execution end=====================================;; 
 611               	
 612               	
 613               	
 614               	
 615               	
 616               	;;================================SysTick reg init starting=================================;; 
 617               	Kernel_SysTick_Reg_Init:                                  ;total 10.5uS @8MHz     ( 84 clocks) 
 618               	        ;arg1 -> prescaler R24, arg2 -> reload val R22
 619:kernel.S      ****         CLI                                               ;disable global int     (  1 clock ) 
 620:kernel.S      **** 		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 621               			
 622:kernel.S      ****         KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 623               	
 624               			;clear reg
 625:kernel.S      **** 		LDI   R16                , 0x00                   ;set 0x00 to R16        (  1 clock )
 626               	        
 627               			;clear tick counter
 628:kernel.S      **** 		STS   KerBase+OFB_TICK0  , R16                    ;clear  KerBase[0]      (  2 clocks) 
 629:kernel.S      **** 		STS   KerBase+OFB_TICK1  , R16                    ;clear  KerBase[1]      (  2 clocks) 
 630:kernel.S      **** 		STS   KerBase+OFB_TICK2  , R16                    ;clear  KerBase[2]      (  2 clocks) 
 631:kernel.S      **** 		STS   KerBase+OFB_TICK3  , R16                    ;clear  KerBase[3]      (  2 clocks) 
 632:kernel.S      **** 		STS   KerBase+OFB_TICK4  , R16                    ;clear  KerBase[4]      (  2 clocks) 
 633               		    
 634               			;clear system registers
 635:kernel.S      **** 		STS   KerBase+OFB_PRS    , R16                    ;clear  KerBase[5]      (  2 clocks) 
 636:kernel.S      **** 		STS   KerBase+OFB_RLD    , R16                    ;clear  KerBase[6]      (  2 clocks) 
 637:kernel.S      **** 		STS   KerBase+OFB_TID    , R16                    ;clear  KerBase[7]      (  2 clocks) 
 638:kernel.S      **** 		STS   KerBase+OFB_NTSK   , R16                    ;clear  KerBase[8]      (  2 clocks) 
 639:kernel.S      ****         STS   KerBase+OFB_PTID   , R16                    ;clear  KerBase[9]      (  2 clocks) 
 640               			
 641               			;clear all timer registers
 642:kernel.S      **** 		STS   SRTCCR0A           , R16                    ;clear TCCR0A           (  2 clocks) 
 643:kernel.S      **** 		STS   SRTCCR0B           , R16                    ;clear TCCR0B           (  2 clocks) 
 644:kernel.S      **** 		STS   SRTIMSK0           , R16                    ;clear TIMSK0           (  2 clocks) 
 645:kernel.S      **** 		STS   SRTIFR0            , R16                    ;clear TIFR0            (  2 clocks) 
 646:kernel.S      **** 		STS   SROCR0A            , R16                    ;clear OCR0A            (  2 clocks) 
 647:kernel.S      **** 		STS   SROCR0B            , R16                    ;clear OCR0B            (  2 clocks) 
 648:kernel.S      **** 		STS   SRTCNT0            , R16                    ;clear TCNT0            (  2 clocks) 
 649               			
 650:kernel.S      **** 		STS   KerBase+OFB_PRS    , R24                    ;KerBase[5] prescaler   (  2 clocks) 
 651:kernel.S      **** 		STS   KerBase+OFB_RLD    , R22                    ;KerBase[6] reload val  (  2 clocks) 
 652               			
 653:kernel.S      ****         KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 654               	
 655:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 656               	;;===================================SysTick reg init end===================================;; 
 657               	
 658               	
 659               	
 660               	
 661               	
 662               	;;===============================kernel task create starting================================;; 
 663               	Kernel_Task_Create:                                       ;total 19.86uS @8MHz    (162 clocks) 
 664               	        ;func_ptr->R25:R24, task_priority->R22 
 665               	
 666:kernel.S      ****         KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 667               			
 668               			;across this function, R16 will be used as task_id 
 669:kernel.S      **** 		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 670:kernel.S      **** 		LDI   R17                , 0x00                   ;clear reg              (  1 clock ) 
 671               			
 672               			;set priority to KerSchPr+task_id
 673:kernel.S      **** 		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 674:kernel.S      **** 		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 675:kernel.S      **** 		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
 676:kernel.S      **** 		ADC   ZH                 , R17                    ;add high byte+carry    (  1 clock ) 
 677:kernel.S      **** 		ST    Z                  , R22                    ;save priority          (  2 clocks) 
 678               			
 679               			;stack pointer for current task (KerStack + KER_STK_SZ*(task_id+1) - 1) ->stack top    
 680:kernel.S      **** 		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 681:kernel.S      **** 		MOV   R17                , R16                    ;load task_id           (  1 clock ) 
 682:kernel.S      **** 		INC   R17                                         ;increment task_id      (  1 clock ) 
 683:kernel.S      **** 		LDI   R18                , KER_STK_SZ             ;load stack size        (  1 clock ) 
 684:kernel.S      **** 		MUL   R17                , R18                    ;multiply to get offset (  2 clocks) 
 685:kernel.S      **** 		MOV   ZL                 , R0                     ;load multiplied low    (  1 clocks) 
 686:kernel.S      **** 		MOV   ZH                 , R1                     ;load multiplied high   (  1 clocks) 
 687:kernel.S      **** 		SBIW  ZL                 , 0x01                   ;dec multiplied val-1   (  2 clocks) 
 688:kernel.S      **** 		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 689:kernel.S      **** 		LDI   R17                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
 690:kernel.S      **** 		LDI   R18                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
 691:kernel.S      **** 		ADD   ZL                 , R17                    ;add low bytes          (  1 clock ) 
 692:kernel.S      **** 		ADC   ZH                 , R18                    ;add high bytes+carry   (  1 clock ) 
 693:kernel.S      **** 		OUT   IOSPL              , ZL                     ;load SPL               (  1 clock ) 
 694:kernel.S      ****         OUT   IOSPH              , ZH                     ;load SPH               (  1 clock ) 
 695               			
 696               			;function argument directly returns word address
 697:kernel.S      **** 	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
 698:kernel.S      **** 		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 699               			
 700               			;push context to stack of this task
 701:kernel.S      **** 		KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 702               			
 703               			;read stack pointer of current task (necessary when restore)
 704:kernel.S      **** 		IN    R17                , IOSPL                  ;read SPL               (  1 clock ) 
 705:kernel.S      ****         IN    R18                , IOSPH                  ;read SPH               (  1 clock ) 
 706               			
 707               			;calculate the address where current task's SP will be stored and store SP
 708:kernel.S      **** 		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 709:kernel.S      **** 		MOV   R19                , R16                    ;copy task_id           (  1 clock ) 
 710:kernel.S      **** 		LSL   R19                                         ;left shift to multiply (  1 clock ) 
 711:kernel.S      **** 		LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 712:kernel.S      **** 		LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 713:kernel.S      **** 		ADD   ZL                 , R19                    ;add offset to array    (  1 clock ) 
 714:kernel.S      **** 		LDI   R16                , 0x00                   ;clear reg              (  1 clock ) 
 715:kernel.S      **** 		ADC   ZH                 , R16                    ;add carry if any       (  1 clock ) 
 716:kernel.S      **** 		ST    Z+                 , R17                    ;SPL at KerPSp+offset   (  2 clocks) 
 717:kernel.S      **** 		ST    Z                  , R18                    ;SPH at KerPSp+offset   (  2 clocks) 
 718               			
 719               			;increment task_id
 720:kernel.S      **** 		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 721:kernel.S      **** 		INC   R16                                         ;increment task_id      (  1 clock ) 
 722:kernel.S      **** 		STS   KerBase+OFB_TID    , R16                    ;store task_id          (  2 clocks) 
 723               	
 724               			;increment ntask
 725:kernel.S      **** 		LDS   R16                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 726:kernel.S      **** 		INC   R16                                         ;increment ntask        (  1 clock ) 
 727:kernel.S      **** 		STS   KerBase+OFB_NTSK   , R16                    ;store ntask            (  2 clocks) 
 728               			
 729:kernel.S      **** 		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 730               			
 731:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 732               	;;==================================kernel task create end==================================;; 
 733               	
 734               	
 735               	
 736               	
 737               	
 738               	;;=================================kernel start tasks starting==============================;; 
 739               	Kernel_Start_Tasks:                                       ;total 12.88uS @8MHz    (103 clocks) 
 740               			;start executing from task0
 741               			;save ZP
 742               			;MOV   R4                 , ZL                     ;save ZPL               (  2 clocks) 
 743               			;MOV   R5                 , ZH                     ;save ZPH               (  2 clocks) 
 744               			
 745               			;clear task_id
 746:kernel.S      **** 		LDI   R16                , 0x00                   ;load task_id           (  2 clocks) 
 747:kernel.S      **** 		STS   KerBase+OFB_TID    , R16                    ;store task_id          (  2 clocks) 
 748               			
 749               			;load ZP with addr+offset
 750:kernel.S      **** 		LDI   ZL                 , lo8(KerPSP+0x00)       ;fetch ZPL KerPSP->TID0 (  1 clock ) 
 751:kernel.S      **** 		LDI   ZH                 , hi8(KerPSP+0x00)       ;fetch ZPH KerPSP->TID0 (  1 clock ) 
 752               			
 753               			;load task_id 0 task's SP
 754:kernel.S      **** 		LD    R16                , Z+                     ;load val from Z, inc Z (  2 clocks) 
 755:kernel.S      **** 		LD    R17                , Z                      ;load val from Z+1      (  2 clocks) 
 756               			
 757               	        ;set task_id=0 task's SP
 758:kernel.S      **** 		OUT   IOSPL              , R16                    ;load SPL               (  1 clock ) 
 759:kernel.S      ****         OUT   IOSPH              , R17                    ;load SPH               (  1 clock ) 
 760               	        
 761               	        ;forcefully restore context, in ISR it will be stored automatically
 762:kernel.S      **** 		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 763               	
 764               			;restore ZP
 765               			;MOV   ZL                 , R4                     ;restore ZPL            (  2 clocks) 
 766               			;MOV   ZH                 , R5                     ;restore ZPL            (  2 clocks) 
 767               			
 768               			;config timer for system tick
 769:kernel.S      **** 		KER_TIMER_INIT                                    ;init timer, int enable ( 12 clocks) 
 770               	        
 771               			;execute return to jump to task0, pushed while task init
 772:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 773               	;;==================================kernel start tasks end==================================;; 
 774               	
 775               	
 776               	
 777               	
 778               	
 779               	;;===================================kernel init starting===================================;; 
 780               	Kernel_Init:                                              ;total 37.00uS @8MHz    (296 clocks) 
 781               			;save necessary registers and MSP
 782:kernel.S      **** 		CLR   R1                                          ;gcc expects            (  1 clock ) 
 783               	
 784               	        ;store stack top (for MSP) addr to KerSSZ+OFM_MSPI0:1
 785:kernel.S      **** 		LDI   R16                , lo8(KerSSZ+OFM_MSPS)   ;load low address       (  1 clock ) 
 786:kernel.S      **** 		LDI   R17                , hi8(KerSSZ+OFM_MSPS)   ;load high address      (  1 clock )
 787:kernel.S      ****         STS   KerSSZ+OFM_MSPI+0  , R16                    ;set mspi to stack top  (  2 clocks) 
 788:kernel.S      **** 		STS   KerSSZ+OFM_MSPI+1  , R17                    ;set mspi to stack top  (  2 clocks) 
 789               	        
 790:kernel.S      **** 		KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 791               	
 792               			;init timer for kernel 
 793:kernel.S      **** 		LDI   R24                , 0x03                   ;set prescaler          (  1 clock ) 
 794:kernel.S      **** 		LDI   R22                , 0x82                   ;set reload val         (  1 clock ) 
 795:kernel.S      **** 		CALL  Kernel_SysTick_Reg_Init                     ;init timer             ( 84 clocks) 
 796               			
 797               			;create idle task at task_id 0, priority 0xFF (lowest)
 798:kernel.S      **** 		LDI   R24                , lo8(Kernel_Task_Idle)  ;load func addr low     (  1 clock ) 
 799:kernel.S      **** 		LDI   R25                , hi8(Kernel_Task_Idle)  ;load func addr high    (  1 clock ) 
 800:kernel.S      **** 		LSR   R25                                         ;right shift to divide  (  1 clock ) 
 801:kernel.S      **** 		ROR   R24                                         ;rotate right th carry  (  1 clock ) 
 802:kernel.S      **** 		LDI   R22                , 0xFF                   ;set max val
 803:kernel.S      **** 		CALL  Kernel_Task_Create                          ;init idle task         (159 clocks) 
 804               			
 805:kernel.S      **** 		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 806               	
 807               			;execute return to jump to task0, pushed while task init
 808:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 809               	;;======================================kernel init end=====================================;; 
 810               	
 811               	
 812               	
 813               	
 814               	
 815               	;;=================================kernel idle task starting================================;; 
 816               	Kernel_Task_Idle:                                         ;total 0.5uS @8MHz      (  4 clocks) 
 817:kernel.S      ****         LDI   R25                , 0x00                   ;set UBRRH              (  1 clock ) 
 818:kernel.S      ****         LDI   R24                , 0x00                   ;set UBRRL              (  1 clock ) 
 819:kernel.S      ****         CALL  Debug_Init                                  ;debug init
 820               	    _IDLE_LOOP:                                           ;forever loop
 821:kernel.S      **** 	    LDI   R24                , 0x23
 822:kernel.S      **** 		CALL  Debug_Tx_Byte      
 823:kernel.S      **** 		RJMP  _IDLE_LOOP                                  ;return from subroutine (  4 clocks) 
 824               	;;==================================kernel idle task end====================================;; 
 825               	
 826               	
 827               	
 828               	
 829               	;;================================kernel task sleep starting================================;; 
 830               	Kernel_Task_Sleep:
 831               	        ;save current context
 832               	        ;KER_CONTEXT_SAVE_YEILD                            ;save context           ( 68 clocks) 
 833               			;KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks)
 834               			;CLI
 835               			;create next task wakeup time (args R25:R24)
 836:kernel.S      **** 		LDS   R16                , KerBase+OFB_TID        ;load tak_id            (  2 clocks) 
 837:kernel.S      **** 		MOV   R17                , R16                    ;copy                   (  1 clock ) 
 838:kernel.S      **** 		LSL   R17                                         ;x2                     (  1 clock ) 
 839:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 840:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 841:kernel.S      **** 		ADD   ZL                 , R17                    ;add low bytes          (  1 clock ) 
 842:kernel.S      **** 		LDI   R17                , 0x00                   ;load 0                 (  1 clock ) 
 843:kernel.S      **** 		ADC   ZH                 , R17                    ;add high byte+carry    (  1 clock ) 
 844:kernel.S      **** 		ST    Z+                 , R24                    ;save sleep time        (  2 clocks) 
 845:kernel.S      **** 		ST    Z                  , R25                    ;save sleep time        (  2 clocks) 
 846               			
 847               			;update task scheduler status as blocked
 848:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 849:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 850:kernel.S      **** 		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
 851:kernel.S      **** 		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 852:kernel.S      **** 		ADC   ZH                 , R16                    ;add high byte+carry    (  1 clock ) 
 853:kernel.S      ****         LDI   R16                , TASK_BLOCK             ;block task until cnt=0 (  1 clock ) 
 854:kernel.S      **** 		ST    Z                  , R16                    ;save block flag        (  2 clocks) 
 855               	
 856               			;SEI
 857               			;run scheduler, load next task sp, restore context
 858               			;KER_RUN_SCHEDULER                                 ;run scheduler          ( 14 clocks)
 859               			;KER_DEC_SLP_TIMEOUT_SLEEP 
 860               			;KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 861               			;KER_CONTEXT_RESTORE_YEILD                         ;restore context        ( 67 clocks) 
 862               			
 863:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 864               	;;=================================kernel task sleep end====================================;; 
 865               	
 866               	
 867               	
 868               	
 869               	
 870               	;;===========================kernel task sleep time get starting============================;; 
 871               	Kernel_Task_Sleep_Time_Get:
 872               			;get remaining sleep time (ms), arg R24, return R25:R24
 873:kernel.S      **** 		MOV   R16                , R24                    ;copy                   (  1 clock ) 
 874:kernel.S      **** 		LSL   R16                                         ;x2                     (  1 clock ) 
 875:kernel.S      **** 		LDI   R30                , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 876:kernel.S      **** 		LDI   R31                , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 877:kernel.S      **** 		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 878:kernel.S      **** 		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 879:kernel.S      **** 		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 880:kernel.S      **** 		LD    R24                , Z+                     ;load sleep time        (  2 clocks) 
 881:kernel.S      **** 		LD    R25                , Z                      ;load sleep time        (  2 clocks) 
 882:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 883               	;;==============================kernel task sleep time get end==============================;; 
 884               	
 885               	
 886               	
 887               	
 888               	
 889               	;;==============================kernel task status get starting=============================;; 
 890               	Kernel_Task_Status_Get:
 891               			;get task status ->ready/blocked, arg R24, return R24
 892:kernel.S      **** 		MOV   R16                , R24                    ;copy                   (  1 clock ) 
 893:kernel.S      **** 		LDI   R30                , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 894:kernel.S      **** 		LDI   R31                , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 895:kernel.S      **** 		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 896:kernel.S      **** 		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 897:kernel.S      **** 		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 898:kernel.S      **** 		LD    R24                , Z                      ;load task status       (  2 clocks) 
 899:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 900               	;;================================kernel task status get end================================;; 
 901               	
 902               	
 903               	
 904               	
 905               	
 906               	;;================================kernel ntask get starting=================================;; 
 907               	Kernel_NTask_Get:                                         ;total 0.75uS @8MHz     (  6 clocks) 
 908:kernel.S      **** 		LDS   R24                 , KerBase+OFB_NTSK      ;load ntask             (  2 clock ) 
 909:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 910               	;;===================================kernel ntask get end===================================;; 
 911               	
 912               	
 913               	
 914               	
 915               	
 916               	;;=============================kernel task priority get starting============================;; 
 917               	Kernel_Task_Prio_Get:                                     ;total 1.38uS @8MHz     ( 11 clocks) 
 918               			;get priority of the task id, arg (task_id->R24), return R24
 919:kernel.S      **** 		MOV   R16                , R24                    ;copy task_id           (  1 clock ) 
 920:kernel.S      **** 		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 921:kernel.S      **** 		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 922:kernel.S      **** 		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
 923:kernel.S      **** 		ADC   ZH                 , R1                     ;add high byte+carry    (  1 clock ) 
 924:kernel.S      **** 		LD    R24                , Z                      ;load priority          (  2 clocks) 
 925:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 926               	;;================================kernel task priority get end==============================;; 
 927               	
 928               	
 929               	
 930               	
 931               	
 932               	;;============================kernel lowest priority get starting===========================;; 
 933               	Kernel_Lowest_Prio_Get:                                   ;total 0.75uS @8MHz     (  6 clocks) 
 934               			;get lowest priority, return R24
 935:kernel.S      **** 		LDS   R24                , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
 936:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 937               	;;===============================kernel lowest priority get end=============================;; 
 938               	
 939               	
 940               	
 941               	
 942               	
 943               	;;===========================kernel high priority task id starting==========================;; 
 944               	Kernel_High_Prio_Task_ID_Get:
 945               			;internal idle task id = 0, app task start from task id 1, return R24
 946:kernel.S      **** 		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 947:kernel.S      **** 		DEC   R24                                         ;decrement by 1         (  1 clock ) 
 948:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 949               	;;==============================kernel high priority task id end============================;; 
 950               	
 951               	
 952               	
 953               	
 954               	
 955               	;;=========================kernel abs high priority task id starting========================;; 
 956               	Kernel_Abs_High_Prio_Task_ID_Get:
 957               			;get highest priority task id, return R24
 958:kernel.S      **** 		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 959:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 960               	;;============================kernel abs high priority task id end==========================;; 
DEFINED SYMBOLS
            kernel.S:12     *ABS*:000003e8 KER_TR
            kernel.S:13     *ABS*:00000003 KER_PRS
            kernel.S:14     *ABS*:00000082 KER_RLD
            kernel.S:15     *ABS*:00000080 KER_STK_SZ
            kernel.S:16     *ABS*:0000000a KER_MX_NTSK
            kernel.S:24     *ABS*:00000000 OFB_TICK0
            kernel.S:25     *ABS*:00000001 OFB_TICK1
            kernel.S:26     *ABS*:00000002 OFB_TICK2
            kernel.S:27     *ABS*:00000003 OFB_TICK3
            kernel.S:28     *ABS*:00000004 OFB_TICK4
            kernel.S:29     *ABS*:00000005 OFB_PRS
            kernel.S:30     *ABS*:00000006 OFB_RLD
            kernel.S:31     *ABS*:00000007 OFB_TID
            kernel.S:32     *ABS*:00000008 OFB_NTSK
            kernel.S:33     *ABS*:00000009 OFB_LPR
            kernel.S:34     *ABS*:0000000a OFB_PTID
            kernel.S:35     *ABS*:00000000 OFM_MSPI
            kernel.S:36     *ABS*:00000002 OFM_MSPS
            kernel.S:44     *ABS*:00000001 TASK_READY
            kernel.S:45     *ABS*:00000000 TASK_BLOCK
            kernel.S:53     *ABS*:0000005f SRSREG
            kernel.S:54     *ABS*:0000005e SRSPH
            kernel.S:55     *ABS*:0000005d SRSPL
            kernel.S:57     *ABS*:0000006e SRTIMSK0
            kernel.S:58     *ABS*:00000048 SROCR0B
            kernel.S:59     *ABS*:00000047 SROCR0A
            kernel.S:60     *ABS*:00000046 SRTCNT0
            kernel.S:61     *ABS*:00000045 SRTCCR0B
            kernel.S:62     *ABS*:00000044 SRTCCR0A
            kernel.S:63     *ABS*:00000035 SRTIFR0
            kernel.S:65     *ABS*:00000028 IOOCR0B
            kernel.S:66     *ABS*:00000027 IOOCR0A
            kernel.S:67     *ABS*:00000026 IOTCNT0
            kernel.S:68     *ABS*:00000025 IOTCCR0B
            kernel.S:69     *ABS*:00000024 IOTCCR0A
            kernel.S:70     *ABS*:00000015 IOTIFR0
            kernel.S:72     *ABS*:0000003f IOSREG
            kernel.S:73     *ABS*:0000003e IOSPH
            kernel.S:74     *ABS*:0000003d IOSPL
            kernel.S:85     .bss:00000000 KerBase
            kernel.S:88     .bss:0000000c KerPSP
            kernel.S:91     .bss:00000020 KerSSZ
            kernel.S:94     .bss:0000002e KerSchSts
            kernel.S:97     .bss:00000038 KerSchPr
            kernel.S:100    .bss:00000042 KerSchSlp
            kernel.S:103    .bss:00000056 KerStack
            kernel.S:599    .text:00000000 __vector_16
            kernel.S:617    .text:00000192 Kernel_SysTick_Reg_Init
            kernel.S:780    .text:00000372 Kernel_Init
            kernel.S:663    .text:00000220 Kernel_Task_Create
            kernel.S:739    .text:00000302 Kernel_Start_Tasks
            kernel.S:816    .text:000003d0 Kernel_Task_Idle
            kernel.S:830    .text:000003e0 Kernel_Task_Sleep
            kernel.S:871    .text:00000406 Kernel_Task_Sleep_Time_Get
            kernel.S:890    .text:0000041a Kernel_Task_Status_Get
            kernel.S:907    .text:0000042a Kernel_NTask_Get
            kernel.S:917    .text:00000430 Kernel_Task_Prio_Get
            kernel.S:933    .text:0000043e Kernel_Lowest_Prio_Get
            kernel.S:944    .text:00000444 Kernel_High_Prio_Task_ID_Get
            kernel.S:956    .text:0000044c Kernel_Abs_High_Prio_Task_ID_Get
            kernel.S:605    .text:000000aa _LOOP5
            kernel.S:605    .text:000000dc _VAL_NULL6
            kernel.S:605    .text:000000f2 _VAL_NOT_NULL6
            kernel.S:605    .text:000000f4 _EXIT_SLP_TIME6
            kernel.S:605    .text:0000011c _NEXT_TASK5
            kernel.S:820    .text:000003d8 _IDLE_LOOP

UNDEFINED SYMBOLS
Kernel_SysTick_Val_Get
Kernel_SysTick_Val_Safely_Get
Kernel_Interrupt_Sts_Get
Debug_Init
Debug_Tx_Byte
