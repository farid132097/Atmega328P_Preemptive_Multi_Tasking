   1               	# 1 "kernel.S"
   1               	
   0               	
   0               	
   2               	
   3               	 ; File          : kernel.S
   4               	 ; Author        : MD. Faridul Islam (faridmdislam@gmail.com)
   5               	 ; Description   : AVR kernel for bare-metal RTOS
   6               	 ; Created       : Jul 27, 2025, 09:30 PM
   7               	 ; Last Modified : Oct 07, 2025, 10:42 PM
   8               	
   9               	
  10               	
  11               	
  12               	#include <avr/io.h>
   1               	/* Copyright (c) 2002,2003,2005,2006,2007 Marek Michalkiewicz, Joerg Wunsch
   2               	   Copyright (c) 2007 Eric B. Weddington
   3               	   All rights reserved.
   4               	
   5               	   Redistribution and use in source and binary forms, with or without
   6               	   modification, are permitted provided that the following conditions are met:
   7               	
   8               	   * Redistributions of source code must retain the above copyright
   9               	     notice, this list of conditions and the following disclaimer.
  10               	
  11               	   * Redistributions in binary form must reproduce the above copyright
  12               	     notice, this list of conditions and the following disclaimer in
  13               	     the documentation and/or other materials provided with the
  14               	     distribution.
  15               	
  16               	   * Neither the name of the copyright holders nor the names of
  17               	     contributors may be used to endorse or promote products derived
  18               	     from this software without specific prior written permission.
  19               	
  20               	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21               	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22               	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23               	  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24               	  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25               	  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26               	  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27               	  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28               	  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29               	  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30               	  POSSIBILITY OF SUCH DAMAGE. */
  31               	
  32               	/* $Id: io.h,v 1.52.2.28 2009/12/20 17:02:53 arcanum Exp $ */
  33               	
  34               	/** \file */
  35               	/** \defgroup avr_io <avr/io.h>: AVR device-specific IO definitions
  36               	    \code #include <avr/io.h> \endcode
  37               	
  38               	    This header file includes the apropriate IO definitions for the
  39               	    device that has been specified by the <tt>-mmcu=</tt> compiler
  40               	    command-line switch.  This is done by diverting to the appropriate
  41               	    file <tt>&lt;avr/io</tt><em>XXXX</em><tt>.h&gt;</tt> which should
  42               	    never be included directly.  Some register names common to all
  43               	    AVR devices are defined directly within <tt>&lt;avr/common.h&gt;</tt>,
  44               	    which is included in <tt>&lt;avr/io.h&gt;</tt>,
  45               	    but most of the details come from the respective include file.
  46               	
  47               	    Note that this file always includes the following files:
  48               	    \code 
  49               	    #include <avr/sfr_defs.h>
  50               	    #include <avr/portpins.h>
  51               	    #include <avr/common.h>
  52               	    #include <avr/version.h>
  53               	    \endcode
  54               	    See \ref avr_sfr for more details about that header file.
  55               	
  56               	    Included are definitions of the IO register set and their
  57               	    respective bit values as specified in the Atmel documentation.
  58               	    Note that inconsistencies in naming conventions,
  59               	    so even identical functions sometimes get different names on
  60               	    different devices.
  61               	
  62               	    Also included are the specific names useable for interrupt
  63               	    function definitions as documented
  64               	    \ref avr_signames "here".
  65               	
  66               	    Finally, the following macros are defined:
  67               	
  68               	    - \b RAMEND
  69               	    <br>
  70               	    The last on-chip RAM address.
  71               	    <br>
  72               	    - \b XRAMEND
  73               	    <br>
  74               	    The last possible RAM location that is addressable. This is equal to 
  75               	    RAMEND for devices that do not allow for external RAM. For devices 
  76               	    that allow external RAM, this will be larger than RAMEND.
  77               	    <br>
  78               	    - \b E2END
  79               	    <br>
  80               	    The last EEPROM address.
  81               	    <br>
  82               	    - \b FLASHEND
  83               	    <br>
  84               	    The last byte address in the Flash program space.
  85               	    <br>
  86               	    - \b SPM_PAGESIZE
  87               	    <br>
  88               	    For devices with bootloader support, the flash pagesize
  89               	    (in bytes) to be used for the \c SPM instruction. 
  90               	    - \b E2PAGESIZE
  91               	    <br>
  92               	    The size of the EEPROM page.
  93               	    
  94               	*/
  95               	
  96               	#ifndef _AVR_IO_H_
  97               	#define _AVR_IO_H_
  98               	
  99               	#include <avr/sfr_defs.h>
   1               	/* Copyright (c) 2002, Marek Michalkiewicz <marekm@amelek.gda.pl>
 100               	
 101               	#if defined (__AVR_AT94K__)
 102               	#  include <avr/ioat94k.h>
 103               	#elif defined (__AVR_AT43USB320__)
 104               	#  include <avr/io43u32x.h>
 105               	#elif defined (__AVR_AT43USB355__)
 106               	#  include <avr/io43u35x.h>
 107               	#elif defined (__AVR_AT76C711__)
 108               	#  include <avr/io76c711.h>
 109               	#elif defined (__AVR_AT86RF401__)
 110               	#  include <avr/io86r401.h>
 111               	#elif defined (__AVR_AT90PWM1__)
 112               	#  include <avr/io90pwm1.h>
 113               	#elif defined (__AVR_AT90PWM2__)
 114               	#  include <avr/io90pwmx.h>
 115               	#elif defined (__AVR_AT90PWM2B__)
 116               	#  include <avr/io90pwm2b.h>
 117               	#elif defined (__AVR_AT90PWM3__)
 118               	#  include <avr/io90pwmx.h>
 119               	#elif defined (__AVR_AT90PWM3B__)
 120               	#  include <avr/io90pwm3b.h>
 121               	#elif defined (__AVR_AT90PWM216__)
 122               	#  include <avr/io90pwm216.h>
 123               	#elif defined (__AVR_AT90PWM316__)
 124               	#  include <avr/io90pwm316.h>
 125               	#elif defined (__AVR_AT90PWM81__)
 126               	#  include <avr/io90pwm81.h>
 127               	#elif defined (__AVR_ATmega8U2__)
 128               	#  include <avr/iom8u2.h>
 129               	#elif defined (__AVR_ATmega16M1__)
 130               	#  include <avr/iom16m1.h>
 131               	#elif defined (__AVR_ATmega16U2__)
 132               	#  include <avr/iom16u2.h>
 133               	#elif defined (__AVR_ATmega16U4__)
 134               	#  include <avr/iom16u4.h>
 135               	#elif defined (__AVR_ATmega32C1__)
 136               	#  include <avr/iom32c1.h>
 137               	#elif defined (__AVR_ATmega32M1__)
 138               	#  include <avr/iom32m1.h>
 139               	#elif defined (__AVR_ATmega32U2__)
 140               	#  include <avr/iom32u2.h>
 141               	#elif defined (__AVR_ATmega32U4__)
 142               	#  include <avr/iom32u4.h>
 143               	#elif defined (__AVR_ATmega32U6__)
 144               	#  include <avr/iom32u6.h>
 145               	#elif defined (__AVR_ATmega64C1__)
 146               	#  include <avr/iom64c1.h>
 147               	#elif defined (__AVR_ATmega64M1__)
 148               	#  include <avr/iom64m1.h>
 149               	#elif defined (__AVR_ATmega128__)
 150               	#  include <avr/iom128.h>
 151               	#elif defined (__AVR_ATmega1280__)
 152               	#  include <avr/iom1280.h>
 153               	#elif defined (__AVR_ATmega1281__)
 154               	#  include <avr/iom1281.h>
 155               	#elif defined (__AVR_ATmega1284P__)
 156               	#  include <avr/iom1284p.h>
 157               	#elif defined (__AVR_ATmega128RFA1__)
 158               	#  include <avr/iom128rfa1.h>
 159               	#elif defined (__AVR_ATmega2560__)
 160               	#  include <avr/iom2560.h>
 161               	#elif defined (__AVR_ATmega2561__)
 162               	#  include <avr/iom2561.h>
 163               	#elif defined (__AVR_AT90CAN32__)
 164               	#  include <avr/iocan32.h>
 165               	#elif defined (__AVR_AT90CAN64__)
 166               	#  include <avr/iocan64.h>
 167               	#elif defined (__AVR_AT90CAN128__)
 168               	#  include <avr/iocan128.h>
 169               	#elif defined (__AVR_AT90USB82__)
 170               	#  include <avr/iousb82.h>
 171               	#elif defined (__AVR_AT90USB162__)
 172               	#  include <avr/iousb162.h>
 173               	#elif defined (__AVR_AT90USB646__)
 174               	#  include <avr/iousb646.h>
 175               	#elif defined (__AVR_AT90USB647__)
 176               	#  include <avr/iousb647.h>
 177               	#elif defined (__AVR_AT90USB1286__)
 178               	#  include <avr/iousb1286.h>
 179               	#elif defined (__AVR_AT90USB1287__)
 180               	#  include <avr/iousb1287.h>
 181               	#elif defined (__AVR_ATmega64__)
 182               	#  include <avr/iom64.h>
 183               	#elif defined (__AVR_ATmega640__)
 184               	#  include <avr/iom640.h>
 185               	#elif defined (__AVR_ATmega644__) || defined (__AVR_ATmega644A__)
 186               	#  include <avr/iom644.h>
 187               	#elif defined (__AVR_ATmega644P__)
 188               	#  include <avr/iom644p.h>
 189               	#elif defined (__AVR_ATmega644PA__)
 190               	#  include <avr/iom644pa.h>
 191               	#elif defined (__AVR_ATmega645__) || defined (__AVR_ATmega645A__) || defined (__AVR_ATmega645P__)
 192               	#  include <avr/iom645.h>
 193               	#elif defined (__AVR_ATmega6450__) || defined (__AVR_ATmega6450A__) || defined (__AVR_ATmega6450P__
 194               	#  include <avr/iom6450.h>
 195               	#elif defined (__AVR_ATmega649__) || defined (__AVR_ATmega649A__)
 196               	#  include <avr/iom649.h>
 197               	#elif defined (__AVR_ATmega6490__) || defined (__AVR_ATmega6490A__) || defined (__AVR_ATmega6490P__
 198               	#  include <avr/iom6490.h>
 199               	#elif defined (__AVR_ATmega649P__)
 200               	#  include <avr/iom649p.h>
 201               	#elif defined (__AVR_ATmega64HVE__)
 202               	#  include <avr/iom64hve.h>
 203               	#elif defined (__AVR_ATmega103__)
 204               	#  include <avr/iom103.h>
 205               	#elif defined (__AVR_ATmega32__)
 206               	#  include <avr/iom32.h>
 207               	#elif defined (__AVR_ATmega323__)
 208               	#  include <avr/iom323.h>
 209               	#elif defined (__AVR_ATmega324P__) || defined (__AVR_ATmega324A__)
 210               	#  include <avr/iom324.h>
 211               	#elif defined (__AVR_ATmega324PA__)
 212               	#  include <avr/iom324pa.h>
 213               	#elif defined (__AVR_ATmega325__)
 214               	#  include <avr/iom325.h>
 215               	#elif defined (__AVR_ATmega325P__)
 216               	#  include <avr/iom325.h>
 217               	#elif defined (__AVR_ATmega3250__)
 218               	#  include <avr/iom3250.h>
 219               	#elif defined (__AVR_ATmega3250P__)
 220               	#  include <avr/iom3250.h>
 221               	#elif defined (__AVR_ATmega328P__) || defined (__AVR_ATmega328__)
 222               	#  include <avr/iom328p.h>
   1               	/* Copyright (c) 2007 Atmel Corporation
 223               	#elif defined (__AVR_ATmega329__)
 224               	#  include <avr/iom329.h>
 225               	#elif defined (__AVR_ATmega329P__) || defined (__AVR_ATmega329PA__)
 226               	#  include <avr/iom329.h>
 227               	#elif defined (__AVR_ATmega3290__)
 228               	#  include <avr/iom3290.h>
 229               	#elif defined (__AVR_ATmega3290P__)
 230               	#  include <avr/iom3290.h>
 231               	#elif defined (__AVR_ATmega32HVB__)
 232               	#  include <avr/iom32hvb.h>
 233               	#elif defined (__AVR_ATmega406__)
 234               	#  include <avr/iom406.h>
 235               	#elif defined (__AVR_ATmega16__)
 236               	#  include <avr/iom16.h>
 237               	#elif defined (__AVR_ATmega16A__)
 238               	#  include <avr/iom16a.h>
 239               	#elif defined (__AVR_ATmega161__)
 240               	#  include <avr/iom161.h>
 241               	#elif defined (__AVR_ATmega162__)
 242               	#  include <avr/iom162.h>
 243               	#elif defined (__AVR_ATmega163__)
 244               	#  include <avr/iom163.h>
 245               	#elif defined (__AVR_ATmega164P__) || defined (__AVR_ATmega164A__)
 246               	#  include <avr/iom164.h>
 247               	#elif defined (__AVR_ATmega165__) || defined (__AVR_ATmega165A__)
 248               	#  include <avr/iom165.h>
 249               	#elif defined (__AVR_ATmega165P__)
 250               	#  include <avr/iom165p.h>
 251               	#elif defined (__AVR_ATmega168__) || defined (__AVR_ATmega168A__)
 252               	#  include <avr/iom168.h>
 253               	#elif defined (__AVR_ATmega168P__)
 254               	#  include <avr/iom168p.h>
 255               	#elif defined (__AVR_ATmega169__) || defined (__AVR_ATmega169A__)
 256               	#  include <avr/iom169.h>
 257               	#elif defined (__AVR_ATmega169P__)
 258               	#  include <avr/iom169p.h>
 259               	#elif defined (__AVR_ATmega169PA__)
 260               	#  include <avr/iom169pa.h>
 261               	#elif defined (__AVR_ATmega8HVA__)
 262               	#  include <avr/iom8hva.h>
 263               	#elif defined (__AVR_ATmega16HVA__)
 264               	#  include <avr/iom16hva.h>
 265               	#elif defined (__AVR_ATmega16HVA2__)
 266               	#  include <avr/iom16hva2.h>
 267               	#elif defined (__AVR_ATmega16HVB__)
 268               	#  include <avr/iom16hvb.h>
 269               	#elif defined (__AVR_ATmega8__)
 270               	#  include <avr/iom8.h>
 271               	#elif defined (__AVR_ATmega48__) || defined (__AVR_ATmega48A__)
 272               	#  include <avr/iom48.h>
 273               	#elif defined (__AVR_ATmega48P__)
 274               	#  include <avr/iom48p.h>
 275               	#elif defined (__AVR_ATmega88__) || defined (__AVR_ATmega88A__)
 276               	#  include <avr/iom88.h>
 277               	#elif defined (__AVR_ATmega88P__)
 278               	#  include <avr/iom88p.h>
 279               	#elif defined (__AVR_ATmega88PA__)
 280               	#  include <avr/iom88pa.h>
 281               	#elif defined (__AVR_ATmega8515__)
 282               	#  include <avr/iom8515.h>
 283               	#elif defined (__AVR_ATmega8535__)
 284               	#  include <avr/iom8535.h>
 285               	#elif defined (__AVR_AT90S8535__)
 286               	#  include <avr/io8535.h>
 287               	#elif defined (__AVR_AT90C8534__)
 288               	#  include <avr/io8534.h>
 289               	#elif defined (__AVR_AT90S8515__)
 290               	#  include <avr/io8515.h>
 291               	#elif defined (__AVR_AT90S4434__)
 292               	#  include <avr/io4434.h>
 293               	#elif defined (__AVR_AT90S4433__)
 294               	#  include <avr/io4433.h>
 295               	#elif defined (__AVR_AT90S4414__)
 296               	#  include <avr/io4414.h>
 297               	#elif defined (__AVR_ATtiny22__)
 298               	#  include <avr/iotn22.h>
 299               	#elif defined (__AVR_ATtiny26__)
 300               	#  include <avr/iotn26.h>
 301               	#elif defined (__AVR_AT90S2343__)
 302               	#  include <avr/io2343.h>
 303               	#elif defined (__AVR_AT90S2333__)
 304               	#  include <avr/io2333.h>
 305               	#elif defined (__AVR_AT90S2323__)
 306               	#  include <avr/io2323.h>
 307               	#elif defined (__AVR_AT90S2313__)
 308               	#  include <avr/io2313.h>
 309               	#elif defined (__AVR_ATtiny2313__)
 310               	#  include <avr/iotn2313.h>
 311               	#elif defined (__AVR_ATtiny2313A__)
 312               	#  include <avr/iotn2313a.h>
 313               	#elif defined (__AVR_ATtiny13__)
 314               	#  include <avr/iotn13.h>
 315               	#elif defined (__AVR_ATtiny13A__)
 316               	#  include <avr/iotn13a.h>
 317               	#elif defined (__AVR_ATtiny25__)
 318               	#  include <avr/iotn25.h>
 319               	#elif defined (__AVR_ATtiny4313__)
 320               	#  include <avr/iotn4313.h>
 321               	#elif defined (__AVR_ATtiny45__)
 322               	#  include <avr/iotn45.h>
 323               	#elif defined (__AVR_ATtiny85__)
 324               	#  include <avr/iotn85.h>
 325               	#elif defined (__AVR_ATtiny24__)
 326               	#  include <avr/iotn24.h>
 327               	#elif defined (__AVR_ATtiny24A__)
 328               	#  include <avr/iotn24a.h>
 329               	#elif defined (__AVR_ATtiny44__)
 330               	#  include <avr/iotn44.h>
 331               	#elif defined (__AVR_ATtiny44A__)
 332               	#  include <avr/iotn44a.h>
 333               	#elif defined (__AVR_ATtiny84__)
 334               	#  include <avr/iotn84.h>
 335               	#elif defined (__AVR_ATtiny261__)
 336               	#  include <avr/iotn261.h>
 337               	#elif defined (__AVR_ATtiny261A__)
 338               	#  include <avr/iotn261a.h>
 339               	#elif defined (__AVR_ATtiny461__)
 340               	#  include <avr/iotn461.h>
 341               	#elif defined (__AVR_ATtiny461A__)
 342               	#  include <avr/iotn461a.h>
 343               	#elif defined (__AVR_ATtiny861__)
 344               	#  include <avr/iotn861.h>
 345               	#elif defined (__AVR_ATtiny861A__)
 346               	#  include <avr/iotn861a.h>
 347               	#elif defined (__AVR_ATtiny43U__)
 348               	#  include <avr/iotn43u.h>
 349               	#elif defined (__AVR_ATtiny48__)
 350               	#  include <avr/iotn48.h>
 351               	#elif defined (__AVR_ATtiny88__)
 352               	#  include <avr/iotn88.h>
 353               	#elif defined (__AVR_ATtiny87__)
 354               	#  include <avr/iotn87.h>
 355               	#elif defined (__AVR_ATtiny167__)
 356               	#  include <avr/iotn167.h>
 357               	#elif defined (__AVR_AT90SCR100__)
 358               	#  include <avr/io90scr100.h>
 359               	#elif defined (__AVR_ATxmega16A4__)
 360               	#  include <avr/iox16a4.h>
 361               	#elif defined (__AVR_ATxmega16D4__)
 362               	#  include <avr/iox16d4.h>
 363               	#elif defined (__AVR_ATxmega32A4__)
 364               	#  include <avr/iox32a4.h>
 365               	#elif defined (__AVR_ATxmega32D4__)
 366               	#  include <avr/iox32d4.h>
 367               	#elif defined (__AVR_ATxmega64A1__)
 368               	#  include <avr/iox64a1.h>
 369               	#elif defined (__AVR_ATxmega64A3__)
 370               	#  include <avr/iox64a3.h>
 371               	#elif defined (__AVR_ATxmega64D3__)
 372               	#  include <avr/iox64d3.h>
 373               	#elif defined (__AVR_ATxmega128A1__)
 374               	#  include <avr/iox128a1.h>
 375               	#elif defined (__AVR_ATxmega128A3__)
 376               	#  include <avr/iox128a3.h>
 377               	#elif defined (__AVR_ATxmega128D3__)
 378               	#  include <avr/iox128d3.h>
 379               	#elif defined (__AVR_ATxmega192A3__)
 380               	#  include <avr/iox192a3.h>
 381               	#elif defined (__AVR_ATxmega192D3__)
 382               	#  include <avr/iox192d3.h>
 383               	#elif defined (__AVR_ATxmega256A3__)
 384               	#  include <avr/iox256a3.h>
 385               	#elif defined (__AVR_ATxmega256A3B__)
 386               	#  include <avr/iox256a3b.h>
 387               	#elif defined (__AVR_ATxmega256D3__)
 388               	#  include <avr/iox256d3.h>
 389               	#elif defined (__AVR_ATA6289__)
 390               	#  include <avr/ioa6289.h>
 391               	/* avr1: the following only supported for assembler programs */
 392               	#elif defined (__AVR_ATtiny28__)
 393               	#  include <avr/iotn28.h>
 394               	#elif defined (__AVR_AT90S1200__)
 395               	#  include <avr/io1200.h>
 396               	#elif defined (__AVR_ATtiny15__)
 397               	#  include <avr/iotn15.h>
 398               	#elif defined (__AVR_ATtiny12__)
 399               	#  include <avr/iotn12.h>
 400               	#elif defined (__AVR_ATtiny11__)
 401               	#  include <avr/iotn11.h>
 402               	#else
 403               	#  if !defined(__COMPILING_AVR_LIBC__)
 404               	#    warning "device type not defined"
 405               	#  endif
 406               	#endif
 407               	
 408               	#include <avr/portpins.h>
   1               	/* Copyright (c) 2003  Theodore A. Roth
 409               	
 410               	#include <avr/common.h>
   1               	/* Copyright (c) 2007 Eric B. Weddington
 411               	
 412               	#include <avr/version.h>
   1               	/* Copyright (c) 2005, Joerg Wunsch                               -*- c -*-
 413               	
 414               	/* Include fuse.h after individual IO header files. */
 415               	#include <avr/fuse.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 416               	
 417               	/* Include lock.h after individual IO header files. */
 418               	#include <avr/lock.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 419               	
  13               	#include <avr/interrupt.h>
   1               	/* Copyright (c) 2002,2005,2007 Marek Michalkiewicz
  14               	#include "kernel.h"
   1               	
  15               	#include "debug.h"
   1               	
  16               	
  17               	
  18               	
  19               	
  20               	;;============================define user address or macro starting=========================;; 
  21               	.equ     KER_TR ,         1000                            ;TickRate in Hz, not calculated      
  22               	.equ     KER_PRS,         0x03                            ;For prescaler 64, manually select   
  23               	.equ     KER_RLD,         0x82                            ;KER_RLD=0xFF-(F_CPU/KER_PRS/KER_TR) 
  24               	.equ     KER_STK_SZ,      128                             ;stack size in bytes for each task   
  25               	.equ     KER_MX_NTSK,     10                              ;max number of tasks                 
  26               	;;==============================define user address or macro end============================;; 
  27               	
  28               	
  29               	
  30               	
  31               	
  32               	;;===============================define data offsets starting===============================;; 
  33               	.equ     OFB_TICK0,       0x00                            ;offset from KerBase tick count byte0
  34               	.equ     OFB_TICK1,       0x01                            ;offset from KerBase tick count byte1
  35               	.equ     OFB_TICK2,       0x02                            ;offset from KerBase tick count byte2
  36               	.equ     OFB_TICK3,       0x03                            ;offset from KerBase tick count byte3
  37               	.equ     OFB_TICK4,       0x04                            ;offset from KerBase tick count byte4
  38               	.equ     OFB_PRS  ,       0x05                            ;offset from KerBase prescaler       
  39               	.equ     OFB_RLD  ,       0x06                            ;offset from KerBase counter reload  
  40               	.equ     OFB_TID  ,       0x07                            ;offset from KerBase task id         
  41               	.equ     OFB_NTSK ,       0x08                            ;offset from KerBase ntask           
  42               	.equ     OFB_LPR  ,       0x09                            ;offset from KerBase lowest priority 
  43               	.equ     OFB_PTID ,       0x0A                            ;offset from KerBase prio task_id    
  44               	.equ     OFB_UTC  ,       0x0B                            ;offset from KerBase usage tick cnt  
  45               	.equ     OFB_UATC ,       0x0C                            ;offset from KerBase active tick cnt 
  46               	.equ     OFB_USAGE,       0x0D                            ;offset from KerBase cpu usage       
  47               	.equ     OFB_SLCFG,       0x0E                            ;offset from KerBase sleep config    
  48               	.equ     OFM_MSPI ,       0x00                            ;offset from MSPZP msp index field   
  49               	.equ     OFM_MSPS ,       0x02                            ;offset from MSPZP msp starting      
  50               	;;==================================define data offsets end=================================;; 
  51               	
  52               	
  53               	
  54               	
  55               	
  56               	;;===============================define system macro starting===============================;; 
  57               	.equ     TASK_BLOCKED,    0x00                            ;KerSchSts val=0                     
  58               	.equ     TASK_READY,      0x01                            ;KerSchSts val=1                     
  59               	.equ     TASK_EXECUTING,  0x02                            ;KerSchSts val=2                     
  60               	.equ     TASK_SUSPENDED,  0x03                            ;KerSchSts val=3                     
  61               	.equ     TASK_CONS_LAT,   0x04                            ;KerSchSts val=3, constant latency   
  62               	.equ     SCH_MODE_HANDLER,0x00                            ;handler mode in KER_SLP_TIME_MGNT   
  63               	.equ     SCH_MODE_THREAD, 0x01                            ;thread mode in KER_SLP_TIME_MGNT    
  64               	;;==================================define system macro end=================================;; 
  65               	
  66               	
  67               	
  68               	
  69               	
  70               	;;===========================define hardware reg address starting===========================;; 
  71               	;SRAM Mapped Addresses, LDS/STS can be used                                                    
  72               	.equ     SRASSR  ,        0xB6                            ;manually defined ASSR in SRAM       
  73               	.equ     SRTCNT2 ,        0xB2                            ;manually defined TNCT2 in SRAM      
  74               	.equ     SRTCCR2B,        0xB1                            ;manually defined TCCR2B in SRAM     
  75               	.equ     SRTCCR2A,        0xB0                            ;manually defined TCCR2A in SRAM     
  76               	.equ     SRADMUX ,        0x7C                            ;manually defined ADMUX in SRAM      
  77               	.equ     SRADCSRB,        0x7B                            ;manually defined ADCSRB in SRAM     
  78               	.equ     SRADCSRA,        0x7A                            ;manually defined ADCSRA in SRAM     
  79               	.equ     SRTIMSK2,        0x70                            ;manually defined TIMSK2 in SRAM     
  80               	.equ     SRTIMSK1,        0x6F                            ;manually defined TIMSK1 in SRAM     
  81               	.equ     SRTIMSK0,        0x6E                            ;manually defined TIMSK0 in SRAM     
  82               	.equ     SRWDTCSR,        0x60                            ;manually defined WDTCSR in SRAM     
  83               	.equ     SRSREG  ,        0x5F                            ;manually defined SREG in SRAM       
  84               	.equ     SRSPH   ,        0x5E                            ;manually defined SPH in SRAM        
  85               	.equ     SRSPL   ,        0x5D                            ;manually defined SPL in SRAM        
  86               	.equ     SRMCUCR ,        0x55                            ;manually defined MCUCR in SRAM      
  87               	.equ     SRMCUSR ,        0x54                            ;manually defined MCUSR in SRAM      
  88               	.equ     SRSMCR  ,        0x53                            ;manually defined SMCR in SRAM       
  89               	.equ     SRACSR  ,        0x50                            ;manually defined ACSR in SRAM       
  90               	.equ     SROCR0B ,        0x48                            ;manually defined OCR0B in SRAM      
  91               	.equ     SROCR0A ,        0x47                            ;manually defined OCR0A in SRAM      
  92               	.equ     SRTCNT0 ,        0x46                            ;manually defined TCNT0 in SRAM      
  93               	.equ     SRTCCR0B,        0x45                            ;manually defined TCCR0B in SRAM     
  94               	.equ     SRTCCR0A,        0x44                            ;manually defined TCCR0A in SRAM     
  95               	.equ     SRTIFR2 ,        0x37                            ;manually defined TIFR2 in SRAM      
  96               	.equ     SRTIFR1 ,        0x36                            ;manually defined TIFR1 in SRAM      
  97               	.equ     SRTIFR0 ,        0x35                            ;manually defined TIFR0 in SRAM      
  98               	;IO Mapped Addresses, IN/OUT commands can be used                                              
  99               	.equ     IOSREG  ,        0x3F                            ;manually defined SREG in IO         
 100               	.equ     IOSPH   ,        0x3E                            ;manually defined SPH in IO          
 101               	.equ     IOSPL   ,        0x3D                            ;manually defined SPL in IO          
 102               	.equ     IOMCUCR ,        0x35                            ;manually defined MCUCR in IO        
 103               	.equ     IOMCUSR ,        0x34                            ;manually defined MCUSR in IO        
 104               	.equ     IOSMCR  ,        0x33                            ;manually defined SMCR in IO         
 105               	.equ     IOOCR0B ,        0x28                            ;manually defined OCR0B in IO        
 106               	.equ     IOOCR0A ,        0x27                            ;manually defined OCR0A in IO        
 107               	.equ     IOTCNT0 ,        0x26                            ;manually defined TCNT0 in IO        
 108               	.equ     IOTCCR0B,        0x25                            ;manually defined TCCR0B in IO       
 109               	.equ     IOTCCR0A,        0x24                            ;manually defined TCCR0A in IO       
 110               	.equ     IOTIFR2 ,        0x17                            ;manually defined TIFR2 in IO        
 111               	.equ     IOTIFR1 ,        0x16                            ;manually defined TIFR1 in IO        
 112               	.equ     IOTIFR0 ,        0x15                            ;manually defined TIFR0 in IO        
 113               	;;==============================define hardware reg address end=============================;; 
 114               	
 115               	
 116               	
 117               	
 118               	
 119               	;;=============================define global variables starting=============================;; 
 120               	.section   .bss                                                                                
 121               	                                                                                               
 122               	.global    KerBase                                        ;declare global space for kernel     
 123 0000 0000 0000 	KerBase:   .skip 16                                       ;see offset section                  
 123      0000 0000 
 123      0000 0000 
 123      0000 0000 
 124               	                                                                                               
 125               	.global    KerPSP                                         ;space for process stack pointers    
 126 0010 0000 0000 	KerPSP:    .skip KER_MX_NTSK*2                            ;2 bytes for each task               
 126      0000 0000 
 126      0000 0000 
 126      0000 0000 
 126      0000 0000 
 127               	                                                                                               
 128               	.global    KerSSZ                                         ;stack for main stack pointers       
 129 0024 0000 0000 	KerSSZ:    .skip 14                                       ;stack_ptr(2), MSPZPn(4)             
 129      0000 0000 
 129      0000 0000 
 129      0000 
 130               	                                                                                               
 131               	.global    KerSchSts                                      ;space for scheduler status          
 132 0032 0000 0000 	KerSchSts: .skip KER_MX_NTSK*1                            ;status(1)                           
 132      0000 0000 
 132      0000 
 133               	                                                                                               
 134               	.global    KerSchPr                                       ;space for scheduler priority        
 135 003c 0000 0000 	KerSchPr:  .skip KER_MX_NTSK*1                            ;priority(1)                         
 135      0000 0000 
 135      0000 
 136               	                                                                                               
 137               	.global    KerSchSlp                                      ;space for task sleep                
 138 0046 0000 0000 	KerSchSlp: .skip KER_MX_NTSK*2                            ;timing(2)                           
 138      0000 0000 
 138      0000 0000 
 138      0000 0000 
 138      0000 0000 
 139               	                                                                                               
 140               	.global    KerStack                                       ;space for stack                     
 141 005a 0000 0000 	KerStack:  .skip KER_STK_SZ*KER_MX_NTSK                   ;KER_STK_SZ bytes for each task      
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 142               	;;==============================define global variables end=================================;; 
 143               	
 144               	
 145               	
 146               	
 147               	
 148               	;;===============================define vector section starting=============================;; 
 149               	.section .vectors, "ax", @progbits                                                             
 150               	                                                                                               
 151 0000 0000 0000 	.org    0x000C                                            ;isr location for wdt                
 151      0000 0000 
 151      0000 0000 
 152:kernel.S      ****         RJMP  __vector_6                                                                       
 153 000e 0000 0000 	.org    0x0012                                            ;isr location for timer2ovf async    
 154:kernel.S      ****         RJMP  __vector_9                                                                       
 155 0014 0000 0000 	.org    0x0020                                            ;isr location for timer0ovf          
 155      0000 0000 
 155      0000 0000 
 156:kernel.S      ****         RJMP  __vector_16                                                                      
 157               	;;=================================define vector section end================================;; 
 158               	
 159               	
 160               	
 161               	
 162               	
 163               	;;===============================define text section starting===============================;; 
 164               	.section .text                                                                                 
 165               	;;==================================define text section end=================================;; 
 166               	
 167               	
 168               	
 169               	
 170               	
 171               	;;==============================define global functions starting============================;; 
 172               	.global  Kernel_SysTick_Reg_Init                                                               
 173               	.global  Kernel_SysTick_Val_Get                                                                
 174               	.global  Kernel_SysTick_Val_Safely_Get                                                         
 175               	.global  Kernel_Interrupt_Sts_Get                                                              
 176               	.global  Kernel_Init                                                                           
 177               	.global  Kernel_Task_Create                                                                    
 178               	.global  Kernel_Start_Tasks                                                                    
 179               	.global  Kernel_Task_Idle                                                                      
 180               	.global  Kernel_Task_Sleep                                                                     
 181               	.global  Kernel_Task_Constant_Latency                                                          
 182               	.global  Kernel_Task_Constant_Latency_Sleep                                                    
 183               	.global  Kernel_Task_Sleep_Time_Get                                                            
 184               	.global  Kernel_Task_Status_Get                                                                
 185               	.global  Kernel_NTask_Get                                                                      
 186               	.global  Kernel_Task_Prio_Get                                                                  
 187               	.global  Kernel_Lowest_Prio_Get                                                                
 188               	.global  Kernel_High_Prio_Task_ID_Get                                                          
 189               	.global  Kernel_Abs_High_Prio_Task_ID_Get                                                      
 190               	.global  Kernel_CPU_Usage_Get                                                                  
 191               	;;================================define global functions end===============================;; 
 192               	
 193               	
 194               	
 195               	
 196               	
 197               	;;============================debug pin operation init starting=============================;; 
 198               	;used registers          : R18, R19                                                            
 199               	;arg registers           : None                                                                
 200               	;return registers        : None                                                                
 201               	;unsafe access registers : R18, R19                                                            
 202               	.macro  KER_TIMER_INIT                                    ;1.25/1.50uS @8MHz    (10/12 clocks) 
 203               	        #ifdef KER_TIMER0_AS_TICK_SRC                                                          
 204               			;Timer0 overflow vect is used as tick source      ;total 1.5uS @8MHz      ( 12 clocks) 
 205               	        LDS   R18		         , KerBase+OFB_PRS        ;load prescaler         (  2 clocks) 
 206               			LDS   R19		         , KerBase+OFB_RLD        ;load reload val        (  2 clocks) 
 207               			STS   SRTCCR0B           , R18                    ;prescaler-> TCCR0B     (  2 clocks) 
 208               			STS   SRTCNT0            , R19                    ;reload val-> TCNT0     (  2 clocks) 
 209               			LDI   R18                , 0x01                   ;bit mask TOIE0         (  1 clock ) 
 210               			STS   SRTIMSK0           , R18                    ;set to TIMSK0          (  2 clocks) 
 211               			SEI                                               ;force enable interrupt (  1 clock ) 
 212               			#endif                                                                                 
 213               			                                                                                       
 214               			#ifdef KER_WDT_AS_TICK_SRC                                                             
 215               			;watchdog timer timeout is used as tick source    ;total 1.5uS @8MHz      ( 10 clocks) 
 216               	        WDR                                               ;reset wdt              (  1 clock ) 
 217               			LDS   R18                , SRWDTCSR               ;copy WDTCSR            (  2 clocks) 
 218               			ORI   R18                , 0x18                   ;set WDCE,WDE           (  1 clock ) 
 219               			STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
 220               			                                                                                       
 221               			#ifdef KER_WDT_TICK_16MS                                                               
 222               			LDI   R18                , 0x40                   ;WDIE                   (  1 clock ) 
 223               			#endif                                                                                 
 224               			                                                                                       
 225               	        #ifdef KER_WDT_TICK_32MS                                                               
 226               			LDI   R18                , 0x41                   ;WDIE, WDPS0            (  1 clock ) 
 227               			#endif                                                                                 
 228               			                                                                                       
 229               			#ifdef KER_WDT_TICK_64MS                                                               
 230               			LDI   R18                , 0x42                   ;WDIE, WDPS1            (  1 clock ) 
 231               			#endif                                                                                 
 232               			                                                                                       
 233               			#ifdef KER_WDT_TICK_125MS                                                              
 234               			LDI   R18                , 0x43                   ;WDIE, WDPS1, WDPS2     (  1 clock ) 
 235               			#endif                                                                                 
 236               			                                                                                       
 237               			#ifdef KER_WDT_TICK_250MS                                                              
 238               			LDI   R18                , 0x44                   ;WDIE, WDPS1, WDPS2     (  1 clock ) 
 239               			#endif                                                                                 
 240               			                                                                                       
 241               			#ifdef KER_WDT_TICK_500MS                                                              
 242               			LDI   R18                , 0x45                   ;WDIE, WDPS1, WDPS2     (  1 clock ) 
 243               			#endif                                                                                 
 244               			                                                                                       
 245               			#ifdef KER_WDT_TICK_1000MS                                                             
 246               			LDI   R18                , 0x46                   ;WDIE, WDPS1, WDPS2     (  1 clock ) 
 247               			#endif                                                                                 
 248               			                                                                                       
 249               			STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
 250               			SEI                                               ;force enable interrupt (  1 clock ) 
 251               			#endif                                                                                 
 252               	                                                                                               
 253               			#ifdef KER_TOSC_AS_TICK_SRC                                                            
 254               			;timer2 asynchornus mode is used as tick source   ;total 1.5uS @8MHz      ( 57 clocks) 
 255               			LDI   R18                , 0x00                   ;clear interrupts       (  1 clock ) 
 256               			STS   SRTIMSK2           , R18                    ;set val to TIMSK2      (  2 clocks) 
 257               			LDI   R18                , 0x20                   ;set AS2 bit            (  1 clock ) 
 258               			STS   SRASSR             , R18                    ;set val to ASSR        (  2 clocks) 
 259               			LDI   R18                , 0x00                   ;clear reg              (  1 clock ) 
 260               			STS   SRTCCR2A           , R18                    ;set val to TCCR2A      (  2 clocks) 
 261               			LDI   R18                , 0x05                   ;set prescaler 128      (  1 clock ) 
 262               			STS   SRTCCR2B           , R18                    ;set val to TCCR2B      (  2 clocks) 
 263               			LDI   R18                , 0x00                   ;clear reg              (  1 clock ) 
 264               			STS   SRTCNT2            , R18                    ;set val to TCNT2       (  2 clocks) 
 265               		_KER_TC2_AUB\@:                                                                            
 266               		    LDS   R18                , SRASSR                 ;load ASSR              (  2 clocks) 
 267               	        ANDI  R18                , 0x02                   ;check bit TCR2AUB      (  1 clock ) 
 268               			BRNE  _KER_TC2_AUB\@                              ;wait until AUB cleared (  2 clocks) 
 269               		_KER_TC2_BUB\@:                                                                            
 270               		    LDS   R18                , SRASSR                 ;load ASSR              (  2 clocks) 
 271               	        ANDI  R18                , 0x01                   ;check bit TCR2BUB      (  1 clock ) 
 272               			BRNE  _KER_TC2_BUB\@                              ;wait until BUB cleared (  2 clocks) 
 273               		_KER_TC2_UB\@:                                                                             
 274               		    LDS   R18                , SRASSR                 ;load ASSR              (  2 clocks) 
 275               	        ANDI  R18                , 0x10                   ;check bit TCNT2UB      (  1 clock ) 
 276               			BRNE  _KER_TC2_UB\@                               ;wait until BUB cleared (  2 clocks) 
 277               		_KER_TC2_TOV2\@:                                                                           
 278               		    LDS   R18                , SRTIFR2                ;load TIFR2             (  2 clocks) 
 279               	        ANDI  R18                , 0x01                   ;check bit TOV2         (  1 clock ) 
 280               	        BREQ  _KER_TC2_OCF2A\@                            ;bit cleared, jump next (  2 clocks) 
 281               			LDI   R18                , 0x01                   ;set bit                (  1 clock ) 
 282               			STS   SRTIFR2            , R18                    ;set val                (  2 clocks) 
 283               	    _KER_TC2_OCF2A\@:                                                                          
 284               		    LDS   R18                , SRTIFR2                ;load TIFR2             (  2 clocks) 
 285               	        ANDI  R18                , 0x02                   ;check bit OCF2A        (  1 clock ) 
 286               	        BREQ  _KER_TC2_OCF2B\@                            ;bit cleared, jump next (  2 clocks) 
 287               			LDI   R18                , 0x02                   ;set bit                (  1 clock ) 
 288               			STS   SRTIFR2            , R18                    ;set val                (  2 clocks) 
 289               		_KER_TC2_OCF2B\@:                                                                          
 290               		    LDS   R18                , SRTIFR2                ;load TIFR2             (  2 clocks) 
 291               	        ANDI  R18                , 0x04                   ;check bit OCF2B        (  1 clock ) 
 292               	        BREQ  _KER_TC2_INTEN\@                            ;bit cleared, jump next (  2 clocks) 
 293               			LDI   R18                , 0x04                   ;set bit                (  1 clock ) 
 294               			STS   SRTIFR2            , R18                    ;set val                (  2 clocks) 
 295               	    _KER_TC2_INTEN\@:                                                                          
 296               			LDI   R18                , 0x01                   ;set TOIE2 bit          (  1 clock ) 
 297               			STS   SRTIMSK2           , R18                    ;set val to TIMSK2      (  2 clocks) 
 298               	        SEI                                               ;force enable interrupt (  1 clock ) 
 299               			#endif                                                                                 
 300               	.endm                                                                                          
 301               	;;==============================debug pin operation init end================================;; 
 302               	
 303               	
 304               	
 305               	
 306               	
 307               	;;============================debug pin operation init starting=============================;; 
 308               	;used registers          : None                                                                
 309               	;arg registers           : None                                                                
 310               	;return registers        : None                                                                
 311               	;unsafe access registers : None                                                                
 312               	.macro  KER_DEBUG_PIN_INIT                                ;total 0.5uS @8MHz      (  4 clocks) 
 313               	        #ifdef KER_DBG_ENABLE                                                                  
 314               			CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear port bit         (  2 clocks) 
 315               			SBI   KER_DBG_DDR        , KER_DBG_PIN            ;set bit in DDR         (  2 clocks) 
 316               			#endif                                                                                 
 317               	.endm                                                                                          
 318               	;;==============================debug pin operation init end================================;; 
 319               	
 320               	
 321               	
 322               	
 323               	
 324               	;;===========================debug pin operation set starting===============================;; 
 325               	;used registers          : None                                                                
 326               	;arg registers           : None                                                                
 327               	;return registers        : None                                                                
 328               	;unsafe access registers : None                                                                
 329               	.macro  KER_DEBUG_PIN_SET                                 ;total 0.25uS @8MHz     (  2 clocks) 
 330               	        #ifdef KER_DBG_ENABLE                                                                  
 331               	        SBI   KER_DBG_PORT       , KER_DBG_PIN            ;set gpio               (  2 clocks) 
 332               			#endif                                                                                 
 333               	.endm                                                                                          
 334               	;;==============================debug pin operation set end=================================;; 
 335               	
 336               	
 337               	
 338               	
 339               	
 340               	;;===========================debug pin operation clear starting=============================;; 
 341               	;used registers          : None                                                                
 342               	;arg registers           : None                                                                
 343               	;return registers        : None                                                                
 344               	;unsafe access registers : None                                                                
 345               	.macro  KER_DEBUG_PIN_CLEAR                               ;total 0.25uS @8MHz     (  2 clocks) 
 346               	        #ifdef KER_DBG_ENABLE                                                                  
 347               			CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear gpio             (  2 clocks) 
 348               			#endif                                                                                 
 349               	.endm                                                                                          
 350               	;;==============================debug pin operation clear end===============================;; 
 351               	
 352               	
 353               	
 354               	
 355               	
 356               	;;==============================reload counter value starting===============================;; 
 357               	;used registers          : R18                                                                 
 358               	;arg registers           : None                                                                
 359               	;return registers        : None                                                                
 360               	;unsafe access registers : R18                                                                 
 361               	.macro  KER_COUNTER_RELOAD                                ;total 0.5uS @8MHz      (  4 clocks) 
 362               	        LDS   R18                , KerBase+OFB_RLD        ;load reload value      (  2 clocks) 
 363               			STS   SRTCNT0            , R18                    ;Set value to TCNT0     (  2 clocks) 
 364               	.endm                                                                                          
 365               	;;=================================reload counter value end=================================;; 
 366               	
 367               	
 368               	
 369               	
 370               	
 371               	;;=================================save r0 & sreg starting==================================;; 
 372               	;used registers          : R0                                                                  
 373               	;arg registers           : None                                                                
 374               	;return registers        : None                                                                
 375               	;unsafe access registers : None                                                                
 376               	.macro  KER_SAVE_R0_SREG                                  ;total 0.63uS @8MHz     (  5 clocks) 
 377               	        PUSH  R0                                          ;save R0                (  2 clocks) 
 378               			IN    R0                 , IOSREG                 ;load SREG              (  1 clock ) 
 379               			PUSH  R0                                          ;save SREG              (  2 clocks) 
 380               	.endm                                                                                          
 381               	;;====================================save r0 & sreg end====================================;; 
 382               	
 383               	
 384               	
 385               	
 386               	
 387               	;;===============================save r0, sreg & cli starting===============================;; 
 388               	;used registers          : R0                                                                  
 389               	;arg registers           : None                                                                
 390               	;return registers        : None                                                                
 391               	;unsafe access registers : None                                                                
 392               	.macro  KER_SAVE_R0_CLI_SREG                              ;total 0.75uS @8MHz     (  6 clocks) 
 393               	        PUSH  R0                                          ;push R0                (  2 clocks) 
 394               			IN    R0                 , IOSREG                 ;save SREG              (  1 clock ) 
 395               			CLI                                               ;clear interrupt        (  1 clock ) 
 396               			PUSH  R0                                          ;save SREG              (  2 clocks) 
 397               	.endm                                                                                          
 398               	;;=================================save r0, sreg & cli end==================================;; 
 399               	
 400               	
 401               	
 402               	
 403               	
 404               	;;===================================save r1~r31 starting===================================;; 
 405               	;used registers          : R1~R31                                                              
 406               	;arg registers           : None                                                                
 407               	;return registers        : None                                                                
 408               	;unsafe access registers : None                                                                
 409               	.macro  KER_SAVE_R1_R31                                   ;total 7.88uS @8MHz     ( 63 clocks) 
 410               			PUSH  R1                                          ;save R1                (  2 clocks) 
 411               			CLR   R1                                          ;clear R1               (  1 clock ) 
 412               			PUSH  R2                                          ;save R2                (  2 clocks) 
 413               			PUSH  R3                                          ;save R3                (  2 clocks) 
 414               			PUSH  R4                                          ;save R4                (  2 clocks) 
 415               			PUSH  R5                                          ;save R5                (  2 clocks) 
 416               			PUSH  R6                                          ;save R6                (  2 clocks) 
 417               			PUSH  R7                                          ;save R7                (  2 clocks) 
 418               			PUSH  R8                                          ;save R8                (  2 clocks) 
 419               			PUSH  R9                                          ;save R9                (  2 clocks) 
 420               			PUSH  R10                                         ;save R10               (  2 clocks) 
 421               			PUSH  R11                                         ;save R11               (  2 clocks) 
 422               			PUSH  R12                                         ;save R12               (  2 clocks) 
 423               			PUSH  R13                                         ;save R13               (  2 clocks) 
 424               			PUSH  R14                                         ;save R14               (  2 clocks) 
 425               			PUSH  R15                                         ;save R15               (  2 clocks) 
 426               			PUSH  R16                                         ;save R16               (  2 clocks) 
 427               			PUSH  R17                                         ;save R17               (  2 clocks) 
 428               			PUSH  R18                                         ;save R18               (  2 clocks) 
 429               			PUSH  R19                                         ;save R19               (  2 clocks) 
 430               			PUSH  R20                                         ;save R20               (  2 clocks) 
 431               			PUSH  R21                                         ;save R21               (  2 clocks) 
 432               			PUSH  R22                                         ;save R22               (  2 clocks) 
 433               			PUSH  R23                                         ;save R23               (  2 clocks) 
 434               			PUSH  R24                                         ;save R24               (  2 clocks) 
 435               			PUSH  R25                                         ;save R25               (  2 clocks) 
 436               			PUSH  R26                                         ;save R26               (  2 clocks) 
 437               			PUSH  R27                                         ;save R27               (  2 clocks) 
 438               			PUSH  R28                                         ;save R28               (  2 clocks) 
 439               			PUSH  R29                                         ;save R29               (  2 clocks) 
 440               			PUSH  R30                                         ;save R30               (  2 clocks) 
 441               			PUSH  R31                                         ;save R31               (  2 clocks) 
 442               	.endm                                                                                          
 443               	;;======================================save r1~r31 end=====================================;; 
 444               	
 445               	
 446               	
 447               	
 448               	
 449               	;;==============================context save handler starting===============================;; 
 450               	;used registers          : R0~R31                                                              
 451               	;arg registers           : None                                                                
 452               	;return registers        : None                                                                
 453               	;unsafe access registers : None                                                                
 454               	.macro  KER_CONTEXT_SAVE_HANDLER                          ;total 8.5uS @8MHz      ( 68 clocks) 
 455               	        KER_SAVE_R0_SREG                                  ;save r0, sreg          (  5 clocks) 
 456               	        KER_SAVE_R1_R31                                   ;save r1~r31            ( 63 clocks) 
 457               	.endm                                                                                          
 458               	;;=================================context save handler end=================================;; 
 459               	
 460               	
 461               	
 462               	
 463               	
 464               	;;===============================context save thread starting===============================;; 
 465               	;used registers          : R0~R31                                                              
 466               	;arg registers           : None                                                                
 467               	;return registers        : None                                                                
 468               	;unsafe access registers : None                                                                
 469               	.macro  KER_CONTEXT_SAVE_THREAD                           ;total 8.63uS @8MHz     ( 69 clocks) 
 470               	        KER_SAVE_R0_CLI_SREG                              ;save r0, sreg          (  6 clocks) 
 471               	        KER_SAVE_R1_R31                                   ;save r1~r31            ( 63 clocks) 
 472               	.endm                                                                                          
 473               	;;==================================context save thread end=================================;; 
 474               	
 475               	
 476               	
 477               	
 478               	
 479               	
 480               	;;================================restore r0 & sreg starting================================;; 
 481               	;used registers          : R0                                                                  
 482               	;arg registers           : None                                                                
 483               	;return registers        : None                                                                
 484               	;unsafe access registers : None                                                                
 485               	.macro  KER_RESTORE_R0_SREG                               ;total 0.63uS @8MHz     (  5 clocks) 
 486               	        POP   R0                                          ;fetch SREG             (  2 clocks) 
 487               			OUT   IOSREG             , R0                     ;load SREG              (  1 clock ) 
 488               			POP   R0                                          ;restore R0             (  2 clocks) 
 489               	.endm                                                                                          
 490               	;;==================================restore r0 & sreg end===================================;; 
 491               	
 492               	
 493               	
 494               	
 495               	
 496               	;;==============================restore r0, sreg & sei starting=============================;; 
 497               	;used registers          : R0                                                                  
 498               	;arg registers           : None                                                                
 499               	;return registers        : None                                                                
 500               	;unsafe access registers : None                                                                
 501               	.macro  KER_RESTORE_R0_SREG_SEI                           ;total 0.75uS @8MHz     (  6 clocks) 
 502               	        POP   R0                                          ;fetch SREG             (  2 clocks) 
 503               			OUT   IOSREG             , R0                     ;load SREG              (  1 clock ) 
 504               			POP   R0                                          ;restore R0             (  2 clocks) 
 505               			SEI                                               ;enable interrupt       (  1 clock ) 
 506               	.endm                                                                                          
 507               	;;===============================restore r0, sreg & sei end=================================;; 
 508               	
 509               	
 510               	
 511               	
 512               	
 513               	;;=================================restore r1~r31 starting==================================;; 
 514               	;used registers          : R1~R31                                                              
 515               	;arg registers           : None                                                                
 516               	;return registers        : None                                                                
 517               	;unsafe access registers : None                                                                
 518               	.macro  KER_RESTORE_R1_R31                                ;total 8.38uS @8MHz     ( 62 clocks) 
 519               			POP   R31                                         ;restore R31            (  2 clocks) 
 520               			POP   R30                                         ;restore R30            (  2 clocks) 
 521               			POP   R29                                         ;restore R29            (  2 clocks) 
 522               			POP   R28                                         ;restore R28            (  2 clocks) 
 523               			POP   R27                                         ;restore R27            (  2 clocks) 
 524               			POP   R26                                         ;restore R26            (  2 clocks) 
 525               			POP   R25                                         ;restore R25            (  2 clocks) 
 526               			POP   R24                                         ;restore R24            (  2 clocks) 
 527               			POP   R23                                         ;restore R23            (  2 clocks) 
 528               			POP   R22                                         ;restore R22            (  2 clocks) 
 529               			POP   R21                                         ;restore R21            (  2 clocks) 
 530               			POP   R20                                         ;restore R20            (  2 clocks) 
 531               			POP   R19                                         ;restore R19            (  2 clocks) 
 532               			POP   R18                                         ;restore R18            (  2 clocks) 
 533               			POP   R17                                         ;restore R17            (  2 clocks) 
 534               			POP   R16                                         ;restore R16            (  2 clocks) 
 535               			POP   R15                                         ;restore R15            (  2 clocks) 
 536               			POP   R14                                         ;restore R14            (  2 clocks) 
 537               			POP   R13                                         ;restore R13            (  2 clocks) 
 538               			POP   R12                                         ;restore R12            (  2 clocks) 
 539               			POP   R11                                         ;restore R11            (  2 clocks) 
 540               			POP   R10                                         ;restore R10            (  2 clocks) 
 541               			POP   R9                                          ;restore R9             (  2 clocks) 
 542               			POP   R8                                          ;restore R8             (  2 clocks) 
 543               			POP   R7                                          ;restore R7             (  2 clocks) 
 544               			POP   R6                                          ;restore R6             (  2 clocks) 
 545               			POP   R5                                          ;restore R5             (  2 clocks) 
 546               			POP   R4                                          ;restore R4             (  2 clocks) 
 547               			POP   R3                                          ;restore R3             (  2 clocks) 
 548               			POP   R2                                          ;restore R2             (  2 clocks) 
 549               			POP   R1                                          ;restore R1             (  2 clocks) 
 550               	.endm                                                                                          
 551               	;;====================================restore r1~r31 end====================================;; 
 552               	
 553               	
 554               	
 555               	
 556               	
 557               	;;=============================context restore handler starting=============================;; 
 558               	;used registers          : R0~R31                                                              
 559               	;arg registers           : None                                                                
 560               	;return registers        : None                                                                
 561               	;unsafe access registers : None                                                                
 562               	.macro  KER_CONTEXT_RESTORE_HANDLER                       ;total 8.38uS @8MHz     ( 67 clocks) 
 563               	        KER_RESTORE_R1_R31                                ;restore r1~r31         ( 62 clocks) 
 564               			KER_RESTORE_R0_SREG                               ;restore r0, sreg       (  5 clocks) 
 565               	.endm                                                                                          
 566               	;;===============================context restore handler end================================;; 
 567               	
 568               	
 569               	
 570               	
 571               	
 572               	;;=============================context restore thread starting==============================;; 
 573               	;used registers          : R0~R31                                                              
 574               	;arg registers           : None                                                                
 575               	;return registers        : None                                                                
 576               	;unsafe access registers : None                                                                
 577               	.macro  KER_CONTEXT_RESTORE_THREAD                        ;total 8.75uS @8MHz     ( 68 clocks) 
 578               	        KER_RESTORE_R1_R31                                ;restore r1~r31         ( 62 clocks) 
 579               			KER_RESTORE_R0_SREG_SEI                           ;restore r0, sreg       (  6 clocks) 
 580               	.endm                                                                                          
 581               	;;================================context restore thread end================================;; 
 582               	
 583               	
 584               	
 585               	
 586               	
 587               	;;==============================fetch current task id starting==============================;; 
 588               	;used registers          : R20                                                                 
 589               	;arg registers           : None                                                                
 590               	;return registers        : R20 (Current task id)                                               
 591               	;unsafe access registers : R20                                                                 
 592               	.macro  KER_FETCH_CURR_TID                                ;total 0.25uS @8MHz     (  2 clocks) 
 593               	        LDS   R20                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 594               	.endm                                                                                          
 595               	;;================================fetch current task id end=================================;; 
 596               	
 597               	
 598               	
 599               	
 600               	
 601               	;;==================================fetch ntask starting====================================;; 
 602               	;used registers          : R21                                                                 
 603               	;arg registers           : None                                                                
 604               	;return registers        : R21 (ntask)                                                         
 605               	;unsafe access registers : R21                                                                 
 606               	.macro  KER_FETCH_NTASK                                   ;total 0.25uS @8MHz     (  2 clocks) 
 607               	        LDS   R21                , KerBase+OFB_NTSK       ;fetch task_id          (  2 clocks) 
 608               	.endm                                                                                          
 609               	;;====================================fetch ntask end=======================================;; 
 610               	
 611               	
 612               	
 613               	
 614               	
 615               	;;=========================calculate offset addr in words starting==========================;; 
 616               	;used registers          : R18, R30(ZL), R31(ZH)                                               
 617               	;arg registers           : R30(ZL), R31(ZH)                                                    
 618               	;return registers        : R30(ZL), R31(ZH)                                                    
 619               	;unsafe access registers : R18, R30(ZL), R31(ZH)                                               
 620               	.macro  KER_CALC_ADDR_OFF_WORD                            ;total 0.75uS @8MHz     (  6 clocks) 
 621               	        LDS   R18                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 622               			LSL   R18                                         ;left shift to multiply (  1 clock ) 
 623               			ADD   ZL                 , R18                    ;add offset to array    (  1 clock ) 
 624               			LDI   R18                , 0x00                   ;clear for carry prop   (  1 clock ) 
 625               			ADC   ZH                 , R18                    ;add carry if any       (  1 clock ) 
 626               	.endm                                                                                          
 627               	;;=============================calculate offset addr in words end===========================;; 
 628               	
 629               	
 630               	
 631               	
 632               	
 633               	;;=========================calculate offset addr in bytes starting==========================;; 
 634               	;used registers          : R18, R30(ZL), R31(ZH)                                               
 635               	;arg registers           : R30(ZL), R31(ZH)                                                    
 636               	;return registers        : R30(ZL), R31(ZH)                                                    
 637               	;unsafe access registers : R18, R30(ZL), R31(ZH)                                               
 638               	.macro  KER_CALC_ADDR_OFF_BYTES                           ;total 0.63uS @8MHz     (  5 clocks) 
 639               	        LDS   R18                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 640               			ADD   ZL                 , R18                    ;add offset to array    (  1 clock ) 
 641               			LDI   R18                , 0x00                   ;clear for carry prop   (  1 clock ) 
 642               			ADC   ZH                 , R18                    ;add carry if any       (  1 clock ) 
 643               	.endm                                                                                          
 644               	;;=============================calculate offset addr in bytes end===========================;; 
 645               	
 646               	
 647               	
 648               	
 649               	
 650               	;;===============================save current task sp starting==============================;; 
 651               	;used registers          : R18, R19, R30(ZL), R31(ZH)                                          
 652               	;arg registers           : None                                                                
 653               	;return registers        : None                                                                
 654               	;unsafe access registers : R18, R19, R30(ZL), R31(ZH)                                          
 655               	.macro  KER_SAVE_CURR_TASK_SP                             ;total 1.75uS @8MHz     ( 14 clocks) 
 656               			LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 657               			LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 658               			KER_CALC_ADDR_OFF_WORD                            ;calc offset            (  6 clocks) 
 659               			IN    R18                , IOSPL                  ;fetch SPL0             (  1 clock ) 
 660               			IN    R19                , IOSPH                  ;fetch SPH0             (  1 clock ) 
 661               			STD   Z+0                , R18                    ;store SPL at ZP+0      (  2 clocks) 
 662               			STD   Z+1                , R19                    ;store SPH at ZP+1      (  2 clocks) 
 663               	.endm                                                                                          
 664               	;;================================save current task sp end==================================;; 
 665               	
 666               	
 667               	
 668               	
 669               	
 670               	;;==============================load next task id starting==================================;; 
 671               	;used registers          : R18, R19                                                            
 672               	;arg registers           : None                                                                
 673               	;return registers        : None                                                                
 674               	;unsafe access registers : R18, R19                                                            
 675               	.macro  KER_LOAD_NEXT_TASK_ID                             ;total 1.63uS @8MHz     ( 13 clocks) 
 676               			LDS   R18                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 677               			INC   R18                                         ;increment task_id      (  1 clock ) 
 678               			LDS   R19                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 679               		_MOD_CONT\@:                                          ;use local label                     
 680               		    CP    R18                , R19                    ;compare tid with ntask (  1 clock ) 
 681               			BRLO  _MOD_DONE\@                                 ;if tid<ntask, done     (  2 clocks) 
 682               			SUB   R18                , R19                    ;subtract ntask from tid(  1 clock ) 
 683               			RJMP  _MOD_CONT\@                                 ;go to loop start       (  2 clocks) 
 684               		_MOD_DONE\@:                                          ;use local label                     
 685               		    STS   KerBase+OFB_TID    , R18                    ;save task_id%ntask     (  2 clocks) 
 686               	.endm                                                                                          
 687               	;;=================================load next task id end====================================;; 
 688               	
 689               	
 690               	
 691               	
 692               	
 693               	;;==============================increment tick counter starting=============================;; 
 694               	;used registers          : R18, R19                                                            
 695               	;arg registers           : None                                                                
 696               	;return registers        : None                                                                
 697               	;unsafe access registers : R18, R19                                                            
 698               	.macro  KER_TICK_INCREMENT                                ;total 3.25uS @8MHz     ( 26 clocks) 
 699               			LDS   R18                , KerBase+OFB_TICK0      ;load Byte0             (  2 clocks) 
 700               			INC   R18                                         ;add 1 with Byte0       (  1 clock ) 
 701               			STS   KerBase+OFB_TICK0  , R18                    ;set Byte0              (  2 clocks) 
 702               			LDI   R19                , 0x00                   ;clear reg              (  1 clock ) 
 703               			LDS   R18                , KerBase+OFB_TICK1      ;load Byte1             (  2 clocks) 
 704               			ADC   R18                , R19                    ;add carry with Byte1   (  1 clock ) 
 705               			STS   KerBase+OFB_TICK1  , R18                    ;set Byte1              (  2 clocks) 
 706               			LDS   R18                , KerBase+OFB_TICK2      ;load Byte2             (  2 clocks) 
 707               			ADC   R18                , R19                    ;add carry with Byte2   (  1 clock ) 
 708               			STS   KerBase+OFB_TICK2  , R18                    ;set Byte2              (  2 clocks) 
 709               			LDS   R18                , KerBase+OFB_TICK3      ;load Byte3             (  2 clocks) 
 710               			ADC   R18                , R19                    ;add carry with Byte3   (  1 clock ) 
 711               			STS   KerBase+OFB_TICK3  , R18                    ;set Byte3              (  2 clocks) 
 712               			LDS   R18                , KerBase+OFB_TICK4      ;load Byte4             (  2 clocks) 
 713               			ADC   R18                , R19                    ;add carry with Byte4   (  1 clock ) 
 714               			STS   KerBase+OFB_TICK4  , R18                    ;set Byte4              (  2 clocks) 
 715               	.endm                                                                                          
 716               	;;=================================increment tick counter end===============================;; 
 717               	
 718               	
 719               	
 720               	
 721               	
 722               	;;==============================load task id & sp starting==================================;; 
 723               	;used registers          : R18, R19, R30(ZL), R31(ZH)                                          
 724               	;arg registers           : None                                                                
 725               	;return registers        : None                                                                
 726               	;unsafe access registers : R18, R19, R30(ZL), R31(ZH)                                          
 727               	.macro  KER_LOAD_TASK_ID_AND_SP                           ;total 1.75uS @8MHz     ( 14 clocks) 
 728               			LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 729               			LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 730               			KER_CALC_ADDR_OFF_WORD                            ;calc offset            (  6 clocks) 
 731               			LDD   R18                , Z+0                    ;load SPL at ZP         (  2 clocks) 
 732               			LDD   R19                , Z+1                    ;load SPH at ZP         (  2 clocks) 
 733               			OUT   IOSPL              , R18                    ;load SPL0              (  1 clock ) 
 734               			OUT   IOSPH              , R19                    ;load SPH0              (  1 clock ) 
 735               	.endm                                                                                          
 736               	;;=================================load task id & sp end====================================;; 
 737               	
 738               	
 739               	
 740               	
 741               	
 742               	;;================================push msp & zp starting====================================;; 
 743               	;used registers          : R18, R19, R26(XL), R27(XH), R30(ZL), R31(ZH)                        
 744               	;arg registers           : None                                                                
 745               	;return registers        : None                                                                
 746               	;unsafe access registers : R18, R19, R26(XL), R27(XH), R30(ZL), R31(ZH)                        
 747               	.macro  KER_PUSH_MSP_ZP                                   ;total 2.25uS @8MHz     ( 18 clocks) 
 748               	        LDS   XL                 , KerSSZ+OFM_MSPI+0      ;load val low           (  2 clocks) 
 749               			LDS   XH                 , KerSSZ+OFM_MSPI+1      ;load val high          (  2 clocks) 
 750               			IN    R18                , IOSPL                  ;copy                   (  1 clock ) 
 751               			IN    R19                , IOSPH                  ;copy                   (  1 clock ) 
 752               			ST    X+                 , R18                    ;store main SPL         (  2 clocks) 
 753               	        ST    X+                 , R19                    ;store main SPH         (  2 clocks) 
 754               			ST    X+                 , ZL                     ;store main ZL          (  2 clocks) 
 755               			ST    X+                 , ZH                     ;store main ZH          (  2 clocks) 
 756               			STS   KerSSZ+OFM_MSPI+0  , XL                     ;store new index        (  2 clocks) 
 757               			STS   KerSSZ+OFM_MSPI+1  , XH                     ;store new index        (  2 clocks) 
 758               	.endm                                                                                          
 759               	;;===================================push msp & zp end======================================;; 
 760               	
 761               	
 762               	
 763               	
 764               	
 765               	;;=================================pop msp & zp starting====================================;; 
 766               	;used registers          : R18, R19, R26(XL), R27(XH), R30(ZL), R31(ZH)                        
 767               	;arg registers           : None                                                                
 768               	;return registers        : None                                                                
 769               	;unsafe access registers : R18, R19, R26(XL), R27(XH), R30(ZL), R31(ZH)                        
 770               	.macro  KER_POP_MSP_ZP                                    ;total 2.25uS @8MHz     ( 18 clocks) 
 771               			LDS   XL                 , KerSSZ+OFM_MSPI+0      ;load val low           (  2 clocks) 
 772               			LDS   XH                 , KerSSZ+OFM_MSPI+1      ;load val high          (  2 clocks) 
 773               			LD    ZH                 , -X                     ;load ZH                (  2 clocks) 
 774               			LD    ZL                 , -X                     ;load ZL                (  2 clocks) 
 775               			LD    R19                , -X                     ;load main SPH          (  2 clocks) 
 776               			LD    R18                , -X                     ;load main SPL          (  2 clocks) 
 777               			OUT   IOSPL              , R18                    ;set SPL                (  1 clock ) 
 778               			OUT   IOSPH              , R19                    ;set SPH                (  1 clock ) 
 779               			STS   KerSSZ+OFM_MSPI+0  , XL                     ;store new index        (  2 clocks) 
 780               			STS   KerSSZ+OFM_MSPI+1  , XH                     ;store new index        (  2 clocks) 
 781               	.endm                                                                                          
 782               	;;====================================pop msp & zp end======================================;; 
 783               	
 784               	
 785               	
 786               	
 787               	
 788               	;;============================sleep timeout management starting=============================;; 
 789               	;used registers          : R18, R19, R20, R24, R30(ZL), R31(ZH)                                
 790               	;arg registers           : R24 (SCH_MODE_HANDLER/SCH_MODE_THREAD)                              
 791               	;return registers        : R24 (READY/BLOCKED/EXECUTING/SUSPENDED/CONS_LAT)                    
 792               	;unsafe access registers : R18, R19, R20, R24, R30(ZL), R31(ZH)                                
 793               	.macro  KER_SLP_TIME_MGNT                                 ;total 6.50uS @8MHz     ( 52 clocks) 
 794               			LDI   ZL                 , lo8(KerSchSlp)         ;fetch base pos low     (  1 clock ) 
 795               			LDI   ZH                 , hi8(KerSchSlp)         ;fetch base pos high    (  1 clock ) 
 796               			KER_CALC_ADDR_OFF_WORD                            ;calc offset            (  6 clocks) 
 797               			;fetch current value from ram, if val=0, skip decrement                                
 798               	        LDD   R18                , Z+0                    ;load val low byte      (  2 clocks) 
 799               			LDD   R19                , Z+1                    ;load val high byte     (  2 clocks) 
 800               			MOV   R20                , R18                    ;copy                   (  1 clock ) 
 801               			OR    R20                , R19                    ;or high & low bytes    (  1 clock ) 
 802               			BREQ  _VAL_NULL\@                                 ;val=0, save sts        (  2 clocks) 
 803               	        CPI   R24                , SCH_MODE_THREAD        ;if arg=1, thread mode  (  1 clock ) 
 804               			BREQ  _VAL_NOT_NULL\@                             ;no need to dec val     (  2 clocks) 
 805               			;R19:R18 contains 16 bit sleep timer val, decrease val by 1                            
 806               			LDI   R20                , 0x01                   ;set val 1              (  1 clock ) 
 807               	        SUB   R18                , R20                    ;subtract low byte      (  1 clock ) 
 808               			LDI   R20                , 0x00                   ;clear                  (  1 clock ) 
 809               			SBC   R19                , R20                    ;subtract carry if any  (  1 clock ) 
 810               			;store new value                                                                       
 811               			STD   Z+0                , R18                    ;store low byte         (  2 clocks) 
 812               			STD   Z+1                , R19                    ;store low byte         (  2 clocks) 
 813               			MOV   R20                , R18                    ;copy                   (  1 clock ) 
 814               			OR    R20                , R19                    ;or high & low bytes    (  1 clock ) 
 815               			BRNE  _VAL_NOT_NULL\@                             ;val!=0                 (  2 clocks) 
 816               		_VAL_NULL\@:                                                                               
 817               		    ;find ram address for status                                                           
 818               		    LDI   ZL                 , lo8(KerSchSts)         ;fetch base pos low     (  1 clock ) 
 819               			LDI   ZH                 , hi8(KerSchSts)         ;fetch base pos high    (  1 clock ) 
 820               	        KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 821               			;update flag as task is ready                                                          
 822               			LDI   R24                , TASK_READY             ;set TASK_READY         (  1 clock ) 
 823               			ST    Z                  , R24                    ;update flag            (  2 clocks) 
 824               			RJMP  _EXIT_SLP_TIME\@                            ;jump to exit           (  2 clocks) 
 825               	    _VAL_NOT_NULL\@:                                                                           
 826               		    LDI   ZL                 , lo8(KerSchSts)         ;fetch base pos low     (  1 clock ) 
 827               			LDI   ZH                 , hi8(KerSchSts)         ;fetch base pos high    (  1 clock ) 
 828               	        KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 829               		    LD    R24                , Z                      ;return sts             (  2 clocks) 
 830               	    _EXIT_SLP_TIME\@:                                                                          
 831               	.endm                                                                                          
 832               	;;============================sleep timeout management end==================================;; 
 833               	
 834               	
 835               	
 836               	
 837               	
 838               	;;============================current task priority starting================================;; 
 839               	;used registers          : R18, R24, R30(ZL), R31(ZH)                                          
 840               	;arg registers           : None                                                                
 841               	;return registers        : R24 (Current task priority)                                         
 842               	;unsafe access registers : R18, R24, R30(ZL), R31(ZH)                                          
 843               	.macro  KER_CURR_TASK_PRIO                                ;total 1.13uS @8MHz     (  9 clocks) 
 844               			LDI    ZL                , lo8(KerSchPr)          ;load low addr          (  1 clock ) 
 845               			LDI    ZH                , hi8(KerSchPr)          ;load high addr         (  1 clock ) 
 846               			LDI    R18               , 0x00                   ;clear reg, for carry   (  1 clock ) 
 847               			LDS    R24               , KerBase+OFB_TID        ;load task id           (  2 clocks) 
 848               	        ADD    ZL                , R24                    ;add low addr           (  1 clock ) 
 849               			ADC    ZH                , R18                    ;add carry if any       (  1 clock ) 
 850               			LD     R24               , Z                      ;load current tid prio  (  2 clocks) 
 851               	.endm                                                                                          
 852               	;;==============================current task priority end===================================;; 
 853               	
 854               	
 855               	
 856               	
 857               	
 858               	;;================================run scheduler starting====================================;; 
 859               	;used registers          : R18, R19, R20, R21, R24, R25, R30(ZL), R31(ZH)                      
 860               	;arg registers           : R24 (SCH_MODE_HANDLER/SCH_MODE_THREAD)                              
 861               	;return registers        : None                                                                
 862               	;unsafe access registers : R18, R19, R20, R21, R24, R25, R30(ZL), R31(ZH)                      
 863               	.macro  KER_RUN_SCHEDULER                                 ;total 13.25uS @8MHz    (106 clocks) 
 864               			LDI    R18               , 0xFF                   ;set 0xff               (  1 clock ) 
 865               			STS    KerBase+OFB_LPR   , R18                    ;lowest priority        (  2 clocks) 
 866               			LDI    R18               , 0x00                   ;start from 0           (  1 clock ) 
 867               			STS    KerBase+OFB_PTID  , R18                    ;highest prio tid=0     (  2 clocks) 
 868               			MOV    R21               , R24                    ;copy sch mode          (  1 clock ) 
 869               		_KER_SCH_LOOP\@:                                                                           
 870               		    ;store task id to run from KER_DEC_SLP_TIMEOUT                                         
 871               			STS    KerBase+OFB_TID   , R18                    ;store task id          (  2 clocks) 
 872               	        ;sleep time decrement, update ready/blocked status                                     
 873               			MOV    R24               , R21                    ;restore sch mode       (  1 clock ) 
 874               			KER_SLP_TIME_MGNT                                 ;update return vars     ( 52 clocks) 
 875               	        CPI    R24               , TASK_READY             ;compare                (  1 clock ) 
 876               	        BREQ   _KER_CALC_PRIO\@                           ;calc priority if ready (  2 clocks) 
 877               			CPI    R24               , TASK_CONS_LAT          ;compare                (  1 clock ) 
 878               	        BREQ   _KER_CALC_PRIO\@                           ;calc priority if c_lat (  2 clocks) 
 879               	        RJMP   _KER_SCH_NEXT\@                            ;skip if !ready|c_lat   (  2 clocks) 
 880               		_KER_CALC_PRIO\@:                                                                          
 881               			KER_CURR_TASK_PRIO                                ;get task prio ->R24    (  9 clocks) 
 882               	        ;compare current task priority with lowest priority found so far                       
 883               			LDS    R18               , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
 884               			CP     R24               , R18                    ;compare                (  1 clock ) 
 885               			BRSH   _KER_SCH_NEXT\@                            ;if prio>=lowest prio   (  2 clocks) 
 886               			;found new lowest priority                                                             
 887               			STS    KerBase+OFB_LPR   , R24                    ;save lowest priority   (  2 clocks) 
 888               			LDS    R18               , KerBase+OFB_TID        ;load task id           (  2 clocks) 
 889               			STS    KerBase+OFB_PTID  , R18                    ;save lowest priority   (  2 clocks) 
 890               	                                                                                               
 891               	    _KER_SCH_NEXT\@:                                                                           
 892               		    LDS    R18               , KerBase+OFB_TID        ;load task id           (  2 clocks) 
 893               			INC    R18                                        ;increment by 1         (  1 clock ) 
 894               			LDS    R19               , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 895               			CP     R18               , R19                    ;compare with ntask     (  2 clocks) 
 896               			BRSH   _KER_SCH_EXIT\@                            ;if task_id>=ntask      (  2 clocks) 
 897               			RJMP   _KER_SCH_LOOP\@                            ;jump to entry          (  2 clocks) 
 898               		_KER_SCH_EXIT\@:                                                                           
 899               	        LDS    R18               , KerBase+OFB_PTID       ;load high prio task id (  2 clocks) 
 900               			STS    KerBase+OFB_TID   , R18                    ;for test only          (  2 clocks) 
 901               	.endm                                                                                          
 902               	;;===================================run scheduler end======================================;; 
 903               	
 904               	
 905               	
 906               	
 907               	
 908               	;;================================calc cpu usage starting===================================;; 
 909               	;used registers          : R18, R19                                                            
 910               	;arg registers           : None                                                                
 911               	;return registers        : None                                                                
 912               	;unsafe access registers : R18, R19                                                            
 913               	.macro  KER_CPU_USAGE                                     ;total 3.25uS @8MHz     ( 26 clocks) 
 914               	        ;check if current target task is idle task or not                                      
 915               	        LDS    R18               , KerBase+OFB_TID        ;load target task_id    (  2 clocks) 
 916               			TST    R18                                        ;check if idle task     (  1 clock ) 
 917               			BREQ   _KER_USG_TICK\@                            ;task_id=idle, skip     (  2 clocks) 
 918               			LDS    R18               , KerBase+OFB_UATC       ;load active tick cnt   (  2 clocks) 
 919               			INC    R18                                        ;inc active tick cnt    (  1 clock ) 
 920               			STS    KerBase+OFB_UATC  , R18                    ;store new val          (  2 clocks) 
 921               		_KER_USG_TICK\@:                                                                           
 922               			LDS    R18               , KerBase+OFB_UTC        ;load usage tick cnt    (  2 clocks) 
 923               			INC    R18                                        ;increment tick cnt     (  1 clock ) 
 924               			CPI    R18               , 100                    ;compare with 100       (  1 clock ) 
 925               			BRLO   _KER_USG_UTC_SV\@                          ;val<100, save new val  (  2 clocks) 
 926               			LDI    R18               , 0x00                   ;val>=100, roll back    (  1 clock ) 
 927               			LDS    R19               , KerBase+OFB_UATC       ;load active tick cnt   (  2 clocks) 
 928               			STS    KerBase+OFB_USAGE , R19                    ;store usage            (  2 clocks) 
 929               			LDI    R19               , 0x00                   ;clear reg              (  1 clock ) 
 930               			STS    KerBase+OFB_UATC  , R19                    ;clear active tick cnt  (  2 clocks) 
 931               		_KER_USG_UTC_SV\@:                                                                         
 932               			STS    KerBase+OFB_UTC   , R18                    ;store new val          (  2 clocks) 
 933               	.endm                                                                                          
 934               	;;===================================calc cpu usage end=====================================;; 
 935               	
 936               	
 937               	
 938               	
 939               	
 940               	;;===========================kernel disable analog domain starting==========================;; 
 941               	;used registers          : None                                                                
 942               	;arg registers           : None                                                                
 943               	;return registers        : None                                                                
 944               	;unsafe access registers : None                                                                
 945               	.macro KER_DISABLE_ANALOG_DOMAIN                          ;total 0.75uS @8MHz     ( 10 clocks) 
 946               	    #ifdef KER_IDLE_AS_SLEEP                                                                   
 947               			LDS   R18                , SRADCSRA               ;load ADCSRA            (  2 clocks) 
 948               			ANDI  R18                , 0xEF                   ;clear ADEN             (  1 clock ) 
 949               			STS   SRADCSRA           , R18                    ;set val                (  2 clocks) 
 950               			LDS   R18                , SRACSR                 ;load ACSR              (  2 clocks) 
 951               			ORI   R18                , 0x80                   ;set ACD                (  1 clock ) 
 952               			STS   SRACSR             , R18                    ;set val                (  2 clocks) 
 953               		#endif                                                                                     
 954               	.endm                                                                                          
 955               	;;=============================kernel disable analog domain end=============================;; 
 956               	
 957               	
 958               	
 959               	
 960               	
 961               	;;===============================kernel sleep config starting===============================;; 
 962               	;used registers          : R18                                                                 
 963               	;arg registers           : None                                                                
 964               	;return registers        : None                                                                
 965               	;unsafe access registers : R18                                                                 
 966               	.macro KER_SLEEP_INIT                                     ;total 0.63uS @8MHz     (  5 clocks) 
 967               	    #ifdef KER_IDLE_AS_SLEEP                                                                   
 968               	        #ifdef KER_SLEEP_MODE_IDLE                                                             
 969               			LDI   R18                , 0x00                   ;set SM[2:0] val        (  1 clock ) 
 970               			#endif                                                                                 
 971               	                                                                                               
 972               			#ifdef KER_SLEEP_MODE_ADC_NR                                                           
 973               			LDI   R18                , 0x02                   ;set SM[2:0] val        (  1 clock ) 
 974               			#endif
 975               	                                                                                               
 976               			#ifdef KER_SLEEP_MODE_POWER_DOWN                                                       
 977               			LDI   R18                , 0x04                   ;set SM[2:0] val        (  1 clock ) 
 978               	        #endif                                                                                 
 979               			                                                                                       
 980               			#ifdef KER_SLEEP_MODE_POWER_SAVE                                                       
 981               			LDI   R18                , 0x06                   ;set SM[2:0] val        (  1 clock ) 
 982               			#endif                                                                                 
 983               		                                                                                           
 984               			STS   SRSMCR             , R18                    ;set sleep control val  (  2 clocks) 
 985               			STS   KerBase+OFB_SLCFG  , R18                    ;save sleep control val (  2 clocks) 
 986               		#endif                                                                                     
 987               	.endm                                                                                          
 988               	;;================================kernel sleep config end===================================;; 
 989               	
 990               	
 991               	
 992               	
 993               	
 994               	;;==============================kernel enter sleep mode starting============================;; 
 995               	;used registers          : None                                                                
 996               	;arg registers           : None                                                                
 997               	;return registers        : None                                                                
 998               	;unsafe access registers : None                                                                
 999               	.macro KER_ENTER_SLEEP                                    ;total 0.75uS @8MHz     (  6 clocks) 
 1000               	    #ifdef KER_IDLE_AS_SLEEP                                                                   
 1001               			LDS   R18                , SRSMCR                 ;load SMCR              (  2 clocks) 
 1002               			ORI   R18                , 0x01                   ;set SE bit             (  1 clock ) 
 1003               			STS   SRSMCR             , R18                    ;set val                (  2 clocks) 
 1004               			SLEEP                                             ;sleep cpu              (  1 clock ) 
 1005               		#endif                                                                                     
 1006               	.endm                                                                                          
 1007               	;;================================kernel enter sleep mode end===============================;; 
 1008               	
 1009               	
 1010               	
 1011               	
 1012               	
 1013               	;;===============================kernel exit sleep mode starting============================;; 
 1014               	;used registers          : None                                                                
 1015               	;arg registers           : None                                                                
 1016               	;return registers        : None                                                                
 1017               	;unsafe access registers : None                                                                
 1018               	.macro KER_EXIT_SLEEP                                     ;total 0.63uS @8MHz     (  5 clocks) 
 1019               	    #ifdef KER_IDLE_AS_SLEEP                                                                   
 1020               	        LDS   R18                , SRSMCR                 ;load SMCR              (  2 clocks) 
 1021               			ANDI  R18                , 0xFE                   ;clear SE bit           (  1 clock ) 
 1022               			STS   SRSMCR             , R18                    ;set val                (  2 clocks) 
 1023               		#endif                                                                                     
 1024               	.endm                                                                                          
 1025               	;;=================================kernel exit sleep mode end===============================;; 
 1026               	
 1027               	
 1028               	
 1029               	
 1030               	
 1031               	;;=================================ISR execution starting===================================;; 
 1032               	#ifdef  KER_WDT_AS_TICK_SRC                                                                    
 1033               	.global  __vector_6                                                                            
 1034               	    __vector_6:                                           ;total 40.00uS @8MHz    (344 clocks) 
 1035               		    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 1036               			KER_EXIT_SLEEP                                    ;exit sleep if enabled  (  5 clocks) 
 1037               	        KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 1038               			KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 1039               			KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 1040               			KER_TICK_INCREMENT                                ;increment tick counter ( 26 clocks) 
 1041               			LDI    R24               , SCH_MODE_HANDLER       ;set sch mode           (  1 clock ) 
 1042               			KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
 1043               			KER_CPU_USAGE                                     ;calc cpu usage         ( 26 clocks) 
 1044               			KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 1045               			KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
 1046               		    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 1047               			LDS   R18                , SRWDTCSR               ;copy WDTCSR            (  2 clocks) 
 1048               			ORI   R18                , 0x40                   ;set WDIE               (  1 clock ) 
 1049               			STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
 1050               			RETI                                              ;return from interrupt  (  4 clocks) 
 1051               	#endif                                                                                         
 1052               	
 1053               	#ifdef  KER_TOSC_AS_TICK_SRC                                                                   
 1054               	.global  __vector_9                                                                            
 1055               	    __vector_9:                                           ;total 40.00uS @8MHz    (344 clocks) 
1056:kernel.S      **** 	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
1057:kernel.S      **** 		KER_EXIT_SLEEP                                    ;exit sleep if enabled  (  5 clocks) 
1058:kernel.S      ****         KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
1059:kernel.S      **** 		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
1060:kernel.S      **** 		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
1061:kernel.S      **** 		KER_TICK_INCREMENT                                ;increment tick counter ( 26 clocks) 
1062:kernel.S      **** 		LDI    R24               , SCH_MODE_HANDLER       ;set sch mode           (  1 clock ) 
1063:kernel.S      **** 		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
1064:kernel.S      **** 		KER_CPU_USAGE                                     ;calc cpu usage         ( 26 clocks) 
1065:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
1066:kernel.S      **** 		KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
1067:kernel.S      **** 	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
1068:kernel.S      **** 		RETI                                              ;return from interrupt  (  4 clocks) 
 1069               	#endif                                                                                         
 1070               	
 1071               	#ifdef  KER_TIMER0_AS_TICK_SRC                                                                 
 1072               	.global  __vector_16                                                                           
 1073               	    __vector_16:                                          ;total 40.00uS @8MHz    (339 clocks) 
 1074               		    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 1075               			KER_EXIT_SLEEP                                    ;exit sleep if enabled  (  5 clocks) 
 1076               	        KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 1077               			KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 1078               			KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 1079               			KER_TICK_INCREMENT                                ;increment tick counter ( 26 clocks) 
 1080               			LDI    R24               , SCH_MODE_HANDLER       ;set sch mode           (  1 clock ) 
 1081               			KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
 1082               			KER_CPU_USAGE                                     ;calc cpu usage         ( 26 clocks) 
 1083               			KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 1084               			KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
 1085               		    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 1086               			RETI                                              ;return from interrupt  (  4 clocks) 
 1087               	#endif                                                                                         
 1088               	;;====================================ISR execution end=====================================;; 
 1089               	
 1090               	
 1091               	
 1092               	
 1093               	
 1094               	;;================================SysTick reg init starting=================================;; 
 1095               	;used registers          : R18, R19, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
 1096               	;arg registers           : R24(Prescaler), R22(ReloadVal)                                      
 1097               	;return registers        : None                                                                
 1098               	;unsafe access registers : R18, R19, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
 1099               	Kernel_SysTick_Reg_Init:                                  ;total 11.50uS @8MHz    ( 92 clocks) 
1100:kernel.S      ****         CLI                                               ;disable global int     (  1 clock ) 
1101:kernel.S      **** 		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
1102:kernel.S      ****         KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 1103               			;clear reg                                                                             
1104:kernel.S      **** 		LDI   R18                , 0x00                   ;set 0x00 to R18        (  1 clock ) 
 1105               			;clear tick counter                                                                    
1106:kernel.S      **** 		STS   KerBase+OFB_TICK0  , R18                    ;clear  KerBase[0]      (  2 clocks) 
1107:kernel.S      **** 		STS   KerBase+OFB_TICK1  , R18                    ;clear  KerBase[1]      (  2 clocks) 
1108:kernel.S      **** 		STS   KerBase+OFB_TICK2  , R18                    ;clear  KerBase[2]      (  2 clocks) 
1109:kernel.S      **** 		STS   KerBase+OFB_TICK3  , R18                    ;clear  KerBase[3]      (  2 clocks) 
1110:kernel.S      **** 		STS   KerBase+OFB_TICK4  , R18                    ;clear  KerBase[4]      (  2 clocks) 
 1111               			;clear system registers                                                                
1112:kernel.S      **** 		STS   KerBase+OFB_PRS    , R18                    ;clear  KerBase[5]      (  2 clocks) 
1113:kernel.S      **** 		STS   KerBase+OFB_RLD    , R18                    ;clear  KerBase[6]      (  2 clocks) 
1114:kernel.S      **** 		STS   KerBase+OFB_TID    , R18                    ;clear  KerBase[7]      (  2 clocks) 
1115:kernel.S      **** 		STS   KerBase+OFB_NTSK   , R18                    ;clear  KerBase[8]      (  2 clocks) 
1116:kernel.S      **** 		STS   KerBase+OFB_LPR    , R18                    ;clear  KerBase[9]      (  2 clocks) 
1117:kernel.S      ****         STS   KerBase+OFB_PTID   , R18                    ;clear  KerBase[10]     (  2 clocks) 
1118:kernel.S      **** 		STS   KerBase+OFB_UTC    , R18                    ;clear  KerBase[11]     (  2 clocks) 
1119:kernel.S      **** 		STS   KerBase+OFB_UATC   , R18                    ;clear  KerBase[12]     (  2 clocks) 
1120:kernel.S      **** 		STS   KerBase+OFB_USAGE  , R18                    ;clear  KerBase[13]     (  2 clocks) 
 1121               			;clear all timer registers                                                             
 1122               			#ifdef KER_TIMER0_AS_TICK_SRC                                                          
1123:kernel.S      **** 		STS   SRTCCR0A           , R18                    ;clear TCCR0A           (  2 clocks) 
1124:kernel.S      **** 		STS   SRTCCR0B           , R18                    ;clear TCCR0B           (  2 clocks) 
1125:kernel.S      **** 		STS   SRTIMSK0           , R18                    ;clear TIMSK0           (  2 clocks) 
1126:kernel.S      **** 		STS   SRTIFR0            , R18                    ;clear TIFR0            (  2 clocks) 
1127:kernel.S      **** 		STS   SROCR0A            , R18                    ;clear OCR0A            (  2 clocks) 
1128:kernel.S      **** 		STS   SROCR0B            , R18                    ;clear OCR0B            (  2 clocks) 
1129:kernel.S      **** 		STS   SRTCNT0            , R18                    ;clear TCNT0            (  2 clocks) 
1130:kernel.S      **** 		#endif                                                                                 
1131:kernel.S      ****         #ifdef KER_WDT_AS_TICK_SRC                                                             
1132:kernel.S      **** 		WDR                                               ;reset wdt              (  1 clock ) 
1133:kernel.S      **** 		LDS   R18                , SRMCUSR                ;copy MCUSR             (  1 clock ) 
1134:kernel.S      **** 		ANDI  R18                , 0xFF & (0<<WDRF)       ;clear WDRF             (  1 clock ) 
1135:kernel.S      **** 		STS   SRMCUSR            , R18                    ;set val                (  1 clock ) 
1136:kernel.S      **** 		LDS   R18                , SRWDTCSR               ;copy WDTCSR            (  2 clocks) 
1137:kernel.S      **** 		ORI   R18                , 0x18                   ;set WDCE,WDE           (  1 clock ) 
1138:kernel.S      **** 		STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
1139:kernel.S      **** 		LDI   R18                , 0x00                   ;clear WDE              (  1 clock ) 
1140:kernel.S      **** 		STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
1141:kernel.S      **** 		#endif                                                                                 
1142:kernel.S      **** 		#ifdef KER_TOSC_AS_TICK_SRC                                                            
1143:kernel.S      ****         LDI   R18                , 0x00                   ;clear interrupt enbits (  1 clock ) 
1144:kernel.S      **** 		STS   SRTIMSK2           , R18                    ;set val to TIMSK2      (  2 clocks) 
1145:kernel.S      **** 		LDI   R18                , 0x00                   ;clear reg              (  1 clock ) 
1146:kernel.S      **** 		STS   SRTCCR2B           , R18                    ;set val to TCCR2B      (  2 clocks) 
1147:kernel.S      **** 		LDI   R18                , 0x00                   ;clear AS2 bit          (  1 clock ) 
1148:kernel.S      **** 		STS   SRASSR             , R18                    ;set val to ASSR        (  2 clocks) 
 1149               			#endif                                                                                 
 1150               			;save values for future use                                                            
1151:kernel.S      **** 		STS   KerBase+OFB_PRS    , R24                    ;KerBase[5] prescaler   (  2 clocks) 
1152:kernel.S      **** 		STS   KerBase+OFB_RLD    , R22                    ;KerBase[6] reload val  (  2 clocks) 
1153:kernel.S      ****         KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
1154:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1155               	;;===================================SysTick reg init end===================================;; 
 1156               	
 1157               	
 1158               	
 1159               	
 1160               	
 1161               	;;===============================kernel task create starting================================;; 
 1162               	;used registers          : R18, R19, R20, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)    
 1163               	;arg registers           : R25:R24(FuncPtr), R22(TaskPriority)                                 
 1164               	;return registers        : None                                                                
 1165               	;unsafe access registers : R18, R19, R20, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)    
 1166               	Kernel_Task_Create:                                       ;total 21.50uS @8MHz    (172 clocks) 
1167:kernel.S      ****         KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 1168               			;set priority to KerSchPr+task_id                                                      
1169:kernel.S      **** 		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
1170:kernel.S      **** 		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
1171:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
1172:kernel.S      **** 		ST    Z                  , R22                    ;save priority          (  2 clocks) 
 1173               			;set task status to KerSchSts+task_id                                                  
1174:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
1175:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
1176:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
1177:kernel.S      **** 		LDI   R18                , TASK_READY             ;set status as ready    (  1 clock ) 
1178:kernel.S      **** 		ST    Z                  , R18                    ;save status            (  2 clocks) 
 1179               			;stack pointer for current task (KerStack + KER_STK_SZ*(task_id+1) - 1) ->stack top    
1180:kernel.S      **** 		LDS   R18                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
1181:kernel.S      **** 		INC   R18                                         ;increment task_id      (  1 clock ) 
1182:kernel.S      **** 		LDI   R19                , KER_STK_SZ             ;load stack size        (  1 clock ) 
1183:kernel.S      **** 		MUL   R18                , R19                    ;multiply to get offset (  2 clocks) 
1184:kernel.S      **** 		MOV   ZL                 , R0                     ;load multiplied low    (  1 clocks) 
1185:kernel.S      **** 		MOV   ZH                 , R1                     ;load multiplied high   (  1 clocks) 
1186:kernel.S      **** 		SBIW  ZL                 , 0x01                   ;dec multiplied val-1   (  2 clocks) 
1187:kernel.S      **** 		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
1188:kernel.S      **** 		LDI   R18                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
1189:kernel.S      **** 		LDI   R19                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
1190:kernel.S      **** 		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
1191:kernel.S      **** 		ADC   ZH                 , R19                    ;add high bytes+carry   (  1 clock ) 
1192:kernel.S      **** 		OUT   IOSPL              , ZL                     ;load SPL               (  1 clock ) 
1193:kernel.S      ****         OUT   IOSPH              , ZH                     ;load SPH               (  1 clock ) 
 1194               			;function argument directly returns word address                                       
1195:kernel.S      **** 	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
1196:kernel.S      **** 		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 1197               			;push context to stack of this task                                                    
1198:kernel.S      **** 		KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 1199               			;read stack pointer of current task (necessary when restore)                           
1200:kernel.S      **** 		IN    R18                , IOSPL                  ;read SPL               (  1 clock ) 
1201:kernel.S      ****         IN    R19                , IOSPH                  ;read SPH               (  1 clock ) 
 1202               			;calculate the address where current task's SP will be stored and store SP             
1203:kernel.S      **** 		LDS   R20                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
1204:kernel.S      **** 		LSL   R20                                         ;left shift to multiply (  1 clock ) 
1205:kernel.S      **** 		LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
1206:kernel.S      **** 		LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
1207:kernel.S      **** 		ADD   ZL                 , R20                    ;add offset to array    (  1 clock ) 
1208:kernel.S      **** 		LDI   R20                , 0x00                   ;clear reg              (  1 clock ) 
1209:kernel.S      **** 		ADC   ZH                 , R20                    ;add carry if any       (  1 clock ) 
1210:kernel.S      **** 		ST    Z+                 , R18                    ;SPL at KerPSp+offset   (  2 clocks) 
1211:kernel.S      **** 		ST    Z                  , R19                    ;SPH at KerPSp+offset   (  2 clocks) 
 1212               			;increment task_id                                                                     
1213:kernel.S      **** 		LDS   R18                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
1214:kernel.S      **** 		INC   R18                                         ;increment task_id      (  1 clock ) 
1215:kernel.S      **** 		STS   KerBase+OFB_TID    , R18                    ;store task_id          (  2 clocks) 
 1216               			;increment ntask                                                                       
1217:kernel.S      **** 		LDS   R18                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
1218:kernel.S      **** 		INC   R18                                         ;increment ntask        (  1 clock ) 
1219:kernel.S      **** 		STS   KerBase+OFB_NTSK   , R18                    ;store ntask            (  2 clocks) 
1220:kernel.S      **** 		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
1221:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1222               	;;==================================kernel task create end==================================;; 
 1223               	
 1224               	
 1225               	
 1226               	
 1227               	
 1228               	;;=================================kernel start tasks starting==============================;; 
 1229               	;used registers          : R0~R31                                                              
 1230               	;arg registers           : None                                                                
 1231               	;return registers        : None                                                                
 1232               	;unsafe access registers : R18, R19, R20, R24, R25, R30(ZL), R31(ZH)                           
 1233               	Kernel_Start_Tasks:                                       ;total 25.63uS @8MHz    (205 clocks) 
1234:kernel.S      **** 		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
1235:kernel.S      **** 		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
1236:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
1237:kernel.S      **** 		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 1238               			;config timer for system tick                                                          
1239:kernel.S      **** 		KER_TIMER_INIT                                    ;init timer, int enable ( 12 clocks) 
 1240               			;execute return to jump to highest priority task                                       
1241:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1242               	;;==================================kernel start tasks end==================================;; 
 1243               	
 1244               	
 1245               	
 1246               	
 1247               	
 1248               	;;===================================kernel init starting===================================;; 
 1249               	;used registers          : R1, R18, R19, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
 1250               	;arg registers           : None                                                                
 1251               	;return registers        : None                                                                
 1252               	;unsafe access registers : R1, R18, R19, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
 1253               	Kernel_Init:                                              ;total 39.75uS @8MHz    (318 clocks) 
1254:kernel.S      **** 		CLR   R1                                          ;gcc expects            (  1 clock ) 
 1255               	        ;store stack top (for MSP) addr to KerSSZ+OFM_MSPI0:1                                  
1256:kernel.S      **** 		LDI   R18                , lo8(KerSSZ+OFM_MSPS)   ;load low address       (  1 clock ) 
1257:kernel.S      **** 		LDI   R19                , hi8(KerSSZ+OFM_MSPS)   ;load high address      (  1 clock ) 
1258:kernel.S      ****         STS   KerSSZ+OFM_MSPI+0  , R18                    ;set mspi to stack top  (  2 clocks) 
1259:kernel.S      **** 		STS   KerSSZ+OFM_MSPI+1  , R19                    ;set mspi to stack top  (  2 clocks) 
1260:kernel.S      **** 		KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 1261               			;init timer for kernel                                                                 
1262:kernel.S      **** 		LDI   R24                , 0x03                   ;set prescaler          (  1 clock ) 
1263:kernel.S      **** 		LDI   R22                , 0x82                   ;set reload val         (  1 clock ) 
1264:kernel.S      **** 		CALL  Kernel_SysTick_Reg_Init                     ;init timer             ( 92 clocks) 
 1265               			;create idle task at task_id 0, priority 0xFF (lowest)                                 
1266:kernel.S      **** 		LDI   R24                , lo8(Kernel_Task_Idle)  ;load func addr low     (  1 clock ) 
1267:kernel.S      **** 		LDI   R25                , hi8(Kernel_Task_Idle)  ;load func addr high    (  1 clock ) 
1268:kernel.S      **** 		LSR   R25                                         ;right shift to divide  (  1 clock ) 
1269:kernel.S      **** 		ROR   R24                                         ;rotate right th carry  (  1 clock ) 
1270:kernel.S      **** 		LDI   R22                , 0xFF                   ;set max val            (  1 clock ) 
1271:kernel.S      **** 		CALL  Kernel_Task_Create                          ;init idle task         (172 clocks) 
1272:kernel.S      **** 		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 1273               			;execute return to jump to task0, pushed while task init                               
1274:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1275               	;;======================================kernel init end=====================================;; 
 1276               	
 1277               	
 1278               	
 1279               	
 1280               	
 1281               	;;=================================kernel idle task starting================================;; 
 1282               	;used registers          : None                                                                
 1283               	;arg registers           : None                                                                
 1284               	;return registers        : None                                                                
 1285               	;unsafe access registers : None                                                                
 1286               	Kernel_Task_Idle:                                                                              
1287:kernel.S      **** 	    KER_SLEEP_INIT                                    ;sleep init             (  5 clocks) 
 1288               	    _IDLE_LOOP:                                           ;forever loop                        
1289:kernel.S      **** 	    KER_DISABLE_ANALOG_DOMAIN                         ;disable adc, ac        ( 10 clocks) 
1290:kernel.S      **** 	    KER_ENTER_SLEEP                                   ;enter sleep mode       (  6 clocks) 
1291:kernel.S      **** 		RJMP  _IDLE_LOOP                                  ;jump to loop start     (  2 clocks) 
 1292               	;;==================================kernel idle task end====================================;; 
 1293               	
 1294               	
 1295               	
 1296               	
 1297               	
 1298               	;;================================kernel task sleep starting================================;; 
 1299               	;used registers          : R0~R31                                                              
 1300               	;arg registers           : R25:R24(SleepTime)                                                  
 1301               	;return registers        : None                                                                
 1302               	;unsafe access registers : R18, R19, R20, R24, R25, R30(ZL), R31(ZH)                           
 1303               	Kernel_Task_Sleep:                                        ;total 37.25uS @8MHz    (298 clocks) 
 1304               	        ;save current context                                                                  
1305:kernel.S      ****         KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
1306:kernel.S      **** 		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 1307               			;create next task wakeup time (args R25:R24)                                           
1308:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
1309:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
1310:kernel.S      **** 		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
1311:kernel.S      **** 		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
1312:kernel.S      **** 		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 1313               			;update task scheduler status as blocked                                               
1314:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
1315:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
1316:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
1317:kernel.S      ****         LDI   R18                , TASK_BLOCKED           ;block task until cnt=0 (  1 clock ) 
1318:kernel.S      **** 		STD   Z+0                , R18                    ;save block flag        (  2 clocks) 
 1319               			;run scheduler, load next task sp, restore context                                     
1320:kernel.S      **** 		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
1321:kernel.S      **** 		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
1322:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
1323:kernel.S      **** 		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
1324:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1325               	;;=================================kernel task sleep end====================================;; 
 1326               	
 1327               	
 1328               	
 1329               	
 1330               	
 1331               	;;========================kernel task constant latency starting=============================;; 
 1332               	;used registers          : R18, R24, R25, R30(ZL), R31(ZH)                                     
 1333               	;arg registers           : R25:R24(SleepTime)                                                  
 1334               	;return registers        : None                                                                
 1335               	;unsafe access registers : R18, R24, R25, R30(ZL), R31(ZH)                                     
 1336               	Kernel_Task_Constant_Latency:                             ;total 3.50uS @8MHz     ( 28 clocks) 
 1337               			;create next task wakeup time (args R25:R24)                                           
1338:kernel.S      **** 		CLI                                               ;disable interrupt      (  1 clock ) 
1339:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
1340:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
1341:kernel.S      **** 		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
1342:kernel.S      **** 		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
1343:kernel.S      **** 		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 1344               			;update task scheduler status as constant latency                                      
1345:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
1346:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
1347:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
1348:kernel.S      ****         LDI   R18                , TASK_CONS_LAT          ;save as cons_lat       (  1 clock ) 
1349:kernel.S      **** 		STD   Z+0                , R18                    ;save block flag        (  2 clocks) 
1350:kernel.S      **** 		SEI                                               ;enable interrupt       (  1 clock ) 
1351:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1352               	;;=============================kernel task constant latency end=============================;; 
 1353               	
 1354               	
 1355               	
 1356               	
 1357               	
 1358               	;;=======================kernel task constant latency sleep starting========================;; 
 1359               	;used registers          : R0~R31                                                              
 1360               	;arg registers           : R25:R24(SleepTime)                                                  
 1361               	;return registers        : None                                                                
 1362               	;unsafe access registers : R18, R19, R20, R24, R25, R30(ZL), R31(ZH)                           
 1363               	Kernel_Task_Constant_Latency_Sleep:                       ;total 35.75uS @8MHz    (286 clocks) 
 1364               			;save current context                                                                  
1365:kernel.S      ****         KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
1366:kernel.S      **** 		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 1367               			;update task scheduler status as blocked                                               
1368:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
1369:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
1370:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
1371:kernel.S      ****         LDI   R18                , TASK_BLOCKED           ;blocked until cnt=0    (  1 clock ) 
1372:kernel.S      **** 		STD   Z+0                , R18                    ;save block flag        (  2 clocks) 
 1373               			;run scheduler, load next task sp, restore context                                     
1374:kernel.S      **** 		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
1375:kernel.S      **** 		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
1376:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
1377:kernel.S      **** 		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
1378:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1379               	;;=============================kernel task constant latency end=============================;; 
 1380               	
 1381               	
 1382               	
 1383               	
 1384               	
 1385               	;;===========================kernel task sleep time get starting============================;; 
 1386               	;used registers          : R18, R24, R25, R30(ZL), R31(ZH)                                     
 1387               	;arg registers           : R24(TaskID)                                                         
 1388               	;return registers        : R25:R24(SleepTime)                                                  
 1389               	;unsafe access registers : R18, R24, R25, R30(ZL), R31(ZH)                                     
 1390               	Kernel_Task_Sleep_Time_Get:                               ;total 1.88uS @8MHz     ( 15 clocks) 
1391:kernel.S      **** 		MOV   R18                , R24                    ;copy                   (  1 clock ) 
1392:kernel.S      **** 		LSL   R18                                         ;x2                     (  1 clock ) 
1393:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
1394:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
1395:kernel.S      **** 		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
1396:kernel.S      **** 		LDI   R18                , 0x00                   ;load 0                 (  1 clock ) 
1397:kernel.S      **** 		ADC   ZH                 , R18                    ;add high byte+carry    (  1 clock ) 
1398:kernel.S      **** 		LDD   R24                , Z+0                    ;load sleep time        (  2 clocks) 
1399:kernel.S      **** 		LDD   R25                , Z+1                    ;load sleep time        (  2 clocks) 
1400:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1401               	;;==============================kernel task sleep time get end==============================;; 
 1402               	
 1403               	
 1404               	
 1405               	
 1406               	
 1407               	;;==============================kernel task status get starting=============================;; 
 1408               	;used registers          : R18, R24, R30(ZL), R31(ZH)                                          
 1409               	;arg registers           : R24(TaskID)                                                         
 1410               	;return registers        : R24(TaskSts)                                                        
 1411               	;unsafe access registers : R18, R24, R30(ZL), R31(ZH)                                          
 1412               	Kernel_Task_Status_Get:                                   ;total 1.50uS @8MHz     ( 12 clocks) 
1413:kernel.S      **** 		MOV   R18                , R24                    ;copy                   (  1 clock ) 
1414:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
1415:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
1416:kernel.S      **** 		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
1417:kernel.S      **** 		LDI   R18                , 0x00                   ;load 0                 (  1 clock ) 
1418:kernel.S      **** 		ADC   ZH                 , R18                    ;add high byte+carry    (  1 clock ) 
1419:kernel.S      **** 		LD    R24                , Z                      ;load task status       (  2 clocks) 
1420:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1421               	;;================================kernel task status get end================================;; 
 1422               	
 1423               	
 1424               	
 1425               	
 1426               	
 1427               	;;================================kernel ntask get starting=================================;; 
 1428               	;used registers          : R24                                                                 
 1429               	;arg registers           : None                                                                
 1430               	;return registers        : R24(NTask)                                                          
 1431               	;unsafe access registers : R24                                                                 
 1432               	Kernel_NTask_Get:                                         ;total 0.75uS @8MHz     (  6 clocks) 
1433:kernel.S      **** 		LDS   R24                 , KerBase+OFB_NTSK      ;load ntask             (  2 clock ) 
1434:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1435               	;;===================================kernel ntask get end===================================;; 
 1436               	
 1437               	
 1438               	
 1439               	
 1440               	
 1441               	;;=============================kernel task priority get starting============================;; 
 1442               	;used registers          : R18, R24, R30(ZL), R31(ZH)                                          
 1443               	;arg registers           : R24(TaskID)                                                         
 1444               	;return registers        : R24(TaskPriority)                                                   
 1445               	;unsafe access registers : R18, R24, R30(ZL), R31(ZH)                                          
 1446               	Kernel_Task_Prio_Get:                                     ;total 1.50uS @8MHz     ( 12 clocks) 
 1447               			;get priority of the task id, arg (task_id->R24), return R24                           
1448:kernel.S      **** 		MOV   R18                , R24                    ;copy task_id           (  1 clock ) 
1449:kernel.S      **** 		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
1450:kernel.S      **** 		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
1451:kernel.S      **** 		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
1452:kernel.S      **** 		LDI   R18                , 0x00                   ;clear reg              (  1 clock ) 
1453:kernel.S      **** 		ADC   ZH                 , R18                    ;add high byte+carry    (  1 clock ) 
1454:kernel.S      **** 		LD    R24                , Z                      ;load priority          (  2 clocks) 
1455:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1456               	;;================================kernel task priority get end==============================;; 
 1457               	
 1458               	
 1459               	
 1460               	
 1461               	
 1462               	;;============================kernel lowest priority get starting===========================;; 
 1463               	;used registers          : R24                                                                 
 1464               	;arg registers           : None                                                                
 1465               	;return registers        : R24(LowestPriorityVal)                                              
 1466               	;unsafe access registers : R24                                                                 
 1467               	Kernel_Lowest_Prio_Get:                                   ;total 0.75uS @8MHz     (  6 clocks) 
1468:kernel.S      **** 		LDS   R24                , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
1469:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1470               	;;===============================kernel lowest priority get end=============================;; 
 1471               	
 1472               	
 1473               	
 1474               	
 1475               	
 1476               	;;===========================kernel high priority task id starting==========================;; 
 1477               	;used registers          : R24                                                                 
 1478               	;arg registers           : None                                                                
 1479               	;return registers        : R24(HighstPriorityTaskID)->UserTaskID (Excluding Idle Task)         
 1480               	;unsafe access registers : R24                                                                 
 1481               	Kernel_High_Prio_Task_ID_Get:                             ;total 0.88uS @8MHz     (  7 clocks) 
1482:kernel.S      **** 		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
1483:kernel.S      **** 		DEC   R24                                         ;decrement by 1         (  1 clock ) 
1484:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1485               	;;==============================kernel high priority task id end============================;; 
 1486               	
 1487               	
 1488               	
 1489               	
 1490               	
 1491               	;;=========================kernel abs high priority task id starting========================;; 
 1492               	;used registers          : R24                                                                 
 1493               	;arg registers           : None                                                                
 1494               	;return registers        : R24(HighstPriorityTaskID)->AbsoluteTaskID (Including Idle Task)     
 1495               	;unsafe access registers : R24                                                                 
 1496               	Kernel_Abs_High_Prio_Task_ID_Get:                         ;total 0.75uS @8MHz     (  6 clocks) 
1497:kernel.S      **** 		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
1498:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1499               	;;============================kernel abs high priority task id end==========================;; 
 1500               	
 1501               	
 1502               	
 1503               	
 1504               	
 1505               	;;================================kernel cpu usage get starting=============================;; 
 1506               	;used registers          : R24                                                                 
 1507               	;arg registers           : None                                                                
 1508               	;return registers        : R24(CurrentCpuUsage)->In percentage                                 
 1509               	;unsafe access registers : R24                                                                 
 1510               	Kernel_CPU_Usage_Get:                                     ;total 0.75uS @8MHz     (  6 clocks) 
 1511               			;get cpu usage, return R24                                                             
1512:kernel.S      **** 		LDS   R24                , KerBase+OFB_USAGE      ;load cpu usage         (  2 clocks) 
1513:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1514               	;;==================================kernel cpu usage get end================================;; 
DEFINED SYMBOLS
            kernel.S:21     *ABS*:000003e8 KER_TR
            kernel.S:22     *ABS*:00000003 KER_PRS
            kernel.S:23     *ABS*:00000082 KER_RLD
            kernel.S:24     *ABS*:00000080 KER_STK_SZ
            kernel.S:25     *ABS*:0000000a KER_MX_NTSK
            kernel.S:33     *ABS*:00000000 OFB_TICK0
            kernel.S:34     *ABS*:00000001 OFB_TICK1
            kernel.S:35     *ABS*:00000002 OFB_TICK2
            kernel.S:36     *ABS*:00000003 OFB_TICK3
            kernel.S:37     *ABS*:00000004 OFB_TICK4
            kernel.S:38     *ABS*:00000005 OFB_PRS
            kernel.S:39     *ABS*:00000006 OFB_RLD
            kernel.S:40     *ABS*:00000007 OFB_TID
            kernel.S:41     *ABS*:00000008 OFB_NTSK
            kernel.S:42     *ABS*:00000009 OFB_LPR
            kernel.S:43     *ABS*:0000000a OFB_PTID
            kernel.S:44     *ABS*:0000000b OFB_UTC
            kernel.S:45     *ABS*:0000000c OFB_UATC
            kernel.S:46     *ABS*:0000000d OFB_USAGE
            kernel.S:47     *ABS*:0000000e OFB_SLCFG
            kernel.S:48     *ABS*:00000000 OFM_MSPI
            kernel.S:49     *ABS*:00000002 OFM_MSPS
            kernel.S:57     *ABS*:00000000 TASK_BLOCKED
            kernel.S:58     *ABS*:00000001 TASK_READY
            kernel.S:59     *ABS*:00000002 TASK_EXECUTING
            kernel.S:60     *ABS*:00000003 TASK_SUSPENDED
            kernel.S:61     *ABS*:00000004 TASK_CONS_LAT
            kernel.S:62     *ABS*:00000000 SCH_MODE_HANDLER
            kernel.S:63     *ABS*:00000001 SCH_MODE_THREAD
            kernel.S:72     *ABS*:000000b6 SRASSR
            kernel.S:73     *ABS*:000000b2 SRTCNT2
            kernel.S:74     *ABS*:000000b1 SRTCCR2B
            kernel.S:75     *ABS*:000000b0 SRTCCR2A
            kernel.S:76     *ABS*:0000007c SRADMUX
            kernel.S:77     *ABS*:0000007b SRADCSRB
            kernel.S:78     *ABS*:0000007a SRADCSRA
            kernel.S:79     *ABS*:00000070 SRTIMSK2
            kernel.S:80     *ABS*:0000006f SRTIMSK1
            kernel.S:81     *ABS*:0000006e SRTIMSK0
            kernel.S:82     *ABS*:00000060 SRWDTCSR
            kernel.S:83     *ABS*:0000005f SRSREG
            kernel.S:84     *ABS*:0000005e SRSPH
            kernel.S:85     *ABS*:0000005d SRSPL
            kernel.S:86     *ABS*:00000055 SRMCUCR
            kernel.S:87     *ABS*:00000054 SRMCUSR
            kernel.S:88     *ABS*:00000053 SRSMCR
            kernel.S:89     *ABS*:00000050 SRACSR
            kernel.S:90     *ABS*:00000048 SROCR0B
            kernel.S:91     *ABS*:00000047 SROCR0A
            kernel.S:92     *ABS*:00000046 SRTCNT0
            kernel.S:93     *ABS*:00000045 SRTCCR0B
            kernel.S:94     *ABS*:00000044 SRTCCR0A
            kernel.S:95     *ABS*:00000037 SRTIFR2
            kernel.S:96     *ABS*:00000036 SRTIFR1
            kernel.S:97     *ABS*:00000035 SRTIFR0
            kernel.S:99     *ABS*:0000003f IOSREG
            kernel.S:100    *ABS*:0000003e IOSPH
            kernel.S:101    *ABS*:0000003d IOSPL
            kernel.S:102    *ABS*:00000035 IOMCUCR
            kernel.S:103    *ABS*:00000034 IOMCUSR
            kernel.S:104    *ABS*:00000033 IOSMCR
            kernel.S:105    *ABS*:00000028 IOOCR0B
            kernel.S:106    *ABS*:00000027 IOOCR0A
            kernel.S:107    *ABS*:00000026 IOTCNT0
            kernel.S:108    *ABS*:00000025 IOTCCR0B
            kernel.S:109    *ABS*:00000024 IOTCCR0A
            kernel.S:110    *ABS*:00000017 IOTIFR2
            kernel.S:111    *ABS*:00000016 IOTIFR1
            kernel.S:112    *ABS*:00000015 IOTIFR0
            kernel.S:123    .bss:00000000 KerBase
            kernel.S:126    .bss:00000010 KerPSP
            kernel.S:129    .bss:00000024 KerSSZ
            kernel.S:132    .bss:00000032 KerSchSts
            kernel.S:135    .bss:0000003c KerSchPr
            kernel.S:138    .bss:00000046 KerSchSlp
            kernel.S:141    .bss:0000005a KerStack
            kernel.S:1055   .text:00000000 __vector_9
            kernel.S:1099   .text:000001e6 Kernel_SysTick_Reg_Init
            kernel.S:1253   .text:000004e2 Kernel_Init
            kernel.S:1166   .text:0000027a Kernel_Task_Create
            kernel.S:1233   .text:0000036a Kernel_Start_Tasks
            kernel.S:1286   .text:00000540 Kernel_Task_Idle
            kernel.S:1303   .text:0000056c Kernel_Task_Sleep
            kernel.S:1336   .text:00000702 Kernel_Task_Constant_Latency
            kernel.S:1363   .text:0000072e Kernel_Task_Constant_Latency_Sleep
            kernel.S:1390   .text:000008b0 Kernel_Task_Sleep_Time_Get
            kernel.S:1412   .text:000008c4 Kernel_Task_Status_Get
            kernel.S:1432   .text:000008d4 Kernel_NTask_Get
            kernel.S:1446   .text:000008da Kernel_Task_Prio_Get
            kernel.S:1467   .text:000008ea Kernel_Lowest_Prio_Get
            kernel.S:1481   .text:000008f0 Kernel_High_Prio_Task_ID_Get
            kernel.S:1496   .text:000008f8 Kernel_Abs_High_Prio_Task_ID_Get
            kernel.S:1510   .text:000008fe Kernel_CPU_Usage_Get
            kernel.S:1063   .text:000000b6 _KER_SCH_LOOP9
            kernel.S:1063   .text:000000ec _VAL_NULL10
            kernel.S:1063   .text:00000100 _VAL_NOT_NULL10
            kernel.S:1063   .text:00000110 _EXIT_SLP_TIME10
            kernel.S:1063   .text:0000011a _KER_CALC_PRIO9
            kernel.S:1063   .text:0000013e _KER_SCH_NEXT9
            kernel.S:1063   .text:0000014e _KER_SCH_EXIT9
            kernel.S:1064   .text:00000168 _KER_USG_TICK15
            kernel.S:1064   .text:00000182 _KER_USG_UTC_SV15
            kernel.S:1235   .text:0000037a _KER_SCH_LOOP32
            kernel.S:1235   .text:000003b0 _VAL_NULL33
            kernel.S:1235   .text:000003c4 _VAL_NOT_NULL33
            kernel.S:1235   .text:000003d4 _EXIT_SLP_TIME33
            kernel.S:1235   .text:000003de _KER_CALC_PRIO32
            kernel.S:1235   .text:00000402 _KER_SCH_NEXT32
            kernel.S:1235   .text:00000412 _KER_SCH_EXIT32
            kernel.S:253    .text:00000496 _KER_TC2_AUB43
            kernel.S:253    .text:0000049e _KER_TC2_BUB43
            kernel.S:253    .text:000004a6 _KER_TC2_UB43
            kernel.S:253    .text:000004ae _KER_TC2_TOV243
            kernel.S:253    .text:000004bc _KER_TC2_OCF2A43
            kernel.S:253    .text:000004ca _KER_TC2_OCF2B43
            kernel.S:253    .text:000004d8 _KER_TC2_INTEN43
            kernel.S:1288   .text:0000054a _IDLE_LOOP
            kernel.S:1321   .text:00000602 _KER_SCH_LOOP56
            kernel.S:1321   .text:00000638 _VAL_NULL57
            kernel.S:1321   .text:0000064c _VAL_NOT_NULL57
            kernel.S:1321   .text:0000065c _EXIT_SLP_TIME57
            kernel.S:1321   .text:00000666 _KER_CALC_PRIO56
            kernel.S:1321   .text:0000068a _KER_SCH_NEXT56
            kernel.S:1321   .text:0000069a _KER_SCH_EXIT56
            kernel.S:1375   .text:000007b0 _KER_SCH_LOOP75
            kernel.S:1375   .text:000007e6 _VAL_NULL76
            kernel.S:1375   .text:000007fa _VAL_NOT_NULL76
            kernel.S:1375   .text:0000080a _EXIT_SLP_TIME76
            kernel.S:1375   .text:00000814 _KER_CALC_PRIO75
            kernel.S:1375   .text:00000838 _KER_SCH_NEXT75
            kernel.S:1375   .text:00000848 _KER_SCH_EXIT75

UNDEFINED SYMBOLS
__vector_6
__vector_16
Kernel_SysTick_Val_Get
Kernel_SysTick_Val_Safely_Get
Kernel_Interrupt_Sts_Get
