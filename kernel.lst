   1               	# 1 "kernel.S"
   1               	
   0               	
   0               	
   2               	
   3               	 ; File          : kernel.S
   4               	 ; Author        : MD. Faridul Islam (faridmdislam@gmail.com)
   5               	 ; Description   : AVR kernel for bare-metal RTOS
   6               	 ; Created       : Jul 27, 2025, 09:30 PM
   7               	 ; Last Modified : Oct 07, 2025, 10:42 PM
   8               	
   9               	
  10               	
  11               	
  12               	#include <avr/io.h>
   1               	/* Copyright (c) 2002,2003,2005,2006,2007 Marek Michalkiewicz, Joerg Wunsch
   2               	   Copyright (c) 2007 Eric B. Weddington
   3               	   All rights reserved.
   4               	
   5               	   Redistribution and use in source and binary forms, with or without
   6               	   modification, are permitted provided that the following conditions are met:
   7               	
   8               	   * Redistributions of source code must retain the above copyright
   9               	     notice, this list of conditions and the following disclaimer.
  10               	
  11               	   * Redistributions in binary form must reproduce the above copyright
  12               	     notice, this list of conditions and the following disclaimer in
  13               	     the documentation and/or other materials provided with the
  14               	     distribution.
  15               	
  16               	   * Neither the name of the copyright holders nor the names of
  17               	     contributors may be used to endorse or promote products derived
  18               	     from this software without specific prior written permission.
  19               	
  20               	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21               	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22               	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23               	  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24               	  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25               	  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26               	  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27               	  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28               	  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29               	  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30               	  POSSIBILITY OF SUCH DAMAGE. */
  31               	
  32               	/* $Id: io.h,v 1.52.2.28 2009/12/20 17:02:53 arcanum Exp $ */
  33               	
  34               	/** \file */
  35               	/** \defgroup avr_io <avr/io.h>: AVR device-specific IO definitions
  36               	    \code #include <avr/io.h> \endcode
  37               	
  38               	    This header file includes the apropriate IO definitions for the
  39               	    device that has been specified by the <tt>-mmcu=</tt> compiler
  40               	    command-line switch.  This is done by diverting to the appropriate
  41               	    file <tt>&lt;avr/io</tt><em>XXXX</em><tt>.h&gt;</tt> which should
  42               	    never be included directly.  Some register names common to all
  43               	    AVR devices are defined directly within <tt>&lt;avr/common.h&gt;</tt>,
  44               	    which is included in <tt>&lt;avr/io.h&gt;</tt>,
  45               	    but most of the details come from the respective include file.
  46               	
  47               	    Note that this file always includes the following files:
  48               	    \code 
  49               	    #include <avr/sfr_defs.h>
  50               	    #include <avr/portpins.h>
  51               	    #include <avr/common.h>
  52               	    #include <avr/version.h>
  53               	    \endcode
  54               	    See \ref avr_sfr for more details about that header file.
  55               	
  56               	    Included are definitions of the IO register set and their
  57               	    respective bit values as specified in the Atmel documentation.
  58               	    Note that inconsistencies in naming conventions,
  59               	    so even identical functions sometimes get different names on
  60               	    different devices.
  61               	
  62               	    Also included are the specific names useable for interrupt
  63               	    function definitions as documented
  64               	    \ref avr_signames "here".
  65               	
  66               	    Finally, the following macros are defined:
  67               	
  68               	    - \b RAMEND
  69               	    <br>
  70               	    The last on-chip RAM address.
  71               	    <br>
  72               	    - \b XRAMEND
  73               	    <br>
  74               	    The last possible RAM location that is addressable. This is equal to 
  75               	    RAMEND for devices that do not allow for external RAM. For devices 
  76               	    that allow external RAM, this will be larger than RAMEND.
  77               	    <br>
  78               	    - \b E2END
  79               	    <br>
  80               	    The last EEPROM address.
  81               	    <br>
  82               	    - \b FLASHEND
  83               	    <br>
  84               	    The last byte address in the Flash program space.
  85               	    <br>
  86               	    - \b SPM_PAGESIZE
  87               	    <br>
  88               	    For devices with bootloader support, the flash pagesize
  89               	    (in bytes) to be used for the \c SPM instruction. 
  90               	    - \b E2PAGESIZE
  91               	    <br>
  92               	    The size of the EEPROM page.
  93               	    
  94               	*/
  95               	
  96               	#ifndef _AVR_IO_H_
  97               	#define _AVR_IO_H_
  98               	
  99               	#include <avr/sfr_defs.h>
   1               	/* Copyright (c) 2002, Marek Michalkiewicz <marekm@amelek.gda.pl>
 100               	
 101               	#if defined (__AVR_AT94K__)
 102               	#  include <avr/ioat94k.h>
 103               	#elif defined (__AVR_AT43USB320__)
 104               	#  include <avr/io43u32x.h>
 105               	#elif defined (__AVR_AT43USB355__)
 106               	#  include <avr/io43u35x.h>
 107               	#elif defined (__AVR_AT76C711__)
 108               	#  include <avr/io76c711.h>
 109               	#elif defined (__AVR_AT86RF401__)
 110               	#  include <avr/io86r401.h>
 111               	#elif defined (__AVR_AT90PWM1__)
 112               	#  include <avr/io90pwm1.h>
 113               	#elif defined (__AVR_AT90PWM2__)
 114               	#  include <avr/io90pwmx.h>
 115               	#elif defined (__AVR_AT90PWM2B__)
 116               	#  include <avr/io90pwm2b.h>
 117               	#elif defined (__AVR_AT90PWM3__)
 118               	#  include <avr/io90pwmx.h>
 119               	#elif defined (__AVR_AT90PWM3B__)
 120               	#  include <avr/io90pwm3b.h>
 121               	#elif defined (__AVR_AT90PWM216__)
 122               	#  include <avr/io90pwm216.h>
 123               	#elif defined (__AVR_AT90PWM316__)
 124               	#  include <avr/io90pwm316.h>
 125               	#elif defined (__AVR_AT90PWM81__)
 126               	#  include <avr/io90pwm81.h>
 127               	#elif defined (__AVR_ATmega8U2__)
 128               	#  include <avr/iom8u2.h>
 129               	#elif defined (__AVR_ATmega16M1__)
 130               	#  include <avr/iom16m1.h>
 131               	#elif defined (__AVR_ATmega16U2__)
 132               	#  include <avr/iom16u2.h>
 133               	#elif defined (__AVR_ATmega16U4__)
 134               	#  include <avr/iom16u4.h>
 135               	#elif defined (__AVR_ATmega32C1__)
 136               	#  include <avr/iom32c1.h>
 137               	#elif defined (__AVR_ATmega32M1__)
 138               	#  include <avr/iom32m1.h>
 139               	#elif defined (__AVR_ATmega32U2__)
 140               	#  include <avr/iom32u2.h>
 141               	#elif defined (__AVR_ATmega32U4__)
 142               	#  include <avr/iom32u4.h>
 143               	#elif defined (__AVR_ATmega32U6__)
 144               	#  include <avr/iom32u6.h>
 145               	#elif defined (__AVR_ATmega64C1__)
 146               	#  include <avr/iom64c1.h>
 147               	#elif defined (__AVR_ATmega64M1__)
 148               	#  include <avr/iom64m1.h>
 149               	#elif defined (__AVR_ATmega128__)
 150               	#  include <avr/iom128.h>
 151               	#elif defined (__AVR_ATmega1280__)
 152               	#  include <avr/iom1280.h>
 153               	#elif defined (__AVR_ATmega1281__)
 154               	#  include <avr/iom1281.h>
 155               	#elif defined (__AVR_ATmega1284P__)
 156               	#  include <avr/iom1284p.h>
 157               	#elif defined (__AVR_ATmega128RFA1__)
 158               	#  include <avr/iom128rfa1.h>
 159               	#elif defined (__AVR_ATmega2560__)
 160               	#  include <avr/iom2560.h>
 161               	#elif defined (__AVR_ATmega2561__)
 162               	#  include <avr/iom2561.h>
 163               	#elif defined (__AVR_AT90CAN32__)
 164               	#  include <avr/iocan32.h>
 165               	#elif defined (__AVR_AT90CAN64__)
 166               	#  include <avr/iocan64.h>
 167               	#elif defined (__AVR_AT90CAN128__)
 168               	#  include <avr/iocan128.h>
 169               	#elif defined (__AVR_AT90USB82__)
 170               	#  include <avr/iousb82.h>
 171               	#elif defined (__AVR_AT90USB162__)
 172               	#  include <avr/iousb162.h>
 173               	#elif defined (__AVR_AT90USB646__)
 174               	#  include <avr/iousb646.h>
 175               	#elif defined (__AVR_AT90USB647__)
 176               	#  include <avr/iousb647.h>
 177               	#elif defined (__AVR_AT90USB1286__)
 178               	#  include <avr/iousb1286.h>
 179               	#elif defined (__AVR_AT90USB1287__)
 180               	#  include <avr/iousb1287.h>
 181               	#elif defined (__AVR_ATmega64__)
 182               	#  include <avr/iom64.h>
 183               	#elif defined (__AVR_ATmega640__)
 184               	#  include <avr/iom640.h>
 185               	#elif defined (__AVR_ATmega644__) || defined (__AVR_ATmega644A__)
 186               	#  include <avr/iom644.h>
 187               	#elif defined (__AVR_ATmega644P__)
 188               	#  include <avr/iom644p.h>
 189               	#elif defined (__AVR_ATmega644PA__)
 190               	#  include <avr/iom644pa.h>
 191               	#elif defined (__AVR_ATmega645__) || defined (__AVR_ATmega645A__) || defined (__AVR_ATmega645P__)
 192               	#  include <avr/iom645.h>
 193               	#elif defined (__AVR_ATmega6450__) || defined (__AVR_ATmega6450A__) || defined (__AVR_ATmega6450P__
 194               	#  include <avr/iom6450.h>
 195               	#elif defined (__AVR_ATmega649__) || defined (__AVR_ATmega649A__)
 196               	#  include <avr/iom649.h>
 197               	#elif defined (__AVR_ATmega6490__) || defined (__AVR_ATmega6490A__) || defined (__AVR_ATmega6490P__
 198               	#  include <avr/iom6490.h>
 199               	#elif defined (__AVR_ATmega649P__)
 200               	#  include <avr/iom649p.h>
 201               	#elif defined (__AVR_ATmega64HVE__)
 202               	#  include <avr/iom64hve.h>
 203               	#elif defined (__AVR_ATmega103__)
 204               	#  include <avr/iom103.h>
 205               	#elif defined (__AVR_ATmega32__)
 206               	#  include <avr/iom32.h>
 207               	#elif defined (__AVR_ATmega323__)
 208               	#  include <avr/iom323.h>
 209               	#elif defined (__AVR_ATmega324P__) || defined (__AVR_ATmega324A__)
 210               	#  include <avr/iom324.h>
 211               	#elif defined (__AVR_ATmega324PA__)
 212               	#  include <avr/iom324pa.h>
 213               	#elif defined (__AVR_ATmega325__)
 214               	#  include <avr/iom325.h>
 215               	#elif defined (__AVR_ATmega325P__)
 216               	#  include <avr/iom325.h>
 217               	#elif defined (__AVR_ATmega3250__)
 218               	#  include <avr/iom3250.h>
 219               	#elif defined (__AVR_ATmega3250P__)
 220               	#  include <avr/iom3250.h>
 221               	#elif defined (__AVR_ATmega328P__) || defined (__AVR_ATmega328__)
 222               	#  include <avr/iom328p.h>
   1               	/* Copyright (c) 2007 Atmel Corporation
 223               	#elif defined (__AVR_ATmega329__)
 224               	#  include <avr/iom329.h>
 225               	#elif defined (__AVR_ATmega329P__) || defined (__AVR_ATmega329PA__)
 226               	#  include <avr/iom329.h>
 227               	#elif defined (__AVR_ATmega3290__)
 228               	#  include <avr/iom3290.h>
 229               	#elif defined (__AVR_ATmega3290P__)
 230               	#  include <avr/iom3290.h>
 231               	#elif defined (__AVR_ATmega32HVB__)
 232               	#  include <avr/iom32hvb.h>
 233               	#elif defined (__AVR_ATmega406__)
 234               	#  include <avr/iom406.h>
 235               	#elif defined (__AVR_ATmega16__)
 236               	#  include <avr/iom16.h>
 237               	#elif defined (__AVR_ATmega16A__)
 238               	#  include <avr/iom16a.h>
 239               	#elif defined (__AVR_ATmega161__)
 240               	#  include <avr/iom161.h>
 241               	#elif defined (__AVR_ATmega162__)
 242               	#  include <avr/iom162.h>
 243               	#elif defined (__AVR_ATmega163__)
 244               	#  include <avr/iom163.h>
 245               	#elif defined (__AVR_ATmega164P__) || defined (__AVR_ATmega164A__)
 246               	#  include <avr/iom164.h>
 247               	#elif defined (__AVR_ATmega165__) || defined (__AVR_ATmega165A__)
 248               	#  include <avr/iom165.h>
 249               	#elif defined (__AVR_ATmega165P__)
 250               	#  include <avr/iom165p.h>
 251               	#elif defined (__AVR_ATmega168__) || defined (__AVR_ATmega168A__)
 252               	#  include <avr/iom168.h>
 253               	#elif defined (__AVR_ATmega168P__)
 254               	#  include <avr/iom168p.h>
 255               	#elif defined (__AVR_ATmega169__) || defined (__AVR_ATmega169A__)
 256               	#  include <avr/iom169.h>
 257               	#elif defined (__AVR_ATmega169P__)
 258               	#  include <avr/iom169p.h>
 259               	#elif defined (__AVR_ATmega169PA__)
 260               	#  include <avr/iom169pa.h>
 261               	#elif defined (__AVR_ATmega8HVA__)
 262               	#  include <avr/iom8hva.h>
 263               	#elif defined (__AVR_ATmega16HVA__)
 264               	#  include <avr/iom16hva.h>
 265               	#elif defined (__AVR_ATmega16HVA2__)
 266               	#  include <avr/iom16hva2.h>
 267               	#elif defined (__AVR_ATmega16HVB__)
 268               	#  include <avr/iom16hvb.h>
 269               	#elif defined (__AVR_ATmega8__)
 270               	#  include <avr/iom8.h>
 271               	#elif defined (__AVR_ATmega48__) || defined (__AVR_ATmega48A__)
 272               	#  include <avr/iom48.h>
 273               	#elif defined (__AVR_ATmega48P__)
 274               	#  include <avr/iom48p.h>
 275               	#elif defined (__AVR_ATmega88__) || defined (__AVR_ATmega88A__)
 276               	#  include <avr/iom88.h>
 277               	#elif defined (__AVR_ATmega88P__)
 278               	#  include <avr/iom88p.h>
 279               	#elif defined (__AVR_ATmega88PA__)
 280               	#  include <avr/iom88pa.h>
 281               	#elif defined (__AVR_ATmega8515__)
 282               	#  include <avr/iom8515.h>
 283               	#elif defined (__AVR_ATmega8535__)
 284               	#  include <avr/iom8535.h>
 285               	#elif defined (__AVR_AT90S8535__)
 286               	#  include <avr/io8535.h>
 287               	#elif defined (__AVR_AT90C8534__)
 288               	#  include <avr/io8534.h>
 289               	#elif defined (__AVR_AT90S8515__)
 290               	#  include <avr/io8515.h>
 291               	#elif defined (__AVR_AT90S4434__)
 292               	#  include <avr/io4434.h>
 293               	#elif defined (__AVR_AT90S4433__)
 294               	#  include <avr/io4433.h>
 295               	#elif defined (__AVR_AT90S4414__)
 296               	#  include <avr/io4414.h>
 297               	#elif defined (__AVR_ATtiny22__)
 298               	#  include <avr/iotn22.h>
 299               	#elif defined (__AVR_ATtiny26__)
 300               	#  include <avr/iotn26.h>
 301               	#elif defined (__AVR_AT90S2343__)
 302               	#  include <avr/io2343.h>
 303               	#elif defined (__AVR_AT90S2333__)
 304               	#  include <avr/io2333.h>
 305               	#elif defined (__AVR_AT90S2323__)
 306               	#  include <avr/io2323.h>
 307               	#elif defined (__AVR_AT90S2313__)
 308               	#  include <avr/io2313.h>
 309               	#elif defined (__AVR_ATtiny2313__)
 310               	#  include <avr/iotn2313.h>
 311               	#elif defined (__AVR_ATtiny2313A__)
 312               	#  include <avr/iotn2313a.h>
 313               	#elif defined (__AVR_ATtiny13__)
 314               	#  include <avr/iotn13.h>
 315               	#elif defined (__AVR_ATtiny13A__)
 316               	#  include <avr/iotn13a.h>
 317               	#elif defined (__AVR_ATtiny25__)
 318               	#  include <avr/iotn25.h>
 319               	#elif defined (__AVR_ATtiny4313__)
 320               	#  include <avr/iotn4313.h>
 321               	#elif defined (__AVR_ATtiny45__)
 322               	#  include <avr/iotn45.h>
 323               	#elif defined (__AVR_ATtiny85__)
 324               	#  include <avr/iotn85.h>
 325               	#elif defined (__AVR_ATtiny24__)
 326               	#  include <avr/iotn24.h>
 327               	#elif defined (__AVR_ATtiny24A__)
 328               	#  include <avr/iotn24a.h>
 329               	#elif defined (__AVR_ATtiny44__)
 330               	#  include <avr/iotn44.h>
 331               	#elif defined (__AVR_ATtiny44A__)
 332               	#  include <avr/iotn44a.h>
 333               	#elif defined (__AVR_ATtiny84__)
 334               	#  include <avr/iotn84.h>
 335               	#elif defined (__AVR_ATtiny261__)
 336               	#  include <avr/iotn261.h>
 337               	#elif defined (__AVR_ATtiny261A__)
 338               	#  include <avr/iotn261a.h>
 339               	#elif defined (__AVR_ATtiny461__)
 340               	#  include <avr/iotn461.h>
 341               	#elif defined (__AVR_ATtiny461A__)
 342               	#  include <avr/iotn461a.h>
 343               	#elif defined (__AVR_ATtiny861__)
 344               	#  include <avr/iotn861.h>
 345               	#elif defined (__AVR_ATtiny861A__)
 346               	#  include <avr/iotn861a.h>
 347               	#elif defined (__AVR_ATtiny43U__)
 348               	#  include <avr/iotn43u.h>
 349               	#elif defined (__AVR_ATtiny48__)
 350               	#  include <avr/iotn48.h>
 351               	#elif defined (__AVR_ATtiny88__)
 352               	#  include <avr/iotn88.h>
 353               	#elif defined (__AVR_ATtiny87__)
 354               	#  include <avr/iotn87.h>
 355               	#elif defined (__AVR_ATtiny167__)
 356               	#  include <avr/iotn167.h>
 357               	#elif defined (__AVR_AT90SCR100__)
 358               	#  include <avr/io90scr100.h>
 359               	#elif defined (__AVR_ATxmega16A4__)
 360               	#  include <avr/iox16a4.h>
 361               	#elif defined (__AVR_ATxmega16D4__)
 362               	#  include <avr/iox16d4.h>
 363               	#elif defined (__AVR_ATxmega32A4__)
 364               	#  include <avr/iox32a4.h>
 365               	#elif defined (__AVR_ATxmega32D4__)
 366               	#  include <avr/iox32d4.h>
 367               	#elif defined (__AVR_ATxmega64A1__)
 368               	#  include <avr/iox64a1.h>
 369               	#elif defined (__AVR_ATxmega64A3__)
 370               	#  include <avr/iox64a3.h>
 371               	#elif defined (__AVR_ATxmega64D3__)
 372               	#  include <avr/iox64d3.h>
 373               	#elif defined (__AVR_ATxmega128A1__)
 374               	#  include <avr/iox128a1.h>
 375               	#elif defined (__AVR_ATxmega128A3__)
 376               	#  include <avr/iox128a3.h>
 377               	#elif defined (__AVR_ATxmega128D3__)
 378               	#  include <avr/iox128d3.h>
 379               	#elif defined (__AVR_ATxmega192A3__)
 380               	#  include <avr/iox192a3.h>
 381               	#elif defined (__AVR_ATxmega192D3__)
 382               	#  include <avr/iox192d3.h>
 383               	#elif defined (__AVR_ATxmega256A3__)
 384               	#  include <avr/iox256a3.h>
 385               	#elif defined (__AVR_ATxmega256A3B__)
 386               	#  include <avr/iox256a3b.h>
 387               	#elif defined (__AVR_ATxmega256D3__)
 388               	#  include <avr/iox256d3.h>
 389               	#elif defined (__AVR_ATA6289__)
 390               	#  include <avr/ioa6289.h>
 391               	/* avr1: the following only supported for assembler programs */
 392               	#elif defined (__AVR_ATtiny28__)
 393               	#  include <avr/iotn28.h>
 394               	#elif defined (__AVR_AT90S1200__)
 395               	#  include <avr/io1200.h>
 396               	#elif defined (__AVR_ATtiny15__)
 397               	#  include <avr/iotn15.h>
 398               	#elif defined (__AVR_ATtiny12__)
 399               	#  include <avr/iotn12.h>
 400               	#elif defined (__AVR_ATtiny11__)
 401               	#  include <avr/iotn11.h>
 402               	#else
 403               	#  if !defined(__COMPILING_AVR_LIBC__)
 404               	#    warning "device type not defined"
 405               	#  endif
 406               	#endif
 407               	
 408               	#include <avr/portpins.h>
   1               	/* Copyright (c) 2003  Theodore A. Roth
 409               	
 410               	#include <avr/common.h>
   1               	/* Copyright (c) 2007 Eric B. Weddington
 411               	
 412               	#include <avr/version.h>
   1               	/* Copyright (c) 2005, Joerg Wunsch                               -*- c -*-
 413               	
 414               	/* Include fuse.h after individual IO header files. */
 415               	#include <avr/fuse.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 416               	
 417               	/* Include lock.h after individual IO header files. */
 418               	#include <avr/lock.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 419               	
  13               	#include <avr/interrupt.h>
   1               	/* Copyright (c) 2002,2005,2007 Marek Michalkiewicz
  14               	#include "kernel.h"
   1               	
  15               	#include "debug.h"
   1               	
  16               	
  17               	
  18               	
  19               	
  20               	;;============================define user address or macro starting=========================;; 
  21               	.equ     KER_TR ,         1000                            ;TickRate in Hz, not calculated      
  22               	.equ     KER_PRS,         0x03                            ;For prescaler 64, manually select   
  23               	.equ     KER_RLD,         0x82                            ;KER_RLD=0xFF-(F_CPU/KER_PRS/KER_TR) 
  24               	.equ     KER_STK_SZ,      128                             ;stack size in bytes for each task   
  25               	.equ     KER_MX_NTSK,     10                              ;max number of tasks                 
  26               	;;==============================define user address or macro end============================;; 
  27               	
  28               	
  29               	
  30               	
  31               	
  32               	;;===============================define data offsets starting===============================;; 
  33               	.equ     OFB_TICK0,       0x00                            ;offset from KerBase tick count byte0
  34               	.equ     OFB_TICK1,       0x01                            ;offset from KerBase tick count byte1
  35               	.equ     OFB_TICK2,       0x02                            ;offset from KerBase tick count byte2
  36               	.equ     OFB_TICK3,       0x03                            ;offset from KerBase tick count byte3
  37               	.equ     OFB_TICK4,       0x04                            ;offset from KerBase tick count byte4
  38               	.equ     OFB_PRS  ,       0x05                            ;offset from KerBase prescaler       
  39               	.equ     OFB_RLD  ,       0x06                            ;offset from KerBase counter reload  
  40               	.equ     OFB_TID  ,       0x07                            ;offset from KerBase task id         
  41               	.equ     OFB_NTSK ,       0x08                            ;offset from KerBase ntask           
  42               	.equ     OFB_LPR  ,       0x09                            ;offset from KerBase lowest priority 
  43               	.equ     OFB_PTID ,       0x0A                            ;offset from KerBase prio task_id    
  44               	.equ     OFB_UTC  ,       0x0B                            ;offset from KerBase usage tick cnt  
  45               	.equ     OFB_UATC ,       0x0C                            ;offset from KerBase active tick cnt 
  46               	.equ     OFB_USAGE,       0x0D                            ;offset from KerBase cpu usage       
  47               	.equ     OFB_SLCFG,       0x0E                            ;offset from KerBase sleep config    
  48               	.equ     OFM_MSPI ,       0x00                            ;offset from MSPZP msp index field   
  49               	.equ     OFM_MSPS ,       0x02                            ;offset from MSPZP msp starting      
  50               	;;==================================define data offsets end=================================;; 
  51               	
  52               	
  53               	
  54               	
  55               	
  56               	;;===============================define system macro starting===============================;; 
  57               	.equ     TASK_BLOCKED,    0x00                            ;KerSchSts val=0                     
  58               	.equ     TASK_READY,      0x01                            ;KerSchSts val=1                     
  59               	.equ     TASK_EXECUTING,  0x02                            ;KerSchSts val=2                     
  60               	.equ     TASK_SUSPENDED,  0x03                            ;KerSchSts val=3                     
  61               	.equ     TASK_CONS_LAT,   0x04                            ;KerSchSts val=3, constant latency   
  62               	.equ     SCH_MODE_HANDLER,0x00                            ;handler mode in KER_SLP_TIME_MGNT   
  63               	.equ     SCH_MODE_THREAD, 0x01                            ;thread mode in KER_SLP_TIME_MGNT    
  64               	;;==================================define system macro end=================================;; 
  65               	
  66               	
  67               	
  68               	
  69               	
  70               	;;===========================define hardware reg address starting===========================;; 
  71               	;SRAM Mapped Addresses, LDS/STS can be used                                                    
  72               	.equ     SRASSR  ,        0xB6                            ;manually defined ASSR in SRAM       
  73               	.equ     SROCR2B ,        0xB4                            ;manually defined OCR2B in SRAM      
  74               	.equ     SROCR2A ,        0xB3                            ;manually defined OCR2A in SRAM      
  75               	.equ     SRTCNT2 ,        0xB2                            ;manually defined TNCT2 in SRAM      
  76               	.equ     SRTCCR2B,        0xB1                            ;manually defined TCCR2B in SRAM     
  77               	.equ     SRTCCR2A,        0xB0                            ;manually defined TCCR2A in SRAM     
  78               	.equ     SRADMUX ,        0x7C                            ;manually defined ADMUX in SRAM      
  79               	.equ     SRADCSRB,        0x7B                            ;manually defined ADCSRB in SRAM     
  80               	.equ     SRADCSRA,        0x7A                            ;manually defined ADCSRA in SRAM     
  81               	.equ     SRTIMSK2,        0x70                            ;manually defined TIMSK2 in SRAM     
  82               	.equ     SRTIMSK1,        0x6F                            ;manually defined TIMSK1 in SRAM     
  83               	.equ     SRTIMSK0,        0x6E                            ;manually defined TIMSK0 in SRAM     
  84               	.equ     SRWDTCSR,        0x60                            ;manually defined WDTCSR in SRAM     
  85               	.equ     SRSREG  ,        0x5F                            ;manually defined SREG in SRAM       
  86               	.equ     SRSPH   ,        0x5E                            ;manually defined SPH in SRAM        
  87               	.equ     SRSPL   ,        0x5D                            ;manually defined SPL in SRAM        
  88               	.equ     SRMCUCR ,        0x55                            ;manually defined MCUCR in SRAM      
  89               	.equ     SRMCUSR ,        0x54                            ;manually defined MCUSR in SRAM      
  90               	.equ     SRSMCR  ,        0x53                            ;manually defined SMCR in SRAM       
  91               	.equ     SRACSR  ,        0x50                            ;manually defined ACSR in SRAM       
  92               	.equ     SROCR0B ,        0x48                            ;manually defined OCR0B in SRAM      
  93               	.equ     SROCR0A ,        0x47                            ;manually defined OCR0A in SRAM      
  94               	.equ     SRTCNT0 ,        0x46                            ;manually defined TCNT0 in SRAM      
  95               	.equ     SRTCCR0B,        0x45                            ;manually defined TCCR0B in SRAM     
  96               	.equ     SRTCCR0A,        0x44                            ;manually defined TCCR0A in SRAM     
  97               	.equ     SRTIFR2 ,        0x37                            ;manually defined TIFR2 in SRAM      
  98               	.equ     SRTIFR1 ,        0x36                            ;manually defined TIFR1 in SRAM      
  99               	.equ     SRTIFR0 ,        0x35                            ;manually defined TIFR0 in SRAM      
 100               	;IO Mapped Addresses, IN/OUT commands can be used                                              
 101               	.equ     IOSREG  ,        0x3F                            ;manually defined SREG in IO         
 102               	.equ     IOSPH   ,        0x3E                            ;manually defined SPH in IO          
 103               	.equ     IOSPL   ,        0x3D                            ;manually defined SPL in IO          
 104               	.equ     IOMCUCR ,        0x35                            ;manually defined MCUCR in IO        
 105               	.equ     IOMCUSR ,        0x34                            ;manually defined MCUSR in IO        
 106               	.equ     IOSMCR  ,        0x33                            ;manually defined SMCR in IO         
 107               	.equ     IOOCR0B ,        0x28                            ;manually defined OCR0B in IO        
 108               	.equ     IOOCR0A ,        0x27                            ;manually defined OCR0A in IO        
 109               	.equ     IOTCNT0 ,        0x26                            ;manually defined TCNT0 in IO        
 110               	.equ     IOTCCR0B,        0x25                            ;manually defined TCCR0B in IO       
 111               	.equ     IOTCCR0A,        0x24                            ;manually defined TCCR0A in IO       
 112               	.equ     IOTIFR2 ,        0x17                            ;manually defined TIFR2 in IO        
 113               	.equ     IOTIFR1 ,        0x16                            ;manually defined TIFR1 in IO        
 114               	.equ     IOTIFR0 ,        0x15                            ;manually defined TIFR0 in IO        
 115               	;;==============================define hardware reg address end=============================;; 
 116               	
 117               	
 118               	
 119               	
 120               	
 121               	;;=============================define global variables starting=============================;; 
 122               	.section   .bss                                                                                
 123               	                                                                                               
 124               	.global    KerBase                                        ;declare global space for kernel     
 125 0000 0000 0000 	KerBase:   .skip 16                                       ;see offset section                  
 125      0000 0000 
 125      0000 0000 
 125      0000 0000 
 126               	                                                                                               
 127               	.global    KerPSP                                         ;space for process stack pointers    
 128 0010 0000 0000 	KerPSP:    .skip KER_MX_NTSK*2                            ;2 bytes for each task               
 128      0000 0000 
 128      0000 0000 
 128      0000 0000 
 128      0000 0000 
 129               	                                                                                               
 130               	.global    KerSSZ                                         ;stack for main stack pointers       
 131 0024 0000 0000 	KerSSZ:    .skip 14                                       ;stack_ptr(2), MSPZPn(4)             
 131      0000 0000 
 131      0000 0000 
 131      0000 
 132               	                                                                                               
 133               	.global    KerSchSts                                      ;space for scheduler status          
 134 0032 0000 0000 	KerSchSts: .skip KER_MX_NTSK*1                            ;status(1)                           
 134      0000 0000 
 134      0000 
 135               	                                                                                               
 136               	.global    KerSchPr                                       ;space for scheduler priority        
 137 003c 0000 0000 	KerSchPr:  .skip KER_MX_NTSK*1                            ;priority(1)                         
 137      0000 0000 
 137      0000 
 138               	                                                                                               
 139               	.global    KerSchSlp                                      ;space for task sleep                
 140 0046 0000 0000 	KerSchSlp: .skip KER_MX_NTSK*2                            ;timing(2)                           
 140      0000 0000 
 140      0000 0000 
 140      0000 0000 
 140      0000 0000 
 141               	                                                                                               
 142               	.global    KerStack                                       ;space for stack                     
 143 005a 0000 0000 	KerStack:  .skip KER_STK_SZ*KER_MX_NTSK                   ;KER_STK_SZ bytes for each task      
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 144               	;;==============================define global variables end=================================;; 
 145               	
 146               	
 147               	
 148               	
 149               	
 150               	;;===============================define vector section starting=============================;; 
 151               	.section .vectors, "ax", @progbits                                                             
 152               	                                                                                               
 153 0000 0000 0000 	.org    0x000C                                            ;isr location for wdt                
 153      0000 0000 
 153      0000 0000 
 154:kernel.S      ****         RJMP  __vector_6                                                                       
 155               	.org    0x000E                                            ;isr location for timer2compa async  
 156:kernel.S      ****         RJMP  __vector_7                                                                       
 157               	.org    0x0010                                            ;isr location for timer2compb async  
 158:kernel.S      ****         RJMP  __vector_8                                                                       
 159               	.org    0x0012                                            ;isr location for timer2ovf async    
 160:kernel.S      ****         RJMP  __vector_9                                                                       
 161 0014 0000 0000 	.org    0x0020                                            ;isr location for timer0ovf          
 161      0000 0000 
 161      0000 0000 
 162:kernel.S      ****         RJMP  __vector_16                                                                      
 163               	;;=================================define vector section end================================;; 
 164               	
 165               	
 166               	
 167               	
 168               	
 169               	;;===============================define text section starting===============================;; 
 170               	.section .text                                                                                 
 171               	;;==================================define text section end=================================;; 
 172               	
 173               	
 174               	
 175               	
 176               	
 177               	;;==============================define global functions starting============================;; 
 178               	.global  Kernel_SysTick_Reg_Init                                                               
 179               	.global  Kernel_SysTick_Val_Get                                                                
 180               	.global  Kernel_SysTick_Val_Safely_Get                                                         
 181               	.global  Kernel_Interrupt_Sts_Get                                                              
 182               	.global  Kernel_Init                                                                           
 183               	.global  Kernel_Task_Create                                                                    
 184               	.global  Kernel_Start_Tasks                                                                    
 185               	.global  Kernel_Task_Idle                                                                      
 186               	.global  Kernel_Task_Sleep                                                                     
 187               	.global  Kernel_Task_Constant_Latency                                                          
 188               	.global  Kernel_Task_Constant_Latency_Sleep                                                    
 189               	.global  Kernel_PreSleep_Hook                                                                  
 190               	.global  Kernel_Task_Sleep_Time_Get                                                            
 191               	.global  Kernel_Task_Status_Get                                                                
 192               	.global  Kernel_NTask_Get                                                                      
 193               	.global  Kernel_Task_Prio_Get                                                                  
 194               	.global  Kernel_Lowest_Prio_Get                                                                
 195               	.global  Kernel_High_Prio_Task_ID_Get                                                          
 196               	.global  Kernel_Abs_High_Prio_Task_ID_Get                                                      
 197               	.global  Kernel_CPU_Usage_Get                                                                  
 198               	;;================================define global functions end===============================;; 
 199               	
 200               	
 201               	
 202               	
 203               	
 204               	;;============================debug pin operation init starting=============================;; 
 205               	;used registers          : R18, R19                                                            
 206               	;arg registers           : None                                                                
 207               	;return registers        : None                                                                
 208               	;unsafe access registers : R18, R19                                                            
 209               	.macro  KER_TIMER_INIT                                    ;1.25/1.50uS @8MHz    (10/12 clocks) 
 210               	        #ifdef KER_TIMER0_AS_TICK_SRC                                                          
 211               			;Timer0 overflow vect is used as tick source      ;total 1.5uS @8MHz      ( 12 clocks) 
 212               	        LDS   R18		         , KerBase+OFB_PRS        ;load prescaler         (  2 clocks) 
 213               			LDS   R19		         , KerBase+OFB_RLD        ;load reload val        (  2 clocks) 
 214               			STS   SRTCCR0B           , R18                    ;prescaler-> TCCR0B     (  2 clocks) 
 215               			STS   SRTCNT0            , R19                    ;reload val-> TCNT0     (  2 clocks) 
 216               			LDI   R18                , 0x01                   ;bit mask TOIE0         (  1 clock ) 
 217               			STS   SRTIMSK0           , R18                    ;set to TIMSK0          (  2 clocks) 
 218               			SEI                                               ;force enable interrupt (  1 clock ) 
 219               			#endif                                                                                 
 220               			                                                                                       
 221               			#ifdef KER_WDT_AS_TICK_SRC                                                             
 222               			;watchdog timer timeout is used as tick source    ;total 1.5uS @8MHz      ( 10 clocks) 
 223               	        WDR                                               ;reset wdt              (  1 clock ) 
 224               			LDS   R18                , SRWDTCSR               ;copy WDTCSR            (  2 clocks) 
 225               			ORI   R18                , 0x18                   ;set WDCE,WDE           (  1 clock ) 
 226               			STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
 227               			                                                                                       
 228               			#ifdef KER_WDT_TICK_16MS                                                               
 229               			LDI   R18                , 0x40                   ;WDIE                   (  1 clock ) 
 230               			#endif                                                                                 
 231               			                                                                                       
 232               	        #ifdef KER_WDT_TICK_32MS                                                               
 233               			LDI   R18                , 0x41                   ;WDIE, WDPS0            (  1 clock ) 
 234               			#endif                                                                                 
 235               			                                                                                       
 236               			#ifdef KER_WDT_TICK_64MS                                                               
 237               			LDI   R18                , 0x42                   ;WDIE, WDPS1            (  1 clock ) 
 238               			#endif                                                                                 
 239               			                                                                                       
 240               			#ifdef KER_WDT_TICK_125MS                                                              
 241               			LDI   R18                , 0x43                   ;WDIE, WDPS1, WDPS2     (  1 clock ) 
 242               			#endif                                                                                 
 243               			                                                                                       
 244               			#ifdef KER_WDT_TICK_250MS                                                              
 245               			LDI   R18                , 0x44                   ;WDIE, WDPS1, WDPS2     (  1 clock ) 
 246               			#endif                                                                                 
 247               			                                                                                       
 248               			#ifdef KER_WDT_TICK_500MS                                                              
 249               			LDI   R18                , 0x45                   ;WDIE, WDPS1, WDPS2     (  1 clock ) 
 250               			#endif                                                                                 
 251               			                                                                                       
 252               			#ifdef KER_WDT_TICK_1000MS                                                             
 253               			LDI   R18                , 0x46                   ;WDIE, WDPS1, WDPS2     (  1 clock ) 
 254               			#endif                                                                                 
 255               			                                                                                       
 256               			STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
 257               			SEI                                               ;force enable interrupt (  1 clock ) 
 258               			#endif                                                                                 
 259               	                                                                                               
 260               			#ifdef KER_TOSC_AS_TICK_SRC                                                            
 261               			;timer2 asynchornus mode is used as tick source   ;total 1.5uS @8MHz      ( 57 clocks) 
 262               			LDI   R18                , 0x00                   ;clear interrupts       (  1 clock ) 
 263               			STS   SRTIMSK2           , R18                    ;set val to TIMSK2      (  2 clocks) 
 264               			LDI   R18                , 0x20                   ;set AS2 bit            (  1 clock ) 
 265               			STS   SRASSR             , R18                    ;set val to ASSR        (  2 clocks) 
 266               			#ifdef KER_TOSC_TICK_1MS                                                               
 267               			LDI   R18                , 0x20                   ;1000Hz->clk/1/32       (  1 clock ) 
 268               			#endif                                                                                 
 269               			#ifdef KER_TOSC_TICK_10MS                                                              
 270               			LDI   R18                , 0x29                   ;100Hz->clk/8/41        (  1 clock ) 
 271               			#endif                                                                                 
 272               			#ifdef KER_TOSC_TICK_50MS                                                              
 273               			LDI   R18                , 0xCC                   ;20Hz->clk/8/204        (  1 clock ) 
 274               			#endif                                                                                 
 275               			#ifdef KER_TOSC_TICK_100MS                                                             
 276               			LDI   R18                , 0x66                   ;10Hz->clk/32/102       (  1 clock ) 
 277               			#endif                                                                                 
 278               			#ifdef KER_TOSC_TICK_250MS                                                             
 279               			LDI   R18                , 0x80                   ;4Hz->clk/64/128        (  1 clock ) 
 280               			#endif                                                                                 
 281               			#ifdef KER_TOSC_TICK_500MS                                                             
 282               			LDI   R18                , 0x80                   ;2Hz->clk/128/128       (  1 clock ) 
 283               			#endif                                                                                 
 284               			#ifdef KER_TOSC_TICK_1000MS                                                            
 285               			LDI   R18                , 0x80                   ;1Hz->clk/256/128       (  1 clock ) 
 286               			#endif                                                                                 
 287               			STS   SROCR2A            , R18                    ;set val to OCR2A       (  2 clocks) 
 288               			LDI   R18                , 0x00                   ;set val to reg         (  1 clock ) 
 289               			STS   SROCR2B            , R18                    ;set val to OCR2B       (  2 clocks) 
 290               			LDI   R18                , 0x02                   ;set WGM mode           (  1 clock ) 
 291               			STS   SRTCCR2A           , R18                    ;set val to TCCR2A      (  2 clocks) 
 292               			#ifdef KER_TOSC_TICK_1MS                                                               
 293               			LDI   R18                , 0x01                   ;1000Hz->clk/1/32       (  1 clock ) 
 294               			#endif                                                                                 
 295               			#ifdef KER_TOSC_TICK_10MS                                                              
 296               			LDI   R18                , 0x02                   ;100Hz->clk/8/41        (  1 clock ) 
 297               			#endif                                                                                 
 298               			#ifdef KER_TOSC_TICK_50MS                                                              
 299               			LDI   R18                , 0x02                   ;20Hz->clk/8/204        (  1 clock ) 
 300               			#endif                                                                                 
 301               			#ifdef KER_TOSC_TICK_100MS                                                             
 302               			LDI   R18                , 0x03                   ;10Hz->clk/32/102       (  1 clock ) 
 303               			#endif                                                                                 
 304               			#ifdef KER_TOSC_TICK_250MS                                                             
 305               			LDI   R18                , 0x04                   ;4Hz->clk/64/128        (  1 clock ) 
 306               			#endif                                                                                 
 307               			#ifdef KER_TOSC_TICK_500MS                                                             
 308               			LDI   R18                , 0x05                   ;2Hz->clk/128/128       (  1 clock ) 
 309               			#endif                                                                                 
 310               			#ifdef KER_TOSC_TICK_1000MS                                                            
 311               			LDI   R18                , 0x06                   ;1Hz->clk/256/128       (  1 clock ) 
 312               			#endif                                                                                 
 313               			STS   SRTCCR2B           , R18                    ;set val to TCCR2B      (  2 clocks) 
 314               			LDI   R18                , 0x00                   ;clear reg              (  1 clock ) 
 315               			STS   SRTCNT2            , R18                    ;set val to TCNT2       (  2 clocks) 
 316               		_KER_TC2_AUB\@:                                                                            
 317               		    LDS   R18                , SRASSR                 ;load ASSR              (  2 clocks) 
 318               	        ANDI  R18                , 0x02                   ;check bit TCR2AUB      (  1 clock ) 
 319               			BRNE  _KER_TC2_AUB\@                              ;wait until AUB cleared (  2 clocks) 
 320               		_KER_TC2_BUB\@:                                                                            
 321               		    LDS   R18                , SRASSR                 ;load ASSR              (  2 clocks) 
 322               	        ANDI  R18                , 0x01                   ;check bit TCR2BUB      (  1 clock ) 
 323               			BRNE  _KER_TC2_BUB\@                              ;wait until BUB cleared (  2 clocks) 
 324               		_KER_OC2_AUB\@:                                                                            
 325               		    LDS   R18                , SRASSR                 ;load ASSR              (  2 clocks) 
 326               	        ANDI  R18                , 0x08                   ;check bit OR2AUB       (  1 clock ) 
 327               			BRNE  _KER_OC2_AUB\@                              ;wait until AUB cleared (  2 clocks) 
 328               		_KER_OC2_BUB\@:                                                                            
 329               		    LDS   R18                , SRASSR                 ;load ASSR              (  2 clocks) 
 330               	        ANDI  R18                , 0x04                   ;check bit OCR2BUB      (  1 clock ) 
 331               			BRNE  _KER_OC2_BUB\@                              ;wait until BUB cleared (  2 clocks) 
 332               		_KER_TC2_UB\@:                                                                             
 333               		    LDS   R18                , SRASSR                 ;load ASSR              (  2 clocks) 
 334               	        ANDI  R18                , 0x10                   ;check bit TCNT2UB      (  1 clock ) 
 335               			BRNE  _KER_TC2_UB\@                               ;wait until BUB cleared (  2 clocks) 
 336               		_KER_TC2_TOV2\@:                                                                           
 337               		    LDS   R18                , SRTIFR2                ;load TIFR2             (  2 clocks) 
 338               	        ANDI  R18                , 0x01                   ;check bit TOV2         (  1 clock ) 
 339               	        BREQ  _KER_TC2_OCF2A\@                            ;bit cleared, jump next (  2 clocks) 
 340               			LDI   R18                , 0x01                   ;set bit                (  1 clock ) 
 341               			STS   SRTIFR2            , R18                    ;set val                (  2 clocks) 
 342               	    _KER_TC2_OCF2A\@:                                                                          
 343               		    LDS   R18                , SRTIFR2                ;load TIFR2             (  2 clocks) 
 344               	        ANDI  R18                , 0x02                   ;check bit OCF2A        (  1 clock ) 
 345               	        BREQ  _KER_TC2_OCF2B\@                            ;bit cleared, jump next (  2 clocks) 
 346               			LDI   R18                , 0x02                   ;set bit                (  1 clock ) 
 347               			STS   SRTIFR2            , R18                    ;set val                (  2 clocks) 
 348               		_KER_TC2_OCF2B\@:                                                                          
 349               		    LDS   R18                , SRTIFR2                ;load TIFR2             (  2 clocks) 
 350               	        ANDI  R18                , 0x04                   ;check bit OCF2B        (  1 clock ) 
 351               	        BREQ  _KER_TC2_INTEN\@                            ;bit cleared, jump next (  2 clocks) 
 352               			LDI   R18                , 0x04                   ;set bit                (  1 clock ) 
 353               			STS   SRTIFR2            , R18                    ;set val                (  2 clocks) 
 354               	    _KER_TC2_INTEN\@:                                                                          
 355               			LDI   R18                , 0x02                   ;set TOIE2 bit          (  1 clock ) 
 356               			STS   SRTIMSK2           , R18                    ;set val to TIMSK2      (  2 clocks) 
 357               	        SEI                                               ;force enable interrupt (  1 clock ) 
 358               			#endif                                                                                 
 359               	.endm                                                                                          
 360               	;;==============================debug pin operation init end================================;; 
 361               	
 362               	
 363               	
 364               	
 365               	
 366               	;;============================debug pin operation init starting=============================;; 
 367               	;used registers          : None                                                                
 368               	;arg registers           : None                                                                
 369               	;return registers        : None                                                                
 370               	;unsafe access registers : None                                                                
 371               	.macro  KER_DEBUG_PIN_INIT                                ;total 0.5uS @8MHz      (  4 clocks) 
 372               	        #ifdef KER_DBG_ENABLE                                                                  
 373               			CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear port bit         (  2 clocks) 
 374               			SBI   KER_DBG_DDR        , KER_DBG_PIN            ;set bit in DDR         (  2 clocks) 
 375               			#endif                                                                                 
 376               	.endm                                                                                          
 377               	;;==============================debug pin operation init end================================;; 
 378               	
 379               	
 380               	
 381               	
 382               	
 383               	;;===========================debug pin operation set starting===============================;; 
 384               	;used registers          : None                                                                
 385               	;arg registers           : None                                                                
 386               	;return registers        : None                                                                
 387               	;unsafe access registers : None                                                                
 388               	.macro  KER_DEBUG_PIN_SET                                 ;total 0.25uS @8MHz     (  2 clocks) 
 389               	        #ifdef KER_DBG_ENABLE                                                                  
 390               	        SBI   KER_DBG_PORT       , KER_DBG_PIN            ;set gpio               (  2 clocks) 
 391               			#endif                                                                                 
 392               	.endm                                                                                          
 393               	;;==============================debug pin operation set end=================================;; 
 394               	
 395               	
 396               	
 397               	
 398               	
 399               	;;===========================debug pin operation clear starting=============================;; 
 400               	;used registers          : None                                                                
 401               	;arg registers           : None                                                                
 402               	;return registers        : None                                                                
 403               	;unsafe access registers : None                                                                
 404               	.macro  KER_DEBUG_PIN_CLEAR                               ;total 0.25uS @8MHz     (  2 clocks) 
 405               	        #ifdef KER_DBG_ENABLE                                                                  
 406               			CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear gpio             (  2 clocks) 
 407               			#endif                                                                                 
 408               	.endm                                                                                          
 409               	;;==============================debug pin operation clear end===============================;; 
 410               	
 411               	
 412               	
 413               	
 414               	
 415               	;;==============================reload counter value starting===============================;; 
 416               	;used registers          : R18                                                                 
 417               	;arg registers           : None                                                                
 418               	;return registers        : None                                                                
 419               	;unsafe access registers : R18                                                                 
 420               	.macro  KER_COUNTER_RELOAD                                ;total 0.5uS @8MHz      (  4 clocks) 
 421               	        LDS   R18                , KerBase+OFB_RLD        ;load reload value      (  2 clocks) 
 422               			STS   SRTCNT0            , R18                    ;Set value to TCNT0     (  2 clocks) 
 423               	.endm                                                                                          
 424               	;;=================================reload counter value end=================================;; 
 425               	
 426               	
 427               	
 428               	
 429               	
 430               	;;=================================save r0 & sreg starting==================================;; 
 431               	;used registers          : R0                                                                  
 432               	;arg registers           : None                                                                
 433               	;return registers        : None                                                                
 434               	;unsafe access registers : None                                                                
 435               	.macro  KER_SAVE_R0_SREG                                  ;total 0.63uS @8MHz     (  5 clocks) 
 436               	        PUSH  R0                                          ;save R0                (  2 clocks) 
 437               			IN    R0                 , IOSREG                 ;load SREG              (  1 clock ) 
 438               			PUSH  R0                                          ;save SREG              (  2 clocks) 
 439               	.endm                                                                                          
 440               	;;====================================save r0 & sreg end====================================;; 
 441               	
 442               	
 443               	
 444               	
 445               	
 446               	;;===============================save r0, sreg & cli starting===============================;; 
 447               	;used registers          : R0                                                                  
 448               	;arg registers           : None                                                                
 449               	;return registers        : None                                                                
 450               	;unsafe access registers : None                                                                
 451               	.macro  KER_SAVE_R0_CLI_SREG                              ;total 0.75uS @8MHz     (  6 clocks) 
 452               	        PUSH  R0                                          ;push R0                (  2 clocks) 
 453               			IN    R0                 , IOSREG                 ;save SREG              (  1 clock ) 
 454               			CLI                                               ;clear interrupt        (  1 clock ) 
 455               			PUSH  R0                                          ;save SREG              (  2 clocks) 
 456               	.endm                                                                                          
 457               	;;=================================save r0, sreg & cli end==================================;; 
 458               	
 459               	
 460               	
 461               	
 462               	
 463               	;;===================================save r1~r31 starting===================================;; 
 464               	;used registers          : R1~R31                                                              
 465               	;arg registers           : None                                                                
 466               	;return registers        : None                                                                
 467               	;unsafe access registers : None                                                                
 468               	.macro  KER_SAVE_R1_R31                                   ;total 7.88uS @8MHz     ( 63 clocks) 
 469               			PUSH  R1                                          ;save R1                (  2 clocks) 
 470               			CLR   R1                                          ;clear R1               (  1 clock ) 
 471               			PUSH  R2                                          ;save R2                (  2 clocks) 
 472               			PUSH  R3                                          ;save R3                (  2 clocks) 
 473               			PUSH  R4                                          ;save R4                (  2 clocks) 
 474               			PUSH  R5                                          ;save R5                (  2 clocks) 
 475               			PUSH  R6                                          ;save R6                (  2 clocks) 
 476               			PUSH  R7                                          ;save R7                (  2 clocks) 
 477               			PUSH  R8                                          ;save R8                (  2 clocks) 
 478               			PUSH  R9                                          ;save R9                (  2 clocks) 
 479               			PUSH  R10                                         ;save R10               (  2 clocks) 
 480               			PUSH  R11                                         ;save R11               (  2 clocks) 
 481               			PUSH  R12                                         ;save R12               (  2 clocks) 
 482               			PUSH  R13                                         ;save R13               (  2 clocks) 
 483               			PUSH  R14                                         ;save R14               (  2 clocks) 
 484               			PUSH  R15                                         ;save R15               (  2 clocks) 
 485               			PUSH  R16                                         ;save R16               (  2 clocks) 
 486               			PUSH  R17                                         ;save R17               (  2 clocks) 
 487               			PUSH  R18                                         ;save R18               (  2 clocks) 
 488               			PUSH  R19                                         ;save R19               (  2 clocks) 
 489               			PUSH  R20                                         ;save R20               (  2 clocks) 
 490               			PUSH  R21                                         ;save R21               (  2 clocks) 
 491               			PUSH  R22                                         ;save R22               (  2 clocks) 
 492               			PUSH  R23                                         ;save R23               (  2 clocks) 
 493               			PUSH  R24                                         ;save R24               (  2 clocks) 
 494               			PUSH  R25                                         ;save R25               (  2 clocks) 
 495               			PUSH  R26                                         ;save R26               (  2 clocks) 
 496               			PUSH  R27                                         ;save R27               (  2 clocks) 
 497               			PUSH  R28                                         ;save R28               (  2 clocks) 
 498               			PUSH  R29                                         ;save R29               (  2 clocks) 
 499               			PUSH  R30                                         ;save R30               (  2 clocks) 
 500               			PUSH  R31                                         ;save R31               (  2 clocks) 
 501               	.endm                                                                                          
 502               	;;======================================save r1~r31 end=====================================;; 
 503               	
 504               	
 505               	
 506               	
 507               	
 508               	;;==============================context save handler starting===============================;; 
 509               	;used registers          : R0~R31                                                              
 510               	;arg registers           : None                                                                
 511               	;return registers        : None                                                                
 512               	;unsafe access registers : None                                                                
 513               	.macro  KER_CONTEXT_SAVE_HANDLER                          ;total 8.5uS @8MHz      ( 68 clocks) 
 514               	        KER_SAVE_R0_SREG                                  ;save r0, sreg          (  5 clocks) 
 515               	        KER_SAVE_R1_R31                                   ;save r1~r31            ( 63 clocks) 
 516               	.endm                                                                                          
 517               	;;=================================context save handler end=================================;; 
 518               	
 519               	
 520               	
 521               	
 522               	
 523               	;;===============================context save thread starting===============================;; 
 524               	;used registers          : R0~R31                                                              
 525               	;arg registers           : None                                                                
 526               	;return registers        : None                                                                
 527               	;unsafe access registers : None                                                                
 528               	.macro  KER_CONTEXT_SAVE_THREAD                           ;total 8.63uS @8MHz     ( 69 clocks) 
 529               	        KER_SAVE_R0_CLI_SREG                              ;save r0, sreg          (  6 clocks) 
 530               	        KER_SAVE_R1_R31                                   ;save r1~r31            ( 63 clocks) 
 531               	.endm                                                                                          
 532               	;;==================================context save thread end=================================;; 
 533               	
 534               	
 535               	
 536               	
 537               	
 538               	
 539               	;;================================restore r0 & sreg starting================================;; 
 540               	;used registers          : R0                                                                  
 541               	;arg registers           : None                                                                
 542               	;return registers        : None                                                                
 543               	;unsafe access registers : None                                                                
 544               	.macro  KER_RESTORE_R0_SREG                               ;total 0.63uS @8MHz     (  5 clocks) 
 545               	        POP   R0                                          ;fetch SREG             (  2 clocks) 
 546               			OUT   IOSREG             , R0                     ;load SREG              (  1 clock ) 
 547               			POP   R0                                          ;restore R0             (  2 clocks) 
 548               	.endm                                                                                          
 549               	;;==================================restore r0 & sreg end===================================;; 
 550               	
 551               	
 552               	
 553               	
 554               	
 555               	;;==============================restore r0, sreg & sei starting=============================;; 
 556               	;used registers          : R0                                                                  
 557               	;arg registers           : None                                                                
 558               	;return registers        : None                                                                
 559               	;unsafe access registers : None                                                                
 560               	.macro  KER_RESTORE_R0_SREG_SEI                           ;total 0.75uS @8MHz     (  6 clocks) 
 561               	        POP   R0                                          ;fetch SREG             (  2 clocks) 
 562               			OUT   IOSREG             , R0                     ;load SREG              (  1 clock ) 
 563               			POP   R0                                          ;restore R0             (  2 clocks) 
 564               			SEI                                               ;enable interrupt       (  1 clock ) 
 565               	.endm                                                                                          
 566               	;;===============================restore r0, sreg & sei end=================================;; 
 567               	
 568               	
 569               	
 570               	
 571               	
 572               	;;=================================restore r1~r31 starting==================================;; 
 573               	;used registers          : R1~R31                                                              
 574               	;arg registers           : None                                                                
 575               	;return registers        : None                                                                
 576               	;unsafe access registers : None                                                                
 577               	.macro  KER_RESTORE_R1_R31                                ;total 8.38uS @8MHz     ( 62 clocks) 
 578               			POP   R31                                         ;restore R31            (  2 clocks) 
 579               			POP   R30                                         ;restore R30            (  2 clocks) 
 580               			POP   R29                                         ;restore R29            (  2 clocks) 
 581               			POP   R28                                         ;restore R28            (  2 clocks) 
 582               			POP   R27                                         ;restore R27            (  2 clocks) 
 583               			POP   R26                                         ;restore R26            (  2 clocks) 
 584               			POP   R25                                         ;restore R25            (  2 clocks) 
 585               			POP   R24                                         ;restore R24            (  2 clocks) 
 586               			POP   R23                                         ;restore R23            (  2 clocks) 
 587               			POP   R22                                         ;restore R22            (  2 clocks) 
 588               			POP   R21                                         ;restore R21            (  2 clocks) 
 589               			POP   R20                                         ;restore R20            (  2 clocks) 
 590               			POP   R19                                         ;restore R19            (  2 clocks) 
 591               			POP   R18                                         ;restore R18            (  2 clocks) 
 592               			POP   R17                                         ;restore R17            (  2 clocks) 
 593               			POP   R16                                         ;restore R16            (  2 clocks) 
 594               			POP   R15                                         ;restore R15            (  2 clocks) 
 595               			POP   R14                                         ;restore R14            (  2 clocks) 
 596               			POP   R13                                         ;restore R13            (  2 clocks) 
 597               			POP   R12                                         ;restore R12            (  2 clocks) 
 598               			POP   R11                                         ;restore R11            (  2 clocks) 
 599               			POP   R10                                         ;restore R10            (  2 clocks) 
 600               			POP   R9                                          ;restore R9             (  2 clocks) 
 601               			POP   R8                                          ;restore R8             (  2 clocks) 
 602               			POP   R7                                          ;restore R7             (  2 clocks) 
 603               			POP   R6                                          ;restore R6             (  2 clocks) 
 604               			POP   R5                                          ;restore R5             (  2 clocks) 
 605               			POP   R4                                          ;restore R4             (  2 clocks) 
 606               			POP   R3                                          ;restore R3             (  2 clocks) 
 607               			POP   R2                                          ;restore R2             (  2 clocks) 
 608               			POP   R1                                          ;restore R1             (  2 clocks) 
 609               	.endm                                                                                          
 610               	;;====================================restore r1~r31 end====================================;; 
 611               	
 612               	
 613               	
 614               	
 615               	
 616               	;;=============================context restore handler starting=============================;; 
 617               	;used registers          : R0~R31                                                              
 618               	;arg registers           : None                                                                
 619               	;return registers        : None                                                                
 620               	;unsafe access registers : None                                                                
 621               	.macro  KER_CONTEXT_RESTORE_HANDLER                       ;total 8.38uS @8MHz     ( 67 clocks) 
 622               	        KER_RESTORE_R1_R31                                ;restore r1~r31         ( 62 clocks) 
 623               			KER_RESTORE_R0_SREG                               ;restore r0, sreg       (  5 clocks) 
 624               	.endm                                                                                          
 625               	;;===============================context restore handler end================================;; 
 626               	
 627               	
 628               	
 629               	
 630               	
 631               	;;=============================context restore thread starting==============================;; 
 632               	;used registers          : R0~R31                                                              
 633               	;arg registers           : None                                                                
 634               	;return registers        : None                                                                
 635               	;unsafe access registers : None                                                                
 636               	.macro  KER_CONTEXT_RESTORE_THREAD                        ;total 8.75uS @8MHz     ( 68 clocks) 
 637               	        KER_RESTORE_R1_R31                                ;restore r1~r31         ( 62 clocks) 
 638               			KER_RESTORE_R0_SREG_SEI                           ;restore r0, sreg       (  6 clocks) 
 639               	.endm                                                                                          
 640               	;;================================context restore thread end================================;; 
 641               	
 642               	
 643               	
 644               	
 645               	
 646               	;;==============================fetch current task id starting==============================;; 
 647               	;used registers          : R20                                                                 
 648               	;arg registers           : None                                                                
 649               	;return registers        : R20 (Current task id)                                               
 650               	;unsafe access registers : R20                                                                 
 651               	.macro  KER_FETCH_CURR_TID                                ;total 0.25uS @8MHz     (  2 clocks) 
 652               	        LDS   R20                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 653               	.endm                                                                                          
 654               	;;================================fetch current task id end=================================;; 
 655               	
 656               	
 657               	
 658               	
 659               	
 660               	;;==================================fetch ntask starting====================================;; 
 661               	;used registers          : R21                                                                 
 662               	;arg registers           : None                                                                
 663               	;return registers        : R21 (ntask)                                                         
 664               	;unsafe access registers : R21                                                                 
 665               	.macro  KER_FETCH_NTASK                                   ;total 0.25uS @8MHz     (  2 clocks) 
 666               	        LDS   R21                , KerBase+OFB_NTSK       ;fetch task_id          (  2 clocks) 
 667               	.endm                                                                                          
 668               	;;====================================fetch ntask end=======================================;; 
 669               	
 670               	
 671               	
 672               	
 673               	
 674               	;;=========================calculate offset addr in words starting==========================;; 
 675               	;used registers          : R18, R30(ZL), R31(ZH)                                               
 676               	;arg registers           : R30(ZL), R31(ZH)                                                    
 677               	;return registers        : R30(ZL), R31(ZH)                                                    
 678               	;unsafe access registers : R18, R30(ZL), R31(ZH)                                               
 679               	.macro  KER_CALC_ADDR_OFF_WORD                            ;total 0.75uS @8MHz     (  6 clocks) 
 680               	        LDS   R18                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 681               			LSL   R18                                         ;left shift to multiply (  1 clock ) 
 682               			ADD   ZL                 , R18                    ;add offset to array    (  1 clock ) 
 683               			LDI   R18                , 0x00                   ;clear for carry prop   (  1 clock ) 
 684               			ADC   ZH                 , R18                    ;add carry if any       (  1 clock ) 
 685               	.endm                                                                                          
 686               	;;=============================calculate offset addr in words end===========================;; 
 687               	
 688               	
 689               	
 690               	
 691               	
 692               	;;=========================calculate offset addr in bytes starting==========================;; 
 693               	;used registers          : R18, R30(ZL), R31(ZH)                                               
 694               	;arg registers           : R30(ZL), R31(ZH)                                                    
 695               	;return registers        : R30(ZL), R31(ZH)                                                    
 696               	;unsafe access registers : R18, R30(ZL), R31(ZH)                                               
 697               	.macro  KER_CALC_ADDR_OFF_BYTES                           ;total 0.63uS @8MHz     (  5 clocks) 
 698               	        LDS   R18                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 699               			ADD   ZL                 , R18                    ;add offset to array    (  1 clock ) 
 700               			LDI   R18                , 0x00                   ;clear for carry prop   (  1 clock ) 
 701               			ADC   ZH                 , R18                    ;add carry if any       (  1 clock ) 
 702               	.endm                                                                                          
 703               	;;=============================calculate offset addr in bytes end===========================;; 
 704               	
 705               	
 706               	
 707               	
 708               	
 709               	;;===============================save current task sp starting==============================;; 
 710               	;used registers          : R18, R19, R30(ZL), R31(ZH)                                          
 711               	;arg registers           : None                                                                
 712               	;return registers        : None                                                                
 713               	;unsafe access registers : R18, R19, R30(ZL), R31(ZH)                                          
 714               	.macro  KER_SAVE_CURR_TASK_SP                             ;total 1.75uS @8MHz     ( 14 clocks) 
 715               			LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 716               			LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 717               			KER_CALC_ADDR_OFF_WORD                            ;calc offset            (  6 clocks) 
 718               			IN    R18                , IOSPL                  ;fetch SPL0             (  1 clock ) 
 719               			IN    R19                , IOSPH                  ;fetch SPH0             (  1 clock ) 
 720               			STD   Z+0                , R18                    ;store SPL at ZP+0      (  2 clocks) 
 721               			STD   Z+1                , R19                    ;store SPH at ZP+1      (  2 clocks) 
 722               	.endm                                                                                          
 723               	;;================================save current task sp end==================================;; 
 724               	
 725               	
 726               	
 727               	
 728               	
 729               	;;==============================load next task id starting==================================;; 
 730               	;used registers          : R18, R19                                                            
 731               	;arg registers           : None                                                                
 732               	;return registers        : None                                                                
 733               	;unsafe access registers : R18, R19                                                            
 734               	.macro  KER_LOAD_NEXT_TASK_ID                             ;total 1.63uS @8MHz     ( 13 clocks) 
 735               			LDS   R18                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 736               			INC   R18                                         ;increment task_id      (  1 clock ) 
 737               			LDS   R19                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 738               		_MOD_CONT\@:                                          ;use local label                     
 739               		    CP    R18                , R19                    ;compare tid with ntask (  1 clock ) 
 740               			BRLO  _MOD_DONE\@                                 ;if tid<ntask, done     (  2 clocks) 
 741               			SUB   R18                , R19                    ;subtract ntask from tid(  1 clock ) 
 742               			RJMP  _MOD_CONT\@                                 ;go to loop start       (  2 clocks) 
 743               		_MOD_DONE\@:                                          ;use local label                     
 744               		    STS   KerBase+OFB_TID    , R18                    ;save task_id%ntask     (  2 clocks) 
 745               	.endm                                                                                          
 746               	;;=================================load next task id end====================================;; 
 747               	
 748               	
 749               	
 750               	
 751               	
 752               	;;==============================increment tick counter starting=============================;; 
 753               	;used registers          : R18, R19                                                            
 754               	;arg registers           : None                                                                
 755               	;return registers        : None                                                                
 756               	;unsafe access registers : R18, R19                                                            
 757               	.macro  KER_TICK_INCREMENT                                ;total 3.25uS @8MHz     ( 26 clocks) 
 758               			LDS   R18                , KerBase+OFB_TICK0      ;load Byte0             (  2 clocks) 
 759               			INC   R18                                         ;add 1 with Byte0       (  1 clock ) 
 760               			STS   KerBase+OFB_TICK0  , R18                    ;set Byte0              (  2 clocks) 
 761               			LDI   R19                , 0x00                   ;clear reg              (  1 clock ) 
 762               			LDS   R18                , KerBase+OFB_TICK1      ;load Byte1             (  2 clocks) 
 763               			ADC   R18                , R19                    ;add carry with Byte1   (  1 clock ) 
 764               			STS   KerBase+OFB_TICK1  , R18                    ;set Byte1              (  2 clocks) 
 765               			LDS   R18                , KerBase+OFB_TICK2      ;load Byte2             (  2 clocks) 
 766               			ADC   R18                , R19                    ;add carry with Byte2   (  1 clock ) 
 767               			STS   KerBase+OFB_TICK2  , R18                    ;set Byte2              (  2 clocks) 
 768               			LDS   R18                , KerBase+OFB_TICK3      ;load Byte3             (  2 clocks) 
 769               			ADC   R18                , R19                    ;add carry with Byte3   (  1 clock ) 
 770               			STS   KerBase+OFB_TICK3  , R18                    ;set Byte3              (  2 clocks) 
 771               			LDS   R18                , KerBase+OFB_TICK4      ;load Byte4             (  2 clocks) 
 772               			ADC   R18                , R19                    ;add carry with Byte4   (  1 clock ) 
 773               			STS   KerBase+OFB_TICK4  , R18                    ;set Byte4              (  2 clocks) 
 774               	.endm                                                                                          
 775               	;;=================================increment tick counter end===============================;; 
 776               	
 777               	
 778               	
 779               	
 780               	
 781               	;;==============================load task id & sp starting==================================;; 
 782               	;used registers          : R18, R19, R30(ZL), R31(ZH)                                          
 783               	;arg registers           : None                                                                
 784               	;return registers        : None                                                                
 785               	;unsafe access registers : R18, R19, R30(ZL), R31(ZH)                                          
 786               	.macro  KER_LOAD_TASK_ID_AND_SP                           ;total 1.75uS @8MHz     ( 14 clocks) 
 787               			LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 788               			LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 789               			KER_CALC_ADDR_OFF_WORD                            ;calc offset            (  6 clocks) 
 790               			LDD   R18                , Z+0                    ;load SPL at ZP         (  2 clocks) 
 791               			LDD   R19                , Z+1                    ;load SPH at ZP         (  2 clocks) 
 792               			OUT   IOSPL              , R18                    ;load SPL0              (  1 clock ) 
 793               			OUT   IOSPH              , R19                    ;load SPH0              (  1 clock ) 
 794               	.endm                                                                                          
 795               	;;=================================load task id & sp end====================================;; 
 796               	
 797               	
 798               	
 799               	
 800               	
 801               	;;================================push msp & zp starting====================================;; 
 802               	;used registers          : R18, R19, R26(XL), R27(XH), R30(ZL), R31(ZH)                        
 803               	;arg registers           : None                                                                
 804               	;return registers        : None                                                                
 805               	;unsafe access registers : R18, R19, R26(XL), R27(XH), R30(ZL), R31(ZH)                        
 806               	.macro  KER_PUSH_MSP_ZP                                   ;total 2.25uS @8MHz     ( 18 clocks) 
 807               	        LDS   XL                 , KerSSZ+OFM_MSPI+0      ;load val low           (  2 clocks) 
 808               			LDS   XH                 , KerSSZ+OFM_MSPI+1      ;load val high          (  2 clocks) 
 809               			IN    R18                , IOSPL                  ;copy                   (  1 clock ) 
 810               			IN    R19                , IOSPH                  ;copy                   (  1 clock ) 
 811               			ST    X+                 , R18                    ;store main SPL         (  2 clocks) 
 812               	        ST    X+                 , R19                    ;store main SPH         (  2 clocks) 
 813               			ST    X+                 , ZL                     ;store main ZL          (  2 clocks) 
 814               			ST    X+                 , ZH                     ;store main ZH          (  2 clocks) 
 815               			STS   KerSSZ+OFM_MSPI+0  , XL                     ;store new index        (  2 clocks) 
 816               			STS   KerSSZ+OFM_MSPI+1  , XH                     ;store new index        (  2 clocks) 
 817               	.endm                                                                                          
 818               	;;===================================push msp & zp end======================================;; 
 819               	
 820               	
 821               	
 822               	
 823               	
 824               	;;=================================pop msp & zp starting====================================;; 
 825               	;used registers          : R18, R19, R26(XL), R27(XH), R30(ZL), R31(ZH)                        
 826               	;arg registers           : None                                                                
 827               	;return registers        : None                                                                
 828               	;unsafe access registers : R18, R19, R26(XL), R27(XH), R30(ZL), R31(ZH)                        
 829               	.macro  KER_POP_MSP_ZP                                    ;total 2.25uS @8MHz     ( 18 clocks) 
 830               			LDS   XL                 , KerSSZ+OFM_MSPI+0      ;load val low           (  2 clocks) 
 831               			LDS   XH                 , KerSSZ+OFM_MSPI+1      ;load val high          (  2 clocks) 
 832               			LD    ZH                 , -X                     ;load ZH                (  2 clocks) 
 833               			LD    ZL                 , -X                     ;load ZL                (  2 clocks) 
 834               			LD    R19                , -X                     ;load main SPH          (  2 clocks) 
 835               			LD    R18                , -X                     ;load main SPL          (  2 clocks) 
 836               			OUT   IOSPL              , R18                    ;set SPL                (  1 clock ) 
 837               			OUT   IOSPH              , R19                    ;set SPH                (  1 clock ) 
 838               			STS   KerSSZ+OFM_MSPI+0  , XL                     ;store new index        (  2 clocks) 
 839               			STS   KerSSZ+OFM_MSPI+1  , XH                     ;store new index        (  2 clocks) 
 840               	.endm                                                                                          
 841               	;;====================================pop msp & zp end======================================;; 
 842               	
 843               	
 844               	
 845               	
 846               	
 847               	;;============================sleep timeout management starting=============================;; 
 848               	;used registers          : R18, R19, R20, R24, R30(ZL), R31(ZH)                                
 849               	;arg registers           : R24 (SCH_MODE_HANDLER/SCH_MODE_THREAD)                              
 850               	;return registers        : R24 (READY/BLOCKED/EXECUTING/SUSPENDED/CONS_LAT)                    
 851               	;unsafe access registers : R18, R19, R20, R24, R30(ZL), R31(ZH)                                
 852               	.macro  KER_SLP_TIME_MGNT                                 ;total 6.50uS @8MHz     ( 52 clocks) 
 853               			LDI   ZL                 , lo8(KerSchSlp)         ;fetch base pos low     (  1 clock ) 
 854               			LDI   ZH                 , hi8(KerSchSlp)         ;fetch base pos high    (  1 clock ) 
 855               			KER_CALC_ADDR_OFF_WORD                            ;calc offset            (  6 clocks) 
 856               			;fetch current value from ram, if val=0, skip decrement                                
 857               	        LDD   R18                , Z+0                    ;load val low byte      (  2 clocks) 
 858               			LDD   R19                , Z+1                    ;load val high byte     (  2 clocks) 
 859               			MOV   R20                , R18                    ;copy                   (  1 clock ) 
 860               			OR    R20                , R19                    ;or high & low bytes    (  1 clock ) 
 861               			BREQ  _VAL_NULL\@                                 ;val=0, save sts        (  2 clocks) 
 862               	        CPI   R24                , SCH_MODE_THREAD        ;if arg=1, thread mode  (  1 clock ) 
 863               			BREQ  _VAL_NOT_NULL\@                             ;no need to dec val     (  2 clocks) 
 864               			;R19:R18 contains 16 bit sleep timer val, decrease val by 1                            
 865               			LDI   R20                , 0x01                   ;set val 1              (  1 clock ) 
 866               	        SUB   R18                , R20                    ;subtract low byte      (  1 clock ) 
 867               			LDI   R20                , 0x00                   ;clear                  (  1 clock ) 
 868               			SBC   R19                , R20                    ;subtract carry if any  (  1 clock ) 
 869               			;store new value                                                                       
 870               			STD   Z+0                , R18                    ;store low byte         (  2 clocks) 
 871               			STD   Z+1                , R19                    ;store low byte         (  2 clocks) 
 872               			MOV   R20                , R18                    ;copy                   (  1 clock ) 
 873               			OR    R20                , R19                    ;or high & low bytes    (  1 clock ) 
 874               			BRNE  _VAL_NOT_NULL\@                             ;val!=0                 (  2 clocks) 
 875               		_VAL_NULL\@:                                                                               
 876               		    ;find ram address for status                                                           
 877               		    LDI   ZL                 , lo8(KerSchSts)         ;fetch base pos low     (  1 clock ) 
 878               			LDI   ZH                 , hi8(KerSchSts)         ;fetch base pos high    (  1 clock ) 
 879               	        KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 880               			;update flag as task is ready                                                          
 881               			LDI   R24                , TASK_READY             ;set TASK_READY         (  1 clock ) 
 882               			ST    Z                  , R24                    ;update flag            (  2 clocks) 
 883               			RJMP  _EXIT_SLP_TIME\@                            ;jump to exit           (  2 clocks) 
 884               	    _VAL_NOT_NULL\@:                                                                           
 885               		    LDI   ZL                 , lo8(KerSchSts)         ;fetch base pos low     (  1 clock ) 
 886               			LDI   ZH                 , hi8(KerSchSts)         ;fetch base pos high    (  1 clock ) 
 887               	        KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 888               		    LD    R24                , Z                      ;return sts             (  2 clocks) 
 889               	    _EXIT_SLP_TIME\@:                                                                          
 890               	.endm                                                                                          
 891               	;;============================sleep timeout management end==================================;; 
 892               	
 893               	
 894               	
 895               	
 896               	
 897               	;;============================current task priority starting================================;; 
 898               	;used registers          : R18, R24, R30(ZL), R31(ZH)                                          
 899               	;arg registers           : None                                                                
 900               	;return registers        : R24 (Current task priority)                                         
 901               	;unsafe access registers : R18, R24, R30(ZL), R31(ZH)                                          
 902               	.macro  KER_CURR_TASK_PRIO                                ;total 1.13uS @8MHz     (  9 clocks) 
 903               			LDI    ZL                , lo8(KerSchPr)          ;load low addr          (  1 clock ) 
 904               			LDI    ZH                , hi8(KerSchPr)          ;load high addr         (  1 clock ) 
 905               			LDI    R18               , 0x00                   ;clear reg, for carry   (  1 clock ) 
 906               			LDS    R24               , KerBase+OFB_TID        ;load task id           (  2 clocks) 
 907               	        ADD    ZL                , R24                    ;add low addr           (  1 clock ) 
 908               			ADC    ZH                , R18                    ;add carry if any       (  1 clock ) 
 909               			LD     R24               , Z                      ;load current tid prio  (  2 clocks) 
 910               	.endm                                                                                          
 911               	;;==============================current task priority end===================================;; 
 912               	
 913               	
 914               	
 915               	
 916               	
 917               	;;================================run scheduler starting====================================;; 
 918               	;used registers          : R18, R19, R20, R21, R24, R25, R30(ZL), R31(ZH)                      
 919               	;arg registers           : R24 (SCH_MODE_HANDLER/SCH_MODE_THREAD)                              
 920               	;return registers        : None                                                                
 921               	;unsafe access registers : R18, R19, R20, R21, R24, R25, R30(ZL), R31(ZH)                      
 922               	.macro  KER_RUN_SCHEDULER                                 ;total 13.25uS @8MHz    (106 clocks) 
 923               			LDI    R18               , 0xFF                   ;set 0xff               (  1 clock ) 
 924               			STS    KerBase+OFB_LPR   , R18                    ;lowest priority        (  2 clocks) 
 925               			LDI    R18               , 0x00                   ;start from 0           (  1 clock ) 
 926               			STS    KerBase+OFB_PTID  , R18                    ;highest prio tid=0     (  2 clocks) 
 927               			MOV    R21               , R24                    ;copy sch mode          (  1 clock ) 
 928               		_KER_SCH_LOOP\@:                                                                           
 929               		    ;store task id to run from KER_DEC_SLP_TIMEOUT                                         
 930               			STS    KerBase+OFB_TID   , R18                    ;store task id          (  2 clocks) 
 931               	        ;sleep time decrement, update ready/blocked status                                     
 932               			MOV    R24               , R21                    ;restore sch mode       (  1 clock ) 
 933               			KER_SLP_TIME_MGNT                                 ;update return vars     ( 52 clocks) 
 934               	        CPI    R24               , TASK_READY             ;compare                (  1 clock ) 
 935               	        BREQ   _KER_CALC_PRIO\@                           ;calc priority if ready (  2 clocks) 
 936               			CPI    R24               , TASK_CONS_LAT          ;compare                (  1 clock ) 
 937               	        BREQ   _KER_CALC_PRIO\@                           ;calc priority if c_lat (  2 clocks) 
 938               	        RJMP   _KER_SCH_NEXT\@                            ;skip if !ready|c_lat   (  2 clocks) 
 939               		_KER_CALC_PRIO\@:                                                                          
 940               			KER_CURR_TASK_PRIO                                ;get task prio ->R24    (  9 clocks) 
 941               	        ;compare current task priority with lowest priority found so far                       
 942               			LDS    R18               , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
 943               			CP     R24               , R18                    ;compare                (  1 clock ) 
 944               			BRSH   _KER_SCH_NEXT\@                            ;if prio>=lowest prio   (  2 clocks) 
 945               			;found new lowest priority                                                             
 946               			STS    KerBase+OFB_LPR   , R24                    ;save lowest priority   (  2 clocks) 
 947               			LDS    R18               , KerBase+OFB_TID        ;load task id           (  2 clocks) 
 948               			STS    KerBase+OFB_PTID  , R18                    ;save lowest priority   (  2 clocks) 
 949:kernel.S      ****                                                                                                
 950:kernel.S      ****     _KER_SCH_NEXT\@:                                                                           
 951:kernel.S      **** 	    LDS    R18               , KerBase+OFB_TID        ;load task id           (  2 clocks) 
 952:kernel.S      **** 		INC    R18                                        ;increment by 1         (  1 clock ) 
 953:kernel.S      **** 		LDS    R19               , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 954:kernel.S      **** 		CP     R18               , R19                    ;compare with ntask     (  2 clocks) 
 955:kernel.S      **** 		BRSH   _KER_SCH_EXIT\@                            ;if task_id>=ntask      (  2 clocks) 
 956:kernel.S      **** 		RJMP   _KER_SCH_LOOP\@                            ;jump to entry          (  2 clocks) 
 957:kernel.S      **** 	_KER_SCH_EXIT\@:                                                                           
 958:kernel.S      ****         LDS    R18               , KerBase+OFB_PTID       ;load high prio task id (  2 clocks) 
 959:kernel.S      **** 		STS    KerBase+OFB_TID   , R18                    ;for test only          (  2 clocks) 
 960:kernel.S      **** .endm                                                                                          
 961:kernel.S      **** ;;===================================run scheduler end======================================;; 
 962:kernel.S      **** 
 963:kernel.S      **** 
 964:kernel.S      **** 
 965               	
 966               	
 967               	;;================================calc cpu usage starting===================================;; 
 968               	;used registers          : R18, R19                                                            
 969               	;arg registers           : None                                                                
 970               	;return registers        : None                                                                
 971               	;unsafe access registers : R18, R19                                                            
 972               	.macro  KER_CPU_USAGE                                     ;total 3.25uS @8MHz     ( 26 clocks) 
 973               	        ;check if current target task is idle task or not                                      
 974               	        LDS    R18               , KerBase+OFB_TID        ;load target task_id    (  2 clocks) 
 975               			TST    R18                                        ;check if idle task     (  1 clock ) 
 976               			BREQ   _KER_USG_TICK\@                            ;task_id=idle, skip     (  2 clocks) 
 977               			LDS    R18               , KerBase+OFB_UATC       ;load active tick cnt   (  2 clocks) 
 978               			INC    R18                                        ;inc active tick cnt    (  1 clock ) 
 979               			STS    KerBase+OFB_UATC  , R18                    ;store new val          (  2 clocks) 
 980               		_KER_USG_TICK\@:                                                                           
 981               			LDS    R18               , KerBase+OFB_UTC        ;load usage tick cnt    (  2 clocks) 
 982               			INC    R18                                        ;increment tick cnt     (  1 clock ) 
 983               			CPI    R18               , 100                    ;compare with 100       (  1 clock ) 
 984               			BRLO   _KER_USG_UTC_SV\@                          ;val<100, save new val  (  2 clocks) 
 985               			LDI    R18               , 0x00                   ;val>=100, roll back    (  1 clock ) 
 986               			LDS    R19               , KerBase+OFB_UATC       ;load active tick cnt   (  2 clocks) 
 987               			STS    KerBase+OFB_USAGE , R19                    ;store usage            (  2 clocks) 
 988               			LDI    R19               , 0x00                   ;clear reg              (  1 clock ) 
 989               			STS    KerBase+OFB_UATC  , R19                    ;clear active tick cnt  (  2 clocks) 
 990               		_KER_USG_UTC_SV\@:                                                                         
 991               			STS    KerBase+OFB_UTC   , R18                    ;store new val          (  2 clocks) 
 992               	.endm                                                                                          
 993               	;;===================================calc cpu usage end=====================================;; 
 994               	
 995               	
 996               	
 997               	
 998               	
 999               	;;===========================kernel disable analog domain starting==========================;; 
 1000               	;used registers          : None                                                                
 1001               	;arg registers           : None                                                                
 1002               	;return registers        : None                                                                
 1003               	;unsafe access registers : None                                                                
 1004               	.macro KER_DISABLE_ANALOG_DOMAIN                          ;total 0.75uS @8MHz     ( 10 clocks) 
 1005               	    #ifdef KER_IDLE_AS_SLEEP                                                                   
 1006               			LDS   R18                , SRADCSRA               ;load ADCSRA            (  2 clocks) 
 1007               			ANDI  R18                , 0xEF                   ;clear ADEN             (  1 clock ) 
 1008               			STS   SRADCSRA           , R18                    ;set val                (  2 clocks) 
 1009               			LDS   R18                , SRACSR                 ;load ACSR              (  2 clocks) 
 1010               			ORI   R18                , 0x80                   ;set ACD                (  1 clock ) 
 1011               			STS   SRACSR             , R18                    ;set val                (  2 clocks) 
 1012               		#endif                                                                                     
 1013               	.endm                                                                                          
 1014               	;;=============================kernel disable analog domain end=============================;; 
 1015               	
 1016               	
 1017               	
 1018               	
 1019               	
 1020               	;;===============================kernel sleep config starting===============================;; 
 1021               	;used registers          : R18                                                                 
 1022               	;arg registers           : None                                                                
 1023               	;return registers        : None                                                                
 1024               	;unsafe access registers : R18                                                                 
 1025               	.macro KER_SLEEP_INIT                                     ;total 0.63uS @8MHz     (  5 clocks) 
 1026               	    #ifdef KER_IDLE_AS_SLEEP                                                                   
 1027               	        #ifdef KER_SLEEP_MODE_IDLE                                                             
 1028               			LDI   R18                , 0x00                   ;set SM[2:0] val        (  1 clock ) 
 1029               			#endif                                                                                 
 1030               	                                                                                               
 1031               			#ifdef KER_SLEEP_MODE_ADC_NR                                                           
 1032               			LDI   R18                , 0x02                   ;set SM[2:0] val        (  1 clock ) 
 1033               			#endif
 1034               	                                                                                               
 1035               			#ifdef KER_SLEEP_MODE_POWER_DOWN                                                       
 1036               			LDI   R18                , 0x04                   ;set SM[2:0] val        (  1 clock ) 
 1037               	        #endif                                                                                 
 1038               			                                                                                       
 1039               			#ifdef KER_SLEEP_MODE_POWER_SAVE                                                       
 1040               			LDI   R18                , 0x06                   ;set SM[2:0] val        (  1 clock ) 
 1041               			#endif                                                                                 
 1042               		                                                                                           
 1043               			STS   SRSMCR             , R18                    ;set sleep control val  (  2 clocks) 
 1044               			STS   KerBase+OFB_SLCFG  , R18                    ;save sleep control val (  2 clocks) 
 1045               		#endif                                                                                     
 1046               	.endm                                                                                          
 1047               	;;================================kernel sleep config end===================================;; 
 1048               	
 1049               	
 1050               	
 1051               	
 1052               	
 1053               	;;==============================kernel enter sleep mode starting============================;; 
 1054               	;used registers          : None                                                                
 1055               	;arg registers           : None                                                                
 1056               	;return registers        : None                                                                
 1057               	;unsafe access registers : None                                                                
 1058               	.macro KER_ENTER_SLEEP                                    ;total 0.75uS @8MHz     (  6 clocks) 
 1059               	    #ifdef KER_IDLE_AS_SLEEP                                                                   
 1060               			LDS   R18                , SRSMCR                 ;load SMCR              (  2 clocks) 
 1061               			ORI   R18                , 0x01                   ;set SE bit             (  1 clock ) 
 1062               			STS   SRSMCR             , R18                    ;set val                (  2 clocks) 
 1063               			SLEEP                                             ;sleep cpu              (  1 clock ) 
 1064               		#endif                                                                                     
 1065               	.endm                                                                                          
 1066               	;;================================kernel enter sleep mode end===============================;; 
 1067               	
 1068               	
 1069               	
 1070               	
 1071               	
 1072               	;;===============================kernel exit sleep mode starting============================;; 
 1073               	;used registers          : None                                                                
 1074               	;arg registers           : None                                                                
 1075               	;return registers        : None                                                                
 1076               	;unsafe access registers : None                                                                
 1077               	.macro KER_EXIT_SLEEP                                     ;total 0.63uS @8MHz     (  5 clocks) 
 1078               	    #ifdef KER_IDLE_AS_SLEEP                                                                   
 1079               	        LDS   R18                , SRSMCR                 ;load SMCR              (  2 clocks) 
 1080               			ANDI  R18                , 0xFE                   ;clear SE bit           (  1 clock ) 
 1081               			STS   SRSMCR             , R18                    ;set val                (  2 clocks) 
 1082               		#endif                                                                                     
 1083               	.endm                                                                                          
 1084               	;;=================================kernel exit sleep mode end===============================;; 
 1085               	
 1086               	
 1087               	
 1088               	
 1089               	
 1090               	;;=================================ISR execution starting===================================;; 
 1091               	#ifdef  KER_WDT_AS_TICK_SRC                                                                    
 1092               	.global  __vector_6                                                                            
 1093               	    __vector_6:                                           ;total 40.00uS @8MHz    (344 clocks) 
 1094               		    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 1095               			KER_EXIT_SLEEP                                    ;exit sleep if enabled  (  5 clocks) 
 1096               	        KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 1097               			KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 1098               			KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 1099               			KER_TICK_INCREMENT                                ;increment tick counter ( 26 clocks) 
 1100               			LDI    R24               , SCH_MODE_HANDLER       ;set sch mode           (  1 clock ) 
 1101               			KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
 1102               			KER_CPU_USAGE                                     ;calc cpu usage         ( 26 clocks) 
 1103               			KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 1104               			KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
 1105               		    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 1106               			LDS   R18                , SRWDTCSR               ;copy WDTCSR            (  2 clocks) 
 1107               			ORI   R18                , 0x40                   ;set WDIE               (  1 clock ) 
 1108               			STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
 1109               			RETI                                              ;return from interrupt  (  4 clocks) 
 1110               	#endif                                                                                         
 1111               	
 1112               	#ifdef  KER_TOSC_AS_TICK_SRC                                                                   
 1113               	.global  __vector_7                                                                            
 1114               	    __vector_7:                                           ;total 40.00uS @8MHz    (344 clocks) 
 1115               		    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 1116               			KER_EXIT_SLEEP                                    ;exit sleep if enabled  (  5 clocks) 
 1117               	        KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 1118               			KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 1119               			KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 1120               			KER_TICK_INCREMENT                                ;increment tick counter ( 26 clocks) 
 1121               			LDI    R24               , SCH_MODE_HANDLER       ;set sch mode           (  1 clock ) 
 1122               			KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
 1123               			KER_CPU_USAGE                                     ;calc cpu usage         ( 26 clocks) 
 1124               			KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 1125               			KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
 1126               		    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 1127               			RETI                                              ;return from interrupt  (  4 clocks) 
 1128               	.global  __vector_9                                                                            
 1129               	    __vector_9:                                           ;total 40.00uS @8MHz    (344 clocks) 
 1130               		    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 1131               			KER_EXIT_SLEEP                                    ;exit sleep if enabled  (  5 clocks) 
 1132               	        KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 1133               			KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 1134               			KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 1135               			KER_TICK_INCREMENT                                ;increment tick counter ( 26 clocks) 
 1136               			LDI    R24               , SCH_MODE_HANDLER       ;set sch mode           (  1 clock ) 
 1137               			KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
 1138               			KER_CPU_USAGE                                     ;calc cpu usage         ( 26 clocks) 
 1139               			KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 1140               			KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
 1141               		    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 1142               			RETI                                              ;return from interrupt  (  4 clocks) 
 1143               	#endif                                                                                         
 1144               	
 1145               	#ifdef  KER_TIMER0_AS_TICK_SRC                                                                 
 1146               	.global  __vector_16                                                                           
 1147               	    __vector_16:                                          ;total 40.00uS @8MHz    (339 clocks) 
 1148               		    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 1149               			KER_EXIT_SLEEP                                    ;exit sleep if enabled  (  5 clocks) 
 1150               	        KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 1151               			KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 1152               			KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 1153               			KER_TICK_INCREMENT                                ;increment tick counter ( 26 clocks) 
 1154               			LDI    R24               , SCH_MODE_HANDLER       ;set sch mode           (  1 clock ) 
 1155               			KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
 1156               			KER_CPU_USAGE                                     ;calc cpu usage         ( 26 clocks) 
 1157               			KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 1158               			KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
 1159               		    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 1160               			RETI                                              ;return from interrupt  (  4 clocks) 
 1161               	#endif                                                                                         
 1162               	;;====================================ISR execution end=====================================;; 
 1163               	
 1164               	
 1165               	
 1166               	
 1167               	
 1168               	;;================================SysTick reg init starting=================================;; 
 1169               	;used registers          : R18, R19, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
 1170               	;arg registers           : R24(Prescaler), R22(ReloadVal)                                      
 1171               	;return registers        : None                                                                
 1172               	;unsafe access registers : R18, R19, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
 1173               	Kernel_SysTick_Reg_Init:                                  ;total 11.50uS @8MHz    ( 92 clocks) 
1174:kernel.S      ****         CLI                                               ;disable global int     (  1 clock ) 
1175:kernel.S      **** 		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
1176:kernel.S      ****         KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 1177               			;clear reg                                                                             
1178:kernel.S      **** 		LDI   R18                , 0x00                   ;set 0x00 to R18        (  1 clock ) 
 1179               			;clear tick counter                                                                    
1180:kernel.S      **** 		STS   KerBase+OFB_TICK0  , R18                    ;clear  KerBase[0]      (  2 clocks) 
1181:kernel.S      **** 		STS   KerBase+OFB_TICK1  , R18                    ;clear  KerBase[1]      (  2 clocks) 
1182:kernel.S      **** 		STS   KerBase+OFB_TICK2  , R18                    ;clear  KerBase[2]      (  2 clocks) 
1183:kernel.S      **** 		STS   KerBase+OFB_TICK3  , R18                    ;clear  KerBase[3]      (  2 clocks) 
1184:kernel.S      **** 		STS   KerBase+OFB_TICK4  , R18                    ;clear  KerBase[4]      (  2 clocks) 
 1185               			;clear system registers                                                                
1186:kernel.S      **** 		STS   KerBase+OFB_PRS    , R18                    ;clear  KerBase[5]      (  2 clocks) 
1187:kernel.S      **** 		STS   KerBase+OFB_RLD    , R18                    ;clear  KerBase[6]      (  2 clocks) 
1188:kernel.S      **** 		STS   KerBase+OFB_TID    , R18                    ;clear  KerBase[7]      (  2 clocks) 
1189:kernel.S      **** 		STS   KerBase+OFB_NTSK   , R18                    ;clear  KerBase[8]      (  2 clocks) 
1190:kernel.S      **** 		STS   KerBase+OFB_LPR    , R18                    ;clear  KerBase[9]      (  2 clocks) 
1191:kernel.S      ****         STS   KerBase+OFB_PTID   , R18                    ;clear  KerBase[10]     (  2 clocks) 
1192:kernel.S      **** 		STS   KerBase+OFB_UTC    , R18                    ;clear  KerBase[11]     (  2 clocks) 
1193:kernel.S      **** 		STS   KerBase+OFB_UATC   , R18                    ;clear  KerBase[12]     (  2 clocks) 
1194:kernel.S      **** 		STS   KerBase+OFB_USAGE  , R18                    ;clear  KerBase[13]     (  2 clocks) 
 1195               			;clear all timer registers                                                             
 1196               			#ifdef KER_TIMER0_AS_TICK_SRC                                                          
1197:kernel.S      **** 		STS   SRTCCR0A           , R18                    ;clear TCCR0A           (  2 clocks) 
1198:kernel.S      **** 		STS   SRTCCR0B           , R18                    ;clear TCCR0B           (  2 clocks) 
1199:kernel.S      **** 		STS   SRTIMSK0           , R18                    ;clear TIMSK0           (  2 clocks) 
1200:kernel.S      **** 		STS   SRTIFR0            , R18                    ;clear TIFR0            (  2 clocks) 
1201:kernel.S      **** 		STS   SROCR0A            , R18                    ;clear OCR0A            (  2 clocks) 
1202:kernel.S      **** 		STS   SROCR0B            , R18                    ;clear OCR0B            (  2 clocks) 
1203:kernel.S      **** 		STS   SRTCNT0            , R18                    ;clear TCNT0            (  2 clocks) 
1204:kernel.S      **** 		#endif                                                                                 
1205:kernel.S      ****         #ifdef KER_WDT_AS_TICK_SRC                                                             
1206:kernel.S      **** 		WDR                                               ;reset wdt              (  1 clock ) 
1207:kernel.S      **** 		LDS   R18                , SRMCUSR                ;copy MCUSR             (  1 clock ) 
1208:kernel.S      **** 		ANDI  R18                , 0xFF & (0<<WDRF)       ;clear WDRF             (  1 clock ) 
1209:kernel.S      **** 		STS   SRMCUSR            , R18                    ;set val                (  1 clock ) 
1210:kernel.S      **** 		LDS   R18                , SRWDTCSR               ;copy WDTCSR            (  2 clocks) 
1211:kernel.S      **** 		ORI   R18                , 0x18                   ;set WDCE,WDE           (  1 clock ) 
1212:kernel.S      **** 		STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
1213:kernel.S      **** 		LDI   R18                , 0x00                   ;clear WDE              (  1 clock ) 
1214:kernel.S      **** 		STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
 1215               			#endif                                                                                 
 1216               			#ifdef KER_TOSC_AS_TICK_SRC                                                            
 1217               	        LDI   R18                , 0x00                   ;clear interrupt enbits (  1 clock ) 
 1218               			STS   SRTIMSK2           , R18                    ;set val to TIMSK2      (  2 clocks) 
 1219               			LDI   R18                , 0x00                   ;clear reg              (  1 clock ) 
 1220               			STS   SRTCCR2B           , R18                    ;set val to TCCR2B      (  2 clocks) 
 1221               			LDI   R18                , 0x00                   ;clear AS2 bit          (  1 clock ) 
 1222               			STS   SRASSR             , R18                    ;set val to ASSR        (  2 clocks) 
 1223               			#endif                                                                                 
 1224               			;save values for future use                                                            
1225:kernel.S      **** 		STS   KerBase+OFB_PRS    , R24                    ;KerBase[5] prescaler   (  2 clocks) 
1226:kernel.S      **** 		STS   KerBase+OFB_RLD    , R22                    ;KerBase[6] reload val  (  2 clocks) 
1227:kernel.S      ****         KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
1228:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1229               	;;===================================SysTick reg init end===================================;; 
 1230               	
 1231               	
 1232               	
 1233               	
 1234               	
 1235               	;;===============================kernel task create starting================================;; 
 1236               	;used registers          : R18, R19, R20, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)    
 1237               	;arg registers           : R25:R24(FuncPtr), R22(TaskPriority)                                 
 1238               	;return registers        : None                                                                
 1239               	;unsafe access registers : R18, R19, R20, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)    
 1240               	Kernel_Task_Create:                                       ;total 21.50uS @8MHz    (172 clocks) 
1241:kernel.S      ****         KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 1242               			;set priority to KerSchPr+task_id                                                      
1243:kernel.S      **** 		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
1244:kernel.S      **** 		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
1245:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
1246:kernel.S      **** 		ST    Z                  , R22                    ;save priority          (  2 clocks) 
 1247               			;set task status to KerSchSts+task_id                                                  
1248:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
1249:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
1250:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
1251:kernel.S      **** 		LDI   R18                , TASK_READY             ;set status as ready    (  1 clock ) 
1252:kernel.S      **** 		ST    Z                  , R18                    ;save status            (  2 clocks) 
 1253               			;stack pointer for current task (KerStack + KER_STK_SZ*(task_id+1) - 1) ->stack top    
1254:kernel.S      **** 		LDS   R18                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
1255:kernel.S      **** 		INC   R18                                         ;increment task_id      (  1 clock ) 
1256:kernel.S      **** 		LDI   R19                , KER_STK_SZ             ;load stack size        (  1 clock ) 
1257:kernel.S      **** 		MUL   R18                , R19                    ;multiply to get offset (  2 clocks) 
1258:kernel.S      **** 		MOV   ZL                 , R0                     ;load multiplied low    (  1 clocks) 
1259:kernel.S      **** 		MOV   ZH                 , R1                     ;load multiplied high   (  1 clocks) 
1260:kernel.S      **** 		SBIW  ZL                 , 0x01                   ;dec multiplied val-1   (  2 clocks) 
1261:kernel.S      **** 		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
1262:kernel.S      **** 		LDI   R18                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
1263:kernel.S      **** 		LDI   R19                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
1264:kernel.S      **** 		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
1265:kernel.S      **** 		ADC   ZH                 , R19                    ;add high bytes+carry   (  1 clock ) 
1266:kernel.S      **** 		OUT   IOSPL              , ZL                     ;load SPL               (  1 clock ) 
1267:kernel.S      ****         OUT   IOSPH              , ZH                     ;load SPH               (  1 clock ) 
 1268               			;function argument directly returns word address                                       
1269:kernel.S      **** 	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
1270:kernel.S      **** 		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 1271               			;push context to stack of this task                                                    
1272:kernel.S      **** 		KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 1273               			;read stack pointer of current task (necessary when restore)                           
1274:kernel.S      **** 		IN    R18                , IOSPL                  ;read SPL               (  1 clock ) 
1275:kernel.S      ****         IN    R19                , IOSPH                  ;read SPH               (  1 clock ) 
 1276               			;calculate the address where current task's SP will be stored and store SP             
1277:kernel.S      **** 		LDS   R20                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
1278:kernel.S      **** 		LSL   R20                                         ;left shift to multiply (  1 clock ) 
1279:kernel.S      **** 		LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
1280:kernel.S      **** 		LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
1281:kernel.S      **** 		ADD   ZL                 , R20                    ;add offset to array    (  1 clock ) 
1282:kernel.S      **** 		LDI   R20                , 0x00                   ;clear reg              (  1 clock ) 
1283:kernel.S      **** 		ADC   ZH                 , R20                    ;add carry if any       (  1 clock ) 
1284:kernel.S      **** 		ST    Z+                 , R18                    ;SPL at KerPSp+offset   (  2 clocks) 
1285:kernel.S      **** 		ST    Z                  , R19                    ;SPH at KerPSp+offset   (  2 clocks) 
 1286               			;increment task_id                                                                     
1287:kernel.S      **** 		LDS   R18                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
1288:kernel.S      **** 		INC   R18                                         ;increment task_id      (  1 clock ) 
1289:kernel.S      **** 		STS   KerBase+OFB_TID    , R18                    ;store task_id          (  2 clocks) 
 1290               			;increment ntask                                                                       
1291:kernel.S      **** 		LDS   R18                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
1292:kernel.S      **** 		INC   R18                                         ;increment ntask        (  1 clock ) 
1293:kernel.S      **** 		STS   KerBase+OFB_NTSK   , R18                    ;store ntask            (  2 clocks) 
1294:kernel.S      **** 		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
1295:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1296               	;;==================================kernel task create end==================================;; 
 1297               	
 1298               	
 1299               	
 1300               	
 1301               	
 1302               	;;=================================kernel start tasks starting==============================;; 
 1303               	;used registers          : R0~R31                                                              
 1304               	;arg registers           : None                                                                
 1305               	;return registers        : None                                                                
 1306               	;unsafe access registers : R18, R19, R20, R24, R25, R30(ZL), R31(ZH)                           
 1307               	Kernel_Start_Tasks:                                       ;total 25.63uS @8MHz    (205 clocks) 
1308:kernel.S      **** 		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
1309:kernel.S      **** 		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
1310:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
1311:kernel.S      **** 		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 1312               			;config timer for system tick                                                          
1313:kernel.S      **** 		KER_TIMER_INIT                                    ;init timer, int enable ( 12 clocks) 
 1314               			;execute return to jump to highest priority task                                       
1315:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1316               	;;==================================kernel start tasks end==================================;; 
 1317               	
 1318               	
 1319               	
 1320               	
 1321               	
 1322               	;;===================================kernel init starting===================================;; 
 1323               	;used registers          : R1, R18, R19, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
 1324               	;arg registers           : None                                                                
 1325               	;return registers        : None                                                                
 1326               	;unsafe access registers : R1, R18, R19, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
 1327               	Kernel_Init:                                              ;total 39.75uS @8MHz    (318 clocks) 
1328:kernel.S      **** 		CLR   R1                                          ;gcc expects            (  1 clock ) 
 1329               	        ;store stack top (for MSP) addr to KerSSZ+OFM_MSPI0:1                                  
1330:kernel.S      **** 		LDI   R18                , lo8(KerSSZ+OFM_MSPS)   ;load low address       (  1 clock ) 
1331:kernel.S      **** 		LDI   R19                , hi8(KerSSZ+OFM_MSPS)   ;load high address      (  1 clock ) 
1332:kernel.S      ****         STS   KerSSZ+OFM_MSPI+0  , R18                    ;set mspi to stack top  (  2 clocks) 
1333:kernel.S      **** 		STS   KerSSZ+OFM_MSPI+1  , R19                    ;set mspi to stack top  (  2 clocks) 
1334:kernel.S      **** 		KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 1335               			;init timer for kernel                                                                 
1336:kernel.S      **** 		LDI   R24                , 0x03                   ;set prescaler          (  1 clock ) 
1337:kernel.S      **** 		LDI   R22                , 0x82                   ;set reload val         (  1 clock ) 
1338:kernel.S      **** 		CALL  Kernel_SysTick_Reg_Init                     ;init timer             ( 92 clocks) 
 1339               			;create idle task at task_id 0, priority 0xFF (lowest)                                 
1340:kernel.S      **** 		LDI   R24                , lo8(Kernel_Task_Idle)  ;load func addr low     (  1 clock ) 
1341:kernel.S      **** 		LDI   R25                , hi8(Kernel_Task_Idle)  ;load func addr high    (  1 clock ) 
1342:kernel.S      **** 		LSR   R25                                         ;right shift to divide  (  1 clock ) 
1343:kernel.S      **** 		ROR   R24                                         ;rotate right th carry  (  1 clock ) 
1344:kernel.S      **** 		LDI   R22                , 0xFF                   ;set max val            (  1 clock ) 
1345:kernel.S      **** 		CALL  Kernel_Task_Create                          ;init idle task         (172 clocks) 
1346:kernel.S      **** 		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 1347               			;execute return to jump to task0, pushed while task init                               
1348:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1349               	;;======================================kernel init end=====================================;; 
 1350               	
 1351               	
 1352               	
 1353               	
 1354               	
 1355               	;;=================================kernel idle task starting================================;; 
 1356               	;used registers          : None                                                                
 1357               	;arg registers           : None                                                                
 1358               	;return registers        : None                                                                
 1359               	;unsafe access registers : None                                                                
 1360               	Kernel_Task_Idle:                                                                              
1361:kernel.S      **** 	    KER_SLEEP_INIT                                    ;sleep init             (  5 clocks) 
 1362               	    _IDLE_LOOP:                                           ;forever loop                        
1363:kernel.S      **** 	    KER_DISABLE_ANALOG_DOMAIN                         ;disable adc, ac        ( 10 clocks) 
 1364               			#ifdef KER_CALL_FUNC_BEFORE_SLEEP                                                      
1365:kernel.S      **** 		CALL  Kernel_PreSleep_Hook                        ;call func before sleep (  8 clocks) 
 1366               			#endif                                                                                 
1367:kernel.S      **** 	    KER_ENTER_SLEEP                                   ;enter sleep mode       (  6 clocks) 
1368:kernel.S      **** 		RJMP  _IDLE_LOOP                                  ;jump to loop start     (  2 clocks) 
 1369               	;;==================================kernel idle task end====================================;; 
 1370               	
 1371               	
 1372               	
 1373               	
 1374               	
 1375               	;;================================kernel task sleep starting================================;; 
 1376               	;used registers          : R0~R31                                                              
 1377               	;arg registers           : R25:R24(SleepTime)                                                  
 1378               	;return registers        : None                                                                
 1379               	;unsafe access registers : R18, R19, R20, R24, R25, R30(ZL), R31(ZH)                           
 1380               	Kernel_Task_Sleep:                                        ;total 37.25uS @8MHz    (298 clocks) 
 1381               	        ;save current context                                                                  
1382:kernel.S      ****         KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
1383:kernel.S      **** 		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 1384               			;create next task wakeup time (args R25:R24)                                           
1385:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
1386:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
1387:kernel.S      **** 		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
1388:kernel.S      **** 		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
1389:kernel.S      **** 		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 1390               			;update task scheduler status as blocked                                               
1391:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
1392:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
1393:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
1394:kernel.S      ****         LDI   R18                , TASK_BLOCKED           ;block task until cnt=0 (  1 clock ) 
1395:kernel.S      **** 		STD   Z+0                , R18                    ;save block flag        (  2 clocks) 
 1396               			;run scheduler, load next task sp, restore context                                     
1397:kernel.S      **** 		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
1398:kernel.S      **** 		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
1399:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
1400:kernel.S      **** 		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
1401:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1402               	;;=================================kernel task sleep end====================================;; 
 1403               	
 1404               	
 1405               	
 1406               	
 1407               	
 1408               	;;========================kernel task constant latency starting=============================;; 
 1409               	;used registers          : R18, R24, R25, R30(ZL), R31(ZH)                                     
 1410               	;arg registers           : R25:R24(SleepTime)                                                  
 1411               	;return registers        : None                                                                
 1412               	;unsafe access registers : R18, R24, R25, R30(ZL), R31(ZH)                                     
 1413               	Kernel_Task_Constant_Latency:                             ;total 3.50uS @8MHz     ( 28 clocks) 
 1414               			;create next task wakeup time (args R25:R24)                                           
1415:kernel.S      **** 		CLI                                               ;disable interrupt      (  1 clock ) 
1416:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
1417:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
1418:kernel.S      **** 		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
1419:kernel.S      **** 		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
1420:kernel.S      **** 		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 1421               			;update task scheduler status as constant latency                                      
1422:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
1423:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
1424:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
1425:kernel.S      ****         LDI   R18                , TASK_CONS_LAT          ;save as cons_lat       (  1 clock ) 
1426:kernel.S      **** 		STD   Z+0                , R18                    ;save block flag        (  2 clocks) 
1427:kernel.S      **** 		SEI                                               ;enable interrupt       (  1 clock ) 
1428:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1429               	;;=============================kernel task constant latency end=============================;; 
 1430               	
 1431               	
 1432               	
 1433               	
 1434               	
 1435               	;;=======================kernel task constant latency sleep starting========================;; 
 1436               	;used registers          : R0~R31                                                              
 1437               	;arg registers           : R25:R24(SleepTime)                                                  
 1438               	;return registers        : None                                                                
 1439               	;unsafe access registers : R18, R19, R20, R24, R25, R30(ZL), R31(ZH)                           
 1440               	Kernel_Task_Constant_Latency_Sleep:                       ;total 35.75uS @8MHz    (286 clocks) 
 1441               			;save current context                                                                  
1442:kernel.S      ****         KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
1443:kernel.S      **** 		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 1444               			;update task scheduler status as blocked                                               
1445:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
1446:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
1447:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
1448:kernel.S      ****         LDI   R18                , TASK_BLOCKED           ;blocked until cnt=0    (  1 clock ) 
1449:kernel.S      **** 		STD   Z+0                , R18                    ;save block flag        (  2 clocks) 
 1450               			;run scheduler, load next task sp, restore context                                     
1451:kernel.S      **** 		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
1452:kernel.S      **** 		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
1453:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
1454:kernel.S      **** 		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
1455:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1456               	;;=============================kernel task constant latency end=============================;; 
 1457               	
 1458               	
 1459               	
 1460               	
 1461               	
 1462               	;;=========================kernel call func before sleep starting===========================;; 
 1463               	;used registers          : R24, R25, R30(ZL), R31(ZH)                                          
 1464               	;arg registers           : R25:R24(FunctionPtr)                                                
 1465               	;return registers        : None                                                                
 1466               	;unsafe access registers : R24, R25, R30(ZL), R31(ZH)                                          
 1467               	Kernel_PreSleep_Hook:                                     ;total 1.00uS @8MHz     (  8 clocks) 
1468:kernel.S      ****         MOVW  R30                , R24                    ;move pointer to Z      (  1 clock ) 
1469:kernel.S      **** 		ICALL                                             ;indirect call          (  3 clocks) 
1470:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1471               	;;============================kernel call func before sleep end=============================;; 
 1472               	
 1473               	
 1474               	
 1475               	
 1476               	
 1477               	;;===========================kernel task sleep time get starting============================;; 
 1478               	;used registers          : R18, R24, R25, R30(ZL), R31(ZH)                                     
 1479               	;arg registers           : R24(TaskID)                                                         
 1480               	;return registers        : R25:R24(SleepTime)                                                  
 1481               	;unsafe access registers : R18, R24, R25, R30(ZL), R31(ZH)                                     
 1482               	Kernel_Task_Sleep_Time_Get:                               ;total 1.88uS @8MHz     ( 15 clocks) 
1483:kernel.S      **** 		MOV   R18                , R24                    ;copy                   (  1 clock ) 
1484:kernel.S      **** 		LSL   R18                                         ;x2                     (  1 clock ) 
1485:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
1486:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
1487:kernel.S      **** 		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
1488:kernel.S      **** 		LDI   R18                , 0x00                   ;load 0                 (  1 clock ) 
1489:kernel.S      **** 		ADC   ZH                 , R18                    ;add high byte+carry    (  1 clock ) 
1490:kernel.S      **** 		LDD   R24                , Z+0                    ;load sleep time        (  2 clocks) 
1491:kernel.S      **** 		LDD   R25                , Z+1                    ;load sleep time        (  2 clocks) 
1492:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1493               	;;==============================kernel task sleep time get end==============================;; 
 1494               	
 1495               	
 1496               	
 1497               	
 1498               	
 1499               	;;==============================kernel task status get starting=============================;; 
 1500               	;used registers          : R18, R24, R30(ZL), R31(ZH)                                          
 1501               	;arg registers           : R24(TaskID)                                                         
 1502               	;return registers        : R24(TaskSts)                                                        
 1503               	;unsafe access registers : R18, R24, R30(ZL), R31(ZH)                                          
 1504               	Kernel_Task_Status_Get:                                   ;total 1.50uS @8MHz     ( 12 clocks) 
1505:kernel.S      **** 		MOV   R18                , R24                    ;copy                   (  1 clock ) 
1506:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
1507:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
1508:kernel.S      **** 		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
1509:kernel.S      **** 		LDI   R18                , 0x00                   ;load 0                 (  1 clock ) 
1510:kernel.S      **** 		ADC   ZH                 , R18                    ;add high byte+carry    (  1 clock ) 
1511:kernel.S      **** 		LD    R24                , Z                      ;load task status       (  2 clocks) 
1512:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1513               	;;================================kernel task status get end================================;; 
 1514               	
 1515               	
 1516               	
 1517               	
 1518               	
 1519               	;;================================kernel ntask get starting=================================;; 
 1520               	;used registers          : R24                                                                 
 1521               	;arg registers           : None                                                                
 1522               	;return registers        : R24(NTask)                                                          
 1523               	;unsafe access registers : R24                                                                 
 1524               	Kernel_NTask_Get:                                         ;total 0.75uS @8MHz     (  6 clocks) 
1525:kernel.S      **** 		LDS   R24                 , KerBase+OFB_NTSK      ;load ntask             (  2 clock ) 
1526:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1527               	;;===================================kernel ntask get end===================================;; 
 1528               	
 1529               	
 1530               	
 1531               	
 1532               	
 1533               	;;=============================kernel task priority get starting============================;; 
 1534               	;used registers          : R18, R24, R30(ZL), R31(ZH)                                          
 1535               	;arg registers           : R24(TaskID)                                                         
 1536               	;return registers        : R24(TaskPriority)                                                   
 1537               	;unsafe access registers : R18, R24, R30(ZL), R31(ZH)                                          
 1538               	Kernel_Task_Prio_Get:                                     ;total 1.50uS @8MHz     ( 12 clocks) 
 1539               			;get priority of the task id, arg (task_id->R24), return R24                           
1540:kernel.S      **** 		MOV   R18                , R24                    ;copy task_id           (  1 clock ) 
1541:kernel.S      **** 		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
1542:kernel.S      **** 		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
1543:kernel.S      **** 		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
1544:kernel.S      **** 		LDI   R18                , 0x00                   ;clear reg              (  1 clock ) 
1545:kernel.S      **** 		ADC   ZH                 , R18                    ;add high byte+carry    (  1 clock ) 
1546:kernel.S      **** 		LD    R24                , Z                      ;load priority          (  2 clocks) 
1547:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1548               	;;================================kernel task priority get end==============================;; 
 1549               	
 1550               	
 1551               	
 1552               	
 1553               	
 1554               	;;============================kernel lowest priority get starting===========================;; 
 1555               	;used registers          : R24                                                                 
 1556               	;arg registers           : None                                                                
 1557               	;return registers        : R24(LowestPriorityVal)                                              
 1558               	;unsafe access registers : R24                                                                 
 1559               	Kernel_Lowest_Prio_Get:                                   ;total 0.75uS @8MHz     (  6 clocks) 
1560:kernel.S      **** 		LDS   R24                , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
1561:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1562               	;;===============================kernel lowest priority get end=============================;; 
 1563               	
 1564               	
 1565               	
 1566               	
 1567               	
 1568               	;;===========================kernel high priority task id starting==========================;; 
 1569               	;used registers          : R24                                                                 
 1570               	;arg registers           : None                                                                
 1571               	;return registers        : R24(HighstPriorityTaskID)->UserTaskID (Excluding Idle Task)         
 1572               	;unsafe access registers : R24                                                                 
 1573               	Kernel_High_Prio_Task_ID_Get:                             ;total 0.88uS @8MHz     (  7 clocks) 
1574:kernel.S      **** 		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
1575:kernel.S      **** 		DEC   R24                                         ;decrement by 1         (  1 clock ) 
1576:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1577               	;;==============================kernel high priority task id end============================;; 
 1578               	
 1579               	
 1580               	
 1581               	
 1582               	
 1583               	;;=========================kernel abs high priority task id starting========================;; 
 1584               	;used registers          : R24                                                                 
 1585               	;arg registers           : None                                                                
 1586               	;return registers        : R24(HighstPriorityTaskID)->AbsoluteTaskID (Including Idle Task)     
 1587               	;unsafe access registers : R24                                                                 
 1588               	Kernel_Abs_High_Prio_Task_ID_Get:                         ;total 0.75uS @8MHz     (  6 clocks) 
1589:kernel.S      **** 		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
1590:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1591               	;;============================kernel abs high priority task id end==========================;; 
 1592               	
 1593               	
 1594               	
 1595               	
 1596               	
 1597               	;;================================kernel cpu usage get starting=============================;; 
 1598               	;used registers          : R24                                                                 
 1599               	;arg registers           : None                                                                
 1600               	;return registers        : R24(CurrentCpuUsage)->In percentage                                 
 1601               	;unsafe access registers : R24                                                                 
 1602               	Kernel_CPU_Usage_Get:                                     ;total 0.75uS @8MHz     (  6 clocks) 
 1603               			;get cpu usage, return R24                                                             
1604:kernel.S      **** 		LDS   R24                , KerBase+OFB_USAGE      ;load cpu usage         (  2 clocks) 
1605:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1606               	;;==================================kernel cpu usage get end================================;; 
DEFINED SYMBOLS
            kernel.S:21     *ABS*:000003e8 KER_TR
            kernel.S:22     *ABS*:00000003 KER_PRS
            kernel.S:23     *ABS*:00000082 KER_RLD
            kernel.S:24     *ABS*:00000080 KER_STK_SZ
            kernel.S:25     *ABS*:0000000a KER_MX_NTSK
            kernel.S:33     *ABS*:00000000 OFB_TICK0
            kernel.S:34     *ABS*:00000001 OFB_TICK1
            kernel.S:35     *ABS*:00000002 OFB_TICK2
            kernel.S:36     *ABS*:00000003 OFB_TICK3
            kernel.S:37     *ABS*:00000004 OFB_TICK4
            kernel.S:38     *ABS*:00000005 OFB_PRS
            kernel.S:39     *ABS*:00000006 OFB_RLD
            kernel.S:40     *ABS*:00000007 OFB_TID
            kernel.S:41     *ABS*:00000008 OFB_NTSK
            kernel.S:42     *ABS*:00000009 OFB_LPR
            kernel.S:43     *ABS*:0000000a OFB_PTID
            kernel.S:44     *ABS*:0000000b OFB_UTC
            kernel.S:45     *ABS*:0000000c OFB_UATC
            kernel.S:46     *ABS*:0000000d OFB_USAGE
            kernel.S:47     *ABS*:0000000e OFB_SLCFG
            kernel.S:48     *ABS*:00000000 OFM_MSPI
            kernel.S:49     *ABS*:00000002 OFM_MSPS
            kernel.S:57     *ABS*:00000000 TASK_BLOCKED
            kernel.S:58     *ABS*:00000001 TASK_READY
            kernel.S:59     *ABS*:00000002 TASK_EXECUTING
            kernel.S:60     *ABS*:00000003 TASK_SUSPENDED
            kernel.S:61     *ABS*:00000004 TASK_CONS_LAT
            kernel.S:62     *ABS*:00000000 SCH_MODE_HANDLER
            kernel.S:63     *ABS*:00000001 SCH_MODE_THREAD
            kernel.S:72     *ABS*:000000b6 SRASSR
            kernel.S:73     *ABS*:000000b4 SROCR2B
            kernel.S:74     *ABS*:000000b3 SROCR2A
            kernel.S:75     *ABS*:000000b2 SRTCNT2
            kernel.S:76     *ABS*:000000b1 SRTCCR2B
            kernel.S:77     *ABS*:000000b0 SRTCCR2A
            kernel.S:78     *ABS*:0000007c SRADMUX
            kernel.S:79     *ABS*:0000007b SRADCSRB
            kernel.S:80     *ABS*:0000007a SRADCSRA
            kernel.S:81     *ABS*:00000070 SRTIMSK2
            kernel.S:82     *ABS*:0000006f SRTIMSK1
            kernel.S:83     *ABS*:0000006e SRTIMSK0
            kernel.S:84     *ABS*:00000060 SRWDTCSR
            kernel.S:85     *ABS*:0000005f SRSREG
            kernel.S:86     *ABS*:0000005e SRSPH
            kernel.S:87     *ABS*:0000005d SRSPL
            kernel.S:88     *ABS*:00000055 SRMCUCR
            kernel.S:89     *ABS*:00000054 SRMCUSR
            kernel.S:90     *ABS*:00000053 SRSMCR
            kernel.S:91     *ABS*:00000050 SRACSR
            kernel.S:92     *ABS*:00000048 SROCR0B
            kernel.S:93     *ABS*:00000047 SROCR0A
            kernel.S:94     *ABS*:00000046 SRTCNT0
            kernel.S:95     *ABS*:00000045 SRTCCR0B
            kernel.S:96     *ABS*:00000044 SRTCCR0A
            kernel.S:97     *ABS*:00000037 SRTIFR2
            kernel.S:98     *ABS*:00000036 SRTIFR1
            kernel.S:99     *ABS*:00000035 SRTIFR0
            kernel.S:101    *ABS*:0000003f IOSREG
            kernel.S:102    *ABS*:0000003e IOSPH
            kernel.S:103    *ABS*:0000003d IOSPL
            kernel.S:104    *ABS*:00000035 IOMCUCR
            kernel.S:105    *ABS*:00000034 IOMCUSR
            kernel.S:106    *ABS*:00000033 IOSMCR
            kernel.S:107    *ABS*:00000028 IOOCR0B
            kernel.S:108    *ABS*:00000027 IOOCR0A
            kernel.S:109    *ABS*:00000026 IOTCNT0
            kernel.S:110    *ABS*:00000025 IOTCCR0B
            kernel.S:111    *ABS*:00000024 IOTCCR0A
            kernel.S:112    *ABS*:00000017 IOTIFR2
            kernel.S:113    *ABS*:00000016 IOTIFR1
            kernel.S:114    *ABS*:00000015 IOTIFR0
            kernel.S:125    .bss:00000000 KerBase
            kernel.S:128    .bss:00000010 KerPSP
            kernel.S:131    .bss:00000024 KerSSZ
            kernel.S:134    .bss:00000032 KerSchSts
            kernel.S:137    .bss:0000003c KerSchPr
            kernel.S:140    .bss:00000046 KerSchSlp
            kernel.S:143    .bss:0000005a KerStack
            kernel.S:948    .text:00000000 __vector_6
            kernel.S:1173   .text:000001f0 Kernel_SysTick_Reg_Init
            kernel.S:1327   .text:000004a2 Kernel_Init
            kernel.S:1240   .text:0000028e Kernel_Task_Create
            kernel.S:1307   .text:0000037e Kernel_Start_Tasks
            kernel.S:1360   .text:00000500 Kernel_Task_Idle
            kernel.S:1380   .text:00000530 Kernel_Task_Sleep
            kernel.S:1413   .text:000006c6 Kernel_Task_Constant_Latency
            kernel.S:1440   .text:000006f2 Kernel_Task_Constant_Latency_Sleep
            kernel.S:1467   .text:00000874 Kernel_PreSleep_Hook
            kernel.S:1482   .text:0000087a Kernel_Task_Sleep_Time_Get
            kernel.S:1504   .text:0000088e Kernel_Task_Status_Get
            kernel.S:1524   .text:0000089e Kernel_NTask_Get
            kernel.S:1538   .text:000008a4 Kernel_Task_Prio_Get
            kernel.S:1559   .text:000008b4 Kernel_Lowest_Prio_Get
            kernel.S:1573   .text:000008ba Kernel_High_Prio_Task_ID_Get
            kernel.S:1588   .text:000008c2 Kernel_Abs_High_Prio_Task_ID_Get
            kernel.S:1602   .text:000008c8 Kernel_CPU_Usage_Get
            kernel.S:956    .text:000000b6 _KER_SCH_LOOP9
            kernel.S:956    .text:000000ec _VAL_NULL10
            kernel.S:956    .text:00000100 _VAL_NOT_NULL10
            kernel.S:956    .text:00000110 _EXIT_SLP_TIME10
            kernel.S:956    .text:0000011a _KER_CALC_PRIO9
            kernel.S:956    .text:0000013e _KER_SCH_NEXT9
            kernel.S:956    .text:0000014e _KER_SCH_EXIT9
            kernel.S:957    .text:00000168 _KER_USG_TICK15
            kernel.S:957    .text:00000182 _KER_USG_UTC_SV15
            kernel.S:1309   .text:0000038e _KER_SCH_LOOP32
            kernel.S:1309   .text:000003c4 _VAL_NULL33
            kernel.S:1309   .text:000003d8 _VAL_NOT_NULL33
            kernel.S:1309   .text:000003e8 _EXIT_SLP_TIME33
            kernel.S:1309   .text:000003f2 _KER_CALC_PRIO32
            kernel.S:1309   .text:00000416 _KER_SCH_NEXT32
            kernel.S:1309   .text:00000426 _KER_SCH_EXIT32
            kernel.S:1362   .text:0000050a _IDLE_LOOP
            kernel.S:1398   .text:000005c6 _KER_SCH_LOOP56
            kernel.S:1398   .text:000005fc _VAL_NULL57
            kernel.S:1398   .text:00000610 _VAL_NOT_NULL57
            kernel.S:1398   .text:00000620 _EXIT_SLP_TIME57
            kernel.S:1398   .text:0000062a _KER_CALC_PRIO56
            kernel.S:1398   .text:0000064e _KER_SCH_NEXT56
            kernel.S:1398   .text:0000065e _KER_SCH_EXIT56
            kernel.S:1452   .text:00000774 _KER_SCH_LOOP75
            kernel.S:1452   .text:000007aa _VAL_NULL76
            kernel.S:1452   .text:000007be _VAL_NOT_NULL76
            kernel.S:1452   .text:000007ce _EXIT_SLP_TIME76
            kernel.S:1452   .text:000007d8 _KER_CALC_PRIO75
            kernel.S:1452   .text:000007fc _KER_SCH_NEXT75
            kernel.S:1452   .text:0000080c _KER_SCH_EXIT75

UNDEFINED SYMBOLS
__vector_7
__vector_8
__vector_9
__vector_16
Kernel_SysTick_Val_Get
Kernel_SysTick_Val_Safely_Get
Kernel_Interrupt_Sts_Get
