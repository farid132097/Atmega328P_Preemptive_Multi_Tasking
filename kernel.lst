   1               	# 1 "kernel.S"
   1               	
   0               	
   0               	
   2               	#include <avr/io.h>
   1               	/* Copyright (c) 2002,2003,2005,2006,2007 Marek Michalkiewicz, Joerg Wunsch
   2               	   Copyright (c) 2007 Eric B. Weddington
   3               	   All rights reserved.
   4               	
   5               	   Redistribution and use in source and binary forms, with or without
   6               	   modification, are permitted provided that the following conditions are met:
   7               	
   8               	   * Redistributions of source code must retain the above copyright
   9               	     notice, this list of conditions and the following disclaimer.
  10               	
  11               	   * Redistributions in binary form must reproduce the above copyright
  12               	     notice, this list of conditions and the following disclaimer in
  13               	     the documentation and/or other materials provided with the
  14               	     distribution.
  15               	
  16               	   * Neither the name of the copyright holders nor the names of
  17               	     contributors may be used to endorse or promote products derived
  18               	     from this software without specific prior written permission.
  19               	
  20               	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21               	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22               	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23               	  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24               	  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25               	  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26               	  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27               	  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28               	  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29               	  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30               	  POSSIBILITY OF SUCH DAMAGE. */
  31               	
  32               	/* $Id: io.h,v 1.52.2.28 2009/12/20 17:02:53 arcanum Exp $ */
  33               	
  34               	/** \file */
  35               	/** \defgroup avr_io <avr/io.h>: AVR device-specific IO definitions
  36               	    \code #include <avr/io.h> \endcode
  37               	
  38               	    This header file includes the apropriate IO definitions for the
  39               	    device that has been specified by the <tt>-mmcu=</tt> compiler
  40               	    command-line switch.  This is done by diverting to the appropriate
  41               	    file <tt>&lt;avr/io</tt><em>XXXX</em><tt>.h&gt;</tt> which should
  42               	    never be included directly.  Some register names common to all
  43               	    AVR devices are defined directly within <tt>&lt;avr/common.h&gt;</tt>,
  44               	    which is included in <tt>&lt;avr/io.h&gt;</tt>,
  45               	    but most of the details come from the respective include file.
  46               	
  47               	    Note that this file always includes the following files:
  48               	    \code 
  49               	    #include <avr/sfr_defs.h>
  50               	    #include <avr/portpins.h>
  51               	    #include <avr/common.h>
  52               	    #include <avr/version.h>
  53               	    \endcode
  54               	    See \ref avr_sfr for more details about that header file.
  55               	
  56               	    Included are definitions of the IO register set and their
  57               	    respective bit values as specified in the Atmel documentation.
  58               	    Note that inconsistencies in naming conventions,
  59               	    so even identical functions sometimes get different names on
  60               	    different devices.
  61               	
  62               	    Also included are the specific names useable for interrupt
  63               	    function definitions as documented
  64               	    \ref avr_signames "here".
  65               	
  66               	    Finally, the following macros are defined:
  67               	
  68               	    - \b RAMEND
  69               	    <br>
  70               	    The last on-chip RAM address.
  71               	    <br>
  72               	    - \b XRAMEND
  73               	    <br>
  74               	    The last possible RAM location that is addressable. This is equal to 
  75               	    RAMEND for devices that do not allow for external RAM. For devices 
  76               	    that allow external RAM, this will be larger than RAMEND.
  77               	    <br>
  78               	    - \b E2END
  79               	    <br>
  80               	    The last EEPROM address.
  81               	    <br>
  82               	    - \b FLASHEND
  83               	    <br>
  84               	    The last byte address in the Flash program space.
  85               	    <br>
  86               	    - \b SPM_PAGESIZE
  87               	    <br>
  88               	    For devices with bootloader support, the flash pagesize
  89               	    (in bytes) to be used for the \c SPM instruction. 
  90               	    - \b E2PAGESIZE
  91               	    <br>
  92               	    The size of the EEPROM page.
  93               	    
  94               	*/
  95               	
  96               	#ifndef _AVR_IO_H_
  97               	#define _AVR_IO_H_
  98               	
  99               	#include <avr/sfr_defs.h>
   1               	/* Copyright (c) 2002, Marek Michalkiewicz <marekm@amelek.gda.pl>
 100               	
 101               	#if defined (__AVR_AT94K__)
 102               	#  include <avr/ioat94k.h>
 103               	#elif defined (__AVR_AT43USB320__)
 104               	#  include <avr/io43u32x.h>
 105               	#elif defined (__AVR_AT43USB355__)
 106               	#  include <avr/io43u35x.h>
 107               	#elif defined (__AVR_AT76C711__)
 108               	#  include <avr/io76c711.h>
 109               	#elif defined (__AVR_AT86RF401__)
 110               	#  include <avr/io86r401.h>
 111               	#elif defined (__AVR_AT90PWM1__)
 112               	#  include <avr/io90pwm1.h>
 113               	#elif defined (__AVR_AT90PWM2__)
 114               	#  include <avr/io90pwmx.h>
 115               	#elif defined (__AVR_AT90PWM2B__)
 116               	#  include <avr/io90pwm2b.h>
 117               	#elif defined (__AVR_AT90PWM3__)
 118               	#  include <avr/io90pwmx.h>
 119               	#elif defined (__AVR_AT90PWM3B__)
 120               	#  include <avr/io90pwm3b.h>
 121               	#elif defined (__AVR_AT90PWM216__)
 122               	#  include <avr/io90pwm216.h>
 123               	#elif defined (__AVR_AT90PWM316__)
 124               	#  include <avr/io90pwm316.h>
 125               	#elif defined (__AVR_AT90PWM81__)
 126               	#  include <avr/io90pwm81.h>
 127               	#elif defined (__AVR_ATmega8U2__)
 128               	#  include <avr/iom8u2.h>
 129               	#elif defined (__AVR_ATmega16M1__)
 130               	#  include <avr/iom16m1.h>
 131               	#elif defined (__AVR_ATmega16U2__)
 132               	#  include <avr/iom16u2.h>
 133               	#elif defined (__AVR_ATmega16U4__)
 134               	#  include <avr/iom16u4.h>
 135               	#elif defined (__AVR_ATmega32C1__)
 136               	#  include <avr/iom32c1.h>
 137               	#elif defined (__AVR_ATmega32M1__)
 138               	#  include <avr/iom32m1.h>
 139               	#elif defined (__AVR_ATmega32U2__)
 140               	#  include <avr/iom32u2.h>
 141               	#elif defined (__AVR_ATmega32U4__)
 142               	#  include <avr/iom32u4.h>
 143               	#elif defined (__AVR_ATmega32U6__)
 144               	#  include <avr/iom32u6.h>
 145               	#elif defined (__AVR_ATmega64C1__)
 146               	#  include <avr/iom64c1.h>
 147               	#elif defined (__AVR_ATmega64M1__)
 148               	#  include <avr/iom64m1.h>
 149               	#elif defined (__AVR_ATmega128__)
 150               	#  include <avr/iom128.h>
 151               	#elif defined (__AVR_ATmega1280__)
 152               	#  include <avr/iom1280.h>
 153               	#elif defined (__AVR_ATmega1281__)
 154               	#  include <avr/iom1281.h>
 155               	#elif defined (__AVR_ATmega1284P__)
 156               	#  include <avr/iom1284p.h>
 157               	#elif defined (__AVR_ATmega128RFA1__)
 158               	#  include <avr/iom128rfa1.h>
 159               	#elif defined (__AVR_ATmega2560__)
 160               	#  include <avr/iom2560.h>
 161               	#elif defined (__AVR_ATmega2561__)
 162               	#  include <avr/iom2561.h>
 163               	#elif defined (__AVR_AT90CAN32__)
 164               	#  include <avr/iocan32.h>
 165               	#elif defined (__AVR_AT90CAN64__)
 166               	#  include <avr/iocan64.h>
 167               	#elif defined (__AVR_AT90CAN128__)
 168               	#  include <avr/iocan128.h>
 169               	#elif defined (__AVR_AT90USB82__)
 170               	#  include <avr/iousb82.h>
 171               	#elif defined (__AVR_AT90USB162__)
 172               	#  include <avr/iousb162.h>
 173               	#elif defined (__AVR_AT90USB646__)
 174               	#  include <avr/iousb646.h>
 175               	#elif defined (__AVR_AT90USB647__)
 176               	#  include <avr/iousb647.h>
 177               	#elif defined (__AVR_AT90USB1286__)
 178               	#  include <avr/iousb1286.h>
 179               	#elif defined (__AVR_AT90USB1287__)
 180               	#  include <avr/iousb1287.h>
 181               	#elif defined (__AVR_ATmega64__)
 182               	#  include <avr/iom64.h>
 183               	#elif defined (__AVR_ATmega640__)
 184               	#  include <avr/iom640.h>
 185               	#elif defined (__AVR_ATmega644__) || defined (__AVR_ATmega644A__)
 186               	#  include <avr/iom644.h>
 187               	#elif defined (__AVR_ATmega644P__)
 188               	#  include <avr/iom644p.h>
 189               	#elif defined (__AVR_ATmega644PA__)
 190               	#  include <avr/iom644pa.h>
 191               	#elif defined (__AVR_ATmega645__) || defined (__AVR_ATmega645A__) || defined (__AVR_ATmega645P__)
 192               	#  include <avr/iom645.h>
 193               	#elif defined (__AVR_ATmega6450__) || defined (__AVR_ATmega6450A__) || defined (__AVR_ATmega6450P__
 194               	#  include <avr/iom6450.h>
 195               	#elif defined (__AVR_ATmega649__) || defined (__AVR_ATmega649A__)
 196               	#  include <avr/iom649.h>
 197               	#elif defined (__AVR_ATmega6490__) || defined (__AVR_ATmega6490A__) || defined (__AVR_ATmega6490P__
 198               	#  include <avr/iom6490.h>
 199               	#elif defined (__AVR_ATmega649P__)
 200               	#  include <avr/iom649p.h>
 201               	#elif defined (__AVR_ATmega64HVE__)
 202               	#  include <avr/iom64hve.h>
 203               	#elif defined (__AVR_ATmega103__)
 204               	#  include <avr/iom103.h>
 205               	#elif defined (__AVR_ATmega32__)
 206               	#  include <avr/iom32.h>
 207               	#elif defined (__AVR_ATmega323__)
 208               	#  include <avr/iom323.h>
 209               	#elif defined (__AVR_ATmega324P__) || defined (__AVR_ATmega324A__)
 210               	#  include <avr/iom324.h>
 211               	#elif defined (__AVR_ATmega324PA__)
 212               	#  include <avr/iom324pa.h>
 213               	#elif defined (__AVR_ATmega325__)
 214               	#  include <avr/iom325.h>
 215               	#elif defined (__AVR_ATmega325P__)
 216               	#  include <avr/iom325.h>
 217               	#elif defined (__AVR_ATmega3250__)
 218               	#  include <avr/iom3250.h>
 219               	#elif defined (__AVR_ATmega3250P__)
 220               	#  include <avr/iom3250.h>
 221               	#elif defined (__AVR_ATmega328P__) || defined (__AVR_ATmega328__)
 222               	#  include <avr/iom328p.h>
   1               	/* Copyright (c) 2007 Atmel Corporation
 223               	#elif defined (__AVR_ATmega329__)
 224               	#  include <avr/iom329.h>
 225               	#elif defined (__AVR_ATmega329P__) || defined (__AVR_ATmega329PA__)
 226               	#  include <avr/iom329.h>
 227               	#elif defined (__AVR_ATmega3290__)
 228               	#  include <avr/iom3290.h>
 229               	#elif defined (__AVR_ATmega3290P__)
 230               	#  include <avr/iom3290.h>
 231               	#elif defined (__AVR_ATmega32HVB__)
 232               	#  include <avr/iom32hvb.h>
 233               	#elif defined (__AVR_ATmega406__)
 234               	#  include <avr/iom406.h>
 235               	#elif defined (__AVR_ATmega16__)
 236               	#  include <avr/iom16.h>
 237               	#elif defined (__AVR_ATmega16A__)
 238               	#  include <avr/iom16a.h>
 239               	#elif defined (__AVR_ATmega161__)
 240               	#  include <avr/iom161.h>
 241               	#elif defined (__AVR_ATmega162__)
 242               	#  include <avr/iom162.h>
 243               	#elif defined (__AVR_ATmega163__)
 244               	#  include <avr/iom163.h>
 245               	#elif defined (__AVR_ATmega164P__) || defined (__AVR_ATmega164A__)
 246               	#  include <avr/iom164.h>
 247               	#elif defined (__AVR_ATmega165__) || defined (__AVR_ATmega165A__)
 248               	#  include <avr/iom165.h>
 249               	#elif defined (__AVR_ATmega165P__)
 250               	#  include <avr/iom165p.h>
 251               	#elif defined (__AVR_ATmega168__) || defined (__AVR_ATmega168A__)
 252               	#  include <avr/iom168.h>
 253               	#elif defined (__AVR_ATmega168P__)
 254               	#  include <avr/iom168p.h>
 255               	#elif defined (__AVR_ATmega169__) || defined (__AVR_ATmega169A__)
 256               	#  include <avr/iom169.h>
 257               	#elif defined (__AVR_ATmega169P__)
 258               	#  include <avr/iom169p.h>
 259               	#elif defined (__AVR_ATmega169PA__)
 260               	#  include <avr/iom169pa.h>
 261               	#elif defined (__AVR_ATmega8HVA__)
 262               	#  include <avr/iom8hva.h>
 263               	#elif defined (__AVR_ATmega16HVA__)
 264               	#  include <avr/iom16hva.h>
 265               	#elif defined (__AVR_ATmega16HVA2__)
 266               	#  include <avr/iom16hva2.h>
 267               	#elif defined (__AVR_ATmega16HVB__)
 268               	#  include <avr/iom16hvb.h>
 269               	#elif defined (__AVR_ATmega8__)
 270               	#  include <avr/iom8.h>
 271               	#elif defined (__AVR_ATmega48__) || defined (__AVR_ATmega48A__)
 272               	#  include <avr/iom48.h>
 273               	#elif defined (__AVR_ATmega48P__)
 274               	#  include <avr/iom48p.h>
 275               	#elif defined (__AVR_ATmega88__) || defined (__AVR_ATmega88A__)
 276               	#  include <avr/iom88.h>
 277               	#elif defined (__AVR_ATmega88P__)
 278               	#  include <avr/iom88p.h>
 279               	#elif defined (__AVR_ATmega88PA__)
 280               	#  include <avr/iom88pa.h>
 281               	#elif defined (__AVR_ATmega8515__)
 282               	#  include <avr/iom8515.h>
 283               	#elif defined (__AVR_ATmega8535__)
 284               	#  include <avr/iom8535.h>
 285               	#elif defined (__AVR_AT90S8535__)
 286               	#  include <avr/io8535.h>
 287               	#elif defined (__AVR_AT90C8534__)
 288               	#  include <avr/io8534.h>
 289               	#elif defined (__AVR_AT90S8515__)
 290               	#  include <avr/io8515.h>
 291               	#elif defined (__AVR_AT90S4434__)
 292               	#  include <avr/io4434.h>
 293               	#elif defined (__AVR_AT90S4433__)
 294               	#  include <avr/io4433.h>
 295               	#elif defined (__AVR_AT90S4414__)
 296               	#  include <avr/io4414.h>
 297               	#elif defined (__AVR_ATtiny22__)
 298               	#  include <avr/iotn22.h>
 299               	#elif defined (__AVR_ATtiny26__)
 300               	#  include <avr/iotn26.h>
 301               	#elif defined (__AVR_AT90S2343__)
 302               	#  include <avr/io2343.h>
 303               	#elif defined (__AVR_AT90S2333__)
 304               	#  include <avr/io2333.h>
 305               	#elif defined (__AVR_AT90S2323__)
 306               	#  include <avr/io2323.h>
 307               	#elif defined (__AVR_AT90S2313__)
 308               	#  include <avr/io2313.h>
 309               	#elif defined (__AVR_ATtiny2313__)
 310               	#  include <avr/iotn2313.h>
 311               	#elif defined (__AVR_ATtiny2313A__)
 312               	#  include <avr/iotn2313a.h>
 313               	#elif defined (__AVR_ATtiny13__)
 314               	#  include <avr/iotn13.h>
 315               	#elif defined (__AVR_ATtiny13A__)
 316               	#  include <avr/iotn13a.h>
 317               	#elif defined (__AVR_ATtiny25__)
 318               	#  include <avr/iotn25.h>
 319               	#elif defined (__AVR_ATtiny4313__)
 320               	#  include <avr/iotn4313.h>
 321               	#elif defined (__AVR_ATtiny45__)
 322               	#  include <avr/iotn45.h>
 323               	#elif defined (__AVR_ATtiny85__)
 324               	#  include <avr/iotn85.h>
 325               	#elif defined (__AVR_ATtiny24__)
 326               	#  include <avr/iotn24.h>
 327               	#elif defined (__AVR_ATtiny24A__)
 328               	#  include <avr/iotn24a.h>
 329               	#elif defined (__AVR_ATtiny44__)
 330               	#  include <avr/iotn44.h>
 331               	#elif defined (__AVR_ATtiny44A__)
 332               	#  include <avr/iotn44a.h>
 333               	#elif defined (__AVR_ATtiny84__)
 334               	#  include <avr/iotn84.h>
 335               	#elif defined (__AVR_ATtiny261__)
 336               	#  include <avr/iotn261.h>
 337               	#elif defined (__AVR_ATtiny261A__)
 338               	#  include <avr/iotn261a.h>
 339               	#elif defined (__AVR_ATtiny461__)
 340               	#  include <avr/iotn461.h>
 341               	#elif defined (__AVR_ATtiny461A__)
 342               	#  include <avr/iotn461a.h>
 343               	#elif defined (__AVR_ATtiny861__)
 344               	#  include <avr/iotn861.h>
 345               	#elif defined (__AVR_ATtiny861A__)
 346               	#  include <avr/iotn861a.h>
 347               	#elif defined (__AVR_ATtiny43U__)
 348               	#  include <avr/iotn43u.h>
 349               	#elif defined (__AVR_ATtiny48__)
 350               	#  include <avr/iotn48.h>
 351               	#elif defined (__AVR_ATtiny88__)
 352               	#  include <avr/iotn88.h>
 353               	#elif defined (__AVR_ATtiny87__)
 354               	#  include <avr/iotn87.h>
 355               	#elif defined (__AVR_ATtiny167__)
 356               	#  include <avr/iotn167.h>
 357               	#elif defined (__AVR_AT90SCR100__)
 358               	#  include <avr/io90scr100.h>
 359               	#elif defined (__AVR_ATxmega16A4__)
 360               	#  include <avr/iox16a4.h>
 361               	#elif defined (__AVR_ATxmega16D4__)
 362               	#  include <avr/iox16d4.h>
 363               	#elif defined (__AVR_ATxmega32A4__)
 364               	#  include <avr/iox32a4.h>
 365               	#elif defined (__AVR_ATxmega32D4__)
 366               	#  include <avr/iox32d4.h>
 367               	#elif defined (__AVR_ATxmega64A1__)
 368               	#  include <avr/iox64a1.h>
 369               	#elif defined (__AVR_ATxmega64A3__)
 370               	#  include <avr/iox64a3.h>
 371               	#elif defined (__AVR_ATxmega64D3__)
 372               	#  include <avr/iox64d3.h>
 373               	#elif defined (__AVR_ATxmega128A1__)
 374               	#  include <avr/iox128a1.h>
 375               	#elif defined (__AVR_ATxmega128A3__)
 376               	#  include <avr/iox128a3.h>
 377               	#elif defined (__AVR_ATxmega128D3__)
 378               	#  include <avr/iox128d3.h>
 379               	#elif defined (__AVR_ATxmega192A3__)
 380               	#  include <avr/iox192a3.h>
 381               	#elif defined (__AVR_ATxmega192D3__)
 382               	#  include <avr/iox192d3.h>
 383               	#elif defined (__AVR_ATxmega256A3__)
 384               	#  include <avr/iox256a3.h>
 385               	#elif defined (__AVR_ATxmega256A3B__)
 386               	#  include <avr/iox256a3b.h>
 387               	#elif defined (__AVR_ATxmega256D3__)
 388               	#  include <avr/iox256d3.h>
 389               	#elif defined (__AVR_ATA6289__)
 390               	#  include <avr/ioa6289.h>
 391               	/* avr1: the following only supported for assembler programs */
 392               	#elif defined (__AVR_ATtiny28__)
 393               	#  include <avr/iotn28.h>
 394               	#elif defined (__AVR_AT90S1200__)
 395               	#  include <avr/io1200.h>
 396               	#elif defined (__AVR_ATtiny15__)
 397               	#  include <avr/iotn15.h>
 398               	#elif defined (__AVR_ATtiny12__)
 399               	#  include <avr/iotn12.h>
 400               	#elif defined (__AVR_ATtiny11__)
 401               	#  include <avr/iotn11.h>
 402               	#else
 403               	#  if !defined(__COMPILING_AVR_LIBC__)
 404               	#    warning "device type not defined"
 405               	#  endif
 406               	#endif
 407               	
 408               	#include <avr/portpins.h>
   1               	/* Copyright (c) 2003  Theodore A. Roth
 409               	
 410               	#include <avr/common.h>
   1               	/* Copyright (c) 2007 Eric B. Weddington
 411               	
 412               	#include <avr/version.h>
   1               	/* Copyright (c) 2005, Joerg Wunsch                               -*- c -*-
 413               	
 414               	/* Include fuse.h after individual IO header files. */
 415               	#include <avr/fuse.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 416               	
 417               	/* Include lock.h after individual IO header files. */
 418               	#include <avr/lock.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 419               	
   3               	#include <avr/interrupt.h>
   1               	/* Copyright (c) 2002,2005,2007 Marek Michalkiewicz
   4               	#include "kernel.h"
   1               	
   5               	#include "debug.h"
   1               	
   6               	
   7               	
   8               	
   9               	
  10               	
  11               	;;============================define user address or macro starting=========================;; 
  12               	.equ     KER_TR ,         1000                            ;TickRate in Hz, only defined, not calcul
  13               	.equ     KER_PRS,         0x03                            ;For prescaler 64, manually select
  14               	.equ     KER_RLD,         0x82                            ;KER_RLD = 0xFF-(F_CPU/KER_PRS/KER_TR), c
  15               	.equ     KER_STK_SZ,      128                             ;stack size in bytes for each task
  16               	.equ     KER_MX_NTSK,     10                              ;max number of tasks
  17               	;;==============================define user address or macro end============================;; 
  18               	
  19               	
  20               	
  21               	
  22               	
  23               	;;===============================define data offsets starting===============================;; 
  24               	.equ     OFB_TICK0,       0x00                            ;tick count byte0 offset from KerBase
  25               	.equ     OFB_TICK1,       0x01                            ;tick count byte1 offset from KerBase
  26               	.equ     OFB_TICK2,       0x02                            ;tick count byte2 offset from KerBase
  27               	.equ     OFB_TICK3,       0x03                            ;tick count byte3 offset from KerBase
  28               	.equ     OFB_TICK4,       0x04                            ;tick count byte4 offset from KerBase
  29               	.equ     OFB_PRS  ,       0x05                            ;counter prescaler offset from KerBase
  30               	.equ     OFB_RLD  ,       0x06                            ;counter reload offset from KerBase
  31               	.equ     OFB_TID  ,       0x07                            ;task id offset from KerBase
  32               	.equ     OFB_NTSK ,       0x08                            ;ntask offset from KerBase
  33               	.equ     OFB_LPR  ,       0x09                            ;lowest priority offset from KerBase
  34               	.equ     OFB_PTID ,       0x0A                            ;priority task_id offset from KerBase
  35               	.equ     OFB_SCH_MODE,    0x0B                            ;scheduler mode offset from KerBase
  36               	.equ     OFM_MSPI ,       0x00                            ;main stack pointer index field offset fr
  37               	.equ     OFM_MSPS ,       0x02                            ;main stack pointer starting offset from 
  38               	;;==================================define data offsets end=================================;; 
  39               	
  40               	
  41               	
  42               	
  43               	
  44               	;;===============================define system macro starting===============================;; 
  45               	.equ     TASK_BLOCK,      0x00                            ;bit 0 in system status reg          
  46               	.equ     TASK_READY,      0x01                            ;bit 0 in system status reg          
  47               	.equ     SCH_MODE_HANDLER,0x00                            ;handler mode in KER_SLP_TIME_MGNT   
  48               	.equ     SCH_MODE_THREAD, 0x01                            ;thread mode in KER_SLP_TIME_MGNT    
  49               	;;==================================define system macro end=================================;; 
  50               	
  51               	
  52               	
  53               	
  54               	
  55               	;;===========================define hardware reg address starting===========================;; 
  56               	.equ     SRSREG  ,        0x5F                            ;manually defined SREG in SRAM
  57               	.equ     SRSPH   ,        0x5E                            ;manually defined SPH in SRAM
  58               	.equ     SRSPL   ,        0x5D                            ;manually defined SPL in SRAM
  59               	
  60               	.equ     SRTIMSK0,        0x6E                            ;manually defined TIMSK0 in SRAM
  61               	.equ     SROCR0B ,        0x48                            ;manually defined OCR0B in SRAM
  62               	.equ     SROCR0A ,        0x47                            ;manually defined OCR0A in SRAM
  63               	.equ     SRTCNT0 ,        0x46                            ;manually defined TCNT0 in SRAM
  64               	.equ     SRTCCR0B,        0x45                            ;manually defined TCCR0B in SRAM
  65               	.equ     SRTCCR0A,        0x44                            ;manually defined TCCR0A in SRAM
  66               	.equ     SRTIFR0 ,        0x35                            ;manually defined TIFR0 in SRAM
  67               	
  68               	.equ     IOOCR0B ,        0x28                            ;manually defined OCR0B in IO
  69               	.equ     IOOCR0A ,        0x27                            ;manually defined OCR0A in IO
  70               	.equ     IOTCNT0 ,        0x26                            ;manually defined TCNT0 in IO
  71               	.equ     IOTCCR0B,        0x25                            ;manually defined TCCR0B in IO
  72               	.equ     IOTCCR0A,        0x24                            ;manually defined TCCR0A in IO
  73               	.equ     IOTIFR0 ,        0x15                            ;manually defined TIFR0 in IO
  74               	
  75               	.equ     IOSREG  ,        0x3F                            ;manually defined SREG in IO
  76               	.equ     IOSPH   ,        0x3E                            ;manually defined SPH in IO
  77               	.equ     IOSPL   ,        0x3D                            ;manually defined SPL in IO
  78               	;;==============================define hardware reg address end=============================;; 
  79               	
  80               	
  81               	
  82               	
  83               	
  84               	;;=============================define global variables starting=============================;; 
  85               	.section   .bss
  86               	
  87               	.global    KerBase                                        ;declare global space for kernel
  88 0000 0000 0000 	KerBase:   .skip 12                                       ;see offset section
  88      0000 0000 
  88      0000 0000 
  89               	
  90               	.global    KerPSP                                         ;space for process stack pointers
  91 000c 0000 0000 	KerPSP:    .skip KER_MX_NTSK*2                            ;2 bytes for each task
  91      0000 0000 
  91      0000 0000 
  91      0000 0000 
  91      0000 0000 
  92               	
  93               	.global    KerSSZ                                         ;stack for main stack pointers
  94 0020 0000 0000 	KerSSZ:    .skip 14                                       ;stack_ptr(2), MSPZPn(4)
  94      0000 0000 
  94      0000 0000 
  94      0000 
  95               	
  96               	.global    KerSchSts                                      ;space for scheduler status
  97 002e 0000 0000 	KerSchSts: .skip KER_MX_NTSK*1                            ;status(1)
  97      0000 0000 
  97      0000 
  98               	
  99               	.global    KerSchPr                                       ;space for scheduler priority
 100 0038 0000 0000 	KerSchPr:  .skip KER_MX_NTSK*1                            ;priority(1)
 100      0000 0000 
 100      0000 
 101               	
 102               	.global    KerSchSlp                                      ;space for task sleep
 103 0042 0000 0000 	KerSchSlp: .skip KER_MX_NTSK*2                            ;timing(2)
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 103      0000 0000 
 104               	
 105               	.global    KerStack                                       ;space for stack
 106 0056 0000 0000 	KerStack:  .skip KER_STK_SZ*KER_MX_NTSK                   ;KER_STK_SZ bytes for each task
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 107               	;;==============================define global variables end=================================;; 
 108               	
 109               	
 110               	
 111               	
 112               	
 113               	;;===============================define vector section starting=============================;; 
 114               	.section .vectors, "ax", @progbits
 115               	
 116 0000 0000 0000 	.org    0x20
 116      0000 0000 
 116      0000 0000 
 116      0000 0000 
 116      0000 0000 
 116      0000 0000 
 116      0000 0000 
 116      0000 0000 
 117:kernel.S      ****         RJMP  __vector_16
 118               	;;=================================define vector section end================================;; 
 119               	
 120               	
 121               	
 122               	
 123               	
 124               	;;===============================define text section starting===============================;; 
 125               	.section .text
 126               	;;==================================define text section end=================================;; 
 127               	
 128               	
 129               	
 130               	
 131               	
 132               	;;==============================define global functions starting============================;; 
 133               	.global  Kernel_SysTick_Reg_Init
 134               	.global  Kernel_SysTick_Val_Get
 135               	.global  Kernel_SysTick_Val_Safely_Get
 136               	.global  Kernel_Interrupt_Sts_Get
 137               	.global  Kernel_Init
 138               	.global  Kernel_Task_Create
 139               	.global  Kernel_Start_Tasks
 140               	.global  Kernel_Task_Idle
 141               	.global  Kernel_Task_Sleep
 142               	.global  Kernel_Task_Sleep_Time_Get
 143               	.global  Kernel_Task_Status_Get
 144               	.global  Kernel_NTask_Get
 145               	.global  Kernel_Task_Prio_Get
 146               	.global  Kernel_Lowest_Prio_Get
 147               	.global  Kernel_High_Prio_Task_ID_Get
 148               	.global  Kernel_Abs_High_Prio_Task_ID_Get
 149               	;;================================define global functions end===============================;; 
 150               	
 151               	
 152               	
 153               	
 154               	
 155               	;;============================debug pin operation init starting=============================;; 
 156               	;used registers          : R16, R17                                                            
 157               	;unsafe access registers : None                                                                
 158               	.macro  KER_TIMER_INIT                                    ;total 1.5uS @8MHz      ( 12 clocks) 
 159               	        LDS   R16		         , KerBase+OFB_PRS        ;load prescaler         (  2 clocks) 
 160               			LDS   R17		         , KerBase+OFB_RLD        ;load reload val        (  2 clocks) 
 161               			STS   SRTCCR0B           , R16                    ;prescaler-> TCCR0B     (  2 clocks) 
 162               			STS   SRTCNT0            , R17                    ;reload val-> TCNT0     (  2 clocks) 
 163               			LDI   R16                , 0x01                   ;bit mask TOIE0         (  1 clock ) 
 164               			STS   SRTIMSK0           , R16                    ;set to TIMSK0          (  2 clocks) 
 165               			SEI                                               ;force enable interrupt (  1 clock ) 
 166               	.endm                                                                                          
 167               	;;==============================debug pin operation init end================================;; 
 168               	
 169               	
 170               	
 171               	
 172               	
 173               	;;============================debug pin operation init starting=============================;; 
 174               	;used registers          : None                                                                
 175               	;unsafe access registers : None                                                                
 176               	.macro  KER_DEBUG_PIN_INIT                                ;total 0.5uS @8MHz      (  4 clocks) 
 177               	        #ifdef KER_DBG_ENABLE                                                                  
 178               			CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear port bit         (  2 clocks) 
 179               			SBI   KER_DBG_DDR        , KER_DBG_PIN            ;set bit in DDR         (  2 clocks) 
 180               			#endif                                                                                 
 181               	.endm                                                                                          
 182               	;;==============================debug pin operation init end================================;; 
 183               	
 184               	
 185               	
 186               	
 187               	
 188               	;;===========================debug pin operation set starting===============================;; 
 189               	;used registers          : None                                                                
 190               	;unsafe access registers : None                                                                
 191               	.macro  KER_DEBUG_PIN_SET                                 ;total 0.25uS @8MHz     (  2 clocks) 
 192               	        #ifdef KER_DBG_ENABLE                                                                  
 193               	        SBI   KER_DBG_PORT       , KER_DBG_PIN            ;set gpio               (  2 clocks) 
 194               			#endif                                                                                 
 195               	.endm                                                                                          
 196               	;;==============================debug pin operation set end=================================;; 
 197               	
 198               	
 199               	
 200               	
 201               	
 202               	;;===========================debug pin operation clear starting=============================;; 
 203               	;used registers          : None                                                                
 204               	;unsafe access registers : None                                                                
 205               	.macro  KER_DEBUG_PIN_CLEAR                               ;total 0.25uS @8MHz     (  2 clocks) 
 206               	        #ifdef KER_DBG_ENABLE                                                                  
 207               			CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear gpio             (  2 clocks) 
 208               			#endif                                                                                 
 209               	.endm                                                                                          
 210               	;;==============================debug pin operation clear end===============================;; 
 211               	
 212               	
 213               	
 214               	
 215               	
 216               	;;==============================reload counter value starting===============================;; 
 217               	;used registers          : R16                                                                 
 218               	;unsafe access registers : None                                                                
 219               	.macro  KER_COUNTER_RELOAD                                ;total 0.5uS @8MHz      (  4 clocks) 
 220               	        LDS   R16                , KerBase+OFB_RLD        ;load reload value      (  2 clocks) 
 221               			STS   SRTCNT0            , R16                    ;Set value to TCNT0     (  2 clocks) 
 222               	.endm                                                                                          
 223               	;;=================================reload counter value end=================================;; 
 224               	
 225               	
 226               	
 227               	
 228               	
 229               	;;==================================context save starting===================================;; 
 230               	;used registers          : R0~R31                                                              
 231               	;unsafe access registers : None                                                                
 232               	.macro  KER_CONTEXT_SAVE                                  ;total 8.5uS @8MHz      ( 68 clocks) 
 233               	        PUSH  R0                                          ;save R0                (  2 clocks) 
 234               			IN    R0                 , IOSREG                 ;load SREG              (  1 clock ) 
 235               			PUSH  R0                                          ;save SREG              (  2 clocks) 
 236               			PUSH  R1                                          ;save R1                (  2 clocks) 
 237               			CLR   R1                                          ;clear R1               (  1 clock ) 
 238               			PUSH  R2                                          ;save R2                (  2 clocks) 
 239               			PUSH  R3                                          ;save R3                (  2 clocks) 
 240               			PUSH  R4                                          ;save R4                (  2 clocks) 
 241               			PUSH  R5                                          ;save R5                (  2 clocks) 
 242               			PUSH  R6                                          ;save R6                (  2 clocks) 
 243               			PUSH  R7                                          ;save R7                (  2 clocks) 
 244               			PUSH  R8                                          ;save R8                (  2 clocks) 
 245               			PUSH  R9                                          ;save R9                (  2 clocks) 
 246               			PUSH  R10                                         ;save R10               (  2 clocks) 
 247               			PUSH  R11                                         ;save R11               (  2 clocks) 
 248               			PUSH  R12                                         ;save R12               (  2 clocks) 
 249               			PUSH  R13                                         ;save R13               (  2 clocks) 
 250               			PUSH  R14                                         ;save R14               (  2 clocks) 
 251               			PUSH  R15                                         ;save R15               (  2 clocks) 
 252               			PUSH  R16                                         ;save R16               (  2 clocks) 
 253               			PUSH  R17                                         ;save R17               (  2 clocks) 
 254               			PUSH  R18                                         ;save R18               (  2 clocks) 
 255               			PUSH  R19                                         ;save R19               (  2 clocks) 
 256               			PUSH  R20                                         ;save R20               (  2 clocks) 
 257               			PUSH  R21                                         ;save R21               (  2 clocks) 
 258               			PUSH  R22                                         ;save R22               (  2 clocks) 
 259               			PUSH  R23                                         ;save R23               (  2 clocks) 
 260               			PUSH  R24                                         ;save R24               (  2 clocks) 
 261               			PUSH  R25                                         ;save R25               (  2 clocks) 
 262               			PUSH  R26                                         ;save R26               (  2 clocks) 
 263               			PUSH  R27                                         ;save R27               (  2 clocks) 
 264               			PUSH  R28                                         ;save R28               (  2 clocks) 
 265               			PUSH  R29                                         ;save R29               (  2 clocks) 
 266               			PUSH  R30                                         ;save R30               (  2 clocks) 
 267               			PUSH  R31                                         ;save R31               (  2 clocks) 
 268               	.endm                                                                                          
 269               	;;=====================================context save end=====================================;; 
 270               	
 271               	
 272               	
 273               	
 274               	
 275               	;;================================context restore starting==================================;; 
 276               	;used registers          : R0~R31                                                              
 277               	;unsafe access registers : None                                                                
 278               	.macro  KER_CONTEXT_RESTORE                               ;total 8.38uS @8MHz     ( 67 clocks) 
 279               			POP   R31                                         ;restore R31            (  2 clocks) 
 280               			POP   R30                                         ;restore R30            (  2 clocks) 
 281               			POP   R29                                         ;restore R29            (  2 clocks) 
 282               			POP   R28                                         ;restore R28            (  2 clocks) 
 283               			POP   R27                                         ;restore R27            (  2 clocks) 
 284               			POP   R26                                         ;restore R26            (  2 clocks) 
 285               			POP   R25                                         ;restore R25            (  2 clocks) 
 286               			POP   R24                                         ;restore R24            (  2 clocks) 
 287               			POP   R23                                         ;restore R23            (  2 clocks) 
 288               			POP   R22                                         ;restore R22            (  2 clocks) 
 289               			POP   R21                                         ;restore R21            (  2 clocks) 
 290               			POP   R20                                         ;restore R20            (  2 clocks) 
 291               			POP   R19                                         ;restore R19            (  2 clocks) 
 292               			POP   R18                                         ;restore R18            (  2 clocks) 
 293               			POP   R17                                         ;restore R17            (  2 clocks) 
 294               			POP   R16                                         ;restore R16            (  2 clocks) 
 295               			POP   R15                                         ;restore R15            (  2 clocks) 
 296               			POP   R14                                         ;restore R14            (  2 clocks) 
 297               			POP   R13                                         ;restore R13            (  2 clocks) 
 298               			POP   R12                                         ;restore R12            (  2 clocks) 
 299               			POP   R11                                         ;restore R11            (  2 clocks) 
 300               			POP   R10                                         ;restore R10            (  2 clocks) 
 301               			POP   R9                                          ;restore R9             (  2 clocks) 
 302               			POP   R8                                          ;restore R8             (  2 clocks) 
 303               			POP   R7                                          ;restore R7             (  2 clocks) 
 304               			POP   R6                                          ;restore R6             (  2 clocks) 
 305               			POP   R5                                          ;restore R5             (  2 clocks) 
 306               			POP   R4                                          ;restore R4             (  2 clocks) 
 307               			POP   R3                                          ;restore R3             (  2 clocks) 
 308               			POP   R2                                          ;restore R2             (  2 clocks) 
 309               			POP   R1                                          ;restore R1             (  2 clocks) 
 310               			POP   R0                                          ;fetch SREG             (  2 clocks) 
 311               			OUT   IOSREG             , R0                     ;load SREG              (  1 clock ) 
 312               			POP   R0                                          ;restore R0             (  2 clocks) 
 313               	.endm                                                                                          
 314               	;;===================================context restore end====================================;; 
 315               	
 316               	
 317               	
 318               	
 319               	
 320               	;;=========================calculate offset addr in words starting==========================;; 
 321               	;used registers          : R16, R30, R31, args {R30, R31}, returns {R30, R31} wrt OFB_TID      
 322               	;unsafe access registers : R16                                                                 
 323               	.macro  KER_CALC_ADDR_OFF_WORD                            ;total 0.75uS @8MHz     (  6 clocks) 
 324               	        LDS   R16                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 325               			LSL   R16                                         ;left shift to multiply (  1 clock ) 
 326               			ADD   ZL                 , R16                    ;add offset to array    (  1 clock ) 
 327               			LDI   R16                , 0x00                   ;clear for carry prop   (  1 clock ) 
 328               			ADC   ZH                 , R16                    ;add carry if any       (  1 clock ) 
 329               	.endm                                                                                          
 330               	;;=============================calculate offset addr in words end===========================;; 
 331               	
 332               	
 333               	
 334               	
 335               	
 336               	;;=========================calculate offset addr in bytes starting==========================;; 
 337               	;used registers          : R16, R30, R31, args {R30, R31}, returns {R30, R31} wrt OFB_TID      
 338               	;unsafe access registers : R16                                                                 
 339               	.macro  KER_CALC_ADDR_OFF_BYTES                           ;total 0.63uS @8MHz     (  5 clocks) 
 340               	        LDS   R16                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 341               			ADD   ZL                 , R16                    ;add offset to array    (  1 clock ) 
 342               			LDI   R16                , 0x00                   ;clear for carry prop   (  1 clock ) 
 343               			ADC   ZH                 , R16                    ;add carry if any       (  1 clock ) 
 344               	.endm                                                                                          
 345               	;;=============================calculate offset addr in bytes end===========================;; 
 346               	
 347               	
 348               	
 349               	
 350               	
 351               	;;===============================save current task sp starting==============================;; 
 352               	;used registers          : R16, R17, R18, R30, R31                                             
 353               	;unsafe access registers : None                                                                
 354               	.macro  KER_SAVE_CURR_TASK_SP                             ;total 1.75uS @8MHz     ( 14 clocks) 
 355               			IN    R17                , IOSPL                  ;fetch SPL0             (  1 clock ) 
 356               			IN    R18                , IOSPH                  ;fetch SPH0             (  1 clock ) 
 357               			LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 358               			LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 359               			KER_CALC_ADDR_OFF_WORD                            ;calc offset            (  6 clocks) 
 360               			STD   Z+0                , R17                    ;store SPL at ZP+0      (  2 clocks) 
 361               			STD   Z+1                , R18                    ;store SPH at ZP+1      (  2 clocks) 
 362               	.endm                                                                                          
 363               	;;================================save current task sp end==================================;; 
 364               	
 365               	
 366               	
 367               	
 368               	
 369               	;;==============================load next task id starting==================================;; 
 370               	;used registers          : R16, R17                                                            
 371               	;unsafe access registers : None                                                                
 372               	.macro  KER_LOAD_NEXT_TASK_ID                             ;total 1.63uS @8MHz     ( 13 clocks) 
 373               			LDS   R16                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 374               			INC   R16                                         ;increment task_id      (  1 clock ) 
 375               			LDS   R17                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 376               		_MOD_CONT\@:                                          ;use local label                     
 377               		    CP    R16                , R17                    ;compare R17 with R16   (  1 clock ) 
 378               			BRLO  _MOD_DONE\@                                 ;if R16<R17, done       (  2 clocks) 
 379               			SUB   R16                , R17                    ;subtract R17 from R16  (  1 clock ) 
 380               			RJMP  _MOD_CONT\@                                 ;go to loop start       (  2 clocks) 
 381               		_MOD_DONE\@:                                          ;use local label                     
 382               		    STS   KerBase+OFB_TID    , R16                    ;save task_id%ntask     (  2 clocks) 
 383               	.endm                                                                                          
 384               	;;=================================load next task id end====================================;; 
 385               	
 386               	
 387               	
 388               	
 389               	
 390               	;;==============================increment tick counter starting=============================;; 
 391               	;used registers          : R16, R17                                                            
 392               	;unsafe access registers : None                                                                
 393               	.macro  KER_TICK_INCREMENT                                ;total 3.38uS @8MHz     ( 26 clocks) 
 394               			LDS   R16                , KerBase+OFB_TICK0      ;load Byte0             (  2 clocks) 
 395               			INC   R16                                         ;add 1 with Byte0       (  1 clock ) 
 396               			STS   KerBase+OFB_TICK0  , R16                    ;set Byte0              (  2 clocks) 
 397               			LDI   R17                , 0x00                   ;clear reg              (  1 clock ) 
 398               			LDS   R16                , KerBase+OFB_TICK1      ;load Byte1             (  2 clocks) 
 399               			ADC   R16                , R17                    ;add carry with Byte1   (  1 clock ) 
 400               			STS   KerBase+OFB_TICK1  , R16                    ;set Byte1              (  2 clocks) 
 401               			LDS   R16                , KerBase+OFB_TICK2      ;load Byte2             (  2 clocks) 
 402               			ADC   R16                , R17                    ;add carry with Byte2   (  1 clock ) 
 403               			STS   KerBase+OFB_TICK2  , R16                    ;set Byte2              (  2 clocks) 
 404               			LDS   R16                , KerBase+OFB_TICK3      ;load Byte3             (  2 clocks) 
 405               			ADC   R16                , R17                    ;add carry with Byte3   (  1 clock ) 
 406               			STS   KerBase+OFB_TICK3  , R16                    ;set Byte3              (  2 clocks) 
 407               			LDS   R16                , KerBase+OFB_TICK4      ;load Byte4             (  2 clocks) 
 408               			ADC   R16                , R17                    ;add carry with Byte4   (  1 clock ) 
 409               			STS   KerBase+OFB_TICK4  , R16                    ;set Byte4              (  2 clocks) 
 410               	.endm                                                                                          
 411               	;;=================================increment tick counter end===============================;; 
 412               	
 413               	
 414               	
 415               	
 416               	
 417               	;;==============================load task id & sp starting==================================;; 
 418               	;used registers          : R16, R17, R30, R31                                                  
 419               	;unsafe access registers : None                                                                
 420               	.macro  KER_LOAD_TASK_ID_AND_SP                           ;total 1.75uS @8MHz     ( 14 clocks) 
 421               			LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 422               			LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 423               			KER_CALC_ADDR_OFF_WORD                            ;calc offset            (  6 clocks) 
 424               			LDD   R16                , Z+0                    ;load SPL at ZP         (  2 clocks) 
 425               			LDD   R17                , Z+1                    ;load SPH at ZP         (  2 clocks) 
 426               			OUT   IOSPL              , R16                    ;load SPL0              (  1 clock ) 
 427               			OUT   IOSPH              , R17                    ;load SPH0              (  1 clock ) 
 428               	.endm                                                                                          
 429               	;;=================================load task id & sp end====================================;; 
 430               	
 431               	
 432               	
 433               	
 434               	
 435               	;;================================push msp & zp starting====================================;; 
 436               	;used registers          : R16, R17, R26, R27, R30, R31                                        
 437               	;unsafe access registers : None                                                                
 438               	.macro  KER_PUSH_MSP_ZP                                   ;total 2.25uS @8MHz     ( 18 clocks) 
 439               	        LDS   XL                 , KerSSZ+OFM_MSPI+0      ;load val low           (  2 clocks) 
 440               			LDS   XH                 , KerSSZ+OFM_MSPI+1      ;load val high          (  2 clocks) 
 441               			IN    R16                , IOSPL                  ;copy                   (  1 clock ) 
 442               			IN    R17                , IOSPH                  ;copy                   (  1 clock ) 
 443               			ST    X+                 , R16                    ;store main SPL         (  2 clocks) 
 444               	        ST    X+                 , R17                    ;store main SPH         (  2 clocks) 
 445               			ST    X+                 , ZL                     ;store main ZL          (  2 clocks) 
 446               			ST    X+                 , ZH                     ;store main ZH          (  2 clocks) 
 447               			STS   KerSSZ+OFM_MSPI+0  , XL                     ;store new index        (  2 clocks) 
 448               			STS   KerSSZ+OFM_MSPI+1  , XH                     ;store new index        (  2 clocks) 
 449               	.endm                                                                                          
 450               	;;===================================push msp & zp end======================================;; 
 451               	
 452               	
 453               	
 454               	
 455               	
 456               	;;=================================pop msp & zp starting====================================;; 
 457               	;used registers          : R16, R17, R26, R27, R30, R31                                        
 458               	;unsafe access registers : None                                                                
 459               	.macro  KER_POP_MSP_ZP                                    ;total 2.25uS @8MHz     ( 18 clocks) 
 460               			LDS   XL                 , KerSSZ+OFM_MSPI+0      ;load val low           (  2 clocks) 
 461               			LDS   XH                 , KerSSZ+OFM_MSPI+1      ;load val high          (  2 clocks) 
 462               			LD    ZH                 , -X                     ;load ZH                (  2 clocks) 
 463               			LD    ZL                 , -X                     ;load ZL                (  2 clocks) 
 464               			LD    R17                , -X                     ;load main SPH          (  2 clocks) 
 465               			LD    R16                , -X                     ;load main SPL          (  2 clocks) 
 466               			OUT   IOSPL              , R16                    ;set SPL                (  1 clock ) 
 467               			OUT   IOSPH              , R17                    ;set SPH                (  1 clock ) 
 468               			STS   KerSSZ+OFM_MSPI+0  , XL                     ;store new index        (  2 clocks) 
 469               			STS   KerSSZ+OFM_MSPI+1  , XH                     ;store new index        (  2 clocks) 
 470               	.endm                                                                                          
 471               	;;====================================pop msp & zp end======================================;; 
 472               	
 473               	
 474               	
 475               	
 476               	
 477               	;;===============================decrease timeout starting==================================;; 
 478               	;used registers          : R16, R17, R18, R24, R30, R31, arg R24[0->ISR,1->Thrd], returns R24  
 479               	;unsafe access registers : None                                                                
 480               	.macro  KER_SLP_TIME_MGNT                                 ;total 4.75uS @8MHz     ( 38 clocks) 
 481               			LDI   ZL                 , lo8(KerSchSlp)         ;fetch base pos low     (  1 clock ) 
 482               			LDI   ZH                 , hi8(KerSchSlp)         ;fetch base pos high    (  1 clock ) 
 483               			KER_CALC_ADDR_OFF_WORD                            ;calc offset            (  6 clocks) 
 484               	        
 485               			;fetch current value from ram, if val=0, skip decrement
 486               	        LDD   R16                , Z+0                    ;load val low byte      (  2 clocks) 
 487               			LDD   R17                , Z+1                    ;load val high byte     (  2 clocks) 
 488               			MOV   R18                , R16                    ;copy                   (  1 clock ) 
 489               			OR    R18                , R17                    ;or high & low bytes    (  1 clock ) 
 490               			BREQ  _VAL_NULL\@                                 ;val=0, save sts        (  2 clocks) 
 491               	        
 492               	        CPI   R24                , SCH_MODE_THREAD        ;if arg=1, thread mode  (  1 clock ) 
 493               			BREQ  _VAL_NOT_NULL\@                             ;no need to dec val     (  2 clocks) 
 494               	        
 495               			;R17:R16 contains 16 bit sleep timer val, decrease val by 1
 496               			LDI   R18                , 0x01                   ;set val 1              (  1 clock ) 
 497               	        SUB   R16                , R18                    ;subtract low byte      (  1 clock ) 
 498               			LDI   R18                , 0x00                   ;clear                  (  1 clock ) 
 499               			SBC   R17                , R18                    ;subtract carry if any  (  1 clock ) 
 500               	        
 501               			;store new value                                                                       
 502               			STD   Z+0                , R16                    ;store low byte         (  2 clocks) 
 503               			STD   Z+1                , R17                    ;store low byte         (  2 clocks) 
 504               			MOV   R18                , R16                    ;copy                   (  1 clock ) 
 505               			OR    R18                , R17                    ;or high & low bytes    (  1 clock ) 
 506               			BRNE  _VAL_NOT_NULL\@                             ;val!=0                 (  2 clocks) 
 507               	
 508               		_VAL_NULL\@:
 509               		    ;find ram address for status
 510               		    LDI   ZL                 , lo8(KerSchSts)         ;fetch base pos low     (  1 clock ) 
 511               			LDI   ZH                 , hi8(KerSchSts)         ;fetch base pos high    (  1 clock ) 
 512               	        KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 513               			
 514               			;update flag as task is ready
 515               			LDI   R24                , TASK_READY             ;set TASK_READY         (  1 clock ) 
 516               			ST    Z                  , R24                    ;update flag            (  2 clocks) 
 517               			RJMP  _EXIT_SLP_TIME\@                            ;jump to exit           (  2 clocks) 
 518               	
 519               	    _VAL_NOT_NULL\@:
 520               		    LDI   R24                , TASK_BLOCK             ;use as return val      (  1 clock ) 
 521               	
 522               	    _EXIT_SLP_TIME\@:
 523               	.endm                                                                                          
 524               	;;=================================decrease timeout end=====================================;; 
 525               	
 526               	
 527               	
 528               	
 529               	
 530               	;;===========================current task priority starting=================================;; 
 531               	;used registers          : R16, R24, R30, R31, returns R24 as current task priority            
 532               	;unsafe access registers : None                                                                
 533               	.macro  KER_CURR_TASK_PRIO                                ;total 1.13uS @8MHz     (  9 clocks) 
 534               			LDI    ZL                , lo8(KerSchPr)          ;load low addr          (  1 clock ) 
 535               			LDI    ZH                , hi8(KerSchPr)          ;load high addr         (  1 clock ) 
 536               			LDI    R16               , 0x00                   ;clear reg, for carry   (  1 clock ) 
 537               			LDS    R24               , KerBase+OFB_TID        ;load task id           (  2 clocks) 
 538               	        ADD    ZL                , R24                    ;add low addr           (  1 clock ) 
 539               			ADC    ZH                , R16                    ;add carry if any       (  1 clock ) 
 540               			LD     R24               , Z                      ;load current tid prio  (  2 clocks) 
 541               	.endm                                                                                          
 542               	;;==============================current task priority end===================================;; 
 543               	
 544               	
 545               	
 546               	
 547               	
 548               	;;================================run scheduler starting====================================;; 
 549               	;used registers          : R16, R24, R25, R30, R31, arg[R24->sch mode], ret none               
 550               	;unsafe access registers : None                                                                
 551               	.macro  KER_RUN_SCHEDULER                                 ;total 4.88uS @8MHz     ( 39 clocks) 
 552               			LDI    R16               , 0xFF                   ;set 0xff               (  1 clock ) 
 553               			STS    KerBase+OFB_LPR   , R16                    ;lowest priority        (  2 clocks) 
 554               			LDI    R16               , 0x00                   ;start from 0           (  1 clock ) 
 555               			STS    KerBase+OFB_PTID  , R16                    ;highest prio tid=0     (  2 clocks) 
 556               			MOV    R25               , R24                    ;copy sch mode          (  1 clock ) 
 557               		_KER_SCH_LOOP\@:                                                                           
 558               		    ;store task id to run from KER_DEC_SLP_TIMEOUT                                         
 559               			STS    KerBase+OFB_TID   , R16                    ;store task id          (  2 clocks) 
 560               	        ;sleep time decrement, update ready/blocked status                                     
 561               			MOV    R24               , R25                    ;restore sch mode       (  1 clock ) 
 562               			KER_SLP_TIME_MGNT                                 ;update return vars     ( 49 clocks) 
 563               	        CPI    R24               , TASK_READY             ;compare                (  1 clock ) 
 564               	        BRNE   _KER_SCH_NEXT\@                            ;skip if task not ready (  2 clocks) 
 565               			KER_CURR_TASK_PRIO                                ;get task prio ->R24    (  9 clocks) 
 566               	        ;compare current task priority with lowest priority found so far                       
 567               			LDS    R16               , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
 568               			CP     R24               , R16                    ;compare                (  1 clock ) 
 569               			BRSH   _KER_SCH_NEXT\@                            ;if prio>=lowest prio   (  2 clocks) 
 570               			;found new lowest priority                                                             
 571               			STS    KerBase+OFB_LPR   , R24                    ;save lowest priority   (  2 clocks) 
 572               			LDS    R16               , KerBase+OFB_TID        ;load task id           (  2 clocks) 
 573               			STS    KerBase+OFB_PTID  , R16                    ;save lowest priority   (  2 clocks) 
 574               	                                                                                               
 575               	    _KER_SCH_NEXT\@:                                                                           
 576               		    LDS    R16               , KerBase+OFB_TID        ;load task id           (  2 clocks) 
 577               			INC    R16                                        ;increment by 1         (  1 clock ) 
 578               			LDS    R17               , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 579               			CP     R16               , R17                    ;compare with ntask     (  2 clocks) 
 580               			BRSH   _KER_SCH_EXIT\@                            ;if task_id>=ntask      (  2 clocks) 
 581               			RJMP   _KER_SCH_LOOP\@                            ;jump to entry          (  2 clocks) 
 582               		_KER_SCH_EXIT\@:                                                                           
 583               	        LDS    R16               , KerBase+OFB_PTID       ;load high prio task id (  2 clocks) 
 584               			STS    KerBase+OFB_TID   , R16                    ;for test only          (  2 clocks) 
 585               	.endm                                                                                          
 586               	;;===================================run scheduler end======================================;; 
 587               	
 588               	
 589               	
 590               	
 591               	
 592               	;;=================================ISR execution starting===================================;; 
 593               	.global  __vector_16                                                                           
 594               	    __vector_16:                                          ;total 26.13uS @8MHz    (211 clocks) 
 595:kernel.S      **** 	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 596:kernel.S      ****         KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 597:kernel.S      **** 		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 598:kernel.S      **** 		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 599:kernel.S      **** 		KER_TICK_INCREMENT                                ;increment tick counter ( 27 clocks) 
 600:kernel.S      **** 		LDI    R24               , SCH_MODE_HANDLER       ;set sch mode           (  1 clock ) 
 601:kernel.S      **** 		KER_RUN_SCHEDULER                                 ;run scheduler          ( 14 clocks) 
 602:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 603:kernel.S      **** 		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 604:kernel.S      **** 	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 605:kernel.S      **** 		RETI                                              ;return from interrupt  (  4 clocks) 
 606               	;;====================================ISR execution end=====================================;; 
 607               	
 608               	
 609               	
 610               	
 611               	
 612               	;;================================SysTick reg init starting=================================;; 
 613               	Kernel_SysTick_Reg_Init:                                  ;total 10.5uS @8MHz     ( 84 clocks) 
 614               	        ;arg1 -> prescaler R24, arg2 -> reload val R22
 615:kernel.S      ****         CLI                                               ;disable global int     (  1 clock ) 
 616:kernel.S      **** 		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 617               			
 618:kernel.S      ****         KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 619               	
 620               			;clear reg
 621:kernel.S      **** 		LDI   R16                , 0x00                   ;set 0x00 to R16        (  1 clock )
 622               	        
 623               			;clear tick counter
 624:kernel.S      **** 		STS   KerBase+OFB_TICK0  , R16                    ;clear  KerBase[0]      (  2 clocks) 
 625:kernel.S      **** 		STS   KerBase+OFB_TICK1  , R16                    ;clear  KerBase[1]      (  2 clocks) 
 626:kernel.S      **** 		STS   KerBase+OFB_TICK2  , R16                    ;clear  KerBase[2]      (  2 clocks) 
 627:kernel.S      **** 		STS   KerBase+OFB_TICK3  , R16                    ;clear  KerBase[3]      (  2 clocks) 
 628:kernel.S      **** 		STS   KerBase+OFB_TICK4  , R16                    ;clear  KerBase[4]      (  2 clocks) 
 629               		    
 630               			;clear system registers
 631:kernel.S      **** 		STS   KerBase+OFB_PRS    , R16                    ;clear  KerBase[5]      (  2 clocks) 
 632:kernel.S      **** 		STS   KerBase+OFB_RLD    , R16                    ;clear  KerBase[6]      (  2 clocks) 
 633:kernel.S      **** 		STS   KerBase+OFB_TID    , R16                    ;clear  KerBase[7]      (  2 clocks) 
 634:kernel.S      **** 		STS   KerBase+OFB_NTSK   , R16                    ;clear  KerBase[8]      (  2 clocks) 
 635:kernel.S      ****         STS   KerBase+OFB_PTID   , R16                    ;clear  KerBase[9]      (  2 clocks) 
 636               			
 637               			;clear all timer registers
 638:kernel.S      **** 		STS   SRTCCR0A           , R16                    ;clear TCCR0A           (  2 clocks) 
 639:kernel.S      **** 		STS   SRTCCR0B           , R16                    ;clear TCCR0B           (  2 clocks) 
 640:kernel.S      **** 		STS   SRTIMSK0           , R16                    ;clear TIMSK0           (  2 clocks) 
 641:kernel.S      **** 		STS   SRTIFR0            , R16                    ;clear TIFR0            (  2 clocks) 
 642:kernel.S      **** 		STS   SROCR0A            , R16                    ;clear OCR0A            (  2 clocks) 
 643:kernel.S      **** 		STS   SROCR0B            , R16                    ;clear OCR0B            (  2 clocks) 
 644:kernel.S      **** 		STS   SRTCNT0            , R16                    ;clear TCNT0            (  2 clocks) 
 645               			
 646:kernel.S      **** 		STS   KerBase+OFB_PRS    , R24                    ;KerBase[5] prescaler   (  2 clocks) 
 647:kernel.S      **** 		STS   KerBase+OFB_RLD    , R22                    ;KerBase[6] reload val  (  2 clocks) 
 648               			
 649:kernel.S      ****         KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 650               	
 651:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 652               	;;===================================SysTick reg init end===================================;; 
 653               	
 654               	
 655               	
 656               	
 657               	
 658               	;;===============================kernel task create starting================================;; 
 659               	Kernel_Task_Create:                                       ;total 19.86uS @8MHz    (162 clocks) 
 660               	        ;func_ptr->R25:R24, task_priority->R22 
 661               	
 662:kernel.S      ****         KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 663               			
 664               			;across this function, R16 will be used as task_id 
 665:kernel.S      **** 		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 666:kernel.S      **** 		LDI   R17                , 0x00                   ;clear reg              (  1 clock ) 
 667               			
 668               			;set priority to KerSchPr+task_id
 669:kernel.S      **** 		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 670:kernel.S      **** 		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 671:kernel.S      **** 		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
 672:kernel.S      **** 		ADC   ZH                 , R17                    ;add high byte+carry    (  1 clock ) 
 673:kernel.S      **** 		ST    Z                  , R22                    ;save priority          (  2 clocks) 
 674               			
 675               			;stack pointer for current task (KerStack + KER_STK_SZ*(task_id+1) - 1) ->stack top    
 676:kernel.S      **** 		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 677:kernel.S      **** 		MOV   R17                , R16                    ;load task_id           (  1 clock ) 
 678:kernel.S      **** 		INC   R17                                         ;increment task_id      (  1 clock ) 
 679:kernel.S      **** 		LDI   R18                , KER_STK_SZ             ;load stack size        (  1 clock ) 
 680:kernel.S      **** 		MUL   R17                , R18                    ;multiply to get offset (  2 clocks) 
 681:kernel.S      **** 		MOV   ZL                 , R0                     ;load multiplied low    (  1 clocks) 
 682:kernel.S      **** 		MOV   ZH                 , R1                     ;load multiplied high   (  1 clocks) 
 683:kernel.S      **** 		SBIW  ZL                 , 0x01                   ;dec multiplied val-1   (  2 clocks) 
 684:kernel.S      **** 		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 685:kernel.S      **** 		LDI   R17                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
 686:kernel.S      **** 		LDI   R18                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
 687:kernel.S      **** 		ADD   ZL                 , R17                    ;add low bytes          (  1 clock ) 
 688:kernel.S      **** 		ADC   ZH                 , R18                    ;add high bytes+carry   (  1 clock ) 
 689:kernel.S      **** 		OUT   IOSPL              , ZL                     ;load SPL               (  1 clock ) 
 690:kernel.S      ****         OUT   IOSPH              , ZH                     ;load SPH               (  1 clock ) 
 691               			
 692               			;function argument directly returns word address
 693:kernel.S      **** 	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
 694:kernel.S      **** 		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 695               			
 696               			;push context to stack of this task
 697:kernel.S      **** 		KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 698               			
 699               			;read stack pointer of current task (necessary when restore)
 700:kernel.S      **** 		IN    R17                , IOSPL                  ;read SPL               (  1 clock ) 
 701:kernel.S      ****         IN    R18                , IOSPH                  ;read SPH               (  1 clock ) 
 702               			
 703               			;calculate the address where current task's SP will be stored and store SP
 704:kernel.S      **** 		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 705:kernel.S      **** 		MOV   R19                , R16                    ;copy task_id           (  1 clock ) 
 706:kernel.S      **** 		LSL   R19                                         ;left shift to multiply (  1 clock ) 
 707:kernel.S      **** 		LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 708:kernel.S      **** 		LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 709:kernel.S      **** 		ADD   ZL                 , R19                    ;add offset to array    (  1 clock ) 
 710:kernel.S      **** 		LDI   R16                , 0x00                   ;clear reg              (  1 clock ) 
 711:kernel.S      **** 		ADC   ZH                 , R16                    ;add carry if any       (  1 clock ) 
 712:kernel.S      **** 		ST    Z+                 , R17                    ;SPL at KerPSp+offset   (  2 clocks) 
 713:kernel.S      **** 		ST    Z                  , R18                    ;SPH at KerPSp+offset   (  2 clocks) 
 714               			
 715               			;increment task_id
 716:kernel.S      **** 		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 717:kernel.S      **** 		INC   R16                                         ;increment task_id      (  1 clock ) 
 718:kernel.S      **** 		STS   KerBase+OFB_TID    , R16                    ;store task_id          (  2 clocks) 
 719               	
 720               			;increment ntask
 721:kernel.S      **** 		LDS   R16                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 722:kernel.S      **** 		INC   R16                                         ;increment ntask        (  1 clock ) 
 723:kernel.S      **** 		STS   KerBase+OFB_NTSK   , R16                    ;store ntask            (  2 clocks) 
 724               			
 725:kernel.S      **** 		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 726               			
 727:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 728               	;;==================================kernel task create end==================================;; 
 729               	
 730               	
 731               	
 732               	
 733               	
 734               	;;=================================kernel start tasks starting==============================;; 
 735               	Kernel_Start_Tasks:                                       ;total 12.88uS @8MHz    (103 clocks) 
 736               			;start executing from task0
 737               			;save ZP
 738               			;MOV   R4                 , ZL                     ;save ZPL               (  2 clocks) 
 739               			;MOV   R5                 , ZH                     ;save ZPH               (  2 clocks) 
 740               			
 741               			;clear task_id
 742:kernel.S      **** 		LDI   R16                , 0x00                   ;load task_id           (  2 clocks) 
 743:kernel.S      **** 		STS   KerBase+OFB_TID    , R16                    ;store task_id          (  2 clocks) 
 744               			
 745               			;load ZP with addr+offset
 746:kernel.S      **** 		LDI   ZL                 , lo8(KerPSP+0x00)       ;fetch ZPL KerPSP->TID0 (  1 clock ) 
 747:kernel.S      **** 		LDI   ZH                 , hi8(KerPSP+0x00)       ;fetch ZPH KerPSP->TID0 (  1 clock ) 
 748               			
 749               			;load task_id 0 task's SP
 750:kernel.S      **** 		LD    R16                , Z+                     ;load val from Z, inc Z (  2 clocks) 
 751:kernel.S      **** 		LD    R17                , Z                      ;load val from Z+1      (  2 clocks) 
 752               			
 753               	        ;set task_id=0 task's SP
 754:kernel.S      **** 		OUT   IOSPL              , R16                    ;load SPL               (  1 clock ) 
 755:kernel.S      ****         OUT   IOSPH              , R17                    ;load SPH               (  1 clock ) 
 756               	        
 757               	        ;forcefully restore context, in ISR it will be stored automatically
 758:kernel.S      **** 		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 759               	
 760               			;restore ZP
 761               			;MOV   ZL                 , R4                     ;restore ZPL            (  2 clocks) 
 762               			;MOV   ZH                 , R5                     ;restore ZPL            (  2 clocks) 
 763               			
 764               			;config timer for system tick
 765:kernel.S      **** 		KER_TIMER_INIT                                    ;init timer, int enable ( 12 clocks) 
 766               	        
 767               			;execute return to jump to task0, pushed while task init
 768:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 769               	;;==================================kernel start tasks end==================================;; 
 770               	
 771               	
 772               	
 773               	
 774               	
 775               	;;===================================kernel init starting===================================;; 
 776               	Kernel_Init:                                              ;total 37.00uS @8MHz    (296 clocks) 
 777               			;save necessary registers and MSP
 778:kernel.S      **** 		CLR   R1                                          ;gcc expects            (  1 clock ) 
 779               	
 780               	        ;store stack top (for MSP) addr to KerSSZ+OFM_MSPI0:1
 781:kernel.S      **** 		LDI   R16                , lo8(KerSSZ+OFM_MSPS)   ;load low address       (  1 clock ) 
 782:kernel.S      **** 		LDI   R17                , hi8(KerSSZ+OFM_MSPS)   ;load high address      (  1 clock )
 783:kernel.S      ****         STS   KerSSZ+OFM_MSPI+0  , R16                    ;set mspi to stack top  (  2 clocks) 
 784:kernel.S      **** 		STS   KerSSZ+OFM_MSPI+1  , R17                    ;set mspi to stack top  (  2 clocks) 
 785               	        
 786:kernel.S      **** 		KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 787               	
 788               			;init timer for kernel 
 789:kernel.S      **** 		LDI   R24                , 0x03                   ;set prescaler          (  1 clock ) 
 790:kernel.S      **** 		LDI   R22                , 0x82                   ;set reload val         (  1 clock ) 
 791:kernel.S      **** 		CALL  Kernel_SysTick_Reg_Init                     ;init timer             ( 84 clocks) 
 792               			
 793               			;create idle task at task_id 0, priority 0xFF (lowest)
 794:kernel.S      **** 		LDI   R24                , lo8(Kernel_Task_Idle)  ;load func addr low     (  1 clock ) 
 795:kernel.S      **** 		LDI   R25                , hi8(Kernel_Task_Idle)  ;load func addr high    (  1 clock ) 
 796:kernel.S      **** 		LSR   R25                                         ;right shift to divide  (  1 clock ) 
 797:kernel.S      **** 		ROR   R24                                         ;rotate right th carry  (  1 clock ) 
 798:kernel.S      **** 		LDI   R22                , 0xFF                   ;set max val
 799:kernel.S      **** 		CALL  Kernel_Task_Create                          ;init idle task         (159 clocks) 
 800               			
 801:kernel.S      **** 		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 802               	
 803               			;execute return to jump to task0, pushed while task init
 804:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 805               	;;======================================kernel init end=====================================;; 
 806               	
 807               	
 808               	
 809               	
 810               	
 811               	;;=================================kernel idle task starting================================;; 
 812               	Kernel_Task_Idle:                                         ;total 0.5uS @8MHz      (  4 clocks) 
 813:kernel.S      ****         LDI   R25                , 0x00                   ;set UBRRH              (  1 clock ) 
 814:kernel.S      ****         LDI   R24                , 0x00                   ;set UBRRL              (  1 clock ) 
 815:kernel.S      ****         CALL  Debug_Init                                  ;debug init
 816               	    _IDLE_LOOP:                                           ;forever loop
 817:kernel.S      **** 	    LDI   R24                , 0x23
 818:kernel.S      **** 		CALL  Debug_Tx_Byte      
 819:kernel.S      **** 		RJMP  _IDLE_LOOP                                  ;return from subroutine (  4 clocks) 
 820               	;;==================================kernel idle task end====================================;; 
 821               	
 822               	
 823               	
 824               	
 825               	;;================================kernel task sleep starting================================;; 
 826               	Kernel_Task_Sleep:
 827               	        ;save current context
 828               	        ;KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 829               			;KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks)
 830               			;CLI
 831               			;create next task wakeup time (args R25:R24)
 832:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 833:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 834:kernel.S      **** 		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks)
 835:kernel.S      **** 		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
 836:kernel.S      **** 		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 837               			
 838               			;update task scheduler status as blocked
 839:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 840:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 841:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks)
 842:kernel.S      ****         LDI   R16                , TASK_BLOCK             ;block task until cnt=0 (  1 clock ) 
 843:kernel.S      **** 		STD   Z+0                , R16                    ;save block flag        (  2 clocks) 
 844               	
 845               			;SEI
 846               			;run scheduler, load next task sp, restore context
 847               			;LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 848               			;KER_RUN_SCHEDULER                                 ;run scheduler          ( 14 clocks)
 849               			;KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 850               			;KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 851               			
 852:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 853               	;;=================================kernel task sleep end====================================;; 
 854               	
 855               	
 856               	
 857               	
 858               	
 859               	;;===========================kernel task sleep time get starting============================;; 
 860               	Kernel_Task_Sleep_Time_Get:
 861               			;get remaining sleep time (ms), arg R24, return R25:R24
 862:kernel.S      **** 		MOV   R16                , R24                    ;copy                   (  1 clock ) 
 863:kernel.S      **** 		LSL   R16                                         ;x2                     (  1 clock ) 
 864:kernel.S      **** 		LDI   R30                , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 865:kernel.S      **** 		LDI   R31                , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 866:kernel.S      **** 		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 867:kernel.S      **** 		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 868:kernel.S      **** 		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 869:kernel.S      **** 		LD    R24                , Z+                     ;load sleep time        (  2 clocks) 
 870:kernel.S      **** 		LD    R25                , Z                      ;load sleep time        (  2 clocks) 
 871:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 872               	;;==============================kernel task sleep time get end==============================;; 
 873               	
 874               	
 875               	
 876               	
 877               	
 878               	;;==============================kernel task status get starting=============================;; 
 879               	Kernel_Task_Status_Get:
 880               			;get task status ->ready/blocked, arg R24, return R24
 881:kernel.S      **** 		MOV   R16                , R24                    ;copy                   (  1 clock ) 
 882:kernel.S      **** 		LDI   R30                , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 883:kernel.S      **** 		LDI   R31                , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 884:kernel.S      **** 		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 885:kernel.S      **** 		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 886:kernel.S      **** 		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 887:kernel.S      **** 		LD    R24                , Z                      ;load task status       (  2 clocks) 
 888:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 889               	;;================================kernel task status get end================================;; 
 890               	
 891               	
 892               	
 893               	
 894               	
 895               	;;================================kernel ntask get starting=================================;; 
 896               	Kernel_NTask_Get:                                         ;total 0.75uS @8MHz     (  6 clocks) 
 897:kernel.S      **** 		LDS   R24                 , KerBase+OFB_NTSK      ;load ntask             (  2 clock ) 
 898:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 899               	;;===================================kernel ntask get end===================================;; 
 900               	
 901               	
 902               	
 903               	
 904               	
 905               	;;=============================kernel task priority get starting============================;; 
 906               	Kernel_Task_Prio_Get:                                     ;total 1.38uS @8MHz     ( 11 clocks) 
 907               			;get priority of the task id, arg (task_id->R24), return R24
 908:kernel.S      **** 		MOV   R16                , R24                    ;copy task_id           (  1 clock ) 
 909:kernel.S      **** 		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 910:kernel.S      **** 		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 911:kernel.S      **** 		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
 912:kernel.S      **** 		ADC   ZH                 , R1                     ;add high byte+carry    (  1 clock ) 
 913:kernel.S      **** 		LD    R24                , Z                      ;load priority          (  2 clocks) 
 914:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 915               	;;================================kernel task priority get end==============================;; 
 916               	
 917               	
 918               	
 919               	
 920               	
 921               	;;============================kernel lowest priority get starting===========================;; 
 922               	Kernel_Lowest_Prio_Get:                                   ;total 0.75uS @8MHz     (  6 clocks) 
 923               			;get lowest priority, return R24
 924:kernel.S      **** 		LDS   R24                , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
 925:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 926               	;;===============================kernel lowest priority get end=============================;; 
 927               	
 928               	
 929               	
 930               	
 931               	
 932               	;;===========================kernel high priority task id starting==========================;; 
 933               	Kernel_High_Prio_Task_ID_Get:
 934               			;internal idle task id = 0, app task start from task id 1, return R24
 935:kernel.S      **** 		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 936:kernel.S      **** 		DEC   R24                                         ;decrement by 1         (  1 clock ) 
 937:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 938               	;;==============================kernel high priority task id end============================;; 
 939               	
 940               	
 941               	
 942               	
 943               	
 944               	;;=========================kernel abs high priority task id starting========================;; 
 945               	Kernel_Abs_High_Prio_Task_ID_Get:
 946               			;get highest priority task id, return R24
 947:kernel.S      **** 		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
 948:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 949               	;;============================kernel abs high priority task id end==========================;; 
DEFINED SYMBOLS
            kernel.S:12     *ABS*:000003e8 KER_TR
            kernel.S:13     *ABS*:00000003 KER_PRS
            kernel.S:14     *ABS*:00000082 KER_RLD
            kernel.S:15     *ABS*:00000080 KER_STK_SZ
            kernel.S:16     *ABS*:0000000a KER_MX_NTSK
            kernel.S:24     *ABS*:00000000 OFB_TICK0
            kernel.S:25     *ABS*:00000001 OFB_TICK1
            kernel.S:26     *ABS*:00000002 OFB_TICK2
            kernel.S:27     *ABS*:00000003 OFB_TICK3
            kernel.S:28     *ABS*:00000004 OFB_TICK4
            kernel.S:29     *ABS*:00000005 OFB_PRS
            kernel.S:30     *ABS*:00000006 OFB_RLD
            kernel.S:31     *ABS*:00000007 OFB_TID
            kernel.S:32     *ABS*:00000008 OFB_NTSK
            kernel.S:33     *ABS*:00000009 OFB_LPR
            kernel.S:34     *ABS*:0000000a OFB_PTID
            kernel.S:35     *ABS*:0000000b OFB_SCH_MODE
            kernel.S:36     *ABS*:00000000 OFM_MSPI
            kernel.S:37     *ABS*:00000002 OFM_MSPS
            kernel.S:45     *ABS*:00000000 TASK_BLOCK
            kernel.S:46     *ABS*:00000001 TASK_READY
            kernel.S:47     *ABS*:00000000 SCH_MODE_HANDLER
            kernel.S:48     *ABS*:00000001 SCH_MODE_THREAD
            kernel.S:56     *ABS*:0000005f SRSREG
            kernel.S:57     *ABS*:0000005e SRSPH
            kernel.S:58     *ABS*:0000005d SRSPL
            kernel.S:60     *ABS*:0000006e SRTIMSK0
            kernel.S:61     *ABS*:00000048 SROCR0B
            kernel.S:62     *ABS*:00000047 SROCR0A
            kernel.S:63     *ABS*:00000046 SRTCNT0
            kernel.S:64     *ABS*:00000045 SRTCCR0B
            kernel.S:65     *ABS*:00000044 SRTCCR0A
            kernel.S:66     *ABS*:00000035 SRTIFR0
            kernel.S:68     *ABS*:00000028 IOOCR0B
            kernel.S:69     *ABS*:00000027 IOOCR0A
            kernel.S:70     *ABS*:00000026 IOTCNT0
            kernel.S:71     *ABS*:00000025 IOTCCR0B
            kernel.S:72     *ABS*:00000024 IOTCCR0A
            kernel.S:73     *ABS*:00000015 IOTIFR0
            kernel.S:75     *ABS*:0000003f IOSREG
            kernel.S:76     *ABS*:0000003e IOSPH
            kernel.S:77     *ABS*:0000003d IOSPL
            kernel.S:88     .bss:00000000 KerBase
            kernel.S:91     .bss:0000000c KerPSP
            kernel.S:94     .bss:00000020 KerSSZ
            kernel.S:97     .bss:0000002e KerSchSts
            kernel.S:100    .bss:00000038 KerSchPr
            kernel.S:103    .bss:00000042 KerSchSlp
            kernel.S:106    .bss:00000056 KerStack
            kernel.S:594    .text:00000000 __vector_16
            kernel.S:613    .text:00000198 Kernel_SysTick_Reg_Init
            kernel.S:776    .text:00000378 Kernel_Init
            kernel.S:659    .text:00000226 Kernel_Task_Create
            kernel.S:735    .text:00000308 Kernel_Start_Tasks
            kernel.S:812    .text:000003d6 Kernel_Task_Idle
            kernel.S:826    .text:000003e6 Kernel_Task_Sleep
            kernel.S:860    .text:0000040e Kernel_Task_Sleep_Time_Get
            kernel.S:879    .text:00000422 Kernel_Task_Status_Get
            kernel.S:896    .text:00000432 Kernel_NTask_Get
            kernel.S:906    .text:00000438 Kernel_Task_Prio_Get
            kernel.S:922    .text:00000446 Kernel_Lowest_Prio_Get
            kernel.S:933    .text:0000044c Kernel_High_Prio_Task_ID_Get
            kernel.S:945    .text:00000454 Kernel_Abs_High_Prio_Task_ID_Get
            kernel.S:601    .text:000000ac _KER_SCH_LOOP6
            kernel.S:601    .text:000000e2 _VAL_NULL7
            kernel.S:601    .text:000000f6 _VAL_NOT_NULL7
            kernel.S:601    .text:000000f8 _EXIT_SLP_TIME7
            kernel.S:601    .text:00000120 _KER_SCH_NEXT6
            kernel.S:601    .text:00000130 _KER_SCH_EXIT6
            kernel.S:816    .text:000003de _IDLE_LOOP

UNDEFINED SYMBOLS
Kernel_SysTick_Val_Get
Kernel_SysTick_Val_Safely_Get
Kernel_Interrupt_Sts_Get
Debug_Init
Debug_Tx_Byte
