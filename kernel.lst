   1               	# 1 "kernel.S"
   1               	
   0               	
   0               	
   2               	/*
   3               	 * File          : kernel.S
   4               	 * Author        : MD. Faridul Islam (faridmdislam@gmail.com)
   5               	 * Description   : AVR kernel for bare-metal RTOS
   6               	 * Created       : Jul 27, 2025, 9:30 PM
   7               	 * Last Modified : Sep 02, 2025, 8:42 PM
   8               	 */
   9               	
  10               	
  11               	
  12               	#include <avr/io.h>
   1               	/* Copyright (c) 2002,2003,2005,2006,2007 Marek Michalkiewicz, Joerg Wunsch
   2               	   Copyright (c) 2007 Eric B. Weddington
   3               	   All rights reserved.
   4               	
   5               	   Redistribution and use in source and binary forms, with or without
   6               	   modification, are permitted provided that the following conditions are met:
   7               	
   8               	   * Redistributions of source code must retain the above copyright
   9               	     notice, this list of conditions and the following disclaimer.
  10               	
  11               	   * Redistributions in binary form must reproduce the above copyright
  12               	     notice, this list of conditions and the following disclaimer in
  13               	     the documentation and/or other materials provided with the
  14               	     distribution.
  15               	
  16               	   * Neither the name of the copyright holders nor the names of
  17               	     contributors may be used to endorse or promote products derived
  18               	     from this software without specific prior written permission.
  19               	
  20               	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21               	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22               	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23               	  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24               	  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25               	  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26               	  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27               	  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28               	  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29               	  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30               	  POSSIBILITY OF SUCH DAMAGE. */
  31               	
  32               	/* $Id: io.h,v 1.52.2.28 2009/12/20 17:02:53 arcanum Exp $ */
  33               	
  34               	/** \file */
  35               	/** \defgroup avr_io <avr/io.h>: AVR device-specific IO definitions
  36               	    \code #include <avr/io.h> \endcode
  37               	
  38               	    This header file includes the apropriate IO definitions for the
  39               	    device that has been specified by the <tt>-mmcu=</tt> compiler
  40               	    command-line switch.  This is done by diverting to the appropriate
  41               	    file <tt>&lt;avr/io</tt><em>XXXX</em><tt>.h&gt;</tt> which should
  42               	    never be included directly.  Some register names common to all
  43               	    AVR devices are defined directly within <tt>&lt;avr/common.h&gt;</tt>,
  44               	    which is included in <tt>&lt;avr/io.h&gt;</tt>,
  45               	    but most of the details come from the respective include file.
  46               	
  47               	    Note that this file always includes the following files:
  48               	    \code 
  49               	    #include <avr/sfr_defs.h>
  50               	    #include <avr/portpins.h>
  51               	    #include <avr/common.h>
  52               	    #include <avr/version.h>
  53               	    \endcode
  54               	    See \ref avr_sfr for more details about that header file.
  55               	
  56               	    Included are definitions of the IO register set and their
  57               	    respective bit values as specified in the Atmel documentation.
  58               	    Note that inconsistencies in naming conventions,
  59               	    so even identical functions sometimes get different names on
  60               	    different devices.
  61               	
  62               	    Also included are the specific names useable for interrupt
  63               	    function definitions as documented
  64               	    \ref avr_signames "here".
  65               	
  66               	    Finally, the following macros are defined:
  67               	
  68               	    - \b RAMEND
  69               	    <br>
  70               	    The last on-chip RAM address.
  71               	    <br>
  72               	    - \b XRAMEND
  73               	    <br>
  74               	    The last possible RAM location that is addressable. This is equal to 
  75               	    RAMEND for devices that do not allow for external RAM. For devices 
  76               	    that allow external RAM, this will be larger than RAMEND.
  77               	    <br>
  78               	    - \b E2END
  79               	    <br>
  80               	    The last EEPROM address.
  81               	    <br>
  82               	    - \b FLASHEND
  83               	    <br>
  84               	    The last byte address in the Flash program space.
  85               	    <br>
  86               	    - \b SPM_PAGESIZE
  87               	    <br>
  88               	    For devices with bootloader support, the flash pagesize
  89               	    (in bytes) to be used for the \c SPM instruction. 
  90               	    - \b E2PAGESIZE
  91               	    <br>
  92               	    The size of the EEPROM page.
  93               	    
  94               	*/
  95               	
  96               	#ifndef _AVR_IO_H_
  97               	#define _AVR_IO_H_
  98               	
  99               	#include <avr/sfr_defs.h>
   1               	/* Copyright (c) 2002, Marek Michalkiewicz <marekm@amelek.gda.pl>
 100               	
 101               	#if defined (__AVR_AT94K__)
 102               	#  include <avr/ioat94k.h>
 103               	#elif defined (__AVR_AT43USB320__)
 104               	#  include <avr/io43u32x.h>
 105               	#elif defined (__AVR_AT43USB355__)
 106               	#  include <avr/io43u35x.h>
 107               	#elif defined (__AVR_AT76C711__)
 108               	#  include <avr/io76c711.h>
 109               	#elif defined (__AVR_AT86RF401__)
 110               	#  include <avr/io86r401.h>
 111               	#elif defined (__AVR_AT90PWM1__)
 112               	#  include <avr/io90pwm1.h>
 113               	#elif defined (__AVR_AT90PWM2__)
 114               	#  include <avr/io90pwmx.h>
 115               	#elif defined (__AVR_AT90PWM2B__)
 116               	#  include <avr/io90pwm2b.h>
 117               	#elif defined (__AVR_AT90PWM3__)
 118               	#  include <avr/io90pwmx.h>
 119               	#elif defined (__AVR_AT90PWM3B__)
 120               	#  include <avr/io90pwm3b.h>
 121               	#elif defined (__AVR_AT90PWM216__)
 122               	#  include <avr/io90pwm216.h>
 123               	#elif defined (__AVR_AT90PWM316__)
 124               	#  include <avr/io90pwm316.h>
 125               	#elif defined (__AVR_AT90PWM81__)
 126               	#  include <avr/io90pwm81.h>
 127               	#elif defined (__AVR_ATmega8U2__)
 128               	#  include <avr/iom8u2.h>
 129               	#elif defined (__AVR_ATmega16M1__)
 130               	#  include <avr/iom16m1.h>
 131               	#elif defined (__AVR_ATmega16U2__)
 132               	#  include <avr/iom16u2.h>
 133               	#elif defined (__AVR_ATmega16U4__)
 134               	#  include <avr/iom16u4.h>
 135               	#elif defined (__AVR_ATmega32C1__)
 136               	#  include <avr/iom32c1.h>
 137               	#elif defined (__AVR_ATmega32M1__)
 138               	#  include <avr/iom32m1.h>
 139               	#elif defined (__AVR_ATmega32U2__)
 140               	#  include <avr/iom32u2.h>
 141               	#elif defined (__AVR_ATmega32U4__)
 142               	#  include <avr/iom32u4.h>
 143               	#elif defined (__AVR_ATmega32U6__)
 144               	#  include <avr/iom32u6.h>
 145               	#elif defined (__AVR_ATmega64C1__)
 146               	#  include <avr/iom64c1.h>
 147               	#elif defined (__AVR_ATmega64M1__)
 148               	#  include <avr/iom64m1.h>
 149               	#elif defined (__AVR_ATmega128__)
 150               	#  include <avr/iom128.h>
 151               	#elif defined (__AVR_ATmega1280__)
 152               	#  include <avr/iom1280.h>
 153               	#elif defined (__AVR_ATmega1281__)
 154               	#  include <avr/iom1281.h>
 155               	#elif defined (__AVR_ATmega1284P__)
 156               	#  include <avr/iom1284p.h>
 157               	#elif defined (__AVR_ATmega128RFA1__)
 158               	#  include <avr/iom128rfa1.h>
 159               	#elif defined (__AVR_ATmega2560__)
 160               	#  include <avr/iom2560.h>
 161               	#elif defined (__AVR_ATmega2561__)
 162               	#  include <avr/iom2561.h>
 163               	#elif defined (__AVR_AT90CAN32__)
 164               	#  include <avr/iocan32.h>
 165               	#elif defined (__AVR_AT90CAN64__)
 166               	#  include <avr/iocan64.h>
 167               	#elif defined (__AVR_AT90CAN128__)
 168               	#  include <avr/iocan128.h>
 169               	#elif defined (__AVR_AT90USB82__)
 170               	#  include <avr/iousb82.h>
 171               	#elif defined (__AVR_AT90USB162__)
 172               	#  include <avr/iousb162.h>
 173               	#elif defined (__AVR_AT90USB646__)
 174               	#  include <avr/iousb646.h>
 175               	#elif defined (__AVR_AT90USB647__)
 176               	#  include <avr/iousb647.h>
 177               	#elif defined (__AVR_AT90USB1286__)
 178               	#  include <avr/iousb1286.h>
 179               	#elif defined (__AVR_AT90USB1287__)
 180               	#  include <avr/iousb1287.h>
 181               	#elif defined (__AVR_ATmega64__)
 182               	#  include <avr/iom64.h>
 183               	#elif defined (__AVR_ATmega640__)
 184               	#  include <avr/iom640.h>
 185               	#elif defined (__AVR_ATmega644__) || defined (__AVR_ATmega644A__)
 186               	#  include <avr/iom644.h>
 187               	#elif defined (__AVR_ATmega644P__)
 188               	#  include <avr/iom644p.h>
 189               	#elif defined (__AVR_ATmega644PA__)
 190               	#  include <avr/iom644pa.h>
 191               	#elif defined (__AVR_ATmega645__) || defined (__AVR_ATmega645A__) || defined (__AVR_ATmega645P__)
 192               	#  include <avr/iom645.h>
 193               	#elif defined (__AVR_ATmega6450__) || defined (__AVR_ATmega6450A__) || defined (__AVR_ATmega6450P__
 194               	#  include <avr/iom6450.h>
 195               	#elif defined (__AVR_ATmega649__) || defined (__AVR_ATmega649A__)
 196               	#  include <avr/iom649.h>
 197               	#elif defined (__AVR_ATmega6490__) || defined (__AVR_ATmega6490A__) || defined (__AVR_ATmega6490P__
 198               	#  include <avr/iom6490.h>
 199               	#elif defined (__AVR_ATmega649P__)
 200               	#  include <avr/iom649p.h>
 201               	#elif defined (__AVR_ATmega64HVE__)
 202               	#  include <avr/iom64hve.h>
 203               	#elif defined (__AVR_ATmega103__)
 204               	#  include <avr/iom103.h>
 205               	#elif defined (__AVR_ATmega32__)
 206               	#  include <avr/iom32.h>
 207               	#elif defined (__AVR_ATmega323__)
 208               	#  include <avr/iom323.h>
 209               	#elif defined (__AVR_ATmega324P__) || defined (__AVR_ATmega324A__)
 210               	#  include <avr/iom324.h>
 211               	#elif defined (__AVR_ATmega324PA__)
 212               	#  include <avr/iom324pa.h>
 213               	#elif defined (__AVR_ATmega325__)
 214               	#  include <avr/iom325.h>
 215               	#elif defined (__AVR_ATmega325P__)
 216               	#  include <avr/iom325.h>
 217               	#elif defined (__AVR_ATmega3250__)
 218               	#  include <avr/iom3250.h>
 219               	#elif defined (__AVR_ATmega3250P__)
 220               	#  include <avr/iom3250.h>
 221               	#elif defined (__AVR_ATmega328P__) || defined (__AVR_ATmega328__)
 222               	#  include <avr/iom328p.h>
   1               	/* Copyright (c) 2007 Atmel Corporation
 223               	#elif defined (__AVR_ATmega329__)
 224               	#  include <avr/iom329.h>
 225               	#elif defined (__AVR_ATmega329P__) || defined (__AVR_ATmega329PA__)
 226               	#  include <avr/iom329.h>
 227               	#elif defined (__AVR_ATmega3290__)
 228               	#  include <avr/iom3290.h>
 229               	#elif defined (__AVR_ATmega3290P__)
 230               	#  include <avr/iom3290.h>
 231               	#elif defined (__AVR_ATmega32HVB__)
 232               	#  include <avr/iom32hvb.h>
 233               	#elif defined (__AVR_ATmega406__)
 234               	#  include <avr/iom406.h>
 235               	#elif defined (__AVR_ATmega16__)
 236               	#  include <avr/iom16.h>
 237               	#elif defined (__AVR_ATmega16A__)
 238               	#  include <avr/iom16a.h>
 239               	#elif defined (__AVR_ATmega161__)
 240               	#  include <avr/iom161.h>
 241               	#elif defined (__AVR_ATmega162__)
 242               	#  include <avr/iom162.h>
 243               	#elif defined (__AVR_ATmega163__)
 244               	#  include <avr/iom163.h>
 245               	#elif defined (__AVR_ATmega164P__) || defined (__AVR_ATmega164A__)
 246               	#  include <avr/iom164.h>
 247               	#elif defined (__AVR_ATmega165__) || defined (__AVR_ATmega165A__)
 248               	#  include <avr/iom165.h>
 249               	#elif defined (__AVR_ATmega165P__)
 250               	#  include <avr/iom165p.h>
 251               	#elif defined (__AVR_ATmega168__) || defined (__AVR_ATmega168A__)
 252               	#  include <avr/iom168.h>
 253               	#elif defined (__AVR_ATmega168P__)
 254               	#  include <avr/iom168p.h>
 255               	#elif defined (__AVR_ATmega169__) || defined (__AVR_ATmega169A__)
 256               	#  include <avr/iom169.h>
 257               	#elif defined (__AVR_ATmega169P__)
 258               	#  include <avr/iom169p.h>
 259               	#elif defined (__AVR_ATmega169PA__)
 260               	#  include <avr/iom169pa.h>
 261               	#elif defined (__AVR_ATmega8HVA__)
 262               	#  include <avr/iom8hva.h>
 263               	#elif defined (__AVR_ATmega16HVA__)
 264               	#  include <avr/iom16hva.h>
 265               	#elif defined (__AVR_ATmega16HVA2__)
 266               	#  include <avr/iom16hva2.h>
 267               	#elif defined (__AVR_ATmega16HVB__)
 268               	#  include <avr/iom16hvb.h>
 269               	#elif defined (__AVR_ATmega8__)
 270               	#  include <avr/iom8.h>
 271               	#elif defined (__AVR_ATmega48__) || defined (__AVR_ATmega48A__)
 272               	#  include <avr/iom48.h>
 273               	#elif defined (__AVR_ATmega48P__)
 274               	#  include <avr/iom48p.h>
 275               	#elif defined (__AVR_ATmega88__) || defined (__AVR_ATmega88A__)
 276               	#  include <avr/iom88.h>
 277               	#elif defined (__AVR_ATmega88P__)
 278               	#  include <avr/iom88p.h>
 279               	#elif defined (__AVR_ATmega88PA__)
 280               	#  include <avr/iom88pa.h>
 281               	#elif defined (__AVR_ATmega8515__)
 282               	#  include <avr/iom8515.h>
 283               	#elif defined (__AVR_ATmega8535__)
 284               	#  include <avr/iom8535.h>
 285               	#elif defined (__AVR_AT90S8535__)
 286               	#  include <avr/io8535.h>
 287               	#elif defined (__AVR_AT90C8534__)
 288               	#  include <avr/io8534.h>
 289               	#elif defined (__AVR_AT90S8515__)
 290               	#  include <avr/io8515.h>
 291               	#elif defined (__AVR_AT90S4434__)
 292               	#  include <avr/io4434.h>
 293               	#elif defined (__AVR_AT90S4433__)
 294               	#  include <avr/io4433.h>
 295               	#elif defined (__AVR_AT90S4414__)
 296               	#  include <avr/io4414.h>
 297               	#elif defined (__AVR_ATtiny22__)
 298               	#  include <avr/iotn22.h>
 299               	#elif defined (__AVR_ATtiny26__)
 300               	#  include <avr/iotn26.h>
 301               	#elif defined (__AVR_AT90S2343__)
 302               	#  include <avr/io2343.h>
 303               	#elif defined (__AVR_AT90S2333__)
 304               	#  include <avr/io2333.h>
 305               	#elif defined (__AVR_AT90S2323__)
 306               	#  include <avr/io2323.h>
 307               	#elif defined (__AVR_AT90S2313__)
 308               	#  include <avr/io2313.h>
 309               	#elif defined (__AVR_ATtiny2313__)
 310               	#  include <avr/iotn2313.h>
 311               	#elif defined (__AVR_ATtiny2313A__)
 312               	#  include <avr/iotn2313a.h>
 313               	#elif defined (__AVR_ATtiny13__)
 314               	#  include <avr/iotn13.h>
 315               	#elif defined (__AVR_ATtiny13A__)
 316               	#  include <avr/iotn13a.h>
 317               	#elif defined (__AVR_ATtiny25__)
 318               	#  include <avr/iotn25.h>
 319               	#elif defined (__AVR_ATtiny4313__)
 320               	#  include <avr/iotn4313.h>
 321               	#elif defined (__AVR_ATtiny45__)
 322               	#  include <avr/iotn45.h>
 323               	#elif defined (__AVR_ATtiny85__)
 324               	#  include <avr/iotn85.h>
 325               	#elif defined (__AVR_ATtiny24__)
 326               	#  include <avr/iotn24.h>
 327               	#elif defined (__AVR_ATtiny24A__)
 328               	#  include <avr/iotn24a.h>
 329               	#elif defined (__AVR_ATtiny44__)
 330               	#  include <avr/iotn44.h>
 331               	#elif defined (__AVR_ATtiny44A__)
 332               	#  include <avr/iotn44a.h>
 333               	#elif defined (__AVR_ATtiny84__)
 334               	#  include <avr/iotn84.h>
 335               	#elif defined (__AVR_ATtiny261__)
 336               	#  include <avr/iotn261.h>
 337               	#elif defined (__AVR_ATtiny261A__)
 338               	#  include <avr/iotn261a.h>
 339               	#elif defined (__AVR_ATtiny461__)
 340               	#  include <avr/iotn461.h>
 341               	#elif defined (__AVR_ATtiny461A__)
 342               	#  include <avr/iotn461a.h>
 343               	#elif defined (__AVR_ATtiny861__)
 344               	#  include <avr/iotn861.h>
 345               	#elif defined (__AVR_ATtiny861A__)
 346               	#  include <avr/iotn861a.h>
 347               	#elif defined (__AVR_ATtiny43U__)
 348               	#  include <avr/iotn43u.h>
 349               	#elif defined (__AVR_ATtiny48__)
 350               	#  include <avr/iotn48.h>
 351               	#elif defined (__AVR_ATtiny88__)
 352               	#  include <avr/iotn88.h>
 353               	#elif defined (__AVR_ATtiny87__)
 354               	#  include <avr/iotn87.h>
 355               	#elif defined (__AVR_ATtiny167__)
 356               	#  include <avr/iotn167.h>
 357               	#elif defined (__AVR_AT90SCR100__)
 358               	#  include <avr/io90scr100.h>
 359               	#elif defined (__AVR_ATxmega16A4__)
 360               	#  include <avr/iox16a4.h>
 361               	#elif defined (__AVR_ATxmega16D4__)
 362               	#  include <avr/iox16d4.h>
 363               	#elif defined (__AVR_ATxmega32A4__)
 364               	#  include <avr/iox32a4.h>
 365               	#elif defined (__AVR_ATxmega32D4__)
 366               	#  include <avr/iox32d4.h>
 367               	#elif defined (__AVR_ATxmega64A1__)
 368               	#  include <avr/iox64a1.h>
 369               	#elif defined (__AVR_ATxmega64A3__)
 370               	#  include <avr/iox64a3.h>
 371               	#elif defined (__AVR_ATxmega64D3__)
 372               	#  include <avr/iox64d3.h>
 373               	#elif defined (__AVR_ATxmega128A1__)
 374               	#  include <avr/iox128a1.h>
 375               	#elif defined (__AVR_ATxmega128A3__)
 376               	#  include <avr/iox128a3.h>
 377               	#elif defined (__AVR_ATxmega128D3__)
 378               	#  include <avr/iox128d3.h>
 379               	#elif defined (__AVR_ATxmega192A3__)
 380               	#  include <avr/iox192a3.h>
 381               	#elif defined (__AVR_ATxmega192D3__)
 382               	#  include <avr/iox192d3.h>
 383               	#elif defined (__AVR_ATxmega256A3__)
 384               	#  include <avr/iox256a3.h>
 385               	#elif defined (__AVR_ATxmega256A3B__)
 386               	#  include <avr/iox256a3b.h>
 387               	#elif defined (__AVR_ATxmega256D3__)
 388               	#  include <avr/iox256d3.h>
 389               	#elif defined (__AVR_ATA6289__)
 390               	#  include <avr/ioa6289.h>
 391               	/* avr1: the following only supported for assembler programs */
 392               	#elif defined (__AVR_ATtiny28__)
 393               	#  include <avr/iotn28.h>
 394               	#elif defined (__AVR_AT90S1200__)
 395               	#  include <avr/io1200.h>
 396               	#elif defined (__AVR_ATtiny15__)
 397               	#  include <avr/iotn15.h>
 398               	#elif defined (__AVR_ATtiny12__)
 399               	#  include <avr/iotn12.h>
 400               	#elif defined (__AVR_ATtiny11__)
 401               	#  include <avr/iotn11.h>
 402               	#else
 403               	#  if !defined(__COMPILING_AVR_LIBC__)
 404               	#    warning "device type not defined"
 405               	#  endif
 406               	#endif
 407               	
 408               	#include <avr/portpins.h>
   1               	/* Copyright (c) 2003  Theodore A. Roth
 409               	
 410               	#include <avr/common.h>
   1               	/* Copyright (c) 2007 Eric B. Weddington
 411               	
 412               	#include <avr/version.h>
   1               	/* Copyright (c) 2005, Joerg Wunsch                               -*- c -*-
 413               	
 414               	/* Include fuse.h after individual IO header files. */
 415               	#include <avr/fuse.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 416               	
 417               	/* Include lock.h after individual IO header files. */
 418               	#include <avr/lock.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 419               	
  13               	#include <avr/interrupt.h>
   1               	/* Copyright (c) 2002,2005,2007 Marek Michalkiewicz
  14               	#include "kernel.h"
   1               	
  15               	
  16               	
  17               	
  18               	;;============================define user address or macro starting=========================;; 
  19               	.equ     KER_TR ,         1000                            ;TickRate in Hz, not calculated      
  20               	.equ     KER_PRS,         0x03                            ;For prescaler 64, manually select   
  21               	.equ     KER_RLD,         0x82                            ;KER_RLD=0xFF-(F_CPU/KER_PRS/KER_TR) 
  22               	.equ     KER_STK_SZ,      128                             ;stack size in bytes for each task   
  23               	.equ     KER_MX_NTSK,     10                              ;max number of tasks                 
  24               	;;==============================define user address or macro end============================;; 
  25               	
  26               	
  27               	
  28               	
  29               	
  30               	;;===============================define data offsets starting===============================;; 
  31               	.equ     OFB_TICK0,       0x00                            ;tick count byte0 offset from KerBase
  32               	.equ     OFB_TICK1,       0x01                            ;tick count byte1 offset from KerBase
  33               	.equ     OFB_TICK2,       0x02                            ;tick count byte2 offset from KerBase
  34               	.equ     OFB_TICK3,       0x03                            ;tick count byte3 offset from KerBase
  35               	.equ     OFB_TICK4,       0x04                            ;tick count byte4 offset from KerBase
  36               	.equ     OFB_PRS  ,       0x05                            ;prescaler offset from KerBase       
  37               	.equ     OFB_RLD  ,       0x06                            ;counter reload offset from KerBase  
  38               	.equ     OFB_TID  ,       0x07                            ;task id offset from KerBase         
  39               	.equ     OFB_NTSK ,       0x08                            ;ntask offset from KerBase           
  40               	.equ     OFB_LPR  ,       0x09                            ;lowest priority offset from KerBase 
  41               	.equ     OFB_PTID ,       0x0A                            ;prio task_id offset from KerBase    
  42               	.equ     OFB_UTC  ,       0x0B                            ;usage tick cnt offset from KerBase  
  43               	.equ     OFB_UATC ,       0x0C                            ;active tick cnt offset from KerBase 
  44               	.equ     OFB_USAGE,       0x0D                            ;cpu usage offset from KerBase       
  45               	.equ     OFM_MSPI ,       0x00                            ;msp index field offset from MSPZP   
  46               	.equ     OFM_MSPS ,       0x02                            ;msp starting offset from MSPZP      
  47               	;;==================================define data offsets end=================================;; 
  48               	
  49               	
  50               	
  51               	
  52               	
  53               	;;===============================define system macro starting===============================;; 
  54               	.equ     TASK_BLOCKED,    0x00                            ;KerSchSts val=0                     
  55               	.equ     TASK_READY,      0x01                            ;KerSchSts val=1                     
  56               	.equ     TASK_EXECUTING,  0x02                            ;KerSchSts val=2                     
  57               	.equ     TASK_SUSPENDED,  0x03                            ;KerSchSts val=3                     
  58               	.equ     TASK_CONS_LAT,   0x04                            ;KerSchSts val=3, constant latency   
  59               	.equ     SCH_MODE_HANDLER,0x00                            ;handler mode in KER_SLP_TIME_MGNT   
  60               	.equ     SCH_MODE_THREAD, 0x01                            ;thread mode in KER_SLP_TIME_MGNT    
  61               	;;==================================define system macro end=================================;; 
  62               	
  63               	
  64               	
  65               	
  66               	
  67               	;;===========================define hardware reg address starting===========================;; 
  68               	.equ     SRSREG  ,        0x5F                            ;manually defined SREG in SRAM       
  69               	.equ     SRSPH   ,        0x5E                            ;manually defined SPH in SRAM        
  70               	.equ     SRSPL   ,        0x5D                            ;manually defined SPL in SRAM        
  71               	.equ     SRTIMSK0,        0x6E                            ;manually defined TIMSK0 in SRAM     
  72               	.equ     SROCR0B ,        0x48                            ;manually defined OCR0B in SRAM      
  73               	.equ     SROCR0A ,        0x47                            ;manually defined OCR0A in SRAM      
  74               	.equ     SRTCNT0 ,        0x46                            ;manually defined TCNT0 in SRAM      
  75               	.equ     SRTCCR0B,        0x45                            ;manually defined TCCR0B in SRAM     
  76               	.equ     SRTCCR0A,        0x44                            ;manually defined TCCR0A in SRAM     
  77               	.equ     SRTIFR0 ,        0x35                            ;manually defined TIFR0 in SRAM      
  78               	.equ     IOOCR0B ,        0x28                            ;manually defined OCR0B in IO        
  79               	.equ     IOOCR0A ,        0x27                            ;manually defined OCR0A in IO        
  80               	.equ     IOTCNT0 ,        0x26                            ;manually defined TCNT0 in IO        
  81               	.equ     IOTCCR0B,        0x25                            ;manually defined TCCR0B in IO       
  82               	.equ     IOTCCR0A,        0x24                            ;manually defined TCCR0A in IO       
  83               	.equ     IOTIFR0 ,        0x15                            ;manually defined TIFR0 in IO        
  84               	.equ     IOSREG  ,        0x3F                            ;manually defined SREG in IO         
  85               	.equ     IOSPH   ,        0x3E                            ;manually defined SPH in IO          
  86               	.equ     IOSPL   ,        0x3D                            ;manually defined SPL in IO          
  87               	;;==============================define hardware reg address end=============================;; 
  88               	
  89               	
  90               	
  91               	
  92               	
  93               	;;=============================define global variables starting=============================;; 
  94               	.section   .bss                                                                                
  95               	                                                                                               
  96               	.global    KerBase                                        ;declare global space for kernel     
  97 0000 0000 0000 	KerBase:   .skip 14                                       ;see offset section                  
  97      0000 0000 
  97      0000 0000 
  97      0000 
  98               	                                                                                               
  99               	.global    KerPSP                                         ;space for process stack pointers    
 100 000e 0000 0000 	KerPSP:    .skip KER_MX_NTSK*2                            ;2 bytes for each task               
 100      0000 0000 
 100      0000 0000 
 100      0000 0000 
 100      0000 0000 
 101               	                                                                                               
 102               	.global    KerSSZ                                         ;stack for main stack pointers       
 103 0022 0000 0000 	KerSSZ:    .skip 14                                       ;stack_ptr(2), MSPZPn(4)             
 103      0000 0000 
 103      0000 0000 
 103      0000 
 104               	                                                                                               
 105               	.global    KerSchSts                                      ;space for scheduler status          
 106 0030 0000 0000 	KerSchSts: .skip KER_MX_NTSK*1                            ;status(1)                           
 106      0000 0000 
 106      0000 
 107               	                                                                                               
 108               	.global    KerSchPr                                       ;space for scheduler priority        
 109 003a 0000 0000 	KerSchPr:  .skip KER_MX_NTSK*1                            ;priority(1)                         
 109      0000 0000 
 109      0000 
 110               	                                                                                               
 111               	.global    KerSchSlp                                      ;space for task sleep                
 112 0044 0000 0000 	KerSchSlp: .skip KER_MX_NTSK*2                            ;timing(2)                           
 112      0000 0000 
 112      0000 0000 
 112      0000 0000 
 112      0000 0000 
 113               	                                                                                               
 114               	.global    KerStack                                       ;space for stack                     
 115 0058 0000 0000 	KerStack:  .skip KER_STK_SZ*KER_MX_NTSK                   ;KER_STK_SZ bytes for each task      
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 116               	;;==============================define global variables end=================================;; 
 117               	
 118               	
 119               	
 120               	
 121               	
 122               	;;===============================define vector section starting=============================;; 
 123               	.section .vectors, "ax", @progbits                                                             
 124               	                                                                                               
 125 0000 0000 0000 	.org    0x20                                                                                   
 125      0000 0000 
 125      0000 0000 
 125      0000 0000 
 125      0000 0000 
 125      0000 0000 
 125      0000 0000 
 125      0000 0000 
 126:kernel.S      ****         RJMP  __vector_16                                                                      
 127               	;;=================================define vector section end================================;; 
 128               	
 129               	
 130               	
 131               	
 132               	
 133               	;;===============================define text section starting===============================;; 
 134               	.section .text                                                                                 
 135               	;;==================================define text section end=================================;; 
 136               	
 137               	
 138               	
 139               	
 140               	
 141               	;;==============================define global functions starting============================;; 
 142               	.global  Kernel_SysTick_Reg_Init                                                               
 143               	.global  Kernel_SysTick_Val_Get                                                                
 144               	.global  Kernel_SysTick_Val_Safely_Get                                                         
 145               	.global  Kernel_Interrupt_Sts_Get                                                              
 146               	.global  Kernel_Init                                                                           
 147               	.global  Kernel_Task_Create                                                                    
 148               	.global  Kernel_Start_Tasks                                                                    
 149               	.global  Kernel_Task_Idle                                                                      
 150               	.global  Kernel_Task_Sleep                                                                     
 151               	.global  Kernel_Task_Constant_Latency                                                          
 152               	.global  Kernel_Task_Constant_Latency_Sleep                                                    
 153               	.global  Kernel_Task_Sleep_Time_Get                                                            
 154               	.global  Kernel_Task_Status_Get                                                                
 155               	.global  Kernel_NTask_Get                                                                      
 156               	.global  Kernel_Task_Prio_Get                                                                  
 157               	.global  Kernel_Lowest_Prio_Get                                                                
 158               	.global  Kernel_High_Prio_Task_ID_Get                                                          
 159               	.global  Kernel_Abs_High_Prio_Task_ID_Get                                                      
 160               	.global  Kernel_CPU_Usage_Get                                                                  
 161               	;;================================define global functions end===============================;; 
 162               	
 163               	
 164               	
 165               	
 166               	
 167               	;;============================debug pin operation init starting=============================;; 
 168               	;used registers          : R18, R19                                                            
 169               	;arg registers           : None                                                                
 170               	;return registers        : None                                                                
 171               	;unsafe access registers : R18, R19                                                            
 172               	.macro  KER_TIMER_INIT                                    ;total 1.5uS @8MHz      ( 12 clocks) 
 173               	        LDS   R18		         , KerBase+OFB_PRS        ;load prescaler         (  2 clocks) 
 174               			LDS   R19		         , KerBase+OFB_RLD        ;load reload val        (  2 clocks) 
 175               			STS   SRTCCR0B           , R18                    ;prescaler-> TCCR0B     (  2 clocks) 
 176               			STS   SRTCNT0            , R19                    ;reload val-> TCNT0     (  2 clocks) 
 177               			LDI   R18                , 0x01                   ;bit mask TOIE0         (  1 clock ) 
 178               			STS   SRTIMSK0           , R18                    ;set to TIMSK0          (  2 clocks) 
 179               			SEI                                               ;force enable interrupt (  1 clock ) 
 180               	.endm                                                                                          
 181               	;;==============================debug pin operation init end================================;; 
 182               	
 183               	
 184               	
 185               	
 186               	
 187               	;;============================debug pin operation init starting=============================;; 
 188               	;used registers          : None                                                                
 189               	;arg registers           : None                                                                
 190               	;return registers        : None                                                                
 191               	;unsafe access registers : None                                                                
 192               	.macro  KER_DEBUG_PIN_INIT                                ;total 0.5uS @8MHz      (  4 clocks) 
 193               	        #ifdef KER_DBG_ENABLE                                                                  
 194               			CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear port bit         (  2 clocks) 
 195               			SBI   KER_DBG_DDR        , KER_DBG_PIN            ;set bit in DDR         (  2 clocks) 
 196               			#endif                                                                                 
 197               	.endm                                                                                          
 198               	;;==============================debug pin operation init end================================;; 
 199               	
 200               	
 201               	
 202               	
 203               	
 204               	;;===========================debug pin operation set starting===============================;; 
 205               	;used registers          : None                                                                
 206               	;arg registers           : None                                                                
 207               	;return registers        : None                                                                
 208               	;unsafe access registers : None                                                                
 209               	.macro  KER_DEBUG_PIN_SET                                 ;total 0.25uS @8MHz     (  2 clocks) 
 210               	        #ifdef KER_DBG_ENABLE                                                                  
 211               	        SBI   KER_DBG_PORT       , KER_DBG_PIN            ;set gpio               (  2 clocks) 
 212               			#endif                                                                                 
 213               	.endm                                                                                          
 214               	;;==============================debug pin operation set end=================================;; 
 215               	
 216               	
 217               	
 218               	
 219               	
 220               	;;===========================debug pin operation clear starting=============================;; 
 221               	;used registers          : None                                                                
 222               	;arg registers           : None                                                                
 223               	;return registers        : None                                                                
 224               	;unsafe access registers : None                                                                
 225               	.macro  KER_DEBUG_PIN_CLEAR                               ;total 0.25uS @8MHz     (  2 clocks) 
 226               	        #ifdef KER_DBG_ENABLE                                                                  
 227               			CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear gpio             (  2 clocks) 
 228               			#endif                                                                                 
 229               	.endm                                                                                          
 230               	;;==============================debug pin operation clear end===============================;; 
 231               	
 232               	
 233               	
 234               	
 235               	
 236               	;;==============================reload counter value starting===============================;; 
 237               	;used registers          : R18                                                                 
 238               	;arg registers           : None                                                                
 239               	;return registers        : None                                                                
 240               	;unsafe access registers : R18                                                                 
 241               	.macro  KER_COUNTER_RELOAD                                ;total 0.5uS @8MHz      (  4 clocks) 
 242               	        LDS   R18                , KerBase+OFB_RLD        ;load reload value      (  2 clocks) 
 243               			STS   SRTCNT0            , R18                    ;Set value to TCNT0     (  2 clocks) 
 244               	.endm                                                                                          
 245               	;;=================================reload counter value end=================================;; 
 246               	
 247               	
 248               	
 249               	
 250               	
 251               	;;=================================save r0 & sreg starting==================================;; 
 252               	;used registers          : R0                                                                  
 253               	;arg registers           : None                                                                
 254               	;return registers        : None                                                                
 255               	;unsafe access registers : None                                                                
 256               	.macro  KER_SAVE_R0_SREG                                  ;total 0.63uS @8MHz     (  5 clocks) 
 257               	        PUSH  R0                                          ;save R0                (  2 clocks) 
 258               			IN    R0                 , IOSREG                 ;load SREG              (  1 clock ) 
 259               			PUSH  R0                                          ;save SREG              (  2 clocks) 
 260               	.endm                                                                                          
 261               	;;====================================save r0 & sreg end====================================;; 
 262               	
 263               	
 264               	
 265               	
 266               	
 267               	;;===============================save r0, sreg & cli starting===============================;; 
 268               	;used registers          : R0                                                                  
 269               	;arg registers           : None                                                                
 270               	;return registers        : None                                                                
 271               	;unsafe access registers : None                                                                
 272               	.macro  KER_SAVE_R0_CLI_SREG                              ;total 0.75uS @8MHz     (  6 clocks) 
 273               	        PUSH  R0                                          ;push R0                (  2 clocks) 
 274               			IN    R0                 , IOSREG                 ;save SREG              (  1 clock ) 
 275               			CLI                                               ;clear interrupt        (  1 clock ) 
 276               			PUSH  R0                                          ;save SREG              (  2 clocks) 
 277               	.endm                                                                                          
 278               	;;=================================save r0, sreg & cli end==================================;; 
 279               	
 280               	
 281               	
 282               	
 283               	
 284               	;;===================================save r1~r31 starting===================================;; 
 285               	;used registers          : R1~R31                                                              
 286               	;arg registers           : None                                                                
 287               	;return registers        : None                                                                
 288               	;unsafe access registers : None                                                                
 289               	.macro  KER_SAVE_R1_R31                                   ;total 7.88uS @8MHz     ( 63 clocks) 
 290               			PUSH  R1                                          ;save R1                (  2 clocks) 
 291               			CLR   R1                                          ;clear R1               (  1 clock ) 
 292               			PUSH  R2                                          ;save R2                (  2 clocks) 
 293               			PUSH  R3                                          ;save R3                (  2 clocks) 
 294               			PUSH  R4                                          ;save R4                (  2 clocks) 
 295               			PUSH  R5                                          ;save R5                (  2 clocks) 
 296               			PUSH  R6                                          ;save R6                (  2 clocks) 
 297               			PUSH  R7                                          ;save R7                (  2 clocks) 
 298               			PUSH  R8                                          ;save R8                (  2 clocks) 
 299               			PUSH  R9                                          ;save R9                (  2 clocks) 
 300               			PUSH  R10                                         ;save R10               (  2 clocks) 
 301               			PUSH  R11                                         ;save R11               (  2 clocks) 
 302               			PUSH  R12                                         ;save R12               (  2 clocks) 
 303               			PUSH  R13                                         ;save R13               (  2 clocks) 
 304               			PUSH  R14                                         ;save R14               (  2 clocks) 
 305               			PUSH  R15                                         ;save R15               (  2 clocks) 
 306               			PUSH  R16                                         ;save R16               (  2 clocks) 
 307               			PUSH  R17                                         ;save R17               (  2 clocks) 
 308               			PUSH  R18                                         ;save R18               (  2 clocks) 
 309               			PUSH  R19                                         ;save R19               (  2 clocks) 
 310               			PUSH  R20                                         ;save R20               (  2 clocks) 
 311               			PUSH  R21                                         ;save R21               (  2 clocks) 
 312               			PUSH  R22                                         ;save R22               (  2 clocks) 
 313               			PUSH  R23                                         ;save R23               (  2 clocks) 
 314               			PUSH  R24                                         ;save R24               (  2 clocks) 
 315               			PUSH  R25                                         ;save R25               (  2 clocks) 
 316               			PUSH  R26                                         ;save R26               (  2 clocks) 
 317               			PUSH  R27                                         ;save R27               (  2 clocks) 
 318               			PUSH  R28                                         ;save R28               (  2 clocks) 
 319               			PUSH  R29                                         ;save R29               (  2 clocks) 
 320               			PUSH  R30                                         ;save R30               (  2 clocks) 
 321               			PUSH  R31                                         ;save R31               (  2 clocks) 
 322               	.endm                                                                                          
 323               	;;======================================save r1~r31 end=====================================;; 
 324               	
 325               	
 326               	
 327               	
 328               	
 329               	;;==============================context save handler starting===============================;; 
 330               	;used registers          : R0~R31                                                              
 331               	;arg registers           : None                                                                
 332               	;return registers        : None                                                                
 333               	;unsafe access registers : None                                                                
 334               	.macro  KER_CONTEXT_SAVE_HANDLER                          ;total 8.5uS @8MHz      ( 68 clocks) 
 335               	        KER_SAVE_R0_SREG                                  ;save r0, sreg          (  5 clocks) 
 336               	        KER_SAVE_R1_R31                                   ;save r1~r31            ( 63 clocks) 
 337               	.endm                                                                                          
 338               	;;=================================context save handler end=================================;; 
 339               	
 340               	
 341               	
 342               	
 343               	
 344               	;;===============================context save thread starting===============================;; 
 345               	;used registers          : R0~R31                                                              
 346               	;arg registers           : None                                                                
 347               	;return registers        : None                                                                
 348               	;unsafe access registers : None                                                                
 349               	.macro  KER_CONTEXT_SAVE_THREAD                           ;total 8.63uS @8MHz     ( 69 clocks) 
 350               	        KER_SAVE_R0_CLI_SREG                              ;save r0, sreg          (  6 clocks) 
 351               	        KER_SAVE_R1_R31                                   ;save r1~r31            ( 63 clocks) 
 352               	.endm                                                                                          
 353               	;;==================================context save thread end=================================;; 
 354               	
 355               	
 356               	
 357               	
 358               	
 359               	
 360               	;;================================restore r0 & sreg starting================================;; 
 361               	;used registers          : R0                                                                  
 362               	;arg registers           : None                                                                
 363               	;return registers        : None                                                                
 364               	;unsafe access registers : None                                                                
 365               	.macro  KER_RESTORE_R0_SREG                               ;total 0.63uS @8MHz     (  5 clocks) 
 366               	        POP   R0                                          ;fetch SREG             (  2 clocks) 
 367               			OUT   IOSREG             , R0                     ;load SREG              (  1 clock ) 
 368               			POP   R0                                          ;restore R0             (  2 clocks) 
 369               	.endm                                                                                          
 370               	;;==================================restore r0 & sreg end===================================;; 
 371               	
 372               	
 373               	
 374               	
 375               	
 376               	;;==============================restore r0, sreg & sei starting=============================;; 
 377               	;used registers          : R0                                                                  
 378               	;arg registers           : None                                                                
 379               	;return registers        : None                                                                
 380               	;unsafe access registers : None                                                                
 381               	.macro  KER_RESTORE_R0_SREG_SEI                           ;total 0.75uS @8MHz     (  6 clocks) 
 382               	        POP   R0                                          ;fetch SREG             (  2 clocks) 
 383               			OUT   IOSREG             , R0                     ;load SREG              (  1 clock ) 
 384               			POP   R0                                          ;restore R0             (  2 clocks) 
 385               			SEI                                               ;enable interrupt       (  1 clock ) 
 386               	.endm                                                                                          
 387               	;;===============================restore r0, sreg & sei end=================================;; 
 388               	
 389               	
 390               	
 391               	
 392               	
 393               	;;=================================restore r1~r31 starting==================================;; 
 394               	;used registers          : R1~R31                                                              
 395               	;arg registers           : None                                                                
 396               	;return registers        : None                                                                
 397               	;unsafe access registers : None                                                                
 398               	.macro  KER_RESTORE_R1_R31                                ;total 8.38uS @8MHz     ( 62 clocks) 
 399               			POP   R31                                         ;restore R31            (  2 clocks) 
 400               			POP   R30                                         ;restore R30            (  2 clocks) 
 401               			POP   R29                                         ;restore R29            (  2 clocks) 
 402               			POP   R28                                         ;restore R28            (  2 clocks) 
 403               			POP   R27                                         ;restore R27            (  2 clocks) 
 404               			POP   R26                                         ;restore R26            (  2 clocks) 
 405               			POP   R25                                         ;restore R25            (  2 clocks) 
 406               			POP   R24                                         ;restore R24            (  2 clocks) 
 407               			POP   R23                                         ;restore R23            (  2 clocks) 
 408               			POP   R22                                         ;restore R22            (  2 clocks) 
 409               			POP   R21                                         ;restore R21            (  2 clocks) 
 410               			POP   R20                                         ;restore R20            (  2 clocks) 
 411               			POP   R19                                         ;restore R19            (  2 clocks) 
 412               			POP   R18                                         ;restore R18            (  2 clocks) 
 413               			POP   R17                                         ;restore R17            (  2 clocks) 
 414               			POP   R16                                         ;restore R16            (  2 clocks) 
 415               			POP   R15                                         ;restore R15            (  2 clocks) 
 416               			POP   R14                                         ;restore R14            (  2 clocks) 
 417               			POP   R13                                         ;restore R13            (  2 clocks) 
 418               			POP   R12                                         ;restore R12            (  2 clocks) 
 419               			POP   R11                                         ;restore R11            (  2 clocks) 
 420               			POP   R10                                         ;restore R10            (  2 clocks) 
 421               			POP   R9                                          ;restore R9             (  2 clocks) 
 422               			POP   R8                                          ;restore R8             (  2 clocks) 
 423               			POP   R7                                          ;restore R7             (  2 clocks) 
 424               			POP   R6                                          ;restore R6             (  2 clocks) 
 425               			POP   R5                                          ;restore R5             (  2 clocks) 
 426               			POP   R4                                          ;restore R4             (  2 clocks) 
 427               			POP   R3                                          ;restore R3             (  2 clocks) 
 428               			POP   R2                                          ;restore R2             (  2 clocks) 
 429               			POP   R1                                          ;restore R1             (  2 clocks) 
 430               	.endm                                                                                          
 431               	;;====================================restore r1~r31 end====================================;; 
 432               	
 433               	
 434               	
 435               	
 436               	
 437               	;;=============================context restore handler starting=============================;; 
 438               	;used registers          : R0~R31                                                              
 439               	;arg registers           : None                                                                
 440               	;return registers        : None                                                                
 441               	;unsafe access registers : None                                                                
 442               	.macro  KER_CONTEXT_RESTORE_HANDLER                       ;total 8.38uS @8MHz     ( 67 clocks) 
 443               	        KER_RESTORE_R1_R31                                ;restore r1~r31         ( 62 clocks) 
 444               			KER_RESTORE_R0_SREG                               ;restore r0, sreg       (  5 clocks) 
 445               	.endm                                                                                          
 446               	;;===============================context restore handler end================================;; 
 447               	
 448               	
 449               	
 450               	
 451               	
 452               	;;=============================context restore thread starting==============================;; 
 453               	;used registers          : R0~R31                                                              
 454               	;arg registers           : None                                                                
 455               	;return registers        : None                                                                
 456               	;unsafe access registers : None                                                                
 457               	.macro  KER_CONTEXT_RESTORE_THREAD                        ;total 8.75uS @8MHz     ( 68 clocks) 
 458               	        KER_RESTORE_R1_R31                                ;restore r1~r31         ( 62 clocks) 
 459               			KER_RESTORE_R0_SREG_SEI                           ;restore r0, sreg       (  6 clocks) 
 460               	.endm                                                                                          
 461               	;;================================context restore thread end================================;; 
 462               	
 463               	
 464               	
 465               	
 466               	
 467               	;;==============================fetch current task id starting==============================;; 
 468               	;used registers          : R20                                                                 
 469               	;arg registers           : None                                                                
 470               	;return registers        : R20 (Current task id)                                               
 471               	;unsafe access registers : R20                                                                 
 472               	.macro  KER_FETCH_CURR_TID                                ;total 0.25uS @8MHz     (  2 clocks) 
 473               	        LDS   R20                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 474               	.endm                                                                                          
 475               	;;================================fetch current task id end=================================;; 
 476               	
 477               	
 478               	
 479               	
 480               	
 481               	;;==================================fetch ntask starting====================================;; 
 482               	;used registers          : R21                                                                 
 483               	;arg registers           : None                                                                
 484               	;return registers        : R21 (ntask)                                                         
 485               	;unsafe access registers : R21                                                                 
 486               	.macro  KER_FETCH_NTASK                                   ;total 0.25uS @8MHz     (  2 clocks) 
 487               	        LDS   R21                , KerBase+OFB_NTSK       ;fetch task_id          (  2 clocks) 
 488               	.endm                                                                                          
 489               	;;====================================fetch ntask end=======================================;; 
 490               	
 491               	
 492               	
 493               	
 494               	
 495               	;;=========================calculate offset addr in words starting==========================;; 
 496               	;used registers          : R18, R30(ZL), R31(ZH)                                               
 497               	;arg registers           : R30(ZL), R31(ZH)                                                    
 498               	;return registers        : R30(ZL), R31(ZH)                                                    
 499               	;unsafe access registers : R18, R30(ZL), R31(ZH)                                               
 500               	.macro  KER_CALC_ADDR_OFF_WORD                            ;total 0.75uS @8MHz     (  6 clocks) 
 501               	        LDS   R18                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 502               			LSL   R18                                         ;left shift to multiply (  1 clock ) 
 503               			ADD   ZL                 , R18                    ;add offset to array    (  1 clock ) 
 504               			LDI   R18                , 0x00                   ;clear for carry prop   (  1 clock ) 
 505               			ADC   ZH                 , R18                    ;add carry if any       (  1 clock ) 
 506               	.endm                                                                                          
 507               	;;=============================calculate offset addr in words end===========================;; 
 508               	
 509               	
 510               	
 511               	
 512               	
 513               	;;=========================calculate offset addr in bytes starting==========================;; 
 514               	;used registers          : R18, R30(ZL), R31(ZH)                                               
 515               	;arg registers           : R30(ZL), R31(ZH)                                                    
 516               	;return registers        : R30(ZL), R31(ZH)                                                    
 517               	;unsafe access registers : R18, R30(ZL), R31(ZH)                                               
 518               	.macro  KER_CALC_ADDR_OFF_BYTES                           ;total 0.63uS @8MHz     (  5 clocks) 
 519               	        LDS   R18                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 520               			ADD   ZL                 , R18                    ;add offset to array    (  1 clock ) 
 521               			LDI   R18                , 0x00                   ;clear for carry prop   (  1 clock ) 
 522               			ADC   ZH                 , R18                    ;add carry if any       (  1 clock ) 
 523               	.endm                                                                                          
 524               	;;=============================calculate offset addr in bytes end===========================;; 
 525               	
 526               	
 527               	
 528               	
 529               	
 530               	;;===============================save current task sp starting==============================;; 
 531               	;used registers          : R18, R19, R30(ZL), R31(ZH)                                          
 532               	;arg registers           : None                                                                
 533               	;return registers        : None                                                                
 534               	;unsafe access registers : R18, R19, R30(ZL), R31(ZH)                                          
 535               	.macro  KER_SAVE_CURR_TASK_SP                             ;total 1.75uS @8MHz     ( 14 clocks) 
 536               			LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 537               			LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 538               			KER_CALC_ADDR_OFF_WORD                            ;calc offset            (  6 clocks) 
 539               			IN    R18                , IOSPL                  ;fetch SPL0             (  1 clock ) 
 540               			IN    R19                , IOSPH                  ;fetch SPH0             (  1 clock ) 
 541               			STD   Z+0                , R18                    ;store SPL at ZP+0      (  2 clocks) 
 542               			STD   Z+1                , R19                    ;store SPH at ZP+1      (  2 clocks) 
 543               	.endm                                                                                          
 544               	;;================================save current task sp end==================================;; 
 545               	
 546               	
 547               	
 548               	
 549               	
 550               	;;==============================load next task id starting==================================;; 
 551               	;used registers          : R18, R19                                                            
 552               	;arg registers           : None                                                                
 553               	;return registers        : None                                                                
 554               	;unsafe access registers : R18, R19                                                            
 555               	.macro  KER_LOAD_NEXT_TASK_ID                             ;total 1.63uS @8MHz     ( 13 clocks) 
 556               			LDS   R18                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 557               			INC   R18                                         ;increment task_id      (  1 clock ) 
 558               			LDS   R19                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 559               		_MOD_CONT\@:                                          ;use local label                     
 560               		    CP    R18                , R19                    ;compare tid with ntask (  1 clock ) 
 561               			BRLO  _MOD_DONE\@                                 ;if tid<ntask, done     (  2 clocks) 
 562               			SUB   R18                , R19                    ;subtract ntask from tid(  1 clock ) 
 563               			RJMP  _MOD_CONT\@                                 ;go to loop start       (  2 clocks) 
 564               		_MOD_DONE\@:                                          ;use local label                     
 565               		    STS   KerBase+OFB_TID    , R18                    ;save task_id%ntask     (  2 clocks) 
 566               	.endm                                                                                          
 567               	;;=================================load next task id end====================================;; 
 568               	
 569               	
 570               	
 571               	
 572               	
 573               	;;==============================increment tick counter starting=============================;; 
 574               	;used registers          : R18, R19                                                            
 575               	;arg registers           : None                                                                
 576               	;return registers        : None                                                                
 577               	;unsafe access registers : R18, R19                                                            
 578               	.macro  KER_TICK_INCREMENT                                ;total 3.25uS @8MHz     ( 26 clocks) 
 579               			LDS   R18                , KerBase+OFB_TICK0      ;load Byte0             (  2 clocks) 
 580               			INC   R18                                         ;add 1 with Byte0       (  1 clock ) 
 581               			STS   KerBase+OFB_TICK0  , R18                    ;set Byte0              (  2 clocks) 
 582               			LDI   R19                , 0x00                   ;clear reg              (  1 clock ) 
 583               			LDS   R18                , KerBase+OFB_TICK1      ;load Byte1             (  2 clocks) 
 584               			ADC   R18                , R19                    ;add carry with Byte1   (  1 clock ) 
 585               			STS   KerBase+OFB_TICK1  , R18                    ;set Byte1              (  2 clocks) 
 586               			LDS   R18                , KerBase+OFB_TICK2      ;load Byte2             (  2 clocks) 
 587               			ADC   R18                , R19                    ;add carry with Byte2   (  1 clock ) 
 588               			STS   KerBase+OFB_TICK2  , R18                    ;set Byte2              (  2 clocks) 
 589               			LDS   R18                , KerBase+OFB_TICK3      ;load Byte3             (  2 clocks) 
 590               			ADC   R18                , R19                    ;add carry with Byte3   (  1 clock ) 
 591               			STS   KerBase+OFB_TICK3  , R18                    ;set Byte3              (  2 clocks) 
 592               			LDS   R18                , KerBase+OFB_TICK4      ;load Byte4             (  2 clocks) 
 593               			ADC   R18                , R19                    ;add carry with Byte4   (  1 clock ) 
 594               			STS   KerBase+OFB_TICK4  , R18                    ;set Byte4              (  2 clocks) 
 595               	.endm                                                                                          
 596               	;;=================================increment tick counter end===============================;; 
 597               	
 598               	
 599               	
 600               	
 601               	
 602               	;;==============================load task id & sp starting==================================;; 
 603               	;used registers          : R18, R19, R30(ZL), R31(ZH)                                          
 604               	;arg registers           : None                                                                
 605               	;return registers        : None                                                                
 606               	;unsafe access registers : R18, R19, R30(ZL), R31(ZH)                                          
 607               	.macro  KER_LOAD_TASK_ID_AND_SP                           ;total 1.75uS @8MHz     ( 14 clocks) 
 608               			LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 609               			LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 610               			KER_CALC_ADDR_OFF_WORD                            ;calc offset            (  6 clocks) 
 611               			LDD   R18                , Z+0                    ;load SPL at ZP         (  2 clocks) 
 612               			LDD   R19                , Z+1                    ;load SPH at ZP         (  2 clocks) 
 613               			OUT   IOSPL              , R18                    ;load SPL0              (  1 clock ) 
 614               			OUT   IOSPH              , R19                    ;load SPH0              (  1 clock ) 
 615               	.endm                                                                                          
 616               	;;=================================load task id & sp end====================================;; 
 617               	
 618               	
 619               	
 620               	
 621               	
 622               	;;================================push msp & zp starting====================================;; 
 623               	;used registers          : R18, R19, R26(XL), R27(XH), R30(ZL), R31(ZH)                        
 624               	;arg registers           : None                                                                
 625               	;return registers        : None                                                                
 626               	;unsafe access registers : R18, R19, R26(XL), R27(XH), R30(ZL), R31(ZH)                        
 627               	.macro  KER_PUSH_MSP_ZP                                   ;total 2.25uS @8MHz     ( 18 clocks) 
 628               	        LDS   XL                 , KerSSZ+OFM_MSPI+0      ;load val low           (  2 clocks) 
 629               			LDS   XH                 , KerSSZ+OFM_MSPI+1      ;load val high          (  2 clocks) 
 630               			IN    R18                , IOSPL                  ;copy                   (  1 clock ) 
 631               			IN    R19                , IOSPH                  ;copy                   (  1 clock ) 
 632               			ST    X+                 , R18                    ;store main SPL         (  2 clocks) 
 633               	        ST    X+                 , R19                    ;store main SPH         (  2 clocks) 
 634               			ST    X+                 , ZL                     ;store main ZL          (  2 clocks) 
 635               			ST    X+                 , ZH                     ;store main ZH          (  2 clocks) 
 636               			STS   KerSSZ+OFM_MSPI+0  , XL                     ;store new index        (  2 clocks) 
 637               			STS   KerSSZ+OFM_MSPI+1  , XH                     ;store new index        (  2 clocks) 
 638               	.endm                                                                                          
 639               	;;===================================push msp & zp end======================================;; 
 640               	
 641               	
 642               	
 643               	
 644               	
 645               	;;=================================pop msp & zp starting====================================;; 
 646               	;used registers          : R18, R19, R26(XL), R27(XH), R30(ZL), R31(ZH)                        
 647               	;arg registers           : None                                                                
 648               	;return registers        : None                                                                
 649               	;unsafe access registers : R18, R19, R26(XL), R27(XH), R30(ZL), R31(ZH)                        
 650               	.macro  KER_POP_MSP_ZP                                    ;total 2.25uS @8MHz     ( 18 clocks) 
 651               			LDS   XL                 , KerSSZ+OFM_MSPI+0      ;load val low           (  2 clocks) 
 652               			LDS   XH                 , KerSSZ+OFM_MSPI+1      ;load val high          (  2 clocks) 
 653               			LD    ZH                 , -X                     ;load ZH                (  2 clocks) 
 654               			LD    ZL                 , -X                     ;load ZL                (  2 clocks) 
 655               			LD    R19                , -X                     ;load main SPH          (  2 clocks) 
 656               			LD    R18                , -X                     ;load main SPL          (  2 clocks) 
 657               			OUT   IOSPL              , R18                    ;set SPL                (  1 clock ) 
 658               			OUT   IOSPH              , R19                    ;set SPH                (  1 clock ) 
 659               			STS   KerSSZ+OFM_MSPI+0  , XL                     ;store new index        (  2 clocks) 
 660               			STS   KerSSZ+OFM_MSPI+1  , XH                     ;store new index        (  2 clocks) 
 661               	.endm                                                                                          
 662               	;;====================================pop msp & zp end======================================;; 
 663               	
 664               	
 665               	
 666               	
 667               	
 668               	;;============================sleep timeout management starting=============================;; 
 669               	;used registers          : R18, R19, R20, R24, R30(ZL), R31(ZH)                                
 670               	;arg registers           : R24 (SCH_MODE_HANDLER/SCH_MODE_THREAD)                              
 671               	;return registers        : R24 (READY/BLOCKED/EXECUTING/SUSPENDED/CONS_LAT)                    
 672               	;unsafe access registers : R18, R19, R20, R24, R30(ZL), R31(ZH)                                
 673               	.macro  KER_SLP_TIME_MGNT                                 ;total 6.50uS @8MHz     ( 52 clocks) 
 674               			LDI   ZL                 , lo8(KerSchSlp)         ;fetch base pos low     (  1 clock ) 
 675               			LDI   ZH                 , hi8(KerSchSlp)         ;fetch base pos high    (  1 clock ) 
 676               			KER_CALC_ADDR_OFF_WORD                            ;calc offset            (  6 clocks) 
 677               			;fetch current value from ram, if val=0, skip decrement                                
 678               	        LDD   R18                , Z+0                    ;load val low byte      (  2 clocks) 
 679               			LDD   R19                , Z+1                    ;load val high byte     (  2 clocks) 
 680               			MOV   R20                , R18                    ;copy                   (  1 clock ) 
 681               			OR    R20                , R19                    ;or high & low bytes    (  1 clock ) 
 682               			BREQ  _VAL_NULL\@                                 ;val=0, save sts        (  2 clocks) 
 683               	        CPI   R24                , SCH_MODE_THREAD        ;if arg=1, thread mode  (  1 clock ) 
 684               			BREQ  _VAL_NOT_NULL\@                             ;no need to dec val     (  2 clocks) 
 685               			;R19:R18 contains 16 bit sleep timer val, decrease val by 1                            
 686               			LDI   R20                , 0x01                   ;set val 1              (  1 clock ) 
 687               	        SUB   R18                , R20                    ;subtract low byte      (  1 clock ) 
 688               			LDI   R20                , 0x00                   ;clear                  (  1 clock ) 
 689               			SBC   R19                , R20                    ;subtract carry if any  (  1 clock ) 
 690               			;store new value                                                                       
 691               			STD   Z+0                , R18                    ;store low byte         (  2 clocks) 
 692               			STD   Z+1                , R19                    ;store low byte         (  2 clocks) 
 693               			MOV   R20                , R18                    ;copy                   (  1 clock ) 
 694               			OR    R20                , R19                    ;or high & low bytes    (  1 clock ) 
 695               			BRNE  _VAL_NOT_NULL\@                             ;val!=0                 (  2 clocks) 
 696               		_VAL_NULL\@:                                                                               
 697               		    ;find ram address for status                                                           
 698               		    LDI   ZL                 , lo8(KerSchSts)         ;fetch base pos low     (  1 clock ) 
 699               			LDI   ZH                 , hi8(KerSchSts)         ;fetch base pos high    (  1 clock ) 
 700               	        KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 701               			;update flag as task is ready                                                          
 702               			LDI   R24                , TASK_READY             ;set TASK_READY         (  1 clock ) 
 703               			ST    Z                  , R24                    ;update flag            (  2 clocks) 
 704               			RJMP  _EXIT_SLP_TIME\@                            ;jump to exit           (  2 clocks) 
 705               	    _VAL_NOT_NULL\@:                                                                           
 706               		    LDI   ZL                 , lo8(KerSchSts)         ;fetch base pos low     (  1 clock ) 
 707               			LDI   ZH                 , hi8(KerSchSts)         ;fetch base pos high    (  1 clock ) 
 708               	        KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 709               		    LD    R24                , Z                      ;return sts             (  2 clocks) 
 710               	    _EXIT_SLP_TIME\@:                                                                          
 711               	.endm                                                                                          
 712               	;;============================sleep timeout management end==================================;; 
 713               	
 714               	
 715               	
 716               	
 717               	
 718               	;;============================current task priority starting================================;; 
 719               	;used registers          : R18, R24, R30(ZL), R31(ZH)                                          
 720               	;arg registers           : None                                                                
 721               	;return registers        : R24 (Current task priority)                                         
 722               	;unsafe access registers : R18, R24, R30(ZL), R31(ZH)                                          
 723               	.macro  KER_CURR_TASK_PRIO                                ;total 1.13uS @8MHz     (  9 clocks) 
 724               			LDI    ZL                , lo8(KerSchPr)          ;load low addr          (  1 clock ) 
 725               			LDI    ZH                , hi8(KerSchPr)          ;load high addr         (  1 clock ) 
 726               			LDI    R18               , 0x00                   ;clear reg, for carry   (  1 clock ) 
 727               			LDS    R24               , KerBase+OFB_TID        ;load task id           (  2 clocks) 
 728               	        ADD    ZL                , R24                    ;add low addr           (  1 clock ) 
 729               			ADC    ZH                , R18                    ;add carry if any       (  1 clock ) 
 730               			LD     R24               , Z                      ;load current tid prio  (  2 clocks) 
 731               	.endm                                                                                          
 732               	;;==============================current task priority end===================================;; 
 733               	
 734               	
 735               	
 736               	
 737               	
 738               	;;================================run scheduler starting====================================;; 
 739               	;used registers          : R18, R19, R20, R24, R25, R30(ZL), R31(ZH)                           
 740               	;arg registers           : R24 (SCH_MODE_HANDLER/SCH_MODE_THREAD)                              
 741               	;return registers        : None                                                                
 742               	;unsafe access registers : R18, R19, R20, R24, R25, R30(ZL), R31(ZH)                           
 743               	.macro  KER_RUN_SCHEDULER                                 ;total 13.25uS @8MHz    (106 clocks) 
 744               			LDI    R18               , 0xFF                   ;set 0xff               (  1 clock ) 
 745               			STS    KerBase+OFB_LPR   , R18                    ;lowest priority        (  2 clocks) 
 746               			LDI    R18               , 0x00                   ;start from 0           (  1 clock ) 
 747               			STS    KerBase+OFB_PTID  , R18                    ;highest prio tid=0     (  2 clocks) 
 748               			MOV    R15               , R24                    ;copy sch mode          (  1 clock ) 
 749               		_KER_SCH_LOOP\@:                                                                           
 750               		    ;store task id to run from KER_DEC_SLP_TIMEOUT                                         
 751               			STS    KerBase+OFB_TID   , R18                    ;store task id          (  2 clocks) 
 752               	        ;sleep time decrement, update ready/blocked status                                     
 753               			MOV    R24               , R15                    ;restore sch mode       (  1 clock ) 
 754               			KER_SLP_TIME_MGNT                                 ;update return vars     ( 52 clocks) 
 755               	        CPI    R24               , TASK_READY             ;compare                (  1 clock ) 
 756               	        BREQ   _KER_CALC_PRIO\@                           ;calc priority if ready (  2 clocks) 
 757               			CPI    R24               , TASK_CONS_LAT          ;compare                (  1 clock ) 
 758               	        BREQ   _KER_CALC_PRIO\@                           ;calc priority if c_lat (  2 clocks) 
 759               	        RJMP   _KER_SCH_NEXT\@                            ;skip if !ready|c_lat   (  2 clocks) 
 760               		_KER_CALC_PRIO\@:
 761               			KER_CURR_TASK_PRIO                                ;get task prio ->R24    (  9 clocks) 
 762               	        ;compare current task priority with lowest priority found so far                       
 763               			LDS    R18               , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
 764               			CP     R24               , R18                    ;compare                (  1 clock ) 
 765               			BRSH   _KER_SCH_NEXT\@                            ;if prio>=lowest prio   (  2 clocks) 
 766               			;found new lowest priority                                                             
 767               			STS    KerBase+OFB_LPR   , R24                    ;save lowest priority   (  2 clocks) 
 768               			LDS    R18               , KerBase+OFB_TID        ;load task id           (  2 clocks) 
 769               			STS    KerBase+OFB_PTID  , R18                    ;save lowest priority   (  2 clocks) 
 770               	                                                                                               
 771               	    _KER_SCH_NEXT\@:                                                                           
 772               		    LDS    R18               , KerBase+OFB_TID        ;load task id           (  2 clocks) 
 773               			INC    R18                                        ;increment by 1         (  1 clock ) 
 774               			LDS    R19               , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 775               			CP     R18               , R19                    ;compare with ntask     (  2 clocks) 
 776               			BRSH   _KER_SCH_EXIT\@                            ;if task_id>=ntask      (  2 clocks) 
 777               			RJMP   _KER_SCH_LOOP\@                            ;jump to entry          (  2 clocks) 
 778               		_KER_SCH_EXIT\@:                                                                           
 779               	        LDS    R18               , KerBase+OFB_PTID       ;load high prio task id (  2 clocks) 
 780               			STS    KerBase+OFB_TID   , R18                    ;for test only          (  2 clocks) 
 781               	.endm                                                                                          
 782               	;;===================================run scheduler end======================================;; 
 783               	
 784               	
 785               	
 786               	
 787               	
 788               	;;================================calc cpu usage starting===================================;; 
 789               	;used registers          : R18, R19                                                            
 790               	;arg registers           : None                                                                
 791               	;return registers        : None                                                                
 792               	;unsafe access registers : R18, R19                                                            
 793               	.macro  KER_CPU_USAGE                                     ;total 3.25uS @8MHz     ( 26 clocks) 
 794               	        ;check if current target task is idle task or not                                      
 795               	        LDS    R18               , KerBase+OFB_TID        ;load target task_id    (  2 clocks) 
 796               			TST    R18                                        ;check if idle task     (  1 clock ) 
 797               			BREQ   _KER_USG_TICK\@                            ;task_id=idle, skip     (  2 clocks) 
 798               			LDS    R18               , KerBase+OFB_UATC       ;load active tick cnt   (  2 clocks) 
 799               			INC    R18                                        ;inc active tick cnt    (  1 clock ) 
 800               			STS    KerBase+OFB_UATC  , R18                    ;store new val          (  2 clocks) 
 801               		_KER_USG_TICK\@:                                                                           
 802               			LDS    R18               , KerBase+OFB_UTC        ;load usage tick cnt    (  2 clocks) 
 803               			INC    R18                                        ;increment tick cnt     (  1 clock ) 
 804               			CPI    R18               , 100                    ;compare with 100       (  1 clock ) 
 805               			BRLO   _KER_USG_UTC_SV\@                          ;val<100, save new val  (  2 clocks) 
 806               			LDI    R18               , 0x00                   ;val>=100, roll back    (  1 clock ) 
 807               			LDS    R19               , KerBase+OFB_UATC       ;load active tick cnt   (  2 clocks) 
 808               			STS    KerBase+OFB_USAGE , R19                    ;store usage            (  2 clocks) 
 809               			LDI    R19               , 0x00                   ;clear reg              (  1 clock ) 
 810               			STS    KerBase+OFB_UATC  , R19                    ;clear active tick cnt  (  2 clocks) 
 811               		_KER_USG_UTC_SV\@:                                                                         
 812               			STS    KerBase+OFB_UTC   , R18                    ;store new val          (  2 clocks) 
 813               	.endm                                                                                          
 814               	;;===================================calc cpu usage end=====================================;; 
 815               	
 816               	
 817               	
 818               	
 819               	
 820               	;;=================================ISR execution starting===================================;; 
 821               	.global  __vector_16                                                                           
 822               	    __vector_16:                                          ;total 40.00uS @8MHz    (334 clocks) 
 823:kernel.S      **** 	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 824:kernel.S      ****         KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 825:kernel.S      **** 		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 826:kernel.S      **** 		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 827:kernel.S      **** 		KER_TICK_INCREMENT                                ;increment tick counter ( 26 clocks) 
 828:kernel.S      **** 		LDI    R24               , SCH_MODE_HANDLER       ;set sch mode           (  1 clock ) 
 829:kernel.S      **** 		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
 830:kernel.S      **** 		KER_CPU_USAGE                                     ;calc cpu usage         ( 26 clocks) 
 831:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 832:kernel.S      **** 		KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
 833:kernel.S      **** 	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 834:kernel.S      **** 		RETI                                              ;return from interrupt  (  4 clocks) 
 835               	;;====================================ISR execution end=====================================;; 
 836               	
 837               	
 838               	
 839               	
 840               	
 841               	;;================================SysTick reg init starting=================================;; 
 842               	;used registers          : R18, R19, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
 843               	;arg registers           : R24(Prescaler), R22(ReloadVal)                                      
 844               	;return registers        : None                                                                
 845               	;unsafe access registers : R18, R19, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
 846               	Kernel_SysTick_Reg_Init:                                  ;total 11.50uS @8MHz    ( 92 clocks) 
 847:kernel.S      ****         CLI                                               ;disable global int     (  1 clock ) 
 848:kernel.S      **** 		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 849:kernel.S      ****         KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 850               			;clear reg                                                                             
 851:kernel.S      **** 		LDI   R18                , 0x00                   ;set 0x00 to R18        (  1 clock ) 
 852               			;clear tick counter                                                                    
 853:kernel.S      **** 		STS   KerBase+OFB_TICK0  , R18                    ;clear  KerBase[0]      (  2 clocks) 
 854:kernel.S      **** 		STS   KerBase+OFB_TICK1  , R18                    ;clear  KerBase[1]      (  2 clocks) 
 855:kernel.S      **** 		STS   KerBase+OFB_TICK2  , R18                    ;clear  KerBase[2]      (  2 clocks) 
 856:kernel.S      **** 		STS   KerBase+OFB_TICK3  , R18                    ;clear  KerBase[3]      (  2 clocks) 
 857:kernel.S      **** 		STS   KerBase+OFB_TICK4  , R18                    ;clear  KerBase[4]      (  2 clocks) 
 858               			;clear system registers                                                                
 859:kernel.S      **** 		STS   KerBase+OFB_PRS    , R18                    ;clear  KerBase[5]      (  2 clocks) 
 860:kernel.S      **** 		STS   KerBase+OFB_RLD    , R18                    ;clear  KerBase[6]      (  2 clocks) 
 861:kernel.S      **** 		STS   KerBase+OFB_TID    , R18                    ;clear  KerBase[7]      (  2 clocks) 
 862:kernel.S      **** 		STS   KerBase+OFB_NTSK   , R18                    ;clear  KerBase[8]      (  2 clocks) 
 863:kernel.S      **** 		STS   KerBase+OFB_LPR    , R18                    ;clear  KerBase[9]      (  2 clocks) 
 864:kernel.S      ****         STS   KerBase+OFB_PTID   , R18                    ;clear  KerBase[10]     (  2 clocks) 
 865:kernel.S      **** 		STS   KerBase+OFB_UTC    , R18                    ;clear  KerBase[11]     (  2 clocks) 
 866:kernel.S      **** 		STS   KerBase+OFB_UATC   , R18                    ;clear  KerBase[12]     (  2 clocks) 
 867:kernel.S      **** 		STS   KerBase+OFB_USAGE  , R18                    ;clear  KerBase[13]     (  2 clocks) 
 868               			;clear all timer registers                                                             
 869:kernel.S      **** 		STS   SRTCCR0A           , R18                    ;clear TCCR0A           (  2 clocks) 
 870:kernel.S      **** 		STS   SRTCCR0B           , R18                    ;clear TCCR0B           (  2 clocks) 
 871:kernel.S      **** 		STS   SRTIMSK0           , R18                    ;clear TIMSK0           (  2 clocks) 
 872:kernel.S      **** 		STS   SRTIFR0            , R18                    ;clear TIFR0            (  2 clocks) 
 873:kernel.S      **** 		STS   SROCR0A            , R18                    ;clear OCR0A            (  2 clocks) 
 874:kernel.S      **** 		STS   SROCR0B            , R18                    ;clear OCR0B            (  2 clocks) 
 875:kernel.S      **** 		STS   SRTCNT0            , R18                    ;clear TCNT0            (  2 clocks) 
 876               			;save values for future use                                                            
 877:kernel.S      **** 		STS   KerBase+OFB_PRS    , R24                    ;KerBase[5] prescaler   (  2 clocks) 
 878:kernel.S      **** 		STS   KerBase+OFB_RLD    , R22                    ;KerBase[6] reload val  (  2 clocks) 
 879:kernel.S      ****         KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 880:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 881               	;;===================================SysTick reg init end===================================;; 
 882               	
 883               	
 884               	
 885               	
 886               	
 887               	;;===============================kernel task create starting================================;; 
 888               	;used registers          : R18, R19, R20, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)    
 889               	;arg registers           : R25:R24(FuncPtr), R22(TaskPriority)                                 
 890               	;return registers        : None                                                                
 891               	;unsafe access registers : R18, R19, R20, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)    
 892               	Kernel_Task_Create:                                       ;total 21.50uS @8MHz    (172 clocks) 
 893:kernel.S      ****         KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 894               			;set priority to KerSchPr+task_id                                                      
 895:kernel.S      **** 		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 896:kernel.S      **** 		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 897:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 898:kernel.S      **** 		ST    Z                  , R22                    ;save priority          (  2 clocks) 
 899               			;set task status to KerSchSts+task_id                                                  
 900:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 901:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 902:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 903:kernel.S      **** 		LDI   R18                , TASK_READY             ;set status as ready    (  1 clock ) 
 904:kernel.S      **** 		ST    Z                  , R18                    ;save status            (  2 clocks) 
 905               			;stack pointer for current task (KerStack + KER_STK_SZ*(task_id+1) - 1) ->stack top    
 906:kernel.S      **** 		LDS   R18                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 907:kernel.S      **** 		INC   R18                                         ;increment task_id      (  1 clock ) 
 908:kernel.S      **** 		LDI   R19                , KER_STK_SZ             ;load stack size        (  1 clock ) 
 909:kernel.S      **** 		MUL   R18                , R19                    ;multiply to get offset (  2 clocks) 
 910:kernel.S      **** 		MOV   ZL                 , R0                     ;load multiplied low    (  1 clocks) 
 911:kernel.S      **** 		MOV   ZH                 , R1                     ;load multiplied high   (  1 clocks) 
 912:kernel.S      **** 		SBIW  ZL                 , 0x01                   ;dec multiplied val-1   (  2 clocks) 
 913:kernel.S      **** 		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 914:kernel.S      **** 		LDI   R18                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
 915:kernel.S      **** 		LDI   R19                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
 916:kernel.S      **** 		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
 917:kernel.S      **** 		ADC   ZH                 , R19                    ;add high bytes+carry   (  1 clock ) 
 918:kernel.S      **** 		OUT   IOSPL              , ZL                     ;load SPL               (  1 clock ) 
 919:kernel.S      ****         OUT   IOSPH              , ZH                     ;load SPH               (  1 clock ) 
 920               			;function argument directly returns word address                                       
 921:kernel.S      **** 	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
 922:kernel.S      **** 		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 923               			;push context to stack of this task                                                    
 924:kernel.S      **** 		KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 925               			;read stack pointer of current task (necessary when restore)                           
 926:kernel.S      **** 		IN    R18                , IOSPL                  ;read SPL               (  1 clock ) 
 927:kernel.S      ****         IN    R19                , IOSPH                  ;read SPH               (  1 clock ) 
 928               			;calculate the address where current task's SP will be stored and store SP             
 929:kernel.S      **** 		LDS   R20                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 930:kernel.S      **** 		LSL   R20                                         ;left shift to multiply (  1 clock ) 
 931:kernel.S      **** 		LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 932:kernel.S      **** 		LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 933:kernel.S      **** 		ADD   ZL                 , R20                    ;add offset to array    (  1 clock ) 
 934:kernel.S      **** 		LDI   R20                , 0x00                   ;clear reg              (  1 clock ) 
 935:kernel.S      **** 		ADC   ZH                 , R20                    ;add carry if any       (  1 clock ) 
 936:kernel.S      **** 		ST    Z+                 , R18                    ;SPL at KerPSp+offset   (  2 clocks) 
 937:kernel.S      **** 		ST    Z                  , R19                    ;SPH at KerPSp+offset   (  2 clocks) 
 938               			;increment task_id                                                                     
 939:kernel.S      **** 		LDS   R18                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 940:kernel.S      **** 		INC   R18                                         ;increment task_id      (  1 clock ) 
 941:kernel.S      **** 		STS   KerBase+OFB_TID    , R18                    ;store task_id          (  2 clocks) 
 942               			;increment ntask                                                                       
 943:kernel.S      **** 		LDS   R18                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 944:kernel.S      **** 		INC   R18                                         ;increment ntask        (  1 clock ) 
 945:kernel.S      **** 		STS   KerBase+OFB_NTSK   , R18                    ;store ntask            (  2 clocks) 
 946:kernel.S      **** 		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 947:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 948               	;;==================================kernel task create end==================================;; 
 949               	
 950               	
 951               	
 952               	
 953               	
 954               	;;=================================kernel start tasks starting==============================;; 
 955               	;used registers          : R0~R31                                                              
 956               	;arg registers           : None                                                                
 957               	;return registers        : None                                                                
 958               	;unsafe access registers : R18, R19, R20, R24, R25, R30(ZL), R31(ZH)                           
 959               	Kernel_Start_Tasks:                                       ;total 25.63uS @8MHz    (205 clocks) 
 960:kernel.S      **** 		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 961:kernel.S      **** 		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
 962:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 963:kernel.S      **** 		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 964               			;config timer for system tick                                                          
 965:kernel.S      **** 		KER_TIMER_INIT                                    ;init timer, int enable ( 12 clocks) 
 966               			;execute return to jump to highest priority task                                       
 967:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 968               	;;==================================kernel start tasks end==================================;; 
 969               	
 970               	
 971               	
 972               	
 973               	
 974               	;;===================================kernel init starting===================================;; 
 975               	;used registers          : R1, R18, R19, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
 976               	;arg registers           : None                                                                
 977               	;return registers        : None                                                                
 978               	;unsafe access registers : R1, R18, R19, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
 979               	Kernel_Init:                                              ;total 39.75uS @8MHz    (318 clocks) 
 980:kernel.S      **** 		CLR   R1                                          ;gcc expects            (  1 clock ) 
 981               	        ;store stack top (for MSP) addr to KerSSZ+OFM_MSPI0:1                                  
 982:kernel.S      **** 		LDI   R18                , lo8(KerSSZ+OFM_MSPS)   ;load low address       (  1 clock ) 
 983:kernel.S      **** 		LDI   R19                , hi8(KerSSZ+OFM_MSPS)   ;load high address      (  1 clock ) 
 984:kernel.S      ****         STS   KerSSZ+OFM_MSPI+0  , R18                    ;set mspi to stack top  (  2 clocks) 
 985:kernel.S      **** 		STS   KerSSZ+OFM_MSPI+1  , R19                    ;set mspi to stack top  (  2 clocks) 
 986:kernel.S      **** 		KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 987               			;init timer for kernel                                                                 
 988:kernel.S      **** 		LDI   R24                , 0x03                   ;set prescaler          (  1 clock ) 
 989:kernel.S      **** 		LDI   R22                , 0x82                   ;set reload val         (  1 clock ) 
 990:kernel.S      **** 		CALL  Kernel_SysTick_Reg_Init                     ;init timer             ( 92 clocks) 
 991               			;create idle task at task_id 0, priority 0xFF (lowest)                                 
 992:kernel.S      **** 		LDI   R24                , lo8(Kernel_Task_Idle)  ;load func addr low     (  1 clock ) 
 993:kernel.S      **** 		LDI   R25                , hi8(Kernel_Task_Idle)  ;load func addr high    (  1 clock ) 
 994:kernel.S      **** 		LSR   R25                                         ;right shift to divide  (  1 clock ) 
 995:kernel.S      **** 		ROR   R24                                         ;rotate right th carry  (  1 clock ) 
 996:kernel.S      **** 		LDI   R22                , 0xFF                   ;set max val            (  1 clock ) 
 997:kernel.S      **** 		CALL  Kernel_Task_Create                          ;init idle task         (172 clocks) 
 998:kernel.S      **** 		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 999               			;execute return to jump to task0, pushed while task init                               
1000:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1001               	;;======================================kernel init end=====================================;; 
 1002               	
 1003               	
 1004               	
 1005               	
 1006               	
 1007               	;;=================================kernel idle task starting================================;; 
 1008               	;used registers          : None                                                                
 1009               	;arg registers           : None                                                                
 1010               	;return registers        : None                                                                
 1011               	;unsafe access registers : None                                                                
 1012               	Kernel_Task_Idle:                                         ;total 0.50uS @8MHz     (  4 clocks) 
 1013               	    _IDLE_LOOP:                                           ;forever loop                        
1014:kernel.S      **** 		RJMP  _IDLE_LOOP                                  ;return from subroutine (  4 clocks) 
 1015               	;;==================================kernel idle task end====================================;; 
 1016               	
 1017               	
 1018               	
 1019               	
 1020               	
 1021               	;;================================kernel task sleep starting================================;; 
 1022               	;used registers          : R0~R31                                                              
 1023               	;arg registers           : R25:R24(SleepTime)                                                  
 1024               	;return registers        : None                                                                
 1025               	;unsafe access registers : R18, R19, R20, R24, R25, R30(ZL), R31(ZH)                           
 1026               	Kernel_Task_Sleep:                                        ;total 37.25uS @8MHz    (298 clocks) 
 1027               	        ;save current context                                                                  
1028:kernel.S      ****         KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
1029:kernel.S      **** 		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 1030               			;create next task wakeup time (args R25:R24)                                           
1031:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
1032:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
1033:kernel.S      **** 		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
1034:kernel.S      **** 		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
1035:kernel.S      **** 		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 1036               			;update task scheduler status as blocked                                               
1037:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
1038:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
1039:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
1040:kernel.S      ****         LDI   R18                , TASK_BLOCKED           ;block task until cnt=0 (  1 clock ) 
1041:kernel.S      **** 		STD   Z+0                , R18                    ;save block flag        (  2 clocks) 
 1042               			;run scheduler, load next task sp, restore context                                     
1043:kernel.S      **** 		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
1044:kernel.S      **** 		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
1045:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
1046:kernel.S      **** 		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
1047:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1048               	;;=================================kernel task sleep end====================================;; 
 1049               	
 1050               	
 1051               	
 1052               	
 1053               	
 1054               	;;========================kernel task constant latency starting=============================;; 
 1055               	;used registers          : R18, R24, R25, R30(ZL), R31(ZH)                                     
 1056               	;arg registers           : R25:R24(SleepTime)                                                  
 1057               	;return registers        : None                                                                
 1058               	;unsafe access registers : R18, R24, R25, R30(ZL), R31(ZH)                                     
 1059               	Kernel_Task_Constant_Latency:                             ;total 3.50uS @8MHz     ( 28 clocks) 
 1060               			;create next task wakeup time (args R25:R24)                                           
1061:kernel.S      **** 		CLI                                               ;disable interrupt      (  1 clock ) 
1062:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
1063:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
1064:kernel.S      **** 		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
1065:kernel.S      **** 		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
1066:kernel.S      **** 		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 1067               			;update task scheduler status as constant latency                                      
1068:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
1069:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
1070:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
1071:kernel.S      ****         LDI   R18                , TASK_CONS_LAT          ;save as cons_lat       (  1 clock ) 
1072:kernel.S      **** 		STD   Z+0                , R18                    ;save block flag        (  2 clocks) 
1073:kernel.S      **** 		SEI                                               ;enable interrupt       (  1 clock ) 
1074:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1075               	;;=============================kernel task constant latency end=============================;; 
 1076               	
 1077               	
 1078               	
 1079               	
 1080               	
 1081               	;;=======================kernel task constant latency sleep starting========================;; 
 1082               	;used registers          : R0~R31                                                              
 1083               	;arg registers           : R25:R24(SleepTime)                                                  
 1084               	;return registers        : None                                                                
 1085               	;unsafe access registers : R18, R19, R20, R24, R25, R30(ZL), R31(ZH)                           
 1086               	Kernel_Task_Constant_Latency_Sleep:                       ;total 35.75uS @8MHz    (286 clocks) 
 1087               			;save current context                                                                  
1088:kernel.S      ****         KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
1089:kernel.S      **** 		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 1090               			;update task scheduler status as blocked                                               
1091:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
1092:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
1093:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
1094:kernel.S      ****         LDI   R18                , TASK_BLOCKED           ;blocked until cnt=0    (  1 clock ) 
1095:kernel.S      **** 		STD   Z+0                , R18                    ;save block flag        (  2 clocks) 
 1096               			;run scheduler, load next task sp, restore context                                     
1097:kernel.S      **** 		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
1098:kernel.S      **** 		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
1099:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
1100:kernel.S      **** 		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
1101:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1102               	;;=============================kernel task constant latency end=============================;; 
 1103               	
 1104               	
 1105               	
 1106               	
 1107               	
 1108               	;;===========================kernel task sleep time get starting============================;; 
 1109               	;used registers          : R18, R24, R25, R30(ZL), R31(ZH)                                     
 1110               	;arg registers           : R24(TaskID)                                                         
 1111               	;return registers        : R25:R24(SleepTime)                                                  
 1112               	;unsafe access registers : R18, R24, R25, R30(ZL), R31(ZH)                                     
 1113               	Kernel_Task_Sleep_Time_Get:                               ;total 1.88uS @8MHz     ( 15 clocks) 
1114:kernel.S      **** 		MOV   R18                , R24                    ;copy                   (  1 clock ) 
1115:kernel.S      **** 		LSL   R18                                         ;x2                     (  1 clock ) 
1116:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
1117:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
1118:kernel.S      **** 		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
1119:kernel.S      **** 		LDI   R18                , 0x00                   ;load 0                 (  1 clock ) 
1120:kernel.S      **** 		ADC   ZH                 , R18                    ;add high byte+carry    (  1 clock ) 
1121:kernel.S      **** 		LDD   R24                , Z+0                    ;load sleep time        (  2 clocks) 
1122:kernel.S      **** 		LDD   R25                , Z+1                    ;load sleep time        (  2 clocks) 
1123:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1124               	;;==============================kernel task sleep time get end==============================;; 
 1125               	
 1126               	
 1127               	
 1128               	
 1129               	
 1130               	;;==============================kernel task status get starting=============================;; 
 1131               	;used registers          : R18, R24, R30(ZL), R31(ZH)                                          
 1132               	;arg registers           : R24(TaskID)                                                         
 1133               	;return registers        : R24(TaskSts)                                                        
 1134               	;unsafe access registers : R18, R24, R30(ZL), R31(ZH)                                          
 1135               	Kernel_Task_Status_Get:                                   ;total 1.50uS @8MHz     ( 12 clocks) 
1136:kernel.S      **** 		MOV   R18                , R24                    ;copy                   (  1 clock ) 
1137:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
1138:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
1139:kernel.S      **** 		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
1140:kernel.S      **** 		LDI   R18                , 0x00                   ;load 0                 (  1 clock ) 
1141:kernel.S      **** 		ADC   ZH                 , R18                    ;add high byte+carry    (  1 clock ) 
1142:kernel.S      **** 		LD    R24                , Z                      ;load task status       (  2 clocks) 
1143:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1144               	;;================================kernel task status get end================================;; 
 1145               	
 1146               	
 1147               	
 1148               	
 1149               	
 1150               	;;================================kernel ntask get starting=================================;; 
 1151               	;used registers          : R24                                                                 
 1152               	;arg registers           : None                                                                
 1153               	;return registers        : R24(NTask)                                                          
 1154               	;unsafe access registers : R24                                                                 
 1155               	Kernel_NTask_Get:                                         ;total 0.75uS @8MHz     (  6 clocks) 
1156:kernel.S      **** 		LDS   R24                 , KerBase+OFB_NTSK      ;load ntask             (  2 clock ) 
1157:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1158               	;;===================================kernel ntask get end===================================;; 
 1159               	
 1160               	
 1161               	
 1162               	
 1163               	
 1164               	;;=============================kernel task priority get starting============================;; 
 1165               	;used registers          : R18, R24, R30(ZL), R31(ZH)                                          
 1166               	;arg registers           : R24(TaskID)                                                         
 1167               	;return registers        : R24(TaskPriority)                                                   
 1168               	;unsafe access registers : R18, R24, R30(ZL), R31(ZH)                                          
 1169               	Kernel_Task_Prio_Get:                                     ;total 1.50uS @8MHz     ( 12 clocks) 
 1170               			;get priority of the task id, arg (task_id->R24), return R24                           
1171:kernel.S      **** 		MOV   R18                , R24                    ;copy task_id           (  1 clock ) 
1172:kernel.S      **** 		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
1173:kernel.S      **** 		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
1174:kernel.S      **** 		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
1175:kernel.S      **** 		LDI   R18                , 0x00                   ;clear reg              (  1 clock ) 
1176:kernel.S      **** 		ADC   ZH                 , R18                    ;add high byte+carry    (  1 clock ) 
1177:kernel.S      **** 		LD    R24                , Z                      ;load priority          (  2 clocks) 
1178:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1179               	;;================================kernel task priority get end==============================;; 
 1180               	
 1181               	
 1182               	
 1183               	
 1184               	
 1185               	;;============================kernel lowest priority get starting===========================;; 
 1186               	;used registers          : R24                                                                 
 1187               	;arg registers           : None                                                                
 1188               	;return registers        : R24(LowestPriorityVal)                                              
 1189               	;unsafe access registers : R24                                                                 
 1190               	Kernel_Lowest_Prio_Get:                                   ;total 0.75uS @8MHz     (  6 clocks) 
1191:kernel.S      **** 		LDS   R24                , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
1192:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1193               	;;===============================kernel lowest priority get end=============================;; 
 1194               	
 1195               	
 1196               	
 1197               	
 1198               	
 1199               	;;===========================kernel high priority task id starting==========================;; 
 1200               	;used registers          : R24                                                                 
 1201               	;arg registers           : None                                                                
 1202               	;return registers        : R24(HighstPriorityTaskID)->UserTaskID (Excluding Idle Task)         
 1203               	;unsafe access registers : R24                                                                 
 1204               	Kernel_High_Prio_Task_ID_Get:                             ;total 0.88uS @8MHz     (  7 clocks) 
1205:kernel.S      **** 		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
1206:kernel.S      **** 		DEC   R24                                         ;decrement by 1         (  1 clock ) 
1207:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1208               	;;==============================kernel high priority task id end============================;; 
 1209               	
 1210               	
 1211               	
 1212               	
 1213               	
 1214               	;;=========================kernel abs high priority task id starting========================;; 
 1215               	;used registers          : R24                                                                 
 1216               	;arg registers           : None                                                                
 1217               	;return registers        : R24(HighstPriorityTaskID)->AbsoluteTaskID (Including Idle Task)     
 1218               	;unsafe access registers : R24                                                                 
 1219               	Kernel_Abs_High_Prio_Task_ID_Get:                         ;total 0.75uS @8MHz     (  6 clocks) 
1220:kernel.S      **** 		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
1221:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1222               	;;============================kernel abs high priority task id end==========================;; 
 1223               	
 1224               	
 1225               	
 1226               	
 1227               	
 1228               	;;================================kernel cpu usage get starting=============================;; 
 1229               	;used registers          : R24                                                                 
 1230               	;arg registers           : None                                                                
 1231               	;return registers        : R24(CurrentCpuUsage)->In percentage                                 
 1232               	;unsafe access registers : R24                                                                 
 1233               	Kernel_CPU_Usage_Get:                                     ;total 0.75uS @8MHz     (  6 clocks) 
 1234               			;get cpu usage, return R24                                                             
1235:kernel.S      **** 		LDS   R24                , KerBase+OFB_USAGE      ;load cpu usage         (  2 clocks) 
1236:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1237               	;;==================================kernel cpu usage get end================================;; 
DEFINED SYMBOLS
            kernel.S:19     *ABS*:000003e8 KER_TR
            kernel.S:20     *ABS*:00000003 KER_PRS
            kernel.S:21     *ABS*:00000082 KER_RLD
            kernel.S:22     *ABS*:00000080 KER_STK_SZ
            kernel.S:23     *ABS*:0000000a KER_MX_NTSK
            kernel.S:31     *ABS*:00000000 OFB_TICK0
            kernel.S:32     *ABS*:00000001 OFB_TICK1
            kernel.S:33     *ABS*:00000002 OFB_TICK2
            kernel.S:34     *ABS*:00000003 OFB_TICK3
            kernel.S:35     *ABS*:00000004 OFB_TICK4
            kernel.S:36     *ABS*:00000005 OFB_PRS
            kernel.S:37     *ABS*:00000006 OFB_RLD
            kernel.S:38     *ABS*:00000007 OFB_TID
            kernel.S:39     *ABS*:00000008 OFB_NTSK
            kernel.S:40     *ABS*:00000009 OFB_LPR
            kernel.S:41     *ABS*:0000000a OFB_PTID
            kernel.S:42     *ABS*:0000000b OFB_UTC
            kernel.S:43     *ABS*:0000000c OFB_UATC
            kernel.S:44     *ABS*:0000000d OFB_USAGE
            kernel.S:45     *ABS*:00000000 OFM_MSPI
            kernel.S:46     *ABS*:00000002 OFM_MSPS
            kernel.S:54     *ABS*:00000000 TASK_BLOCKED
            kernel.S:55     *ABS*:00000001 TASK_READY
            kernel.S:56     *ABS*:00000002 TASK_EXECUTING
            kernel.S:57     *ABS*:00000003 TASK_SUSPENDED
            kernel.S:58     *ABS*:00000004 TASK_CONS_LAT
            kernel.S:59     *ABS*:00000000 SCH_MODE_HANDLER
            kernel.S:60     *ABS*:00000001 SCH_MODE_THREAD
            kernel.S:68     *ABS*:0000005f SRSREG
            kernel.S:69     *ABS*:0000005e SRSPH
            kernel.S:70     *ABS*:0000005d SRSPL
            kernel.S:71     *ABS*:0000006e SRTIMSK0
            kernel.S:72     *ABS*:00000048 SROCR0B
            kernel.S:73     *ABS*:00000047 SROCR0A
            kernel.S:74     *ABS*:00000046 SRTCNT0
            kernel.S:75     *ABS*:00000045 SRTCCR0B
            kernel.S:76     *ABS*:00000044 SRTCCR0A
            kernel.S:77     *ABS*:00000035 SRTIFR0
            kernel.S:78     *ABS*:00000028 IOOCR0B
            kernel.S:79     *ABS*:00000027 IOOCR0A
            kernel.S:80     *ABS*:00000026 IOTCNT0
            kernel.S:81     *ABS*:00000025 IOTCCR0B
            kernel.S:82     *ABS*:00000024 IOTCCR0A
            kernel.S:83     *ABS*:00000015 IOTIFR0
            kernel.S:84     *ABS*:0000003f IOSREG
            kernel.S:85     *ABS*:0000003e IOSPH
            kernel.S:86     *ABS*:0000003d IOSPL
            kernel.S:97     .bss:00000000 KerBase
            kernel.S:100    .bss:0000000e KerPSP
            kernel.S:103    .bss:00000022 KerSSZ
            kernel.S:106    .bss:00000030 KerSchSts
            kernel.S:109    .bss:0000003a KerSchPr
            kernel.S:112    .bss:00000044 KerSchSlp
            kernel.S:115    .bss:00000058 KerStack
            kernel.S:822    .text:00000000 __vector_16
            kernel.S:846    .text:000001dc Kernel_SysTick_Reg_Init
            kernel.S:979    .text:00000492 Kernel_Init
            kernel.S:892    .text:0000027a Kernel_Task_Create
            kernel.S:959    .text:0000036a Kernel_Start_Tasks
            kernel.S:1012   .text:000004f0 Kernel_Task_Idle
            kernel.S:1026   .text:000004f2 Kernel_Task_Sleep
            kernel.S:1059   .text:00000688 Kernel_Task_Constant_Latency
            kernel.S:1086   .text:000006b4 Kernel_Task_Constant_Latency_Sleep
            kernel.S:1113   .text:00000836 Kernel_Task_Sleep_Time_Get
            kernel.S:1135   .text:0000084a Kernel_Task_Status_Get
            kernel.S:1155   .text:0000085a Kernel_NTask_Get
            kernel.S:1169   .text:00000860 Kernel_Task_Prio_Get
            kernel.S:1190   .text:00000870 Kernel_Lowest_Prio_Get
            kernel.S:1204   .text:00000876 Kernel_High_Prio_Task_ID_Get
            kernel.S:1219   .text:0000087e Kernel_Abs_High_Prio_Task_ID_Get
            kernel.S:1233   .text:00000884 Kernel_CPU_Usage_Get
            kernel.S:829    .text:000000ac _KER_SCH_LOOP8
            kernel.S:829    .text:000000e2 _VAL_NULL9
            kernel.S:829    .text:000000f6 _VAL_NOT_NULL9
            kernel.S:829    .text:00000106 _EXIT_SLP_TIME9
            kernel.S:829    .text:00000110 _KER_CALC_PRIO8
            kernel.S:829    .text:00000134 _KER_SCH_NEXT8
            kernel.S:829    .text:00000144 _KER_SCH_EXIT8
            kernel.S:830    .text:0000015e _KER_USG_TICK14
            kernel.S:830    .text:00000178 _KER_USG_UTC_SV14
            kernel.S:961    .text:0000037a _KER_SCH_LOOP31
            kernel.S:961    .text:000003b0 _VAL_NULL32
            kernel.S:961    .text:000003c4 _VAL_NOT_NULL32
            kernel.S:961    .text:000003d4 _EXIT_SLP_TIME32
            kernel.S:961    .text:000003de _KER_CALC_PRIO31
            kernel.S:961    .text:00000402 _KER_SCH_NEXT31
            kernel.S:961    .text:00000412 _KER_SCH_EXIT31
            kernel.S:1013   .text:000004f0 _IDLE_LOOP
            kernel.S:1044   .text:00000588 _KER_SCH_LOOP52
            kernel.S:1044   .text:000005be _VAL_NULL53
            kernel.S:1044   .text:000005d2 _VAL_NOT_NULL53
            kernel.S:1044   .text:000005e2 _EXIT_SLP_TIME53
            kernel.S:1044   .text:000005ec _KER_CALC_PRIO52
            kernel.S:1044   .text:00000610 _KER_SCH_NEXT52
            kernel.S:1044   .text:00000620 _KER_SCH_EXIT52
            kernel.S:1098   .text:00000736 _KER_SCH_LOOP71
            kernel.S:1098   .text:0000076c _VAL_NULL72
            kernel.S:1098   .text:00000780 _VAL_NOT_NULL72
            kernel.S:1098   .text:00000790 _EXIT_SLP_TIME72
            kernel.S:1098   .text:0000079a _KER_CALC_PRIO71
            kernel.S:1098   .text:000007be _KER_SCH_NEXT71
            kernel.S:1098   .text:000007ce _KER_SCH_EXIT71

UNDEFINED SYMBOLS
Kernel_SysTick_Val_Get
Kernel_SysTick_Val_Safely_Get
Kernel_Interrupt_Sts_Get
