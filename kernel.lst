   1               	# 1 "kernel.S"
   1               	
   0               	
   0               	
   2               	
   3               	 ; File          : kernel.S
   4               	 ; Author        : MD. Faridul Islam (faridmdislam@gmail.com)
   5               	 ; Description   : AVR kernel for bare-metal RTOS
   6               	 ; Created       : Jul 27, 2025, 9:30 PM
   7               	 ; Last Modified : Sep 02, 2025, 8:42 PM
   8               	
   9               	
  10               	
  11               	
  12               	#include <avr/io.h>
   1               	/* Copyright (c) 2002,2003,2005,2006,2007 Marek Michalkiewicz, Joerg Wunsch
   2               	   Copyright (c) 2007 Eric B. Weddington
   3               	   All rights reserved.
   4               	
   5               	   Redistribution and use in source and binary forms, with or without
   6               	   modification, are permitted provided that the following conditions are met:
   7               	
   8               	   * Redistributions of source code must retain the above copyright
   9               	     notice, this list of conditions and the following disclaimer.
  10               	
  11               	   * Redistributions in binary form must reproduce the above copyright
  12               	     notice, this list of conditions and the following disclaimer in
  13               	     the documentation and/or other materials provided with the
  14               	     distribution.
  15               	
  16               	   * Neither the name of the copyright holders nor the names of
  17               	     contributors may be used to endorse or promote products derived
  18               	     from this software without specific prior written permission.
  19               	
  20               	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21               	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22               	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23               	  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24               	  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25               	  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26               	  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27               	  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28               	  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29               	  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30               	  POSSIBILITY OF SUCH DAMAGE. */
  31               	
  32               	/* $Id: io.h,v 1.52.2.28 2009/12/20 17:02:53 arcanum Exp $ */
  33               	
  34               	/** \file */
  35               	/** \defgroup avr_io <avr/io.h>: AVR device-specific IO definitions
  36               	    \code #include <avr/io.h> \endcode
  37               	
  38               	    This header file includes the apropriate IO definitions for the
  39               	    device that has been specified by the <tt>-mmcu=</tt> compiler
  40               	    command-line switch.  This is done by diverting to the appropriate
  41               	    file <tt>&lt;avr/io</tt><em>XXXX</em><tt>.h&gt;</tt> which should
  42               	    never be included directly.  Some register names common to all
  43               	    AVR devices are defined directly within <tt>&lt;avr/common.h&gt;</tt>,
  44               	    which is included in <tt>&lt;avr/io.h&gt;</tt>,
  45               	    but most of the details come from the respective include file.
  46               	
  47               	    Note that this file always includes the following files:
  48               	    \code 
  49               	    #include <avr/sfr_defs.h>
  50               	    #include <avr/portpins.h>
  51               	    #include <avr/common.h>
  52               	    #include <avr/version.h>
  53               	    \endcode
  54               	    See \ref avr_sfr for more details about that header file.
  55               	
  56               	    Included are definitions of the IO register set and their
  57               	    respective bit values as specified in the Atmel documentation.
  58               	    Note that inconsistencies in naming conventions,
  59               	    so even identical functions sometimes get different names on
  60               	    different devices.
  61               	
  62               	    Also included are the specific names useable for interrupt
  63               	    function definitions as documented
  64               	    \ref avr_signames "here".
  65               	
  66               	    Finally, the following macros are defined:
  67               	
  68               	    - \b RAMEND
  69               	    <br>
  70               	    The last on-chip RAM address.
  71               	    <br>
  72               	    - \b XRAMEND
  73               	    <br>
  74               	    The last possible RAM location that is addressable. This is equal to 
  75               	    RAMEND for devices that do not allow for external RAM. For devices 
  76               	    that allow external RAM, this will be larger than RAMEND.
  77               	    <br>
  78               	    - \b E2END
  79               	    <br>
  80               	    The last EEPROM address.
  81               	    <br>
  82               	    - \b FLASHEND
  83               	    <br>
  84               	    The last byte address in the Flash program space.
  85               	    <br>
  86               	    - \b SPM_PAGESIZE
  87               	    <br>
  88               	    For devices with bootloader support, the flash pagesize
  89               	    (in bytes) to be used for the \c SPM instruction. 
  90               	    - \b E2PAGESIZE
  91               	    <br>
  92               	    The size of the EEPROM page.
  93               	    
  94               	*/
  95               	
  96               	#ifndef _AVR_IO_H_
  97               	#define _AVR_IO_H_
  98               	
  99               	#include <avr/sfr_defs.h>
   1               	/* Copyright (c) 2002, Marek Michalkiewicz <marekm@amelek.gda.pl>
 100               	
 101               	#if defined (__AVR_AT94K__)
 102               	#  include <avr/ioat94k.h>
 103               	#elif defined (__AVR_AT43USB320__)
 104               	#  include <avr/io43u32x.h>
 105               	#elif defined (__AVR_AT43USB355__)
 106               	#  include <avr/io43u35x.h>
 107               	#elif defined (__AVR_AT76C711__)
 108               	#  include <avr/io76c711.h>
 109               	#elif defined (__AVR_AT86RF401__)
 110               	#  include <avr/io86r401.h>
 111               	#elif defined (__AVR_AT90PWM1__)
 112               	#  include <avr/io90pwm1.h>
 113               	#elif defined (__AVR_AT90PWM2__)
 114               	#  include <avr/io90pwmx.h>
 115               	#elif defined (__AVR_AT90PWM2B__)
 116               	#  include <avr/io90pwm2b.h>
 117               	#elif defined (__AVR_AT90PWM3__)
 118               	#  include <avr/io90pwmx.h>
 119               	#elif defined (__AVR_AT90PWM3B__)
 120               	#  include <avr/io90pwm3b.h>
 121               	#elif defined (__AVR_AT90PWM216__)
 122               	#  include <avr/io90pwm216.h>
 123               	#elif defined (__AVR_AT90PWM316__)
 124               	#  include <avr/io90pwm316.h>
 125               	#elif defined (__AVR_AT90PWM81__)
 126               	#  include <avr/io90pwm81.h>
 127               	#elif defined (__AVR_ATmega8U2__)
 128               	#  include <avr/iom8u2.h>
 129               	#elif defined (__AVR_ATmega16M1__)
 130               	#  include <avr/iom16m1.h>
 131               	#elif defined (__AVR_ATmega16U2__)
 132               	#  include <avr/iom16u2.h>
 133               	#elif defined (__AVR_ATmega16U4__)
 134               	#  include <avr/iom16u4.h>
 135               	#elif defined (__AVR_ATmega32C1__)
 136               	#  include <avr/iom32c1.h>
 137               	#elif defined (__AVR_ATmega32M1__)
 138               	#  include <avr/iom32m1.h>
 139               	#elif defined (__AVR_ATmega32U2__)
 140               	#  include <avr/iom32u2.h>
 141               	#elif defined (__AVR_ATmega32U4__)
 142               	#  include <avr/iom32u4.h>
 143               	#elif defined (__AVR_ATmega32U6__)
 144               	#  include <avr/iom32u6.h>
 145               	#elif defined (__AVR_ATmega64C1__)
 146               	#  include <avr/iom64c1.h>
 147               	#elif defined (__AVR_ATmega64M1__)
 148               	#  include <avr/iom64m1.h>
 149               	#elif defined (__AVR_ATmega128__)
 150               	#  include <avr/iom128.h>
 151               	#elif defined (__AVR_ATmega1280__)
 152               	#  include <avr/iom1280.h>
 153               	#elif defined (__AVR_ATmega1281__)
 154               	#  include <avr/iom1281.h>
 155               	#elif defined (__AVR_ATmega1284P__)
 156               	#  include <avr/iom1284p.h>
 157               	#elif defined (__AVR_ATmega128RFA1__)
 158               	#  include <avr/iom128rfa1.h>
 159               	#elif defined (__AVR_ATmega2560__)
 160               	#  include <avr/iom2560.h>
 161               	#elif defined (__AVR_ATmega2561__)
 162               	#  include <avr/iom2561.h>
 163               	#elif defined (__AVR_AT90CAN32__)
 164               	#  include <avr/iocan32.h>
 165               	#elif defined (__AVR_AT90CAN64__)
 166               	#  include <avr/iocan64.h>
 167               	#elif defined (__AVR_AT90CAN128__)
 168               	#  include <avr/iocan128.h>
 169               	#elif defined (__AVR_AT90USB82__)
 170               	#  include <avr/iousb82.h>
 171               	#elif defined (__AVR_AT90USB162__)
 172               	#  include <avr/iousb162.h>
 173               	#elif defined (__AVR_AT90USB646__)
 174               	#  include <avr/iousb646.h>
 175               	#elif defined (__AVR_AT90USB647__)
 176               	#  include <avr/iousb647.h>
 177               	#elif defined (__AVR_AT90USB1286__)
 178               	#  include <avr/iousb1286.h>
 179               	#elif defined (__AVR_AT90USB1287__)
 180               	#  include <avr/iousb1287.h>
 181               	#elif defined (__AVR_ATmega64__)
 182               	#  include <avr/iom64.h>
 183               	#elif defined (__AVR_ATmega640__)
 184               	#  include <avr/iom640.h>
 185               	#elif defined (__AVR_ATmega644__) || defined (__AVR_ATmega644A__)
 186               	#  include <avr/iom644.h>
 187               	#elif defined (__AVR_ATmega644P__)
 188               	#  include <avr/iom644p.h>
 189               	#elif defined (__AVR_ATmega644PA__)
 190               	#  include <avr/iom644pa.h>
 191               	#elif defined (__AVR_ATmega645__) || defined (__AVR_ATmega645A__) || defined (__AVR_ATmega645P__)
 192               	#  include <avr/iom645.h>
 193               	#elif defined (__AVR_ATmega6450__) || defined (__AVR_ATmega6450A__) || defined (__AVR_ATmega6450P__
 194               	#  include <avr/iom6450.h>
 195               	#elif defined (__AVR_ATmega649__) || defined (__AVR_ATmega649A__)
 196               	#  include <avr/iom649.h>
 197               	#elif defined (__AVR_ATmega6490__) || defined (__AVR_ATmega6490A__) || defined (__AVR_ATmega6490P__
 198               	#  include <avr/iom6490.h>
 199               	#elif defined (__AVR_ATmega649P__)
 200               	#  include <avr/iom649p.h>
 201               	#elif defined (__AVR_ATmega64HVE__)
 202               	#  include <avr/iom64hve.h>
 203               	#elif defined (__AVR_ATmega103__)
 204               	#  include <avr/iom103.h>
 205               	#elif defined (__AVR_ATmega32__)
 206               	#  include <avr/iom32.h>
 207               	#elif defined (__AVR_ATmega323__)
 208               	#  include <avr/iom323.h>
 209               	#elif defined (__AVR_ATmega324P__) || defined (__AVR_ATmega324A__)
 210               	#  include <avr/iom324.h>
 211               	#elif defined (__AVR_ATmega324PA__)
 212               	#  include <avr/iom324pa.h>
 213               	#elif defined (__AVR_ATmega325__)
 214               	#  include <avr/iom325.h>
 215               	#elif defined (__AVR_ATmega325P__)
 216               	#  include <avr/iom325.h>
 217               	#elif defined (__AVR_ATmega3250__)
 218               	#  include <avr/iom3250.h>
 219               	#elif defined (__AVR_ATmega3250P__)
 220               	#  include <avr/iom3250.h>
 221               	#elif defined (__AVR_ATmega328P__) || defined (__AVR_ATmega328__)
 222               	#  include <avr/iom328p.h>
   1               	/* Copyright (c) 2007 Atmel Corporation
 223               	#elif defined (__AVR_ATmega329__)
 224               	#  include <avr/iom329.h>
 225               	#elif defined (__AVR_ATmega329P__) || defined (__AVR_ATmega329PA__)
 226               	#  include <avr/iom329.h>
 227               	#elif defined (__AVR_ATmega3290__)
 228               	#  include <avr/iom3290.h>
 229               	#elif defined (__AVR_ATmega3290P__)
 230               	#  include <avr/iom3290.h>
 231               	#elif defined (__AVR_ATmega32HVB__)
 232               	#  include <avr/iom32hvb.h>
 233               	#elif defined (__AVR_ATmega406__)
 234               	#  include <avr/iom406.h>
 235               	#elif defined (__AVR_ATmega16__)
 236               	#  include <avr/iom16.h>
 237               	#elif defined (__AVR_ATmega16A__)
 238               	#  include <avr/iom16a.h>
 239               	#elif defined (__AVR_ATmega161__)
 240               	#  include <avr/iom161.h>
 241               	#elif defined (__AVR_ATmega162__)
 242               	#  include <avr/iom162.h>
 243               	#elif defined (__AVR_ATmega163__)
 244               	#  include <avr/iom163.h>
 245               	#elif defined (__AVR_ATmega164P__) || defined (__AVR_ATmega164A__)
 246               	#  include <avr/iom164.h>
 247               	#elif defined (__AVR_ATmega165__) || defined (__AVR_ATmega165A__)
 248               	#  include <avr/iom165.h>
 249               	#elif defined (__AVR_ATmega165P__)
 250               	#  include <avr/iom165p.h>
 251               	#elif defined (__AVR_ATmega168__) || defined (__AVR_ATmega168A__)
 252               	#  include <avr/iom168.h>
 253               	#elif defined (__AVR_ATmega168P__)
 254               	#  include <avr/iom168p.h>
 255               	#elif defined (__AVR_ATmega169__) || defined (__AVR_ATmega169A__)
 256               	#  include <avr/iom169.h>
 257               	#elif defined (__AVR_ATmega169P__)
 258               	#  include <avr/iom169p.h>
 259               	#elif defined (__AVR_ATmega169PA__)
 260               	#  include <avr/iom169pa.h>
 261               	#elif defined (__AVR_ATmega8HVA__)
 262               	#  include <avr/iom8hva.h>
 263               	#elif defined (__AVR_ATmega16HVA__)
 264               	#  include <avr/iom16hva.h>
 265               	#elif defined (__AVR_ATmega16HVA2__)
 266               	#  include <avr/iom16hva2.h>
 267               	#elif defined (__AVR_ATmega16HVB__)
 268               	#  include <avr/iom16hvb.h>
 269               	#elif defined (__AVR_ATmega8__)
 270               	#  include <avr/iom8.h>
 271               	#elif defined (__AVR_ATmega48__) || defined (__AVR_ATmega48A__)
 272               	#  include <avr/iom48.h>
 273               	#elif defined (__AVR_ATmega48P__)
 274               	#  include <avr/iom48p.h>
 275               	#elif defined (__AVR_ATmega88__) || defined (__AVR_ATmega88A__)
 276               	#  include <avr/iom88.h>
 277               	#elif defined (__AVR_ATmega88P__)
 278               	#  include <avr/iom88p.h>
 279               	#elif defined (__AVR_ATmega88PA__)
 280               	#  include <avr/iom88pa.h>
 281               	#elif defined (__AVR_ATmega8515__)
 282               	#  include <avr/iom8515.h>
 283               	#elif defined (__AVR_ATmega8535__)
 284               	#  include <avr/iom8535.h>
 285               	#elif defined (__AVR_AT90S8535__)
 286               	#  include <avr/io8535.h>
 287               	#elif defined (__AVR_AT90C8534__)
 288               	#  include <avr/io8534.h>
 289               	#elif defined (__AVR_AT90S8515__)
 290               	#  include <avr/io8515.h>
 291               	#elif defined (__AVR_AT90S4434__)
 292               	#  include <avr/io4434.h>
 293               	#elif defined (__AVR_AT90S4433__)
 294               	#  include <avr/io4433.h>
 295               	#elif defined (__AVR_AT90S4414__)
 296               	#  include <avr/io4414.h>
 297               	#elif defined (__AVR_ATtiny22__)
 298               	#  include <avr/iotn22.h>
 299               	#elif defined (__AVR_ATtiny26__)
 300               	#  include <avr/iotn26.h>
 301               	#elif defined (__AVR_AT90S2343__)
 302               	#  include <avr/io2343.h>
 303               	#elif defined (__AVR_AT90S2333__)
 304               	#  include <avr/io2333.h>
 305               	#elif defined (__AVR_AT90S2323__)
 306               	#  include <avr/io2323.h>
 307               	#elif defined (__AVR_AT90S2313__)
 308               	#  include <avr/io2313.h>
 309               	#elif defined (__AVR_ATtiny2313__)
 310               	#  include <avr/iotn2313.h>
 311               	#elif defined (__AVR_ATtiny2313A__)
 312               	#  include <avr/iotn2313a.h>
 313               	#elif defined (__AVR_ATtiny13__)
 314               	#  include <avr/iotn13.h>
 315               	#elif defined (__AVR_ATtiny13A__)
 316               	#  include <avr/iotn13a.h>
 317               	#elif defined (__AVR_ATtiny25__)
 318               	#  include <avr/iotn25.h>
 319               	#elif defined (__AVR_ATtiny4313__)
 320               	#  include <avr/iotn4313.h>
 321               	#elif defined (__AVR_ATtiny45__)
 322               	#  include <avr/iotn45.h>
 323               	#elif defined (__AVR_ATtiny85__)
 324               	#  include <avr/iotn85.h>
 325               	#elif defined (__AVR_ATtiny24__)
 326               	#  include <avr/iotn24.h>
 327               	#elif defined (__AVR_ATtiny24A__)
 328               	#  include <avr/iotn24a.h>
 329               	#elif defined (__AVR_ATtiny44__)
 330               	#  include <avr/iotn44.h>
 331               	#elif defined (__AVR_ATtiny44A__)
 332               	#  include <avr/iotn44a.h>
 333               	#elif defined (__AVR_ATtiny84__)
 334               	#  include <avr/iotn84.h>
 335               	#elif defined (__AVR_ATtiny261__)
 336               	#  include <avr/iotn261.h>
 337               	#elif defined (__AVR_ATtiny261A__)
 338               	#  include <avr/iotn261a.h>
 339               	#elif defined (__AVR_ATtiny461__)
 340               	#  include <avr/iotn461.h>
 341               	#elif defined (__AVR_ATtiny461A__)
 342               	#  include <avr/iotn461a.h>
 343               	#elif defined (__AVR_ATtiny861__)
 344               	#  include <avr/iotn861.h>
 345               	#elif defined (__AVR_ATtiny861A__)
 346               	#  include <avr/iotn861a.h>
 347               	#elif defined (__AVR_ATtiny43U__)
 348               	#  include <avr/iotn43u.h>
 349               	#elif defined (__AVR_ATtiny48__)
 350               	#  include <avr/iotn48.h>
 351               	#elif defined (__AVR_ATtiny88__)
 352               	#  include <avr/iotn88.h>
 353               	#elif defined (__AVR_ATtiny87__)
 354               	#  include <avr/iotn87.h>
 355               	#elif defined (__AVR_ATtiny167__)
 356               	#  include <avr/iotn167.h>
 357               	#elif defined (__AVR_AT90SCR100__)
 358               	#  include <avr/io90scr100.h>
 359               	#elif defined (__AVR_ATxmega16A4__)
 360               	#  include <avr/iox16a4.h>
 361               	#elif defined (__AVR_ATxmega16D4__)
 362               	#  include <avr/iox16d4.h>
 363               	#elif defined (__AVR_ATxmega32A4__)
 364               	#  include <avr/iox32a4.h>
 365               	#elif defined (__AVR_ATxmega32D4__)
 366               	#  include <avr/iox32d4.h>
 367               	#elif defined (__AVR_ATxmega64A1__)
 368               	#  include <avr/iox64a1.h>
 369               	#elif defined (__AVR_ATxmega64A3__)
 370               	#  include <avr/iox64a3.h>
 371               	#elif defined (__AVR_ATxmega64D3__)
 372               	#  include <avr/iox64d3.h>
 373               	#elif defined (__AVR_ATxmega128A1__)
 374               	#  include <avr/iox128a1.h>
 375               	#elif defined (__AVR_ATxmega128A3__)
 376               	#  include <avr/iox128a3.h>
 377               	#elif defined (__AVR_ATxmega128D3__)
 378               	#  include <avr/iox128d3.h>
 379               	#elif defined (__AVR_ATxmega192A3__)
 380               	#  include <avr/iox192a3.h>
 381               	#elif defined (__AVR_ATxmega192D3__)
 382               	#  include <avr/iox192d3.h>
 383               	#elif defined (__AVR_ATxmega256A3__)
 384               	#  include <avr/iox256a3.h>
 385               	#elif defined (__AVR_ATxmega256A3B__)
 386               	#  include <avr/iox256a3b.h>
 387               	#elif defined (__AVR_ATxmega256D3__)
 388               	#  include <avr/iox256d3.h>
 389               	#elif defined (__AVR_ATA6289__)
 390               	#  include <avr/ioa6289.h>
 391               	/* avr1: the following only supported for assembler programs */
 392               	#elif defined (__AVR_ATtiny28__)
 393               	#  include <avr/iotn28.h>
 394               	#elif defined (__AVR_AT90S1200__)
 395               	#  include <avr/io1200.h>
 396               	#elif defined (__AVR_ATtiny15__)
 397               	#  include <avr/iotn15.h>
 398               	#elif defined (__AVR_ATtiny12__)
 399               	#  include <avr/iotn12.h>
 400               	#elif defined (__AVR_ATtiny11__)
 401               	#  include <avr/iotn11.h>
 402               	#else
 403               	#  if !defined(__COMPILING_AVR_LIBC__)
 404               	#    warning "device type not defined"
 405               	#  endif
 406               	#endif
 407               	
 408               	#include <avr/portpins.h>
   1               	/* Copyright (c) 2003  Theodore A. Roth
 409               	
 410               	#include <avr/common.h>
   1               	/* Copyright (c) 2007 Eric B. Weddington
 411               	
 412               	#include <avr/version.h>
   1               	/* Copyright (c) 2005, Joerg Wunsch                               -*- c -*-
 413               	
 414               	/* Include fuse.h after individual IO header files. */
 415               	#include <avr/fuse.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 416               	
 417               	/* Include lock.h after individual IO header files. */
 418               	#include <avr/lock.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 419               	
  13               	#include <avr/interrupt.h>
   1               	/* Copyright (c) 2002,2005,2007 Marek Michalkiewicz
  14               	#include "kernel.h"
   1               	
  15               	#include "debug.h"
   1               	
  16               	
  17               	
  18               	;;============================define user address or macro starting=========================;; 
  19               	.equ     KER_TR ,         1000                            ;TickRate in Hz, not calculated      
  20               	.equ     KER_PRS,         0x03                            ;For prescaler 64, manually select   
  21               	.equ     KER_RLD,         0x82                            ;KER_RLD=0xFF-(F_CPU/KER_PRS/KER_TR) 
  22               	.equ     KER_STK_SZ,      128                             ;stack size in bytes for each task   
  23               	.equ     KER_MX_NTSK,     10                              ;max number of tasks                 
  24               	;;==============================define user address or macro end============================;; 
  25               	
  26               	
  27               	
  28               	
  29               	
  30               	;;===============================define data offsets starting===============================;; 
  31               	.equ     OFB_TICK0,       0x00                            ;offset from KerBase tick count byte0
  32               	.equ     OFB_TICK1,       0x01                            ;offset from KerBase tick count byte1
  33               	.equ     OFB_TICK2,       0x02                            ;offset from KerBase tick count byte2
  34               	.equ     OFB_TICK3,       0x03                            ;offset from KerBase tick count byte3
  35               	.equ     OFB_TICK4,       0x04                            ;offset from KerBase tick count byte4
  36               	.equ     OFB_PRS  ,       0x05                            ;offset from KerBase prescaler       
  37               	.equ     OFB_RLD  ,       0x06                            ;offset from KerBase counter reload  
  38               	.equ     OFB_TID  ,       0x07                            ;offset from KerBase task id         
  39               	.equ     OFB_NTSK ,       0x08                            ;offset from KerBase ntask           
  40               	.equ     OFB_LPR  ,       0x09                            ;offset from KerBase lowest priority 
  41               	.equ     OFB_PTID ,       0x0A                            ;offset from KerBase prio task_id    
  42               	.equ     OFB_UTC  ,       0x0B                            ;offset from KerBase usage tick cnt  
  43               	.equ     OFB_UATC ,       0x0C                            ;offset from KerBase active tick cnt 
  44               	.equ     OFB_USAGE,       0x0D                            ;offset from KerBase cpu usage       
  45               	.equ     OFB_SLCFG,       0x0E                            ;offset from KerBase sleep config    
  46               	.equ     OFM_MSPI ,       0x00                            ;offset from MSPZP msp index field   
  47               	.equ     OFM_MSPS ,       0x02                            ;offset from MSPZP msp starting      
  48               	;;==================================define data offsets end=================================;; 
  49               	
  50               	
  51               	
  52               	
  53               	
  54               	;;===============================define system macro starting===============================;; 
  55               	.equ     TASK_BLOCKED,    0x00                            ;KerSchSts val=0                     
  56               	.equ     TASK_READY,      0x01                            ;KerSchSts val=1                     
  57               	.equ     TASK_EXECUTING,  0x02                            ;KerSchSts val=2                     
  58               	.equ     TASK_SUSPENDED,  0x03                            ;KerSchSts val=3                     
  59               	.equ     TASK_CONS_LAT,   0x04                            ;KerSchSts val=3, constant latency   
  60               	.equ     SCH_MODE_HANDLER,0x00                            ;handler mode in KER_SLP_TIME_MGNT   
  61               	.equ     SCH_MODE_THREAD, 0x01                            ;thread mode in KER_SLP_TIME_MGNT    
  62               	;;==================================define system macro end=================================;; 
  63               	
  64               	
  65               	
  66               	
  67               	
  68               	;;===========================define hardware reg address starting===========================;; 
  69               	;SRAM Mapped Addresses, LDS/STS can be used
  70               	.equ     SRADMUX ,        0x7C                            ;manually defined ADMUX in SRAM      
  71               	.equ     SRADCSRB,        0x7B                            ;manually defined ADCSRB in SRAM     
  72               	.equ     SRADCSRA,        0x7A                            ;manually defined ADCSRA in SRAM     
  73               	.equ     SRTIMSK0,        0x6E                            ;manually defined TIMSK0 in SRAM     
  74               	.equ     SRWDTCSR,        0x60                            ;manually defined WDTCSR in SRAM     
  75               	.equ     SRSREG  ,        0x5F                            ;manually defined SREG in SRAM       
  76               	.equ     SRSPH   ,        0x5E                            ;manually defined SPH in SRAM        
  77               	.equ     SRSPL   ,        0x5D                            ;manually defined SPL in SRAM        
  78               	.equ     SRMCUCR ,        0x55                            ;manually defined MCUCR in SRAM      
  79               	.equ     SRMCUSR ,        0x54                            ;manually defined MCUSR in SRAM      
  80               	.equ     SRSMCR  ,        0x53                            ;manually defined SMCR in SRAM       
  81               	.equ     SRACSR  ,        0x50                            ;manually defined ACSR in SRAM       
  82               	.equ     SROCR0B ,        0x48                            ;manually defined OCR0B in SRAM      
  83               	.equ     SROCR0A ,        0x47                            ;manually defined OCR0A in SRAM      
  84               	.equ     SRTCNT0 ,        0x46                            ;manually defined TCNT0 in SRAM      
  85               	.equ     SRTCCR0B,        0x45                            ;manually defined TCCR0B in SRAM     
  86               	.equ     SRTCCR0A,        0x44                            ;manually defined TCCR0A in SRAM     
  87               	.equ     SRTIFR0 ,        0x35                            ;manually defined TIFR0 in SRAM      
  88               	;IO Mapped Addresses, IN/OUT commands can be used
  89               	.equ     IOSREG  ,        0x3F                            ;manually defined SREG in IO         
  90               	.equ     IOSPH   ,        0x3E                            ;manually defined SPH in IO          
  91               	.equ     IOSPL   ,        0x3D                            ;manually defined SPL in IO          
  92               	.equ     IOMCUCR ,        0x35                            ;manually defined MCUCR in IO        
  93               	.equ     IOMCUSR ,        0x34                            ;manually defined MCUSR in IO        
  94               	.equ     IOSMCR  ,        0x33                            ;manually defined SMCR in IO         
  95               	.equ     IOOCR0B ,        0x28                            ;manually defined OCR0B in IO        
  96               	.equ     IOOCR0A ,        0x27                            ;manually defined OCR0A in IO        
  97               	.equ     IOTCNT0 ,        0x26                            ;manually defined TCNT0 in IO        
  98               	.equ     IOTCCR0B,        0x25                            ;manually defined TCCR0B in IO       
  99               	.equ     IOTCCR0A,        0x24                            ;manually defined TCCR0A in IO       
 100               	.equ     IOTIFR0 ,        0x15                            ;manually defined TIFR0 in IO        
 101               	;;==============================define hardware reg address end=============================;; 
 102               	
 103               	
 104               	
 105               	
 106               	
 107               	;;=============================define global variables starting=============================;; 
 108               	.section   .bss                                                                                
 109               	                                                                                               
 110               	.global    KerBase                                        ;declare global space for kernel     
 111 0000 0000 0000 	KerBase:   .skip 16                                       ;see offset section                  
 111      0000 0000 
 111      0000 0000 
 111      0000 0000 
 112               	                                                                                               
 113               	.global    KerPSP                                         ;space for process stack pointers    
 114 0010 0000 0000 	KerPSP:    .skip KER_MX_NTSK*2                            ;2 bytes for each task               
 114      0000 0000 
 114      0000 0000 
 114      0000 0000 
 114      0000 0000 
 115               	                                                                                               
 116               	.global    KerSSZ                                         ;stack for main stack pointers       
 117 0024 0000 0000 	KerSSZ:    .skip 14                                       ;stack_ptr(2), MSPZPn(4)             
 117      0000 0000 
 117      0000 0000 
 117      0000 
 118               	                                                                                               
 119               	.global    KerSchSts                                      ;space for scheduler status          
 120 0032 0000 0000 	KerSchSts: .skip KER_MX_NTSK*1                            ;status(1)                           
 120      0000 0000 
 120      0000 
 121               	                                                                                               
 122               	.global    KerSchPr                                       ;space for scheduler priority        
 123 003c 0000 0000 	KerSchPr:  .skip KER_MX_NTSK*1                            ;priority(1)                         
 123      0000 0000 
 123      0000 
 124               	                                                                                               
 125               	.global    KerSchSlp                                      ;space for task sleep                
 126 0046 0000 0000 	KerSchSlp: .skip KER_MX_NTSK*2                            ;timing(2)                           
 126      0000 0000 
 126      0000 0000 
 126      0000 0000 
 126      0000 0000 
 127               	                                                                                               
 128               	.global    KerStack                                       ;space for stack                     
 129 005a 0000 0000 	KerStack:  .skip KER_STK_SZ*KER_MX_NTSK                   ;KER_STK_SZ bytes for each task      
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 129      0000 0000 
 130               	;;==============================define global variables end=================================;; 
 131               	
 132               	
 133               	
 134               	
 135               	
 136               	;;===============================define vector section starting=============================;; 
 137               	.section .vectors, "ax", @progbits                                                             
 138               	                                                                                               
 139 0000 0000 0000 	.org    0x000C                                                                                 
 139      0000 0000 
 139      0000 0000 
 140:kernel.S      ****         RJMP  __vector_6                                                                       
 141 000e 0000 0000 	.org    0x0020                                                                                 
 141      0000 0000 
 141      0000 0000 
 141      0000 0000 
 141      0000 
 142:kernel.S      ****         RJMP  __vector_16                                                                      
 143               	;;=================================define vector section end================================;; 
 144               	
 145               	
 146               	
 147               	
 148               	
 149               	;;===============================define text section starting===============================;; 
 150               	.section .text                                                                                 
 151               	;;==================================define text section end=================================;; 
 152               	
 153               	
 154               	
 155               	
 156               	
 157               	;;==============================define global functions starting============================;; 
 158               	.global  Kernel_SysTick_Reg_Init                                                               
 159               	.global  Kernel_SysTick_Val_Get                                                                
 160               	.global  Kernel_SysTick_Val_Safely_Get                                                         
 161               	.global  Kernel_Interrupt_Sts_Get                                                              
 162               	.global  Kernel_Init                                                                           
 163               	.global  Kernel_Task_Create                                                                    
 164               	.global  Kernel_Start_Tasks                                                                    
 165               	.global  Kernel_Task_Idle                                                                      
 166               	.global  Kernel_Task_Sleep                                                                     
 167               	.global  Kernel_Task_Constant_Latency                                                          
 168               	.global  Kernel_Task_Constant_Latency_Sleep                                                    
 169               	.global  Kernel_Task_Sleep_Time_Get                                                            
 170               	.global  Kernel_Task_Status_Get                                                                
 171               	.global  Kernel_NTask_Get                                                                      
 172               	.global  Kernel_Task_Prio_Get                                                                  
 173               	.global  Kernel_Lowest_Prio_Get                                                                
 174               	.global  Kernel_High_Prio_Task_ID_Get                                                          
 175               	.global  Kernel_Abs_High_Prio_Task_ID_Get                                                      
 176               	.global  Kernel_CPU_Usage_Get                                                                  
 177               	;;================================define global functions end===============================;; 
 178               	
 179               	
 180               	
 181               	
 182               	
 183               	;;============================debug pin operation init starting=============================;; 
 184               	;used registers          : R18, R19                                                            
 185               	;arg registers           : None                                                                
 186               	;return registers        : None                                                                
 187               	;unsafe access registers : R18, R19                                                            
 188               	.macro  KER_TIMER_INIT                                    ;total 1.5uS @8MHz      ( 12 clocks) 
 189               	        #ifdef KER_TIMER0_AS_TICK_SRC                                                          
 190               	        LDS   R18		         , KerBase+OFB_PRS        ;load prescaler         (  2 clocks) 
 191               			LDS   R19		         , KerBase+OFB_RLD        ;load reload val        (  2 clocks) 
 192               			STS   SRTCCR0B           , R18                    ;prescaler-> TCCR0B     (  2 clocks) 
 193               			STS   SRTCNT0            , R19                    ;reload val-> TCNT0     (  2 clocks) 
 194               			LDI   R18                , 0x01                   ;bit mask TOIE0         (  1 clock ) 
 195               			STS   SRTIMSK0           , R18                    ;set to TIMSK0          (  2 clocks) 
 196               			SEI                                               ;force enable interrupt (  1 clock ) 
 197               			#endif                                                                                 
 198               			#ifdef KER_WDT_AS_TICK_SRC                                                             
 199               	        WDR                                               ;reset wdt              (  1 clock ) 
 200               			LDS   R18                , SRWDTCSR               ;copy WDTCSR            (  2 clocks) 
 201               			ORI   R18                , 0x18                   ;set WDCE,WDE           (  1 clock ) 
 202               			STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
 203               			#ifdef KER_WDT_TICK_16MS                                                               
 204               			LDI   R18                , 0x40                   ;WDIE                   (  1 clock ) 
 205               			#endif                                                                                 
 206               	        #ifdef KER_WDT_TICK_32MS                                                               
 207               			LDI   R18                , 0x41                   ;WDIE, WDPS0            (  1 clock ) 
 208               			#endif                                                                                 
 209               			#ifdef KER_WDT_TICK_64MS                                                               
 210               			LDI   R18                , 0x42                   ;WDIE, WDPS1            (  1 clock ) 
 211               			#endif                                                                                 
 212               			#ifdef KER_WDT_TICK_125MS                                                              
 213               			LDI   R18                , 0x43                   ;WDIE, WDPS1, WDPS2     (  1 clock ) 
 214               			#endif                                                                                 
 215               			#ifdef KER_WDT_TICK_250MS                                                              
 216               			LDI   R18                , 0x44                   ;WDIE, WDPS1, WDPS2     (  1 clock ) 
 217               			#endif                                                                                 
 218               			#ifdef KER_WDT_TICK_500MS                                                              
 219               			LDI   R18                , 0x45                   ;WDIE, WDPS1, WDPS2     (  1 clock ) 
 220               			#endif                                                                                 
 221               			#ifdef KER_WDT_TICK_1000MS                                                             
 222               			LDI   R18                , 0x46                   ;WDIE, WDPS1, WDPS2     (  1 clock ) 
 223               			#endif                                                                                 
 224               			STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
 225               			SEI                                               ;force enable interrupt (  1 clock ) 
 226               			#endif                                                                                 
 227               	.endm                                                                                          
 228               	;;==============================debug pin operation init end================================;; 
 229               	
 230               	
 231               	
 232               	
 233               	
 234               	;;============================debug pin operation init starting=============================;; 
 235               	;used registers          : None                                                                
 236               	;arg registers           : None                                                                
 237               	;return registers        : None                                                                
 238               	;unsafe access registers : None                                                                
 239               	.macro  KER_DEBUG_PIN_INIT                                ;total 0.5uS @8MHz      (  4 clocks) 
 240               	        #ifdef KER_DBG_ENABLE                                                                  
 241               			CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear port bit         (  2 clocks) 
 242               			SBI   KER_DBG_DDR        , KER_DBG_PIN            ;set bit in DDR         (  2 clocks) 
 243               			#endif                                                                                 
 244               	.endm                                                                                          
 245               	;;==============================debug pin operation init end================================;; 
 246               	
 247               	
 248               	
 249               	
 250               	
 251               	;;===========================debug pin operation set starting===============================;; 
 252               	;used registers          : None                                                                
 253               	;arg registers           : None                                                                
 254               	;return registers        : None                                                                
 255               	;unsafe access registers : None                                                                
 256               	.macro  KER_DEBUG_PIN_SET                                 ;total 0.25uS @8MHz     (  2 clocks) 
 257               	        #ifdef KER_DBG_ENABLE                                                                  
 258               	        SBI   KER_DBG_PORT       , KER_DBG_PIN            ;set gpio               (  2 clocks) 
 259               			#endif                                                                                 
 260               	.endm                                                                                          
 261               	;;==============================debug pin operation set end=================================;; 
 262               	
 263               	
 264               	
 265               	
 266               	
 267               	;;===========================debug pin operation clear starting=============================;; 
 268               	;used registers          : None                                                                
 269               	;arg registers           : None                                                                
 270               	;return registers        : None                                                                
 271               	;unsafe access registers : None                                                                
 272               	.macro  KER_DEBUG_PIN_CLEAR                               ;total 0.25uS @8MHz     (  2 clocks) 
 273               	        #ifdef KER_DBG_ENABLE                                                                  
 274               			CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear gpio             (  2 clocks) 
 275               			#endif                                                                                 
 276               	.endm                                                                                          
 277               	;;==============================debug pin operation clear end===============================;; 
 278               	
 279               	
 280               	
 281               	
 282               	
 283               	;;==============================reload counter value starting===============================;; 
 284               	;used registers          : R18                                                                 
 285               	;arg registers           : None                                                                
 286               	;return registers        : None                                                                
 287               	;unsafe access registers : R18                                                                 
 288               	.macro  KER_COUNTER_RELOAD                                ;total 0.5uS @8MHz      (  4 clocks) 
 289               	        LDS   R18                , KerBase+OFB_RLD        ;load reload value      (  2 clocks) 
 290               			STS   SRTCNT0            , R18                    ;Set value to TCNT0     (  2 clocks) 
 291               	.endm                                                                                          
 292               	;;=================================reload counter value end=================================;; 
 293               	
 294               	
 295               	
 296               	
 297               	
 298               	;;=================================save r0 & sreg starting==================================;; 
 299               	;used registers          : R0                                                                  
 300               	;arg registers           : None                                                                
 301               	;return registers        : None                                                                
 302               	;unsafe access registers : None                                                                
 303               	.macro  KER_SAVE_R0_SREG                                  ;total 0.63uS @8MHz     (  5 clocks) 
 304               	        PUSH  R0                                          ;save R0                (  2 clocks) 
 305               			IN    R0                 , IOSREG                 ;load SREG              (  1 clock ) 
 306               			PUSH  R0                                          ;save SREG              (  2 clocks) 
 307               	.endm                                                                                          
 308               	;;====================================save r0 & sreg end====================================;; 
 309               	
 310               	
 311               	
 312               	
 313               	
 314               	;;===============================save r0, sreg & cli starting===============================;; 
 315               	;used registers          : R0                                                                  
 316               	;arg registers           : None                                                                
 317               	;return registers        : None                                                                
 318               	;unsafe access registers : None                                                                
 319               	.macro  KER_SAVE_R0_CLI_SREG                              ;total 0.75uS @8MHz     (  6 clocks) 
 320               	        PUSH  R0                                          ;push R0                (  2 clocks) 
 321               			IN    R0                 , IOSREG                 ;save SREG              (  1 clock ) 
 322               			CLI                                               ;clear interrupt        (  1 clock ) 
 323               			PUSH  R0                                          ;save SREG              (  2 clocks) 
 324               	.endm                                                                                          
 325               	;;=================================save r0, sreg & cli end==================================;; 
 326               	
 327               	
 328               	
 329               	
 330               	
 331               	;;===================================save r1~r31 starting===================================;; 
 332               	;used registers          : R1~R31                                                              
 333               	;arg registers           : None                                                                
 334               	;return registers        : None                                                                
 335               	;unsafe access registers : None                                                                
 336               	.macro  KER_SAVE_R1_R31                                   ;total 7.88uS @8MHz     ( 63 clocks) 
 337               			PUSH  R1                                          ;save R1                (  2 clocks) 
 338               			CLR   R1                                          ;clear R1               (  1 clock ) 
 339               			PUSH  R2                                          ;save R2                (  2 clocks) 
 340               			PUSH  R3                                          ;save R3                (  2 clocks) 
 341               			PUSH  R4                                          ;save R4                (  2 clocks) 
 342               			PUSH  R5                                          ;save R5                (  2 clocks) 
 343               			PUSH  R6                                          ;save R6                (  2 clocks) 
 344               			PUSH  R7                                          ;save R7                (  2 clocks) 
 345               			PUSH  R8                                          ;save R8                (  2 clocks) 
 346               			PUSH  R9                                          ;save R9                (  2 clocks) 
 347               			PUSH  R10                                         ;save R10               (  2 clocks) 
 348               			PUSH  R11                                         ;save R11               (  2 clocks) 
 349               			PUSH  R12                                         ;save R12               (  2 clocks) 
 350               			PUSH  R13                                         ;save R13               (  2 clocks) 
 351               			PUSH  R14                                         ;save R14               (  2 clocks) 
 352               			PUSH  R15                                         ;save R15               (  2 clocks) 
 353               			PUSH  R16                                         ;save R16               (  2 clocks) 
 354               			PUSH  R17                                         ;save R17               (  2 clocks) 
 355               			PUSH  R18                                         ;save R18               (  2 clocks) 
 356               			PUSH  R19                                         ;save R19               (  2 clocks) 
 357               			PUSH  R20                                         ;save R20               (  2 clocks) 
 358               			PUSH  R21                                         ;save R21               (  2 clocks) 
 359               			PUSH  R22                                         ;save R22               (  2 clocks) 
 360               			PUSH  R23                                         ;save R23               (  2 clocks) 
 361               			PUSH  R24                                         ;save R24               (  2 clocks) 
 362               			PUSH  R25                                         ;save R25               (  2 clocks) 
 363               			PUSH  R26                                         ;save R26               (  2 clocks) 
 364               			PUSH  R27                                         ;save R27               (  2 clocks) 
 365               			PUSH  R28                                         ;save R28               (  2 clocks) 
 366               			PUSH  R29                                         ;save R29               (  2 clocks) 
 367               			PUSH  R30                                         ;save R30               (  2 clocks) 
 368               			PUSH  R31                                         ;save R31               (  2 clocks) 
 369               	.endm                                                                                          
 370               	;;======================================save r1~r31 end=====================================;; 
 371               	
 372               	
 373               	
 374               	
 375               	
 376               	;;==============================context save handler starting===============================;; 
 377               	;used registers          : R0~R31                                                              
 378               	;arg registers           : None                                                                
 379               	;return registers        : None                                                                
 380               	;unsafe access registers : None                                                                
 381               	.macro  KER_CONTEXT_SAVE_HANDLER                          ;total 8.5uS @8MHz      ( 68 clocks) 
 382               	        KER_SAVE_R0_SREG                                  ;save r0, sreg          (  5 clocks) 
 383               	        KER_SAVE_R1_R31                                   ;save r1~r31            ( 63 clocks) 
 384               	.endm                                                                                          
 385               	;;=================================context save handler end=================================;; 
 386               	
 387               	
 388               	
 389               	
 390               	
 391               	;;===============================context save thread starting===============================;; 
 392               	;used registers          : R0~R31                                                              
 393               	;arg registers           : None                                                                
 394               	;return registers        : None                                                                
 395               	;unsafe access registers : None                                                                
 396               	.macro  KER_CONTEXT_SAVE_THREAD                           ;total 8.63uS @8MHz     ( 69 clocks) 
 397               	        KER_SAVE_R0_CLI_SREG                              ;save r0, sreg          (  6 clocks) 
 398               	        KER_SAVE_R1_R31                                   ;save r1~r31            ( 63 clocks) 
 399               	.endm                                                                                          
 400               	;;==================================context save thread end=================================;; 
 401               	
 402               	
 403               	
 404               	
 405               	
 406               	
 407               	;;================================restore r0 & sreg starting================================;; 
 408               	;used registers          : R0                                                                  
 409               	;arg registers           : None                                                                
 410               	;return registers        : None                                                                
 411               	;unsafe access registers : None                                                                
 412               	.macro  KER_RESTORE_R0_SREG                               ;total 0.63uS @8MHz     (  5 clocks) 
 413               	        POP   R0                                          ;fetch SREG             (  2 clocks) 
 414               			OUT   IOSREG             , R0                     ;load SREG              (  1 clock ) 
 415               			POP   R0                                          ;restore R0             (  2 clocks) 
 416               	.endm                                                                                          
 417               	;;==================================restore r0 & sreg end===================================;; 
 418               	
 419               	
 420               	
 421               	
 422               	
 423               	;;==============================restore r0, sreg & sei starting=============================;; 
 424               	;used registers          : R0                                                                  
 425               	;arg registers           : None                                                                
 426               	;return registers        : None                                                                
 427               	;unsafe access registers : None                                                                
 428               	.macro  KER_RESTORE_R0_SREG_SEI                           ;total 0.75uS @8MHz     (  6 clocks) 
 429               	        POP   R0                                          ;fetch SREG             (  2 clocks) 
 430               			OUT   IOSREG             , R0                     ;load SREG              (  1 clock ) 
 431               			POP   R0                                          ;restore R0             (  2 clocks) 
 432               			SEI                                               ;enable interrupt       (  1 clock ) 
 433               	.endm                                                                                          
 434               	;;===============================restore r0, sreg & sei end=================================;; 
 435               	
 436               	
 437               	
 438               	
 439               	
 440               	;;=================================restore r1~r31 starting==================================;; 
 441               	;used registers          : R1~R31                                                              
 442               	;arg registers           : None                                                                
 443               	;return registers        : None                                                                
 444               	;unsafe access registers : None                                                                
 445               	.macro  KER_RESTORE_R1_R31                                ;total 8.38uS @8MHz     ( 62 clocks) 
 446               			POP   R31                                         ;restore R31            (  2 clocks) 
 447               			POP   R30                                         ;restore R30            (  2 clocks) 
 448               			POP   R29                                         ;restore R29            (  2 clocks) 
 449               			POP   R28                                         ;restore R28            (  2 clocks) 
 450               			POP   R27                                         ;restore R27            (  2 clocks) 
 451               			POP   R26                                         ;restore R26            (  2 clocks) 
 452               			POP   R25                                         ;restore R25            (  2 clocks) 
 453               			POP   R24                                         ;restore R24            (  2 clocks) 
 454               			POP   R23                                         ;restore R23            (  2 clocks) 
 455               			POP   R22                                         ;restore R22            (  2 clocks) 
 456               			POP   R21                                         ;restore R21            (  2 clocks) 
 457               			POP   R20                                         ;restore R20            (  2 clocks) 
 458               			POP   R19                                         ;restore R19            (  2 clocks) 
 459               			POP   R18                                         ;restore R18            (  2 clocks) 
 460               			POP   R17                                         ;restore R17            (  2 clocks) 
 461               			POP   R16                                         ;restore R16            (  2 clocks) 
 462               			POP   R15                                         ;restore R15            (  2 clocks) 
 463               			POP   R14                                         ;restore R14            (  2 clocks) 
 464               			POP   R13                                         ;restore R13            (  2 clocks) 
 465               			POP   R12                                         ;restore R12            (  2 clocks) 
 466               			POP   R11                                         ;restore R11            (  2 clocks) 
 467               			POP   R10                                         ;restore R10            (  2 clocks) 
 468               			POP   R9                                          ;restore R9             (  2 clocks) 
 469               			POP   R8                                          ;restore R8             (  2 clocks) 
 470               			POP   R7                                          ;restore R7             (  2 clocks) 
 471               			POP   R6                                          ;restore R6             (  2 clocks) 
 472               			POP   R5                                          ;restore R5             (  2 clocks) 
 473               			POP   R4                                          ;restore R4             (  2 clocks) 
 474               			POP   R3                                          ;restore R3             (  2 clocks) 
 475               			POP   R2                                          ;restore R2             (  2 clocks) 
 476               			POP   R1                                          ;restore R1             (  2 clocks) 
 477               	.endm                                                                                          
 478               	;;====================================restore r1~r31 end====================================;; 
 479               	
 480               	
 481               	
 482               	
 483               	
 484               	;;=============================context restore handler starting=============================;; 
 485               	;used registers          : R0~R31                                                              
 486               	;arg registers           : None                                                                
 487               	;return registers        : None                                                                
 488               	;unsafe access registers : None                                                                
 489               	.macro  KER_CONTEXT_RESTORE_HANDLER                       ;total 8.38uS @8MHz     ( 67 clocks) 
 490               	        KER_RESTORE_R1_R31                                ;restore r1~r31         ( 62 clocks) 
 491               			KER_RESTORE_R0_SREG                               ;restore r0, sreg       (  5 clocks) 
 492               	.endm                                                                                          
 493               	;;===============================context restore handler end================================;; 
 494               	
 495               	
 496               	
 497               	
 498               	
 499               	;;=============================context restore thread starting==============================;; 
 500               	;used registers          : R0~R31                                                              
 501               	;arg registers           : None                                                                
 502               	;return registers        : None                                                                
 503               	;unsafe access registers : None                                                                
 504               	.macro  KER_CONTEXT_RESTORE_THREAD                        ;total 8.75uS @8MHz     ( 68 clocks) 
 505               	        KER_RESTORE_R1_R31                                ;restore r1~r31         ( 62 clocks) 
 506               			KER_RESTORE_R0_SREG_SEI                           ;restore r0, sreg       (  6 clocks) 
 507               	.endm                                                                                          
 508               	;;================================context restore thread end================================;; 
 509               	
 510               	
 511               	
 512               	
 513               	
 514               	;;==============================fetch current task id starting==============================;; 
 515               	;used registers          : R20                                                                 
 516               	;arg registers           : None                                                                
 517               	;return registers        : R20 (Current task id)                                               
 518               	;unsafe access registers : R20                                                                 
 519               	.macro  KER_FETCH_CURR_TID                                ;total 0.25uS @8MHz     (  2 clocks) 
 520               	        LDS   R20                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 521               	.endm                                                                                          
 522               	;;================================fetch current task id end=================================;; 
 523               	
 524               	
 525               	
 526               	
 527               	
 528               	;;==================================fetch ntask starting====================================;; 
 529               	;used registers          : R21                                                                 
 530               	;arg registers           : None                                                                
 531               	;return registers        : R21 (ntask)                                                         
 532               	;unsafe access registers : R21                                                                 
 533               	.macro  KER_FETCH_NTASK                                   ;total 0.25uS @8MHz     (  2 clocks) 
 534               	        LDS   R21                , KerBase+OFB_NTSK       ;fetch task_id          (  2 clocks) 
 535               	.endm                                                                                          
 536               	;;====================================fetch ntask end=======================================;; 
 537               	
 538               	
 539               	
 540               	
 541               	
 542               	;;=========================calculate offset addr in words starting==========================;; 
 543               	;used registers          : R18, R30(ZL), R31(ZH)                                               
 544               	;arg registers           : R30(ZL), R31(ZH)                                                    
 545               	;return registers        : R30(ZL), R31(ZH)                                                    
 546               	;unsafe access registers : R18, R30(ZL), R31(ZH)                                               
 547               	.macro  KER_CALC_ADDR_OFF_WORD                            ;total 0.75uS @8MHz     (  6 clocks) 
 548               	        LDS   R18                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 549               			LSL   R18                                         ;left shift to multiply (  1 clock ) 
 550               			ADD   ZL                 , R18                    ;add offset to array    (  1 clock ) 
 551               			LDI   R18                , 0x00                   ;clear for carry prop   (  1 clock ) 
 552               			ADC   ZH                 , R18                    ;add carry if any       (  1 clock ) 
 553               	.endm                                                                                          
 554               	;;=============================calculate offset addr in words end===========================;; 
 555               	
 556               	
 557               	
 558               	
 559               	
 560               	;;=========================calculate offset addr in bytes starting==========================;; 
 561               	;used registers          : R18, R30(ZL), R31(ZH)                                               
 562               	;arg registers           : R30(ZL), R31(ZH)                                                    
 563               	;return registers        : R30(ZL), R31(ZH)                                                    
 564               	;unsafe access registers : R18, R30(ZL), R31(ZH)                                               
 565               	.macro  KER_CALC_ADDR_OFF_BYTES                           ;total 0.63uS @8MHz     (  5 clocks) 
 566               	        LDS   R18                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 567               			ADD   ZL                 , R18                    ;add offset to array    (  1 clock ) 
 568               			LDI   R18                , 0x00                   ;clear for carry prop   (  1 clock ) 
 569               			ADC   ZH                 , R18                    ;add carry if any       (  1 clock ) 
 570               	.endm                                                                                          
 571               	;;=============================calculate offset addr in bytes end===========================;; 
 572               	
 573               	
 574               	
 575               	
 576               	
 577               	;;===============================save current task sp starting==============================;; 
 578               	;used registers          : R18, R19, R30(ZL), R31(ZH)                                          
 579               	;arg registers           : None                                                                
 580               	;return registers        : None                                                                
 581               	;unsafe access registers : R18, R19, R30(ZL), R31(ZH)                                          
 582               	.macro  KER_SAVE_CURR_TASK_SP                             ;total 1.75uS @8MHz     ( 14 clocks) 
 583               			LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 584               			LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 585               			KER_CALC_ADDR_OFF_WORD                            ;calc offset            (  6 clocks) 
 586               			IN    R18                , IOSPL                  ;fetch SPL0             (  1 clock ) 
 587               			IN    R19                , IOSPH                  ;fetch SPH0             (  1 clock ) 
 588               			STD   Z+0                , R18                    ;store SPL at ZP+0      (  2 clocks) 
 589               			STD   Z+1                , R19                    ;store SPH at ZP+1      (  2 clocks) 
 590               	.endm                                                                                          
 591               	;;================================save current task sp end==================================;; 
 592               	
 593               	
 594               	
 595               	
 596               	
 597               	;;==============================load next task id starting==================================;; 
 598               	;used registers          : R18, R19                                                            
 599               	;arg registers           : None                                                                
 600               	;return registers        : None                                                                
 601               	;unsafe access registers : R18, R19                                                            
 602               	.macro  KER_LOAD_NEXT_TASK_ID                             ;total 1.63uS @8MHz     ( 13 clocks) 
 603               			LDS   R18                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 604               			INC   R18                                         ;increment task_id      (  1 clock ) 
 605               			LDS   R19                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 606               		_MOD_CONT\@:                                          ;use local label                     
 607               		    CP    R18                , R19                    ;compare tid with ntask (  1 clock ) 
 608               			BRLO  _MOD_DONE\@                                 ;if tid<ntask, done     (  2 clocks) 
 609               			SUB   R18                , R19                    ;subtract ntask from tid(  1 clock ) 
 610               			RJMP  _MOD_CONT\@                                 ;go to loop start       (  2 clocks) 
 611               		_MOD_DONE\@:                                          ;use local label                     
 612               		    STS   KerBase+OFB_TID    , R18                    ;save task_id%ntask     (  2 clocks) 
 613               	.endm                                                                                          
 614               	;;=================================load next task id end====================================;; 
 615               	
 616               	
 617               	
 618               	
 619               	
 620               	;;==============================increment tick counter starting=============================;; 
 621               	;used registers          : R18, R19                                                            
 622               	;arg registers           : None                                                                
 623               	;return registers        : None                                                                
 624               	;unsafe access registers : R18, R19                                                            
 625               	.macro  KER_TICK_INCREMENT                                ;total 3.25uS @8MHz     ( 26 clocks) 
 626               			LDS   R18                , KerBase+OFB_TICK0      ;load Byte0             (  2 clocks) 
 627               			INC   R18                                         ;add 1 with Byte0       (  1 clock ) 
 628               			STS   KerBase+OFB_TICK0  , R18                    ;set Byte0              (  2 clocks) 
 629               			LDI   R19                , 0x00                   ;clear reg              (  1 clock ) 
 630               			LDS   R18                , KerBase+OFB_TICK1      ;load Byte1             (  2 clocks) 
 631               			ADC   R18                , R19                    ;add carry with Byte1   (  1 clock ) 
 632               			STS   KerBase+OFB_TICK1  , R18                    ;set Byte1              (  2 clocks) 
 633               			LDS   R18                , KerBase+OFB_TICK2      ;load Byte2             (  2 clocks) 
 634               			ADC   R18                , R19                    ;add carry with Byte2   (  1 clock ) 
 635               			STS   KerBase+OFB_TICK2  , R18                    ;set Byte2              (  2 clocks) 
 636               			LDS   R18                , KerBase+OFB_TICK3      ;load Byte3             (  2 clocks) 
 637               			ADC   R18                , R19                    ;add carry with Byte3   (  1 clock ) 
 638               			STS   KerBase+OFB_TICK3  , R18                    ;set Byte3              (  2 clocks) 
 639               			LDS   R18                , KerBase+OFB_TICK4      ;load Byte4             (  2 clocks) 
 640               			ADC   R18                , R19                    ;add carry with Byte4   (  1 clock ) 
 641               			STS   KerBase+OFB_TICK4  , R18                    ;set Byte4              (  2 clocks) 
 642               	.endm                                                                                          
 643               	;;=================================increment tick counter end===============================;; 
 644               	
 645               	
 646               	
 647               	
 648               	
 649               	;;==============================load task id & sp starting==================================;; 
 650               	;used registers          : R18, R19, R30(ZL), R31(ZH)                                          
 651               	;arg registers           : None                                                                
 652               	;return registers        : None                                                                
 653               	;unsafe access registers : R18, R19, R30(ZL), R31(ZH)                                          
 654               	.macro  KER_LOAD_TASK_ID_AND_SP                           ;total 1.75uS @8MHz     ( 14 clocks) 
 655               			LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 656               			LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 657               			KER_CALC_ADDR_OFF_WORD                            ;calc offset            (  6 clocks) 
 658               			LDD   R18                , Z+0                    ;load SPL at ZP         (  2 clocks) 
 659               			LDD   R19                , Z+1                    ;load SPH at ZP         (  2 clocks) 
 660               			OUT   IOSPL              , R18                    ;load SPL0              (  1 clock ) 
 661               			OUT   IOSPH              , R19                    ;load SPH0              (  1 clock ) 
 662               	.endm                                                                                          
 663               	;;=================================load task id & sp end====================================;; 
 664               	
 665               	
 666               	
 667               	
 668               	
 669               	;;================================push msp & zp starting====================================;; 
 670               	;used registers          : R18, R19, R26(XL), R27(XH), R30(ZL), R31(ZH)                        
 671               	;arg registers           : None                                                                
 672               	;return registers        : None                                                                
 673               	;unsafe access registers : R18, R19, R26(XL), R27(XH), R30(ZL), R31(ZH)                        
 674               	.macro  KER_PUSH_MSP_ZP                                   ;total 2.25uS @8MHz     ( 18 clocks) 
 675               	        LDS   XL                 , KerSSZ+OFM_MSPI+0      ;load val low           (  2 clocks) 
 676               			LDS   XH                 , KerSSZ+OFM_MSPI+1      ;load val high          (  2 clocks) 
 677               			IN    R18                , IOSPL                  ;copy                   (  1 clock ) 
 678               			IN    R19                , IOSPH                  ;copy                   (  1 clock ) 
 679               			ST    X+                 , R18                    ;store main SPL         (  2 clocks) 
 680               	        ST    X+                 , R19                    ;store main SPH         (  2 clocks) 
 681               			ST    X+                 , ZL                     ;store main ZL          (  2 clocks) 
 682               			ST    X+                 , ZH                     ;store main ZH          (  2 clocks) 
 683               			STS   KerSSZ+OFM_MSPI+0  , XL                     ;store new index        (  2 clocks) 
 684               			STS   KerSSZ+OFM_MSPI+1  , XH                     ;store new index        (  2 clocks) 
 685               	.endm                                                                                          
 686               	;;===================================push msp & zp end======================================;; 
 687               	
 688               	
 689               	
 690               	
 691               	
 692               	;;=================================pop msp & zp starting====================================;; 
 693               	;used registers          : R18, R19, R26(XL), R27(XH), R30(ZL), R31(ZH)                        
 694               	;arg registers           : None                                                                
 695               	;return registers        : None                                                                
 696               	;unsafe access registers : R18, R19, R26(XL), R27(XH), R30(ZL), R31(ZH)                        
 697               	.macro  KER_POP_MSP_ZP                                    ;total 2.25uS @8MHz     ( 18 clocks) 
 698               			LDS   XL                 , KerSSZ+OFM_MSPI+0      ;load val low           (  2 clocks) 
 699               			LDS   XH                 , KerSSZ+OFM_MSPI+1      ;load val high          (  2 clocks) 
 700               			LD    ZH                 , -X                     ;load ZH                (  2 clocks) 
 701               			LD    ZL                 , -X                     ;load ZL                (  2 clocks) 
 702               			LD    R19                , -X                     ;load main SPH          (  2 clocks) 
 703               			LD    R18                , -X                     ;load main SPL          (  2 clocks) 
 704               			OUT   IOSPL              , R18                    ;set SPL                (  1 clock ) 
 705               			OUT   IOSPH              , R19                    ;set SPH                (  1 clock ) 
 706               			STS   KerSSZ+OFM_MSPI+0  , XL                     ;store new index        (  2 clocks) 
 707               			STS   KerSSZ+OFM_MSPI+1  , XH                     ;store new index        (  2 clocks) 
 708               	.endm                                                                                          
 709               	;;====================================pop msp & zp end======================================;; 
 710               	
 711               	
 712               	
 713               	
 714               	
 715               	;;============================sleep timeout management starting=============================;; 
 716               	;used registers          : R18, R19, R20, R24, R30(ZL), R31(ZH)                                
 717               	;arg registers           : R24 (SCH_MODE_HANDLER/SCH_MODE_THREAD)                              
 718               	;return registers        : R24 (READY/BLOCKED/EXECUTING/SUSPENDED/CONS_LAT)                    
 719               	;unsafe access registers : R18, R19, R20, R24, R30(ZL), R31(ZH)                                
 720               	.macro  KER_SLP_TIME_MGNT                                 ;total 6.50uS @8MHz     ( 52 clocks) 
 721               			LDI   ZL                 , lo8(KerSchSlp)         ;fetch base pos low     (  1 clock ) 
 722               			LDI   ZH                 , hi8(KerSchSlp)         ;fetch base pos high    (  1 clock ) 
 723               			KER_CALC_ADDR_OFF_WORD                            ;calc offset            (  6 clocks) 
 724               			;fetch current value from ram, if val=0, skip decrement                                
 725               	        LDD   R18                , Z+0                    ;load val low byte      (  2 clocks) 
 726               			LDD   R19                , Z+1                    ;load val high byte     (  2 clocks) 
 727               			MOV   R20                , R18                    ;copy                   (  1 clock ) 
 728               			OR    R20                , R19                    ;or high & low bytes    (  1 clock ) 
 729               			BREQ  _VAL_NULL\@                                 ;val=0, save sts        (  2 clocks) 
 730               	        CPI   R24                , SCH_MODE_THREAD        ;if arg=1, thread mode  (  1 clock ) 
 731               			BREQ  _VAL_NOT_NULL\@                             ;no need to dec val     (  2 clocks) 
 732               			;R19:R18 contains 16 bit sleep timer val, decrease val by 1                            
 733               			LDI   R20                , 0x01                   ;set val 1              (  1 clock ) 
 734               	        SUB   R18                , R20                    ;subtract low byte      (  1 clock ) 
 735               			LDI   R20                , 0x00                   ;clear                  (  1 clock ) 
 736               			SBC   R19                , R20                    ;subtract carry if any  (  1 clock ) 
 737               			;store new value                                                                       
 738               			STD   Z+0                , R18                    ;store low byte         (  2 clocks) 
 739               			STD   Z+1                , R19                    ;store low byte         (  2 clocks) 
 740               			MOV   R20                , R18                    ;copy                   (  1 clock ) 
 741               			OR    R20                , R19                    ;or high & low bytes    (  1 clock ) 
 742               			BRNE  _VAL_NOT_NULL\@                             ;val!=0                 (  2 clocks) 
 743               		_VAL_NULL\@:                                                                               
 744               		    ;find ram address for status                                                           
 745               		    LDI   ZL                 , lo8(KerSchSts)         ;fetch base pos low     (  1 clock ) 
 746               			LDI   ZH                 , hi8(KerSchSts)         ;fetch base pos high    (  1 clock ) 
 747               	        KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 748               			;update flag as task is ready                                                          
 749               			LDI   R24                , TASK_READY             ;set TASK_READY         (  1 clock ) 
 750               			ST    Z                  , R24                    ;update flag            (  2 clocks) 
 751               			RJMP  _EXIT_SLP_TIME\@                            ;jump to exit           (  2 clocks) 
 752               	    _VAL_NOT_NULL\@:                                                                           
 753               		    LDI   ZL                 , lo8(KerSchSts)         ;fetch base pos low     (  1 clock ) 
 754               			LDI   ZH                 , hi8(KerSchSts)         ;fetch base pos high    (  1 clock ) 
 755               	        KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 756               		    LD    R24                , Z                      ;return sts             (  2 clocks) 
 757               	    _EXIT_SLP_TIME\@:                                                                          
 758               	.endm                                                                                          
 759               	;;============================sleep timeout management end==================================;; 
 760               	
 761               	
 762               	
 763               	
 764               	
 765               	;;============================current task priority starting================================;; 
 766               	;used registers          : R18, R24, R30(ZL), R31(ZH)                                          
 767               	;arg registers           : None                                                                
 768               	;return registers        : R24 (Current task priority)                                         
 769               	;unsafe access registers : R18, R24, R30(ZL), R31(ZH)                                          
 770               	.macro  KER_CURR_TASK_PRIO                                ;total 1.13uS @8MHz     (  9 clocks) 
 771               			LDI    ZL                , lo8(KerSchPr)          ;load low addr          (  1 clock ) 
 772               			LDI    ZH                , hi8(KerSchPr)          ;load high addr         (  1 clock ) 
 773               			LDI    R18               , 0x00                   ;clear reg, for carry   (  1 clock ) 
 774               			LDS    R24               , KerBase+OFB_TID        ;load task id           (  2 clocks) 
 775               	        ADD    ZL                , R24                    ;add low addr           (  1 clock ) 
 776               			ADC    ZH                , R18                    ;add carry if any       (  1 clock ) 
 777               			LD     R24               , Z                      ;load current tid prio  (  2 clocks) 
 778               	.endm                                                                                          
 779               	;;==============================current task priority end===================================;; 
 780               	
 781               	
 782               	
 783               	
 784               	
 785               	;;================================run scheduler starting====================================;; 
 786               	;used registers          : R18, R19, R20, R21, R24, R25, R30(ZL), R31(ZH)                      
 787               	;arg registers           : R24 (SCH_MODE_HANDLER/SCH_MODE_THREAD)                              
 788               	;return registers        : None                                                                
 789               	;unsafe access registers : R18, R19, R20, R21, R24, R25, R30(ZL), R31(ZH)                      
 790               	.macro  KER_RUN_SCHEDULER                                 ;total 13.25uS @8MHz    (106 clocks) 
 791               			LDI    R18               , 0xFF                   ;set 0xff               (  1 clock ) 
 792               			STS    KerBase+OFB_LPR   , R18                    ;lowest priority        (  2 clocks) 
 793               			LDI    R18               , 0x00                   ;start from 0           (  1 clock ) 
 794               			STS    KerBase+OFB_PTID  , R18                    ;highest prio tid=0     (  2 clocks) 
 795               			MOV    R21               , R24                    ;copy sch mode          (  1 clock ) 
 796               		_KER_SCH_LOOP\@:                                                                           
 797               		    ;store task id to run from KER_DEC_SLP_TIMEOUT                                         
 798               			STS    KerBase+OFB_TID   , R18                    ;store task id          (  2 clocks) 
 799               	        ;sleep time decrement, update ready/blocked status                                     
 800               			MOV    R24               , R21                    ;restore sch mode       (  1 clock ) 
 801               			KER_SLP_TIME_MGNT                                 ;update return vars     ( 52 clocks) 
 802               	        CPI    R24               , TASK_READY             ;compare                (  1 clock ) 
 803               	        BREQ   _KER_CALC_PRIO\@                           ;calc priority if ready (  2 clocks) 
 804               			CPI    R24               , TASK_CONS_LAT          ;compare                (  1 clock ) 
 805               	        BREQ   _KER_CALC_PRIO\@                           ;calc priority if c_lat (  2 clocks) 
 806               	        RJMP   _KER_SCH_NEXT\@                            ;skip if !ready|c_lat   (  2 clocks) 
 807               		_KER_CALC_PRIO\@:                                                                          
 808               			KER_CURR_TASK_PRIO                                ;get task prio ->R24    (  9 clocks) 
 809               	        ;compare current task priority with lowest priority found so far                       
 810               			LDS    R18               , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
 811               			CP     R24               , R18                    ;compare                (  1 clock ) 
 812               			BRSH   _KER_SCH_NEXT\@                            ;if prio>=lowest prio   (  2 clocks) 
 813               			;found new lowest priority                                                             
 814               			STS    KerBase+OFB_LPR   , R24                    ;save lowest priority   (  2 clocks) 
 815               			LDS    R18               , KerBase+OFB_TID        ;load task id           (  2 clocks) 
 816               			STS    KerBase+OFB_PTID  , R18                    ;save lowest priority   (  2 clocks) 
 817               	                                                                                               
 818               	    _KER_SCH_NEXT\@:                                                                           
 819               		    LDS    R18               , KerBase+OFB_TID        ;load task id           (  2 clocks) 
 820               			INC    R18                                        ;increment by 1         (  1 clock ) 
 821               			LDS    R19               , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 822               			CP     R18               , R19                    ;compare with ntask     (  2 clocks) 
 823               			BRSH   _KER_SCH_EXIT\@                            ;if task_id>=ntask      (  2 clocks) 
 824               			RJMP   _KER_SCH_LOOP\@                            ;jump to entry          (  2 clocks) 
 825               		_KER_SCH_EXIT\@:                                                                           
 826               	        LDS    R18               , KerBase+OFB_PTID       ;load high prio task id (  2 clocks) 
 827               			STS    KerBase+OFB_TID   , R18                    ;for test only          (  2 clocks) 
 828               	.endm                                                                                          
 829               	;;===================================run scheduler end======================================;; 
 830               	
 831               	
 832               	
 833               	
 834               	
 835               	;;================================calc cpu usage starting===================================;; 
 836               	;used registers          : R18, R19                                                            
 837               	;arg registers           : None                                                                
 838               	;return registers        : None                                                                
 839               	;unsafe access registers : R18, R19                                                            
 840               	.macro  KER_CPU_USAGE                                     ;total 3.25uS @8MHz     ( 26 clocks) 
 841               	        ;check if current target task is idle task or not                                      
 842               	        LDS    R18               , KerBase+OFB_TID        ;load target task_id    (  2 clocks) 
 843               			TST    R18                                        ;check if idle task     (  1 clock ) 
 844               			BREQ   _KER_USG_TICK\@                            ;task_id=idle, skip     (  2 clocks) 
 845               			LDS    R18               , KerBase+OFB_UATC       ;load active tick cnt   (  2 clocks) 
 846               			INC    R18                                        ;inc active tick cnt    (  1 clock ) 
 847               			STS    KerBase+OFB_UATC  , R18                    ;store new val          (  2 clocks) 
 848               		_KER_USG_TICK\@:                                                                           
 849               			LDS    R18               , KerBase+OFB_UTC        ;load usage tick cnt    (  2 clocks) 
 850               			INC    R18                                        ;increment tick cnt     (  1 clock ) 
 851               			CPI    R18               , 100                    ;compare with 100       (  1 clock ) 
 852               			BRLO   _KER_USG_UTC_SV\@                          ;val<100, save new val  (  2 clocks) 
 853               			LDI    R18               , 0x00                   ;val>=100, roll back    (  1 clock ) 
 854               			LDS    R19               , KerBase+OFB_UATC       ;load active tick cnt   (  2 clocks) 
 855               			STS    KerBase+OFB_USAGE , R19                    ;store usage            (  2 clocks) 
 856               			LDI    R19               , 0x00                   ;clear reg              (  1 clock ) 
 857               			STS    KerBase+OFB_UATC  , R19                    ;clear active tick cnt  (  2 clocks) 
 858               		_KER_USG_UTC_SV\@:                                                                         
 859               			STS    KerBase+OFB_UTC   , R18                    ;store new val          (  2 clocks) 
 860               	.endm                                                                                          
 861               	;;===================================calc cpu usage end=====================================;; 
 862               	
 863               	
 864               	
 865               	
 866               	
 867               	;;===========================kernel disable analog domain starting==========================;; 
 868               	;used registers          : None                                                                
 869               	;arg registers           : None                                                                
 870               	;return registers        : None                                                                
 871               	;unsafe access registers : None                                                                
 872               	.macro KER_DISABLE_ANALOG_DOMAIN                          ;total 0.75uS @8MHz     ( 10 clocks) 
 873               	    #ifdef KER_IDLE_AS_SLEEP                                                                   
 874               			LDS   R18                , SRADCSRA               ;load ADCSRA            (  2 clocks) 
 875               			ANDI  R18                , 0xEF                   ;clear ADEN             (  1 clock ) 
 876               			STS   SRADCSRA           , R18                    ;set val                (  2 clocks) 
 877               			LDS   R18                , SRACSR                 ;load ACSR              (  2 clocks) 
 878               			ORI   R18                , 0x80                   ;set ACD                (  1 clock ) 
 879               			STS   SRACSR             , R18                    ;set val                (  2 clocks) 
 880               		#endif                                                                                     
 881               	.endm                                                                                          
 882               	;;=============================kernel disable analog domain end=============================;; 
 883               	
 884               	
 885               	
 886               	
 887               	
 888               	;;===============================kernel sleep config starting===============================;; 
 889               	;used registers          : R18                                                                 
 890               	;arg registers           : None                                                                
 891               	;return registers        : None                                                                
 892               	;unsafe access registers : R18                                                                 
 893               	.macro KER_SLEEP_INIT                                     ;total 0.63uS @8MHz     (  5 clocks) 
 894               	    #ifdef KER_IDLE_AS_SLEEP                                                                   
 895               	        #ifdef KER_SLEEP_MODE_IDLE                                                             
 896               			LDI   R18                , 0x00                   ;set SM[2:0] val        (  1 clock ) 
 897               			#endif                                                                                 
 898               			#ifdef KER_SLEEP_MODE_ADC_NR                                                           
 899               			LDI   R18                , 0x02                   ;set SM[2:0] val        (  1 clock ) 
 900               			#ifdef KER_SLEEP_MODE_POWER_DOWN                                                       
 901               			#endif                                                                                 
 902               			LDI   R18                , 0x04                   ;set SM[2:0] val        (  1 clock ) 
 903               			#ifdef KER_SLEEP_MODE_POWER_SAVE                                                       
 904               			#endif                                                                                 
 905               			LDI   R18                , 0x06                   ;set SM[2:0] val        (  1 clock ) 
 906               			#ifdef KER_SLEEP_MODE_STDBY                                                            
 907               			#endif                                                                                 
 908               			LDI   R18                , 0x0C                   ;set SM[2:0] val        (  1 clock ) 
 909               			#ifdef KER_SLEEP_MODE_STDBY                                                            
 910               			#endif                                                                                 
 911               			LDI   R18                , 0x0E                   ;set SM[2:0] val        (  1 clock ) 
 912               			#endif                                                                                 
 913               			STS   SRSMCR             , R18                    ;set sleep control val  (  2 clocks) 
 914               			STS   KerBase+OFB_SLCFG  , R18                    ;save sleep control val (  2 clocks) 
 915               		#endif                                                                                     
 916               	.endm                                                                                          
 917               	;;================================kernel sleep config end===================================;; 
 918               	
 919               	
 920               	
 921               	
 922               	
 923               	;;==============================kernel enter sleep mode starting============================;; 
 924               	;used registers          : None                                                                
 925               	;arg registers           : None                                                                
 926               	;return registers        : None                                                                
 927               	;unsafe access registers : None                                                                
 928               	.macro KER_ENTER_SLEEP                                    ;total 0.75uS @8MHz     (  6 clocks) 
 929               	    #ifdef KER_IDLE_AS_SLEEP                                                                   
 930               			LDS   R18                , SRSMCR                 ;load SMCR              (  2 clocks) 
 931               			ORI   R18                , 0x01                   ;set SE bit             (  1 clock ) 
 932               			STS   SRSMCR             , R18                    ;set val                (  2 clocks) 
 933               			SLEEP                                             ;sleep cpu              (  1 clock ) 
 934               		#endif                                                                                     
 935               	.endm                                                                                          
 936               	;;================================kernel enter sleep mode end===============================;; 
 937               	
 938               	
 939               	
 940               	
 941               	
 942               	;;===============================kernel exit sleep mode starting============================;; 
 943               	;used registers          : None                                                                
 944               	;arg registers           : None                                                                
 945               	;return registers        : None                                                                
 946               	;unsafe access registers : None                                                                
 947               	.macro KER_EXIT_SLEEP                                     ;total 0.63uS @8MHz     (  5 clocks) 
 948               	    #ifdef KER_IDLE_AS_SLEEP                                                                   
 949               	        LDS   R18                , SRSMCR                 ;load SMCR              (  2 clocks) 
 950               			ANDI  R18                , 0xFE                   ;clear SE bit           (  1 clock ) 
 951               			STS   SRSMCR             , R18                    ;set val                (  2 clocks) 
 952               		#endif                                                                                     
 953               	.endm                                                                                          
 954               	;;=================================kernel exit sleep mode end===============================;; 
 955               	
 956               	
 957               	
 958               	
 959               	
 960               	;;=================================ISR execution starting===================================;; 
 961               	#ifdef  KER_TIMER0_AS_TICK_SRC                                                                 
 962               	.global  __vector_16                                                                           
 963               	    __vector_16:                                          ;total 40.00uS @8MHz    (339 clocks) 
 964               		    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 965               			KER_EXIT_SLEEP                                    ;exit sleep if enabled  (  5 clocks) 
 966               	        KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 967               			KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 968               			KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 969               			KER_TICK_INCREMENT                                ;increment tick counter ( 26 clocks) 
 970               			LDI    R24               , SCH_MODE_HANDLER       ;set sch mode           (  1 clock ) 
 971               			KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
 972               			KER_CPU_USAGE                                     ;calc cpu usage         ( 26 clocks) 
 973               			KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 974               			KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
 975               		    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 976               			RETI                                              ;return from interrupt  (  4 clocks) 
 977               	#endif                                                                                         
 978               	#ifdef  KER_WDT_AS_TICK_SRC                                                                    
 979               	.global  __vector_6                                                                            
 980               	    __vector_6:                                           ;total 40.00uS @8MHz    (344 clocks) 
 981:kernel.S      **** 	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 982:kernel.S      **** 		KER_EXIT_SLEEP                                    ;exit sleep if enabled  (  5 clocks) 
 983:kernel.S      ****         KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 984:kernel.S      **** 		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 985:kernel.S      **** 		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 986:kernel.S      **** 		KER_TICK_INCREMENT                                ;increment tick counter ( 26 clocks) 
 987:kernel.S      **** 		LDI    R24               , SCH_MODE_HANDLER       ;set sch mode           (  1 clock ) 
 988:kernel.S      **** 		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
 989:kernel.S      **** 		KER_CPU_USAGE                                     ;calc cpu usage         ( 26 clocks) 
 990:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 991:kernel.S      **** 		KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
 992:kernel.S      **** 	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 993:kernel.S      **** 		LDS   R18                , SRWDTCSR               ;copy WDTCSR            (  2 clocks) 
 994:kernel.S      **** 		ORI   R18                , 0x40                   ;set WDIE               (  1 clock ) 
 995:kernel.S      **** 		STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
 996:kernel.S      **** 		RETI                                              ;return from interrupt  (  4 clocks) 
 997               	#endif                                                                                         
 998               	;;====================================ISR execution end=====================================;; 
 999               	
 1000               	
 1001               	
 1002               	
 1003               	
 1004               	;;================================SysTick reg init starting=================================;; 
 1005               	;used registers          : R18, R19, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
 1006               	;arg registers           : R24(Prescaler), R22(ReloadVal)                                      
 1007               	;return registers        : None                                                                
 1008               	;unsafe access registers : R18, R19, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
 1009               	Kernel_SysTick_Reg_Init:                                  ;total 11.50uS @8MHz    ( 92 clocks) 
1010:kernel.S      ****         CLI                                               ;disable global int     (  1 clock ) 
1011:kernel.S      **** 		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
1012:kernel.S      ****         KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 1013               			;clear reg                                                                             
1014:kernel.S      **** 		LDI   R18                , 0x00                   ;set 0x00 to R18        (  1 clock ) 
 1015               			;clear tick counter                                                                    
1016:kernel.S      **** 		STS   KerBase+OFB_TICK0  , R18                    ;clear  KerBase[0]      (  2 clocks) 
1017:kernel.S      **** 		STS   KerBase+OFB_TICK1  , R18                    ;clear  KerBase[1]      (  2 clocks) 
1018:kernel.S      **** 		STS   KerBase+OFB_TICK2  , R18                    ;clear  KerBase[2]      (  2 clocks) 
1019:kernel.S      **** 		STS   KerBase+OFB_TICK3  , R18                    ;clear  KerBase[3]      (  2 clocks) 
1020:kernel.S      **** 		STS   KerBase+OFB_TICK4  , R18                    ;clear  KerBase[4]      (  2 clocks) 
 1021               			;clear system registers                                                                
1022:kernel.S      **** 		STS   KerBase+OFB_PRS    , R18                    ;clear  KerBase[5]      (  2 clocks) 
1023:kernel.S      **** 		STS   KerBase+OFB_RLD    , R18                    ;clear  KerBase[6]      (  2 clocks) 
1024:kernel.S      **** 		STS   KerBase+OFB_TID    , R18                    ;clear  KerBase[7]      (  2 clocks) 
1025:kernel.S      **** 		STS   KerBase+OFB_NTSK   , R18                    ;clear  KerBase[8]      (  2 clocks) 
1026:kernel.S      **** 		STS   KerBase+OFB_LPR    , R18                    ;clear  KerBase[9]      (  2 clocks) 
1027:kernel.S      ****         STS   KerBase+OFB_PTID   , R18                    ;clear  KerBase[10]     (  2 clocks) 
1028:kernel.S      **** 		STS   KerBase+OFB_UTC    , R18                    ;clear  KerBase[11]     (  2 clocks) 
1029:kernel.S      **** 		STS   KerBase+OFB_UATC   , R18                    ;clear  KerBase[12]     (  2 clocks) 
1030:kernel.S      **** 		STS   KerBase+OFB_USAGE  , R18                    ;clear  KerBase[13]     (  2 clocks) 
 1031               			;clear all timer registers                                                             
 1032               			#ifdef KER_TIMER0_AS_TICK_SRC                                                          
1033:kernel.S      **** 		STS   SRTCCR0A           , R18                    ;clear TCCR0A           (  2 clocks) 
1034:kernel.S      **** 		STS   SRTCCR0B           , R18                    ;clear TCCR0B           (  2 clocks) 
1035:kernel.S      **** 		STS   SRTIMSK0           , R18                    ;clear TIMSK0           (  2 clocks) 
1036:kernel.S      **** 		STS   SRTIFR0            , R18                    ;clear TIFR0            (  2 clocks) 
1037:kernel.S      **** 		STS   SROCR0A            , R18                    ;clear OCR0A            (  2 clocks) 
1038:kernel.S      **** 		STS   SROCR0B            , R18                    ;clear OCR0B            (  2 clocks) 
1039:kernel.S      **** 		STS   SRTCNT0            , R18                    ;clear TCNT0            (  2 clocks) 
1040:kernel.S      **** 		#endif                                                                                 
1041:kernel.S      ****         #ifdef KER_WDT_AS_TICK_SRC                                                             
1042:kernel.S      **** 		WDR                                               ;reset wdt              (  1 clock ) 
1043:kernel.S      **** 		LDS   R18                , SRMCUSR                ;copy MCUSR             (  1 clock ) 
1044:kernel.S      **** 		ANDI  R18                , 0xFF & (0<<WDRF)       ;clear WDRF             (  1 clock ) 
1045:kernel.S      **** 		STS   SRMCUSR            , R18                    ;set val                (  1 clock ) 
1046:kernel.S      **** 		LDS   R18                , SRWDTCSR               ;copy WDTCSR            (  2 clocks) 
1047:kernel.S      **** 		ORI   R18                , 0x18                   ;set WDCE,WDE           (  1 clock ) 
1048:kernel.S      **** 		STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
1049:kernel.S      **** 		LDI   R18                , 0x00                   ;clear WDE              (  1 clock ) 
1050:kernel.S      **** 		STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
 1051               			#endif                                                                                 
 1052               			;save values for future use                                                            
1053:kernel.S      **** 		STS   KerBase+OFB_PRS    , R24                    ;KerBase[5] prescaler   (  2 clocks) 
1054:kernel.S      **** 		STS   KerBase+OFB_RLD    , R22                    ;KerBase[6] reload val  (  2 clocks) 
1055:kernel.S      ****         KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
1056:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1057               	;;===================================SysTick reg init end===================================;; 
 1058               	
 1059               	
 1060               	
 1061               	
 1062               	
 1063               	;;===============================kernel task create starting================================;; 
 1064               	;used registers          : R18, R19, R20, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)    
 1065               	;arg registers           : R25:R24(FuncPtr), R22(TaskPriority)                                 
 1066               	;return registers        : None                                                                
 1067               	;unsafe access registers : R18, R19, R20, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)    
 1068               	Kernel_Task_Create:                                       ;total 21.50uS @8MHz    (172 clocks) 
1069:kernel.S      ****         KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 1070               			;set priority to KerSchPr+task_id                                                      
1071:kernel.S      **** 		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
1072:kernel.S      **** 		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
1073:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
1074:kernel.S      **** 		ST    Z                  , R22                    ;save priority          (  2 clocks) 
 1075               			;set task status to KerSchSts+task_id                                                  
1076:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
1077:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
1078:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
1079:kernel.S      **** 		LDI   R18                , TASK_READY             ;set status as ready    (  1 clock ) 
1080:kernel.S      **** 		ST    Z                  , R18                    ;save status            (  2 clocks) 
 1081               			;stack pointer for current task (KerStack + KER_STK_SZ*(task_id+1) - 1) ->stack top    
1082:kernel.S      **** 		LDS   R18                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
1083:kernel.S      **** 		INC   R18                                         ;increment task_id      (  1 clock ) 
1084:kernel.S      **** 		LDI   R19                , KER_STK_SZ             ;load stack size        (  1 clock ) 
1085:kernel.S      **** 		MUL   R18                , R19                    ;multiply to get offset (  2 clocks) 
1086:kernel.S      **** 		MOV   ZL                 , R0                     ;load multiplied low    (  1 clocks) 
1087:kernel.S      **** 		MOV   ZH                 , R1                     ;load multiplied high   (  1 clocks) 
1088:kernel.S      **** 		SBIW  ZL                 , 0x01                   ;dec multiplied val-1   (  2 clocks) 
1089:kernel.S      **** 		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
1090:kernel.S      **** 		LDI   R18                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
1091:kernel.S      **** 		LDI   R19                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
1092:kernel.S      **** 		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
1093:kernel.S      **** 		ADC   ZH                 , R19                    ;add high bytes+carry   (  1 clock ) 
1094:kernel.S      **** 		OUT   IOSPL              , ZL                     ;load SPL               (  1 clock ) 
1095:kernel.S      ****         OUT   IOSPH              , ZH                     ;load SPH               (  1 clock ) 
 1096               			;function argument directly returns word address                                       
1097:kernel.S      **** 	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
1098:kernel.S      **** 		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 1099               			;push context to stack of this task                                                    
1100:kernel.S      **** 		KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 1101               			;read stack pointer of current task (necessary when restore)                           
1102:kernel.S      **** 		IN    R18                , IOSPL                  ;read SPL               (  1 clock ) 
1103:kernel.S      ****         IN    R19                , IOSPH                  ;read SPH               (  1 clock ) 
 1104               			;calculate the address where current task's SP will be stored and store SP             
1105:kernel.S      **** 		LDS   R20                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
1106:kernel.S      **** 		LSL   R20                                         ;left shift to multiply (  1 clock ) 
1107:kernel.S      **** 		LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
1108:kernel.S      **** 		LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
1109:kernel.S      **** 		ADD   ZL                 , R20                    ;add offset to array    (  1 clock ) 
1110:kernel.S      **** 		LDI   R20                , 0x00                   ;clear reg              (  1 clock ) 
1111:kernel.S      **** 		ADC   ZH                 , R20                    ;add carry if any       (  1 clock ) 
1112:kernel.S      **** 		ST    Z+                 , R18                    ;SPL at KerPSp+offset   (  2 clocks) 
1113:kernel.S      **** 		ST    Z                  , R19                    ;SPH at KerPSp+offset   (  2 clocks) 
 1114               			;increment task_id                                                                     
1115:kernel.S      **** 		LDS   R18                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
1116:kernel.S      **** 		INC   R18                                         ;increment task_id      (  1 clock ) 
1117:kernel.S      **** 		STS   KerBase+OFB_TID    , R18                    ;store task_id          (  2 clocks) 
 1118               			;increment ntask                                                                       
1119:kernel.S      **** 		LDS   R18                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
1120:kernel.S      **** 		INC   R18                                         ;increment ntask        (  1 clock ) 
1121:kernel.S      **** 		STS   KerBase+OFB_NTSK   , R18                    ;store ntask            (  2 clocks) 
1122:kernel.S      **** 		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
1123:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1124               	;;==================================kernel task create end==================================;; 
 1125               	
 1126               	
 1127               	
 1128               	
 1129               	
 1130               	;;=================================kernel start tasks starting==============================;; 
 1131               	;used registers          : R0~R31                                                              
 1132               	;arg registers           : None                                                                
 1133               	;return registers        : None                                                                
 1134               	;unsafe access registers : R18, R19, R20, R24, R25, R30(ZL), R31(ZH)                           
 1135               	Kernel_Start_Tasks:                                       ;total 25.63uS @8MHz    (205 clocks) 
1136:kernel.S      **** 		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
1137:kernel.S      **** 		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
1138:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
1139:kernel.S      **** 		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 1140               			;config timer for system tick                                                          
1141:kernel.S      **** 		KER_TIMER_INIT                                    ;init timer, int enable ( 12 clocks) 
 1142               			;execute return to jump to highest priority task                                       
1143:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1144               	;;==================================kernel start tasks end==================================;; 
 1145               	
 1146               	
 1147               	
 1148               	
 1149               	
 1150               	;;===================================kernel init starting===================================;; 
 1151               	;used registers          : R1, R18, R19, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
 1152               	;arg registers           : None                                                                
 1153               	;return registers        : None                                                                
 1154               	;unsafe access registers : R1, R18, R19, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
 1155               	Kernel_Init:                                              ;total 39.75uS @8MHz    (318 clocks) 
1156:kernel.S      **** 		CLR   R1                                          ;gcc expects            (  1 clock ) 
 1157               	        ;store stack top (for MSP) addr to KerSSZ+OFM_MSPI0:1                                  
1158:kernel.S      **** 		LDI   R18                , lo8(KerSSZ+OFM_MSPS)   ;load low address       (  1 clock ) 
1159:kernel.S      **** 		LDI   R19                , hi8(KerSSZ+OFM_MSPS)   ;load high address      (  1 clock ) 
1160:kernel.S      ****         STS   KerSSZ+OFM_MSPI+0  , R18                    ;set mspi to stack top  (  2 clocks) 
1161:kernel.S      **** 		STS   KerSSZ+OFM_MSPI+1  , R19                    ;set mspi to stack top  (  2 clocks) 
1162:kernel.S      **** 		KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 1163               			;init timer for kernel                                                                 
1164:kernel.S      **** 		LDI   R24                , 0x03                   ;set prescaler          (  1 clock ) 
1165:kernel.S      **** 		LDI   R22                , 0x82                   ;set reload val         (  1 clock ) 
1166:kernel.S      **** 		CALL  Kernel_SysTick_Reg_Init                     ;init timer             ( 92 clocks) 
 1167               			;create idle task at task_id 0, priority 0xFF (lowest)                                 
1168:kernel.S      **** 		LDI   R24                , lo8(Kernel_Task_Idle)  ;load func addr low     (  1 clock ) 
1169:kernel.S      **** 		LDI   R25                , hi8(Kernel_Task_Idle)  ;load func addr high    (  1 clock ) 
1170:kernel.S      **** 		LSR   R25                                         ;right shift to divide  (  1 clock ) 
1171:kernel.S      **** 		ROR   R24                                         ;rotate right th carry  (  1 clock ) 
1172:kernel.S      **** 		LDI   R22                , 0xFF                   ;set max val            (  1 clock ) 
1173:kernel.S      **** 		CALL  Kernel_Task_Create                          ;init idle task         (172 clocks) 
1174:kernel.S      **** 		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 1175               			;execute return to jump to task0, pushed while task init                               
1176:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1177               	;;======================================kernel init end=====================================;; 
 1178               	
 1179               	
 1180               	
 1181               	
 1182               	
 1183               	;;=================================kernel idle task starting================================;; 
 1184               	;used registers          : None                                                                
 1185               	;arg registers           : None                                                                
 1186               	;return registers        : None                                                                
 1187               	;unsafe access registers : None                                                                
 1188               	Kernel_Task_Idle:                                                                              
1189:kernel.S      **** 	    KER_SLEEP_INIT                                    ;sleep init             (  5 clocks) 
 1190               	        
1191:kernel.S      **** 		LDI   R24, 0
1192:kernel.S      **** 		LDI   R25, 0
1193:kernel.S      **** 		CALL  Debug_Init
 1194               	    _IDLE_LOOP:                                           ;forever loop                        
1195:kernel.S      **** 	    KER_DISABLE_ANALOG_DOMAIN                         ;disable adc, ac        ( 10 clocks) 
1196:kernel.S      **** 		LDI R24, 0x05
1197:kernel.S      **** 		CALL  Debug_Tx_Byte
1198:kernel.S      **** 	    KER_ENTER_SLEEP                                   ;enter sleep mode       (  6 clocks) 
1199:kernel.S      **** 		KER_EXIT_SLEEP
1200:kernel.S      **** 		RJMP  _IDLE_LOOP                                  ;return from subroutine (  2 clocks) 
 1201               	;;==================================kernel idle task end====================================;; 
 1202               	
 1203               	
 1204               	
 1205               	
 1206               	
 1207               	;;================================kernel task sleep starting================================;; 
 1208               	;used registers          : R0~R31                                                              
 1209               	;arg registers           : R25:R24(SleepTime)                                                  
 1210               	;return registers        : None                                                                
 1211               	;unsafe access registers : R18, R19, R20, R24, R25, R30(ZL), R31(ZH)                           
 1212               	Kernel_Task_Sleep:                                        ;total 37.25uS @8MHz    (298 clocks) 
 1213               	        ;save current context                                                                  
1214:kernel.S      ****         KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
1215:kernel.S      **** 		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 1216               			;create next task wakeup time (args R25:R24)                                           
1217:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
1218:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
1219:kernel.S      **** 		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
1220:kernel.S      **** 		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
1221:kernel.S      **** 		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 1222               			;update task scheduler status as blocked                                               
1223:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
1224:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
1225:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
1226:kernel.S      ****         LDI   R18                , TASK_BLOCKED           ;block task until cnt=0 (  1 clock ) 
1227:kernel.S      **** 		STD   Z+0                , R18                    ;save block flag        (  2 clocks) 
 1228               			;run scheduler, load next task sp, restore context                                     
1229:kernel.S      **** 		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
1230:kernel.S      **** 		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
1231:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
1232:kernel.S      **** 		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
1233:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1234               	;;=================================kernel task sleep end====================================;; 
 1235               	
 1236               	
 1237               	
 1238               	
 1239               	
 1240               	;;========================kernel task constant latency starting=============================;; 
 1241               	;used registers          : R18, R24, R25, R30(ZL), R31(ZH)                                     
 1242               	;arg registers           : R25:R24(SleepTime)                                                  
 1243               	;return registers        : None                                                                
 1244               	;unsafe access registers : R18, R24, R25, R30(ZL), R31(ZH)                                     
 1245               	Kernel_Task_Constant_Latency:                             ;total 3.50uS @8MHz     ( 28 clocks) 
 1246               			;create next task wakeup time (args R25:R24)                                           
1247:kernel.S      **** 		CLI                                               ;disable interrupt      (  1 clock ) 
1248:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
1249:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
1250:kernel.S      **** 		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
1251:kernel.S      **** 		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
1252:kernel.S      **** 		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 1253               			;update task scheduler status as constant latency                                      
1254:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
1255:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
1256:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
1257:kernel.S      ****         LDI   R18                , TASK_CONS_LAT          ;save as cons_lat       (  1 clock ) 
1258:kernel.S      **** 		STD   Z+0                , R18                    ;save block flag        (  2 clocks) 
1259:kernel.S      **** 		SEI                                               ;enable interrupt       (  1 clock ) 
1260:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1261               	;;=============================kernel task constant latency end=============================;; 
 1262               	
 1263               	
 1264               	
 1265               	
 1266               	
 1267               	;;=======================kernel task constant latency sleep starting========================;; 
 1268               	;used registers          : R0~R31                                                              
 1269               	;arg registers           : R25:R24(SleepTime)                                                  
 1270               	;return registers        : None                                                                
 1271               	;unsafe access registers : R18, R19, R20, R24, R25, R30(ZL), R31(ZH)                           
 1272               	Kernel_Task_Constant_Latency_Sleep:                       ;total 35.75uS @8MHz    (286 clocks) 
 1273               			;save current context                                                                  
1274:kernel.S      ****         KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
1275:kernel.S      **** 		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 1276               			;update task scheduler status as blocked                                               
1277:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
1278:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
1279:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
1280:kernel.S      ****         LDI   R18                , TASK_BLOCKED           ;blocked until cnt=0    (  1 clock ) 
1281:kernel.S      **** 		STD   Z+0                , R18                    ;save block flag        (  2 clocks) 
 1282               			;run scheduler, load next task sp, restore context                                     
1283:kernel.S      **** 		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
1284:kernel.S      **** 		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
1285:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
1286:kernel.S      **** 		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
1287:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1288               	;;=============================kernel task constant latency end=============================;; 
 1289               	
 1290               	
 1291               	
 1292               	
 1293               	
 1294               	;;===========================kernel task sleep time get starting============================;; 
 1295               	;used registers          : R18, R24, R25, R30(ZL), R31(ZH)                                     
 1296               	;arg registers           : R24(TaskID)                                                         
 1297               	;return registers        : R25:R24(SleepTime)                                                  
 1298               	;unsafe access registers : R18, R24, R25, R30(ZL), R31(ZH)                                     
 1299               	Kernel_Task_Sleep_Time_Get:                               ;total 1.88uS @8MHz     ( 15 clocks) 
1300:kernel.S      **** 		MOV   R18                , R24                    ;copy                   (  1 clock ) 
1301:kernel.S      **** 		LSL   R18                                         ;x2                     (  1 clock ) 
1302:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
1303:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
1304:kernel.S      **** 		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
1305:kernel.S      **** 		LDI   R18                , 0x00                   ;load 0                 (  1 clock ) 
1306:kernel.S      **** 		ADC   ZH                 , R18                    ;add high byte+carry    (  1 clock ) 
1307:kernel.S      **** 		LDD   R24                , Z+0                    ;load sleep time        (  2 clocks) 
1308:kernel.S      **** 		LDD   R25                , Z+1                    ;load sleep time        (  2 clocks) 
1309:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1310               	;;==============================kernel task sleep time get end==============================;; 
 1311               	
 1312               	
 1313               	
 1314               	
 1315               	
 1316               	;;==============================kernel task status get starting=============================;; 
 1317               	;used registers          : R18, R24, R30(ZL), R31(ZH)                                          
 1318               	;arg registers           : R24(TaskID)                                                         
 1319               	;return registers        : R24(TaskSts)                                                        
 1320               	;unsafe access registers : R18, R24, R30(ZL), R31(ZH)                                          
 1321               	Kernel_Task_Status_Get:                                   ;total 1.50uS @8MHz     ( 12 clocks) 
1322:kernel.S      **** 		MOV   R18                , R24                    ;copy                   (  1 clock ) 
1323:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
1324:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
1325:kernel.S      **** 		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
1326:kernel.S      **** 		LDI   R18                , 0x00                   ;load 0                 (  1 clock ) 
1327:kernel.S      **** 		ADC   ZH                 , R18                    ;add high byte+carry    (  1 clock ) 
1328:kernel.S      **** 		LD    R24                , Z                      ;load task status       (  2 clocks) 
1329:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1330               	;;================================kernel task status get end================================;; 
 1331               	
 1332               	
 1333               	
 1334               	
 1335               	
 1336               	;;================================kernel ntask get starting=================================;; 
 1337               	;used registers          : R24                                                                 
 1338               	;arg registers           : None                                                                
 1339               	;return registers        : R24(NTask)                                                          
 1340               	;unsafe access registers : R24                                                                 
 1341               	Kernel_NTask_Get:                                         ;total 0.75uS @8MHz     (  6 clocks) 
1342:kernel.S      **** 		LDS   R24                 , KerBase+OFB_NTSK      ;load ntask             (  2 clock ) 
1343:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1344               	;;===================================kernel ntask get end===================================;; 
 1345               	
 1346               	
 1347               	
 1348               	
 1349               	
 1350               	;;=============================kernel task priority get starting============================;; 
 1351               	;used registers          : R18, R24, R30(ZL), R31(ZH)                                          
 1352               	;arg registers           : R24(TaskID)                                                         
 1353               	;return registers        : R24(TaskPriority)                                                   
 1354               	;unsafe access registers : R18, R24, R30(ZL), R31(ZH)                                          
 1355               	Kernel_Task_Prio_Get:                                     ;total 1.50uS @8MHz     ( 12 clocks) 
 1356               			;get priority of the task id, arg (task_id->R24), return R24                           
1357:kernel.S      **** 		MOV   R18                , R24                    ;copy task_id           (  1 clock ) 
1358:kernel.S      **** 		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
1359:kernel.S      **** 		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
1360:kernel.S      **** 		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
1361:kernel.S      **** 		LDI   R18                , 0x00                   ;clear reg              (  1 clock ) 
1362:kernel.S      **** 		ADC   ZH                 , R18                    ;add high byte+carry    (  1 clock ) 
1363:kernel.S      **** 		LD    R24                , Z                      ;load priority          (  2 clocks) 
1364:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1365               	;;================================kernel task priority get end==============================;; 
 1366               	
 1367               	
 1368               	
 1369               	
 1370               	
 1371               	;;============================kernel lowest priority get starting===========================;; 
 1372               	;used registers          : R24                                                                 
 1373               	;arg registers           : None                                                                
 1374               	;return registers        : R24(LowestPriorityVal)                                              
 1375               	;unsafe access registers : R24                                                                 
 1376               	Kernel_Lowest_Prio_Get:                                   ;total 0.75uS @8MHz     (  6 clocks) 
1377:kernel.S      **** 		LDS   R24                , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
1378:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1379               	;;===============================kernel lowest priority get end=============================;; 
 1380               	
 1381               	
 1382               	
 1383               	
 1384               	
 1385               	;;===========================kernel high priority task id starting==========================;; 
 1386               	;used registers          : R24                                                                 
 1387               	;arg registers           : None                                                                
 1388               	;return registers        : R24(HighstPriorityTaskID)->UserTaskID (Excluding Idle Task)         
 1389               	;unsafe access registers : R24                                                                 
 1390               	Kernel_High_Prio_Task_ID_Get:                             ;total 0.88uS @8MHz     (  7 clocks) 
1391:kernel.S      **** 		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
1392:kernel.S      **** 		DEC   R24                                         ;decrement by 1         (  1 clock ) 
1393:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1394               	;;==============================kernel high priority task id end============================;; 
 1395               	
 1396               	
 1397               	
 1398               	
 1399               	
 1400               	;;=========================kernel abs high priority task id starting========================;; 
 1401               	;used registers          : R24                                                                 
 1402               	;arg registers           : None                                                                
 1403               	;return registers        : R24(HighstPriorityTaskID)->AbsoluteTaskID (Including Idle Task)     
 1404               	;unsafe access registers : R24                                                                 
 1405               	Kernel_Abs_High_Prio_Task_ID_Get:                         ;total 0.75uS @8MHz     (  6 clocks) 
1406:kernel.S      **** 		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
1407:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1408               	;;============================kernel abs high priority task id end==========================;; 
 1409               	
 1410               	
 1411               	
 1412               	
 1413               	
 1414               	;;================================kernel cpu usage get starting=============================;; 
 1415               	;used registers          : R24                                                                 
 1416               	;arg registers           : None                                                                
 1417               	;return registers        : R24(CurrentCpuUsage)->In percentage                                 
 1418               	;unsafe access registers : R24                                                                 
 1419               	Kernel_CPU_Usage_Get:                                     ;total 0.75uS @8MHz     (  6 clocks) 
 1420               			;get cpu usage, return R24                                                             
1421:kernel.S      **** 		LDS   R24                , KerBase+OFB_USAGE      ;load cpu usage         (  2 clocks) 
1422:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1423               	;;==================================kernel cpu usage get end================================;; 
DEFINED SYMBOLS
            kernel.S:19     *ABS*:000003e8 KER_TR
            kernel.S:20     *ABS*:00000003 KER_PRS
            kernel.S:21     *ABS*:00000082 KER_RLD
            kernel.S:22     *ABS*:00000080 KER_STK_SZ
            kernel.S:23     *ABS*:0000000a KER_MX_NTSK
            kernel.S:31     *ABS*:00000000 OFB_TICK0
            kernel.S:32     *ABS*:00000001 OFB_TICK1
            kernel.S:33     *ABS*:00000002 OFB_TICK2
            kernel.S:34     *ABS*:00000003 OFB_TICK3
            kernel.S:35     *ABS*:00000004 OFB_TICK4
            kernel.S:36     *ABS*:00000005 OFB_PRS
            kernel.S:37     *ABS*:00000006 OFB_RLD
            kernel.S:38     *ABS*:00000007 OFB_TID
            kernel.S:39     *ABS*:00000008 OFB_NTSK
            kernel.S:40     *ABS*:00000009 OFB_LPR
            kernel.S:41     *ABS*:0000000a OFB_PTID
            kernel.S:42     *ABS*:0000000b OFB_UTC
            kernel.S:43     *ABS*:0000000c OFB_UATC
            kernel.S:44     *ABS*:0000000d OFB_USAGE
            kernel.S:45     *ABS*:0000000e OFB_SLCFG
            kernel.S:46     *ABS*:00000000 OFM_MSPI
            kernel.S:47     *ABS*:00000002 OFM_MSPS
            kernel.S:55     *ABS*:00000000 TASK_BLOCKED
            kernel.S:56     *ABS*:00000001 TASK_READY
            kernel.S:57     *ABS*:00000002 TASK_EXECUTING
            kernel.S:58     *ABS*:00000003 TASK_SUSPENDED
            kernel.S:59     *ABS*:00000004 TASK_CONS_LAT
            kernel.S:60     *ABS*:00000000 SCH_MODE_HANDLER
            kernel.S:61     *ABS*:00000001 SCH_MODE_THREAD
            kernel.S:70     *ABS*:0000007c SRADMUX
            kernel.S:71     *ABS*:0000007b SRADCSRB
            kernel.S:72     *ABS*:0000007a SRADCSRA
            kernel.S:73     *ABS*:0000006e SRTIMSK0
            kernel.S:74     *ABS*:00000060 SRWDTCSR
            kernel.S:75     *ABS*:0000005f SRSREG
            kernel.S:76     *ABS*:0000005e SRSPH
            kernel.S:77     *ABS*:0000005d SRSPL
            kernel.S:78     *ABS*:00000055 SRMCUCR
            kernel.S:79     *ABS*:00000054 SRMCUSR
            kernel.S:80     *ABS*:00000053 SRSMCR
            kernel.S:81     *ABS*:00000050 SRACSR
            kernel.S:82     *ABS*:00000048 SROCR0B
            kernel.S:83     *ABS*:00000047 SROCR0A
            kernel.S:84     *ABS*:00000046 SRTCNT0
            kernel.S:85     *ABS*:00000045 SRTCCR0B
            kernel.S:86     *ABS*:00000044 SRTCCR0A
            kernel.S:87     *ABS*:00000035 SRTIFR0
            kernel.S:89     *ABS*:0000003f IOSREG
            kernel.S:90     *ABS*:0000003e IOSPH
            kernel.S:91     *ABS*:0000003d IOSPL
            kernel.S:92     *ABS*:00000035 IOMCUCR
            kernel.S:93     *ABS*:00000034 IOMCUSR
            kernel.S:94     *ABS*:00000033 IOSMCR
            kernel.S:95     *ABS*:00000028 IOOCR0B
            kernel.S:96     *ABS*:00000027 IOOCR0A
            kernel.S:97     *ABS*:00000026 IOTCNT0
            kernel.S:98     *ABS*:00000025 IOTCCR0B
            kernel.S:99     *ABS*:00000024 IOTCCR0A
            kernel.S:100    *ABS*:00000015 IOTIFR0
            kernel.S:111    .bss:00000000 KerBase
            kernel.S:114    .bss:00000010 KerPSP
            kernel.S:117    .bss:00000024 KerSSZ
            kernel.S:120    .bss:00000032 KerSchSts
            kernel.S:123    .bss:0000003c KerSchPr
            kernel.S:126    .bss:00000046 KerSchSlp
            kernel.S:129    .bss:0000005a KerStack
            kernel.S:980    .text:00000000 __vector_6
            kernel.S:1009   .text:000001f0 Kernel_SysTick_Reg_Init
            kernel.S:1155   .text:000004a2 Kernel_Init
            kernel.S:1068   .text:0000028e Kernel_Task_Create
            kernel.S:1135   .text:0000037e Kernel_Start_Tasks
            kernel.S:1188   .text:00000500 Kernel_Task_Idle
            kernel.S:1212   .text:00000542 Kernel_Task_Sleep
            kernel.S:1245   .text:000006d8 Kernel_Task_Constant_Latency
            kernel.S:1272   .text:00000704 Kernel_Task_Constant_Latency_Sleep
            kernel.S:1299   .text:00000886 Kernel_Task_Sleep_Time_Get
            kernel.S:1321   .text:0000089a Kernel_Task_Status_Get
            kernel.S:1341   .text:000008aa Kernel_NTask_Get
            kernel.S:1355   .text:000008b0 Kernel_Task_Prio_Get
            kernel.S:1376   .text:000008c0 Kernel_Lowest_Prio_Get
            kernel.S:1390   .text:000008c6 Kernel_High_Prio_Task_ID_Get
            kernel.S:1405   .text:000008ce Kernel_Abs_High_Prio_Task_ID_Get
            kernel.S:1419   .text:000008d4 Kernel_CPU_Usage_Get
            kernel.S:988    .text:000000b6 _KER_SCH_LOOP9
            kernel.S:988    .text:000000ec _VAL_NULL10
            kernel.S:988    .text:00000100 _VAL_NOT_NULL10
            kernel.S:988    .text:00000110 _EXIT_SLP_TIME10
            kernel.S:988    .text:0000011a _KER_CALC_PRIO9
            kernel.S:988    .text:0000013e _KER_SCH_NEXT9
            kernel.S:988    .text:0000014e _KER_SCH_EXIT9
            kernel.S:989    .text:00000168 _KER_USG_TICK15
            kernel.S:989    .text:00000182 _KER_USG_UTC_SV15
            kernel.S:1137   .text:0000038e _KER_SCH_LOOP32
            kernel.S:1137   .text:000003c4 _VAL_NULL33
            kernel.S:1137   .text:000003d8 _VAL_NOT_NULL33
            kernel.S:1137   .text:000003e8 _EXIT_SLP_TIME33
            kernel.S:1137   .text:000003f2 _KER_CALC_PRIO32
            kernel.S:1137   .text:00000416 _KER_SCH_NEXT32
            kernel.S:1137   .text:00000426 _KER_SCH_EXIT32
            kernel.S:1194   .text:00000510 _IDLE_LOOP
            kernel.S:1230   .text:000005d8 _KER_SCH_LOOP57
            kernel.S:1230   .text:0000060e _VAL_NULL58
            kernel.S:1230   .text:00000622 _VAL_NOT_NULL58
            kernel.S:1230   .text:00000632 _EXIT_SLP_TIME58
            kernel.S:1230   .text:0000063c _KER_CALC_PRIO57
            kernel.S:1230   .text:00000660 _KER_SCH_NEXT57
            kernel.S:1230   .text:00000670 _KER_SCH_EXIT57
            kernel.S:1284   .text:00000786 _KER_SCH_LOOP76
            kernel.S:1284   .text:000007bc _VAL_NULL77
            kernel.S:1284   .text:000007d0 _VAL_NOT_NULL77
            kernel.S:1284   .text:000007e0 _EXIT_SLP_TIME77
            kernel.S:1284   .text:000007ea _KER_CALC_PRIO76
            kernel.S:1284   .text:0000080e _KER_SCH_NEXT76
            kernel.S:1284   .text:0000081e _KER_SCH_EXIT76

UNDEFINED SYMBOLS
__vector_16
Kernel_SysTick_Val_Get
Kernel_SysTick_Val_Safely_Get
Kernel_Interrupt_Sts_Get
Debug_Init
Debug_Tx_Byte
