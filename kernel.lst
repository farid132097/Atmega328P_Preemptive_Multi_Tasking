   1               	# 1 "kernel.S"
   1               	
   0               	
   0               	
   2               	#include <avr/io.h>
   1               	/* Copyright (c) 2002,2003,2005,2006,2007 Marek Michalkiewicz, Joerg Wunsch
   2               	   Copyright (c) 2007 Eric B. Weddington
   3               	   All rights reserved.
   4               	
   5               	   Redistribution and use in source and binary forms, with or without
   6               	   modification, are permitted provided that the following conditions are met:
   7               	
   8               	   * Redistributions of source code must retain the above copyright
   9               	     notice, this list of conditions and the following disclaimer.
  10               	
  11               	   * Redistributions in binary form must reproduce the above copyright
  12               	     notice, this list of conditions and the following disclaimer in
  13               	     the documentation and/or other materials provided with the
  14               	     distribution.
  15               	
  16               	   * Neither the name of the copyright holders nor the names of
  17               	     contributors may be used to endorse or promote products derived
  18               	     from this software without specific prior written permission.
  19               	
  20               	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21               	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22               	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23               	  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24               	  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25               	  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26               	  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27               	  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28               	  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29               	  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30               	  POSSIBILITY OF SUCH DAMAGE. */
  31               	
  32               	/* $Id: io.h,v 1.52.2.28 2009/12/20 17:02:53 arcanum Exp $ */
  33               	
  34               	/** \file */
  35               	/** \defgroup avr_io <avr/io.h>: AVR device-specific IO definitions
  36               	    \code #include <avr/io.h> \endcode
  37               	
  38               	    This header file includes the apropriate IO definitions for the
  39               	    device that has been specified by the <tt>-mmcu=</tt> compiler
  40               	    command-line switch.  This is done by diverting to the appropriate
  41               	    file <tt>&lt;avr/io</tt><em>XXXX</em><tt>.h&gt;</tt> which should
  42               	    never be included directly.  Some register names common to all
  43               	    AVR devices are defined directly within <tt>&lt;avr/common.h&gt;</tt>,
  44               	    which is included in <tt>&lt;avr/io.h&gt;</tt>,
  45               	    but most of the details come from the respective include file.
  46               	
  47               	    Note that this file always includes the following files:
  48               	    \code 
  49               	    #include <avr/sfr_defs.h>
  50               	    #include <avr/portpins.h>
  51               	    #include <avr/common.h>
  52               	    #include <avr/version.h>
  53               	    \endcode
  54               	    See \ref avr_sfr for more details about that header file.
  55               	
  56               	    Included are definitions of the IO register set and their
  57               	    respective bit values as specified in the Atmel documentation.
  58               	    Note that inconsistencies in naming conventions,
  59               	    so even identical functions sometimes get different names on
  60               	    different devices.
  61               	
  62               	    Also included are the specific names useable for interrupt
  63               	    function definitions as documented
  64               	    \ref avr_signames "here".
  65               	
  66               	    Finally, the following macros are defined:
  67               	
  68               	    - \b RAMEND
  69               	    <br>
  70               	    The last on-chip RAM address.
  71               	    <br>
  72               	    - \b XRAMEND
  73               	    <br>
  74               	    The last possible RAM location that is addressable. This is equal to 
  75               	    RAMEND for devices that do not allow for external RAM. For devices 
  76               	    that allow external RAM, this will be larger than RAMEND.
  77               	    <br>
  78               	    - \b E2END
  79               	    <br>
  80               	    The last EEPROM address.
  81               	    <br>
  82               	    - \b FLASHEND
  83               	    <br>
  84               	    The last byte address in the Flash program space.
  85               	    <br>
  86               	    - \b SPM_PAGESIZE
  87               	    <br>
  88               	    For devices with bootloader support, the flash pagesize
  89               	    (in bytes) to be used for the \c SPM instruction. 
  90               	    - \b E2PAGESIZE
  91               	    <br>
  92               	    The size of the EEPROM page.
  93               	    
  94               	*/
  95               	
  96               	#ifndef _AVR_IO_H_
  97               	#define _AVR_IO_H_
  98               	
  99               	#include <avr/sfr_defs.h>
   1               	/* Copyright (c) 2002, Marek Michalkiewicz <marekm@amelek.gda.pl>
 100               	
 101               	#if defined (__AVR_AT94K__)
 102               	#  include <avr/ioat94k.h>
 103               	#elif defined (__AVR_AT43USB320__)
 104               	#  include <avr/io43u32x.h>
 105               	#elif defined (__AVR_AT43USB355__)
 106               	#  include <avr/io43u35x.h>
 107               	#elif defined (__AVR_AT76C711__)
 108               	#  include <avr/io76c711.h>
 109               	#elif defined (__AVR_AT86RF401__)
 110               	#  include <avr/io86r401.h>
 111               	#elif defined (__AVR_AT90PWM1__)
 112               	#  include <avr/io90pwm1.h>
 113               	#elif defined (__AVR_AT90PWM2__)
 114               	#  include <avr/io90pwmx.h>
 115               	#elif defined (__AVR_AT90PWM2B__)
 116               	#  include <avr/io90pwm2b.h>
 117               	#elif defined (__AVR_AT90PWM3__)
 118               	#  include <avr/io90pwmx.h>
 119               	#elif defined (__AVR_AT90PWM3B__)
 120               	#  include <avr/io90pwm3b.h>
 121               	#elif defined (__AVR_AT90PWM216__)
 122               	#  include <avr/io90pwm216.h>
 123               	#elif defined (__AVR_AT90PWM316__)
 124               	#  include <avr/io90pwm316.h>
 125               	#elif defined (__AVR_AT90PWM81__)
 126               	#  include <avr/io90pwm81.h>
 127               	#elif defined (__AVR_ATmega8U2__)
 128               	#  include <avr/iom8u2.h>
 129               	#elif defined (__AVR_ATmega16M1__)
 130               	#  include <avr/iom16m1.h>
 131               	#elif defined (__AVR_ATmega16U2__)
 132               	#  include <avr/iom16u2.h>
 133               	#elif defined (__AVR_ATmega16U4__)
 134               	#  include <avr/iom16u4.h>
 135               	#elif defined (__AVR_ATmega32C1__)
 136               	#  include <avr/iom32c1.h>
 137               	#elif defined (__AVR_ATmega32M1__)
 138               	#  include <avr/iom32m1.h>
 139               	#elif defined (__AVR_ATmega32U2__)
 140               	#  include <avr/iom32u2.h>
 141               	#elif defined (__AVR_ATmega32U4__)
 142               	#  include <avr/iom32u4.h>
 143               	#elif defined (__AVR_ATmega32U6__)
 144               	#  include <avr/iom32u6.h>
 145               	#elif defined (__AVR_ATmega64C1__)
 146               	#  include <avr/iom64c1.h>
 147               	#elif defined (__AVR_ATmega64M1__)
 148               	#  include <avr/iom64m1.h>
 149               	#elif defined (__AVR_ATmega128__)
 150               	#  include <avr/iom128.h>
 151               	#elif defined (__AVR_ATmega1280__)
 152               	#  include <avr/iom1280.h>
 153               	#elif defined (__AVR_ATmega1281__)
 154               	#  include <avr/iom1281.h>
 155               	#elif defined (__AVR_ATmega1284P__)
 156               	#  include <avr/iom1284p.h>
 157               	#elif defined (__AVR_ATmega128RFA1__)
 158               	#  include <avr/iom128rfa1.h>
 159               	#elif defined (__AVR_ATmega2560__)
 160               	#  include <avr/iom2560.h>
 161               	#elif defined (__AVR_ATmega2561__)
 162               	#  include <avr/iom2561.h>
 163               	#elif defined (__AVR_AT90CAN32__)
 164               	#  include <avr/iocan32.h>
 165               	#elif defined (__AVR_AT90CAN64__)
 166               	#  include <avr/iocan64.h>
 167               	#elif defined (__AVR_AT90CAN128__)
 168               	#  include <avr/iocan128.h>
 169               	#elif defined (__AVR_AT90USB82__)
 170               	#  include <avr/iousb82.h>
 171               	#elif defined (__AVR_AT90USB162__)
 172               	#  include <avr/iousb162.h>
 173               	#elif defined (__AVR_AT90USB646__)
 174               	#  include <avr/iousb646.h>
 175               	#elif defined (__AVR_AT90USB647__)
 176               	#  include <avr/iousb647.h>
 177               	#elif defined (__AVR_AT90USB1286__)
 178               	#  include <avr/iousb1286.h>
 179               	#elif defined (__AVR_AT90USB1287__)
 180               	#  include <avr/iousb1287.h>
 181               	#elif defined (__AVR_ATmega64__)
 182               	#  include <avr/iom64.h>
 183               	#elif defined (__AVR_ATmega640__)
 184               	#  include <avr/iom640.h>
 185               	#elif defined (__AVR_ATmega644__) || defined (__AVR_ATmega644A__)
 186               	#  include <avr/iom644.h>
 187               	#elif defined (__AVR_ATmega644P__)
 188               	#  include <avr/iom644p.h>
 189               	#elif defined (__AVR_ATmega644PA__)
 190               	#  include <avr/iom644pa.h>
 191               	#elif defined (__AVR_ATmega645__) || defined (__AVR_ATmega645A__) || defined (__AVR_ATmega645P__)
 192               	#  include <avr/iom645.h>
 193               	#elif defined (__AVR_ATmega6450__) || defined (__AVR_ATmega6450A__) || defined (__AVR_ATmega6450P__
 194               	#  include <avr/iom6450.h>
 195               	#elif defined (__AVR_ATmega649__) || defined (__AVR_ATmega649A__)
 196               	#  include <avr/iom649.h>
 197               	#elif defined (__AVR_ATmega6490__) || defined (__AVR_ATmega6490A__) || defined (__AVR_ATmega6490P__
 198               	#  include <avr/iom6490.h>
 199               	#elif defined (__AVR_ATmega649P__)
 200               	#  include <avr/iom649p.h>
 201               	#elif defined (__AVR_ATmega64HVE__)
 202               	#  include <avr/iom64hve.h>
 203               	#elif defined (__AVR_ATmega103__)
 204               	#  include <avr/iom103.h>
 205               	#elif defined (__AVR_ATmega32__)
 206               	#  include <avr/iom32.h>
 207               	#elif defined (__AVR_ATmega323__)
 208               	#  include <avr/iom323.h>
 209               	#elif defined (__AVR_ATmega324P__) || defined (__AVR_ATmega324A__)
 210               	#  include <avr/iom324.h>
 211               	#elif defined (__AVR_ATmega324PA__)
 212               	#  include <avr/iom324pa.h>
 213               	#elif defined (__AVR_ATmega325__)
 214               	#  include <avr/iom325.h>
 215               	#elif defined (__AVR_ATmega325P__)
 216               	#  include <avr/iom325.h>
 217               	#elif defined (__AVR_ATmega3250__)
 218               	#  include <avr/iom3250.h>
 219               	#elif defined (__AVR_ATmega3250P__)
 220               	#  include <avr/iom3250.h>
 221               	#elif defined (__AVR_ATmega328P__) || defined (__AVR_ATmega328__)
 222               	#  include <avr/iom328p.h>
   1               	/* Copyright (c) 2007 Atmel Corporation
 223               	#elif defined (__AVR_ATmega329__)
 224               	#  include <avr/iom329.h>
 225               	#elif defined (__AVR_ATmega329P__) || defined (__AVR_ATmega329PA__)
 226               	#  include <avr/iom329.h>
 227               	#elif defined (__AVR_ATmega3290__)
 228               	#  include <avr/iom3290.h>
 229               	#elif defined (__AVR_ATmega3290P__)
 230               	#  include <avr/iom3290.h>
 231               	#elif defined (__AVR_ATmega32HVB__)
 232               	#  include <avr/iom32hvb.h>
 233               	#elif defined (__AVR_ATmega406__)
 234               	#  include <avr/iom406.h>
 235               	#elif defined (__AVR_ATmega16__)
 236               	#  include <avr/iom16.h>
 237               	#elif defined (__AVR_ATmega16A__)
 238               	#  include <avr/iom16a.h>
 239               	#elif defined (__AVR_ATmega161__)
 240               	#  include <avr/iom161.h>
 241               	#elif defined (__AVR_ATmega162__)
 242               	#  include <avr/iom162.h>
 243               	#elif defined (__AVR_ATmega163__)
 244               	#  include <avr/iom163.h>
 245               	#elif defined (__AVR_ATmega164P__) || defined (__AVR_ATmega164A__)
 246               	#  include <avr/iom164.h>
 247               	#elif defined (__AVR_ATmega165__) || defined (__AVR_ATmega165A__)
 248               	#  include <avr/iom165.h>
 249               	#elif defined (__AVR_ATmega165P__)
 250               	#  include <avr/iom165p.h>
 251               	#elif defined (__AVR_ATmega168__) || defined (__AVR_ATmega168A__)
 252               	#  include <avr/iom168.h>
 253               	#elif defined (__AVR_ATmega168P__)
 254               	#  include <avr/iom168p.h>
 255               	#elif defined (__AVR_ATmega169__) || defined (__AVR_ATmega169A__)
 256               	#  include <avr/iom169.h>
 257               	#elif defined (__AVR_ATmega169P__)
 258               	#  include <avr/iom169p.h>
 259               	#elif defined (__AVR_ATmega169PA__)
 260               	#  include <avr/iom169pa.h>
 261               	#elif defined (__AVR_ATmega8HVA__)
 262               	#  include <avr/iom8hva.h>
 263               	#elif defined (__AVR_ATmega16HVA__)
 264               	#  include <avr/iom16hva.h>
 265               	#elif defined (__AVR_ATmega16HVA2__)
 266               	#  include <avr/iom16hva2.h>
 267               	#elif defined (__AVR_ATmega16HVB__)
 268               	#  include <avr/iom16hvb.h>
 269               	#elif defined (__AVR_ATmega8__)
 270               	#  include <avr/iom8.h>
 271               	#elif defined (__AVR_ATmega48__) || defined (__AVR_ATmega48A__)
 272               	#  include <avr/iom48.h>
 273               	#elif defined (__AVR_ATmega48P__)
 274               	#  include <avr/iom48p.h>
 275               	#elif defined (__AVR_ATmega88__) || defined (__AVR_ATmega88A__)
 276               	#  include <avr/iom88.h>
 277               	#elif defined (__AVR_ATmega88P__)
 278               	#  include <avr/iom88p.h>
 279               	#elif defined (__AVR_ATmega88PA__)
 280               	#  include <avr/iom88pa.h>
 281               	#elif defined (__AVR_ATmega8515__)
 282               	#  include <avr/iom8515.h>
 283               	#elif defined (__AVR_ATmega8535__)
 284               	#  include <avr/iom8535.h>
 285               	#elif defined (__AVR_AT90S8535__)
 286               	#  include <avr/io8535.h>
 287               	#elif defined (__AVR_AT90C8534__)
 288               	#  include <avr/io8534.h>
 289               	#elif defined (__AVR_AT90S8515__)
 290               	#  include <avr/io8515.h>
 291               	#elif defined (__AVR_AT90S4434__)
 292               	#  include <avr/io4434.h>
 293               	#elif defined (__AVR_AT90S4433__)
 294               	#  include <avr/io4433.h>
 295               	#elif defined (__AVR_AT90S4414__)
 296               	#  include <avr/io4414.h>
 297               	#elif defined (__AVR_ATtiny22__)
 298               	#  include <avr/iotn22.h>
 299               	#elif defined (__AVR_ATtiny26__)
 300               	#  include <avr/iotn26.h>
 301               	#elif defined (__AVR_AT90S2343__)
 302               	#  include <avr/io2343.h>
 303               	#elif defined (__AVR_AT90S2333__)
 304               	#  include <avr/io2333.h>
 305               	#elif defined (__AVR_AT90S2323__)
 306               	#  include <avr/io2323.h>
 307               	#elif defined (__AVR_AT90S2313__)
 308               	#  include <avr/io2313.h>
 309               	#elif defined (__AVR_ATtiny2313__)
 310               	#  include <avr/iotn2313.h>
 311               	#elif defined (__AVR_ATtiny2313A__)
 312               	#  include <avr/iotn2313a.h>
 313               	#elif defined (__AVR_ATtiny13__)
 314               	#  include <avr/iotn13.h>
 315               	#elif defined (__AVR_ATtiny13A__)
 316               	#  include <avr/iotn13a.h>
 317               	#elif defined (__AVR_ATtiny25__)
 318               	#  include <avr/iotn25.h>
 319               	#elif defined (__AVR_ATtiny4313__)
 320               	#  include <avr/iotn4313.h>
 321               	#elif defined (__AVR_ATtiny45__)
 322               	#  include <avr/iotn45.h>
 323               	#elif defined (__AVR_ATtiny85__)
 324               	#  include <avr/iotn85.h>
 325               	#elif defined (__AVR_ATtiny24__)
 326               	#  include <avr/iotn24.h>
 327               	#elif defined (__AVR_ATtiny24A__)
 328               	#  include <avr/iotn24a.h>
 329               	#elif defined (__AVR_ATtiny44__)
 330               	#  include <avr/iotn44.h>
 331               	#elif defined (__AVR_ATtiny44A__)
 332               	#  include <avr/iotn44a.h>
 333               	#elif defined (__AVR_ATtiny84__)
 334               	#  include <avr/iotn84.h>
 335               	#elif defined (__AVR_ATtiny261__)
 336               	#  include <avr/iotn261.h>
 337               	#elif defined (__AVR_ATtiny261A__)
 338               	#  include <avr/iotn261a.h>
 339               	#elif defined (__AVR_ATtiny461__)
 340               	#  include <avr/iotn461.h>
 341               	#elif defined (__AVR_ATtiny461A__)
 342               	#  include <avr/iotn461a.h>
 343               	#elif defined (__AVR_ATtiny861__)
 344               	#  include <avr/iotn861.h>
 345               	#elif defined (__AVR_ATtiny861A__)
 346               	#  include <avr/iotn861a.h>
 347               	#elif defined (__AVR_ATtiny43U__)
 348               	#  include <avr/iotn43u.h>
 349               	#elif defined (__AVR_ATtiny48__)
 350               	#  include <avr/iotn48.h>
 351               	#elif defined (__AVR_ATtiny88__)
 352               	#  include <avr/iotn88.h>
 353               	#elif defined (__AVR_ATtiny87__)
 354               	#  include <avr/iotn87.h>
 355               	#elif defined (__AVR_ATtiny167__)
 356               	#  include <avr/iotn167.h>
 357               	#elif defined (__AVR_AT90SCR100__)
 358               	#  include <avr/io90scr100.h>
 359               	#elif defined (__AVR_ATxmega16A4__)
 360               	#  include <avr/iox16a4.h>
 361               	#elif defined (__AVR_ATxmega16D4__)
 362               	#  include <avr/iox16d4.h>
 363               	#elif defined (__AVR_ATxmega32A4__)
 364               	#  include <avr/iox32a4.h>
 365               	#elif defined (__AVR_ATxmega32D4__)
 366               	#  include <avr/iox32d4.h>
 367               	#elif defined (__AVR_ATxmega64A1__)
 368               	#  include <avr/iox64a1.h>
 369               	#elif defined (__AVR_ATxmega64A3__)
 370               	#  include <avr/iox64a3.h>
 371               	#elif defined (__AVR_ATxmega64D3__)
 372               	#  include <avr/iox64d3.h>
 373               	#elif defined (__AVR_ATxmega128A1__)
 374               	#  include <avr/iox128a1.h>
 375               	#elif defined (__AVR_ATxmega128A3__)
 376               	#  include <avr/iox128a3.h>
 377               	#elif defined (__AVR_ATxmega128D3__)
 378               	#  include <avr/iox128d3.h>
 379               	#elif defined (__AVR_ATxmega192A3__)
 380               	#  include <avr/iox192a3.h>
 381               	#elif defined (__AVR_ATxmega192D3__)
 382               	#  include <avr/iox192d3.h>
 383               	#elif defined (__AVR_ATxmega256A3__)
 384               	#  include <avr/iox256a3.h>
 385               	#elif defined (__AVR_ATxmega256A3B__)
 386               	#  include <avr/iox256a3b.h>
 387               	#elif defined (__AVR_ATxmega256D3__)
 388               	#  include <avr/iox256d3.h>
 389               	#elif defined (__AVR_ATA6289__)
 390               	#  include <avr/ioa6289.h>
 391               	/* avr1: the following only supported for assembler programs */
 392               	#elif defined (__AVR_ATtiny28__)
 393               	#  include <avr/iotn28.h>
 394               	#elif defined (__AVR_AT90S1200__)
 395               	#  include <avr/io1200.h>
 396               	#elif defined (__AVR_ATtiny15__)
 397               	#  include <avr/iotn15.h>
 398               	#elif defined (__AVR_ATtiny12__)
 399               	#  include <avr/iotn12.h>
 400               	#elif defined (__AVR_ATtiny11__)
 401               	#  include <avr/iotn11.h>
 402               	#else
 403               	#  if !defined(__COMPILING_AVR_LIBC__)
 404               	#    warning "device type not defined"
 405               	#  endif
 406               	#endif
 407               	
 408               	#include <avr/portpins.h>
   1               	/* Copyright (c) 2003  Theodore A. Roth
 409               	
 410               	#include <avr/common.h>
   1               	/* Copyright (c) 2007 Eric B. Weddington
 411               	
 412               	#include <avr/version.h>
   1               	/* Copyright (c) 2005, Joerg Wunsch                               -*- c -*-
 413               	
 414               	/* Include fuse.h after individual IO header files. */
 415               	#include <avr/fuse.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 416               	
 417               	/* Include lock.h after individual IO header files. */
 418               	#include <avr/lock.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 419               	
   3               	#include <avr/interrupt.h>
   1               	/* Copyright (c) 2002,2005,2007 Marek Michalkiewicz
   4               	#include "kernel.h"
   1               	
   5               	#include "debug.h"
   1               	
   6               	#include "tasks.h"
   1               	
   7               	
   8               	#define  KER_CNTXT_SV_ISR
   9               	#define  KER_TSK_SW_ISR
  10               	#define  KER_CNTXT_RS_ISR
  11               	
  12               	
  13               	;define user macros 
  14               	.equ     KER_TR ,         1000   ;TickRate in Hz, only defined, not calculated
  15               	.equ     KER_PRS,         0x03   ;For prescaler 64, manually select
  16               	.equ     KER_RLD,         0x82   ;ReloadVal = 0xFF-(F_CPU/prescaler/KER_TR)
  17               	
  18               	.equ     KER_TSK0_DDR,    0x0A   ;DDRD IO address
  19               	.equ     KER_TSK0_PORT,   0x0B   ;PORTD IO address
  20               	.equ     KER_TSK0_PIN,    0x05   ;PORTD5 pin
  21               	
  22               	.equ     KER_TSK1_DDR,    0x0A   ;DDRD IO address
  23               	.equ     KER_TSK1_PORT,   0x0B   ;PORTD IO address
  24               	.equ     KER_TSK1_PIN,    0x06   ;PORTD6 pin
  25               	
  26               	.equ     KER_TSK2_DDR,    0x0A   ;DDRD IO address
  27               	.equ     KER_TSK2_PORT,   0x0B   ;PORTD IO address
  28               	.equ     KER_TSK2_PIN,    0x07   ;PORTD7 pin
  29               	
  30               	.equ     KER_STZ,         128    ;stack size for each task
  31               	
  32               	
  33               	
  34               	;define hardware register addresses macros 
  35               	.equ     SRSREG,          0x5F   ;manually defined SREG in SRAM
  36               	.equ     SRSPH,           0x5E   ;manually defined SPH in SRAM
  37               	.equ     SRSPL,           0x5D   ;manually defined SPL in SRAM
  38               	
  39               	.equ     SRTIMSK0,        0x6E   ;manually defined TIMSK0 in SRAM
  40               	.equ     SROCR0B,         0x48   ;manually defined OCR0B in SRAM
  41               	.equ     SROCR0A,         0x47   ;manually defined OCR0A in SRAM
  42               	.equ     SRTCNT0,         0x46   ;manually defined TCNT0 in SRAM
  43               	.equ     SRTCCR0B,        0x45   ;manually defined TCCR0B in SRAM
  44               	.equ     SRTCCR0A,        0x44   ;manually defined TCCR0A in SRAM
  45               	.equ     SRTIFR0,         0x35   ;manually defined TIFR0 in SRAM
  46               	
  47               	.equ     IOOCR0B,         0x28   ;manually defined OCR0B in IO
  48               	.equ     IOOCR0A,         0x27   ;manually defined OCR0A in IO
  49               	.equ     IOTCNT0,         0x26   ;manually defined TCNT0 in IO
  50               	.equ     IOTCCR0B,        0x25   ;manually defined TCCR0B in IO
  51               	.equ     IOTCCR0A,        0x24   ;manually defined TCCR0A in IO
  52               	.equ     IOTIFR0,         0x15   ;manually defined TIFR0 in IO
  53               	
  54               	.equ     IOSREG,          0x3F   ;manually defined SREG in IO
  55               	.equ     IOSPH,           0x3E   ;manually defined SPH in IO
  56               	.equ     IOSPL,           0x3D   ;manually defined SPL in IO
  57               	
  58               	
  59               	
  60               	
  61               	
  62               	
  63               	
  64               	
  65               	
  66               	
  67               	;Initialize global variables
  68               	.section  .bss
  69               	.global   Kernel                  ;declare global space for kernel
  70 0000 0000 0000 	Kernel:   .skip 10                ;5B->TickCounter, 1B->ovf, 4B->Reserved
  70      0000 0000 
  70      0000 
  71               	
  72               	.global   ker_tski                ;declare global space for task index
  73 000a 0000      	ker_tski: .skip 2                 ;1B->TaskIndex, 1B->Reserved
  74               	
  75               	.global   ker_stp                 ;declare global space for stack pointers
  76 000c 0000 0000 	ker_stp:  .skip 6                 ;2B->STP0, 2B->STP1, 2B->STP2
  76      0000 
  77               	
  78               	.global   ker_stk0                ;declare global space for stack of task0
  79 0012 0000 0000 	ker_stk0: .skip KER_STZ           ;KER_STZ B->Stack0
  79      0000 0000 
  79      0000 0000 
  79      0000 0000 
  79      0000 0000 
  79      0000 0000 
  79      0000 0000 
  79      0000 0000 
  79      0000 0000 
  79      0000 0000 
  79      0000 0000 
  79      0000 0000 
  79      0000 0000 
  79      0000 0000 
  79      0000 0000 
  79      0000 0000 
  79      0000 0000 
  79      0000 0000 
  79      0000 0000 
  79      0000 0000 
  79      0000 0000 
  79      0000 0000 
  79      0000 0000 
  79      0000 0000 
  79      0000 0000 
  79      0000 0000 
  79      0000 0000 
  79      0000 0000 
  79      0000 0000 
  79      0000 0000 
  79      0000 0000 
  79      0000 0000 
  80               	
  81               	.global   ker_stk1                ;declare global space for stack of task1
  82 0092 0000 0000 	ker_stk1: .skip KER_STZ           ;KER_STZ B->Stack1
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  82      0000 0000 
  83               	
  84               	.global   ker_stk2                ;declare global space for stack of task2
  85 0112 0000 0000 	ker_stk2: .skip KER_STZ           ;KER_STZ B->Stack2
  85      0000 0000 
  85      0000 0000 
  85      0000 0000 
  85      0000 0000 
  85      0000 0000 
  85      0000 0000 
  85      0000 0000 
  85      0000 0000 
  85      0000 0000 
  85      0000 0000 
  85      0000 0000 
  85      0000 0000 
  85      0000 0000 
  85      0000 0000 
  85      0000 0000 
  85      0000 0000 
  85      0000 0000 
  85      0000 0000 
  85      0000 0000 
  85      0000 0000 
  85      0000 0000 
  85      0000 0000 
  85      0000 0000 
  85      0000 0000 
  85      0000 0000 
  85      0000 0000 
  85      0000 0000 
  85      0000 0000 
  85      0000 0000 
  85      0000 0000 
  85      0000 0000 
  86               	
  87               	
  88               	
  89               	;Initialize vectors
  90               	.section .vectors, "ax", @progbits
  91 0000 0000 0000 	.org    0x20
  91      0000 0000 
  91      0000 0000 
  91      0000 0000 
  91      0000 0000 
  91      0000 0000 
  91      0000 0000 
  91      0000 0000 
  92:kernel.S      ****         RJMP  __vector_16
  93               	
  94               	
  95               	
  96               	;Code section start
  97               	.section .text
  98               	
  99               	
 100               	
 101               	;Initialize global functions
 102               	.global  Kernel_SysTick_Reg_Init
 103               	.global  Kernel_SysTick_Val_Get
 104               	.global  Kernel_Interrupt_Sts_Get
 105               	
 106               	.global  Kernel_Test_Task0
 107               	.global  Kernel_Test_Task1
 108               	.global  Kernel_Test_Task2
 109               	
 110               	.global  Kernel_Task0_Init
 111               	.global  Kernel_Task1_Init
 112               	.global  Kernel_Task2_Init
 113               	
 114               	.global  Kernel_Task_Debug
 115               	.global  Kernel_Task_Debug1
 116               	
 117               	;.extern  Tasks_Task0
 118               	;.extern  Tasks_Task1
 119               	;.extern  Tasks_Task2
 120               	
 121               	.macro  KER_CNTXT_SV
 122               	        ;;==============================context save========================================;; 
 123               			;; total 68 clocks for context saving                                                  
 124               	        PUSH  R0                                          ;save R0,                 (2 clocks) 
 125               			IN    R0                 , IOSREG                 ;load SREG,               (1 clock ) 
 126               			PUSH  R0                                          ;save SREG,               (2 clocks) 
 127               			PUSH  R1                                          ;save R1,                 (2 clocks) 
 128               			CLR   R1                                          ;clear R1,                (1 clock ) 
 129               			PUSH  R2                                          ;save R2,                 (2 clocks) 
 130               			PUSH  R3                                          ;save R3,                 (2 clocks) 
 131               			PUSH  R4                                          ;save R4,                 (2 clocks) 
 132               			PUSH  R5                                          ;save R5,                 (2 clocks) 
 133               			PUSH  R6                                          ;save R6,                 (2 clocks) 
 134               			PUSH  R7                                          ;save R7,                 (2 clocks) 
 135               			PUSH  R8                                          ;save R8,                 (2 clocks) 
 136               			PUSH  R9                                          ;save R9,                 (2 clocks) 
 137               			PUSH  R10                                         ;save R10,                (2 clocks) 
 138               			PUSH  R11                                         ;save R11,                (2 clocks) 
 139               			PUSH  R12                                         ;save R12,                (2 clocks) 
 140               			PUSH  R13                                         ;save R13,                (2 clocks) 
 141               			PUSH  R14                                         ;save R14,                (2 clocks) 
 142               			PUSH  R15                                         ;save R15,                (2 clocks) 
 143               			PUSH  R16                                         ;save R16,                (2 clocks) 
 144               			PUSH  R17                                         ;save R17,                (2 clocks) 
 145               			PUSH  R18                                         ;save R18,                (2 clocks) 
 146               			PUSH  R19                                         ;save R19,                (2 clocks) 
 147               			PUSH  R20                                         ;save R20,                (2 clocks) 
 148               			PUSH  R21                                         ;save R21,                (2 clocks) 
 149               			PUSH  R22                                         ;save R22,                (2 clocks) 
 150               			PUSH  R23                                         ;save R23,                (2 clocks) 
 151               			PUSH  R24                                         ;save R24,                (2 clocks) 
 152               			PUSH  R25                                         ;save R25,                (2 clocks) 
 153               			PUSH  R26                                         ;save R26,                (2 clocks) 
 154               			PUSH  R27                                         ;save R27,                (2 clocks) 
 155               			PUSH  R28                                         ;save R28,                (2 clocks) 
 156               			PUSH  R29                                         ;save R29,                (2 clocks) 
 157               			PUSH  R30                                         ;save R30,                (2 clocks) 
 158               			PUSH  R31                                         ;save R31,                (2 clocks) 
 159               	.endm
 160               	
 161               	.macro  KER_CNTXT_RS
 162               	        ;;===============================context restore====================================;; 
 163               			;; total 68 clocks for context restore                                                 
 164               			POP   R31                                         ;restore R31,             (2 clocks) 
 165               			POP   R30                                         ;restore R30,             (2 clocks) 
 166               			POP   R29                                         ;restore R29,             (2 clocks) 
 167               			POP   R28                                         ;restore R28,             (2 clocks) 
 168               			POP   R27                                         ;restore R27,             (2 clocks) 
 169               			POP   R26                                         ;restore R26,             (2 clocks) 
 170               			POP   R25                                         ;restore R25,             (2 clocks) 
 171               			POP   R24                                         ;restore R24,             (2 clocks) 
 172               			POP   R23                                         ;restore R23,             (2 clocks) 
 173               			POP   R22                                         ;restore R22,             (2 clocks) 
 174               			POP   R21                                         ;restore R21,             (2 clocks) 
 175               			POP   R20                                         ;restore R20,             (2 clocks) 
 176               			POP   R19                                         ;restore R19,             (2 clocks) 
 177               			POP   R18                                         ;restore R18,             (2 clocks) 
 178               			POP   R17                                         ;restore R17,             (2 clocks) 
 179               			POP   R16                                         ;restore R16,             (2 clocks) 
 180               			POP   R15                                         ;restore R15,             (2 clocks) 
 181               			POP   R14                                         ;restore R14,             (2 clocks) 
 182               			POP   R13                                         ;restore R13,             (2 clocks) 
 183               			POP   R12                                         ;restore R12,             (2 clocks) 
 184               			POP   R11                                         ;restore R11,             (2 clocks) 
 185               			POP   R10                                         ;restore R10,             (2 clocks) 
 186               			POP   R9                                          ;restore R9,              (2 clocks) 
 187               			POP   R8                                          ;restore R8,              (2 clocks) 
 188               			POP   R7                                          ;restore R7,              (2 clocks) 
 189               			POP   R6                                          ;restore R6,              (2 clocks) 
 190               			POP   R5                                          ;restore R5,              (2 clocks) 
 191               			POP   R4                                          ;restore R4,              (2 clocks) 
 192               			POP   R3                                          ;restore R3,              (2 clocks) 
 193               			POP   R2                                          ;restore R2,              (2 clocks) 
 194               			POP   R1                                          ;restore R1,              (2 clocks) 
 195               			POP   R0                                          ;fetch SREG,              (2 clocks) 
 196               			OUT   IOSREG             , R0                     ;load SREG,               (1 clock ) 
 197               			POP   R0                                          ;restore R0,              (2 clocks) 
 198               	.endm
 199               	
 200               	.macro  KER_TICK_INC
 201               	        ;;=============================increment tick counter===============================;;
 202               			;; total 27 clocks for reloading, 40 bit counter
 203               			LDI   R16                , 0x01                   ;load 1 to R16,           (1 clock )
 204               			LDS   R17                , Kernel+0x00            ;load Byte0,              (2 clocks)
 205               			ADD   R17                , R16                    ;add 1 with Byte0,        (1 clock )
 206               			STS   Kernel+0x00        , R17                    ;set Byte0,               (2 clocks)
 207               			LDI   R16                , 0x00                   ;load 0 to R16,           (1 clock )
 208               			LDS   R17                , Kernel+0x01            ;load Byte1,              (2 clocks)
 209               			ADC   R17                , R16                    ;add carry with Byte1,    (1 clock )
 210               			STS   Kernel+0x01        , R17                    ;set Byte1,               (2 clocks)
 211               			LDS   R17                , Kernel+0x02            ;load Byte2,              (2 clocks)
 212               			ADC   R17                , R16                    ;add carry with Byte2,    (1 clock )
 213               			STS   Kernel+0x02        , R17                    ;set Byte2,               (2 clocks)
 214               			LDS   R17                , Kernel+0x03            ;load Byte3,              (2 clocks)
 215               			ADC   R17                , R16                    ;add carry with Byte3,    (1 clock )
 216               			STS   Kernel+0x03        , R17                    ;set Byte3,               (2 clocks)
 217               			LDS   R17                , Kernel+0x04            ;load Byte4,              (2 clocks)
 218               			ADC   R17                , R16                    ;add carry with Byte4,    (1 clock )
 219               			STS   Kernel+0x04        , R17                    ;set Byte4,               (2 clocks)
 220               	.endm
 221               	
 222               	
 223               	
 224               	
 225               	
 226               	;Initialize interrupt vector subroutine
 227               	.global  __vector_16
 228               	    __vector_16:
 229               		    
 230               			;;============================if kernel debug enabled===============================;;
 231               		    #ifdef KER_DBG_ENABLE
 232:kernel.S      ****         SBI   KER_DBG_PORT       , KER_DBG_PIN            ;set gpio,                (2 clocks)
 233               			#endif
 234               			
 235               			
 236               			;;==============================context save========================================;;
 237               			;; total 68 clocks for context saving
 238               			#ifdef KER_CNTXT_SV_ISR
 239:kernel.S      ****         KER_CNTXT_SV
 240               			#endif
 241               			
 242               			;;=============================reload counter value=================================;;
 243               			;; total 4 clocks for reloading
 244:kernel.S      **** 		LDS   R16                , Kernel+0x08            ;fetch reload value,      (2 clocks) 
 245:kernel.S      **** 		STS   SRTCNT0            , R16                    ;Set value to TCNT0,      (2 clocks) 
 246               			
 247               			
 248               			;;=============================increment tick counter===============================;;
 249               			;; total 27 clocks for reloading, 40 bit counter
 250:kernel.S      **** 		KER_TICK_INC
 251               			
 252               			
 253               			;;========================check current task index, save SP=========================;;
 254               			;;
 255               			#ifdef KER_TSK_SW_ISR
 256:kernel.S      **** 	    LDS   R16                , ker_tski               ;fetch task index,        (2 clocks)
 257:kernel.S      **** 		CPI   R16                , 0                      ;check if val!=0          (1 clock )
 258:kernel.S      **** 		BRNE  TSK1                                        ;goto saving task1 SP     (2 clocks)
 259               			
 260               			
 261               			
 262               			;;======================save stack pointer0, set task index 1=======================;;
 263               			;;
 264               		TSK0:
 265:kernel.S      **** 	    IN    R24                , IOSPL                  ;fetch SPL0,              (1 clock )
 266:kernel.S      **** 		IN    R25                , IOSPH                  ;fetch SPH0,              (1 clock )
 267:kernel.S      **** 		STS   ker_stp+0x00       , R24                    ;load  SPL0,              (2 clocks)
 268:kernel.S      **** 		STS   ker_stp+0x01       , R25                    ;load  SPH0,              (2 clocks)
 269:kernel.S      **** 		LDI   R16                , 0x01                   ;set ker_tski to 1,       (1 clock )
 270:kernel.S      **** 		STS   ker_tski           , R16                    ;load  ker_tski=1,        (2 clocks)
 271:kernel.S      **** 		LDS   R24                , ker_stp+0x02           ;fetch SPL0,              (2 clocks)
 272:kernel.S      **** 		LDS   R25                , ker_stp+0x03           ;fetch SPH0,              (2 clocks)
 273:kernel.S      **** 		OUT   IOSPL              , R24                    ;load SPL0,               (1 clock )
 274:kernel.S      **** 		OUT   IOSPH              , R25                    ;load SPH0,               (1 clock )
 275:kernel.S      **** 		RJMP  RS_CNTXT                                    ;jump to restore context, (2 clocks)
 276               			
 277               			
 278               		    ;;======================save stack pointer1, set task index 0=======================;;
 279               			;;
 280               		TSK1:
 281:kernel.S      **** 	    IN    R24                , IOSPL                  ;fetch SPL0,              (1 clock )
 282:kernel.S      **** 		IN    R25                , IOSPH                  ;fetch SPH0,              (1 clock )
 283:kernel.S      **** 		STS   ker_stp+0x02       , R24                    ;load  SPL0,              (2 clocks)
 284:kernel.S      **** 		STS   ker_stp+0x03       , R25                    ;load  SPH0,              (2 clocks)
 285:kernel.S      **** 		LDI   R16                , 0x00                   ;set ker_tski to 0,       (1 clock )
 286:kernel.S      **** 		STS   ker_tski           , R16                    ;load  ker_tski=0,        (2 clocks)
 287:kernel.S      **** 		LDS   R24                , ker_stp+0x00           ;fetch SPL0,              (2 clocks)
 288:kernel.S      **** 		LDS   R25                , ker_stp+0x01           ;fetch SPH0,              (2 clocks)
 289:kernel.S      **** 		OUT   IOSPL              , R24                    ;load SPL0,               (1 clock )
 290:kernel.S      **** 		OUT   IOSPH              , R25                    ;load SPH0,               (1 clock )
 291:kernel.S      **** 		RJMP  RS_CNTXT                                    ;jump to restore context, (2 clocks)
 292               			#endif
 293               			
 294               			
 295               		RS_CNTXT:
 296               			;;===============================context restore====================================;;
 297               			;; total 68 clocks for context restore
 298               			#ifdef KER_CNTXT_RS_ISR
 299:kernel.S      **** 		KER_CNTXT_RS
 300               			#endif
 301               			
 302               			;;============================if kernel debug enabled===============================;;
 303               			#ifdef KER_DBG_ENABLE
 304:kernel.S      **** 		CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear gpio,              (2 clocks)
 305               			#endif
 306               			
 307:kernel.S      **** 		RETI                                              ;return from interrupt,   (4 clocks) 
 308               	
 309               	
 310               	
 311               	;;====================================SysTick Reg Init=======================================;;
 312               	;; total 32 clocks for SysTick Reg Init, omited debug gpio config
 313               	Kernel_SysTick_Reg_Init:
 314               	        ;clear all kernel variables
 315:kernel.S      **** 		LDI   R16                , 0x00                   ;set 0x00 to R16,         (1 clock )
 316:kernel.S      **** 		STS   Kernel+0x00        , R16                    ;clear  kernel[0],        (2 clocks)
 317:kernel.S      **** 		STS   Kernel+0x01        , R16                    ;clear  kernel[1],        (2 clocks)
 318:kernel.S      **** 		STS   Kernel+0x02        , R16                    ;clear  kernel[2],        (2 clocks)
 319:kernel.S      **** 		STS   Kernel+0x03        , R16                    ;clear  kernel[3],        (2 clocks)
 320:kernel.S      **** 		STS   Kernel+0x04        , R16                    ;clear  kernel[4],        (2 clocks)
 321:kernel.S      **** 		STS   Kernel+0x05        , R16                    ;clear  kernel[5],        (2 clocks)
 322:kernel.S      **** 		STS   Kernel+0x06        , R16                    ;clear  kernel[6],        (2 clocks)
 323:kernel.S      **** 		STS   Kernel+0x07        , R16                    ;clear  kernel[7],        (2 clocks)
 324:kernel.S      **** 		STS   Kernel+0x08        , R16                    ;clear  kernel[8],        (2 clocks)
 325               			
 326               			#ifdef KER_DBG_ENABLE
 327:kernel.S      **** 		SBI   KER_DBG_DDR        , KER_DBG_PIN            ;set bit in DDR,          (2 clocks) 
 328:kernel.S      **** 		CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear port bit,          (2 clocks) 
 329               			#endif
 330               			
 331               			
 332:kernel.S      ****         CLI                                               ;disable global interrupt,(1 clock ) 
 333:kernel.S      **** 		LDI   R16                , 0x00                   ;store r16 with 0,        (1 clock ) 
 334:kernel.S      **** 		STS   SRTCCR0A           , R16                    ;clear TCCR0A,            (2 clocks) 
 335:kernel.S      **** 		STS   SRTCCR0B           , R16                    ;clear TCCR0B,            (2 clocks) 
 336:kernel.S      **** 		STS   SRTIMSK0           , R16                    ;clear TIMSK0,            (2 clocks) 
 337:kernel.S      **** 		STS   SRTIFR0            , R16                    ;clear TIFR0,             (2 clocks) 
 338:kernel.S      **** 		STS   SROCR0A            , R16                    ;clear OCR0A,             (2 clocks) 
 339:kernel.S      **** 		STS   SROCR0B            , R16                    ;clear OCR0B,             (2 clocks) 
 340:kernel.S      **** 		STS   SRTCNT0            , R16                    ;clear TCNT0,             (2 clocks) 
 341:kernel.S      **** 		LDI   R16                , KER_PRS                ;prescaler 64,            (1 clock ) 
 342:kernel.S      **** 		STS   SRTCCR0B           , R16                    ;set to TCCR0B,           (2 clocks)
 343:kernel.S      **** 		LDI   R16                , KER_RLD                ;reload value (130),      (1 clock ) 
 344:kernel.S      **** 		STS   Kernel+0x08        , R16                    ;Kernel[5] reload value,  (2 clocks) 
 345:kernel.S      **** 		STS   SRTCNT0            , R16                    ;set to TCNT0,            (2 clocks) 
 346:kernel.S      **** 		LDI   R16                , 0x01                   ;store with TOIE0 enabled,(1 clock ) 
 347:kernel.S      **** 		STS   SRTIMSK0           , R16                    ;set to TIMSK0,           (2 clocks) 
 348               			;SEI                                               ;enable global interrupt, (1 clock ) 
 349:kernel.S      **** 		RET                                               ;return from subroutine,  (4 clocks) 
 350               	
 351               	
 352               	
 353               	;;===================================SysTick Value Get======================================;;
 354               	;; total 20 clocks for SysTick Value Get
 355               	;; interrupts disabled for 16 clocks
 356               	Kernel_SysTick_Val_Get:
 357:kernel.S      ****         IN    R16                , IOSREG                 ;Save SREG,               (1 clock ) 
 358:kernel.S      ****         CLI                                               ;Disable interrupts,      (1 clock ) 
 359:kernel.S      **** 		LDS   R18		         , Kernel+0x00            ;Byte0 -> R18 (LSB),      (2 clocks) 
 360:kernel.S      **** 		LDS   R19		         , Kernel+0x01            ;Byte1 -> R19,            (2 clocks) 
 361:kernel.S      **** 		LDS   R20		         , Kernel+0x02            ;Byte2 -> R20,            (2 clocks) 
 362:kernel.S      **** 		LDS   R21		         , Kernel+0x03            ;Byte3 -> R21,            (2 clocks) 
 363:kernel.S      **** 		LDS   R22		         , Kernel+0x04            ;Byte4 -> R22,            (2 clocks) 
 364:kernel.S      **** 		LDI   R23		         , 0x00                   ;Byte5 -> R23,            (1 clocks) 
 365:kernel.S      **** 		LDI   R24		         , 0x00                   ;Byte6 -> R24,            (1 clocks) 
 366:kernel.S      **** 		LDI   R25		         , 0x00                   ;Byte7 -> R25 (MSB),      (1 clocks) 
 367:kernel.S      **** 		OUT   IOSREG             , R16          		  ;Restore SREG,            (1 clock )
 368:kernel.S      **** 		RET                                               ;return from subroutine,  (4 clocks) 
 369               	
 370               	
 371               	
 372               	;;=================================Interrupt Status Get=====================================;;
 373               	;; total 10 clocks for Interrupt Status Get
 374               	Kernel_Interrupt_Sts_Get:
 375:kernel.S      ****         LDI   R24		         , 0x00                   ;clear R24,               (1 clock ) 
 376:kernel.S      ****         IN    R16		         , IOSREG                 ;save SREG in R16,        (1 clock )
 377:kernel.S      **** 		SBRC  R16		         , 0x07                   ;check I flag->bit7,      (3 clocks)
 378:kernel.S      **** 		LDI   R24		         , 0x01                   ;set R24 to 1,            (1 clock ) 
 379:kernel.S      **** 		RET                                               ;return from subroutine,  (4 clocks) 
 380               	
 381               	
 382               	
 383               	
 384               	
 385               	
 386               	
 387               	
 388               	
 389               	
 390               	
 391               	
 392               	
 393               	;;===================================Kernel Test Task0======================================;;
 394               	Kernel_Test_Task0:
 395               	        ;initialize DDR and Port register, total 4 clocks
 396:kernel.S      ****         SBI   KER_TSK0_DDR       , KER_TSK0_PIN           ;set bit in DDR,          (2 clocks) 
 397:kernel.S      **** 		CBI   KER_TSK0_PORT      , KER_TSK0_PIN           ;clear port bit,          (2 clocks)
 398               			 
 399               	    LOOP0:
 400               		    ;pin toggle, total 5 clocks
 401:kernel.S      **** 		IN    R16                , KER_TSK0_PORT          ;load PORT val,           (2 clocks)
 402:kernel.S      **** 		LDI   R17                , (1<<KER_TSK0_PIN)      ;bit mask for port pin    (1 clock )
 403:kernel.S      **** 		EOR   R16                , R17                    ;XOR with current val     (1 clock )
 404:kernel.S      **** 		OUT   KER_TSK0_PORT      , R16                    ;set new PORT val,        (1 clock )
 405               			
 406               			;assign delay loop count val, for 30ms 
 407:kernel.S      **** 		LDI   R16                , 0xEB                   ;set loop cnt val,        (1 clock )
 408               			
 409               	    DLY00:
 410:kernel.S      **** 	    LDI   R17                , 0xFF                   ;set loop cnt val,        (1 clock )
 411               			
 412               		DLY01:                                                ;inner loop,127.5uS@8Mhz  (4 clocks)
 413:kernel.S      **** 		NOP                                               ;no operation,            (1 clock )
 414:kernel.S      **** 		DEC   R17                                         ;decrement R17 val,       (1 clock )
 415:kernel.S      **** 		BRNE  DLY01                                       ;if R17 not equal to 0,   (2 clock ) 
 416:kernel.S      **** 		DEC   R16                                         ;decrement R16 val,       (1 clock )
 417:kernel.S      **** 		BRNE  DLY00                                       ;if R16 not equal to 0,   (2 clock ) 
 418:kernel.S      **** 		RJMP  LOOP0                                       ;if R16 is 0->jump,       (2 clock )  
 419               	
 420               	
 421               	
 422               	;;===================================Kernel Test Task1======================================;;
 423               	Kernel_Test_Task1:
 424               	        ;initialize DDR and Port register, total 4 clocks
 425:kernel.S      ****         SBI   KER_TSK1_DDR       , KER_TSK1_PIN           ;set bit in DDR,          (2 clocks) 
 426:kernel.S      **** 		CBI   KER_TSK1_PORT      , KER_TSK1_PIN           ;clear port bit,          (2 clocks)
 427               			 
 428               	    LOOP1:
 429               		    ;pin toggle, total 5 clocks
 430:kernel.S      **** 		IN    R16                , KER_TSK1_PORT          ;load PORT val,           (2 clocks)
 431:kernel.S      **** 		LDI   R17                , (1<<KER_TSK1_PIN)      ;bit mask for port pin    (1 clock )
 432:kernel.S      **** 		EOR   R16                , R17                    ;XOR with current val     (1 clock )
 433:kernel.S      **** 		OUT   KER_TSK1_PORT      , R16                    ;set new PORT val,        (1 clock )
 434               			
 435               			;assign delay loop count val, for 20ms 
 436:kernel.S      **** 		LDI   R16                , 0x9D                   ;set loop cnt val,        (1 clock )
 437               			
 438               	    DLY10:
 439:kernel.S      **** 	    LDI   R17                , 0xFF                   ;set loop cnt val,        (1 clock )
 440               			
 441               		DLY11:                                                ;inner loop,127.5uS@8Mhz  (4 clocks)
 442:kernel.S      **** 		NOP                                               ;no operation,            (1 clock )
 443:kernel.S      **** 		DEC   R17                                         ;decrement R17 val,       (1 clock )
 444:kernel.S      **** 		BRNE  DLY11                                       ;if R17 not equal to 0,   (2 clock ) 
 445:kernel.S      **** 		DEC   R16                                         ;decrement R16 val,       (1 clock )
 446:kernel.S      **** 		BRNE  DLY10                                       ;if R16 not equal to 0,   (2 clock ) 
 447:kernel.S      **** 		RJMP  LOOP1                                       ;if R16 is 0->jump,       (2 clock )  
 448               	
 449               	
 450               	;;===================================Kernel Test Task2======================================;;
 451               	Kernel_Test_Task2:
 452               	        ;initialize DDR and Port register, total 4 clocks
 453:kernel.S      ****         SBI   KER_TSK2_DDR       , KER_TSK2_PIN           ;set bit in DDR,          (2 clocks) 
 454:kernel.S      **** 		CBI   KER_TSK2_PORT      , KER_TSK2_PIN           ;clear port bit,          (2 clocks)
 455               			 
 456               	    LOOP2:
 457               		    ;pin toggle, total 5 clocks
 458:kernel.S      **** 		IN    R16                , KER_TSK2_PORT          ;load PORT val,           (2 clocks)
 459:kernel.S      **** 		LDI   R17                , (1<<KER_TSK2_PIN)      ;bit mask for port pin    (1 clock )
 460:kernel.S      **** 		EOR   R16                , R17                    ;XOR with current val     (1 clock )
 461:kernel.S      **** 		OUT   KER_TSK2_PORT      , R16                    ;set new PORT val,        (1 clock )
 462               			
 463               			;assign delay loop count val, for 30ms 
 464:kernel.S      **** 		LDI   R16                , 0xEB                   ;set loop cnt val,        (1 clock )
 465               			
 466               	    DLY20:
 467:kernel.S      **** 	    LDI   R17                , 0xFF                   ;set loop cnt val,        (1 clock )
 468               			
 469               		DLY21:                                                ;inner loop, 127.5uS@8Mhz (4 clocks)
 470:kernel.S      **** 		NOP                                               ;no operation,            (1 clock )
 471:kernel.S      **** 		DEC   R17                                         ;decrement R17 val,       (1 clock )
 472:kernel.S      **** 		BRNE  DLY21                                       ;if R17 not equal to 0,   (2 clock ) 
 473:kernel.S      **** 		DEC   R16                                         ;decrement R16 val,       (1 clock )
 474:kernel.S      **** 		BRNE  DLY20                                       ;if R16 not equal to 0,   (2 clock ) 
 475:kernel.S      **** 		RJMP  LOOP2                                       ;if R16 is 0->jump,       (2 clock ) 
 476               	    
 477               	
 478               	;;====================================Kernel Task0 Init=====================================;;
 479               	Kernel_Task0_Init:
 480               	        ;init stack for task0
 481               			
 482               			;save MSP
 483:kernel.S      **** 		IN    R2                 , IOSPL
 484:kernel.S      **** 		IN    R3                 , IOSPH
 485               			
 486               			;set stack for task0
 487:kernel.S      **** 		LDI   R16                , lo8(ker_stk0+KER_STZ)  ;fetch top SPL0,          (1 clock )
 488:kernel.S      **** 		LDI   R17                , hi8(ker_stk0+KER_STZ)  ;fetch top SPH0,          (1 clock )
 489:kernel.S      **** 		OUT   IOSPL              , R16                    ;load SPL                 (1 clock )
 490:kernel.S      ****         OUT   IOSPH              , R17                    ;load SPH                 (1 clock )
 491               			
 492               			;psuh return address of task0
 493:kernel.S      **** 		LDI   R16                , lo8(Tasks_Task0)       ;fetch task address low   (1 clock )
 494:kernel.S      **** 		LDI   R17                , hi8(Tasks_Task0)       ;fetch task address high  (1 clock )
 495:kernel.S      **** 		LSR   R17                                         ;right shift high byte    (1 clock )
 496:kernel.S      **** 		ROR   R16                                         ;rotate right th carry    (1 clock )
 497:kernel.S      **** 		PUSH  R16                                         ;push word addr low       (2 clocks)
 498:kernel.S      **** 		PUSH  R17                                         ;push word addr high      (2 clocks) 
 499               			
 500:kernel.S      ****         KER_CNTXT_SV
 501               			
 502               			;save PSP of task0
 503:kernel.S      ****         IN    R16                , IOSPL                  ;read SPL                 (1 clock )
 504:kernel.S      ****         IN    R17                , IOSPH                  ;read SPH                 (1 clock )
 505:kernel.S      ****         STS   ker_stp + 0        , R16                    ;set stp of task0         (2 clocks) 
 506:kernel.S      ****         STS   ker_stp + 1        , R17                    ;set stp of task0         (2 clocks) 
 507               			
 508               			;set task index -> 0
 509:kernel.S      **** 		LDI   R16                , 0x00                   ;set R16 to 0x00          (1 clock )
 510:kernel.S      **** 		STS   ker_tski           , R16                    ;set ker_tski = 0         (2 clocks) 
 511               			
 512               			;restore MSP
 513:kernel.S      **** 		OUT   IOSPL              , R2                     ;load SPL                 (1 clock )
 514:kernel.S      ****         OUT   IOSPH              , R3                     ;load SPH                 (1 clock )
 515:kernel.S      ****         RET                                               ;return from subroutine   (4 clocks) 
 516               	
 517               	
 518               	
 519               	;;====================================Kernel Task1 Init=====================================;;
 520               	Kernel_Task1_Init:
 521               	        ;init stack for task1
 522               			;save MSP
 523               			;IN    R2                 , IOSPL
 524               			;IN    R3                 , IOSPH
 525               			
 526               			;set stack for task1
 527:kernel.S      **** 		LDI   R16                , lo8(ker_stk1+KER_STZ)  ;fetch top SPL1,          (1 clock )
 528:kernel.S      **** 		LDI   R17                , hi8(ker_stk1+KER_STZ)  ;fetch top SPH1,          (1 clock )
 529:kernel.S      **** 		OUT   IOSPL              , R16                    ;load SPL                 (1 clock )
 530:kernel.S      ****         OUT   IOSPH              , R17                    ;load SPH                 (1 clock )
 531               			
 532               			;psuh return address of task1
 533:kernel.S      **** 		LDI   R16                , lo8(Tasks_Task1)       ;fetch task address low   (1 clock )
 534:kernel.S      **** 		LDI   R17                , hi8(Tasks_Task1)       ;fetch task address high  (1 clock )
 535:kernel.S      **** 		LSR   R17                                         ;right shift high byte    (1 clock )
 536:kernel.S      **** 		ROR   R16                                         ;rotate right th carry    (1 clock )
 537:kernel.S      **** 		PUSH  R16                                         ;push word addr low       (2 clocks)
 538:kernel.S      **** 		PUSH  R17                                         ;push word addr high      (2 clocks) 
 539               			
 540               	        ;KER_CNTXT_SV
 541               			
 542               			;save PSP of task1
 543:kernel.S      ****         IN    R16                , IOSPL                  ;read SPL                 (1 clock )
 544:kernel.S      ****         IN    R17                , IOSPH                  ;read SPH                 (1 clock )
 545:kernel.S      ****         STS   ker_stp + 2        , R16                    ;set stp of task1         (2 clocks) 
 546:kernel.S      ****         STS   ker_stp + 3        , R17                    ;set stp of task1         (2 clocks) 
 547               			
 548               			;set task index -> 1
 549:kernel.S      **** 		LDI   R16                , 0x01                   ;set R16 to 0x01          (1 clock )
 550:kernel.S      **** 		STS   ker_tski           , R16                    ;set ker_tski = 1         (2 clocks) 
 551               			
 552               			;restore MSP
 553               			;OUT   IOSPL              , R2                     ;load SPL                 (1 clock )
 554               	        ;OUT   IOSPH              , R3                     ;load SPH                 (1 clock )
 555:kernel.S      **** 		SEI
 556:kernel.S      ****         RET                                               ;return from subroutine   (4 clocks)  
DEFINED SYMBOLS
            kernel.S:14     *ABS*:000003e8 KER_TR
            kernel.S:15     *ABS*:00000003 KER_PRS
            kernel.S:16     *ABS*:00000082 KER_RLD
            kernel.S:18     *ABS*:0000000a KER_TSK0_DDR
            kernel.S:19     *ABS*:0000000b KER_TSK0_PORT
            kernel.S:20     *ABS*:00000005 KER_TSK0_PIN
            kernel.S:22     *ABS*:0000000a KER_TSK1_DDR
            kernel.S:23     *ABS*:0000000b KER_TSK1_PORT
            kernel.S:24     *ABS*:00000006 KER_TSK1_PIN
            kernel.S:26     *ABS*:0000000a KER_TSK2_DDR
            kernel.S:27     *ABS*:0000000b KER_TSK2_PORT
            kernel.S:28     *ABS*:00000007 KER_TSK2_PIN
            kernel.S:30     *ABS*:00000080 KER_STZ
            kernel.S:35     *ABS*:0000005f SRSREG
            kernel.S:36     *ABS*:0000005e SRSPH
            kernel.S:37     *ABS*:0000005d SRSPL
            kernel.S:39     *ABS*:0000006e SRTIMSK0
            kernel.S:40     *ABS*:00000048 SROCR0B
            kernel.S:41     *ABS*:00000047 SROCR0A
            kernel.S:42     *ABS*:00000046 SRTCNT0
            kernel.S:43     *ABS*:00000045 SRTCCR0B
            kernel.S:44     *ABS*:00000044 SRTCCR0A
            kernel.S:45     *ABS*:00000035 SRTIFR0
            kernel.S:47     *ABS*:00000028 IOOCR0B
            kernel.S:48     *ABS*:00000027 IOOCR0A
            kernel.S:49     *ABS*:00000026 IOTCNT0
            kernel.S:50     *ABS*:00000025 IOTCCR0B
            kernel.S:51     *ABS*:00000024 IOTCCR0A
            kernel.S:52     *ABS*:00000015 IOTIFR0
            kernel.S:54     *ABS*:0000003f IOSREG
            kernel.S:55     *ABS*:0000003e IOSPH
            kernel.S:56     *ABS*:0000003d IOSPL
            kernel.S:70     .bss:00000000 Kernel
            kernel.S:73     .bss:0000000a ker_tski
            kernel.S:76     .bss:0000000c ker_stp
            kernel.S:79     .bss:00000012 ker_stk0
            kernel.S:82     .bss:00000092 ker_stk1
            kernel.S:85     .bss:00000112 ker_stk2
            kernel.S:228    .text:00000000 __vector_16
            kernel.S:313    .text:00000116 Kernel_SysTick_Reg_Init
            kernel.S:356    .text:00000178 Kernel_SysTick_Val_Get
            kernel.S:374    .text:0000019a Kernel_Interrupt_Sts_Get
            kernel.S:394    .text:000001a4 Kernel_Test_Task0
            kernel.S:423    .text:000001c0 Kernel_Test_Task1
            kernel.S:451    .text:000001dc Kernel_Test_Task2
            kernel.S:479    .text:000001f8 Kernel_Task0_Init
            kernel.S:520    .text:0000026e Kernel_Task1_Init
            kernel.S:280    .text:000000ae TSK1
            kernel.S:264    .text:0000008e TSK0
            kernel.S:295    .text:000000ce RS_CNTXT
            kernel.S:399    .text:000001a8 LOOP0
            kernel.S:409    .text:000001b2 DLY00
            kernel.S:412    .text:000001b4 DLY01
            kernel.S:428    .text:000001c4 LOOP1
            kernel.S:438    .text:000001ce DLY10
            kernel.S:441    .text:000001d0 DLY11
            kernel.S:456    .text:000001e0 LOOP2
            kernel.S:466    .text:000001ea DLY20
            kernel.S:469    .text:000001ec DLY21

UNDEFINED SYMBOLS
Kernel_Task2_Init
Kernel_Task_Debug
Kernel_Task_Debug1
Tasks_Task0
Tasks_Task1
