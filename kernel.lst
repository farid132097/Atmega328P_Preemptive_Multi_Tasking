   1               	# 1 "kernel.S"
   1               	
   0               	
   0               	
   2               	#include <avr/io.h>
   1               	/* Copyright (c) 2002,2003,2005,2006,2007 Marek Michalkiewicz, Joerg Wunsch
   2               	   Copyright (c) 2007 Eric B. Weddington
   3               	   All rights reserved.
   4               	
   5               	   Redistribution and use in source and binary forms, with or without
   6               	   modification, are permitted provided that the following conditions are met:
   7               	
   8               	   * Redistributions of source code must retain the above copyright
   9               	     notice, this list of conditions and the following disclaimer.
  10               	
  11               	   * Redistributions in binary form must reproduce the above copyright
  12               	     notice, this list of conditions and the following disclaimer in
  13               	     the documentation and/or other materials provided with the
  14               	     distribution.
  15               	
  16               	   * Neither the name of the copyright holders nor the names of
  17               	     contributors may be used to endorse or promote products derived
  18               	     from this software without specific prior written permission.
  19               	
  20               	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21               	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22               	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23               	  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24               	  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25               	  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26               	  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27               	  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28               	  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29               	  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30               	  POSSIBILITY OF SUCH DAMAGE. */
  31               	
  32               	/* $Id: io.h,v 1.52.2.28 2009/12/20 17:02:53 arcanum Exp $ */
  33               	
  34               	/** \file */
  35               	/** \defgroup avr_io <avr/io.h>: AVR device-specific IO definitions
  36               	    \code #include <avr/io.h> \endcode
  37               	
  38               	    This header file includes the apropriate IO definitions for the
  39               	    device that has been specified by the <tt>-mmcu=</tt> compiler
  40               	    command-line switch.  This is done by diverting to the appropriate
  41               	    file <tt>&lt;avr/io</tt><em>XXXX</em><tt>.h&gt;</tt> which should
  42               	    never be included directly.  Some register names common to all
  43               	    AVR devices are defined directly within <tt>&lt;avr/common.h&gt;</tt>,
  44               	    which is included in <tt>&lt;avr/io.h&gt;</tt>,
  45               	    but most of the details come from the respective include file.
  46               	
  47               	    Note that this file always includes the following files:
  48               	    \code 
  49               	    #include <avr/sfr_defs.h>
  50               	    #include <avr/portpins.h>
  51               	    #include <avr/common.h>
  52               	    #include <avr/version.h>
  53               	    \endcode
  54               	    See \ref avr_sfr for more details about that header file.
  55               	
  56               	    Included are definitions of the IO register set and their
  57               	    respective bit values as specified in the Atmel documentation.
  58               	    Note that inconsistencies in naming conventions,
  59               	    so even identical functions sometimes get different names on
  60               	    different devices.
  61               	
  62               	    Also included are the specific names useable for interrupt
  63               	    function definitions as documented
  64               	    \ref avr_signames "here".
  65               	
  66               	    Finally, the following macros are defined:
  67               	
  68               	    - \b RAMEND
  69               	    <br>
  70               	    The last on-chip RAM address.
  71               	    <br>
  72               	    - \b XRAMEND
  73               	    <br>
  74               	    The last possible RAM location that is addressable. This is equal to 
  75               	    RAMEND for devices that do not allow for external RAM. For devices 
  76               	    that allow external RAM, this will be larger than RAMEND.
  77               	    <br>
  78               	    - \b E2END
  79               	    <br>
  80               	    The last EEPROM address.
  81               	    <br>
  82               	    - \b FLASHEND
  83               	    <br>
  84               	    The last byte address in the Flash program space.
  85               	    <br>
  86               	    - \b SPM_PAGESIZE
  87               	    <br>
  88               	    For devices with bootloader support, the flash pagesize
  89               	    (in bytes) to be used for the \c SPM instruction. 
  90               	    - \b E2PAGESIZE
  91               	    <br>
  92               	    The size of the EEPROM page.
  93               	    
  94               	*/
  95               	
  96               	#ifndef _AVR_IO_H_
  97               	#define _AVR_IO_H_
  98               	
  99               	#include <avr/sfr_defs.h>
   1               	/* Copyright (c) 2002, Marek Michalkiewicz <marekm@amelek.gda.pl>
 100               	
 101               	#if defined (__AVR_AT94K__)
 102               	#  include <avr/ioat94k.h>
 103               	#elif defined (__AVR_AT43USB320__)
 104               	#  include <avr/io43u32x.h>
 105               	#elif defined (__AVR_AT43USB355__)
 106               	#  include <avr/io43u35x.h>
 107               	#elif defined (__AVR_AT76C711__)
 108               	#  include <avr/io76c711.h>
 109               	#elif defined (__AVR_AT86RF401__)
 110               	#  include <avr/io86r401.h>
 111               	#elif defined (__AVR_AT90PWM1__)
 112               	#  include <avr/io90pwm1.h>
 113               	#elif defined (__AVR_AT90PWM2__)
 114               	#  include <avr/io90pwmx.h>
 115               	#elif defined (__AVR_AT90PWM2B__)
 116               	#  include <avr/io90pwm2b.h>
 117               	#elif defined (__AVR_AT90PWM3__)
 118               	#  include <avr/io90pwmx.h>
 119               	#elif defined (__AVR_AT90PWM3B__)
 120               	#  include <avr/io90pwm3b.h>
 121               	#elif defined (__AVR_AT90PWM216__)
 122               	#  include <avr/io90pwm216.h>
 123               	#elif defined (__AVR_AT90PWM316__)
 124               	#  include <avr/io90pwm316.h>
 125               	#elif defined (__AVR_AT90PWM81__)
 126               	#  include <avr/io90pwm81.h>
 127               	#elif defined (__AVR_ATmega8U2__)
 128               	#  include <avr/iom8u2.h>
 129               	#elif defined (__AVR_ATmega16M1__)
 130               	#  include <avr/iom16m1.h>
 131               	#elif defined (__AVR_ATmega16U2__)
 132               	#  include <avr/iom16u2.h>
 133               	#elif defined (__AVR_ATmega16U4__)
 134               	#  include <avr/iom16u4.h>
 135               	#elif defined (__AVR_ATmega32C1__)
 136               	#  include <avr/iom32c1.h>
 137               	#elif defined (__AVR_ATmega32M1__)
 138               	#  include <avr/iom32m1.h>
 139               	#elif defined (__AVR_ATmega32U2__)
 140               	#  include <avr/iom32u2.h>
 141               	#elif defined (__AVR_ATmega32U4__)
 142               	#  include <avr/iom32u4.h>
 143               	#elif defined (__AVR_ATmega32U6__)
 144               	#  include <avr/iom32u6.h>
 145               	#elif defined (__AVR_ATmega64C1__)
 146               	#  include <avr/iom64c1.h>
 147               	#elif defined (__AVR_ATmega64M1__)
 148               	#  include <avr/iom64m1.h>
 149               	#elif defined (__AVR_ATmega128__)
 150               	#  include <avr/iom128.h>
 151               	#elif defined (__AVR_ATmega1280__)
 152               	#  include <avr/iom1280.h>
 153               	#elif defined (__AVR_ATmega1281__)
 154               	#  include <avr/iom1281.h>
 155               	#elif defined (__AVR_ATmega1284P__)
 156               	#  include <avr/iom1284p.h>
 157               	#elif defined (__AVR_ATmega128RFA1__)
 158               	#  include <avr/iom128rfa1.h>
 159               	#elif defined (__AVR_ATmega2560__)
 160               	#  include <avr/iom2560.h>
 161               	#elif defined (__AVR_ATmega2561__)
 162               	#  include <avr/iom2561.h>
 163               	#elif defined (__AVR_AT90CAN32__)
 164               	#  include <avr/iocan32.h>
 165               	#elif defined (__AVR_AT90CAN64__)
 166               	#  include <avr/iocan64.h>
 167               	#elif defined (__AVR_AT90CAN128__)
 168               	#  include <avr/iocan128.h>
 169               	#elif defined (__AVR_AT90USB82__)
 170               	#  include <avr/iousb82.h>
 171               	#elif defined (__AVR_AT90USB162__)
 172               	#  include <avr/iousb162.h>
 173               	#elif defined (__AVR_AT90USB646__)
 174               	#  include <avr/iousb646.h>
 175               	#elif defined (__AVR_AT90USB647__)
 176               	#  include <avr/iousb647.h>
 177               	#elif defined (__AVR_AT90USB1286__)
 178               	#  include <avr/iousb1286.h>
 179               	#elif defined (__AVR_AT90USB1287__)
 180               	#  include <avr/iousb1287.h>
 181               	#elif defined (__AVR_ATmega64__)
 182               	#  include <avr/iom64.h>
 183               	#elif defined (__AVR_ATmega640__)
 184               	#  include <avr/iom640.h>
 185               	#elif defined (__AVR_ATmega644__) || defined (__AVR_ATmega644A__)
 186               	#  include <avr/iom644.h>
 187               	#elif defined (__AVR_ATmega644P__)
 188               	#  include <avr/iom644p.h>
 189               	#elif defined (__AVR_ATmega644PA__)
 190               	#  include <avr/iom644pa.h>
 191               	#elif defined (__AVR_ATmega645__) || defined (__AVR_ATmega645A__) || defined (__AVR_ATmega645P__)
 192               	#  include <avr/iom645.h>
 193               	#elif defined (__AVR_ATmega6450__) || defined (__AVR_ATmega6450A__) || defined (__AVR_ATmega6450P__
 194               	#  include <avr/iom6450.h>
 195               	#elif defined (__AVR_ATmega649__) || defined (__AVR_ATmega649A__)
 196               	#  include <avr/iom649.h>
 197               	#elif defined (__AVR_ATmega6490__) || defined (__AVR_ATmega6490A__) || defined (__AVR_ATmega6490P__
 198               	#  include <avr/iom6490.h>
 199               	#elif defined (__AVR_ATmega649P__)
 200               	#  include <avr/iom649p.h>
 201               	#elif defined (__AVR_ATmega64HVE__)
 202               	#  include <avr/iom64hve.h>
 203               	#elif defined (__AVR_ATmega103__)
 204               	#  include <avr/iom103.h>
 205               	#elif defined (__AVR_ATmega32__)
 206               	#  include <avr/iom32.h>
 207               	#elif defined (__AVR_ATmega323__)
 208               	#  include <avr/iom323.h>
 209               	#elif defined (__AVR_ATmega324P__) || defined (__AVR_ATmega324A__)
 210               	#  include <avr/iom324.h>
 211               	#elif defined (__AVR_ATmega324PA__)
 212               	#  include <avr/iom324pa.h>
 213               	#elif defined (__AVR_ATmega325__)
 214               	#  include <avr/iom325.h>
 215               	#elif defined (__AVR_ATmega325P__)
 216               	#  include <avr/iom325.h>
 217               	#elif defined (__AVR_ATmega3250__)
 218               	#  include <avr/iom3250.h>
 219               	#elif defined (__AVR_ATmega3250P__)
 220               	#  include <avr/iom3250.h>
 221               	#elif defined (__AVR_ATmega328P__) || defined (__AVR_ATmega328__)
 222               	#  include <avr/iom328p.h>
   1               	/* Copyright (c) 2007 Atmel Corporation
 223               	#elif defined (__AVR_ATmega329__)
 224               	#  include <avr/iom329.h>
 225               	#elif defined (__AVR_ATmega329P__) || defined (__AVR_ATmega329PA__)
 226               	#  include <avr/iom329.h>
 227               	#elif defined (__AVR_ATmega3290__)
 228               	#  include <avr/iom3290.h>
 229               	#elif defined (__AVR_ATmega3290P__)
 230               	#  include <avr/iom3290.h>
 231               	#elif defined (__AVR_ATmega32HVB__)
 232               	#  include <avr/iom32hvb.h>
 233               	#elif defined (__AVR_ATmega406__)
 234               	#  include <avr/iom406.h>
 235               	#elif defined (__AVR_ATmega16__)
 236               	#  include <avr/iom16.h>
 237               	#elif defined (__AVR_ATmega16A__)
 238               	#  include <avr/iom16a.h>
 239               	#elif defined (__AVR_ATmega161__)
 240               	#  include <avr/iom161.h>
 241               	#elif defined (__AVR_ATmega162__)
 242               	#  include <avr/iom162.h>
 243               	#elif defined (__AVR_ATmega163__)
 244               	#  include <avr/iom163.h>
 245               	#elif defined (__AVR_ATmega164P__) || defined (__AVR_ATmega164A__)
 246               	#  include <avr/iom164.h>
 247               	#elif defined (__AVR_ATmega165__) || defined (__AVR_ATmega165A__)
 248               	#  include <avr/iom165.h>
 249               	#elif defined (__AVR_ATmega165P__)
 250               	#  include <avr/iom165p.h>
 251               	#elif defined (__AVR_ATmega168__) || defined (__AVR_ATmega168A__)
 252               	#  include <avr/iom168.h>
 253               	#elif defined (__AVR_ATmega168P__)
 254               	#  include <avr/iom168p.h>
 255               	#elif defined (__AVR_ATmega169__) || defined (__AVR_ATmega169A__)
 256               	#  include <avr/iom169.h>
 257               	#elif defined (__AVR_ATmega169P__)
 258               	#  include <avr/iom169p.h>
 259               	#elif defined (__AVR_ATmega169PA__)
 260               	#  include <avr/iom169pa.h>
 261               	#elif defined (__AVR_ATmega8HVA__)
 262               	#  include <avr/iom8hva.h>
 263               	#elif defined (__AVR_ATmega16HVA__)
 264               	#  include <avr/iom16hva.h>
 265               	#elif defined (__AVR_ATmega16HVA2__)
 266               	#  include <avr/iom16hva2.h>
 267               	#elif defined (__AVR_ATmega16HVB__)
 268               	#  include <avr/iom16hvb.h>
 269               	#elif defined (__AVR_ATmega8__)
 270               	#  include <avr/iom8.h>
 271               	#elif defined (__AVR_ATmega48__) || defined (__AVR_ATmega48A__)
 272               	#  include <avr/iom48.h>
 273               	#elif defined (__AVR_ATmega48P__)
 274               	#  include <avr/iom48p.h>
 275               	#elif defined (__AVR_ATmega88__) || defined (__AVR_ATmega88A__)
 276               	#  include <avr/iom88.h>
 277               	#elif defined (__AVR_ATmega88P__)
 278               	#  include <avr/iom88p.h>
 279               	#elif defined (__AVR_ATmega88PA__)
 280               	#  include <avr/iom88pa.h>
 281               	#elif defined (__AVR_ATmega8515__)
 282               	#  include <avr/iom8515.h>
 283               	#elif defined (__AVR_ATmega8535__)
 284               	#  include <avr/iom8535.h>
 285               	#elif defined (__AVR_AT90S8535__)
 286               	#  include <avr/io8535.h>
 287               	#elif defined (__AVR_AT90C8534__)
 288               	#  include <avr/io8534.h>
 289               	#elif defined (__AVR_AT90S8515__)
 290               	#  include <avr/io8515.h>
 291               	#elif defined (__AVR_AT90S4434__)
 292               	#  include <avr/io4434.h>
 293               	#elif defined (__AVR_AT90S4433__)
 294               	#  include <avr/io4433.h>
 295               	#elif defined (__AVR_AT90S4414__)
 296               	#  include <avr/io4414.h>
 297               	#elif defined (__AVR_ATtiny22__)
 298               	#  include <avr/iotn22.h>
 299               	#elif defined (__AVR_ATtiny26__)
 300               	#  include <avr/iotn26.h>
 301               	#elif defined (__AVR_AT90S2343__)
 302               	#  include <avr/io2343.h>
 303               	#elif defined (__AVR_AT90S2333__)
 304               	#  include <avr/io2333.h>
 305               	#elif defined (__AVR_AT90S2323__)
 306               	#  include <avr/io2323.h>
 307               	#elif defined (__AVR_AT90S2313__)
 308               	#  include <avr/io2313.h>
 309               	#elif defined (__AVR_ATtiny2313__)
 310               	#  include <avr/iotn2313.h>
 311               	#elif defined (__AVR_ATtiny2313A__)
 312               	#  include <avr/iotn2313a.h>
 313               	#elif defined (__AVR_ATtiny13__)
 314               	#  include <avr/iotn13.h>
 315               	#elif defined (__AVR_ATtiny13A__)
 316               	#  include <avr/iotn13a.h>
 317               	#elif defined (__AVR_ATtiny25__)
 318               	#  include <avr/iotn25.h>
 319               	#elif defined (__AVR_ATtiny4313__)
 320               	#  include <avr/iotn4313.h>
 321               	#elif defined (__AVR_ATtiny45__)
 322               	#  include <avr/iotn45.h>
 323               	#elif defined (__AVR_ATtiny85__)
 324               	#  include <avr/iotn85.h>
 325               	#elif defined (__AVR_ATtiny24__)
 326               	#  include <avr/iotn24.h>
 327               	#elif defined (__AVR_ATtiny24A__)
 328               	#  include <avr/iotn24a.h>
 329               	#elif defined (__AVR_ATtiny44__)
 330               	#  include <avr/iotn44.h>
 331               	#elif defined (__AVR_ATtiny44A__)
 332               	#  include <avr/iotn44a.h>
 333               	#elif defined (__AVR_ATtiny84__)
 334               	#  include <avr/iotn84.h>
 335               	#elif defined (__AVR_ATtiny261__)
 336               	#  include <avr/iotn261.h>
 337               	#elif defined (__AVR_ATtiny261A__)
 338               	#  include <avr/iotn261a.h>
 339               	#elif defined (__AVR_ATtiny461__)
 340               	#  include <avr/iotn461.h>
 341               	#elif defined (__AVR_ATtiny461A__)
 342               	#  include <avr/iotn461a.h>
 343               	#elif defined (__AVR_ATtiny861__)
 344               	#  include <avr/iotn861.h>
 345               	#elif defined (__AVR_ATtiny861A__)
 346               	#  include <avr/iotn861a.h>
 347               	#elif defined (__AVR_ATtiny43U__)
 348               	#  include <avr/iotn43u.h>
 349               	#elif defined (__AVR_ATtiny48__)
 350               	#  include <avr/iotn48.h>
 351               	#elif defined (__AVR_ATtiny88__)
 352               	#  include <avr/iotn88.h>
 353               	#elif defined (__AVR_ATtiny87__)
 354               	#  include <avr/iotn87.h>
 355               	#elif defined (__AVR_ATtiny167__)
 356               	#  include <avr/iotn167.h>
 357               	#elif defined (__AVR_AT90SCR100__)
 358               	#  include <avr/io90scr100.h>
 359               	#elif defined (__AVR_ATxmega16A4__)
 360               	#  include <avr/iox16a4.h>
 361               	#elif defined (__AVR_ATxmega16D4__)
 362               	#  include <avr/iox16d4.h>
 363               	#elif defined (__AVR_ATxmega32A4__)
 364               	#  include <avr/iox32a4.h>
 365               	#elif defined (__AVR_ATxmega32D4__)
 366               	#  include <avr/iox32d4.h>
 367               	#elif defined (__AVR_ATxmega64A1__)
 368               	#  include <avr/iox64a1.h>
 369               	#elif defined (__AVR_ATxmega64A3__)
 370               	#  include <avr/iox64a3.h>
 371               	#elif defined (__AVR_ATxmega64D3__)
 372               	#  include <avr/iox64d3.h>
 373               	#elif defined (__AVR_ATxmega128A1__)
 374               	#  include <avr/iox128a1.h>
 375               	#elif defined (__AVR_ATxmega128A3__)
 376               	#  include <avr/iox128a3.h>
 377               	#elif defined (__AVR_ATxmega128D3__)
 378               	#  include <avr/iox128d3.h>
 379               	#elif defined (__AVR_ATxmega192A3__)
 380               	#  include <avr/iox192a3.h>
 381               	#elif defined (__AVR_ATxmega192D3__)
 382               	#  include <avr/iox192d3.h>
 383               	#elif defined (__AVR_ATxmega256A3__)
 384               	#  include <avr/iox256a3.h>
 385               	#elif defined (__AVR_ATxmega256A3B__)
 386               	#  include <avr/iox256a3b.h>
 387               	#elif defined (__AVR_ATxmega256D3__)
 388               	#  include <avr/iox256d3.h>
 389               	#elif defined (__AVR_ATA6289__)
 390               	#  include <avr/ioa6289.h>
 391               	/* avr1: the following only supported for assembler programs */
 392               	#elif defined (__AVR_ATtiny28__)
 393               	#  include <avr/iotn28.h>
 394               	#elif defined (__AVR_AT90S1200__)
 395               	#  include <avr/io1200.h>
 396               	#elif defined (__AVR_ATtiny15__)
 397               	#  include <avr/iotn15.h>
 398               	#elif defined (__AVR_ATtiny12__)
 399               	#  include <avr/iotn12.h>
 400               	#elif defined (__AVR_ATtiny11__)
 401               	#  include <avr/iotn11.h>
 402               	#else
 403               	#  if !defined(__COMPILING_AVR_LIBC__)
 404               	#    warning "device type not defined"
 405               	#  endif
 406               	#endif
 407               	
 408               	#include <avr/portpins.h>
   1               	/* Copyright (c) 2003  Theodore A. Roth
 409               	
 410               	#include <avr/common.h>
   1               	/* Copyright (c) 2007 Eric B. Weddington
 411               	
 412               	#include <avr/version.h>
   1               	/* Copyright (c) 2005, Joerg Wunsch                               -*- c -*-
 413               	
 414               	/* Include fuse.h after individual IO header files. */
 415               	#include <avr/fuse.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 416               	
 417               	/* Include lock.h after individual IO header files. */
 418               	#include <avr/lock.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 419               	
   3               	#include <avr/interrupt.h>
   1               	/* Copyright (c) 2002,2005,2007 Marek Michalkiewicz
   4               	#include "kernel.h"
   1               	
   5               	#include "debug.h"
   1               	
   6               	
   7               	
   8               	
   9               	
  10               	
  11               	;;============================define user address or macro starting=========================;; 
  12               	.equ     KER_TR ,         1000                            ;TickRate in Hz, not calculated      
  13               	.equ     KER_PRS,         0x03                            ;For prescaler 64, manually select   
  14               	.equ     KER_RLD,         0x82                            ;KER_RLD=0xFF-(F_CPU/KER_PRS/KER_TR) 
  15               	.equ     KER_STK_SZ,      160                             ;stack size in bytes for each task   
  16               	.equ     KER_MX_NTSK,     10                              ;max number of tasks                 
  17               	;;==============================define user address or macro end============================;; 
  18               	
  19               	
  20               	
  21               	
  22               	
  23               	;;===============================define data offsets starting===============================;; 
  24               	.equ     OFB_TICK0,       0x00                            ;tick count byte0 offset from KerBase
  25               	.equ     OFB_TICK1,       0x01                            ;tick count byte1 offset from KerBase
  26               	.equ     OFB_TICK2,       0x02                            ;tick count byte2 offset from KerBase
  27               	.equ     OFB_TICK3,       0x03                            ;tick count byte3 offset from KerBase
  28               	.equ     OFB_TICK4,       0x04                            ;tick count byte4 offset from KerBase
  29               	.equ     OFB_PRS  ,       0x05                            ;prescaler offset from KerBase       
  30               	.equ     OFB_RLD  ,       0x06                            ;counter reload offset from KerBase  
  31               	.equ     OFB_TID  ,       0x07                            ;task id offset from KerBase         
  32               	.equ     OFB_NTSK ,       0x08                            ;ntask offset from KerBase           
  33               	.equ     OFB_LPR  ,       0x09                            ;lowest priority offset from KerBase 
  34               	.equ     OFB_PTID ,       0x0A                            ;prio task_id offset from KerBase    
  35               	.equ     OFB_UTC  ,       0x0B                            ;usage tick cnt offset from KerBase  
  36               	.equ     OFB_UATC ,       0x0C                            ;active tick cnt offset from KerBase 
  37               	.equ     OFB_USAGE,       0x0D                            ;cpu usage offset from KerBase       
  38               	.equ     OFM_MSPI ,       0x00                            ;msp index field offset from MSPZP   
  39               	.equ     OFM_MSPS ,       0x02                            ;msp starting offset from MSPZP      
  40               	;;==================================define data offsets end=================================;; 
  41               	
  42               	
  43               	
  44               	
  45               	
  46               	;;===============================define system macro starting===============================;; 
  47               	.equ     TASK_BLOCKED,    0x00                            ;KerSchSts val=0                     
  48               	.equ     TASK_READY,      0x01                            ;KerSchSts val=1                     
  49               	.equ     TASK_EXECUTING,  0x02                            ;KerSchSts val=2                     
  50               	.equ     TASK_SUSPENDED,  0x03                            ;KerSchSts val=3                     
  51               	.equ     TASK_CONS_LAT,   0x04                            ;KerSchSts val=3, constant latency   
  52               	.equ     SCH_MODE_HANDLER,0x00                            ;handler mode in KER_SLP_TIME_MGNT   
  53               	.equ     SCH_MODE_THREAD, 0x01                            ;thread mode in KER_SLP_TIME_MGNT    
  54               	;;==================================define system macro end=================================;; 
  55               	
  56               	
  57               	
  58               	
  59               	
  60               	;;===========================define hardware reg address starting===========================;; 
  61               	.equ     SRSREG  ,        0x5F                            ;manually defined SREG in SRAM       
  62               	.equ     SRSPH   ,        0x5E                            ;manually defined SPH in SRAM        
  63               	.equ     SRSPL   ,        0x5D                            ;manually defined SPL in SRAM        
  64               	.equ     SRTIMSK0,        0x6E                            ;manually defined TIMSK0 in SRAM     
  65               	.equ     SROCR0B ,        0x48                            ;manually defined OCR0B in SRAM      
  66               	.equ     SROCR0A ,        0x47                            ;manually defined OCR0A in SRAM      
  67               	.equ     SRTCNT0 ,        0x46                            ;manually defined TCNT0 in SRAM      
  68               	.equ     SRTCCR0B,        0x45                            ;manually defined TCCR0B in SRAM     
  69               	.equ     SRTCCR0A,        0x44                            ;manually defined TCCR0A in SRAM     
  70               	.equ     SRTIFR0 ,        0x35                            ;manually defined TIFR0 in SRAM      
  71               	.equ     IOOCR0B ,        0x28                            ;manually defined OCR0B in IO        
  72               	.equ     IOOCR0A ,        0x27                            ;manually defined OCR0A in IO        
  73               	.equ     IOTCNT0 ,        0x26                            ;manually defined TCNT0 in IO        
  74               	.equ     IOTCCR0B,        0x25                            ;manually defined TCCR0B in IO       
  75               	.equ     IOTCCR0A,        0x24                            ;manually defined TCCR0A in IO       
  76               	.equ     IOTIFR0 ,        0x15                            ;manually defined TIFR0 in IO        
  77               	.equ     IOSREG  ,        0x3F                            ;manually defined SREG in IO         
  78               	.equ     IOSPH   ,        0x3E                            ;manually defined SPH in IO          
  79               	.equ     IOSPL   ,        0x3D                            ;manually defined SPL in IO          
  80               	;;==============================define hardware reg address end=============================;; 
  81               	
  82               	
  83               	
  84               	
  85               	
  86               	;;=============================define global variables starting=============================;; 
  87               	.section   .bss                                                                                
  88               	                                                                                               
  89               	.global    KerBase                                        ;declare global space for kernel     
  90 0000 0000 0000 	KerBase:   .skip 14                                       ;see offset section                  
  90      0000 0000 
  90      0000 0000 
  90      0000 
  91               	                                                                                               
  92               	.global    KerPSP                                         ;space for process stack pointers    
  93 000e 0000 0000 	KerPSP:    .skip KER_MX_NTSK*2                            ;2 bytes for each task               
  93      0000 0000 
  93      0000 0000 
  93      0000 0000 
  93      0000 0000 
  94               	                                                                                               
  95               	.global    KerSSZ                                         ;stack for main stack pointers       
  96 0022 0000 0000 	KerSSZ:    .skip 14                                       ;stack_ptr(2), MSPZPn(4)             
  96      0000 0000 
  96      0000 0000 
  96      0000 
  97               	                                                                                               
  98               	.global    KerSchSts                                      ;space for scheduler status          
  99 0030 0000 0000 	KerSchSts: .skip KER_MX_NTSK*1                            ;status(1)                           
  99      0000 0000 
  99      0000 
 100               	                                                                                               
 101               	.global    KerSchPr                                       ;space for scheduler priority        
 102 003a 0000 0000 	KerSchPr:  .skip KER_MX_NTSK*1                            ;priority(1)                         
 102      0000 0000 
 102      0000 
 103               	                                                                                               
 104               	.global    KerSchSlp                                      ;space for task sleep                
 105 0044 0000 0000 	KerSchSlp: .skip KER_MX_NTSK*2                            ;timing(2)                           
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 106               	                                                                                               
 107               	.global    KerStack                                       ;space for stack                     
 108 0058 0000 0000 	KerStack:  .skip KER_STK_SZ*KER_MX_NTSK                   ;KER_STK_SZ bytes for each task      
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 108      0000 0000 
 109               	;;==============================define global variables end=================================;; 
 110               	
 111               	
 112               	
 113               	
 114               	
 115               	;;===============================define vector section starting=============================;; 
 116               	.section .vectors, "ax", @progbits                                                             
 117               	                                                                                               
 118 0000 0000 0000 	.org    0x20                                                                                   
 118      0000 0000 
 118      0000 0000 
 118      0000 0000 
 118      0000 0000 
 118      0000 0000 
 118      0000 0000 
 118      0000 0000 
 119:kernel.S      ****         RJMP  __vector_16                                                                      
 120               	;;=================================define vector section end================================;; 
 121               	
 122               	
 123               	
 124               	
 125               	
 126               	;;===============================define text section starting===============================;; 
 127               	.section .text                                                                                 
 128               	;;==================================define text section end=================================;; 
 129               	
 130               	
 131               	
 132               	
 133               	
 134               	;;==============================define global functions starting============================;; 
 135               	.global  Kernel_SysTick_Reg_Init                                                               
 136               	.global  Kernel_SysTick_Val_Get                                                                
 137               	.global  Kernel_SysTick_Val_Safely_Get                                                         
 138               	.global  Kernel_Interrupt_Sts_Get                                                              
 139               	.global  Kernel_Init                                                                           
 140               	.global  Kernel_Task_Create                                                                    
 141               	.global  Kernel_Start_Tasks                                                                    
 142               	.global  Kernel_Task_Idle                                                                      
 143               	.global  Kernel_Task_Sleep                                                                     
 144               	.global  Kernel_Task_Constant_Latency                                                          
 145               	.global  Kernel_Task_Constant_Latency_Sleep                                                    
 146               	.global  Kernel_Task_Sleep_Time_Get                                                            
 147               	.global  Kernel_Task_Status_Get                                                                
 148               	.global  Kernel_NTask_Get                                                                      
 149               	.global  Kernel_Task_Prio_Get                                                                  
 150               	.global  Kernel_Lowest_Prio_Get                                                                
 151               	.global  Kernel_High_Prio_Task_ID_Get                                                          
 152               	.global  Kernel_Abs_High_Prio_Task_ID_Get                                                      
 153               	.global  Kernel_CPU_Usage_Get                                                                  
 154               	;;================================define global functions end===============================;; 
 155               	
 156               	
 157               	
 158               	
 159               	
 160               	;;============================debug pin operation init starting=============================;; 
 161               	;used registers          : R16, R17                                                            
 162               	;arg registers           : None                                                                
 163               	;return registers        : None                                                                
 164               	;unsafe access registers : R16, R17                                                            
 165               	.macro  KER_TIMER_INIT                                    ;total 1.5uS @8MHz      ( 12 clocks) 
 166               	        LDS   R16		         , KerBase+OFB_PRS        ;load prescaler         (  2 clocks) 
 167               			LDS   R17		         , KerBase+OFB_RLD        ;load reload val        (  2 clocks) 
 168               			STS   SRTCCR0B           , R16                    ;prescaler-> TCCR0B     (  2 clocks) 
 169               			STS   SRTCNT0            , R17                    ;reload val-> TCNT0     (  2 clocks) 
 170               			LDI   R16                , 0x01                   ;bit mask TOIE0         (  1 clock ) 
 171               			STS   SRTIMSK0           , R16                    ;set to TIMSK0          (  2 clocks) 
 172               			SEI                                               ;force enable interrupt (  1 clock ) 
 173               	.endm                                                                                          
 174               	;;==============================debug pin operation init end================================;; 
 175               	
 176               	
 177               	
 178               	
 179               	
 180               	;;============================debug pin operation init starting=============================;; 
 181               	;used registers          : None                                                                
 182               	;arg registers           : None                                                                
 183               	;return registers        : None                                                                
 184               	;unsafe access registers : None                                                                
 185               	.macro  KER_DEBUG_PIN_INIT                                ;total 0.5uS @8MHz      (  4 clocks) 
 186               	        #ifdef KER_DBG_ENABLE                                                                  
 187               			CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear port bit         (  2 clocks) 
 188               			SBI   KER_DBG_DDR        , KER_DBG_PIN            ;set bit in DDR         (  2 clocks) 
 189               			#endif                                                                                 
 190               	.endm                                                                                          
 191               	;;==============================debug pin operation init end================================;; 
 192               	
 193               	
 194               	
 195               	
 196               	
 197               	;;===========================debug pin operation set starting===============================;; 
 198               	;used registers          : None                                                                
 199               	;arg registers           : None                                                                
 200               	;return registers        : None                                                                
 201               	;unsafe access registers : None                                                                
 202               	.macro  KER_DEBUG_PIN_SET                                 ;total 0.25uS @8MHz     (  2 clocks) 
 203               	        #ifdef KER_DBG_ENABLE                                                                  
 204               	        SBI   KER_DBG_PORT       , KER_DBG_PIN            ;set gpio               (  2 clocks) 
 205               			#endif                                                                                 
 206               	.endm                                                                                          
 207               	;;==============================debug pin operation set end=================================;; 
 208               	
 209               	
 210               	
 211               	
 212               	
 213               	;;===========================debug pin operation clear starting=============================;; 
 214               	;used registers          : None                                                                
 215               	;arg registers           : None                                                                
 216               	;return registers        : None                                                                
 217               	;unsafe access registers : None                                                                
 218               	.macro  KER_DEBUG_PIN_CLEAR                               ;total 0.25uS @8MHz     (  2 clocks) 
 219               	        #ifdef KER_DBG_ENABLE                                                                  
 220               			CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear gpio             (  2 clocks) 
 221               			#endif                                                                                 
 222               	.endm                                                                                          
 223               	;;==============================debug pin operation clear end===============================;; 
 224               	
 225               	
 226               	
 227               	
 228               	
 229               	;;==============================reload counter value starting===============================;; 
 230               	;used registers          : R16                                                                 
 231               	;arg registers           : None                                                                
 232               	;return registers        : None                                                                
 233               	;unsafe access registers : None                                                                
 234               	.macro  KER_COUNTER_RELOAD                                ;total 0.5uS @8MHz      (  4 clocks) 
 235               	        LDS   R16                , KerBase+OFB_RLD        ;load reload value      (  2 clocks) 
 236               			STS   SRTCNT0            , R16                    ;Set value to TCNT0     (  2 clocks) 
 237               	.endm                                                                                          
 238               	;;=================================reload counter value end=================================;; 
 239               	
 240               	
 241               	
 242               	
 243               	
 244               	;;=================================save r0 & sreg starting==================================;; 
 245               	;used registers          : R0                                                                  
 246               	;arg registers           : None                                                                
 247               	;return registers        : None                                                                
 248               	;unsafe access registers : None                                                                
 249               	.macro  KER_SAVE_R0_SREG                                  ;total 0.63uS @8MHz     (  5 clocks) 
 250               	        PUSH  R0                                          ;save R0                (  2 clocks) 
 251               			IN    R0                 , IOSREG                 ;load SREG              (  1 clock ) 
 252               			PUSH  R0                                          ;save SREG              (  2 clocks) 
 253               	.endm                                                                                          
 254               	;;====================================save r0 & sreg end====================================;; 
 255               	
 256               	
 257               	
 258               	
 259               	
 260               	;;===============================save r0, sreg & cli starting===============================;; 
 261               	;used registers          : R0                                                                  
 262               	;arg registers           : None                                                                
 263               	;return registers        : None                                                                
 264               	;unsafe access registers : None                                                                
 265               	.macro  KER_SAVE_R0_CLI_SREG                              ;total 0.75uS @8MHz     (  6 clocks) 
 266               	        PUSH  R0                                          ;push R0                (  2 clocks) 
 267               			IN    R0                 , IOSREG                 ;save SREG              (  1 clock ) 
 268               			CLI                                               ;clear interrupt        (  1 clock ) 
 269               			PUSH  R0                                          ;save SREG              (  2 clocks) 
 270               	.endm                                                                                          
 271               	;;=================================save r0, sreg & cli end==================================;; 
 272               	
 273               	
 274               	
 275               	
 276               	
 277               	;;===================================save r1~r31 starting===================================;; 
 278               	;used registers          : R1~R31                                                              
 279               	;arg registers           : None                                                                
 280               	;return registers        : None                                                                
 281               	;unsafe access registers : None                                                                
 282               	.macro  KER_SAVE_R1_R31                                   ;total 7.88uS @8MHz     ( 63 clocks) 
 283               			PUSH  R1                                          ;save R1                (  2 clocks) 
 284               			CLR   R1                                          ;clear R1               (  1 clock ) 
 285               			PUSH  R2                                          ;save R2                (  2 clocks) 
 286               			PUSH  R3                                          ;save R3                (  2 clocks) 
 287               			PUSH  R4                                          ;save R4                (  2 clocks) 
 288               			PUSH  R5                                          ;save R5                (  2 clocks) 
 289               			PUSH  R6                                          ;save R6                (  2 clocks) 
 290               			PUSH  R7                                          ;save R7                (  2 clocks) 
 291               			PUSH  R8                                          ;save R8                (  2 clocks) 
 292               			PUSH  R9                                          ;save R9                (  2 clocks) 
 293               			PUSH  R10                                         ;save R10               (  2 clocks) 
 294               			PUSH  R11                                         ;save R11               (  2 clocks) 
 295               			PUSH  R12                                         ;save R12               (  2 clocks) 
 296               			PUSH  R13                                         ;save R13               (  2 clocks) 
 297               			PUSH  R14                                         ;save R14               (  2 clocks) 
 298               			PUSH  R15                                         ;save R15               (  2 clocks) 
 299               			PUSH  R16                                         ;save R16               (  2 clocks) 
 300               			PUSH  R17                                         ;save R17               (  2 clocks) 
 301               			PUSH  R18                                         ;save R18               (  2 clocks) 
 302               			PUSH  R19                                         ;save R19               (  2 clocks) 
 303               			PUSH  R20                                         ;save R20               (  2 clocks) 
 304               			PUSH  R21                                         ;save R21               (  2 clocks) 
 305               			PUSH  R22                                         ;save R22               (  2 clocks) 
 306               			PUSH  R23                                         ;save R23               (  2 clocks) 
 307               			PUSH  R24                                         ;save R24               (  2 clocks) 
 308               			PUSH  R25                                         ;save R25               (  2 clocks) 
 309               			PUSH  R26                                         ;save R26               (  2 clocks) 
 310               			PUSH  R27                                         ;save R27               (  2 clocks) 
 311               			PUSH  R28                                         ;save R28               (  2 clocks) 
 312               			PUSH  R29                                         ;save R29               (  2 clocks) 
 313               			PUSH  R30                                         ;save R30               (  2 clocks) 
 314               			PUSH  R31                                         ;save R31               (  2 clocks) 
 315               	.endm                                                                                          
 316               	;;======================================save r1~r31 end=====================================;; 
 317               	
 318               	
 319               	
 320               	
 321               	
 322               	;;==============================context save handler starting===============================;; 
 323               	;used registers          : R0~R31                                                              
 324               	;arg registers           : None                                                                
 325               	;return registers        : None                                                                
 326               	;unsafe access registers : None                                                                
 327               	.macro  KER_CONTEXT_SAVE_HANDLER                          ;total 8.5uS @8MHz      ( 68 clocks) 
 328               	        KER_SAVE_R0_SREG                                  ;save r0, sreg          (  5 clocks) 
 329               	        KER_SAVE_R1_R31                                   ;save r1~r31            ( 63 clocks) 
 330               	.endm                                                                                          
 331               	;;=================================context save handler end=================================;; 
 332               	
 333               	
 334               	
 335               	
 336               	
 337               	;;===============================context save thread starting===============================;; 
 338               	;used registers          : R0~R31                                                              
 339               	;arg registers           : None                                                                
 340               	;return registers        : None                                                                
 341               	;unsafe access registers : None                                                                
 342               	.macro  KER_CONTEXT_SAVE_THREAD                           ;total 8.63uS @8MHz     ( 69 clocks) 
 343               	        KER_SAVE_R0_CLI_SREG                              ;save r0, sreg          (  6 clocks) 
 344               	        KER_SAVE_R1_R31                                   ;save r1~r31            ( 63 clocks) 
 345               	.endm                                                                                          
 346               	;;==================================context save thread end=================================;; 
 347               	
 348               	
 349               	
 350               	
 351               	
 352               	
 353               	;;================================restore r0 & sreg starting================================;; 
 354               	;used registers          : R0                                                                  
 355               	;arg registers           : None                                                                
 356               	;return registers        : None                                                                
 357               	;unsafe access registers : None                                                                
 358               	.macro  KER_RESTORE_R0_SREG                               ;total 0.63uS @8MHz     (  5 clocks) 
 359               	        POP   R0                                          ;fetch SREG             (  2 clocks) 
 360               			OUT   IOSREG             , R0                     ;load SREG              (  1 clock ) 
 361               			POP   R0                                          ;restore R0             (  2 clocks) 
 362               	.endm                                                                                          
 363               	;;==================================restore r0 & sreg end===================================;; 
 364               	
 365               	
 366               	
 367               	
 368               	
 369               	;;==============================restore r0, sreg & sei starting=============================;; 
 370               	;used registers          : R0                                                                  
 371               	;arg registers           : None                                                                
 372               	;return registers        : None                                                                
 373               	;unsafe access registers : None                                                                
 374               	.macro  KER_RESTORE_R0_SREG_SEI                           ;total 0.75uS @8MHz     (  6 clocks) 
 375               	        POP   R0                                          ;fetch SREG             (  2 clocks) 
 376               			OUT   IOSREG             , R0                     ;load SREG              (  1 clock ) 
 377               			POP   R0                                          ;restore R0             (  2 clocks) 
 378               			SEI                                               ;enable interrupt       (  1 clock ) 
 379               	.endm                                                                                          
 380               	;;===============================restore r0, sreg & sei end=================================;; 
 381               	
 382               	
 383               	
 384               	
 385               	
 386               	;;=================================restore r1~r31 starting==================================;; 
 387               	;used registers          : R1~R31                                                              
 388               	;arg registers           : None                                                                
 389               	;return registers        : None                                                                
 390               	;unsafe access registers : None                                                                
 391               	.macro  KER_RESTORE_R1_R31                                ;total 8.38uS @8MHz     ( 62 clocks) 
 392               			POP   R31                                         ;restore R31            (  2 clocks) 
 393               			POP   R30                                         ;restore R30            (  2 clocks) 
 394               			POP   R29                                         ;restore R29            (  2 clocks) 
 395               			POP   R28                                         ;restore R28            (  2 clocks) 
 396               			POP   R27                                         ;restore R27            (  2 clocks) 
 397               			POP   R26                                         ;restore R26            (  2 clocks) 
 398               			POP   R25                                         ;restore R25            (  2 clocks) 
 399               			POP   R24                                         ;restore R24            (  2 clocks) 
 400               			POP   R23                                         ;restore R23            (  2 clocks) 
 401               			POP   R22                                         ;restore R22            (  2 clocks) 
 402               			POP   R21                                         ;restore R21            (  2 clocks) 
 403               			POP   R20                                         ;restore R20            (  2 clocks) 
 404               			POP   R19                                         ;restore R19            (  2 clocks) 
 405               			POP   R18                                         ;restore R18            (  2 clocks) 
 406               			POP   R17                                         ;restore R17            (  2 clocks) 
 407               			POP   R16                                         ;restore R16            (  2 clocks) 
 408               			POP   R15                                         ;restore R15            (  2 clocks) 
 409               			POP   R14                                         ;restore R14            (  2 clocks) 
 410               			POP   R13                                         ;restore R13            (  2 clocks) 
 411               			POP   R12                                         ;restore R12            (  2 clocks) 
 412               			POP   R11                                         ;restore R11            (  2 clocks) 
 413               			POP   R10                                         ;restore R10            (  2 clocks) 
 414               			POP   R9                                          ;restore R9             (  2 clocks) 
 415               			POP   R8                                          ;restore R8             (  2 clocks) 
 416               			POP   R7                                          ;restore R7             (  2 clocks) 
 417               			POP   R6                                          ;restore R6             (  2 clocks) 
 418               			POP   R5                                          ;restore R5             (  2 clocks) 
 419               			POP   R4                                          ;restore R4             (  2 clocks) 
 420               			POP   R3                                          ;restore R3             (  2 clocks) 
 421               			POP   R2                                          ;restore R2             (  2 clocks) 
 422               			POP   R1                                          ;restore R1             (  2 clocks) 
 423               	.endm                                                                                          
 424               	;;====================================restore r1~r31 end====================================;; 
 425               	
 426               	
 427               	
 428               	
 429               	
 430               	;;=============================context restore handler starting=============================;; 
 431               	;used registers          : R0~R31                                                              
 432               	;arg registers           : None                                                                
 433               	;return registers        : None                                                                
 434               	;unsafe access registers : None                                                                
 435               	.macro  KER_CONTEXT_RESTORE_HANDLER                       ;total 8.38uS @8MHz     ( 67 clocks) 
 436               	        KER_RESTORE_R1_R31                                ;restore r1~r31         ( 62 clocks) 
 437               			KER_RESTORE_R0_SREG                               ;restore r0, sreg       (  5 clocks) 
 438               	.endm                                                                                          
 439               	;;===============================context restore handler end================================;; 
 440               	
 441               	
 442               	
 443               	
 444               	
 445               	;;=============================context restore thread starting==============================;; 
 446               	;used registers          : R0~R31                                                              
 447               	;arg registers           : None                                                                
 448               	;return registers        : None                                                                
 449               	;unsafe access registers : None                                                                
 450               	.macro  KER_CONTEXT_RESTORE_THREAD                        ;total 8.75uS @8MHz     ( 68 clocks) 
 451               	        KER_RESTORE_R1_R31                                ;restore r1~r31         ( 62 clocks) 
 452               			KER_RESTORE_R0_SREG_SEI                           ;restore r0, sreg       (  6 clocks) 
 453               	.endm                                                                                          
 454               	;;================================context restore thread end================================;; 
 455               	
 456               	
 457               	
 458               	
 459               	
 460               	;;==============================fetch current task id starting==============================;; 
 461               	;used registers          : R20                                                                 
 462               	;arg registers           : None                                                                
 463               	;return registers        : R20 (Current task id)                                               
 464               	;unsafe access registers : R20                                                                 
 465               	.macro  KER_FETCH_CURR_TID                                ;total 0.25uS @8MHz     (  2 clocks) 
 466               	        LDS   R20                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 467               	.endm                                                                                          
 468               	;;================================fetch current task id end=================================;; 
 469               	
 470               	
 471               	
 472               	
 473               	
 474               	;;==================================fetch ntask starting====================================;; 
 475               	;used registers          : R21                                                                 
 476               	;arg registers           : None                                                                
 477               	;return registers        : R21 (ntask)                                                         
 478               	;unsafe access registers : R21                                                                 
 479               	.macro  KER_FETCH_NTASK                                   ;total 0.25uS @8MHz     (  2 clocks) 
 480               	        LDS   R21                , KerBase+OFB_NTSK       ;fetch task_id          (  2 clocks) 
 481               	.endm                                                                                          
 482               	;;====================================fetch ntask end=======================================;; 
 483               	
 484               	
 485               	
 486               	
 487               	
 488               	;;=========================calculate offset addr in words starting==========================;; 
 489               	;used registers          : R16, R30(ZL), R31(ZH)                                               
 490               	;arg registers           : R30(ZL), R31(ZH)                                                    
 491               	;return registers        : R30(ZL), R31(ZH)                                                    
 492               	;unsafe access registers : R16, R30(ZL), R31(ZH)                                               
 493               	.macro  KER_CALC_ADDR_OFF_WORD                            ;total 0.75uS @8MHz     (  6 clocks) 
 494               	        LDS   R16                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 495               			LSL   R16                                         ;left shift to multiply (  1 clock ) 
 496               			ADD   ZL                 , R16                    ;add offset to array    (  1 clock ) 
 497               			LDI   R16                , 0x00                   ;clear for carry prop   (  1 clock ) 
 498               			ADC   ZH                 , R16                    ;add carry if any       (  1 clock ) 
 499               	.endm                                                                                          
 500               	;;=============================calculate offset addr in words end===========================;; 
 501               	
 502               	
 503               	
 504               	
 505               	
 506               	;;=========================calculate offset addr in bytes starting==========================;; 
 507               	;used registers          : R16, R30(ZL), R31(ZH)                                               
 508               	;arg registers           : R30(ZL), R31(ZH)                                                    
 509               	;return registers        : R30(ZL), R31(ZH)                                                    
 510               	;unsafe access registers : R16, R30(ZL), R31(ZH)                                               
 511               	.macro  KER_CALC_ADDR_OFF_BYTES                           ;total 0.63uS @8MHz     (  5 clocks) 
 512               	        LDS   R16                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 513               			ADD   ZL                 , R16                    ;add offset to array    (  1 clock ) 
 514               			LDI   R16                , 0x00                   ;clear for carry prop   (  1 clock ) 
 515               			ADC   ZH                 , R16                    ;add carry if any       (  1 clock ) 
 516               	.endm                                                                                          
 517               	;;=============================calculate offset addr in bytes end===========================;; 
 518               	
 519               	
 520               	
 521               	
 522               	
 523               	;;===============================save current task sp starting==============================;; 
 524               	;used registers          : R16, R17, R30(ZL), R31(ZH)                                          
 525               	;arg registers           : None                                                                
 526               	;return registers        : None                                                                
 527               	;unsafe access registers : R16, R17, R30(ZL), R31(ZH)                                          
 528               	.macro  KER_SAVE_CURR_TASK_SP                             ;total 1.75uS @8MHz     ( 14 clocks) 
 529               			LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 530               			LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 531               			KER_CALC_ADDR_OFF_WORD                            ;calc offset            (  6 clocks) 
 532               			IN    R16                , IOSPL                  ;fetch SPL0             (  1 clock ) 
 533               			IN    R17                , IOSPH                  ;fetch SPH0             (  1 clock ) 
 534               			STD   Z+0                , R16                    ;store SPL at ZP+0      (  2 clocks) 
 535               			STD   Z+1                , R17                    ;store SPH at ZP+1      (  2 clocks) 
 536               	.endm                                                                                          
 537               	;;================================save current task sp end==================================;; 
 538               	
 539               	
 540               	
 541               	
 542               	
 543               	;;==============================load next task id starting==================================;; 
 544               	;used registers          : R16, R17                                                            
 545               	;arg registers           : None                                                                
 546               	;return registers        : None                                                                
 547               	;unsafe access registers : R16, R17                                                            
 548               	.macro  KER_LOAD_NEXT_TASK_ID                             ;total 1.63uS @8MHz     ( 13 clocks) 
 549               			LDS   R16                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 550               			INC   R16                                         ;increment task_id      (  1 clock ) 
 551               			LDS   R17                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 552               		_MOD_CONT\@:                                          ;use local label                     
 553               		    CP    R16                , R17                    ;compare R17 with R16   (  1 clock ) 
 554               			BRLO  _MOD_DONE\@                                 ;if R16<R17, done       (  2 clocks) 
 555               			SUB   R16                , R17                    ;subtract R17 from R16  (  1 clock ) 
 556               			RJMP  _MOD_CONT\@                                 ;go to loop start       (  2 clocks) 
 557               		_MOD_DONE\@:                                          ;use local label                     
 558               		    STS   KerBase+OFB_TID    , R16                    ;save task_id%ntask     (  2 clocks) 
 559               	.endm                                                                                          
 560               	;;=================================load next task id end====================================;; 
 561               	
 562               	
 563               	
 564               	
 565               	
 566               	;;==============================increment tick counter starting=============================;; 
 567               	;used registers          : R16, R17                                                            
 568               	;arg registers           : None                                                                
 569               	;return registers        : None                                                                
 570               	;unsafe access registers : R16, R17                                                            
 571               	.macro  KER_TICK_INCREMENT                                ;total 3.38uS @8MHz     ( 26 clocks) 
 572               			LDS   R16                , KerBase+OFB_TICK0      ;load Byte0             (  2 clocks) 
 573               			INC   R16                                         ;add 1 with Byte0       (  1 clock ) 
 574               			STS   KerBase+OFB_TICK0  , R16                    ;set Byte0              (  2 clocks) 
 575               			LDI   R17                , 0x00                   ;clear reg              (  1 clock ) 
 576               			LDS   R16                , KerBase+OFB_TICK1      ;load Byte1             (  2 clocks) 
 577               			ADC   R16                , R17                    ;add carry with Byte1   (  1 clock ) 
 578               			STS   KerBase+OFB_TICK1  , R16                    ;set Byte1              (  2 clocks) 
 579               			LDS   R16                , KerBase+OFB_TICK2      ;load Byte2             (  2 clocks) 
 580               			ADC   R16                , R17                    ;add carry with Byte2   (  1 clock ) 
 581               			STS   KerBase+OFB_TICK2  , R16                    ;set Byte2              (  2 clocks) 
 582               			LDS   R16                , KerBase+OFB_TICK3      ;load Byte3             (  2 clocks) 
 583               			ADC   R16                , R17                    ;add carry with Byte3   (  1 clock ) 
 584               			STS   KerBase+OFB_TICK3  , R16                    ;set Byte3              (  2 clocks) 
 585               			LDS   R16                , KerBase+OFB_TICK4      ;load Byte4             (  2 clocks) 
 586               			ADC   R16                , R17                    ;add carry with Byte4   (  1 clock ) 
 587               			STS   KerBase+OFB_TICK4  , R16                    ;set Byte4              (  2 clocks) 
 588               	.endm                                                                                          
 589               	;;=================================increment tick counter end===============================;; 
 590               	
 591               	
 592               	
 593               	
 594               	
 595               	;;==============================load task id & sp starting==================================;; 
 596               	;used registers          : R16, R17, R30(ZL), R31(ZH)                                          
 597               	;arg registers           : None                                                                
 598               	;return registers        : None                                                                
 599               	;unsafe access registers : R16, R17, R30(ZL), R31(ZH)                                          
 600               	.macro  KER_LOAD_TASK_ID_AND_SP                           ;total 1.75uS @8MHz     ( 14 clocks) 
 601               			LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 602               			LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 603               			KER_CALC_ADDR_OFF_WORD                            ;calc offset            (  6 clocks) 
 604               			LDD   R16                , Z+0                    ;load SPL at ZP         (  2 clocks) 
 605               			LDD   R17                , Z+1                    ;load SPH at ZP         (  2 clocks) 
 606               			OUT   IOSPL              , R16                    ;load SPL0              (  1 clock ) 
 607               			OUT   IOSPH              , R17                    ;load SPH0              (  1 clock ) 
 608               	.endm                                                                                          
 609               	;;=================================load task id & sp end====================================;; 
 610               	
 611               	
 612               	
 613               	
 614               	
 615               	;;================================push msp & zp starting====================================;; 
 616               	;used registers          : R16, R17, R26(XL), R27(XH), R30(ZL), R31(ZH)                        
 617               	;arg registers           : None                                                                
 618               	;return registers        : None                                                                
 619               	;unsafe access registers : R16, R17, R26(XL), R27(XH), R30(ZL), R31(ZH)                        
 620               	.macro  KER_PUSH_MSP_ZP                                   ;total 2.25uS @8MHz     ( 18 clocks) 
 621               	        LDS   XL                 , KerSSZ+OFM_MSPI+0      ;load val low           (  2 clocks) 
 622               			LDS   XH                 , KerSSZ+OFM_MSPI+1      ;load val high          (  2 clocks) 
 623               			IN    R16                , IOSPL                  ;copy                   (  1 clock ) 
 624               			IN    R17                , IOSPH                  ;copy                   (  1 clock ) 
 625               			ST    X+                 , R16                    ;store main SPL         (  2 clocks) 
 626               	        ST    X+                 , R17                    ;store main SPH         (  2 clocks) 
 627               			ST    X+                 , ZL                     ;store main ZL          (  2 clocks) 
 628               			ST    X+                 , ZH                     ;store main ZH          (  2 clocks) 
 629               			STS   KerSSZ+OFM_MSPI+0  , XL                     ;store new index        (  2 clocks) 
 630               			STS   KerSSZ+OFM_MSPI+1  , XH                     ;store new index        (  2 clocks) 
 631               	.endm                                                                                          
 632               	;;===================================push msp & zp end======================================;; 
 633               	
 634               	
 635               	
 636               	
 637               	
 638               	;;=================================pop msp & zp starting====================================;; 
 639               	;used registers          : R16, R17, R26(XL), R27(XH), R30(ZL), R31(ZH)                        
 640               	;arg registers           : None                                                                
 641               	;return registers        : None                                                                
 642               	;unsafe access registers : R16, R17, R26(XL), R27(XH), R30(ZL), R31(ZH)                        
 643               	.macro  KER_POP_MSP_ZP                                    ;total 2.25uS @8MHz     ( 18 clocks) 
 644               			LDS   XL                 , KerSSZ+OFM_MSPI+0      ;load val low           (  2 clocks) 
 645               			LDS   XH                 , KerSSZ+OFM_MSPI+1      ;load val high          (  2 clocks) 
 646               			LD    ZH                 , -X                     ;load ZH                (  2 clocks) 
 647               			LD    ZL                 , -X                     ;load ZL                (  2 clocks) 
 648               			LD    R17                , -X                     ;load main SPH          (  2 clocks) 
 649               			LD    R16                , -X                     ;load main SPL          (  2 clocks) 
 650               			OUT   IOSPL              , R16                    ;set SPL                (  1 clock ) 
 651               			OUT   IOSPH              , R17                    ;set SPH                (  1 clock ) 
 652               			STS   KerSSZ+OFM_MSPI+0  , XL                     ;store new index        (  2 clocks) 
 653               			STS   KerSSZ+OFM_MSPI+1  , XH                     ;store new index        (  2 clocks) 
 654               	.endm                                                                                          
 655               	;;====================================pop msp & zp end======================================;; 
 656               	
 657               	
 658               	
 659               	
 660               	
 661               	;;============================sleep timeout management starting=============================;; 
 662               	;used registers          : R16, R17, R18, R24, R30(ZL), R31(ZH)                                
 663               	;arg registers           : R24 (SCH_MODE_HANDLER/SCH_MODE_THREAD)                              
 664               	;return registers        : R24 (READY/BLOCKED/EXECUTING/SUSPENDED/CONS_LAT)                    
 665               	;unsafe access registers : R16, R17, R18, R24, R30(ZL), R31(ZH)                                
 666               	.macro  KER_SLP_TIME_MGNT                                 ;total 5.50uS @8MHz     ( 44 clocks) 
 667               			LDI   ZL                 , lo8(KerSchSlp)         ;fetch base pos low     (  1 clock ) 
 668               			LDI   ZH                 , hi8(KerSchSlp)         ;fetch base pos high    (  1 clock ) 
 669               			KER_CALC_ADDR_OFF_WORD                            ;calc offset            (  6 clocks) 
 670               			;fetch current value from ram, if val=0, skip decrement                                
 671               	        LDD   R16                , Z+0                    ;load val low byte      (  2 clocks) 
 672               			LDD   R17                , Z+1                    ;load val high byte     (  2 clocks) 
 673               			MOV   R18                , R16                    ;copy                   (  1 clock ) 
 674               			OR    R18                , R17                    ;or high & low bytes    (  1 clock ) 
 675               			BREQ  _VAL_NULL\@                                 ;val=0, save sts        (  2 clocks) 
 676               	        CPI   R24                , SCH_MODE_THREAD        ;if arg=1, thread mode  (  1 clock ) 
 677               			BREQ  _VAL_NOT_NULL\@                             ;no need to dec val     (  2 clocks) 
 678               			;R17:R16 contains 16 bit sleep timer val, decrease val by 1                            
 679               			LDI   R18                , 0x01                   ;set val 1              (  1 clock ) 
 680               	        SUB   R16                , R18                    ;subtract low byte      (  1 clock ) 
 681               			LDI   R18                , 0x00                   ;clear                  (  1 clock ) 
 682               			SBC   R17                , R18                    ;subtract carry if any  (  1 clock ) 
 683               			;store new value                                                                       
 684               			STD   Z+0                , R16                    ;store low byte         (  2 clocks) 
 685               			STD   Z+1                , R17                    ;store low byte         (  2 clocks) 
 686               			MOV   R18                , R16                    ;copy                   (  1 clock ) 
 687               			OR    R18                , R17                    ;or high & low bytes    (  1 clock ) 
 688               			BRNE  _VAL_NOT_NULL\@                             ;val!=0                 (  2 clocks) 
 689               		_VAL_NULL\@:                                                                               
 690               		    ;find ram address for status                                                           
 691               		    LDI   ZL                 , lo8(KerSchSts)         ;fetch base pos low     (  1 clock ) 
 692               			LDI   ZH                 , hi8(KerSchSts)         ;fetch base pos high    (  1 clock ) 
 693               	        KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 694               			;update flag as task is ready                                                          
 695               			LDI   R24                , TASK_READY             ;set TASK_READY         (  1 clock ) 
 696               			ST    Z                  , R24                    ;update flag            (  2 clocks) 
 697               			RJMP  _EXIT_SLP_TIME\@                            ;jump to exit           (  2 clocks) 
 698               	    _VAL_NOT_NULL\@:                                                                           
 699               		    LDI   ZL                 , lo8(KerSchSts)         ;fetch base pos low     (  1 clock ) 
 700               			LDI   ZH                 , hi8(KerSchSts)         ;fetch base pos high    (  1 clock ) 
 701               	        KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 702               		    LD    R24                , Z                      ;return sts             (  2 clocks) 
 703               	    _EXIT_SLP_TIME\@:                                                                          
 704               	.endm                                                                                          
 705               	;;============================sleep timeout management end==================================;; 
 706               	
 707               	
 708               	
 709               	
 710               	
 711               	;;============================current task priority starting================================;; 
 712               	;used registers          : R16, R24, R30(ZL), R31(ZH)                                          
 713               	;arg registers           : None                                                                
 714               	;return registers        : R24 (Current task priority)                                         
 715               	;unsafe access registers : R16, R24, R30(ZL), R31(ZH)                                          
 716               	.macro  KER_CURR_TASK_PRIO                                ;total 1.13uS @8MHz     (  9 clocks) 
 717               			LDI    ZL                , lo8(KerSchPr)          ;load low addr          (  1 clock ) 
 718               			LDI    ZH                , hi8(KerSchPr)          ;load high addr         (  1 clock ) 
 719               			LDI    R16               , 0x00                   ;clear reg, for carry   (  1 clock ) 
 720               			LDS    R24               , KerBase+OFB_TID        ;load task id           (  2 clocks) 
 721               	        ADD    ZL                , R24                    ;add low addr           (  1 clock ) 
 722               			ADC    ZH                , R16                    ;add carry if any       (  1 clock ) 
 723               			LD     R24               , Z                      ;load current tid prio  (  2 clocks) 
 724               	.endm                                                                                          
 725               	;;==============================current task priority end===================================;; 
 726               	
 727               	
 728               	
 729               	
 730               	
 731               	;;================================run scheduler starting====================================;; 
 732               	;used registers          : R16, R17, R18, R24, R25, R30(ZL), R31(ZH)                           
 733               	;arg registers           : R24 (SCH_MODE_HANDLER/SCH_MODE_THREAD)                              
 734               	;return registers        : None                                                                
 735               	;unsafe access registers : R16, R17, R18, R24, R25, R30(ZL), R31(ZH)                           
 736               	.macro  KER_RUN_SCHEDULER                                 ;total 11.5uS @8MHz     ( 92 clocks) 
 737               			LDI    R16               , 0xFF                   ;set 0xff               (  1 clock ) 
 738               			STS    KerBase+OFB_LPR   , R16                    ;lowest priority        (  2 clocks) 
 739               			LDI    R16               , 0x00                   ;start from 0           (  1 clock ) 
 740               			STS    KerBase+OFB_PTID  , R16                    ;highest prio tid=0     (  2 clocks) 
 741               			MOV    R15               , R24                    ;copy sch mode          (  1 clock ) 
 742               		_KER_SCH_LOOP\@:                                                                           
 743               		    ;store task id to run from KER_DEC_SLP_TIMEOUT                                         
 744               			STS    KerBase+OFB_TID   , R16                    ;store task id          (  2 clocks) 
 745               	        ;sleep time decrement, update ready/blocked status                                     
 746               			MOV    R24               , R15                    ;restore sch mode       (  1 clock ) 
 747               			KER_SLP_TIME_MGNT                                 ;update return vars     ( 44 clocks) 
 748               	        CPI    R24               , TASK_READY             ;compare                (  1 clock ) 
 749               	        BRNE   _KER_SCH_NEXT\@                            ;skip if task not ready (  2 clocks) 
 750               			KER_CURR_TASK_PRIO                                ;get task prio ->R24    (  9 clocks) 
 751               	        ;compare current task priority with lowest priority found so far                       
 752               			LDS    R16               , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
 753               			CP     R24               , R16                    ;compare                (  1 clock ) 
 754               			BRSH   _KER_SCH_NEXT\@                            ;if prio>=lowest prio   (  2 clocks) 
 755               			;found new lowest priority                                                             
 756               			STS    KerBase+OFB_LPR   , R24                    ;save lowest priority   (  2 clocks) 
 757               			LDS    R16               , KerBase+OFB_TID        ;load task id           (  2 clocks) 
 758               			STS    KerBase+OFB_PTID  , R16                    ;save lowest priority   (  2 clocks) 
 759               	                                                                                               
 760               	    _KER_SCH_NEXT\@:                                                                           
 761               		    LDS    R16               , KerBase+OFB_TID        ;load task id           (  2 clocks) 
 762               			INC    R16                                        ;increment by 1         (  1 clock ) 
 763               			LDS    R17               , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 764               			CP     R16               , R17                    ;compare with ntask     (  2 clocks) 
 765               			BRSH   _KER_SCH_EXIT\@                            ;if task_id>=ntask      (  2 clocks) 
 766               			RJMP   _KER_SCH_LOOP\@                            ;jump to entry          (  2 clocks) 
 767               		_KER_SCH_EXIT\@:                                                                           
 768               	        LDS    R16               , KerBase+OFB_PTID       ;load high prio task id (  2 clocks) 
 769               			STS    KerBase+OFB_TID   , R16                    ;for test only          (  2 clocks) 
 770               	.endm                                                                                          
 771               	;;===================================run scheduler end======================================;; 
 772               	
 773               	
 774               	
 775               	
 776               	
 777               	;;================================calc cpu usage starting===================================;; 
 778               	;used registers          : R16, R17                                                            
 779               	;arg registers           : None                                                                
 780               	;return registers        : None                                                                
 781               	;unsafe access registers : R16, R17                                                            
 782               	.macro  KER_CPU_USAGE                                     ;total 3.25uS @8MHz     ( 26 clocks) 
 783               	        ;check if current target task is idle task or not                                      
 784               	        LDS    R16               , KerBase+OFB_TID        ;load target task_id    (  2 clocks) 
 785               			TST    R16                                        ;check if idle task     (  1 clock ) 
 786               			BREQ   _KER_USG_TICK\@                            ;task_id=idle, skip     (  2 clocks) 
 787               			LDS    R16               , KerBase+OFB_UATC       ;load active tick cnt   (  2 clocks) 
 788               			INC    R16                                        ;inc active tick cnt    (  1 clock ) 
 789               			STS    KerBase+OFB_UATC  , R16                    ;store new val          (  2 clocks) 
 790               		_KER_USG_TICK\@:                                                                           
 791               			LDS    R16               , KerBase+OFB_UTC        ;load usage tick cnt    (  2 clocks) 
 792               			INC    R16                                        ;increment tick cnt     (  1 clock ) 
 793               			CPI    R16               , 100                    ;compare with 100       (  1 clock ) 
 794               			BRLO   _KER_USG_UTC_SV\@                          ;val<100, save new val  (  2 clocks) 
 795               			LDI    R16               , 0x00                   ;val>=100, roll back    (  1 clock ) 
 796               			LDS    R17               , KerBase+OFB_UATC       ;load active tick cnt   (  2 clocks) 
 797               			STS    KerBase+OFB_USAGE , R17                    ;store usage            (  2 clocks) 
 798               			LDI    R17               , 0x00                   ;clear reg              (  1 clock ) 
 799               			STS    KerBase+OFB_UATC  , R17                    ;clear active tick cnt  (  2 clocks) 
 800               		_KER_USG_UTC_SV\@:                                                                         
 801               			STS    KerBase+OFB_UTC   , R16                    ;store new val          (  2 clocks) 
 802               	.endm                                                                                          
 803               	;;===================================calc cpu usage end=====================================;; 
 804               	
 805               	
 806               	
 807               	
 808               	
 809               	;;=================================ISR execution starting===================================;; 
 810               	.global  __vector_16                                                                           
 811               	    __vector_16:                                          ;total 40.00uS @8MHz    (320 clocks) 
 812:kernel.S      **** 	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 813:kernel.S      ****         KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 814:kernel.S      **** 		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 815:kernel.S      **** 		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 816:kernel.S      **** 		KER_TICK_INCREMENT                                ;increment tick counter ( 26 clocks) 
 817:kernel.S      **** 		LDI    R24               , SCH_MODE_HANDLER       ;set sch mode           (  1 clock ) 
 818:kernel.S      **** 		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
 819:kernel.S      **** 		KER_CPU_USAGE                                     ;calc cpu usage         ( 26 clocks) 
 820:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 821:kernel.S      **** 		KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
 822:kernel.S      **** 	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 823:kernel.S      **** 		RETI                                              ;return from interrupt  (  4 clocks) 
 824               	;;====================================ISR execution end=====================================;; 
 825               	
 826               	
 827               	
 828               	
 829               	
 830               	;;================================SysTick reg init starting=================================;; 
 831               	;used registers          : R16, R17, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
 832               	;arg registers           : R24(Prescaler), R22(ReloadVal)                                      
 833               	;return registers        : None                                                                
 834               	;unsafe access registers : R16, R17, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
 835               	Kernel_SysTick_Reg_Init:                                  ;total 11.5uS @8MHz     ( 92 clocks) 
 836:kernel.S      ****         CLI                                               ;disable global int     (  1 clock ) 
 837:kernel.S      **** 		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 838:kernel.S      ****         KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 839               			;clear reg                                                                             
 840:kernel.S      **** 		LDI   R16                , 0x00                   ;set 0x00 to R16        (  1 clock ) 
 841               			;clear tick counter                                                                    
 842:kernel.S      **** 		STS   KerBase+OFB_TICK0  , R16                    ;clear  KerBase[0]      (  2 clocks) 
 843:kernel.S      **** 		STS   KerBase+OFB_TICK1  , R16                    ;clear  KerBase[1]      (  2 clocks) 
 844:kernel.S      **** 		STS   KerBase+OFB_TICK2  , R16                    ;clear  KerBase[2]      (  2 clocks) 
 845:kernel.S      **** 		STS   KerBase+OFB_TICK3  , R16                    ;clear  KerBase[3]      (  2 clocks) 
 846:kernel.S      **** 		STS   KerBase+OFB_TICK4  , R16                    ;clear  KerBase[4]      (  2 clocks) 
 847               			;clear system registers                                                                
 848:kernel.S      **** 		STS   KerBase+OFB_PRS    , R16                    ;clear  KerBase[5]      (  2 clocks) 
 849:kernel.S      **** 		STS   KerBase+OFB_RLD    , R16                    ;clear  KerBase[6]      (  2 clocks) 
 850:kernel.S      **** 		STS   KerBase+OFB_TID    , R16                    ;clear  KerBase[7]      (  2 clocks) 
 851:kernel.S      **** 		STS   KerBase+OFB_NTSK   , R16                    ;clear  KerBase[8]      (  2 clocks) 
 852:kernel.S      **** 		STS   KerBase+OFB_LPR    , R16                    ;clear  KerBase[9]      (  2 clocks) 
 853:kernel.S      ****         STS   KerBase+OFB_PTID   , R16                    ;clear  KerBase[10]     (  2 clocks) 
 854:kernel.S      **** 		STS   KerBase+OFB_UTC    , R16                    ;clear  KerBase[11]     (  2 clocks) 
 855:kernel.S      **** 		STS   KerBase+OFB_UATC   , R16                    ;clear  KerBase[12]     (  2 clocks) 
 856:kernel.S      **** 		STS   KerBase+OFB_USAGE  , R16                    ;clear  KerBase[13]     (  2 clocks) 
 857               			;clear all timer registers                                                             
 858:kernel.S      **** 		STS   SRTCCR0A           , R16                    ;clear TCCR0A           (  2 clocks) 
 859:kernel.S      **** 		STS   SRTCCR0B           , R16                    ;clear TCCR0B           (  2 clocks) 
 860:kernel.S      **** 		STS   SRTIMSK0           , R16                    ;clear TIMSK0           (  2 clocks) 
 861:kernel.S      **** 		STS   SRTIFR0            , R16                    ;clear TIFR0            (  2 clocks) 
 862:kernel.S      **** 		STS   SROCR0A            , R16                    ;clear OCR0A            (  2 clocks) 
 863:kernel.S      **** 		STS   SROCR0B            , R16                    ;clear OCR0B            (  2 clocks) 
 864:kernel.S      **** 		STS   SRTCNT0            , R16                    ;clear TCNT0            (  2 clocks) 
 865               			;save values for future use                                                            
 866:kernel.S      **** 		STS   KerBase+OFB_PRS    , R24                    ;KerBase[5] prescaler   (  2 clocks) 
 867:kernel.S      **** 		STS   KerBase+OFB_RLD    , R22                    ;KerBase[6] reload val  (  2 clocks) 
 868:kernel.S      ****         KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 869:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 870               	;;===================================SysTick reg init end===================================;; 
 871               	
 872               	
 873               	
 874               	
 875               	
 876               	;;===============================kernel task create starting================================;; 
 877               	;used registers          : R16, R17, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)         
 878               	;arg registers           : R25:R24(FuncPtr), R22(TaskPriority)                                 
 879               	;return registers        : None                                                                
 880               	;unsafe access registers : R16, R17, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)         
 881               	Kernel_Task_Create:                                       ;total 20.38uS @8MHz    (163 clocks) 
 882:kernel.S      ****         KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 883:kernel.S      **** 		LDI   R17                , 0x00                   ;clear reg              (  1 clock ) 
 884               			;set priority to KerSchPr+task_id                                                      
 885:kernel.S      **** 		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 886:kernel.S      **** 		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 887:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 888:kernel.S      **** 		ST    Z                  , R22                    ;save priority          (  2 clocks) 
 889               			;set task status to KerSchSts+task_id                                                  
 890:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 891:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 892:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 893:kernel.S      **** 		LDI   R16                , TASK_READY             ;set status as ready    (  1 clock ) 
 894:kernel.S      **** 		ST    Z                  , R16                    ;save status            (  2 clocks) 
 895               			;stack pointer for current task (KerStack + KER_STK_SZ*(task_id+1) - 1) ->stack top    
 896:kernel.S      **** 		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 897:kernel.S      **** 		MOV   R17                , R16                    ;load task_id           (  1 clock ) 
 898:kernel.S      **** 		INC   R17                                         ;increment task_id      (  1 clock ) 
 899:kernel.S      **** 		LDI   R18                , KER_STK_SZ             ;load stack size        (  1 clock ) 
 900:kernel.S      **** 		MUL   R17                , R18                    ;multiply to get offset (  2 clocks) 
 901:kernel.S      **** 		MOV   ZL                 , R0                     ;load multiplied low    (  1 clocks) 
 902:kernel.S      **** 		MOV   ZH                 , R1                     ;load multiplied high   (  1 clocks) 
 903:kernel.S      **** 		SBIW  ZL                 , 0x01                   ;dec multiplied val-1   (  2 clocks) 
 904:kernel.S      **** 		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 905:kernel.S      **** 		LDI   R17                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
 906:kernel.S      **** 		LDI   R18                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
 907:kernel.S      **** 		ADD   ZL                 , R17                    ;add low bytes          (  1 clock ) 
 908:kernel.S      **** 		ADC   ZH                 , R18                    ;add high bytes+carry   (  1 clock ) 
 909:kernel.S      **** 		OUT   IOSPL              , ZL                     ;load SPL               (  1 clock ) 
 910:kernel.S      ****         OUT   IOSPH              , ZH                     ;load SPH               (  1 clock ) 
 911               			;function argument directly returns word address                                       
 912:kernel.S      **** 	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
 913:kernel.S      **** 		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 914               			;push context to stack of this task                                                    
 915:kernel.S      **** 		KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 916               			;read stack pointer of current task (necessary when restore)                           
 917:kernel.S      **** 		IN    R17                , IOSPL                  ;read SPL               (  1 clock ) 
 918:kernel.S      ****         IN    R18                , IOSPH                  ;read SPH               (  1 clock ) 
 919               			;calculate the address where current task's SP will be stored and store SP             
 920:kernel.S      **** 		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 921:kernel.S      **** 		MOV   R19                , R16                    ;copy task_id           (  1 clock ) 
 922:kernel.S      **** 		LSL   R19                                         ;left shift to multiply (  1 clock ) 
 923:kernel.S      **** 		LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 924:kernel.S      **** 		LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 925:kernel.S      **** 		ADD   ZL                 , R19                    ;add offset to array    (  1 clock ) 
 926:kernel.S      **** 		LDI   R16                , 0x00                   ;clear reg              (  1 clock ) 
 927:kernel.S      **** 		ADC   ZH                 , R16                    ;add carry if any       (  1 clock ) 
 928:kernel.S      **** 		ST    Z+                 , R17                    ;SPL at KerPSp+offset   (  2 clocks) 
 929:kernel.S      **** 		ST    Z                  , R18                    ;SPH at KerPSp+offset   (  2 clocks) 
 930               			;increment task_id                                                                     
 931:kernel.S      **** 		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 932:kernel.S      **** 		INC   R16                                         ;increment task_id      (  1 clock ) 
 933:kernel.S      **** 		STS   KerBase+OFB_TID    , R16                    ;store task_id          (  2 clocks) 
 934               			;increment ntask                                                                       
 935:kernel.S      **** 		LDS   R16                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 936:kernel.S      **** 		INC   R16                                         ;increment ntask        (  1 clock ) 
 937:kernel.S      **** 		STS   KerBase+OFB_NTSK   , R16                    ;store ntask            (  2 clocks) 
 938:kernel.S      **** 		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 939:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 940               	;;==================================kernel task create end==================================;; 
 941               	
 942               	
 943               	
 944               	
 945               	
 946               	;;=================================kernel start tasks starting==============================;; 
 947               	;used registers          : R0~R31                                                              
 948               	;arg registers           : None                                                                
 949               	;return registers        : None                                                                
 950               	;unsafe access registers : R16, R17, R18, R24, R25, R30(ZL), R31(ZH)                           
 951               	Kernel_Start_Tasks:                                       ;total 11.38uS @8MHz    ( 91 clocks) 
 952:kernel.S      **** 		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 953:kernel.S      **** 		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
 954:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 955:kernel.S      **** 		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 956               			;config timer for system tick                                                          
 957:kernel.S      **** 		KER_TIMER_INIT                                    ;init timer, int enable ( 12 clocks) 
 958               			;execute return to jump to highest priority task                                       
 959:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 960               	;;==================================kernel start tasks end==================================;; 
 961               	
 962               	
 963               	
 964               	
 965               	
 966               	;;===================================kernel init starting===================================;; 
 967               	;used registers          : R1, R16, R17, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
 968               	;arg registers           : None                                                                
 969               	;return registers        : None                                                                
 970               	;unsafe access registers : R1, R16, R17, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
 971               	Kernel_Init:                                              ;total 38.63uS @8MHz    (309 clocks) 
 972:kernel.S      **** 		CLR   R1                                          ;gcc expects            (  1 clock ) 
 973               	        ;store stack top (for MSP) addr to KerSSZ+OFM_MSPI0:1                                  
 974:kernel.S      **** 		LDI   R16                , lo8(KerSSZ+OFM_MSPS)   ;load low address       (  1 clock ) 
 975:kernel.S      **** 		LDI   R17                , hi8(KerSSZ+OFM_MSPS)   ;load high address      (  1 clock ) 
 976:kernel.S      ****         STS   KerSSZ+OFM_MSPI+0  , R16                    ;set mspi to stack top  (  2 clocks) 
 977:kernel.S      **** 		STS   KerSSZ+OFM_MSPI+1  , R17                    ;set mspi to stack top  (  2 clocks) 
 978:kernel.S      **** 		KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 979               			;init timer for kernel                                                                 
 980:kernel.S      **** 		LDI   R24                , 0x03                   ;set prescaler          (  1 clock ) 
 981:kernel.S      **** 		LDI   R22                , 0x82                   ;set reload val         (  1 clock ) 
 982:kernel.S      **** 		CALL  Kernel_SysTick_Reg_Init                     ;init timer             ( 92 clocks) 
 983               			;create idle task at task_id 0, priority 0xFF (lowest)                                 
 984:kernel.S      **** 		LDI   R24                , lo8(Kernel_Task_Idle)  ;load func addr low     (  1 clock ) 
 985:kernel.S      **** 		LDI   R25                , hi8(Kernel_Task_Idle)  ;load func addr high    (  1 clock ) 
 986:kernel.S      **** 		LSR   R25                                         ;right shift to divide  (  1 clock ) 
 987:kernel.S      **** 		ROR   R24                                         ;rotate right th carry  (  1 clock ) 
 988:kernel.S      **** 		LDI   R22                , 0xFF                   ;set max val            (  1 clock ) 
 989:kernel.S      **** 		CALL  Kernel_Task_Create                          ;init idle task         (163 clocks) 
 990:kernel.S      **** 		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 991               			;execute return to jump to task0, pushed while task init                               
 992:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 993               	;;======================================kernel init end=====================================;; 
 994               	
 995               	
 996               	
 997               	
 998               	
 999               	;;=================================kernel idle task starting================================;; 
 1000               	;used registers          : None                                                                
 1001               	;arg registers           : None                                                                
 1002               	;return registers        : None                                                                
 1003               	;unsafe access registers : None                                                                
 1004               	Kernel_Task_Idle:                                         ;total 0.5uS @8MHz      (  4 clocks) 
 1005               	    _IDLE_LOOP:                                           ;forever loop                        
1006:kernel.S      **** 		RJMP  _IDLE_LOOP                                  ;return from subroutine (  4 clocks) 
 1007               	;;==================================kernel idle task end====================================;; 
 1008               	
 1009               	
 1010               	
 1011               	
 1012               	
 1013               	;;================================kernel task sleep starting================================;; 
 1014               	;used registers          : R0~R31                                                              
 1015               	;arg registers           : R25:R24(SleepTime)                                                  
 1016               	;return registers        : None                                                                
 1017               	;unsafe access registers : R16, R17, R18, R24, R25, R30(ZL), R31(ZH)                           
 1018               	Kernel_Task_Sleep:                                        ;total 35.5uS @8MHz     (284 clocks) 
 1019               	        ;save current context                                                                  
1020:kernel.S      ****         KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
1021:kernel.S      **** 		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 1022               			;create next task wakeup time (args R25:R24)                                           
1023:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
1024:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
1025:kernel.S      **** 		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
1026:kernel.S      **** 		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
1027:kernel.S      **** 		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 1028               			;update task scheduler status as blocked                                               
1029:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
1030:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
1031:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
1032:kernel.S      ****         LDI   R16                , TASK_BLOCKED           ;block task until cnt=0 (  1 clock ) 
1033:kernel.S      **** 		STD   Z+0                , R16                    ;save block flag        (  2 clocks) 
 1034               			;run scheduler, load next task sp, restore context                                     
1035:kernel.S      **** 		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
1036:kernel.S      **** 		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
1037:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
1038:kernel.S      **** 		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
1039:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1040               	;;=================================kernel task sleep end====================================;; 
 1041               	
 1042               	
 1043               	
 1044               	
 1045               	
 1046               	;;========================kernel task constant latency starting=============================;; 
 1047               	;used registers          : R16, R24, R25, R30(ZL), R31(ZH)                                     
 1048               	;arg registers           : R25:R24(SleepTime)                                                  
 1049               	;return registers        : None                                                                
 1050               	;unsafe access registers : R16, R24, R25, R30(ZL), R31(ZH)                                     
 1051               	Kernel_Task_Constant_Latency:                             ;total 35.5uS @8MHz     ( 26 clocks) 
 1052               			;create next task wakeup time (args R25:R24)                                           
1053:kernel.S      **** 		CLI                                               ;disable interrupt      (  1 clock ) 
1054:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
1055:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
1056:kernel.S      **** 		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
1057:kernel.S      **** 		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
1058:kernel.S      **** 		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 1059               			;update task scheduler status as constant latency                                      
1060:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
1061:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
1062:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
1063:kernel.S      ****         LDI   R16                , TASK_CONS_LAT          ;save as cons_lat       (  1 clock ) 
1064:kernel.S      **** 		STD   Z+0                , R16                    ;save block flag        (  2 clocks) 
1065:kernel.S      **** 		SEI                                               ;enable interrupt       (  1 clock ) 
1066:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1067               	;;=============================kernel task constant latency end=============================;; 
 1068               	
 1069               	
 1070               	
 1071               	
 1072               	
 1073               	;;=======================kernel task constant latency sleep starting========================;; 
 1074               	;used registers          : R16, R24, R25, R30(ZL), R31(ZH)                                     
 1075               	;arg registers           : R25:R24(SleepTime)                                                  
 1076               	;return registers        : None                                                                
 1077               	;unsafe access registers : R16, R24, R25, R30(ZL), R31(ZH)                                     
 1078               	Kernel_Task_Constant_Latency_Sleep:                       ;total 35.5uS @8MHz     ( 26 clocks) 
 1079               			;save current context                                                                  
1080:kernel.S      ****         KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
1081:kernel.S      **** 		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 1082               			;update task scheduler status as blocked                                               
1083:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
1084:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
1085:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
1086:kernel.S      ****         LDI   R16                , TASK_CONS_LAT          ;cnstnt_lat until cnt=0 (  1 clock ) 
1087:kernel.S      **** 		STD   Z+0                , R16                    ;save block flag        (  2 clocks) 
 1088               			;run scheduler, load next task sp, restore context                                     
1089:kernel.S      **** 		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
1090:kernel.S      **** 		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
1091:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
1092:kernel.S      **** 		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
1093:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1094               	;;=============================kernel task constant latency end=============================;; 
 1095               	
 1096               	
 1097               	
 1098               	
 1099               	
 1100               	;;===========================kernel task sleep time get starting============================;; 
 1101               	;used registers          : R16, R24, R25, R30(ZL), R31(ZH)                                     
 1102               	;arg registers           : R24(TaskID)                                                         
 1103               	;return registers        : R25:R24(SleepTime)                                                  
 1104               	;unsafe access registers : R16, R24, R25, R30(ZL), R31(ZH)                                     
 1105               	Kernel_Task_Sleep_Time_Get:                               ;total 1.88uS @8MHz     ( 15 clocks) 
1106:kernel.S      **** 		MOV   R16                , R24                    ;copy                   (  1 clock ) 
1107:kernel.S      **** 		LSL   R16                                         ;x2                     (  1 clock ) 
1108:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
1109:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
1110:kernel.S      **** 		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
1111:kernel.S      **** 		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
1112:kernel.S      **** 		ADC   ZH                 , R16                    ;add high byte+carry    (  1 clock ) 
1113:kernel.S      **** 		LDD   R24                , Z+0                    ;load sleep time        (  2 clocks) 
1114:kernel.S      **** 		LDD   R25                , Z+1                    ;load sleep time        (  2 clocks) 
1115:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1116               	;;==============================kernel task sleep time get end==============================;; 
 1117               	
 1118               	
 1119               	
 1120               	
 1121               	
 1122               	;;==============================kernel task status get starting=============================;; 
 1123               	;used registers          : R16, R24, R30(ZL), R31(ZH)                                          
 1124               	;arg registers           : R24(TaskID)                                                         
 1125               	;return registers        : R24(TaskSts)                                                        
 1126               	;unsafe access registers : R16, R24, R30(ZL), R31(ZH)                                          
 1127               	Kernel_Task_Status_Get:                                   ;total 1.50uS @8MHz     ( 12 clocks) 
1128:kernel.S      **** 		MOV   R16                , R24                    ;copy                   (  1 clock ) 
1129:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
1130:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
1131:kernel.S      **** 		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
1132:kernel.S      **** 		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
1133:kernel.S      **** 		ADC   ZH                 , R16                    ;add high byte+carry    (  1 clock ) 
1134:kernel.S      **** 		LD    R24                , Z                      ;load task status       (  2 clocks) 
1135:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1136               	;;================================kernel task status get end================================;; 
 1137               	
 1138               	
 1139               	
 1140               	
 1141               	
 1142               	;;================================kernel ntask get starting=================================;; 
 1143               	;used registers          : R24                                                                 
 1144               	;arg registers           : None                                                                
 1145               	;return registers        : R24(NTask)                                                          
 1146               	;unsafe access registers : R24                                                                 
 1147               	Kernel_NTask_Get:                                         ;total 0.75uS @8MHz     (  6 clocks) 
1148:kernel.S      **** 		LDS   R24                 , KerBase+OFB_NTSK      ;load ntask             (  2 clock ) 
1149:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1150               	;;===================================kernel ntask get end===================================;; 
 1151               	
 1152               	
 1153               	
 1154               	
 1155               	
 1156               	;;=============================kernel task priority get starting============================;; 
 1157               	;used registers          : R16, R24, R30(ZL), R31(ZH)                                          
 1158               	;arg registers           : R24(TaskID)                                                         
 1159               	;return registers        : R24(TaskPriority)                                                   
 1160               	;unsafe access registers : R16, R24, R30(ZL), R31(ZH)                                          
 1161               	Kernel_Task_Prio_Get:                                     ;total 1.50uS @8MHz     ( 12 clocks) 
 1162               			;get priority of the task id, arg (task_id->R24), return R24                           
1163:kernel.S      **** 		MOV   R16                , R24                    ;copy task_id           (  1 clock ) 
1164:kernel.S      **** 		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
1165:kernel.S      **** 		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
1166:kernel.S      **** 		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
1167:kernel.S      **** 		LDI   R16                , 0x00                   ;clear reg              (  1 clock ) 
1168:kernel.S      **** 		ADC   ZH                 , R16                    ;add high byte+carry    (  1 clock ) 
1169:kernel.S      **** 		LD    R24                , Z                      ;load priority          (  2 clocks) 
1170:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1171               	;;================================kernel task priority get end==============================;; 
 1172               	
 1173               	
 1174               	
 1175               	
 1176               	
 1177               	;;============================kernel lowest priority get starting===========================;; 
 1178               	;used registers          : R24                                                                 
 1179               	;arg registers           : None                                                                
 1180               	;return registers        : R24(LowestPriorityVal)                                              
 1181               	;unsafe access registers : R24                                                                 
 1182               	Kernel_Lowest_Prio_Get:                                   ;total 0.75uS @8MHz     (  6 clocks) 
1183:kernel.S      **** 		LDS   R24                , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
1184:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1185               	;;===============================kernel lowest priority get end=============================;; 
 1186               	
 1187               	
 1188               	
 1189               	
 1190               	
 1191               	;;===========================kernel high priority task id starting==========================;; 
 1192               	;used registers          : R24                                                                 
 1193               	;arg registers           : None                                                                
 1194               	;return registers        : R24(HighstPriorityTaskID)->UserTaskID (Excluding Idle Task)         
 1195               	;unsafe access registers : R24                                                                 
 1196               	Kernel_High_Prio_Task_ID_Get:                             ;total 0.88uS @8MHz     (  7 clocks) 
1197:kernel.S      **** 		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
1198:kernel.S      **** 		DEC   R24                                         ;decrement by 1         (  1 clock ) 
1199:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1200               	;;==============================kernel high priority task id end============================;; 
 1201               	
 1202               	
 1203               	
 1204               	
 1205               	
 1206               	;;=========================kernel abs high priority task id starting========================;; 
 1207               	;used registers          : R24                                                                 
 1208               	;arg registers           : None                                                                
 1209               	;return registers        : R24(HighstPriorityTaskID)->AbsoluteTaskID (Including Idle Task)     
 1210               	;unsafe access registers : R24                                                                 
 1211               	Kernel_Abs_High_Prio_Task_ID_Get:                         ;total 0.75uS @8MHz     (  6 clocks) 
1212:kernel.S      **** 		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
1213:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1214               	;;============================kernel abs high priority task id end==========================;; 
 1215               	
 1216               	
 1217               	
 1218               	
 1219               	
 1220               	;;================================kernel cpu usage get starting=============================;; 
 1221               	;used registers          : R24                                                                 
 1222               	;arg registers           : None                                                                
 1223               	;return registers        : R24(CurrentCpuUsage)->In percentage                                 
 1224               	;unsafe access registers : R24                                                                 
 1225               	Kernel_CPU_Usage_Get:                                     ;total 0.75uS @8MHz     (  6 clocks) 
 1226               			;get cpu usage, return R24                                                             
1227:kernel.S      **** 		LDS   R24                , KerBase+OFB_USAGE      ;load cpu usage         (  2 clocks) 
1228:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1229               	;;==================================kernel cpu usage get end================================;; 
DEFINED SYMBOLS
            kernel.S:12     *ABS*:000003e8 KER_TR
            kernel.S:13     *ABS*:00000003 KER_PRS
            kernel.S:14     *ABS*:00000082 KER_RLD
            kernel.S:15     *ABS*:000000a0 KER_STK_SZ
            kernel.S:16     *ABS*:0000000a KER_MX_NTSK
            kernel.S:24     *ABS*:00000000 OFB_TICK0
            kernel.S:25     *ABS*:00000001 OFB_TICK1
            kernel.S:26     *ABS*:00000002 OFB_TICK2
            kernel.S:27     *ABS*:00000003 OFB_TICK3
            kernel.S:28     *ABS*:00000004 OFB_TICK4
            kernel.S:29     *ABS*:00000005 OFB_PRS
            kernel.S:30     *ABS*:00000006 OFB_RLD
            kernel.S:31     *ABS*:00000007 OFB_TID
            kernel.S:32     *ABS*:00000008 OFB_NTSK
            kernel.S:33     *ABS*:00000009 OFB_LPR
            kernel.S:34     *ABS*:0000000a OFB_PTID
            kernel.S:35     *ABS*:0000000b OFB_UTC
            kernel.S:36     *ABS*:0000000c OFB_UATC
            kernel.S:37     *ABS*:0000000d OFB_USAGE
            kernel.S:38     *ABS*:00000000 OFM_MSPI
            kernel.S:39     *ABS*:00000002 OFM_MSPS
            kernel.S:47     *ABS*:00000000 TASK_BLOCKED
            kernel.S:48     *ABS*:00000001 TASK_READY
            kernel.S:49     *ABS*:00000002 TASK_EXECUTING
            kernel.S:50     *ABS*:00000003 TASK_SUSPENDED
            kernel.S:51     *ABS*:00000004 TASK_CONS_LAT
            kernel.S:52     *ABS*:00000000 SCH_MODE_HANDLER
            kernel.S:53     *ABS*:00000001 SCH_MODE_THREAD
            kernel.S:61     *ABS*:0000005f SRSREG
            kernel.S:62     *ABS*:0000005e SRSPH
            kernel.S:63     *ABS*:0000005d SRSPL
            kernel.S:64     *ABS*:0000006e SRTIMSK0
            kernel.S:65     *ABS*:00000048 SROCR0B
            kernel.S:66     *ABS*:00000047 SROCR0A
            kernel.S:67     *ABS*:00000046 SRTCNT0
            kernel.S:68     *ABS*:00000045 SRTCCR0B
            kernel.S:69     *ABS*:00000044 SRTCCR0A
            kernel.S:70     *ABS*:00000035 SRTIFR0
            kernel.S:71     *ABS*:00000028 IOOCR0B
            kernel.S:72     *ABS*:00000027 IOOCR0A
            kernel.S:73     *ABS*:00000026 IOTCNT0
            kernel.S:74     *ABS*:00000025 IOTCCR0B
            kernel.S:75     *ABS*:00000024 IOTCCR0A
            kernel.S:76     *ABS*:00000015 IOTIFR0
            kernel.S:77     *ABS*:0000003f IOSREG
            kernel.S:78     *ABS*:0000003e IOSPH
            kernel.S:79     *ABS*:0000003d IOSPL
            kernel.S:90     .bss:00000000 KerBase
            kernel.S:93     .bss:0000000e KerPSP
            kernel.S:96     .bss:00000022 KerSSZ
            kernel.S:99     .bss:00000030 KerSchSts
            kernel.S:102    .bss:0000003a KerSchPr
            kernel.S:105    .bss:00000044 KerSchSlp
            kernel.S:108    .bss:00000058 KerStack
            kernel.S:811    .text:00000000 __vector_16
            kernel.S:835    .text:000001d6 Kernel_SysTick_Reg_Init
            kernel.S:971    .text:0000048c Kernel_Init
            kernel.S:881    .text:00000274 Kernel_Task_Create
            kernel.S:951    .text:0000036a Kernel_Start_Tasks
            kernel.S:1004   .text:000004ea Kernel_Task_Idle
            kernel.S:1018   .text:000004ec Kernel_Task_Sleep
            kernel.S:1051   .text:0000067c Kernel_Task_Constant_Latency
            kernel.S:1078   .text:000006a8 Kernel_Task_Constant_Latency_Sleep
            kernel.S:1105   .text:00000824 Kernel_Task_Sleep_Time_Get
            kernel.S:1127   .text:00000838 Kernel_Task_Status_Get
            kernel.S:1147   .text:00000848 Kernel_NTask_Get
            kernel.S:1161   .text:0000084e Kernel_Task_Prio_Get
            kernel.S:1182   .text:0000085e Kernel_Lowest_Prio_Get
            kernel.S:1196   .text:00000864 Kernel_High_Prio_Task_ID_Get
            kernel.S:1211   .text:0000086c Kernel_Abs_High_Prio_Task_ID_Get
            kernel.S:1225   .text:00000872 Kernel_CPU_Usage_Get
            kernel.S:818    .text:000000ac _KER_SCH_LOOP8
            kernel.S:818    .text:000000e2 _VAL_NULL9
            kernel.S:818    .text:000000f6 _VAL_NOT_NULL9
            kernel.S:818    .text:00000106 _EXIT_SLP_TIME9
            kernel.S:818    .text:0000012e _KER_SCH_NEXT8
            kernel.S:818    .text:0000013e _KER_SCH_EXIT8
            kernel.S:819    .text:00000158 _KER_USG_TICK14
            kernel.S:819    .text:00000172 _KER_USG_UTC_SV14
            kernel.S:953    .text:0000037a _KER_SCH_LOOP31
            kernel.S:953    .text:000003b0 _VAL_NULL32
            kernel.S:953    .text:000003c4 _VAL_NOT_NULL32
            kernel.S:953    .text:000003d4 _EXIT_SLP_TIME32
            kernel.S:953    .text:000003fc _KER_SCH_NEXT31
            kernel.S:953    .text:0000040c _KER_SCH_EXIT31
            kernel.S:1005   .text:000004ea _IDLE_LOOP
            kernel.S:1036   .text:00000582 _KER_SCH_LOOP52
            kernel.S:1036   .text:000005b8 _VAL_NULL53
            kernel.S:1036   .text:000005cc _VAL_NOT_NULL53
            kernel.S:1036   .text:000005dc _EXIT_SLP_TIME53
            kernel.S:1036   .text:00000604 _KER_SCH_NEXT52
            kernel.S:1036   .text:00000614 _KER_SCH_EXIT52
            kernel.S:1090   .text:0000072a _KER_SCH_LOOP71
            kernel.S:1090   .text:00000760 _VAL_NULL72
            kernel.S:1090   .text:00000774 _VAL_NOT_NULL72
            kernel.S:1090   .text:00000784 _EXIT_SLP_TIME72
            kernel.S:1090   .text:000007ac _KER_SCH_NEXT71
            kernel.S:1090   .text:000007bc _KER_SCH_EXIT71

UNDEFINED SYMBOLS
Kernel_SysTick_Val_Get
Kernel_SysTick_Val_Safely_Get
Kernel_Interrupt_Sts_Get
