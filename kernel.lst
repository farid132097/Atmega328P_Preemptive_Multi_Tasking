   1               	# 1 "kernel.S"
   1               	
   0               	
   0               	
   2               	#include <avr/io.h>
   1               	/* Copyright (c) 2002,2003,2005,2006,2007 Marek Michalkiewicz, Joerg Wunsch
   2               	   Copyright (c) 2007 Eric B. Weddington
   3               	   All rights reserved.
   4               	
   5               	   Redistribution and use in source and binary forms, with or without
   6               	   modification, are permitted provided that the following conditions are met:
   7               	
   8               	   * Redistributions of source code must retain the above copyright
   9               	     notice, this list of conditions and the following disclaimer.
  10               	
  11               	   * Redistributions in binary form must reproduce the above copyright
  12               	     notice, this list of conditions and the following disclaimer in
  13               	     the documentation and/or other materials provided with the
  14               	     distribution.
  15               	
  16               	   * Neither the name of the copyright holders nor the names of
  17               	     contributors may be used to endorse or promote products derived
  18               	     from this software without specific prior written permission.
  19               	
  20               	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21               	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22               	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23               	  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24               	  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25               	  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26               	  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27               	  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28               	  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29               	  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30               	  POSSIBILITY OF SUCH DAMAGE. */
  31               	
  32               	/* $Id: io.h,v 1.52.2.28 2009/12/20 17:02:53 arcanum Exp $ */
  33               	
  34               	/** \file */
  35               	/** \defgroup avr_io <avr/io.h>: AVR device-specific IO definitions
  36               	    \code #include <avr/io.h> \endcode
  37               	
  38               	    This header file includes the apropriate IO definitions for the
  39               	    device that has been specified by the <tt>-mmcu=</tt> compiler
  40               	    command-line switch.  This is done by diverting to the appropriate
  41               	    file <tt>&lt;avr/io</tt><em>XXXX</em><tt>.h&gt;</tt> which should
  42               	    never be included directly.  Some register names common to all
  43               	    AVR devices are defined directly within <tt>&lt;avr/common.h&gt;</tt>,
  44               	    which is included in <tt>&lt;avr/io.h&gt;</tt>,
  45               	    but most of the details come from the respective include file.
  46               	
  47               	    Note that this file always includes the following files:
  48               	    \code 
  49               	    #include <avr/sfr_defs.h>
  50               	    #include <avr/portpins.h>
  51               	    #include <avr/common.h>
  52               	    #include <avr/version.h>
  53               	    \endcode
  54               	    See \ref avr_sfr for more details about that header file.
  55               	
  56               	    Included are definitions of the IO register set and their
  57               	    respective bit values as specified in the Atmel documentation.
  58               	    Note that inconsistencies in naming conventions,
  59               	    so even identical functions sometimes get different names on
  60               	    different devices.
  61               	
  62               	    Also included are the specific names useable for interrupt
  63               	    function definitions as documented
  64               	    \ref avr_signames "here".
  65               	
  66               	    Finally, the following macros are defined:
  67               	
  68               	    - \b RAMEND
  69               	    <br>
  70               	    The last on-chip RAM address.
  71               	    <br>
  72               	    - \b XRAMEND
  73               	    <br>
  74               	    The last possible RAM location that is addressable. This is equal to 
  75               	    RAMEND for devices that do not allow for external RAM. For devices 
  76               	    that allow external RAM, this will be larger than RAMEND.
  77               	    <br>
  78               	    - \b E2END
  79               	    <br>
  80               	    The last EEPROM address.
  81               	    <br>
  82               	    - \b FLASHEND
  83               	    <br>
  84               	    The last byte address in the Flash program space.
  85               	    <br>
  86               	    - \b SPM_PAGESIZE
  87               	    <br>
  88               	    For devices with bootloader support, the flash pagesize
  89               	    (in bytes) to be used for the \c SPM instruction. 
  90               	    - \b E2PAGESIZE
  91               	    <br>
  92               	    The size of the EEPROM page.
  93               	    
  94               	*/
  95               	
  96               	#ifndef _AVR_IO_H_
  97               	#define _AVR_IO_H_
  98               	
  99               	#include <avr/sfr_defs.h>
   1               	/* Copyright (c) 2002, Marek Michalkiewicz <marekm@amelek.gda.pl>
 100               	
 101               	#if defined (__AVR_AT94K__)
 102               	#  include <avr/ioat94k.h>
 103               	#elif defined (__AVR_AT43USB320__)
 104               	#  include <avr/io43u32x.h>
 105               	#elif defined (__AVR_AT43USB355__)
 106               	#  include <avr/io43u35x.h>
 107               	#elif defined (__AVR_AT76C711__)
 108               	#  include <avr/io76c711.h>
 109               	#elif defined (__AVR_AT86RF401__)
 110               	#  include <avr/io86r401.h>
 111               	#elif defined (__AVR_AT90PWM1__)
 112               	#  include <avr/io90pwm1.h>
 113               	#elif defined (__AVR_AT90PWM2__)
 114               	#  include <avr/io90pwmx.h>
 115               	#elif defined (__AVR_AT90PWM2B__)
 116               	#  include <avr/io90pwm2b.h>
 117               	#elif defined (__AVR_AT90PWM3__)
 118               	#  include <avr/io90pwmx.h>
 119               	#elif defined (__AVR_AT90PWM3B__)
 120               	#  include <avr/io90pwm3b.h>
 121               	#elif defined (__AVR_AT90PWM216__)
 122               	#  include <avr/io90pwm216.h>
 123               	#elif defined (__AVR_AT90PWM316__)
 124               	#  include <avr/io90pwm316.h>
 125               	#elif defined (__AVR_AT90PWM81__)
 126               	#  include <avr/io90pwm81.h>
 127               	#elif defined (__AVR_ATmega8U2__)
 128               	#  include <avr/iom8u2.h>
 129               	#elif defined (__AVR_ATmega16M1__)
 130               	#  include <avr/iom16m1.h>
 131               	#elif defined (__AVR_ATmega16U2__)
 132               	#  include <avr/iom16u2.h>
 133               	#elif defined (__AVR_ATmega16U4__)
 134               	#  include <avr/iom16u4.h>
 135               	#elif defined (__AVR_ATmega32C1__)
 136               	#  include <avr/iom32c1.h>
 137               	#elif defined (__AVR_ATmega32M1__)
 138               	#  include <avr/iom32m1.h>
 139               	#elif defined (__AVR_ATmega32U2__)
 140               	#  include <avr/iom32u2.h>
 141               	#elif defined (__AVR_ATmega32U4__)
 142               	#  include <avr/iom32u4.h>
 143               	#elif defined (__AVR_ATmega32U6__)
 144               	#  include <avr/iom32u6.h>
 145               	#elif defined (__AVR_ATmega64C1__)
 146               	#  include <avr/iom64c1.h>
 147               	#elif defined (__AVR_ATmega64M1__)
 148               	#  include <avr/iom64m1.h>
 149               	#elif defined (__AVR_ATmega128__)
 150               	#  include <avr/iom128.h>
 151               	#elif defined (__AVR_ATmega1280__)
 152               	#  include <avr/iom1280.h>
 153               	#elif defined (__AVR_ATmega1281__)
 154               	#  include <avr/iom1281.h>
 155               	#elif defined (__AVR_ATmega1284P__)
 156               	#  include <avr/iom1284p.h>
 157               	#elif defined (__AVR_ATmega128RFA1__)
 158               	#  include <avr/iom128rfa1.h>
 159               	#elif defined (__AVR_ATmega2560__)
 160               	#  include <avr/iom2560.h>
 161               	#elif defined (__AVR_ATmega2561__)
 162               	#  include <avr/iom2561.h>
 163               	#elif defined (__AVR_AT90CAN32__)
 164               	#  include <avr/iocan32.h>
 165               	#elif defined (__AVR_AT90CAN64__)
 166               	#  include <avr/iocan64.h>
 167               	#elif defined (__AVR_AT90CAN128__)
 168               	#  include <avr/iocan128.h>
 169               	#elif defined (__AVR_AT90USB82__)
 170               	#  include <avr/iousb82.h>
 171               	#elif defined (__AVR_AT90USB162__)
 172               	#  include <avr/iousb162.h>
 173               	#elif defined (__AVR_AT90USB646__)
 174               	#  include <avr/iousb646.h>
 175               	#elif defined (__AVR_AT90USB647__)
 176               	#  include <avr/iousb647.h>
 177               	#elif defined (__AVR_AT90USB1286__)
 178               	#  include <avr/iousb1286.h>
 179               	#elif defined (__AVR_AT90USB1287__)
 180               	#  include <avr/iousb1287.h>
 181               	#elif defined (__AVR_ATmega64__)
 182               	#  include <avr/iom64.h>
 183               	#elif defined (__AVR_ATmega640__)
 184               	#  include <avr/iom640.h>
 185               	#elif defined (__AVR_ATmega644__) || defined (__AVR_ATmega644A__)
 186               	#  include <avr/iom644.h>
 187               	#elif defined (__AVR_ATmega644P__)
 188               	#  include <avr/iom644p.h>
 189               	#elif defined (__AVR_ATmega644PA__)
 190               	#  include <avr/iom644pa.h>
 191               	#elif defined (__AVR_ATmega645__) || defined (__AVR_ATmega645A__) || defined (__AVR_ATmega645P__)
 192               	#  include <avr/iom645.h>
 193               	#elif defined (__AVR_ATmega6450__) || defined (__AVR_ATmega6450A__) || defined (__AVR_ATmega6450P__
 194               	#  include <avr/iom6450.h>
 195               	#elif defined (__AVR_ATmega649__) || defined (__AVR_ATmega649A__)
 196               	#  include <avr/iom649.h>
 197               	#elif defined (__AVR_ATmega6490__) || defined (__AVR_ATmega6490A__) || defined (__AVR_ATmega6490P__
 198               	#  include <avr/iom6490.h>
 199               	#elif defined (__AVR_ATmega649P__)
 200               	#  include <avr/iom649p.h>
 201               	#elif defined (__AVR_ATmega64HVE__)
 202               	#  include <avr/iom64hve.h>
 203               	#elif defined (__AVR_ATmega103__)
 204               	#  include <avr/iom103.h>
 205               	#elif defined (__AVR_ATmega32__)
 206               	#  include <avr/iom32.h>
 207               	#elif defined (__AVR_ATmega323__)
 208               	#  include <avr/iom323.h>
 209               	#elif defined (__AVR_ATmega324P__) || defined (__AVR_ATmega324A__)
 210               	#  include <avr/iom324.h>
 211               	#elif defined (__AVR_ATmega324PA__)
 212               	#  include <avr/iom324pa.h>
 213               	#elif defined (__AVR_ATmega325__)
 214               	#  include <avr/iom325.h>
 215               	#elif defined (__AVR_ATmega325P__)
 216               	#  include <avr/iom325.h>
 217               	#elif defined (__AVR_ATmega3250__)
 218               	#  include <avr/iom3250.h>
 219               	#elif defined (__AVR_ATmega3250P__)
 220               	#  include <avr/iom3250.h>
 221               	#elif defined (__AVR_ATmega328P__) || defined (__AVR_ATmega328__)
 222               	#  include <avr/iom328p.h>
   1               	/* Copyright (c) 2007 Atmel Corporation
 223               	#elif defined (__AVR_ATmega329__)
 224               	#  include <avr/iom329.h>
 225               	#elif defined (__AVR_ATmega329P__) || defined (__AVR_ATmega329PA__)
 226               	#  include <avr/iom329.h>
 227               	#elif defined (__AVR_ATmega3290__)
 228               	#  include <avr/iom3290.h>
 229               	#elif defined (__AVR_ATmega3290P__)
 230               	#  include <avr/iom3290.h>
 231               	#elif defined (__AVR_ATmega32HVB__)
 232               	#  include <avr/iom32hvb.h>
 233               	#elif defined (__AVR_ATmega406__)
 234               	#  include <avr/iom406.h>
 235               	#elif defined (__AVR_ATmega16__)
 236               	#  include <avr/iom16.h>
 237               	#elif defined (__AVR_ATmega16A__)
 238               	#  include <avr/iom16a.h>
 239               	#elif defined (__AVR_ATmega161__)
 240               	#  include <avr/iom161.h>
 241               	#elif defined (__AVR_ATmega162__)
 242               	#  include <avr/iom162.h>
 243               	#elif defined (__AVR_ATmega163__)
 244               	#  include <avr/iom163.h>
 245               	#elif defined (__AVR_ATmega164P__) || defined (__AVR_ATmega164A__)
 246               	#  include <avr/iom164.h>
 247               	#elif defined (__AVR_ATmega165__) || defined (__AVR_ATmega165A__)
 248               	#  include <avr/iom165.h>
 249               	#elif defined (__AVR_ATmega165P__)
 250               	#  include <avr/iom165p.h>
 251               	#elif defined (__AVR_ATmega168__) || defined (__AVR_ATmega168A__)
 252               	#  include <avr/iom168.h>
 253               	#elif defined (__AVR_ATmega168P__)
 254               	#  include <avr/iom168p.h>
 255               	#elif defined (__AVR_ATmega169__) || defined (__AVR_ATmega169A__)
 256               	#  include <avr/iom169.h>
 257               	#elif defined (__AVR_ATmega169P__)
 258               	#  include <avr/iom169p.h>
 259               	#elif defined (__AVR_ATmega169PA__)
 260               	#  include <avr/iom169pa.h>
 261               	#elif defined (__AVR_ATmega8HVA__)
 262               	#  include <avr/iom8hva.h>
 263               	#elif defined (__AVR_ATmega16HVA__)
 264               	#  include <avr/iom16hva.h>
 265               	#elif defined (__AVR_ATmega16HVA2__)
 266               	#  include <avr/iom16hva2.h>
 267               	#elif defined (__AVR_ATmega16HVB__)
 268               	#  include <avr/iom16hvb.h>
 269               	#elif defined (__AVR_ATmega8__)
 270               	#  include <avr/iom8.h>
 271               	#elif defined (__AVR_ATmega48__) || defined (__AVR_ATmega48A__)
 272               	#  include <avr/iom48.h>
 273               	#elif defined (__AVR_ATmega48P__)
 274               	#  include <avr/iom48p.h>
 275               	#elif defined (__AVR_ATmega88__) || defined (__AVR_ATmega88A__)
 276               	#  include <avr/iom88.h>
 277               	#elif defined (__AVR_ATmega88P__)
 278               	#  include <avr/iom88p.h>
 279               	#elif defined (__AVR_ATmega88PA__)
 280               	#  include <avr/iom88pa.h>
 281               	#elif defined (__AVR_ATmega8515__)
 282               	#  include <avr/iom8515.h>
 283               	#elif defined (__AVR_ATmega8535__)
 284               	#  include <avr/iom8535.h>
 285               	#elif defined (__AVR_AT90S8535__)
 286               	#  include <avr/io8535.h>
 287               	#elif defined (__AVR_AT90C8534__)
 288               	#  include <avr/io8534.h>
 289               	#elif defined (__AVR_AT90S8515__)
 290               	#  include <avr/io8515.h>
 291               	#elif defined (__AVR_AT90S4434__)
 292               	#  include <avr/io4434.h>
 293               	#elif defined (__AVR_AT90S4433__)
 294               	#  include <avr/io4433.h>
 295               	#elif defined (__AVR_AT90S4414__)
 296               	#  include <avr/io4414.h>
 297               	#elif defined (__AVR_ATtiny22__)
 298               	#  include <avr/iotn22.h>
 299               	#elif defined (__AVR_ATtiny26__)
 300               	#  include <avr/iotn26.h>
 301               	#elif defined (__AVR_AT90S2343__)
 302               	#  include <avr/io2343.h>
 303               	#elif defined (__AVR_AT90S2333__)
 304               	#  include <avr/io2333.h>
 305               	#elif defined (__AVR_AT90S2323__)
 306               	#  include <avr/io2323.h>
 307               	#elif defined (__AVR_AT90S2313__)
 308               	#  include <avr/io2313.h>
 309               	#elif defined (__AVR_ATtiny2313__)
 310               	#  include <avr/iotn2313.h>
 311               	#elif defined (__AVR_ATtiny2313A__)
 312               	#  include <avr/iotn2313a.h>
 313               	#elif defined (__AVR_ATtiny13__)
 314               	#  include <avr/iotn13.h>
 315               	#elif defined (__AVR_ATtiny13A__)
 316               	#  include <avr/iotn13a.h>
 317               	#elif defined (__AVR_ATtiny25__)
 318               	#  include <avr/iotn25.h>
 319               	#elif defined (__AVR_ATtiny4313__)
 320               	#  include <avr/iotn4313.h>
 321               	#elif defined (__AVR_ATtiny45__)
 322               	#  include <avr/iotn45.h>
 323               	#elif defined (__AVR_ATtiny85__)
 324               	#  include <avr/iotn85.h>
 325               	#elif defined (__AVR_ATtiny24__)
 326               	#  include <avr/iotn24.h>
 327               	#elif defined (__AVR_ATtiny24A__)
 328               	#  include <avr/iotn24a.h>
 329               	#elif defined (__AVR_ATtiny44__)
 330               	#  include <avr/iotn44.h>
 331               	#elif defined (__AVR_ATtiny44A__)
 332               	#  include <avr/iotn44a.h>
 333               	#elif defined (__AVR_ATtiny84__)
 334               	#  include <avr/iotn84.h>
 335               	#elif defined (__AVR_ATtiny261__)
 336               	#  include <avr/iotn261.h>
 337               	#elif defined (__AVR_ATtiny261A__)
 338               	#  include <avr/iotn261a.h>
 339               	#elif defined (__AVR_ATtiny461__)
 340               	#  include <avr/iotn461.h>
 341               	#elif defined (__AVR_ATtiny461A__)
 342               	#  include <avr/iotn461a.h>
 343               	#elif defined (__AVR_ATtiny861__)
 344               	#  include <avr/iotn861.h>
 345               	#elif defined (__AVR_ATtiny861A__)
 346               	#  include <avr/iotn861a.h>
 347               	#elif defined (__AVR_ATtiny43U__)
 348               	#  include <avr/iotn43u.h>
 349               	#elif defined (__AVR_ATtiny48__)
 350               	#  include <avr/iotn48.h>
 351               	#elif defined (__AVR_ATtiny88__)
 352               	#  include <avr/iotn88.h>
 353               	#elif defined (__AVR_ATtiny87__)
 354               	#  include <avr/iotn87.h>
 355               	#elif defined (__AVR_ATtiny167__)
 356               	#  include <avr/iotn167.h>
 357               	#elif defined (__AVR_AT90SCR100__)
 358               	#  include <avr/io90scr100.h>
 359               	#elif defined (__AVR_ATxmega16A4__)
 360               	#  include <avr/iox16a4.h>
 361               	#elif defined (__AVR_ATxmega16D4__)
 362               	#  include <avr/iox16d4.h>
 363               	#elif defined (__AVR_ATxmega32A4__)
 364               	#  include <avr/iox32a4.h>
 365               	#elif defined (__AVR_ATxmega32D4__)
 366               	#  include <avr/iox32d4.h>
 367               	#elif defined (__AVR_ATxmega64A1__)
 368               	#  include <avr/iox64a1.h>
 369               	#elif defined (__AVR_ATxmega64A3__)
 370               	#  include <avr/iox64a3.h>
 371               	#elif defined (__AVR_ATxmega64D3__)
 372               	#  include <avr/iox64d3.h>
 373               	#elif defined (__AVR_ATxmega128A1__)
 374               	#  include <avr/iox128a1.h>
 375               	#elif defined (__AVR_ATxmega128A3__)
 376               	#  include <avr/iox128a3.h>
 377               	#elif defined (__AVR_ATxmega128D3__)
 378               	#  include <avr/iox128d3.h>
 379               	#elif defined (__AVR_ATxmega192A3__)
 380               	#  include <avr/iox192a3.h>
 381               	#elif defined (__AVR_ATxmega192D3__)
 382               	#  include <avr/iox192d3.h>
 383               	#elif defined (__AVR_ATxmega256A3__)
 384               	#  include <avr/iox256a3.h>
 385               	#elif defined (__AVR_ATxmega256A3B__)
 386               	#  include <avr/iox256a3b.h>
 387               	#elif defined (__AVR_ATxmega256D3__)
 388               	#  include <avr/iox256d3.h>
 389               	#elif defined (__AVR_ATA6289__)
 390               	#  include <avr/ioa6289.h>
 391               	/* avr1: the following only supported for assembler programs */
 392               	#elif defined (__AVR_ATtiny28__)
 393               	#  include <avr/iotn28.h>
 394               	#elif defined (__AVR_AT90S1200__)
 395               	#  include <avr/io1200.h>
 396               	#elif defined (__AVR_ATtiny15__)
 397               	#  include <avr/iotn15.h>
 398               	#elif defined (__AVR_ATtiny12__)
 399               	#  include <avr/iotn12.h>
 400               	#elif defined (__AVR_ATtiny11__)
 401               	#  include <avr/iotn11.h>
 402               	#else
 403               	#  if !defined(__COMPILING_AVR_LIBC__)
 404               	#    warning "device type not defined"
 405               	#  endif
 406               	#endif
 407               	
 408               	#include <avr/portpins.h>
   1               	/* Copyright (c) 2003  Theodore A. Roth
 409               	
 410               	#include <avr/common.h>
   1               	/* Copyright (c) 2007 Eric B. Weddington
 411               	
 412               	#include <avr/version.h>
   1               	/* Copyright (c) 2005, Joerg Wunsch                               -*- c -*-
 413               	
 414               	/* Include fuse.h after individual IO header files. */
 415               	#include <avr/fuse.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 416               	
 417               	/* Include lock.h after individual IO header files. */
 418               	#include <avr/lock.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 419               	
   3               	#include <avr/interrupt.h>
   1               	/* Copyright (c) 2002,2005,2007 Marek Michalkiewicz
   4               	#include "kernel.h"
   1               	
   5               	#include "debug.h"
   1               	
   6               	
   7               	
   8               	
   9               	
  10               	
  11               	;;============================define user address or macro starting=========================;; 
  12               	.equ     KER_TR ,         1000                            ;TickRate in Hz, not calculated
  13               	.equ     KER_PRS,         0x03                            ;For prescaler 64, manually select
  14               	.equ     KER_RLD,         0x82                            ;KER_RLD=0xFF-(F_CPU/KER_PRS/KER_TR)
  15               	.equ     KER_STK_SZ,      128                             ;stack size in bytes for each task
  16               	.equ     KER_MX_NTSK,     10                              ;max number of tasks
  17               	;;==============================define user address or macro end============================;; 
  18               	
  19               	
  20               	
  21               	
  22               	
  23               	;;===============================define data offsets starting===============================;; 
  24               	.equ     OFB_TICK0,       0x00                            ;tick count byte0 offset from KerBase
  25               	.equ     OFB_TICK1,       0x01                            ;tick count byte1 offset from KerBase
  26               	.equ     OFB_TICK2,       0x02                            ;tick count byte2 offset from KerBase
  27               	.equ     OFB_TICK3,       0x03                            ;tick count byte3 offset from KerBase
  28               	.equ     OFB_TICK4,       0x04                            ;tick count byte4 offset from KerBase
  29               	.equ     OFB_PRS  ,       0x05                            ;prescaler offset from KerBase       
  30               	.equ     OFB_RLD  ,       0x06                            ;counter reload offset from KerBase  
  31               	.equ     OFB_TID  ,       0x07                            ;task id offset from KerBase         
  32               	.equ     OFB_NTSK ,       0x08                            ;ntask offset from KerBase           
  33               	.equ     OFB_LPR  ,       0x09                            ;lowest priority offset from KerBase 
  34               	.equ     OFB_PTID ,       0x0A                            ;prio task_id offset from KerBase    
  35               	.equ     OFB_UTC  ,       0x0B                            ;usage tick cnt offset from KerBase  
  36               	.equ     OFB_UATC ,       0x0C                            ;active tick cnt offset from KerBase 
  37               	.equ     OFB_USAGE,       0x0D                            ;cpu usage offset from KerBase       
  38               	.equ     OFM_MSPI ,       0x00                            ;msp index field offset from MSPZP   
  39               	.equ     OFM_MSPS ,       0x02                            ;msp starting offset from MSPZP      
  40               	;;==================================define data offsets end=================================;; 
  41               	
  42               	
  43               	
  44               	
  45               	
  46               	;;===============================define system macro starting===============================;; 
  47               	.equ     TASK_BLOCK,      0x00                            ;bit 0 in system status reg          
  48               	.equ     TASK_READY,      0x01                            ;bit 0 in system status reg          
  49               	.equ     SCH_MODE_HANDLER,0x00                            ;handler mode in KER_SLP_TIME_MGNT   
  50               	.equ     SCH_MODE_THREAD, 0x01                            ;thread mode in KER_SLP_TIME_MGNT    
  51               	;;==================================define system macro end=================================;; 
  52               	
  53               	
  54               	
  55               	
  56               	
  57               	;;===========================define hardware reg address starting===========================;; 
  58               	.equ     SRSREG  ,        0x5F                            ;manually defined SREG in SRAM       
  59               	.equ     SRSPH   ,        0x5E                            ;manually defined SPH in SRAM        
  60               	.equ     SRSPL   ,        0x5D                            ;manually defined SPL in SRAM        
  61               	.equ     SRTIMSK0,        0x6E                            ;manually defined TIMSK0 in SRAM     
  62               	.equ     SROCR0B ,        0x48                            ;manually defined OCR0B in SRAM      
  63               	.equ     SROCR0A ,        0x47                            ;manually defined OCR0A in SRAM      
  64               	.equ     SRTCNT0 ,        0x46                            ;manually defined TCNT0 in SRAM      
  65               	.equ     SRTCCR0B,        0x45                            ;manually defined TCCR0B in SRAM     
  66               	.equ     SRTCCR0A,        0x44                            ;manually defined TCCR0A in SRAM     
  67               	.equ     SRTIFR0 ,        0x35                            ;manually defined TIFR0 in SRAM      
  68               	.equ     IOOCR0B ,        0x28                            ;manually defined OCR0B in IO        
  69               	.equ     IOOCR0A ,        0x27                            ;manually defined OCR0A in IO        
  70               	.equ     IOTCNT0 ,        0x26                            ;manually defined TCNT0 in IO        
  71               	.equ     IOTCCR0B,        0x25                            ;manually defined TCCR0B in IO       
  72               	.equ     IOTCCR0A,        0x24                            ;manually defined TCCR0A in IO       
  73               	.equ     IOTIFR0 ,        0x15                            ;manually defined TIFR0 in IO        
  74               	.equ     IOSREG  ,        0x3F                            ;manually defined SREG in IO         
  75               	.equ     IOSPH   ,        0x3E                            ;manually defined SPH in IO          
  76               	.equ     IOSPL   ,        0x3D                            ;manually defined SPL in IO          
  77               	;;==============================define hardware reg address end=============================;; 
  78               	
  79               	
  80               	
  81               	
  82               	
  83               	;;=============================define global variables starting=============================;; 
  84               	.section   .bss
  85               	
  86               	.global    KerBase                                        ;declare global space for kernel
  87 0000 0000 0000 	KerBase:   .skip 14                                       ;see offset section
  87      0000 0000 
  87      0000 0000 
  87      0000 
  88               	
  89               	.global    KerPSP                                         ;space for process stack pointers
  90 000e 0000 0000 	KerPSP:    .skip KER_MX_NTSK*2                            ;2 bytes for each task
  90      0000 0000 
  90      0000 0000 
  90      0000 0000 
  90      0000 0000 
  91               	
  92               	.global    KerSSZ                                         ;stack for main stack pointers
  93 0022 0000 0000 	KerSSZ:    .skip 14                                       ;stack_ptr(2), MSPZPn(4)
  93      0000 0000 
  93      0000 0000 
  93      0000 
  94               	
  95               	.global    KerSchSts                                      ;space for scheduler status
  96 0030 0000 0000 	KerSchSts: .skip KER_MX_NTSK*1                            ;status(1)
  96      0000 0000 
  96      0000 
  97               	
  98               	.global    KerSchPr                                       ;space for scheduler priority
  99 003a 0000 0000 	KerSchPr:  .skip KER_MX_NTSK*1                            ;priority(1)
  99      0000 0000 
  99      0000 
 100               	
 101               	.global    KerSchSlp                                      ;space for task sleep
 102 0044 0000 0000 	KerSchSlp: .skip KER_MX_NTSK*2                            ;timing(2)
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 102      0000 0000 
 103               	
 104               	.global    KerStack                                       ;space for stack
 105 0058 0000 0000 	KerStack:  .skip KER_STK_SZ*KER_MX_NTSK                   ;KER_STK_SZ bytes for each task
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 105      0000 0000 
 106               	;;==============================define global variables end=================================;; 
 107               	
 108               	
 109               	
 110               	
 111               	
 112               	;;===============================define vector section starting=============================;; 
 113               	.section .vectors, "ax", @progbits
 114               	
 115 0000 0000 0000 	.org    0x20
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 115      0000 0000 
 116:kernel.S      ****         RJMP  __vector_16
 117               	;;=================================define vector section end================================;; 
 118               	
 119               	
 120               	
 121               	
 122               	
 123               	;;===============================define text section starting===============================;; 
 124               	.section .text
 125               	;;==================================define text section end=================================;; 
 126               	
 127               	
 128               	
 129               	
 130               	
 131               	;;==============================define global functions starting============================;; 
 132               	.global  Kernel_SysTick_Reg_Init
 133               	.global  Kernel_SysTick_Val_Get
 134               	.global  Kernel_SysTick_Val_Safely_Get
 135               	.global  Kernel_Interrupt_Sts_Get
 136               	.global  Kernel_Init
 137               	.global  Kernel_Task_Create
 138               	.global  Kernel_Start_Tasks
 139               	.global  Kernel_Task_Idle
 140               	.global  Kernel_Task_Sleep
 141               	.global  Kernel_Task_Sleep_Time_Get
 142               	.global  Kernel_Task_Status_Get
 143               	.global  Kernel_NTask_Get
 144               	.global  Kernel_Task_Prio_Get
 145               	.global  Kernel_Lowest_Prio_Get
 146               	.global  Kernel_High_Prio_Task_ID_Get
 147               	.global  Kernel_Abs_High_Prio_Task_ID_Get
 148               	.global  Kernel_CPU_Usage_Get
 149               	;;================================define global functions end===============================;; 
 150               	
 151               	
 152               	
 153               	
 154               	
 155               	;;============================debug pin operation init starting=============================;; 
 156               	;used registers          : R16, R17                                                            
 157               	;arg registers           : None                                                                
 158               	;return registers        : None                                                                
 159               	;unsafe access registers : R16, R17                                                            
 160               	.macro  KER_TIMER_INIT                                    ;total 1.5uS @8MHz      ( 12 clocks) 
 161               	        LDS   R16		         , KerBase+OFB_PRS        ;load prescaler         (  2 clocks) 
 162               			LDS   R17		         , KerBase+OFB_RLD        ;load reload val        (  2 clocks) 
 163               			STS   SRTCCR0B           , R16                    ;prescaler-> TCCR0B     (  2 clocks) 
 164               			STS   SRTCNT0            , R17                    ;reload val-> TCNT0     (  2 clocks) 
 165               			LDI   R16                , 0x01                   ;bit mask TOIE0         (  1 clock ) 
 166               			STS   SRTIMSK0           , R16                    ;set to TIMSK0          (  2 clocks) 
 167               			SEI                                               ;force enable interrupt (  1 clock ) 
 168               	.endm                                                                                          
 169               	;;==============================debug pin operation init end================================;; 
 170               	
 171               	
 172               	
 173               	
 174               	
 175               	;;============================debug pin operation init starting=============================;; 
 176               	;used registers          : None                                                                
 177               	;arg registers           : None                                                                
 178               	;return registers        : None                                                                
 179               	;unsafe access registers : None                                                                
 180               	.macro  KER_DEBUG_PIN_INIT                                ;total 0.5uS @8MHz      (  4 clocks) 
 181               	        #ifdef KER_DBG_ENABLE                                                                  
 182               			CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear port bit         (  2 clocks) 
 183               			SBI   KER_DBG_DDR        , KER_DBG_PIN            ;set bit in DDR         (  2 clocks) 
 184               			#endif                                                                                 
 185               	.endm                                                                                          
 186               	;;==============================debug pin operation init end================================;; 
 187               	
 188               	
 189               	
 190               	
 191               	
 192               	;;===========================debug pin operation set starting===============================;; 
 193               	;used registers          : None                                                                
 194               	;arg registers           : None                                                                
 195               	;return registers        : None                                                                
 196               	;unsafe access registers : None                                                                
 197               	.macro  KER_DEBUG_PIN_SET                                 ;total 0.25uS @8MHz     (  2 clocks) 
 198               	        #ifdef KER_DBG_ENABLE                                                                  
 199               	        SBI   KER_DBG_PORT       , KER_DBG_PIN            ;set gpio               (  2 clocks) 
 200               			#endif                                                                                 
 201               	.endm                                                                                          
 202               	;;==============================debug pin operation set end=================================;; 
 203               	
 204               	
 205               	
 206               	
 207               	
 208               	;;===========================debug pin operation clear starting=============================;; 
 209               	;used registers          : None                                                                
 210               	;arg registers           : None                                                                
 211               	;return registers        : None                                                                
 212               	;unsafe access registers : None                                                                
 213               	.macro  KER_DEBUG_PIN_CLEAR                               ;total 0.25uS @8MHz     (  2 clocks) 
 214               	        #ifdef KER_DBG_ENABLE                                                                  
 215               			CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear gpio             (  2 clocks) 
 216               			#endif                                                                                 
 217               	.endm                                                                                          
 218               	;;==============================debug pin operation clear end===============================;; 
 219               	
 220               	
 221               	
 222               	
 223               	
 224               	;;==============================reload counter value starting===============================;; 
 225               	;used registers          : R16                                                                 
 226               	;arg registers           : None                                                                
 227               	;return registers        : None                                                                
 228               	;unsafe access registers : None                                                                
 229               	.macro  KER_COUNTER_RELOAD                                ;total 0.5uS @8MHz      (  4 clocks) 
 230               	        LDS   R16                , KerBase+OFB_RLD        ;load reload value      (  2 clocks) 
 231               			STS   SRTCNT0            , R16                    ;Set value to TCNT0     (  2 clocks) 
 232               	.endm                                                                                          
 233               	;;=================================reload counter value end=================================;; 
 234               	
 235               	
 236               	
 237               	
 238               	
 239               	;;=================================save r0 & sreg starting==================================;; 
 240               	;used registers          : R0                                                                  
 241               	;arg registers           : None                                                                
 242               	;return registers        : None                                                                
 243               	;unsafe access registers : None                                                                
 244               	.macro  KER_SAVE_R0_SREG                                  ;total 0.63uS @8MHz     (  5 clocks) 
 245               	        PUSH  R0                                          ;save R0                (  2 clocks) 
 246               			IN    R0                 , IOSREG                 ;load SREG              (  1 clock ) 
 247               			PUSH  R0                                          ;save SREG              (  2 clocks) 
 248               	.endm                                                                                          
 249               	;;====================================save r0 & sreg end====================================;; 
 250               	
 251               	
 252               	
 253               	
 254               	
 255               	;;===============================save r0, sreg & cli starting===============================;; 
 256               	;used registers          : R0                                                                  
 257               	;arg registers           : None                                                                
 258               	;return registers        : None                                                                
 259               	;unsafe access registers : None                                                                
 260               	.macro  KER_SAVE_R0_CLI_SREG                              ;total 0.75uS @8MHz     (  6 clocks) 
 261               	        PUSH  R0                                          ;push R0                (  2 clocks) 
 262               			IN    R0                 , IOSREG                 ;save SREG              (  1 clock ) 
 263               			CLI                                               ;clear interrupt        (  1 clock ) 
 264               			PUSH  R0                                          ;save SREG              (  2 clocks) 
 265               	.endm                                                                                          
 266               	;;=================================save r0, sreg & cli end==================================;; 
 267               	
 268               	
 269               	
 270               	
 271               	
 272               	;;===================================save r1~r31 starting===================================;; 
 273               	;used registers          : R1~R31                                                              
 274               	;arg registers           : None                                                                
 275               	;return registers        : None                                                                
 276               	;unsafe access registers : None                                                                
 277               	.macro  KER_SAVE_R1_R31                                   ;total 7.88uS @8MHz     ( 63 clocks) 
 278               			PUSH  R1                                          ;save R1                (  2 clocks) 
 279               			CLR   R1                                          ;clear R1               (  1 clock ) 
 280               			PUSH  R2                                          ;save R2                (  2 clocks) 
 281               			PUSH  R3                                          ;save R3                (  2 clocks) 
 282               			PUSH  R4                                          ;save R4                (  2 clocks) 
 283               			PUSH  R5                                          ;save R5                (  2 clocks) 
 284               			PUSH  R6                                          ;save R6                (  2 clocks) 
 285               			PUSH  R7                                          ;save R7                (  2 clocks) 
 286               			PUSH  R8                                          ;save R8                (  2 clocks) 
 287               			PUSH  R9                                          ;save R9                (  2 clocks) 
 288               			PUSH  R10                                         ;save R10               (  2 clocks) 
 289               			PUSH  R11                                         ;save R11               (  2 clocks) 
 290               			PUSH  R12                                         ;save R12               (  2 clocks) 
 291               			PUSH  R13                                         ;save R13               (  2 clocks) 
 292               			PUSH  R14                                         ;save R14               (  2 clocks) 
 293               			PUSH  R15                                         ;save R15               (  2 clocks) 
 294               			PUSH  R16                                         ;save R16               (  2 clocks) 
 295               			PUSH  R17                                         ;save R17               (  2 clocks) 
 296               			PUSH  R18                                         ;save R18               (  2 clocks) 
 297               			PUSH  R19                                         ;save R19               (  2 clocks) 
 298               			PUSH  R20                                         ;save R20               (  2 clocks) 
 299               			PUSH  R21                                         ;save R21               (  2 clocks) 
 300               			PUSH  R22                                         ;save R22               (  2 clocks) 
 301               			PUSH  R23                                         ;save R23               (  2 clocks) 
 302               			PUSH  R24                                         ;save R24               (  2 clocks) 
 303               			PUSH  R25                                         ;save R25               (  2 clocks) 
 304               			PUSH  R26                                         ;save R26               (  2 clocks) 
 305               			PUSH  R27                                         ;save R27               (  2 clocks) 
 306               			PUSH  R28                                         ;save R28               (  2 clocks) 
 307               			PUSH  R29                                         ;save R29               (  2 clocks) 
 308               			PUSH  R30                                         ;save R30               (  2 clocks) 
 309               			PUSH  R31                                         ;save R31               (  2 clocks) 
 310               	.endm                                                                                          
 311               	;;======================================save r1~r31 end=====================================;; 
 312               	
 313               	
 314               	
 315               	
 316               	
 317               	;;==============================context save handler starting===============================;; 
 318               	;used registers          : R0~R31                                                              
 319               	;arg registers           : None                                                                
 320               	;return registers        : None                                                                
 321               	;unsafe access registers : None                                                                
 322               	.macro  KER_CONTEXT_SAVE_HANDLER                          ;total 8.5uS @8MHz      ( 68 clocks) 
 323               	        KER_SAVE_R0_SREG                                  ;save r0, sreg          (  5 clocks) 
 324               	        KER_SAVE_R1_R31                                   ;save r1~r31            ( 63 clocks) 
 325               	.endm                                                                                          
 326               	;;=================================context save handler end=================================;; 
 327               	
 328               	
 329               	
 330               	
 331               	
 332               	;;===============================context save thread starting===============================;; 
 333               	;used registers          : R0~R31                                                              
 334               	;arg registers           : None                                                                
 335               	;return registers        : None                                                                
 336               	;unsafe access registers : None                                                                
 337               	.macro  KER_CONTEXT_SAVE_THREAD                           ;total 8.63uS @8MHz     ( 69 clocks) 
 338               	        KER_SAVE_R0_CLI_SREG                              ;save r0, sreg          (  6 clocks) 
 339               	        KER_SAVE_R1_R31                                   ;save r1~r31            ( 63 clocks) 
 340               	.endm                                                                                          
 341               	;;==================================context save thread end=================================;; 
 342               	
 343               	
 344               	
 345               	
 346               	
 347               	
 348               	;;================================restore r0 & sreg starting================================;; 
 349               	;used registers          : R0                                                                  
 350               	;arg registers           : None                                                                
 351               	;return registers        : None                                                                
 352               	;unsafe access registers : None                                                                
 353               	.macro  KER_RESTORE_R0_SREG                               ;total 0.63uS @8MHz     (  5 clocks) 
 354               	        POP   R0                                          ;fetch SREG             (  2 clocks) 
 355               			OUT   IOSREG             , R0                     ;load SREG              (  1 clock ) 
 356               			POP   R0                                          ;restore R0             (  2 clocks) 
 357               	.endm                                                                                          
 358               	;;==================================restore r0 & sreg end===================================;; 
 359               	
 360               	
 361               	
 362               	
 363               	
 364               	;;==============================restore r0, sreg & sei starting=============================;; 
 365               	;used registers          : R0                                                                  
 366               	;arg registers           : None                                                                
 367               	;return registers        : None                                                                
 368               	;unsafe access registers : None                                                                
 369               	.macro  KER_RESTORE_R0_SREG_SEI                           ;total 0.75uS @8MHz     (  6 clocks) 
 370               	        POP   R0                                          ;fetch SREG             (  2 clocks) 
 371               			OUT   IOSREG             , R0                     ;load SREG              (  1 clock ) 
 372               			POP   R0                                          ;restore R0             (  2 clocks) 
 373               			SEI                                               ;enable interrupt       (  1 clock ) 
 374               	.endm                                                                                          
 375               	;;===============================restore r0, sreg & sei end=================================;; 
 376               	
 377               	
 378               	
 379               	
 380               	
 381               	;;=================================restore r1~r31 starting==================================;; 
 382               	;used registers          : R1~R31                                                              
 383               	;arg registers           : None                                                                
 384               	;return registers        : None                                                                
 385               	;unsafe access registers : None                                                                
 386               	.macro  KER_RESTORE_R1_R31                                ;total 8.38uS @8MHz     ( 62 clocks) 
 387               			POP   R31                                         ;restore R31            (  2 clocks) 
 388               			POP   R30                                         ;restore R30            (  2 clocks) 
 389               			POP   R29                                         ;restore R29            (  2 clocks) 
 390               			POP   R28                                         ;restore R28            (  2 clocks) 
 391               			POP   R27                                         ;restore R27            (  2 clocks) 
 392               			POP   R26                                         ;restore R26            (  2 clocks) 
 393               			POP   R25                                         ;restore R25            (  2 clocks) 
 394               			POP   R24                                         ;restore R24            (  2 clocks) 
 395               			POP   R23                                         ;restore R23            (  2 clocks) 
 396               			POP   R22                                         ;restore R22            (  2 clocks) 
 397               			POP   R21                                         ;restore R21            (  2 clocks) 
 398               			POP   R20                                         ;restore R20            (  2 clocks) 
 399               			POP   R19                                         ;restore R19            (  2 clocks) 
 400               			POP   R18                                         ;restore R18            (  2 clocks) 
 401               			POP   R17                                         ;restore R17            (  2 clocks) 
 402               			POP   R16                                         ;restore R16            (  2 clocks) 
 403               			POP   R15                                         ;restore R15            (  2 clocks) 
 404               			POP   R14                                         ;restore R14            (  2 clocks) 
 405               			POP   R13                                         ;restore R13            (  2 clocks) 
 406               			POP   R12                                         ;restore R12            (  2 clocks) 
 407               			POP   R11                                         ;restore R11            (  2 clocks) 
 408               			POP   R10                                         ;restore R10            (  2 clocks) 
 409               			POP   R9                                          ;restore R9             (  2 clocks) 
 410               			POP   R8                                          ;restore R8             (  2 clocks) 
 411               			POP   R7                                          ;restore R7             (  2 clocks) 
 412               			POP   R6                                          ;restore R6             (  2 clocks) 
 413               			POP   R5                                          ;restore R5             (  2 clocks) 
 414               			POP   R4                                          ;restore R4             (  2 clocks) 
 415               			POP   R3                                          ;restore R3             (  2 clocks) 
 416               			POP   R2                                          ;restore R2             (  2 clocks) 
 417               			POP   R1                                          ;restore R1             (  2 clocks) 
 418               	.endm                                                                                          
 419               	;;====================================restore r1~r31 end====================================;; 
 420               	
 421               	
 422               	
 423               	
 424               	
 425               	;;=============================context restore handler starting=============================;; 
 426               	;used registers          : R0~R31                                                              
 427               	;arg registers           : None                                                                
 428               	;return registers        : None                                                                
 429               	;unsafe access registers : None                                                                
 430               	.macro  KER_CONTEXT_RESTORE_HANDLER                       ;total 8.38uS @8MHz     ( 67 clocks) 
 431               	        KER_RESTORE_R1_R31                                ;restore r1~r31         ( 62 clocks) 
 432               			KER_RESTORE_R0_SREG                               ;restore r0, sreg       (  5 clocks) 
 433               	.endm                                                                                          
 434               	;;===============================context restore handler end================================;; 
 435               	
 436               	
 437               	
 438               	
 439               	
 440               	;;=============================context restore thread starting==============================;; 
 441               	;used registers          : R0~R31                                                              
 442               	;arg registers           : None                                                                
 443               	;return registers        : None                                                                
 444               	;unsafe access registers : None                                                                
 445               	.macro  KER_CONTEXT_RESTORE_THREAD                        ;total 8.75uS @8MHz     ( 68 clocks) 
 446               	        KER_RESTORE_R1_R31                                ;restore r1~r31         ( 62 clocks) 
 447               			KER_RESTORE_R0_SREG_SEI                           ;restore r0, sreg       (  6 clocks) 
 448               	.endm                                                                                          
 449               	;;================================context restore thread end================================;; 
 450               	
 451               	
 452               	
 453               	
 454               	
 455               	;;=========================calculate offset addr in words starting==========================;; 
 456               	;used registers          : R16, R30(ZL), R31(ZH)                                               
 457               	;arg registers           : R30(ZL), R31(ZH)                                                    
 458               	;return registers        : R30(ZL), R31(ZH)                                                    
 459               	;unsafe access registers : R16, R30(ZL), R31(ZH)                                               
 460               	.macro  KER_CALC_ADDR_OFF_WORD                            ;total 0.75uS @8MHz     (  6 clocks) 
 461               	        LDS   R16                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 462               			LSL   R16                                         ;left shift to multiply (  1 clock ) 
 463               			ADD   ZL                 , R16                    ;add offset to array    (  1 clock ) 
 464               			LDI   R16                , 0x00                   ;clear for carry prop   (  1 clock ) 
 465               			ADC   ZH                 , R16                    ;add carry if any       (  1 clock ) 
 466               	.endm                                                                                          
 467               	;;=============================calculate offset addr in words end===========================;; 
 468               	
 469               	
 470               	
 471               	
 472               	
 473               	;;=========================calculate offset addr in bytes starting==========================;; 
 474               	;used registers          : R16, R30(ZL), R31(ZH)                                               
 475               	;arg registers           : R30(ZL), R31(ZH)                                                    
 476               	;return registers        : R30(ZL), R31(ZH)                                                    
 477               	;unsafe access registers : R16, R30(ZL), R31(ZH)                                               
 478               	.macro  KER_CALC_ADDR_OFF_BYTES                           ;total 0.63uS @8MHz     (  5 clocks) 
 479               	        LDS   R16                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 480               			ADD   ZL                 , R16                    ;add offset to array    (  1 clock ) 
 481               			LDI   R16                , 0x00                   ;clear for carry prop   (  1 clock ) 
 482               			ADC   ZH                 , R16                    ;add carry if any       (  1 clock ) 
 483               	.endm                                                                                          
 484               	;;=============================calculate offset addr in bytes end===========================;; 
 485               	
 486               	
 487               	
 488               	
 489               	
 490               	;;===============================save current task sp starting==============================;; 
 491               	;used registers          : R16, R17, R30(ZL), R31(ZH)                                          
 492               	;arg registers           : None                                                                
 493               	;return registers        : None                                                                
 494               	;unsafe access registers : R16, R17, R30(ZL), R31(ZH)                                          
 495               	.macro  KER_SAVE_CURR_TASK_SP                             ;total 1.75uS @8MHz     ( 14 clocks) 
 496               			LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 497               			LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 498               			KER_CALC_ADDR_OFF_WORD                            ;calc offset            (  6 clocks) 
 499               			IN    R16                , IOSPL                  ;fetch SPL0             (  1 clock ) 
 500               			IN    R17                , IOSPH                  ;fetch SPH0             (  1 clock ) 
 501               			STD   Z+0                , R16                    ;store SPL at ZP+0      (  2 clocks) 
 502               			STD   Z+1                , R17                    ;store SPH at ZP+1      (  2 clocks) 
 503               	.endm                                                                                          
 504               	;;================================save current task sp end==================================;; 
 505               	
 506               	
 507               	
 508               	
 509               	
 510               	;;==============================load next task id starting==================================;; 
 511               	;used registers          : R16, R17                                                            
 512               	;arg registers           : None                                                                
 513               	;return registers        : None                                                                
 514               	;unsafe access registers : R16, R17                                                            
 515               	.macro  KER_LOAD_NEXT_TASK_ID                             ;total 1.63uS @8MHz     ( 13 clocks) 
 516               			LDS   R16                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 517               			INC   R16                                         ;increment task_id      (  1 clock ) 
 518               			LDS   R17                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 519               		_MOD_CONT\@:                                          ;use local label                     
 520               		    CP    R16                , R17                    ;compare R17 with R16   (  1 clock ) 
 521               			BRLO  _MOD_DONE\@                                 ;if R16<R17, done       (  2 clocks) 
 522               			SUB   R16                , R17                    ;subtract R17 from R16  (  1 clock ) 
 523               			RJMP  _MOD_CONT\@                                 ;go to loop start       (  2 clocks) 
 524               		_MOD_DONE\@:                                          ;use local label                     
 525               		    STS   KerBase+OFB_TID    , R16                    ;save task_id%ntask     (  2 clocks) 
 526               	.endm                                                                                          
 527               	;;=================================load next task id end====================================;; 
 528               	
 529               	
 530               	
 531               	
 532               	
 533               	;;==============================increment tick counter starting=============================;; 
 534               	;used registers          : R16, R17                                                            
 535               	;arg registers           : None                                                                
 536               	;return registers        : None                                                                
 537               	;unsafe access registers : R16, R17                                                            
 538               	.macro  KER_TICK_INCREMENT                                ;total 3.38uS @8MHz     ( 26 clocks) 
 539               			LDS   R16                , KerBase+OFB_TICK0      ;load Byte0             (  2 clocks) 
 540               			INC   R16                                         ;add 1 with Byte0       (  1 clock ) 
 541               			STS   KerBase+OFB_TICK0  , R16                    ;set Byte0              (  2 clocks) 
 542               			LDI   R17                , 0x00                   ;clear reg              (  1 clock ) 
 543               			LDS   R16                , KerBase+OFB_TICK1      ;load Byte1             (  2 clocks) 
 544               			ADC   R16                , R17                    ;add carry with Byte1   (  1 clock ) 
 545               			STS   KerBase+OFB_TICK1  , R16                    ;set Byte1              (  2 clocks) 
 546               			LDS   R16                , KerBase+OFB_TICK2      ;load Byte2             (  2 clocks) 
 547               			ADC   R16                , R17                    ;add carry with Byte2   (  1 clock ) 
 548               			STS   KerBase+OFB_TICK2  , R16                    ;set Byte2              (  2 clocks) 
 549               			LDS   R16                , KerBase+OFB_TICK3      ;load Byte3             (  2 clocks) 
 550               			ADC   R16                , R17                    ;add carry with Byte3   (  1 clock ) 
 551               			STS   KerBase+OFB_TICK3  , R16                    ;set Byte3              (  2 clocks) 
 552               			LDS   R16                , KerBase+OFB_TICK4      ;load Byte4             (  2 clocks) 
 553               			ADC   R16                , R17                    ;add carry with Byte4   (  1 clock ) 
 554               			STS   KerBase+OFB_TICK4  , R16                    ;set Byte4              (  2 clocks) 
 555               	.endm                                                                                          
 556               	;;=================================increment tick counter end===============================;; 
 557               	
 558               	
 559               	
 560               	
 561               	
 562               	;;==============================load task id & sp starting==================================;; 
 563               	;used registers          : R16, R17, R30(ZL), R31(ZH)                                          
 564               	;arg registers           : None                                                                
 565               	;return registers        : None                                                                
 566               	;unsafe access registers : R16, R17, R30(ZL), R31(ZH)                                          
 567               	.macro  KER_LOAD_TASK_ID_AND_SP                           ;total 1.75uS @8MHz     ( 14 clocks) 
 568               			LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 569               			LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 570               			KER_CALC_ADDR_OFF_WORD                            ;calc offset            (  6 clocks) 
 571               			LDD   R16                , Z+0                    ;load SPL at ZP         (  2 clocks) 
 572               			LDD   R17                , Z+1                    ;load SPH at ZP         (  2 clocks) 
 573               			OUT   IOSPL              , R16                    ;load SPL0              (  1 clock ) 
 574               			OUT   IOSPH              , R17                    ;load SPH0              (  1 clock ) 
 575               	.endm                                                                                          
 576               	;;=================================load task id & sp end====================================;; 
 577               	
 578               	
 579               	
 580               	
 581               	
 582               	;;================================push msp & zp starting====================================;; 
 583               	;used registers          : R16, R17, R26(XL), R27(XH), R30(ZL), R31(ZH)                        
 584               	;arg registers           : None                                                                
 585               	;return registers        : None                                                                
 586               	;unsafe access registers : R16, R17, R26(XL), R27(XH), R30(ZL), R31(ZH)                        
 587               	.macro  KER_PUSH_MSP_ZP                                   ;total 2.25uS @8MHz     ( 18 clocks) 
 588               	        LDS   XL                 , KerSSZ+OFM_MSPI+0      ;load val low           (  2 clocks) 
 589               			LDS   XH                 , KerSSZ+OFM_MSPI+1      ;load val high          (  2 clocks) 
 590               			IN    R16                , IOSPL                  ;copy                   (  1 clock ) 
 591               			IN    R17                , IOSPH                  ;copy                   (  1 clock ) 
 592               			ST    X+                 , R16                    ;store main SPL         (  2 clocks) 
 593               	        ST    X+                 , R17                    ;store main SPH         (  2 clocks) 
 594               			ST    X+                 , ZL                     ;store main ZL          (  2 clocks) 
 595               			ST    X+                 , ZH                     ;store main ZH          (  2 clocks) 
 596               			STS   KerSSZ+OFM_MSPI+0  , XL                     ;store new index        (  2 clocks) 
 597               			STS   KerSSZ+OFM_MSPI+1  , XH                     ;store new index        (  2 clocks) 
 598               	.endm                                                                                          
 599               	;;===================================push msp & zp end======================================;; 
 600               	
 601               	
 602               	
 603               	
 604               	
 605               	;;=================================pop msp & zp starting====================================;; 
 606               	;used registers          : R16, R17, R26(XL), R27(XH), R30(ZL), R31(ZH)                        
 607               	;arg registers           : None                                                                
 608               	;return registers        : None                                                                
 609               	;unsafe access registers : R16, R17, R26(XL), R27(XH), R30(ZL), R31(ZH)                        
 610               	.macro  KER_POP_MSP_ZP                                    ;total 2.25uS @8MHz     ( 18 clocks) 
 611               			LDS   XL                 , KerSSZ+OFM_MSPI+0      ;load val low           (  2 clocks) 
 612               			LDS   XH                 , KerSSZ+OFM_MSPI+1      ;load val high          (  2 clocks) 
 613               			LD    ZH                 , -X                     ;load ZH                (  2 clocks) 
 614               			LD    ZL                 , -X                     ;load ZL                (  2 clocks) 
 615               			LD    R17                , -X                     ;load main SPH          (  2 clocks) 
 616               			LD    R16                , -X                     ;load main SPL          (  2 clocks) 
 617               			OUT   IOSPL              , R16                    ;set SPL                (  1 clock ) 
 618               			OUT   IOSPH              , R17                    ;set SPH                (  1 clock ) 
 619               			STS   KerSSZ+OFM_MSPI+0  , XL                     ;store new index        (  2 clocks) 
 620               			STS   KerSSZ+OFM_MSPI+1  , XH                     ;store new index        (  2 clocks) 
 621               	.endm                                                                                          
 622               	;;====================================pop msp & zp end======================================;; 
 623               	
 624               	
 625               	
 626               	
 627               	
 628               	;;============================sleep timeout management starting=============================;; 
 629               	;used registers          : R16, R17, R18, R24, R30(ZL), R31(ZH)                                
 630               	;arg registers           : R24 (SCH_MODE_HANDLER/SCH_MODE_THREAD)                              
 631               	;return registers        : R24 (TASK_READY/TASK_BLOCK)                                         
 632               	;unsafe access registers : R16, R17, R18, R24, R30(ZL), R31(ZH)                                
 633               	.macro  KER_SLP_TIME_MGNT                                 ;total 5.50uS @8MHz     ( 44 clocks) 
 634               			LDI   ZL                 , lo8(KerSchSlp)         ;fetch base pos low     (  1 clock ) 
 635               			LDI   ZH                 , hi8(KerSchSlp)         ;fetch base pos high    (  1 clock ) 
 636               			KER_CALC_ADDR_OFF_WORD                            ;calc offset            (  6 clocks) 
 637               			;fetch current value from ram, if val=0, skip decrement                                
 638               	        LDD   R16                , Z+0                    ;load val low byte      (  2 clocks) 
 639               			LDD   R17                , Z+1                    ;load val high byte     (  2 clocks) 
 640               			MOV   R18                , R16                    ;copy                   (  1 clock ) 
 641               			OR    R18                , R17                    ;or high & low bytes    (  1 clock ) 
 642               			BREQ  _VAL_NULL\@                                 ;val=0, save sts        (  2 clocks) 
 643               	        CPI   R24                , SCH_MODE_THREAD        ;if arg=1, thread mode  (  1 clock ) 
 644               			BREQ  _VAL_NOT_NULL\@                             ;no need to dec val     (  2 clocks) 
 645               			;R17:R16 contains 16 bit sleep timer val, decrease val by 1                            
 646               			LDI   R18                , 0x01                   ;set val 1              (  1 clock ) 
 647               	        SUB   R16                , R18                    ;subtract low byte      (  1 clock ) 
 648               			LDI   R18                , 0x00                   ;clear                  (  1 clock ) 
 649               			SBC   R17                , R18                    ;subtract carry if any  (  1 clock ) 
 650               			;store new value                                                                       
 651               			STD   Z+0                , R16                    ;store low byte         (  2 clocks) 
 652               			STD   Z+1                , R17                    ;store low byte         (  2 clocks) 
 653               			MOV   R18                , R16                    ;copy                   (  1 clock ) 
 654               			OR    R18                , R17                    ;or high & low bytes    (  1 clock ) 
 655               			BRNE  _VAL_NOT_NULL\@                             ;val!=0                 (  2 clocks) 
 656               		_VAL_NULL\@:                                                                               
 657               		    ;find ram address for status                                                           
 658               		    LDI   ZL                 , lo8(KerSchSts)         ;fetch base pos low     (  1 clock ) 
 659               			LDI   ZH                 , hi8(KerSchSts)         ;fetch base pos high    (  1 clock ) 
 660               	        KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 661               			;update flag as task is ready                                                          
 662               			LDI   R24                , TASK_READY             ;set TASK_READY         (  1 clock ) 
 663               			ST    Z                  , R24                    ;update flag            (  2 clocks) 
 664               			RJMP  _EXIT_SLP_TIME\@                            ;jump to exit           (  2 clocks) 
 665               	    _VAL_NOT_NULL\@:                                                                           
 666               		    LDI   R24                , TASK_BLOCK             ;use as return val      (  1 clock ) 
 667               	    _EXIT_SLP_TIME\@:                                                                          
 668               	.endm                                                                                          
 669               	;;============================sleep timeout management end==================================;; 
 670               	
 671               	
 672               	
 673               	
 674               	
 675               	;;============================current task priority starting================================;; 
 676               	;used registers          : R16, R24, R30(ZL), R31(ZH)                                          
 677               	;arg registers           : None                                                                
 678               	;return registers        : R24 (Current task priority)                                         
 679               	;unsafe access registers : R16, R24, R30(ZL), R31(ZH)                                          
 680               	.macro  KER_CURR_TASK_PRIO                                ;total 1.13uS @8MHz     (  9 clocks) 
 681               			LDI    ZL                , lo8(KerSchPr)          ;load low addr          (  1 clock ) 
 682               			LDI    ZH                , hi8(KerSchPr)          ;load high addr         (  1 clock ) 
 683               			LDI    R16               , 0x00                   ;clear reg, for carry   (  1 clock ) 
 684               			LDS    R24               , KerBase+OFB_TID        ;load task id           (  2 clocks) 
 685               	        ADD    ZL                , R24                    ;add low addr           (  1 clock ) 
 686               			ADC    ZH                , R16                    ;add carry if any       (  1 clock ) 
 687               			LD     R24               , Z                      ;load current tid prio  (  2 clocks) 
 688               	.endm                                                                                          
 689               	;;==============================current task priority end===================================;; 
 690               	
 691               	
 692               	
 693               	
 694               	
 695               	;;================================run scheduler starting====================================;; 
 696               	;used registers          : R16, R17, R18, R24, R25, R30(ZL), R31(ZH)                           
 697               	;arg registers           : R24 (SCH_MODE_HANDLER/SCH_MODE_THREAD)                              
 698               	;return registers        : None                                                                
 699               	;unsafe access registers : R16, R17, R18, R24, R25, R30(ZL), R31(ZH)                           
 700               	.macro  KER_RUN_SCHEDULER                                 ;total 11.5uS @8MHz     ( 92 clocks) 
 701               			LDI    R16               , 0xFF                   ;set 0xff               (  1 clock ) 
 702               			STS    KerBase+OFB_LPR   , R16                    ;lowest priority        (  2 clocks) 
 703               			LDI    R16               , 0x00                   ;start from 0           (  1 clock ) 
 704               			STS    KerBase+OFB_PTID  , R16                    ;highest prio tid=0     (  2 clocks) 
 705               			MOV    R25               , R24                    ;copy sch mode          (  1 clock ) 
 706               		_KER_SCH_LOOP\@:                                                                           
 707               		    ;store task id to run from KER_DEC_SLP_TIMEOUT                                         
 708               			STS    KerBase+OFB_TID   , R16                    ;store task id          (  2 clocks) 
 709               	        ;sleep time decrement, update ready/blocked status                                     
 710               			MOV    R24               , R25                    ;restore sch mode       (  1 clock ) 
 711               			KER_SLP_TIME_MGNT                                 ;update return vars     ( 44 clocks) 
 712               	        CPI    R24               , TASK_READY             ;compare                (  1 clock ) 
 713               	        BRNE   _KER_SCH_NEXT\@                            ;skip if task not ready (  2 clocks) 
 714               			KER_CURR_TASK_PRIO                                ;get task prio ->R24    (  9 clocks) 
 715               	        ;compare current task priority with lowest priority found so far                       
 716               			LDS    R16               , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
 717               			CP     R24               , R16                    ;compare                (  1 clock ) 
 718               			BRSH   _KER_SCH_NEXT\@                            ;if prio>=lowest prio   (  2 clocks) 
 719               			;found new lowest priority                                                             
 720               			STS    KerBase+OFB_LPR   , R24                    ;save lowest priority   (  2 clocks) 
 721               			LDS    R16               , KerBase+OFB_TID        ;load task id           (  2 clocks) 
 722               			STS    KerBase+OFB_PTID  , R16                    ;save lowest priority   (  2 clocks) 
 723               	                                                                                               
 724               	    _KER_SCH_NEXT\@:                                                                           
 725               		    LDS    R16               , KerBase+OFB_TID        ;load task id           (  2 clocks) 
 726               			INC    R16                                        ;increment by 1         (  1 clock ) 
 727               			LDS    R17               , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 728               			CP     R16               , R17                    ;compare with ntask     (  2 clocks) 
 729               			BRSH   _KER_SCH_EXIT\@                            ;if task_id>=ntask      (  2 clocks) 
 730               			RJMP   _KER_SCH_LOOP\@                            ;jump to entry          (  2 clocks) 
 731               		_KER_SCH_EXIT\@:                                                                           
 732               	        LDS    R16               , KerBase+OFB_PTID       ;load high prio task id (  2 clocks) 
 733               			STS    KerBase+OFB_TID   , R16                    ;for test only          (  2 clocks) 
 734               	.endm                                                                                          
 735               	;;===================================run scheduler end======================================;; 
 736               	
 737               	
 738               	
 739               	
 740               	
 741               	;;================================calc cpu usage starting===================================;; 
 742               	;used registers          : R16, R17                                                            
 743               	;arg registers           : None                                                                
 744               	;return registers        : None                                                                
 745               	;unsafe access registers : R16, R17                                                            
 746               	.macro  KER_CPU_USAGE                                     ;total 3.25uS @8MHz     ( 26 clocks) 
 747               	        ;check if current target task is idle task or not                                      
 748               	        LDS    R16               , KerBase+OFB_TID        ;load target task_id    (  2 clocks) 
 749               			TST    R16                                        ;check if idle task     (  1 clock ) 
 750               			BREQ   _KER_USG_TICK\@                            ;task_id=idle, skip     (  2 clocks) 
 751               			LDS    R16               , KerBase+OFB_UATC       ;load active tick cnt   (  2 clocks) 
 752               			INC    R16                                        ;inc active tick cnt    (  1 clock ) 
 753               			STS    KerBase+OFB_UATC  , R16                    ;store new val          (  2 clocks) 
 754               		_KER_USG_TICK\@:                                                                           
 755               			LDS    R16               , KerBase+OFB_UTC        ;load usage tick cnt    (  2 clocks) 
 756               			INC    R16                                        ;increment tick cnt     (  1 clock ) 
 757               			CPI    R16               , 100                    ;compare with 100       (  1 clock ) 
 758               			BRLO   _KER_USG_UTC_SV\@                          ;val<100, save new val  (  2 clocks) 
 759               			LDI    R16               , 0x00                   ;val>=100, roll back    (  1 clock ) 
 760               			LDS    R17               , KerBase+OFB_UATC       ;load active tick cnt   (  2 clocks) 
 761               			STS    KerBase+OFB_USAGE , R17                    ;store usage            (  2 clocks) 
 762               			LDI    R17               , 0x00                   ;clear reg              (  1 clock ) 
 763               			STS    KerBase+OFB_UATC  , R17                    ;clear active tick cnt  (  2 clocks) 
 764               		_KER_USG_UTC_SV\@:                                                                         
 765               			STS    KerBase+OFB_UTC   , R16                    ;store new val          (  2 clocks) 
 766               	.endm                                                                                          
 767               	;;===================================calc cpu usage end=====================================;; 
 768               	
 769               	
 770               	
 771               	
 772               	
 773               	;;=================================ISR execution starting===================================;; 
 774               	.global  __vector_16                                                                           
 775               	    __vector_16:                                          ;total 40.00uS @8MHz    (320 clocks) 
 776:kernel.S      **** 	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 777:kernel.S      ****         KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 778:kernel.S      **** 		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 779:kernel.S      **** 		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 780:kernel.S      **** 		KER_TICK_INCREMENT                                ;increment tick counter ( 26 clocks) 
 781:kernel.S      **** 		LDI    R24               , SCH_MODE_HANDLER       ;set sch mode           (  1 clock ) 
 782:kernel.S      **** 		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
 783:kernel.S      **** 		KER_CPU_USAGE                                     ;calc cpu usage         ( 26 clocks) 
 784:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 785:kernel.S      **** 		KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
 786:kernel.S      **** 	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 787:kernel.S      **** 		RETI                                              ;return from interrupt  (  4 clocks) 
 788               	;;====================================ISR execution end=====================================;; 
 789               	
 790               	
 791               	
 792               	
 793               	
 794               	;;================================SysTick reg init starting=================================;; 
 795               	Kernel_SysTick_Reg_Init:                                  ;total 11.5uS @8MHz     ( 92 clocks) 
 796               	        ;arg1 -> prescaler R24, arg2 -> reload val R22                                         
 797:kernel.S      ****         CLI                                               ;disable global int     (  1 clock ) 
 798:kernel.S      **** 		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 799:kernel.S      ****         KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 800               			;clear reg                                                                             
 801:kernel.S      **** 		LDI   R16                , 0x00                   ;set 0x00 to R16        (  1 clock ) 
 802               			;clear tick counter                                                                    
 803:kernel.S      **** 		STS   KerBase+OFB_TICK0  , R16                    ;clear  KerBase[0]      (  2 clocks) 
 804:kernel.S      **** 		STS   KerBase+OFB_TICK1  , R16                    ;clear  KerBase[1]      (  2 clocks) 
 805:kernel.S      **** 		STS   KerBase+OFB_TICK2  , R16                    ;clear  KerBase[2]      (  2 clocks) 
 806:kernel.S      **** 		STS   KerBase+OFB_TICK3  , R16                    ;clear  KerBase[3]      (  2 clocks) 
 807:kernel.S      **** 		STS   KerBase+OFB_TICK4  , R16                    ;clear  KerBase[4]      (  2 clocks) 
 808               			;clear system registers                                                                
 809:kernel.S      **** 		STS   KerBase+OFB_PRS    , R16                    ;clear  KerBase[5]      (  2 clocks) 
 810:kernel.S      **** 		STS   KerBase+OFB_RLD    , R16                    ;clear  KerBase[6]      (  2 clocks) 
 811:kernel.S      **** 		STS   KerBase+OFB_TID    , R16                    ;clear  KerBase[7]      (  2 clocks) 
 812:kernel.S      **** 		STS   KerBase+OFB_NTSK   , R16                    ;clear  KerBase[8]      (  2 clocks) 
 813:kernel.S      **** 		STS   KerBase+OFB_LPR    , R16                    ;clear  KerBase[9]      (  2 clocks) 
 814:kernel.S      ****         STS   KerBase+OFB_PTID   , R16                    ;clear  KerBase[10]     (  2 clocks) 
 815:kernel.S      **** 		STS   KerBase+OFB_UTC    , R16                    ;clear  KerBase[11]     (  2 clocks) 
 816:kernel.S      **** 		STS   KerBase+OFB_UATC   , R16                    ;clear  KerBase[12]     (  2 clocks) 
 817:kernel.S      **** 		STS   KerBase+OFB_USAGE  , R16                    ;clear  KerBase[13]     (  2 clocks) 
 818               			;clear all timer registers                                                             
 819:kernel.S      **** 		STS   SRTCCR0A           , R16                    ;clear TCCR0A           (  2 clocks) 
 820:kernel.S      **** 		STS   SRTCCR0B           , R16                    ;clear TCCR0B           (  2 clocks) 
 821:kernel.S      **** 		STS   SRTIMSK0           , R16                    ;clear TIMSK0           (  2 clocks) 
 822:kernel.S      **** 		STS   SRTIFR0            , R16                    ;clear TIFR0            (  2 clocks) 
 823:kernel.S      **** 		STS   SROCR0A            , R16                    ;clear OCR0A            (  2 clocks) 
 824:kernel.S      **** 		STS   SROCR0B            , R16                    ;clear OCR0B            (  2 clocks) 
 825:kernel.S      **** 		STS   SRTCNT0            , R16                    ;clear TCNT0            (  2 clocks) 
 826               			;save values for future use                                                            
 827:kernel.S      **** 		STS   KerBase+OFB_PRS    , R24                    ;KerBase[5] prescaler   (  2 clocks) 
 828:kernel.S      **** 		STS   KerBase+OFB_RLD    , R22                    ;KerBase[6] reload val  (  2 clocks) 
 829:kernel.S      ****         KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 830:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 831               	;;===================================SysTick reg init end===================================;; 
 832               	
 833               	
 834               	
 835               	
 836               	
 837               	;;===============================kernel task create starting================================;; 
 838               	Kernel_Task_Create:                                       ;total 20.38uS @8MHz    (163 clocks) 
 839               	        ;func_ptr->R25:R24, task_priority->R22                                                 
 840:kernel.S      ****         KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 841               			;across this function, R16 will be used as task_id                                     
 842:kernel.S      **** 		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 843:kernel.S      **** 		LDI   R17                , 0x00                   ;clear reg              (  1 clock ) 
 844               			;set priority to KerSchPr+task_id                                                      
 845:kernel.S      **** 		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 846:kernel.S      **** 		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 847:kernel.S      **** 		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
 848:kernel.S      **** 		ADC   ZH                 , R17                    ;add high byte+carry    (  1 clock ) 
 849:kernel.S      **** 		ST    Z                  , R22                    ;save priority          (  2 clocks) 
 850               			;stack pointer for current task (KerStack + KER_STK_SZ*(task_id+1) - 1) ->stack top    
 851:kernel.S      **** 		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 852:kernel.S      **** 		MOV   R17                , R16                    ;load task_id           (  1 clock ) 
 853:kernel.S      **** 		INC   R17                                         ;increment task_id      (  1 clock ) 
 854:kernel.S      **** 		LDI   R18                , KER_STK_SZ             ;load stack size        (  1 clock ) 
 855:kernel.S      **** 		MUL   R17                , R18                    ;multiply to get offset (  2 clocks) 
 856:kernel.S      **** 		MOV   ZL                 , R0                     ;load multiplied low    (  1 clocks) 
 857:kernel.S      **** 		MOV   ZH                 , R1                     ;load multiplied high   (  1 clocks) 
 858:kernel.S      **** 		SBIW  ZL                 , 0x01                   ;dec multiplied val-1   (  2 clocks) 
 859:kernel.S      **** 		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 860:kernel.S      **** 		LDI   R17                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
 861:kernel.S      **** 		LDI   R18                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
 862:kernel.S      **** 		ADD   ZL                 , R17                    ;add low bytes          (  1 clock ) 
 863:kernel.S      **** 		ADC   ZH                 , R18                    ;add high bytes+carry   (  1 clock ) 
 864:kernel.S      **** 		OUT   IOSPL              , ZL                     ;load SPL               (  1 clock ) 
 865:kernel.S      ****         OUT   IOSPH              , ZH                     ;load SPH               (  1 clock ) 
 866               			;function argument directly returns word address                                       
 867:kernel.S      **** 	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
 868:kernel.S      **** 		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 869               			;push context to stack of this task                                                    
 870:kernel.S      **** 		KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 871               			;read stack pointer of current task (necessary when restore)                           
 872:kernel.S      **** 		IN    R17                , IOSPL                  ;read SPL               (  1 clock ) 
 873:kernel.S      ****         IN    R18                , IOSPH                  ;read SPH               (  1 clock ) 
 874               			;calculate the address where current task's SP will be stored and store SP             
 875:kernel.S      **** 		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 876:kernel.S      **** 		MOV   R19                , R16                    ;copy task_id           (  1 clock ) 
 877:kernel.S      **** 		LSL   R19                                         ;left shift to multiply (  1 clock ) 
 878:kernel.S      **** 		LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 879:kernel.S      **** 		LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 880:kernel.S      **** 		ADD   ZL                 , R19                    ;add offset to array    (  1 clock ) 
 881:kernel.S      **** 		LDI   R16                , 0x00                   ;clear reg              (  1 clock ) 
 882:kernel.S      **** 		ADC   ZH                 , R16                    ;add carry if any       (  1 clock ) 
 883:kernel.S      **** 		ST    Z+                 , R17                    ;SPL at KerPSp+offset   (  2 clocks) 
 884:kernel.S      **** 		ST    Z                  , R18                    ;SPH at KerPSp+offset   (  2 clocks) 
 885               			;increment task_id                                                                     
 886:kernel.S      **** 		LDS   R16                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
 887:kernel.S      **** 		INC   R16                                         ;increment task_id      (  1 clock ) 
 888:kernel.S      **** 		STS   KerBase+OFB_TID    , R16                    ;store task_id          (  2 clocks) 
 889               			;increment ntask                                                                       
 890:kernel.S      **** 		LDS   R16                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 891:kernel.S      **** 		INC   R16                                         ;increment ntask        (  1 clock ) 
 892:kernel.S      **** 		STS   KerBase+OFB_NTSK   , R16                    ;store ntask            (  2 clocks) 
 893:kernel.S      **** 		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 894:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 895               	;;==================================kernel task create end==================================;; 
 896               	
 897               	
 898               	
 899               	
 900               	
 901               	;;=================================kernel start tasks starting==============================;; 
 902               	Kernel_Start_Tasks:                                       ;total 11.38uS @8MHz    ( 91 clocks) 
 903               			;clear task_id                                                                         
 904:kernel.S      **** 		LDI   R16                , 0x00                   ;load task_id           (  2 clocks) 
 905:kernel.S      **** 		STS   KerBase+OFB_TID    , R16                    ;store task_id          (  2 clocks) 
 906               			;load ZP with addr+offset                                                              
 907:kernel.S      **** 		LDI   ZL                 , lo8(KerPSP+0x00)       ;fetch ZPL KerPSP->TID0 (  1 clock ) 
 908:kernel.S      **** 		LDI   ZH                 , hi8(KerPSP+0x00)       ;fetch ZPH KerPSP->TID0 (  1 clock ) 
 909               			;load task_id 0 task's SP                                                              
 910:kernel.S      **** 		LD    R16                , Z+                     ;load val from Z, inc Z (  2 clocks) 
 911:kernel.S      **** 		LD    R17                , Z                      ;load val from Z+1      (  2 clocks) 
 912               	        ;set task_id=0 task's SP                                                               
 913:kernel.S      **** 		OUT   IOSPL              , R16                    ;load SPL               (  1 clock ) 
 914:kernel.S      ****         OUT   IOSPH              , R17                    ;load SPH               (  1 clock ) 
 915               	        ;forcefully restore context, in ISR it will be stored automatically                    
 916:kernel.S      **** 		KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
 917               			;config timer for system tick                                                          
 918:kernel.S      **** 		KER_TIMER_INIT                                    ;init timer, int enable ( 12 clocks) 
 919               			;execute return to jump to task0, pushed while task init                               
 920:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 921               	;;==================================kernel start tasks end==================================;; 
 922               	
 923               	
 924               	
 925               	
 926               	
 927               	;;===================================kernel init starting===================================;; 
 928               	Kernel_Init:                                              ;total 38.63uS @8MHz    (309 clocks) 
 929               			;save necessary registers and MSP                                                      
 930:kernel.S      **** 		CLR   R1                                          ;gcc expects            (  1 clock ) 
 931               	        ;store stack top (for MSP) addr to KerSSZ+OFM_MSPI0:1                                  
 932:kernel.S      **** 		LDI   R16                , lo8(KerSSZ+OFM_MSPS)   ;load low address       (  1 clock ) 
 933:kernel.S      **** 		LDI   R17                , hi8(KerSSZ+OFM_MSPS)   ;load high address      (  1 clock ) 
 934:kernel.S      ****         STS   KerSSZ+OFM_MSPI+0  , R16                    ;set mspi to stack top  (  2 clocks) 
 935:kernel.S      **** 		STS   KerSSZ+OFM_MSPI+1  , R17                    ;set mspi to stack top  (  2 clocks) 
 936:kernel.S      **** 		KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 937               			;init timer for kernel                                                                 
 938:kernel.S      **** 		LDI   R24                , 0x03                   ;set prescaler          (  1 clock ) 
 939:kernel.S      **** 		LDI   R22                , 0x82                   ;set reload val         (  1 clock ) 
 940:kernel.S      **** 		CALL  Kernel_SysTick_Reg_Init                     ;init timer             ( 92 clocks) 
 941               			;create idle task at task_id 0, priority 0xFF (lowest)                                 
 942:kernel.S      **** 		LDI   R24                , lo8(Kernel_Task_Idle)  ;load func addr low     (  1 clock ) 
 943:kernel.S      **** 		LDI   R25                , hi8(Kernel_Task_Idle)  ;load func addr high    (  1 clock ) 
 944:kernel.S      **** 		LSR   R25                                         ;right shift to divide  (  1 clock ) 
 945:kernel.S      **** 		ROR   R24                                         ;rotate right th carry  (  1 clock ) 
 946:kernel.S      **** 		LDI   R22                , 0xFF                   ;set max val            (  1 clock ) 
 947:kernel.S      **** 		CALL  Kernel_Task_Create                          ;init idle task         (163 clocks) 
 948:kernel.S      **** 		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 949               			;execute return to jump to task0, pushed while task init                               
 950:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 951               	;;======================================kernel init end=====================================;; 
 952               	
 953               	
 954               	
 955               	
 956               	
 957               	;;=================================kernel idle task starting================================;; 
 958               	Kernel_Task_Idle:                                         ;total 0.5uS @8MHz      (  4 clocks) 
 959               	       ;LDI   R25                , 0x00                   ;set UBRRH              (  1 clock ) 
 960               	       ;LDI   R24                , 0x00                   ;set UBRRL              (  1 clock ) 
 961               	       ;CALL  Debug_Init                                  ;debug init             ( 19 clocks) 
 962               	    _IDLE_LOOP:                                           ;forever loop                        
 963               		   ;LDI   R24                , 0x23                   ;load val               (  1 clock ) 
 964               		   ;CALL  Debug_Tx_Byte                                                                    
 965:kernel.S      **** 		RJMP  _IDLE_LOOP                                  ;return from subroutine (  4 clocks) 
 966               	;;==================================kernel idle task end====================================;; 
 967               	
 968               	
 969               	
 970               	
 971               	
 972               	;;================================kernel task sleep starting================================;; 
 973               	Kernel_Task_Sleep:                                        ;total 35.5uS @8MHz     (284 clocks) 
 974               	        ;save current context                                                                  
 975:kernel.S      ****         KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
 976:kernel.S      **** 		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 977               			;create next task wakeup time (args R25:R24)                                           
 978:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 979:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 980:kernel.S      **** 		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
 981:kernel.S      **** 		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
 982:kernel.S      **** 		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 983               			;update task scheduler status as blocked                                               
 984:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 985:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 986:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
 987:kernel.S      ****         LDI   R16                , TASK_BLOCK             ;block task until cnt=0 (  1 clock ) 
 988:kernel.S      **** 		STD   Z+0                , R16                    ;save block flag        (  2 clocks) 
 989               			;run scheduler, load next task sp, restore context                                     
 990:kernel.S      **** 		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
 991:kernel.S      **** 		KER_RUN_SCHEDULER                                 ;run scheduler          ( 92 clocks) 
 992:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 993:kernel.S      **** 		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 994:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 995               	;;=================================kernel task sleep end====================================;; 
 996               	
 997               	
 998               	
 999               	
 1000               	
 1001               	;;===========================kernel task sleep time get starting============================;; 
 1002               	Kernel_Task_Sleep_Time_Get:                               ;total 1.88uS @8MHz     ( 15 clocks) 
 1003               			;get remaining sleep time (ms), arg R24, return R25:R24                                
1004:kernel.S      **** 		MOV   R16                , R24                    ;copy                   (  1 clock ) 
1005:kernel.S      **** 		LSL   R16                                         ;x2                     (  1 clock ) 
1006:kernel.S      **** 		LDI   R30                , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
1007:kernel.S      **** 		LDI   R31                , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
1008:kernel.S      **** 		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
1009:kernel.S      **** 		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
1010:kernel.S      **** 		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
1011:kernel.S      **** 		LD    R24                , Z+                     ;load sleep time        (  2 clocks) 
1012:kernel.S      **** 		LD    R25                , Z                      ;load sleep time        (  2 clocks) 
1013:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1014               	;;==============================kernel task sleep time get end==============================;; 
 1015               	
 1016               	
 1017               	
 1018               	
 1019               	
 1020               	;;==============================kernel task status get starting=============================;; 
 1021               	Kernel_Task_Status_Get:                                   ;total 1.50uS @8MHz     ( 12 clocks) 
 1022               			;get task status ->ready/blocked, arg R24, return R24                                  
1023:kernel.S      **** 		MOV   R16                , R24                    ;copy                   (  1 clock ) 
1024:kernel.S      **** 		LDI   R30                , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
1025:kernel.S      **** 		LDI   R31                , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
1026:kernel.S      **** 		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
1027:kernel.S      **** 		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
1028:kernel.S      **** 		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
1029:kernel.S      **** 		LD    R24                , Z                      ;load task status       (  2 clocks) 
1030:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1031               	;;================================kernel task status get end================================;; 
 1032               	
 1033               	
 1034               	
 1035               	
 1036               	
 1037               	;;================================kernel ntask get starting=================================;; 
 1038               	Kernel_NTask_Get:                                         ;total 0.75uS @8MHz     (  6 clocks) 
1039:kernel.S      **** 		LDS   R24                 , KerBase+OFB_NTSK      ;load ntask             (  2 clock ) 
1040:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1041               	;;===================================kernel ntask get end===================================;; 
 1042               	
 1043               	
 1044               	
 1045               	
 1046               	
 1047               	;;=============================kernel task priority get starting============================;; 
 1048               	Kernel_Task_Prio_Get:                                     ;total 1.38uS @8MHz     ( 11 clocks) 
 1049               			;get priority of the task id, arg (task_id->R24), return R24                           
1050:kernel.S      **** 		MOV   R16                , R24                    ;copy task_id           (  1 clock ) 
1051:kernel.S      **** 		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
1052:kernel.S      **** 		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
1053:kernel.S      **** 		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
1054:kernel.S      **** 		ADC   ZH                 , R1                     ;add high byte+carry    (  1 clock ) 
1055:kernel.S      **** 		LD    R24                , Z                      ;load priority          (  2 clocks) 
1056:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1057               	;;================================kernel task priority get end==============================;; 
 1058               	
 1059               	
 1060               	
 1061               	
 1062               	
 1063               	;;============================kernel lowest priority get starting===========================;; 
 1064               	Kernel_Lowest_Prio_Get:                                   ;total 0.75uS @8MHz     (  6 clocks) 
 1065               			;get lowest priority, return R24                                                       
1066:kernel.S      **** 		LDS   R24                , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
1067:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1068               	;;===============================kernel lowest priority get end=============================;; 
 1069               	
 1070               	
 1071               	
 1072               	
 1073               	
 1074               	;;===========================kernel high priority task id starting==========================;; 
 1075               	Kernel_High_Prio_Task_ID_Get:                             ;total 0.88uS @8MHz     (  7 clocks) 
 1076               			;internal idle task id = 0, app task start from task id 1, return R24                  
1077:kernel.S      **** 		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
1078:kernel.S      **** 		DEC   R24                                         ;decrement by 1         (  1 clock ) 
1079:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1080               	;;==============================kernel high priority task id end============================;; 
 1081               	
 1082               	
 1083               	
 1084               	
 1085               	
 1086               	;;=========================kernel abs high priority task id starting========================;; 
 1087               	Kernel_Abs_High_Prio_Task_ID_Get:                         ;total 0.75uS @8MHz     (  6 clocks) 
 1088               			;get highest priority task id, return R24                                              
1089:kernel.S      **** 		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
1090:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1091               	;;============================kernel abs high priority task id end==========================;; 
 1092               	
 1093               	
 1094               	
 1095               	
 1096               	
 1097               	;;================================kernel cpu usage get starting=============================;; 
 1098               	Kernel_CPU_Usage_Get:                                     ;total 0.75uS @8MHz     (  6 clocks) 
 1099               			;get cpu usage, return R24                                                             
1100:kernel.S      **** 		LDS   R24                , KerBase+OFB_USAGE      ;load cpu usage         (  2 clocks) 
1101:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1102               	;;==================================kernel cpu usage get end================================;; 
DEFINED SYMBOLS
            kernel.S:12     *ABS*:000003e8 KER_TR
            kernel.S:13     *ABS*:00000003 KER_PRS
            kernel.S:14     *ABS*:00000082 KER_RLD
            kernel.S:15     *ABS*:00000080 KER_STK_SZ
            kernel.S:16     *ABS*:0000000a KER_MX_NTSK
            kernel.S:24     *ABS*:00000000 OFB_TICK0
            kernel.S:25     *ABS*:00000001 OFB_TICK1
            kernel.S:26     *ABS*:00000002 OFB_TICK2
            kernel.S:27     *ABS*:00000003 OFB_TICK3
            kernel.S:28     *ABS*:00000004 OFB_TICK4
            kernel.S:29     *ABS*:00000005 OFB_PRS
            kernel.S:30     *ABS*:00000006 OFB_RLD
            kernel.S:31     *ABS*:00000007 OFB_TID
            kernel.S:32     *ABS*:00000008 OFB_NTSK
            kernel.S:33     *ABS*:00000009 OFB_LPR
            kernel.S:34     *ABS*:0000000a OFB_PTID
            kernel.S:35     *ABS*:0000000b OFB_UTC
            kernel.S:36     *ABS*:0000000c OFB_UATC
            kernel.S:37     *ABS*:0000000d OFB_USAGE
            kernel.S:38     *ABS*:00000000 OFM_MSPI
            kernel.S:39     *ABS*:00000002 OFM_MSPS
            kernel.S:47     *ABS*:00000000 TASK_BLOCK
            kernel.S:48     *ABS*:00000001 TASK_READY
            kernel.S:49     *ABS*:00000000 SCH_MODE_HANDLER
            kernel.S:50     *ABS*:00000001 SCH_MODE_THREAD
            kernel.S:58     *ABS*:0000005f SRSREG
            kernel.S:59     *ABS*:0000005e SRSPH
            kernel.S:60     *ABS*:0000005d SRSPL
            kernel.S:61     *ABS*:0000006e SRTIMSK0
            kernel.S:62     *ABS*:00000048 SROCR0B
            kernel.S:63     *ABS*:00000047 SROCR0A
            kernel.S:64     *ABS*:00000046 SRTCNT0
            kernel.S:65     *ABS*:00000045 SRTCCR0B
            kernel.S:66     *ABS*:00000044 SRTCCR0A
            kernel.S:67     *ABS*:00000035 SRTIFR0
            kernel.S:68     *ABS*:00000028 IOOCR0B
            kernel.S:69     *ABS*:00000027 IOOCR0A
            kernel.S:70     *ABS*:00000026 IOTCNT0
            kernel.S:71     *ABS*:00000025 IOTCCR0B
            kernel.S:72     *ABS*:00000024 IOTCCR0A
            kernel.S:73     *ABS*:00000015 IOTIFR0
            kernel.S:74     *ABS*:0000003f IOSREG
            kernel.S:75     *ABS*:0000003e IOSPH
            kernel.S:76     *ABS*:0000003d IOSPL
            kernel.S:87     .bss:00000000 KerBase
            kernel.S:90     .bss:0000000e KerPSP
            kernel.S:93     .bss:00000022 KerSSZ
            kernel.S:96     .bss:00000030 KerSchSts
            kernel.S:99     .bss:0000003a KerSchPr
            kernel.S:102    .bss:00000044 KerSchSlp
            kernel.S:105    .bss:00000058 KerStack
            kernel.S:775    .text:00000000 __vector_16
            kernel.S:795    .text:000001c8 Kernel_SysTick_Reg_Init
            kernel.S:928    .text:000003b8 Kernel_Init
            kernel.S:838    .text:00000266 Kernel_Task_Create
            kernel.S:902    .text:00000348 Kernel_Start_Tasks
            kernel.S:958    .text:00000416 Kernel_Task_Idle
            kernel.S:973    .text:00000418 Kernel_Task_Sleep
            kernel.S:1002   .text:0000059a Kernel_Task_Sleep_Time_Get
            kernel.S:1021   .text:000005ae Kernel_Task_Status_Get
            kernel.S:1038   .text:000005be Kernel_NTask_Get
            kernel.S:1048   .text:000005c4 Kernel_Task_Prio_Get
            kernel.S:1064   .text:000005d2 Kernel_Lowest_Prio_Get
            kernel.S:1075   .text:000005d8 Kernel_High_Prio_Task_ID_Get
            kernel.S:1087   .text:000005e0 Kernel_Abs_High_Prio_Task_ID_Get
            kernel.S:1098   .text:000005e6 Kernel_CPU_Usage_Get
            kernel.S:782    .text:000000ac _KER_SCH_LOOP8
            kernel.S:782    .text:000000e2 _VAL_NULL9
            kernel.S:782    .text:000000f6 _VAL_NOT_NULL9
            kernel.S:782    .text:000000f8 _EXIT_SLP_TIME9
            kernel.S:782    .text:00000120 _KER_SCH_NEXT8
            kernel.S:782    .text:00000130 _KER_SCH_EXIT8
            kernel.S:783    .text:0000014a _KER_USG_TICK13
            kernel.S:783    .text:00000164 _KER_USG_UTC_SV13
            kernel.S:962    .text:00000416 _IDLE_LOOP
            kernel.S:991    .text:000004ae _KER_SCH_LOOP41
            kernel.S:991    .text:000004e4 _VAL_NULL42
            kernel.S:991    .text:000004f8 _VAL_NOT_NULL42
            kernel.S:991    .text:000004fa _EXIT_SLP_TIME42
            kernel.S:991    .text:00000522 _KER_SCH_NEXT41
            kernel.S:991    .text:00000532 _KER_SCH_EXIT41

UNDEFINED SYMBOLS
Kernel_SysTick_Val_Get
Kernel_SysTick_Val_Safely_Get
Kernel_Interrupt_Sts_Get
