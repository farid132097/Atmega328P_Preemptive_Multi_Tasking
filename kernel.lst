   1               	# 1 "kernel.S"
   1               	
   0               	
   0               	
   2               	
   3               	 ; File          : kernel.S
   4               	 ; Author        : MD. Faridul Islam (faridmdislam@gmail.com)
   5               	 ; Description   : AVR kernel for bare-metal RTOS
   6               	 ; Created       : Jul 27, 2025, 09:30 PM
   7               	 ; Last Modified : Oct 07, 2025, 10:42 PM
   8               	
   9               	
  10               	
  11               	
  12               	#include <avr/io.h>
   1               	/* Copyright (c) 2002,2003,2005,2006,2007 Marek Michalkiewicz, Joerg Wunsch
   2               	   Copyright (c) 2007 Eric B. Weddington
   3               	   All rights reserved.
   4               	
   5               	   Redistribution and use in source and binary forms, with or without
   6               	   modification, are permitted provided that the following conditions are met:
   7               	
   8               	   * Redistributions of source code must retain the above copyright
   9               	     notice, this list of conditions and the following disclaimer.
  10               	
  11               	   * Redistributions in binary form must reproduce the above copyright
  12               	     notice, this list of conditions and the following disclaimer in
  13               	     the documentation and/or other materials provided with the
  14               	     distribution.
  15               	
  16               	   * Neither the name of the copyright holders nor the names of
  17               	     contributors may be used to endorse or promote products derived
  18               	     from this software without specific prior written permission.
  19               	
  20               	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21               	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22               	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23               	  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24               	  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25               	  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26               	  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27               	  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28               	  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29               	  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30               	  POSSIBILITY OF SUCH DAMAGE. */
  31               	
  32               	/* $Id: io.h,v 1.52.2.28 2009/12/20 17:02:53 arcanum Exp $ */
  33               	
  34               	/** \file */
  35               	/** \defgroup avr_io <avr/io.h>: AVR device-specific IO definitions
  36               	    \code #include <avr/io.h> \endcode
  37               	
  38               	    This header file includes the apropriate IO definitions for the
  39               	    device that has been specified by the <tt>-mmcu=</tt> compiler
  40               	    command-line switch.  This is done by diverting to the appropriate
  41               	    file <tt>&lt;avr/io</tt><em>XXXX</em><tt>.h&gt;</tt> which should
  42               	    never be included directly.  Some register names common to all
  43               	    AVR devices are defined directly within <tt>&lt;avr/common.h&gt;</tt>,
  44               	    which is included in <tt>&lt;avr/io.h&gt;</tt>,
  45               	    but most of the details come from the respective include file.
  46               	
  47               	    Note that this file always includes the following files:
  48               	    \code 
  49               	    #include <avr/sfr_defs.h>
  50               	    #include <avr/portpins.h>
  51               	    #include <avr/common.h>
  52               	    #include <avr/version.h>
  53               	    \endcode
  54               	    See \ref avr_sfr for more details about that header file.
  55               	
  56               	    Included are definitions of the IO register set and their
  57               	    respective bit values as specified in the Atmel documentation.
  58               	    Note that inconsistencies in naming conventions,
  59               	    so even identical functions sometimes get different names on
  60               	    different devices.
  61               	
  62               	    Also included are the specific names useable for interrupt
  63               	    function definitions as documented
  64               	    \ref avr_signames "here".
  65               	
  66               	    Finally, the following macros are defined:
  67               	
  68               	    - \b RAMEND
  69               	    <br>
  70               	    The last on-chip RAM address.
  71               	    <br>
  72               	    - \b XRAMEND
  73               	    <br>
  74               	    The last possible RAM location that is addressable. This is equal to 
  75               	    RAMEND for devices that do not allow for external RAM. For devices 
  76               	    that allow external RAM, this will be larger than RAMEND.
  77               	    <br>
  78               	    - \b E2END
  79               	    <br>
  80               	    The last EEPROM address.
  81               	    <br>
  82               	    - \b FLASHEND
  83               	    <br>
  84               	    The last byte address in the Flash program space.
  85               	    <br>
  86               	    - \b SPM_PAGESIZE
  87               	    <br>
  88               	    For devices with bootloader support, the flash pagesize
  89               	    (in bytes) to be used for the \c SPM instruction. 
  90               	    - \b E2PAGESIZE
  91               	    <br>
  92               	    The size of the EEPROM page.
  93               	    
  94               	*/
  95               	
  96               	#ifndef _AVR_IO_H_
  97               	#define _AVR_IO_H_
  98               	
  99               	#include <avr/sfr_defs.h>
   1               	/* Copyright (c) 2002, Marek Michalkiewicz <marekm@amelek.gda.pl>
 100               	
 101               	#if defined (__AVR_AT94K__)
 102               	#  include <avr/ioat94k.h>
 103               	#elif defined (__AVR_AT43USB320__)
 104               	#  include <avr/io43u32x.h>
 105               	#elif defined (__AVR_AT43USB355__)
 106               	#  include <avr/io43u35x.h>
 107               	#elif defined (__AVR_AT76C711__)
 108               	#  include <avr/io76c711.h>
 109               	#elif defined (__AVR_AT86RF401__)
 110               	#  include <avr/io86r401.h>
 111               	#elif defined (__AVR_AT90PWM1__)
 112               	#  include <avr/io90pwm1.h>
 113               	#elif defined (__AVR_AT90PWM2__)
 114               	#  include <avr/io90pwmx.h>
 115               	#elif defined (__AVR_AT90PWM2B__)
 116               	#  include <avr/io90pwm2b.h>
 117               	#elif defined (__AVR_AT90PWM3__)
 118               	#  include <avr/io90pwmx.h>
 119               	#elif defined (__AVR_AT90PWM3B__)
 120               	#  include <avr/io90pwm3b.h>
 121               	#elif defined (__AVR_AT90PWM216__)
 122               	#  include <avr/io90pwm216.h>
 123               	#elif defined (__AVR_AT90PWM316__)
 124               	#  include <avr/io90pwm316.h>
 125               	#elif defined (__AVR_AT90PWM81__)
 126               	#  include <avr/io90pwm81.h>
 127               	#elif defined (__AVR_ATmega8U2__)
 128               	#  include <avr/iom8u2.h>
 129               	#elif defined (__AVR_ATmega16M1__)
 130               	#  include <avr/iom16m1.h>
 131               	#elif defined (__AVR_ATmega16U2__)
 132               	#  include <avr/iom16u2.h>
 133               	#elif defined (__AVR_ATmega16U4__)
 134               	#  include <avr/iom16u4.h>
 135               	#elif defined (__AVR_ATmega32C1__)
 136               	#  include <avr/iom32c1.h>
 137               	#elif defined (__AVR_ATmega32M1__)
 138               	#  include <avr/iom32m1.h>
 139               	#elif defined (__AVR_ATmega32U2__)
 140               	#  include <avr/iom32u2.h>
 141               	#elif defined (__AVR_ATmega32U4__)
 142               	#  include <avr/iom32u4.h>
 143               	#elif defined (__AVR_ATmega32U6__)
 144               	#  include <avr/iom32u6.h>
 145               	#elif defined (__AVR_ATmega64C1__)
 146               	#  include <avr/iom64c1.h>
 147               	#elif defined (__AVR_ATmega64M1__)
 148               	#  include <avr/iom64m1.h>
 149               	#elif defined (__AVR_ATmega128__)
 150               	#  include <avr/iom128.h>
 151               	#elif defined (__AVR_ATmega1280__)
 152               	#  include <avr/iom1280.h>
 153               	#elif defined (__AVR_ATmega1281__)
 154               	#  include <avr/iom1281.h>
 155               	#elif defined (__AVR_ATmega1284P__)
 156               	#  include <avr/iom1284p.h>
 157               	#elif defined (__AVR_ATmega128RFA1__)
 158               	#  include <avr/iom128rfa1.h>
 159               	#elif defined (__AVR_ATmega2560__)
 160               	#  include <avr/iom2560.h>
 161               	#elif defined (__AVR_ATmega2561__)
 162               	#  include <avr/iom2561.h>
 163               	#elif defined (__AVR_AT90CAN32__)
 164               	#  include <avr/iocan32.h>
 165               	#elif defined (__AVR_AT90CAN64__)
 166               	#  include <avr/iocan64.h>
 167               	#elif defined (__AVR_AT90CAN128__)
 168               	#  include <avr/iocan128.h>
 169               	#elif defined (__AVR_AT90USB82__)
 170               	#  include <avr/iousb82.h>
 171               	#elif defined (__AVR_AT90USB162__)
 172               	#  include <avr/iousb162.h>
 173               	#elif defined (__AVR_AT90USB646__)
 174               	#  include <avr/iousb646.h>
 175               	#elif defined (__AVR_AT90USB647__)
 176               	#  include <avr/iousb647.h>
 177               	#elif defined (__AVR_AT90USB1286__)
 178               	#  include <avr/iousb1286.h>
 179               	#elif defined (__AVR_AT90USB1287__)
 180               	#  include <avr/iousb1287.h>
 181               	#elif defined (__AVR_ATmega64__)
 182               	#  include <avr/iom64.h>
 183               	#elif defined (__AVR_ATmega640__)
 184               	#  include <avr/iom640.h>
 185               	#elif defined (__AVR_ATmega644__) || defined (__AVR_ATmega644A__)
 186               	#  include <avr/iom644.h>
 187               	#elif defined (__AVR_ATmega644P__)
 188               	#  include <avr/iom644p.h>
 189               	#elif defined (__AVR_ATmega644PA__)
 190               	#  include <avr/iom644pa.h>
 191               	#elif defined (__AVR_ATmega645__) || defined (__AVR_ATmega645A__) || defined (__AVR_ATmega645P__)
 192               	#  include <avr/iom645.h>
 193               	#elif defined (__AVR_ATmega6450__) || defined (__AVR_ATmega6450A__) || defined (__AVR_ATmega6450P__
 194               	#  include <avr/iom6450.h>
 195               	#elif defined (__AVR_ATmega649__) || defined (__AVR_ATmega649A__)
 196               	#  include <avr/iom649.h>
 197               	#elif defined (__AVR_ATmega6490__) || defined (__AVR_ATmega6490A__) || defined (__AVR_ATmega6490P__
 198               	#  include <avr/iom6490.h>
 199               	#elif defined (__AVR_ATmega649P__)
 200               	#  include <avr/iom649p.h>
 201               	#elif defined (__AVR_ATmega64HVE__)
 202               	#  include <avr/iom64hve.h>
 203               	#elif defined (__AVR_ATmega103__)
 204               	#  include <avr/iom103.h>
 205               	#elif defined (__AVR_ATmega32__)
 206               	#  include <avr/iom32.h>
 207               	#elif defined (__AVR_ATmega323__)
 208               	#  include <avr/iom323.h>
 209               	#elif defined (__AVR_ATmega324P__) || defined (__AVR_ATmega324A__)
 210               	#  include <avr/iom324.h>
 211               	#elif defined (__AVR_ATmega324PA__)
 212               	#  include <avr/iom324pa.h>
 213               	#elif defined (__AVR_ATmega325__)
 214               	#  include <avr/iom325.h>
 215               	#elif defined (__AVR_ATmega325P__)
 216               	#  include <avr/iom325.h>
 217               	#elif defined (__AVR_ATmega3250__)
 218               	#  include <avr/iom3250.h>
 219               	#elif defined (__AVR_ATmega3250P__)
 220               	#  include <avr/iom3250.h>
 221               	#elif defined (__AVR_ATmega328P__) || defined (__AVR_ATmega328__)
 222               	#  include <avr/iom328p.h>
   1               	/* Copyright (c) 2007 Atmel Corporation
 223               	#elif defined (__AVR_ATmega329__)
 224               	#  include <avr/iom329.h>
 225               	#elif defined (__AVR_ATmega329P__) || defined (__AVR_ATmega329PA__)
 226               	#  include <avr/iom329.h>
 227               	#elif defined (__AVR_ATmega3290__)
 228               	#  include <avr/iom3290.h>
 229               	#elif defined (__AVR_ATmega3290P__)
 230               	#  include <avr/iom3290.h>
 231               	#elif defined (__AVR_ATmega32HVB__)
 232               	#  include <avr/iom32hvb.h>
 233               	#elif defined (__AVR_ATmega406__)
 234               	#  include <avr/iom406.h>
 235               	#elif defined (__AVR_ATmega16__)
 236               	#  include <avr/iom16.h>
 237               	#elif defined (__AVR_ATmega16A__)
 238               	#  include <avr/iom16a.h>
 239               	#elif defined (__AVR_ATmega161__)
 240               	#  include <avr/iom161.h>
 241               	#elif defined (__AVR_ATmega162__)
 242               	#  include <avr/iom162.h>
 243               	#elif defined (__AVR_ATmega163__)
 244               	#  include <avr/iom163.h>
 245               	#elif defined (__AVR_ATmega164P__) || defined (__AVR_ATmega164A__)
 246               	#  include <avr/iom164.h>
 247               	#elif defined (__AVR_ATmega165__) || defined (__AVR_ATmega165A__)
 248               	#  include <avr/iom165.h>
 249               	#elif defined (__AVR_ATmega165P__)
 250               	#  include <avr/iom165p.h>
 251               	#elif defined (__AVR_ATmega168__) || defined (__AVR_ATmega168A__)
 252               	#  include <avr/iom168.h>
 253               	#elif defined (__AVR_ATmega168P__)
 254               	#  include <avr/iom168p.h>
 255               	#elif defined (__AVR_ATmega169__) || defined (__AVR_ATmega169A__)
 256               	#  include <avr/iom169.h>
 257               	#elif defined (__AVR_ATmega169P__)
 258               	#  include <avr/iom169p.h>
 259               	#elif defined (__AVR_ATmega169PA__)
 260               	#  include <avr/iom169pa.h>
 261               	#elif defined (__AVR_ATmega8HVA__)
 262               	#  include <avr/iom8hva.h>
 263               	#elif defined (__AVR_ATmega16HVA__)
 264               	#  include <avr/iom16hva.h>
 265               	#elif defined (__AVR_ATmega16HVA2__)
 266               	#  include <avr/iom16hva2.h>
 267               	#elif defined (__AVR_ATmega16HVB__)
 268               	#  include <avr/iom16hvb.h>
 269               	#elif defined (__AVR_ATmega8__)
 270               	#  include <avr/iom8.h>
 271               	#elif defined (__AVR_ATmega48__) || defined (__AVR_ATmega48A__)
 272               	#  include <avr/iom48.h>
 273               	#elif defined (__AVR_ATmega48P__)
 274               	#  include <avr/iom48p.h>
 275               	#elif defined (__AVR_ATmega88__) || defined (__AVR_ATmega88A__)
 276               	#  include <avr/iom88.h>
 277               	#elif defined (__AVR_ATmega88P__)
 278               	#  include <avr/iom88p.h>
 279               	#elif defined (__AVR_ATmega88PA__)
 280               	#  include <avr/iom88pa.h>
 281               	#elif defined (__AVR_ATmega8515__)
 282               	#  include <avr/iom8515.h>
 283               	#elif defined (__AVR_ATmega8535__)
 284               	#  include <avr/iom8535.h>
 285               	#elif defined (__AVR_AT90S8535__)
 286               	#  include <avr/io8535.h>
 287               	#elif defined (__AVR_AT90C8534__)
 288               	#  include <avr/io8534.h>
 289               	#elif defined (__AVR_AT90S8515__)
 290               	#  include <avr/io8515.h>
 291               	#elif defined (__AVR_AT90S4434__)
 292               	#  include <avr/io4434.h>
 293               	#elif defined (__AVR_AT90S4433__)
 294               	#  include <avr/io4433.h>
 295               	#elif defined (__AVR_AT90S4414__)
 296               	#  include <avr/io4414.h>
 297               	#elif defined (__AVR_ATtiny22__)
 298               	#  include <avr/iotn22.h>
 299               	#elif defined (__AVR_ATtiny26__)
 300               	#  include <avr/iotn26.h>
 301               	#elif defined (__AVR_AT90S2343__)
 302               	#  include <avr/io2343.h>
 303               	#elif defined (__AVR_AT90S2333__)
 304               	#  include <avr/io2333.h>
 305               	#elif defined (__AVR_AT90S2323__)
 306               	#  include <avr/io2323.h>
 307               	#elif defined (__AVR_AT90S2313__)
 308               	#  include <avr/io2313.h>
 309               	#elif defined (__AVR_ATtiny2313__)
 310               	#  include <avr/iotn2313.h>
 311               	#elif defined (__AVR_ATtiny2313A__)
 312               	#  include <avr/iotn2313a.h>
 313               	#elif defined (__AVR_ATtiny13__)
 314               	#  include <avr/iotn13.h>
 315               	#elif defined (__AVR_ATtiny13A__)
 316               	#  include <avr/iotn13a.h>
 317               	#elif defined (__AVR_ATtiny25__)
 318               	#  include <avr/iotn25.h>
 319               	#elif defined (__AVR_ATtiny4313__)
 320               	#  include <avr/iotn4313.h>
 321               	#elif defined (__AVR_ATtiny45__)
 322               	#  include <avr/iotn45.h>
 323               	#elif defined (__AVR_ATtiny85__)
 324               	#  include <avr/iotn85.h>
 325               	#elif defined (__AVR_ATtiny24__)
 326               	#  include <avr/iotn24.h>
 327               	#elif defined (__AVR_ATtiny24A__)
 328               	#  include <avr/iotn24a.h>
 329               	#elif defined (__AVR_ATtiny44__)
 330               	#  include <avr/iotn44.h>
 331               	#elif defined (__AVR_ATtiny44A__)
 332               	#  include <avr/iotn44a.h>
 333               	#elif defined (__AVR_ATtiny84__)
 334               	#  include <avr/iotn84.h>
 335               	#elif defined (__AVR_ATtiny261__)
 336               	#  include <avr/iotn261.h>
 337               	#elif defined (__AVR_ATtiny261A__)
 338               	#  include <avr/iotn261a.h>
 339               	#elif defined (__AVR_ATtiny461__)
 340               	#  include <avr/iotn461.h>
 341               	#elif defined (__AVR_ATtiny461A__)
 342               	#  include <avr/iotn461a.h>
 343               	#elif defined (__AVR_ATtiny861__)
 344               	#  include <avr/iotn861.h>
 345               	#elif defined (__AVR_ATtiny861A__)
 346               	#  include <avr/iotn861a.h>
 347               	#elif defined (__AVR_ATtiny43U__)
 348               	#  include <avr/iotn43u.h>
 349               	#elif defined (__AVR_ATtiny48__)
 350               	#  include <avr/iotn48.h>
 351               	#elif defined (__AVR_ATtiny88__)
 352               	#  include <avr/iotn88.h>
 353               	#elif defined (__AVR_ATtiny87__)
 354               	#  include <avr/iotn87.h>
 355               	#elif defined (__AVR_ATtiny167__)
 356               	#  include <avr/iotn167.h>
 357               	#elif defined (__AVR_AT90SCR100__)
 358               	#  include <avr/io90scr100.h>
 359               	#elif defined (__AVR_ATxmega16A4__)
 360               	#  include <avr/iox16a4.h>
 361               	#elif defined (__AVR_ATxmega16D4__)
 362               	#  include <avr/iox16d4.h>
 363               	#elif defined (__AVR_ATxmega32A4__)
 364               	#  include <avr/iox32a4.h>
 365               	#elif defined (__AVR_ATxmega32D4__)
 366               	#  include <avr/iox32d4.h>
 367               	#elif defined (__AVR_ATxmega64A1__)
 368               	#  include <avr/iox64a1.h>
 369               	#elif defined (__AVR_ATxmega64A3__)
 370               	#  include <avr/iox64a3.h>
 371               	#elif defined (__AVR_ATxmega64D3__)
 372               	#  include <avr/iox64d3.h>
 373               	#elif defined (__AVR_ATxmega128A1__)
 374               	#  include <avr/iox128a1.h>
 375               	#elif defined (__AVR_ATxmega128A3__)
 376               	#  include <avr/iox128a3.h>
 377               	#elif defined (__AVR_ATxmega128D3__)
 378               	#  include <avr/iox128d3.h>
 379               	#elif defined (__AVR_ATxmega192A3__)
 380               	#  include <avr/iox192a3.h>
 381               	#elif defined (__AVR_ATxmega192D3__)
 382               	#  include <avr/iox192d3.h>
 383               	#elif defined (__AVR_ATxmega256A3__)
 384               	#  include <avr/iox256a3.h>
 385               	#elif defined (__AVR_ATxmega256A3B__)
 386               	#  include <avr/iox256a3b.h>
 387               	#elif defined (__AVR_ATxmega256D3__)
 388               	#  include <avr/iox256d3.h>
 389               	#elif defined (__AVR_ATA6289__)
 390               	#  include <avr/ioa6289.h>
 391               	/* avr1: the following only supported for assembler programs */
 392               	#elif defined (__AVR_ATtiny28__)
 393               	#  include <avr/iotn28.h>
 394               	#elif defined (__AVR_AT90S1200__)
 395               	#  include <avr/io1200.h>
 396               	#elif defined (__AVR_ATtiny15__)
 397               	#  include <avr/iotn15.h>
 398               	#elif defined (__AVR_ATtiny12__)
 399               	#  include <avr/iotn12.h>
 400               	#elif defined (__AVR_ATtiny11__)
 401               	#  include <avr/iotn11.h>
 402               	#else
 403               	#  if !defined(__COMPILING_AVR_LIBC__)
 404               	#    warning "device type not defined"
 405               	#  endif
 406               	#endif
 407               	
 408               	#include <avr/portpins.h>
   1               	/* Copyright (c) 2003  Theodore A. Roth
 409               	
 410               	#include <avr/common.h>
   1               	/* Copyright (c) 2007 Eric B. Weddington
 411               	
 412               	#include <avr/version.h>
   1               	/* Copyright (c) 2005, Joerg Wunsch                               -*- c -*-
 413               	
 414               	/* Include fuse.h after individual IO header files. */
 415               	#include <avr/fuse.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 416               	
 417               	/* Include lock.h after individual IO header files. */
 418               	#include <avr/lock.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 419               	
  13               	#include <avr/interrupt.h>
   1               	/* Copyright (c) 2002,2005,2007 Marek Michalkiewicz
  14               	#include "kernel.h"
   1               	
  15               	#include "debug.h"
   1               	
  16               	
  17               	
  18               	
  19               	
  20               	;;============================define user address or macro starting=========================;; 
  21               	.equ     KER_TR ,         1000                            ;TickRate in Hz, not calculated      
  22               	.equ     KER_PRS,         0x03                            ;For prescaler 64, manually select   
  23               	.equ     KER_RLD,         0x82                            ;KER_RLD=0xFF-(F_CPU/KER_PRS/KER_TR) 
  24               	.equ     KER_STK_SZ,      128                             ;stack size in bytes for each task   
  25               	.equ     KER_MX_NTSK,     10                              ;max number of tasks                 
  26               	;;==============================define user address or macro end============================;; 
  27               	
  28               	
  29               	
  30               	
  31               	
  32               	;;===============================define data offsets starting===============================;; 
  33               	.equ     OFB_TICK0,       0x00                            ;offset from KerBase tick count byte0
  34               	.equ     OFB_TICK1,       0x01                            ;offset from KerBase tick count byte1
  35               	.equ     OFB_TICK2,       0x02                            ;offset from KerBase tick count byte2
  36               	.equ     OFB_TICK3,       0x03                            ;offset from KerBase tick count byte3
  37               	.equ     OFB_TICK4,       0x04                            ;offset from KerBase tick count byte4
  38               	.equ     OFB_PRS  ,       0x05                            ;offset from KerBase prescaler       
  39               	.equ     OFB_RLD  ,       0x06                            ;offset from KerBase counter reload  
  40               	.equ     OFB_TID  ,       0x07                            ;offset from KerBase task id         
  41               	.equ     OFB_NTSK ,       0x08                            ;offset from KerBase ntask           
  42               	.equ     OFB_LPR  ,       0x09                            ;offset from KerBase lowest priority 
  43               	.equ     OFB_PTID ,       0x0A                            ;offset from KerBase prio task_id    
  44               	.equ     OFB_UTC  ,       0x0B                            ;offset from KerBase usage tick cnt  
  45               	.equ     OFB_UATC ,       0x0C                            ;offset from KerBase active tick cnt 
  46               	.equ     OFB_USAGE,       0x0D                            ;offset from KerBase cpu usage       
  47               	.equ     OFB_SLCFG,       0x0E                            ;offset from KerBase sleep config    
  48               	.equ     OFM_MSPI ,       0x00                            ;offset from MSPZP msp index field   
  49               	.equ     OFM_MSPS ,       0x02                            ;offset from MSPZP msp starting      
  50               	;;==================================define data offsets end=================================;; 
  51               	
  52               	
  53               	
  54               	
  55               	
  56               	;;===============================define system macro starting===============================;; 
  57               	.equ     TASK_BLOCKED,    0x00                            ;KerSchSts val=0                     
  58               	.equ     TASK_READY,      0x01                            ;KerSchSts val=1                     
  59               	.equ     TASK_EXECUTING,  0x02                            ;KerSchSts val=2                     
  60               	.equ     TASK_SUSPENDED,  0x03                            ;KerSchSts val=3                     
  61               	.equ     TASK_CONS_LAT,   0x04                            ;KerSchSts val=3, constant latency   
  62               	.equ     SCH_MODE_HANDLER,0x00                            ;handler mode in KER_SLP_TIME_MGNT   
  63               	.equ     SCH_MODE_THREAD, 0x01                            ;thread mode in KER_SLP_TIME_MGNT    
  64               	;;==================================define system macro end=================================;; 
  65               	
  66               	
  67               	
  68               	
  69               	
  70               	;;===========================define hardware reg address starting===========================;; 
  71               	;SRAM Mapped Addresses, LDS/STS can be used                                                    
  72               	.equ     SRADMUX ,        0x7C                            ;manually defined ADMUX in SRAM      
  73               	.equ     SRADCSRB,        0x7B                            ;manually defined ADCSRB in SRAM     
  74               	.equ     SRADCSRA,        0x7A                            ;manually defined ADCSRA in SRAM     
  75               	.equ     SRTIMSK0,        0x6E                            ;manually defined TIMSK0 in SRAM     
  76               	.equ     SRWDTCSR,        0x60                            ;manually defined WDTCSR in SRAM     
  77               	.equ     SRSREG  ,        0x5F                            ;manually defined SREG in SRAM       
  78               	.equ     SRSPH   ,        0x5E                            ;manually defined SPH in SRAM        
  79               	.equ     SRSPL   ,        0x5D                            ;manually defined SPL in SRAM        
  80               	.equ     SRMCUCR ,        0x55                            ;manually defined MCUCR in SRAM      
  81               	.equ     SRMCUSR ,        0x54                            ;manually defined MCUSR in SRAM      
  82               	.equ     SRSMCR  ,        0x53                            ;manually defined SMCR in SRAM       
  83               	.equ     SRACSR  ,        0x50                            ;manually defined ACSR in SRAM       
  84               	.equ     SROCR0B ,        0x48                            ;manually defined OCR0B in SRAM      
  85               	.equ     SROCR0A ,        0x47                            ;manually defined OCR0A in SRAM      
  86               	.equ     SRTCNT0 ,        0x46                            ;manually defined TCNT0 in SRAM      
  87               	.equ     SRTCCR0B,        0x45                            ;manually defined TCCR0B in SRAM     
  88               	.equ     SRTCCR0A,        0x44                            ;manually defined TCCR0A in SRAM     
  89               	.equ     SRTIFR0 ,        0x35                            ;manually defined TIFR0 in SRAM      
  90               	;IO Mapped Addresses, IN/OUT commands can be used                                              
  91               	.equ     IOSREG  ,        0x3F                            ;manually defined SREG in IO         
  92               	.equ     IOSPH   ,        0x3E                            ;manually defined SPH in IO          
  93               	.equ     IOSPL   ,        0x3D                            ;manually defined SPL in IO          
  94               	.equ     IOMCUCR ,        0x35                            ;manually defined MCUCR in IO        
  95               	.equ     IOMCUSR ,        0x34                            ;manually defined MCUSR in IO        
  96               	.equ     IOSMCR  ,        0x33                            ;manually defined SMCR in IO         
  97               	.equ     IOOCR0B ,        0x28                            ;manually defined OCR0B in IO        
  98               	.equ     IOOCR0A ,        0x27                            ;manually defined OCR0A in IO        
  99               	.equ     IOTCNT0 ,        0x26                            ;manually defined TCNT0 in IO        
 100               	.equ     IOTCCR0B,        0x25                            ;manually defined TCCR0B in IO       
 101               	.equ     IOTCCR0A,        0x24                            ;manually defined TCCR0A in IO       
 102               	.equ     IOTIFR0 ,        0x15                            ;manually defined TIFR0 in IO        
 103               	;;==============================define hardware reg address end=============================;; 
 104               	
 105               	
 106               	
 107               	
 108               	
 109               	;;=============================define global variables starting=============================;; 
 110               	.section   .bss                                                                                
 111               	                                                                                               
 112               	.global    KerBase                                        ;declare global space for kernel     
 113 0000 0000 0000 	KerBase:   .skip 16                                       ;see offset section                  
 113      0000 0000 
 113      0000 0000 
 113      0000 0000 
 114               	                                                                                               
 115               	.global    KerPSP                                         ;space for process stack pointers    
 116 0010 0000 0000 	KerPSP:    .skip KER_MX_NTSK*2                            ;2 bytes for each task               
 116      0000 0000 
 116      0000 0000 
 116      0000 0000 
 116      0000 0000 
 117               	                                                                                               
 118               	.global    KerSSZ                                         ;stack for main stack pointers       
 119 0024 0000 0000 	KerSSZ:    .skip 14                                       ;stack_ptr(2), MSPZPn(4)             
 119      0000 0000 
 119      0000 0000 
 119      0000 
 120               	                                                                                               
 121               	.global    KerSchSts                                      ;space for scheduler status          
 122 0032 0000 0000 	KerSchSts: .skip KER_MX_NTSK*1                            ;status(1)                           
 122      0000 0000 
 122      0000 
 123               	                                                                                               
 124               	.global    KerSchPr                                       ;space for scheduler priority        
 125 003c 0000 0000 	KerSchPr:  .skip KER_MX_NTSK*1                            ;priority(1)                         
 125      0000 0000 
 125      0000 
 126               	                                                                                               
 127               	.global    KerSchSlp                                      ;space for task sleep                
 128 0046 0000 0000 	KerSchSlp: .skip KER_MX_NTSK*2                            ;timing(2)                           
 128      0000 0000 
 128      0000 0000 
 128      0000 0000 
 128      0000 0000 
 129               	                                                                                               
 130               	.global    KerStack                                       ;space for stack                     
 131 005a 0000 0000 	KerStack:  .skip KER_STK_SZ*KER_MX_NTSK                   ;KER_STK_SZ bytes for each task      
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 131      0000 0000 
 132               	;;==============================define global variables end=================================;; 
 133               	
 134               	
 135               	
 136               	
 137               	
 138               	;;===============================define vector section starting=============================;; 
 139               	.section .vectors, "ax", @progbits                                                             
 140               	                                                                                               
 141 0000 0000 0000 	.org    0x000C                                            ;isr location for wdt                
 141      0000 0000 
 141      0000 0000 
 142:kernel.S      ****         RJMP  __vector_6                                                                       
 143 000e 0000 0000 	.org    0x0020                                            ;isr location for timer0ovf          
 143      0000 0000 
 143      0000 0000 
 143      0000 0000 
 143      0000 
 144:kernel.S      ****         RJMP  __vector_16                                                                      
 145               	;;=================================define vector section end================================;; 
 146               	
 147               	
 148               	
 149               	
 150               	
 151               	;;===============================define text section starting===============================;; 
 152               	.section .text                                                                                 
 153               	;;==================================define text section end=================================;; 
 154               	
 155               	
 156               	
 157               	
 158               	
 159               	;;==============================define global functions starting============================;; 
 160               	.global  Kernel_SysTick_Reg_Init                                                               
 161               	.global  Kernel_SysTick_Val_Get                                                                
 162               	.global  Kernel_SysTick_Val_Safely_Get                                                         
 163               	.global  Kernel_Interrupt_Sts_Get                                                              
 164               	.global  Kernel_Init                                                                           
 165               	.global  Kernel_Task_Create                                                                    
 166               	.global  Kernel_Start_Tasks                                                                    
 167               	.global  Kernel_Task_Idle                                                                      
 168               	.global  Kernel_Task_Sleep                                                                     
 169               	.global  Kernel_Task_Constant_Latency                                                          
 170               	.global  Kernel_Task_Constant_Latency_Sleep                                                    
 171               	.global  Kernel_Task_Sleep_Time_Get                                                            
 172               	.global  Kernel_Task_Status_Get                                                                
 173               	.global  Kernel_NTask_Get                                                                      
 174               	.global  Kernel_Task_Prio_Get                                                                  
 175               	.global  Kernel_Lowest_Prio_Get                                                                
 176               	.global  Kernel_High_Prio_Task_ID_Get                                                          
 177               	.global  Kernel_Abs_High_Prio_Task_ID_Get                                                      
 178               	.global  Kernel_CPU_Usage_Get                                                                  
 179               	;;================================define global functions end===============================;; 
 180               	
 181               	
 182               	
 183               	
 184               	
 185               	;;============================debug pin operation init starting=============================;; 
 186               	;used registers          : R18, R19                                                            
 187               	;arg registers           : None                                                                
 188               	;return registers        : None                                                                
 189               	;unsafe access registers : R18, R19                                                            
 190               	.macro  KER_TIMER_INIT                                    ;1.25/1.50uS @8MHz    (10/12 clocks) 
 191               	        #ifdef KER_TIMER0_AS_TICK_SRC                                                          
 192               			;Timer0 overflow vect is used as tick source      ;total 1.5uS @8MHz      ( 12 clocks) 
 193               	        LDS   R18		         , KerBase+OFB_PRS        ;load prescaler         (  2 clocks) 
 194               			LDS   R19		         , KerBase+OFB_RLD        ;load reload val        (  2 clocks) 
 195               			STS   SRTCCR0B           , R18                    ;prescaler-> TCCR0B     (  2 clocks) 
 196               			STS   SRTCNT0            , R19                    ;reload val-> TCNT0     (  2 clocks) 
 197               			LDI   R18                , 0x01                   ;bit mask TOIE0         (  1 clock ) 
 198               			STS   SRTIMSK0           , R18                    ;set to TIMSK0          (  2 clocks) 
 199               			SEI                                               ;force enable interrupt (  1 clock ) 
 200               			#endif                                                                                 
 201               			                                                                                       
 202               			#ifdef KER_WDT_AS_TICK_SRC                                                             
 203               			;watchdog timer timeout is used as tick source    ;total 1.5uS @8MHz      ( 10 clocks) 
 204               	        WDR                                               ;reset wdt              (  1 clock ) 
 205               			LDS   R18                , SRWDTCSR               ;copy WDTCSR            (  2 clocks) 
 206               			ORI   R18                , 0x18                   ;set WDCE,WDE           (  1 clock ) 
 207               			STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
 208               			                                                                                       
 209               			#ifdef KER_WDT_TICK_16MS                                                               
 210               			LDI   R18                , 0x40                   ;WDIE                   (  1 clock ) 
 211               			#endif                                                                                 
 212               			                                                                                       
 213               	        #ifdef KER_WDT_TICK_32MS                                                               
 214               			LDI   R18                , 0x41                   ;WDIE, WDPS0            (  1 clock ) 
 215               			#endif                                                                                 
 216               			                                                                                       
 217               			#ifdef KER_WDT_TICK_64MS                                                               
 218               			LDI   R18                , 0x42                   ;WDIE, WDPS1            (  1 clock ) 
 219               			#endif                                                                                 
 220               			                                                                                       
 221               			#ifdef KER_WDT_TICK_125MS                                                              
 222               			LDI   R18                , 0x43                   ;WDIE, WDPS1, WDPS2     (  1 clock ) 
 223               			#endif                                                                                 
 224               			                                                                                       
 225               			#ifdef KER_WDT_TICK_250MS                                                              
 226               			LDI   R18                , 0x44                   ;WDIE, WDPS1, WDPS2     (  1 clock ) 
 227               			#endif                                                                                 
 228               			                                                                                       
 229               			#ifdef KER_WDT_TICK_500MS                                                              
 230               			LDI   R18                , 0x45                   ;WDIE, WDPS1, WDPS2     (  1 clock ) 
 231               			#endif                                                                                 
 232               			                                                                                       
 233               			#ifdef KER_WDT_TICK_1000MS                                                             
 234               			LDI   R18                , 0x46                   ;WDIE, WDPS1, WDPS2     (  1 clock ) 
 235               			#endif                                                                                 
 236               			                                                                                       
 237               			STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
 238               			SEI                                               ;force enable interrupt (  1 clock ) 
 239               			#endif                                                                                 
 240               	.endm                                                                                          
 241               	;;==============================debug pin operation init end================================;; 
 242               	
 243               	
 244               	
 245               	
 246               	
 247               	;;============================debug pin operation init starting=============================;; 
 248               	;used registers          : None                                                                
 249               	;arg registers           : None                                                                
 250               	;return registers        : None                                                                
 251               	;unsafe access registers : None                                                                
 252               	.macro  KER_DEBUG_PIN_INIT                                ;total 0.5uS @8MHz      (  4 clocks) 
 253               	        #ifdef KER_DBG_ENABLE                                                                  
 254               			CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear port bit         (  2 clocks) 
 255               			SBI   KER_DBG_DDR        , KER_DBG_PIN            ;set bit in DDR         (  2 clocks) 
 256               			#endif                                                                                 
 257               	.endm                                                                                          
 258               	;;==============================debug pin operation init end================================;; 
 259               	
 260               	
 261               	
 262               	
 263               	
 264               	;;===========================debug pin operation set starting===============================;; 
 265               	;used registers          : None                                                                
 266               	;arg registers           : None                                                                
 267               	;return registers        : None                                                                
 268               	;unsafe access registers : None                                                                
 269               	.macro  KER_DEBUG_PIN_SET                                 ;total 0.25uS @8MHz     (  2 clocks) 
 270               	        #ifdef KER_DBG_ENABLE                                                                  
 271               	        SBI   KER_DBG_PORT       , KER_DBG_PIN            ;set gpio               (  2 clocks) 
 272               			#endif                                                                                 
 273               	.endm                                                                                          
 274               	;;==============================debug pin operation set end=================================;; 
 275               	
 276               	
 277               	
 278               	
 279               	
 280               	;;===========================debug pin operation clear starting=============================;; 
 281               	;used registers          : None                                                                
 282               	;arg registers           : None                                                                
 283               	;return registers        : None                                                                
 284               	;unsafe access registers : None                                                                
 285               	.macro  KER_DEBUG_PIN_CLEAR                               ;total 0.25uS @8MHz     (  2 clocks) 
 286               	        #ifdef KER_DBG_ENABLE                                                                  
 287               			CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear gpio             (  2 clocks) 
 288               			#endif                                                                                 
 289               	.endm                                                                                          
 290               	;;==============================debug pin operation clear end===============================;; 
 291               	
 292               	
 293               	
 294               	
 295               	
 296               	;;==============================reload counter value starting===============================;; 
 297               	;used registers          : R18                                                                 
 298               	;arg registers           : None                                                                
 299               	;return registers        : None                                                                
 300               	;unsafe access registers : R18                                                                 
 301               	.macro  KER_COUNTER_RELOAD                                ;total 0.5uS @8MHz      (  4 clocks) 
 302               	        LDS   R18                , KerBase+OFB_RLD        ;load reload value      (  2 clocks) 
 303               			STS   SRTCNT0            , R18                    ;Set value to TCNT0     (  2 clocks) 
 304               	.endm                                                                                          
 305               	;;=================================reload counter value end=================================;; 
 306               	
 307               	
 308               	
 309               	
 310               	
 311               	;;=================================save r0 & sreg starting==================================;; 
 312               	;used registers          : R0                                                                  
 313               	;arg registers           : None                                                                
 314               	;return registers        : None                                                                
 315               	;unsafe access registers : None                                                                
 316               	.macro  KER_SAVE_R0_SREG                                  ;total 0.63uS @8MHz     (  5 clocks) 
 317               	        PUSH  R0                                          ;save R0                (  2 clocks) 
 318               			IN    R0                 , IOSREG                 ;load SREG              (  1 clock ) 
 319               			PUSH  R0                                          ;save SREG              (  2 clocks) 
 320               	.endm                                                                                          
 321               	;;====================================save r0 & sreg end====================================;; 
 322               	
 323               	
 324               	
 325               	
 326               	
 327               	;;===============================save r0, sreg & cli starting===============================;; 
 328               	;used registers          : R0                                                                  
 329               	;arg registers           : None                                                                
 330               	;return registers        : None                                                                
 331               	;unsafe access registers : None                                                                
 332               	.macro  KER_SAVE_R0_CLI_SREG                              ;total 0.75uS @8MHz     (  6 clocks) 
 333               	        PUSH  R0                                          ;push R0                (  2 clocks) 
 334               			IN    R0                 , IOSREG                 ;save SREG              (  1 clock ) 
 335               			CLI                                               ;clear interrupt        (  1 clock ) 
 336               			PUSH  R0                                          ;save SREG              (  2 clocks) 
 337               	.endm                                                                                          
 338               	;;=================================save r0, sreg & cli end==================================;; 
 339               	
 340               	
 341               	
 342               	
 343               	
 344               	;;===================================save r1~r31 starting===================================;; 
 345               	;used registers          : R1~R31                                                              
 346               	;arg registers           : None                                                                
 347               	;return registers        : None                                                                
 348               	;unsafe access registers : None                                                                
 349               	.macro  KER_SAVE_R1_R31                                   ;total 7.88uS @8MHz     ( 63 clocks) 
 350               			PUSH  R1                                          ;save R1                (  2 clocks) 
 351               			CLR   R1                                          ;clear R1               (  1 clock ) 
 352               			PUSH  R2                                          ;save R2                (  2 clocks) 
 353               			PUSH  R3                                          ;save R3                (  2 clocks) 
 354               			PUSH  R4                                          ;save R4                (  2 clocks) 
 355               			PUSH  R5                                          ;save R5                (  2 clocks) 
 356               			PUSH  R6                                          ;save R6                (  2 clocks) 
 357               			PUSH  R7                                          ;save R7                (  2 clocks) 
 358               			PUSH  R8                                          ;save R8                (  2 clocks) 
 359               			PUSH  R9                                          ;save R9                (  2 clocks) 
 360               			PUSH  R10                                         ;save R10               (  2 clocks) 
 361               			PUSH  R11                                         ;save R11               (  2 clocks) 
 362               			PUSH  R12                                         ;save R12               (  2 clocks) 
 363               			PUSH  R13                                         ;save R13               (  2 clocks) 
 364               			PUSH  R14                                         ;save R14               (  2 clocks) 
 365               			PUSH  R15                                         ;save R15               (  2 clocks) 
 366               			PUSH  R16                                         ;save R16               (  2 clocks) 
 367               			PUSH  R17                                         ;save R17               (  2 clocks) 
 368               			PUSH  R18                                         ;save R18               (  2 clocks) 
 369               			PUSH  R19                                         ;save R19               (  2 clocks) 
 370               			PUSH  R20                                         ;save R20               (  2 clocks) 
 371               			PUSH  R21                                         ;save R21               (  2 clocks) 
 372               			PUSH  R22                                         ;save R22               (  2 clocks) 
 373               			PUSH  R23                                         ;save R23               (  2 clocks) 
 374               			PUSH  R24                                         ;save R24               (  2 clocks) 
 375               			PUSH  R25                                         ;save R25               (  2 clocks) 
 376               			PUSH  R26                                         ;save R26               (  2 clocks) 
 377               			PUSH  R27                                         ;save R27               (  2 clocks) 
 378               			PUSH  R28                                         ;save R28               (  2 clocks) 
 379               			PUSH  R29                                         ;save R29               (  2 clocks) 
 380               			PUSH  R30                                         ;save R30               (  2 clocks) 
 381               			PUSH  R31                                         ;save R31               (  2 clocks) 
 382               	.endm                                                                                          
 383               	;;======================================save r1~r31 end=====================================;; 
 384               	
 385               	
 386               	
 387               	
 388               	
 389               	;;==============================context save handler starting===============================;; 
 390               	;used registers          : R0~R31                                                              
 391               	;arg registers           : None                                                                
 392               	;return registers        : None                                                                
 393               	;unsafe access registers : None                                                                
 394               	.macro  KER_CONTEXT_SAVE_HANDLER                          ;total 8.5uS @8MHz      ( 68 clocks) 
 395               	        KER_SAVE_R0_SREG                                  ;save r0, sreg          (  5 clocks) 
 396               	        KER_SAVE_R1_R31                                   ;save r1~r31            ( 63 clocks) 
 397               	.endm                                                                                          
 398               	;;=================================context save handler end=================================;; 
 399               	
 400               	
 401               	
 402               	
 403               	
 404               	;;===============================context save thread starting===============================;; 
 405               	;used registers          : R0~R31                                                              
 406               	;arg registers           : None                                                                
 407               	;return registers        : None                                                                
 408               	;unsafe access registers : None                                                                
 409               	.macro  KER_CONTEXT_SAVE_THREAD                           ;total 8.63uS @8MHz     ( 69 clocks) 
 410               	        KER_SAVE_R0_CLI_SREG                              ;save r0, sreg          (  6 clocks) 
 411               	        KER_SAVE_R1_R31                                   ;save r1~r31            ( 63 clocks) 
 412               	.endm                                                                                          
 413               	;;==================================context save thread end=================================;; 
 414               	
 415               	
 416               	
 417               	
 418               	
 419               	
 420               	;;================================restore r0 & sreg starting================================;; 
 421               	;used registers          : R0                                                                  
 422               	;arg registers           : None                                                                
 423               	;return registers        : None                                                                
 424               	;unsafe access registers : None                                                                
 425               	.macro  KER_RESTORE_R0_SREG                               ;total 0.63uS @8MHz     (  5 clocks) 
 426               	        POP   R0                                          ;fetch SREG             (  2 clocks) 
 427               			OUT   IOSREG             , R0                     ;load SREG              (  1 clock ) 
 428               			POP   R0                                          ;restore R0             (  2 clocks) 
 429               	.endm                                                                                          
 430               	;;==================================restore r0 & sreg end===================================;; 
 431               	
 432               	
 433               	
 434               	
 435               	
 436               	;;==============================restore r0, sreg & sei starting=============================;; 
 437               	;used registers          : R0                                                                  
 438               	;arg registers           : None                                                                
 439               	;return registers        : None                                                                
 440               	;unsafe access registers : None                                                                
 441               	.macro  KER_RESTORE_R0_SREG_SEI                           ;total 0.75uS @8MHz     (  6 clocks) 
 442               	        POP   R0                                          ;fetch SREG             (  2 clocks) 
 443               			OUT   IOSREG             , R0                     ;load SREG              (  1 clock ) 
 444               			POP   R0                                          ;restore R0             (  2 clocks) 
 445               			SEI                                               ;enable interrupt       (  1 clock ) 
 446               	.endm                                                                                          
 447               	;;===============================restore r0, sreg & sei end=================================;; 
 448               	
 449               	
 450               	
 451               	
 452               	
 453               	;;=================================restore r1~r31 starting==================================;; 
 454               	;used registers          : R1~R31                                                              
 455               	;arg registers           : None                                                                
 456               	;return registers        : None                                                                
 457               	;unsafe access registers : None                                                                
 458               	.macro  KER_RESTORE_R1_R31                                ;total 8.38uS @8MHz     ( 62 clocks) 
 459               			POP   R31                                         ;restore R31            (  2 clocks) 
 460               			POP   R30                                         ;restore R30            (  2 clocks) 
 461               			POP   R29                                         ;restore R29            (  2 clocks) 
 462               			POP   R28                                         ;restore R28            (  2 clocks) 
 463               			POP   R27                                         ;restore R27            (  2 clocks) 
 464               			POP   R26                                         ;restore R26            (  2 clocks) 
 465               			POP   R25                                         ;restore R25            (  2 clocks) 
 466               			POP   R24                                         ;restore R24            (  2 clocks) 
 467               			POP   R23                                         ;restore R23            (  2 clocks) 
 468               			POP   R22                                         ;restore R22            (  2 clocks) 
 469               			POP   R21                                         ;restore R21            (  2 clocks) 
 470               			POP   R20                                         ;restore R20            (  2 clocks) 
 471               			POP   R19                                         ;restore R19            (  2 clocks) 
 472               			POP   R18                                         ;restore R18            (  2 clocks) 
 473               			POP   R17                                         ;restore R17            (  2 clocks) 
 474               			POP   R16                                         ;restore R16            (  2 clocks) 
 475               			POP   R15                                         ;restore R15            (  2 clocks) 
 476               			POP   R14                                         ;restore R14            (  2 clocks) 
 477               			POP   R13                                         ;restore R13            (  2 clocks) 
 478               			POP   R12                                         ;restore R12            (  2 clocks) 
 479               			POP   R11                                         ;restore R11            (  2 clocks) 
 480               			POP   R10                                         ;restore R10            (  2 clocks) 
 481               			POP   R9                                          ;restore R9             (  2 clocks) 
 482               			POP   R8                                          ;restore R8             (  2 clocks) 
 483               			POP   R7                                          ;restore R7             (  2 clocks) 
 484               			POP   R6                                          ;restore R6             (  2 clocks) 
 485               			POP   R5                                          ;restore R5             (  2 clocks) 
 486               			POP   R4                                          ;restore R4             (  2 clocks) 
 487               			POP   R3                                          ;restore R3             (  2 clocks) 
 488               			POP   R2                                          ;restore R2             (  2 clocks) 
 489               			POP   R1                                          ;restore R1             (  2 clocks) 
 490               	.endm                                                                                          
 491               	;;====================================restore r1~r31 end====================================;; 
 492               	
 493               	
 494               	
 495               	
 496               	
 497               	;;=============================context restore handler starting=============================;; 
 498               	;used registers          : R0~R31                                                              
 499               	;arg registers           : None                                                                
 500               	;return registers        : None                                                                
 501               	;unsafe access registers : None                                                                
 502               	.macro  KER_CONTEXT_RESTORE_HANDLER                       ;total 8.38uS @8MHz     ( 67 clocks) 
 503               	        KER_RESTORE_R1_R31                                ;restore r1~r31         ( 62 clocks) 
 504               			KER_RESTORE_R0_SREG                               ;restore r0, sreg       (  5 clocks) 
 505               	.endm                                                                                          
 506               	;;===============================context restore handler end================================;; 
 507               	
 508               	
 509               	
 510               	
 511               	
 512               	;;=============================context restore thread starting==============================;; 
 513               	;used registers          : R0~R31                                                              
 514               	;arg registers           : None                                                                
 515               	;return registers        : None                                                                
 516               	;unsafe access registers : None                                                                
 517               	.macro  KER_CONTEXT_RESTORE_THREAD                        ;total 8.75uS @8MHz     ( 68 clocks) 
 518               	        KER_RESTORE_R1_R31                                ;restore r1~r31         ( 62 clocks) 
 519               			KER_RESTORE_R0_SREG_SEI                           ;restore r0, sreg       (  6 clocks) 
 520               	.endm                                                                                          
 521               	;;================================context restore thread end================================;; 
 522               	
 523               	
 524               	
 525               	
 526               	
 527               	;;==============================fetch current task id starting==============================;; 
 528               	;used registers          : R20                                                                 
 529               	;arg registers           : None                                                                
 530               	;return registers        : R20 (Current task id)                                               
 531               	;unsafe access registers : R20                                                                 
 532               	.macro  KER_FETCH_CURR_TID                                ;total 0.25uS @8MHz     (  2 clocks) 
 533               	        LDS   R20                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 534               	.endm                                                                                          
 535               	;;================================fetch current task id end=================================;; 
 536               	
 537               	
 538               	
 539               	
 540               	
 541               	;;==================================fetch ntask starting====================================;; 
 542               	;used registers          : R21                                                                 
 543               	;arg registers           : None                                                                
 544               	;return registers        : R21 (ntask)                                                         
 545               	;unsafe access registers : R21                                                                 
 546               	.macro  KER_FETCH_NTASK                                   ;total 0.25uS @8MHz     (  2 clocks) 
 547               	        LDS   R21                , KerBase+OFB_NTSK       ;fetch task_id          (  2 clocks) 
 548               	.endm                                                                                          
 549               	;;====================================fetch ntask end=======================================;; 
 550               	
 551               	
 552               	
 553               	
 554               	
 555               	;;=========================calculate offset addr in words starting==========================;; 
 556               	;used registers          : R18, R30(ZL), R31(ZH)                                               
 557               	;arg registers           : R30(ZL), R31(ZH)                                                    
 558               	;return registers        : R30(ZL), R31(ZH)                                                    
 559               	;unsafe access registers : R18, R30(ZL), R31(ZH)                                               
 560               	.macro  KER_CALC_ADDR_OFF_WORD                            ;total 0.75uS @8MHz     (  6 clocks) 
 561               	        LDS   R18                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 562               			LSL   R18                                         ;left shift to multiply (  1 clock ) 
 563               			ADD   ZL                 , R18                    ;add offset to array    (  1 clock ) 
 564               			LDI   R18                , 0x00                   ;clear for carry prop   (  1 clock ) 
 565               			ADC   ZH                 , R18                    ;add carry if any       (  1 clock ) 
 566               	.endm                                                                                          
 567               	;;=============================calculate offset addr in words end===========================;; 
 568               	
 569               	
 570               	
 571               	
 572               	
 573               	;;=========================calculate offset addr in bytes starting==========================;; 
 574               	;used registers          : R18, R30(ZL), R31(ZH)                                               
 575               	;arg registers           : R30(ZL), R31(ZH)                                                    
 576               	;return registers        : R30(ZL), R31(ZH)                                                    
 577               	;unsafe access registers : R18, R30(ZL), R31(ZH)                                               
 578               	.macro  KER_CALC_ADDR_OFF_BYTES                           ;total 0.63uS @8MHz     (  5 clocks) 
 579               	        LDS   R18                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 580               			ADD   ZL                 , R18                    ;add offset to array    (  1 clock ) 
 581               			LDI   R18                , 0x00                   ;clear for carry prop   (  1 clock ) 
 582               			ADC   ZH                 , R18                    ;add carry if any       (  1 clock ) 
 583               	.endm                                                                                          
 584               	;;=============================calculate offset addr in bytes end===========================;; 
 585               	
 586               	
 587               	
 588               	
 589               	
 590               	;;===============================save current task sp starting==============================;; 
 591               	;used registers          : R18, R19, R30(ZL), R31(ZH)                                          
 592               	;arg registers           : None                                                                
 593               	;return registers        : None                                                                
 594               	;unsafe access registers : R18, R19, R30(ZL), R31(ZH)                                          
 595               	.macro  KER_SAVE_CURR_TASK_SP                             ;total 1.75uS @8MHz     ( 14 clocks) 
 596               			LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 597               			LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 598               			KER_CALC_ADDR_OFF_WORD                            ;calc offset            (  6 clocks) 
 599               			IN    R18                , IOSPL                  ;fetch SPL0             (  1 clock ) 
 600               			IN    R19                , IOSPH                  ;fetch SPH0             (  1 clock ) 
 601               			STD   Z+0                , R18                    ;store SPL at ZP+0      (  2 clocks) 
 602               			STD   Z+1                , R19                    ;store SPH at ZP+1      (  2 clocks) 
 603               	.endm                                                                                          
 604               	;;================================save current task sp end==================================;; 
 605               	
 606               	
 607               	
 608               	
 609               	
 610               	;;==============================load next task id starting==================================;; 
 611               	;used registers          : R18, R19                                                            
 612               	;arg registers           : None                                                                
 613               	;return registers        : None                                                                
 614               	;unsafe access registers : R18, R19                                                            
 615               	.macro  KER_LOAD_NEXT_TASK_ID                             ;total 1.63uS @8MHz     ( 13 clocks) 
 616               			LDS   R18                , KerBase+OFB_TID        ;fetch task_id          (  2 clocks) 
 617               			INC   R18                                         ;increment task_id      (  1 clock ) 
 618               			LDS   R19                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 619               		_MOD_CONT\@:                                          ;use local label                     
 620               		    CP    R18                , R19                    ;compare tid with ntask (  1 clock ) 
 621               			BRLO  _MOD_DONE\@                                 ;if tid<ntask, done     (  2 clocks) 
 622               			SUB   R18                , R19                    ;subtract ntask from tid(  1 clock ) 
 623               			RJMP  _MOD_CONT\@                                 ;go to loop start       (  2 clocks) 
 624               		_MOD_DONE\@:                                          ;use local label                     
 625               		    STS   KerBase+OFB_TID    , R18                    ;save task_id%ntask     (  2 clocks) 
 626               	.endm                                                                                          
 627               	;;=================================load next task id end====================================;; 
 628               	
 629               	
 630               	
 631               	
 632               	
 633               	;;==============================increment tick counter starting=============================;; 
 634               	;used registers          : R18, R19                                                            
 635               	;arg registers           : None                                                                
 636               	;return registers        : None                                                                
 637               	;unsafe access registers : R18, R19                                                            
 638               	.macro  KER_TICK_INCREMENT                                ;total 3.25uS @8MHz     ( 26 clocks) 
 639               			LDS   R18                , KerBase+OFB_TICK0      ;load Byte0             (  2 clocks) 
 640               			INC   R18                                         ;add 1 with Byte0       (  1 clock ) 
 641               			STS   KerBase+OFB_TICK0  , R18                    ;set Byte0              (  2 clocks) 
 642               			LDI   R19                , 0x00                   ;clear reg              (  1 clock ) 
 643               			LDS   R18                , KerBase+OFB_TICK1      ;load Byte1             (  2 clocks) 
 644               			ADC   R18                , R19                    ;add carry with Byte1   (  1 clock ) 
 645               			STS   KerBase+OFB_TICK1  , R18                    ;set Byte1              (  2 clocks) 
 646               			LDS   R18                , KerBase+OFB_TICK2      ;load Byte2             (  2 clocks) 
 647               			ADC   R18                , R19                    ;add carry with Byte2   (  1 clock ) 
 648               			STS   KerBase+OFB_TICK2  , R18                    ;set Byte2              (  2 clocks) 
 649               			LDS   R18                , KerBase+OFB_TICK3      ;load Byte3             (  2 clocks) 
 650               			ADC   R18                , R19                    ;add carry with Byte3   (  1 clock ) 
 651               			STS   KerBase+OFB_TICK3  , R18                    ;set Byte3              (  2 clocks) 
 652               			LDS   R18                , KerBase+OFB_TICK4      ;load Byte4             (  2 clocks) 
 653               			ADC   R18                , R19                    ;add carry with Byte4   (  1 clock ) 
 654               			STS   KerBase+OFB_TICK4  , R18                    ;set Byte4              (  2 clocks) 
 655               	.endm                                                                                          
 656               	;;=================================increment tick counter end===============================;; 
 657               	
 658               	
 659               	
 660               	
 661               	
 662               	;;==============================load task id & sp starting==================================;; 
 663               	;used registers          : R18, R19, R30(ZL), R31(ZH)                                          
 664               	;arg registers           : None                                                                
 665               	;return registers        : None                                                                
 666               	;unsafe access registers : R18, R19, R30(ZL), R31(ZH)                                          
 667               	.macro  KER_LOAD_TASK_ID_AND_SP                           ;total 1.75uS @8MHz     ( 14 clocks) 
 668               			LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
 669               			LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
 670               			KER_CALC_ADDR_OFF_WORD                            ;calc offset            (  6 clocks) 
 671               			LDD   R18                , Z+0                    ;load SPL at ZP         (  2 clocks) 
 672               			LDD   R19                , Z+1                    ;load SPH at ZP         (  2 clocks) 
 673               			OUT   IOSPL              , R18                    ;load SPL0              (  1 clock ) 
 674               			OUT   IOSPH              , R19                    ;load SPH0              (  1 clock ) 
 675               	.endm                                                                                          
 676               	;;=================================load task id & sp end====================================;; 
 677               	
 678               	
 679               	
 680               	
 681               	
 682               	;;================================push msp & zp starting====================================;; 
 683               	;used registers          : R18, R19, R26(XL), R27(XH), R30(ZL), R31(ZH)                        
 684               	;arg registers           : None                                                                
 685               	;return registers        : None                                                                
 686               	;unsafe access registers : R18, R19, R26(XL), R27(XH), R30(ZL), R31(ZH)                        
 687               	.macro  KER_PUSH_MSP_ZP                                   ;total 2.25uS @8MHz     ( 18 clocks) 
 688               	        LDS   XL                 , KerSSZ+OFM_MSPI+0      ;load val low           (  2 clocks) 
 689               			LDS   XH                 , KerSSZ+OFM_MSPI+1      ;load val high          (  2 clocks) 
 690               			IN    R18                , IOSPL                  ;copy                   (  1 clock ) 
 691               			IN    R19                , IOSPH                  ;copy                   (  1 clock ) 
 692               			ST    X+                 , R18                    ;store main SPL         (  2 clocks) 
 693               	        ST    X+                 , R19                    ;store main SPH         (  2 clocks) 
 694               			ST    X+                 , ZL                     ;store main ZL          (  2 clocks) 
 695               			ST    X+                 , ZH                     ;store main ZH          (  2 clocks) 
 696               			STS   KerSSZ+OFM_MSPI+0  , XL                     ;store new index        (  2 clocks) 
 697               			STS   KerSSZ+OFM_MSPI+1  , XH                     ;store new index        (  2 clocks) 
 698               	.endm                                                                                          
 699               	;;===================================push msp & zp end======================================;; 
 700               	
 701               	
 702               	
 703               	
 704               	
 705               	;;=================================pop msp & zp starting====================================;; 
 706               	;used registers          : R18, R19, R26(XL), R27(XH), R30(ZL), R31(ZH)                        
 707               	;arg registers           : None                                                                
 708               	;return registers        : None                                                                
 709               	;unsafe access registers : R18, R19, R26(XL), R27(XH), R30(ZL), R31(ZH)                        
 710               	.macro  KER_POP_MSP_ZP                                    ;total 2.25uS @8MHz     ( 18 clocks) 
 711               			LDS   XL                 , KerSSZ+OFM_MSPI+0      ;load val low           (  2 clocks) 
 712               			LDS   XH                 , KerSSZ+OFM_MSPI+1      ;load val high          (  2 clocks) 
 713               			LD    ZH                 , -X                     ;load ZH                (  2 clocks) 
 714               			LD    ZL                 , -X                     ;load ZL                (  2 clocks) 
 715               			LD    R19                , -X                     ;load main SPH          (  2 clocks) 
 716               			LD    R18                , -X                     ;load main SPL          (  2 clocks) 
 717               			OUT   IOSPL              , R18                    ;set SPL                (  1 clock ) 
 718               			OUT   IOSPH              , R19                    ;set SPH                (  1 clock ) 
 719               			STS   KerSSZ+OFM_MSPI+0  , XL                     ;store new index        (  2 clocks) 
 720               			STS   KerSSZ+OFM_MSPI+1  , XH                     ;store new index        (  2 clocks) 
 721               	.endm                                                                                          
 722               	;;====================================pop msp & zp end======================================;; 
 723               	
 724               	
 725               	
 726               	
 727               	
 728               	;;============================sleep timeout management starting=============================;; 
 729               	;used registers          : R18, R19, R20, R24, R30(ZL), R31(ZH)                                
 730               	;arg registers           : R24 (SCH_MODE_HANDLER/SCH_MODE_THREAD)                              
 731               	;return registers        : R24 (READY/BLOCKED/EXECUTING/SUSPENDED/CONS_LAT)                    
 732               	;unsafe access registers : R18, R19, R20, R24, R30(ZL), R31(ZH)                                
 733               	.macro  KER_SLP_TIME_MGNT                                 ;total 6.50uS @8MHz     ( 52 clocks) 
 734               			LDI   ZL                 , lo8(KerSchSlp)         ;fetch base pos low     (  1 clock ) 
 735               			LDI   ZH                 , hi8(KerSchSlp)         ;fetch base pos high    (  1 clock ) 
 736               			KER_CALC_ADDR_OFF_WORD                            ;calc offset            (  6 clocks) 
 737               			;fetch current value from ram, if val=0, skip decrement                                
 738               	        LDD   R18                , Z+0                    ;load val low byte      (  2 clocks) 
 739               			LDD   R19                , Z+1                    ;load val high byte     (  2 clocks) 
 740               			MOV   R20                , R18                    ;copy                   (  1 clock ) 
 741               			OR    R20                , R19                    ;or high & low bytes    (  1 clock ) 
 742               			BREQ  _VAL_NULL\@                                 ;val=0, save sts        (  2 clocks) 
 743               	        CPI   R24                , SCH_MODE_THREAD        ;if arg=1, thread mode  (  1 clock ) 
 744               			BREQ  _VAL_NOT_NULL\@                             ;no need to dec val     (  2 clocks) 
 745               			;R19:R18 contains 16 bit sleep timer val, decrease val by 1                            
 746               			LDI   R20                , 0x01                   ;set val 1              (  1 clock ) 
 747               	        SUB   R18                , R20                    ;subtract low byte      (  1 clock ) 
 748               			LDI   R20                , 0x00                   ;clear                  (  1 clock ) 
 749               			SBC   R19                , R20                    ;subtract carry if any  (  1 clock ) 
 750               			;store new value                                                                       
 751               			STD   Z+0                , R18                    ;store low byte         (  2 clocks) 
 752               			STD   Z+1                , R19                    ;store low byte         (  2 clocks) 
 753               			MOV   R20                , R18                    ;copy                   (  1 clock ) 
 754               			OR    R20                , R19                    ;or high & low bytes    (  1 clock ) 
 755               			BRNE  _VAL_NOT_NULL\@                             ;val!=0                 (  2 clocks) 
 756               		_VAL_NULL\@:                                                                               
 757               		    ;find ram address for status                                                           
 758               		    LDI   ZL                 , lo8(KerSchSts)         ;fetch base pos low     (  1 clock ) 
 759               			LDI   ZH                 , hi8(KerSchSts)         ;fetch base pos high    (  1 clock ) 
 760               	        KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 761               			;update flag as task is ready                                                          
 762               			LDI   R24                , TASK_READY             ;set TASK_READY         (  1 clock ) 
 763               			ST    Z                  , R24                    ;update flag            (  2 clocks) 
 764               			RJMP  _EXIT_SLP_TIME\@                            ;jump to exit           (  2 clocks) 
 765               	    _VAL_NOT_NULL\@:                                                                           
 766               		    LDI   ZL                 , lo8(KerSchSts)         ;fetch base pos low     (  1 clock ) 
 767               			LDI   ZH                 , hi8(KerSchSts)         ;fetch base pos high    (  1 clock ) 
 768               	        KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
 769               		    LD    R24                , Z                      ;return sts             (  2 clocks) 
 770               	    _EXIT_SLP_TIME\@:                                                                          
 771               	.endm                                                                                          
 772               	;;============================sleep timeout management end==================================;; 
 773               	
 774               	
 775               	
 776               	
 777               	
 778               	;;============================current task priority starting================================;; 
 779               	;used registers          : R18, R24, R30(ZL), R31(ZH)                                          
 780               	;arg registers           : None                                                                
 781               	;return registers        : R24 (Current task priority)                                         
 782               	;unsafe access registers : R18, R24, R30(ZL), R31(ZH)                                          
 783               	.macro  KER_CURR_TASK_PRIO                                ;total 1.13uS @8MHz     (  9 clocks) 
 784               			LDI    ZL                , lo8(KerSchPr)          ;load low addr          (  1 clock ) 
 785               			LDI    ZH                , hi8(KerSchPr)          ;load high addr         (  1 clock ) 
 786               			LDI    R18               , 0x00                   ;clear reg, for carry   (  1 clock ) 
 787               			LDS    R24               , KerBase+OFB_TID        ;load task id           (  2 clocks) 
 788               	        ADD    ZL                , R24                    ;add low addr           (  1 clock ) 
 789               			ADC    ZH                , R18                    ;add carry if any       (  1 clock ) 
 790               			LD     R24               , Z                      ;load current tid prio  (  2 clocks) 
 791               	.endm                                                                                          
 792               	;;==============================current task priority end===================================;; 
 793               	
 794               	
 795               	
 796               	
 797               	
 798               	;;================================run scheduler starting====================================;; 
 799               	;used registers          : R18, R19, R20, R21, R24, R25, R30(ZL), R31(ZH)                      
 800               	;arg registers           : R24 (SCH_MODE_HANDLER/SCH_MODE_THREAD)                              
 801               	;return registers        : None                                                                
 802               	;unsafe access registers : R18, R19, R20, R21, R24, R25, R30(ZL), R31(ZH)                      
 803               	.macro  KER_RUN_SCHEDULER                                 ;total 13.25uS @8MHz    (106 clocks) 
 804               			LDI    R18               , 0xFF                   ;set 0xff               (  1 clock ) 
 805               			STS    KerBase+OFB_LPR   , R18                    ;lowest priority        (  2 clocks) 
 806               			LDI    R18               , 0x00                   ;start from 0           (  1 clock ) 
 807               			STS    KerBase+OFB_PTID  , R18                    ;highest prio tid=0     (  2 clocks) 
 808               			MOV    R21               , R24                    ;copy sch mode          (  1 clock ) 
 809               		_KER_SCH_LOOP\@:                                                                           
 810               		    ;store task id to run from KER_DEC_SLP_TIMEOUT                                         
 811               			STS    KerBase+OFB_TID   , R18                    ;store task id          (  2 clocks) 
 812               	        ;sleep time decrement, update ready/blocked status                                     
 813               			MOV    R24               , R21                    ;restore sch mode       (  1 clock ) 
 814               			KER_SLP_TIME_MGNT                                 ;update return vars     ( 52 clocks) 
 815               	        CPI    R24               , TASK_READY             ;compare                (  1 clock ) 
 816               	        BREQ   _KER_CALC_PRIO\@                           ;calc priority if ready (  2 clocks) 
 817               			CPI    R24               , TASK_CONS_LAT          ;compare                (  1 clock ) 
 818               	        BREQ   _KER_CALC_PRIO\@                           ;calc priority if c_lat (  2 clocks) 
 819               	        RJMP   _KER_SCH_NEXT\@                            ;skip if !ready|c_lat   (  2 clocks) 
 820               		_KER_CALC_PRIO\@:                                                                          
 821               			KER_CURR_TASK_PRIO                                ;get task prio ->R24    (  9 clocks) 
 822               	        ;compare current task priority with lowest priority found so far                       
 823               			LDS    R18               , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
 824               			CP     R24               , R18                    ;compare                (  1 clock ) 
 825               			BRSH   _KER_SCH_NEXT\@                            ;if prio>=lowest prio   (  2 clocks) 
 826               			;found new lowest priority                                                             
 827               			STS    KerBase+OFB_LPR   , R24                    ;save lowest priority   (  2 clocks) 
 828               			LDS    R18               , KerBase+OFB_TID        ;load task id           (  2 clocks) 
 829               			STS    KerBase+OFB_PTID  , R18                    ;save lowest priority   (  2 clocks) 
 830               	                                                                                               
 831               	    _KER_SCH_NEXT\@:                                                                           
 832               		    LDS    R18               , KerBase+OFB_TID        ;load task id           (  2 clocks) 
 833               			INC    R18                                        ;increment by 1         (  1 clock ) 
 834               			LDS    R19               , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
 835               			CP     R18               , R19                    ;compare with ntask     (  2 clocks) 
 836               			BRSH   _KER_SCH_EXIT\@                            ;if task_id>=ntask      (  2 clocks) 
 837               			RJMP   _KER_SCH_LOOP\@                            ;jump to entry          (  2 clocks) 
 838               		_KER_SCH_EXIT\@:                                                                           
 839               	        LDS    R18               , KerBase+OFB_PTID       ;load high prio task id (  2 clocks) 
 840               			STS    KerBase+OFB_TID   , R18                    ;for test only          (  2 clocks) 
 841               	.endm                                                                                          
 842               	;;===================================run scheduler end======================================;; 
 843               	
 844               	
 845               	
 846               	
 847               	
 848               	;;================================calc cpu usage starting===================================;; 
 849               	;used registers          : R18, R19                                                            
 850               	;arg registers           : None                                                                
 851               	;return registers        : None                                                                
 852               	;unsafe access registers : R18, R19                                                            
 853               	.macro  KER_CPU_USAGE                                     ;total 3.25uS @8MHz     ( 26 clocks) 
 854               	        ;check if current target task is idle task or not                                      
 855               	        LDS    R18               , KerBase+OFB_TID        ;load target task_id    (  2 clocks) 
 856               			TST    R18                                        ;check if idle task     (  1 clock ) 
 857               			BREQ   _KER_USG_TICK\@                            ;task_id=idle, skip     (  2 clocks) 
 858               			LDS    R18               , KerBase+OFB_UATC       ;load active tick cnt   (  2 clocks) 
 859               			INC    R18                                        ;inc active tick cnt    (  1 clock ) 
 860               			STS    KerBase+OFB_UATC  , R18                    ;store new val          (  2 clocks) 
 861               		_KER_USG_TICK\@:                                                                           
 862               			LDS    R18               , KerBase+OFB_UTC        ;load usage tick cnt    (  2 clocks) 
 863               			INC    R18                                        ;increment tick cnt     (  1 clock ) 
 864               			CPI    R18               , 100                    ;compare with 100       (  1 clock ) 
 865               			BRLO   _KER_USG_UTC_SV\@                          ;val<100, save new val  (  2 clocks) 
 866               			LDI    R18               , 0x00                   ;val>=100, roll back    (  1 clock ) 
 867               			LDS    R19               , KerBase+OFB_UATC       ;load active tick cnt   (  2 clocks) 
 868               			STS    KerBase+OFB_USAGE , R19                    ;store usage            (  2 clocks) 
 869               			LDI    R19               , 0x00                   ;clear reg              (  1 clock ) 
 870               			STS    KerBase+OFB_UATC  , R19                    ;clear active tick cnt  (  2 clocks) 
 871               		_KER_USG_UTC_SV\@:                                                                         
 872               			STS    KerBase+OFB_UTC   , R18                    ;store new val          (  2 clocks) 
 873               	.endm                                                                                          
 874               	;;===================================calc cpu usage end=====================================;; 
 875               	
 876               	
 877               	
 878               	
 879               	
 880               	;;===========================kernel disable analog domain starting==========================;; 
 881               	;used registers          : None                                                                
 882               	;arg registers           : None                                                                
 883               	;return registers        : None                                                                
 884               	;unsafe access registers : None                                                                
 885               	.macro KER_DISABLE_ANALOG_DOMAIN                          ;total 0.75uS @8MHz     ( 10 clocks) 
 886               	    #ifdef KER_IDLE_AS_SLEEP                                                                   
 887               			LDS   R18                , SRADCSRA               ;load ADCSRA            (  2 clocks) 
 888               			ANDI  R18                , 0xEF                   ;clear ADEN             (  1 clock ) 
 889               			STS   SRADCSRA           , R18                    ;set val                (  2 clocks) 
 890               			LDS   R18                , SRACSR                 ;load ACSR              (  2 clocks) 
 891               			ORI   R18                , 0x80                   ;set ACD                (  1 clock ) 
 892               			STS   SRACSR             , R18                    ;set val                (  2 clocks) 
 893               		#endif                                                                                     
 894               	.endm                                                                                          
 895               	;;=============================kernel disable analog domain end=============================;; 
 896               	
 897               	
 898               	
 899               	
 900               	
 901               	;;===============================kernel sleep config starting===============================;; 
 902               	;used registers          : R18                                                                 
 903               	;arg registers           : None                                                                
 904               	;return registers        : None                                                                
 905               	;unsafe access registers : R18                                                                 
 906               	.macro KER_SLEEP_INIT                                     ;total 0.63uS @8MHz     (  5 clocks) 
 907               	    #ifdef KER_IDLE_AS_SLEEP                                                                   
 908               	        #ifdef KER_SLEEP_MODE_IDLE                                                             
 909               			LDI   R18                , 0x00                   ;set SM[2:0] val        (  1 clock ) 
 910               			#endif                                                                                 
 911               	                                                                                               
 912               			#ifdef KER_SLEEP_MODE_ADC_NR                                                           
 913               			LDI   R18                , 0x02                   ;set SM[2:0] val        (  1 clock ) 
 914               			#endif
 915               	                                                                                               
 916               			#ifdef KER_SLEEP_MODE_POWER_DOWN                                                       
 917               			LDI   R18                , 0x04                   ;set SM[2:0] val        (  1 clock ) 
 918               	        #endif                                                                                 
 919               			                                                                                       
 920               			#ifdef KER_SLEEP_MODE_POWER_SAVE                                                       
 921               			LDI   R18                , 0x06                   ;set SM[2:0] val        (  1 clock ) 
 922               			#endif                                                                                 
 923               		                                                                                           
 924               			STS   SRSMCR             , R18                    ;set sleep control val  (  2 clocks) 
 925               			STS   KerBase+OFB_SLCFG  , R18                    ;save sleep control val (  2 clocks) 
 926               		#endif                                                                                     
 927               	.endm                                                                                          
 928               	;;================================kernel sleep config end===================================;; 
 929               	
 930               	
 931               	
 932               	
 933               	
 934               	;;==============================kernel enter sleep mode starting============================;; 
 935               	;used registers          : None                                                                
 936               	;arg registers           : None                                                                
 937               	;return registers        : None                                                                
 938               	;unsafe access registers : None                                                                
 939               	.macro KER_ENTER_SLEEP                                    ;total 0.75uS @8MHz     (  6 clocks) 
 940               	    #ifdef KER_IDLE_AS_SLEEP                                                                   
 941               			LDS   R18                , SRSMCR                 ;load SMCR              (  2 clocks) 
 942               			ORI   R18                , 0x01                   ;set SE bit             (  1 clock ) 
 943               			STS   SRSMCR             , R18                    ;set val                (  2 clocks) 
 944               			SLEEP                                             ;sleep cpu              (  1 clock ) 
 945               		#endif                                                                                     
 946               	.endm                                                                                          
 947               	;;================================kernel enter sleep mode end===============================;; 
 948               	
 949               	
 950               	
 951               	
 952               	
 953               	;;===============================kernel exit sleep mode starting============================;; 
 954               	;used registers          : None                                                                
 955               	;arg registers           : None                                                                
 956               	;return registers        : None                                                                
 957               	;unsafe access registers : None                                                                
 958               	.macro KER_EXIT_SLEEP                                     ;total 0.63uS @8MHz     (  5 clocks) 
 959               	    #ifdef KER_IDLE_AS_SLEEP                                                                   
 960               	        LDS   R18                , SRSMCR                 ;load SMCR              (  2 clocks) 
 961               			ANDI  R18                , 0xFE                   ;clear SE bit           (  1 clock ) 
 962               			STS   SRSMCR             , R18                    ;set val                (  2 clocks) 
 963               		#endif                                                                                     
 964               	.endm                                                                                          
 965               	;;=================================kernel exit sleep mode end===============================;; 
 966               	
 967               	
 968               	
 969               	
 970               	
 971               	;;=================================ISR execution starting===================================;; 
 972               	#ifdef  KER_TIMER0_AS_TICK_SRC                                                                 
 973               	.global  __vector_16                                                                           
 974               	    __vector_16:                                          ;total 40.00uS @8MHz    (339 clocks) 
 975               		    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 976               			KER_EXIT_SLEEP                                    ;exit sleep if enabled  (  5 clocks) 
 977               	        KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 978               			KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 979               			KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 980               			KER_TICK_INCREMENT                                ;increment tick counter ( 26 clocks) 
 981               			LDI    R24               , SCH_MODE_HANDLER       ;set sch mode           (  1 clock ) 
 982               			KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
 983               			KER_CPU_USAGE                                     ;calc cpu usage         ( 26 clocks) 
 984               			KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 985               			KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
 986               		    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 987               			RETI                                              ;return from interrupt  (  4 clocks) 
 988               	#endif                                                                                         
 989               	#ifdef  KER_WDT_AS_TICK_SRC                                                                    
 990               	.global  __vector_6                                                                            
 991               	    __vector_6:                                           ;total 40.00uS @8MHz    (344 clocks) 
 992:kernel.S      **** 	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 993:kernel.S      **** 		KER_EXIT_SLEEP                                    ;exit sleep if enabled  (  5 clocks) 
 994:kernel.S      ****         KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 995:kernel.S      **** 		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 996:kernel.S      **** 		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 997:kernel.S      **** 		KER_TICK_INCREMENT                                ;increment tick counter ( 26 clocks) 
 998:kernel.S      **** 		LDI    R24               , SCH_MODE_HANDLER       ;set sch mode           (  1 clock ) 
 999:kernel.S      **** 		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
1000:kernel.S      **** 		KER_CPU_USAGE                                     ;calc cpu usage         ( 26 clocks) 
1001:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
1002:kernel.S      **** 		KER_CONTEXT_RESTORE_HANDLER                       ;restore context        ( 67 clocks) 
1003:kernel.S      **** 	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
1004:kernel.S      **** 		LDS   R18                , SRWDTCSR               ;copy WDTCSR            (  2 clocks) 
1005:kernel.S      **** 		ORI   R18                , 0x40                   ;set WDIE               (  1 clock ) 
1006:kernel.S      **** 		STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
1007:kernel.S      **** 		RETI                                              ;return from interrupt  (  4 clocks) 
 1008               	#endif                                                                                         
 1009               	;;====================================ISR execution end=====================================;; 
 1010               	
 1011               	
 1012               	
 1013               	
 1014               	
 1015               	;;================================SysTick reg init starting=================================;; 
 1016               	;used registers          : R18, R19, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
 1017               	;arg registers           : R24(Prescaler), R22(ReloadVal)                                      
 1018               	;return registers        : None                                                                
 1019               	;unsafe access registers : R18, R19, R22, R24, R26(XL), R27(XH), R30(ZL), R31(ZH)              
 1020               	Kernel_SysTick_Reg_Init:                                  ;total 11.50uS @8MHz    ( 92 clocks) 
1021:kernel.S      ****         CLI                                               ;disable global int     (  1 clock ) 
1022:kernel.S      **** 		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
1023:kernel.S      ****         KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 1024               			;clear reg                                                                             
1025:kernel.S      **** 		LDI   R18                , 0x00                   ;set 0x00 to R18        (  1 clock ) 
 1026               			;clear tick counter                                                                    
1027:kernel.S      **** 		STS   KerBase+OFB_TICK0  , R18                    ;clear  KerBase[0]      (  2 clocks) 
1028:kernel.S      **** 		STS   KerBase+OFB_TICK1  , R18                    ;clear  KerBase[1]      (  2 clocks) 
1029:kernel.S      **** 		STS   KerBase+OFB_TICK2  , R18                    ;clear  KerBase[2]      (  2 clocks) 
1030:kernel.S      **** 		STS   KerBase+OFB_TICK3  , R18                    ;clear  KerBase[3]      (  2 clocks) 
1031:kernel.S      **** 		STS   KerBase+OFB_TICK4  , R18                    ;clear  KerBase[4]      (  2 clocks) 
 1032               			;clear system registers                                                                
1033:kernel.S      **** 		STS   KerBase+OFB_PRS    , R18                    ;clear  KerBase[5]      (  2 clocks) 
1034:kernel.S      **** 		STS   KerBase+OFB_RLD    , R18                    ;clear  KerBase[6]      (  2 clocks) 
1035:kernel.S      **** 		STS   KerBase+OFB_TID    , R18                    ;clear  KerBase[7]      (  2 clocks) 
1036:kernel.S      **** 		STS   KerBase+OFB_NTSK   , R18                    ;clear  KerBase[8]      (  2 clocks) 
1037:kernel.S      **** 		STS   KerBase+OFB_LPR    , R18                    ;clear  KerBase[9]      (  2 clocks) 
1038:kernel.S      ****         STS   KerBase+OFB_PTID   , R18                    ;clear  KerBase[10]     (  2 clocks) 
1039:kernel.S      **** 		STS   KerBase+OFB_UTC    , R18                    ;clear  KerBase[11]     (  2 clocks) 
1040:kernel.S      **** 		STS   KerBase+OFB_UATC   , R18                    ;clear  KerBase[12]     (  2 clocks) 
1041:kernel.S      **** 		STS   KerBase+OFB_USAGE  , R18                    ;clear  KerBase[13]     (  2 clocks) 
 1042               			;clear all timer registers                                                             
 1043               			#ifdef KER_TIMER0_AS_TICK_SRC                                                          
1044:kernel.S      **** 		STS   SRTCCR0A           , R18                    ;clear TCCR0A           (  2 clocks) 
1045:kernel.S      **** 		STS   SRTCCR0B           , R18                    ;clear TCCR0B           (  2 clocks) 
1046:kernel.S      **** 		STS   SRTIMSK0           , R18                    ;clear TIMSK0           (  2 clocks) 
1047:kernel.S      **** 		STS   SRTIFR0            , R18                    ;clear TIFR0            (  2 clocks) 
1048:kernel.S      **** 		STS   SROCR0A            , R18                    ;clear OCR0A            (  2 clocks) 
1049:kernel.S      **** 		STS   SROCR0B            , R18                    ;clear OCR0B            (  2 clocks) 
1050:kernel.S      **** 		STS   SRTCNT0            , R18                    ;clear TCNT0            (  2 clocks) 
1051:kernel.S      **** 		#endif                                                                                 
1052:kernel.S      ****         #ifdef KER_WDT_AS_TICK_SRC                                                             
1053:kernel.S      **** 		WDR                                               ;reset wdt              (  1 clock ) 
1054:kernel.S      **** 		LDS   R18                , SRMCUSR                ;copy MCUSR             (  1 clock ) 
1055:kernel.S      **** 		ANDI  R18                , 0xFF & (0<<WDRF)       ;clear WDRF             (  1 clock ) 
1056:kernel.S      **** 		STS   SRMCUSR            , R18                    ;set val                (  1 clock ) 
1057:kernel.S      **** 		LDS   R18                , SRWDTCSR               ;copy WDTCSR            (  2 clocks) 
1058:kernel.S      **** 		ORI   R18                , 0x18                   ;set WDCE,WDE           (  1 clock ) 
1059:kernel.S      **** 		STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
1060:kernel.S      **** 		LDI   R18                , 0x00                   ;clear WDE              (  1 clock ) 
1061:kernel.S      **** 		STS   SRWDTCSR           , R18                    ;set val                (  2 clocks) 
 1062               			#endif                                                                                 
 1063               			;save values for future use                                                            
1064:kernel.S      **** 		STS   KerBase+OFB_PRS    , R24                    ;KerBase[5] prescaler   (  2 clocks) 
1065:kernel.S      **** 		STS   KerBase+OFB_RLD    , R22                    ;KerBase[6] reload val  (  2 clocks) 
1066:kernel.S      ****         KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
1067:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1068               	;;===================================SysTick reg init end===================================;; 
 1069               	
 1070               	
 1071               	
 1072               	
 1073               	
 1074               	;;===============================kernel task create starting================================;; 
 1075               	;used registers          : R18, R19, R20, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)    
 1076               	;arg registers           : R25:R24(FuncPtr), R22(TaskPriority)                                 
 1077               	;return registers        : None                                                                
 1078               	;unsafe access registers : R18, R19, R20, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)    
 1079               	Kernel_Task_Create:                                       ;total 21.50uS @8MHz    (172 clocks) 
1080:kernel.S      ****         KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 1081               			;set priority to KerSchPr+task_id                                                      
1082:kernel.S      **** 		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
1083:kernel.S      **** 		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
1084:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
1085:kernel.S      **** 		ST    Z                  , R22                    ;save priority          (  2 clocks) 
 1086               			;set task status to KerSchSts+task_id                                                  
1087:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
1088:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
1089:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;calc offset            (  5 clocks) 
1090:kernel.S      **** 		LDI   R18                , TASK_READY             ;set status as ready    (  1 clock ) 
1091:kernel.S      **** 		ST    Z                  , R18                    ;save status            (  2 clocks) 
 1092               			;stack pointer for current task (KerStack + KER_STK_SZ*(task_id+1) - 1) ->stack top    
1093:kernel.S      **** 		LDS   R18                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
1094:kernel.S      **** 		INC   R18                                         ;increment task_id      (  1 clock ) 
1095:kernel.S      **** 		LDI   R19                , KER_STK_SZ             ;load stack size        (  1 clock ) 
1096:kernel.S      **** 		MUL   R18                , R19                    ;multiply to get offset (  2 clocks) 
1097:kernel.S      **** 		MOV   ZL                 , R0                     ;load multiplied low    (  1 clocks) 
1098:kernel.S      **** 		MOV   ZH                 , R1                     ;load multiplied high   (  1 clocks) 
1099:kernel.S      **** 		SBIW  ZL                 , 0x01                   ;dec multiplied val-1   (  2 clocks) 
1100:kernel.S      **** 		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
1101:kernel.S      **** 		LDI   R18                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
1102:kernel.S      **** 		LDI   R19                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
1103:kernel.S      **** 		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
1104:kernel.S      **** 		ADC   ZH                 , R19                    ;add high bytes+carry   (  1 clock ) 
1105:kernel.S      **** 		OUT   IOSPL              , ZL                     ;load SPL               (  1 clock ) 
1106:kernel.S      ****         OUT   IOSPH              , ZH                     ;load SPH               (  1 clock ) 
 1107               			;function argument directly returns word address                                       
1108:kernel.S      **** 	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
1109:kernel.S      **** 		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 1110               			;push context to stack of this task                                                    
1111:kernel.S      **** 		KER_CONTEXT_SAVE_HANDLER                          ;save context           ( 68 clocks) 
 1112               			;read stack pointer of current task (necessary when restore)                           
1113:kernel.S      **** 		IN    R18                , IOSPL                  ;read SPL               (  1 clock ) 
1114:kernel.S      ****         IN    R19                , IOSPH                  ;read SPH               (  1 clock ) 
 1115               			;calculate the address where current task's SP will be stored and store SP             
1116:kernel.S      **** 		LDS   R20                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
1117:kernel.S      **** 		LSL   R20                                         ;left shift to multiply (  1 clock ) 
1118:kernel.S      **** 		LDI   ZL                 , lo8(KerPSP)            ;fetch base pos low     (  1 clock ) 
1119:kernel.S      **** 		LDI   ZH                 , hi8(KerPSP)            ;fetch base pos high    (  1 clock ) 
1120:kernel.S      **** 		ADD   ZL                 , R20                    ;add offset to array    (  1 clock ) 
1121:kernel.S      **** 		LDI   R20                , 0x00                   ;clear reg              (  1 clock ) 
1122:kernel.S      **** 		ADC   ZH                 , R20                    ;add carry if any       (  1 clock ) 
1123:kernel.S      **** 		ST    Z+                 , R18                    ;SPL at KerPSp+offset   (  2 clocks) 
1124:kernel.S      **** 		ST    Z                  , R19                    ;SPH at KerPSp+offset   (  2 clocks) 
 1125               			;increment task_id                                                                     
1126:kernel.S      **** 		LDS   R18                , KerBase+OFB_TID        ;load task_id           (  2 clocks) 
1127:kernel.S      **** 		INC   R18                                         ;increment task_id      (  1 clock ) 
1128:kernel.S      **** 		STS   KerBase+OFB_TID    , R18                    ;store task_id          (  2 clocks) 
 1129               			;increment ntask                                                                       
1130:kernel.S      **** 		LDS   R18                , KerBase+OFB_NTSK       ;load ntask             (  2 clocks) 
1131:kernel.S      **** 		INC   R18                                         ;increment ntask        (  1 clock ) 
1132:kernel.S      **** 		STS   KerBase+OFB_NTSK   , R18                    ;store ntask            (  2 clocks) 
1133:kernel.S      **** 		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
1134:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1135               	;;==================================kernel task create end==================================;; 
 1136               	
 1137               	
 1138               	
 1139               	
 1140               	
 1141               	;;=================================kernel start tasks starting==============================;; 
 1142               	;used registers          : R0~R31                                                              
 1143               	;arg registers           : None                                                                
 1144               	;return registers        : None                                                                
 1145               	;unsafe access registers : R18, R19, R20, R24, R25, R30(ZL), R31(ZH)                           
 1146               	Kernel_Start_Tasks:                                       ;total 25.63uS @8MHz    (205 clocks) 
1147:kernel.S      **** 		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
1148:kernel.S      **** 		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
1149:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
1150:kernel.S      **** 		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
 1151               			;config timer for system tick                                                          
1152:kernel.S      **** 		KER_TIMER_INIT                                    ;init timer, int enable ( 12 clocks) 
 1153               			;execute return to jump to highest priority task                                       
1154:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1155               	;;==================================kernel start tasks end==================================;; 
 1156               	
 1157               	
 1158               	
 1159               	
 1160               	
 1161               	;;===================================kernel init starting===================================;; 
 1162               	;used registers          : R1, R18, R19, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
 1163               	;arg registers           : None                                                                
 1164               	;return registers        : None                                                                
 1165               	;unsafe access registers : R1, R18, R19, R22, R24, R25, R26(XL), R27(XH), R30(ZL), R31(ZH)     
 1166               	Kernel_Init:                                              ;total 39.75uS @8MHz    (318 clocks) 
1167:kernel.S      **** 		CLR   R1                                          ;gcc expects            (  1 clock ) 
 1168               	        ;store stack top (for MSP) addr to KerSSZ+OFM_MSPI0:1                                  
1169:kernel.S      **** 		LDI   R18                , lo8(KerSSZ+OFM_MSPS)   ;load low address       (  1 clock ) 
1170:kernel.S      **** 		LDI   R19                , hi8(KerSSZ+OFM_MSPS)   ;load high address      (  1 clock ) 
1171:kernel.S      ****         STS   KerSSZ+OFM_MSPI+0  , R18                    ;set mspi to stack top  (  2 clocks) 
1172:kernel.S      **** 		STS   KerSSZ+OFM_MSPI+1  , R19                    ;set mspi to stack top  (  2 clocks) 
1173:kernel.S      **** 		KER_PUSH_MSP_ZP                                   ;push MSP and ZP        ( 18 clocks) 
 1174               			;init timer for kernel                                                                 
1175:kernel.S      **** 		LDI   R24                , 0x03                   ;set prescaler          (  1 clock ) 
1176:kernel.S      **** 		LDI   R22                , 0x82                   ;set reload val         (  1 clock ) 
1177:kernel.S      **** 		CALL  Kernel_SysTick_Reg_Init                     ;init timer             ( 92 clocks) 
 1178               			;create idle task at task_id 0, priority 0xFF (lowest)                                 
1179:kernel.S      **** 		LDI   R24                , lo8(Kernel_Task_Idle)  ;load func addr low     (  1 clock ) 
1180:kernel.S      **** 		LDI   R25                , hi8(Kernel_Task_Idle)  ;load func addr high    (  1 clock ) 
1181:kernel.S      **** 		LSR   R25                                         ;right shift to divide  (  1 clock ) 
1182:kernel.S      **** 		ROR   R24                                         ;rotate right th carry  (  1 clock ) 
1183:kernel.S      **** 		LDI   R22                , 0xFF                   ;set max val            (  1 clock ) 
1184:kernel.S      **** 		CALL  Kernel_Task_Create                          ;init idle task         (172 clocks) 
1185:kernel.S      **** 		KER_POP_MSP_ZP                                    ;pop MSP and ZP         ( 18 clocks) 
 1186               			;execute return to jump to task0, pushed while task init                               
1187:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1188               	;;======================================kernel init end=====================================;; 
 1189               	
 1190               	
 1191               	
 1192               	
 1193               	
 1194               	;;=================================kernel idle task starting================================;; 
 1195               	;used registers          : None                                                                
 1196               	;arg registers           : None                                                                
 1197               	;return registers        : None                                                                
 1198               	;unsafe access registers : None                                                                
 1199               	Kernel_Task_Idle:                                                                              
1200:kernel.S      **** 	    KER_SLEEP_INIT                                    ;sleep init             (  5 clocks) 
 1201               	    _IDLE_LOOP:                                           ;forever loop                        
1202:kernel.S      **** 	    KER_DISABLE_ANALOG_DOMAIN                         ;disable adc, ac        ( 10 clocks) 
1203:kernel.S      **** 	    KER_ENTER_SLEEP                                   ;enter sleep mode       (  6 clocks) 
1204:kernel.S      **** 		RJMP  _IDLE_LOOP                                  ;jump to loop start     (  2 clocks) 
 1205               	;;==================================kernel idle task end====================================;; 
 1206               	
 1207               	
 1208               	
 1209               	
 1210               	
 1211               	;;================================kernel task sleep starting================================;; 
 1212               	;used registers          : R0~R31                                                              
 1213               	;arg registers           : R25:R24(SleepTime)                                                  
 1214               	;return registers        : None                                                                
 1215               	;unsafe access registers : R18, R19, R20, R24, R25, R30(ZL), R31(ZH)                           
 1216               	Kernel_Task_Sleep:                                        ;total 37.25uS @8MHz    (298 clocks) 
 1217               	        ;save current context                                                                  
1218:kernel.S      ****         KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
1219:kernel.S      **** 		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 1220               			;create next task wakeup time (args R25:R24)                                           
1221:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
1222:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
1223:kernel.S      **** 		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
1224:kernel.S      **** 		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
1225:kernel.S      **** 		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 1226               			;update task scheduler status as blocked                                               
1227:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
1228:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
1229:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
1230:kernel.S      ****         LDI   R18                , TASK_BLOCKED           ;block task until cnt=0 (  1 clock ) 
1231:kernel.S      **** 		STD   Z+0                , R18                    ;save block flag        (  2 clocks) 
 1232               			;run scheduler, load next task sp, restore context                                     
1233:kernel.S      **** 		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
1234:kernel.S      **** 		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
1235:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
1236:kernel.S      **** 		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
1237:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1238               	;;=================================kernel task sleep end====================================;; 
 1239               	
 1240               	
 1241               	
 1242               	
 1243               	
 1244               	;;========================kernel task constant latency starting=============================;; 
 1245               	;used registers          : R18, R24, R25, R30(ZL), R31(ZH)                                     
 1246               	;arg registers           : R25:R24(SleepTime)                                                  
 1247               	;return registers        : None                                                                
 1248               	;unsafe access registers : R18, R24, R25, R30(ZL), R31(ZH)                                     
 1249               	Kernel_Task_Constant_Latency:                             ;total 3.50uS @8MHz     ( 28 clocks) 
 1250               			;create next task wakeup time (args R25:R24)                                           
1251:kernel.S      **** 		CLI                                               ;disable interrupt      (  1 clock ) 
1252:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
1253:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
1254:kernel.S      **** 		KER_CALC_ADDR_OFF_WORD                            ;offset calc            (  6 clocks) 
1255:kernel.S      **** 		STD   Z+0                , R24                    ;save sleep time low    (  2 clocks) 
1256:kernel.S      **** 		STD   Z+1                , R25                    ;save sleep time high   (  2 clocks) 
 1257               			;update task scheduler status as constant latency                                      
1258:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
1259:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
1260:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
1261:kernel.S      ****         LDI   R18                , TASK_CONS_LAT          ;save as cons_lat       (  1 clock ) 
1262:kernel.S      **** 		STD   Z+0                , R18                    ;save block flag        (  2 clocks) 
1263:kernel.S      **** 		SEI                                               ;enable interrupt       (  1 clock ) 
1264:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1265               	;;=============================kernel task constant latency end=============================;; 
 1266               	
 1267               	
 1268               	
 1269               	
 1270               	
 1271               	;;=======================kernel task constant latency sleep starting========================;; 
 1272               	;used registers          : R0~R31                                                              
 1273               	;arg registers           : R25:R24(SleepTime)                                                  
 1274               	;return registers        : None                                                                
 1275               	;unsafe access registers : R18, R19, R20, R24, R25, R30(ZL), R31(ZH)                           
 1276               	Kernel_Task_Constant_Latency_Sleep:                       ;total 35.75uS @8MHz    (286 clocks) 
 1277               			;save current context                                                                  
1278:kernel.S      ****         KER_CONTEXT_SAVE_THREAD                           ;save context           ( 69 clocks) 
1279:kernel.S      **** 		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 1280               			;update task scheduler status as blocked                                               
1281:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
1282:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
1283:kernel.S      **** 		KER_CALC_ADDR_OFF_BYTES                           ;offset calc            (  5 clocks) 
1284:kernel.S      ****         LDI   R18                , TASK_BLOCKED           ;blocked until cnt=0    (  1 clock ) 
1285:kernel.S      **** 		STD   Z+0                , R18                    ;save block flag        (  2 clocks) 
 1286               			;run scheduler, load next task sp, restore context                                     
1287:kernel.S      **** 		LDI    R24               , SCH_MODE_THREAD        ;set sch mode           (  1 clock ) 
1288:kernel.S      **** 		KER_RUN_SCHEDULER                                 ;run scheduler          (106 clocks) 
1289:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
1290:kernel.S      **** 		KER_CONTEXT_RESTORE_THREAD                        ;restore context        ( 68 clocks) 
1291:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1292               	;;=============================kernel task constant latency end=============================;; 
 1293               	
 1294               	
 1295               	
 1296               	
 1297               	
 1298               	;;===========================kernel task sleep time get starting============================;; 
 1299               	;used registers          : R18, R24, R25, R30(ZL), R31(ZH)                                     
 1300               	;arg registers           : R24(TaskID)                                                         
 1301               	;return registers        : R25:R24(SleepTime)                                                  
 1302               	;unsafe access registers : R18, R24, R25, R30(ZL), R31(ZH)                                     
 1303               	Kernel_Task_Sleep_Time_Get:                               ;total 1.88uS @8MHz     ( 15 clocks) 
1304:kernel.S      **** 		MOV   R18                , R24                    ;copy                   (  1 clock ) 
1305:kernel.S      **** 		LSL   R18                                         ;x2                     (  1 clock ) 
1306:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
1307:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
1308:kernel.S      **** 		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
1309:kernel.S      **** 		LDI   R18                , 0x00                   ;load 0                 (  1 clock ) 
1310:kernel.S      **** 		ADC   ZH                 , R18                    ;add high byte+carry    (  1 clock ) 
1311:kernel.S      **** 		LDD   R24                , Z+0                    ;load sleep time        (  2 clocks) 
1312:kernel.S      **** 		LDD   R25                , Z+1                    ;load sleep time        (  2 clocks) 
1313:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1314               	;;==============================kernel task sleep time get end==============================;; 
 1315               	
 1316               	
 1317               	
 1318               	
 1319               	
 1320               	;;==============================kernel task status get starting=============================;; 
 1321               	;used registers          : R18, R24, R30(ZL), R31(ZH)                                          
 1322               	;arg registers           : R24(TaskID)                                                         
 1323               	;return registers        : R24(TaskSts)                                                        
 1324               	;unsafe access registers : R18, R24, R30(ZL), R31(ZH)                                          
 1325               	Kernel_Task_Status_Get:                                   ;total 1.50uS @8MHz     ( 12 clocks) 
1326:kernel.S      **** 		MOV   R18                , R24                    ;copy                   (  1 clock ) 
1327:kernel.S      **** 		LDI   ZL                 , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
1328:kernel.S      **** 		LDI   ZH                 , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
1329:kernel.S      **** 		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
1330:kernel.S      **** 		LDI   R18                , 0x00                   ;load 0                 (  1 clock ) 
1331:kernel.S      **** 		ADC   ZH                 , R18                    ;add high byte+carry    (  1 clock ) 
1332:kernel.S      **** 		LD    R24                , Z                      ;load task status       (  2 clocks) 
1333:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1334               	;;================================kernel task status get end================================;; 
 1335               	
 1336               	
 1337               	
 1338               	
 1339               	
 1340               	;;================================kernel ntask get starting=================================;; 
 1341               	;used registers          : R24                                                                 
 1342               	;arg registers           : None                                                                
 1343               	;return registers        : R24(NTask)                                                          
 1344               	;unsafe access registers : R24                                                                 
 1345               	Kernel_NTask_Get:                                         ;total 0.75uS @8MHz     (  6 clocks) 
1346:kernel.S      **** 		LDS   R24                 , KerBase+OFB_NTSK      ;load ntask             (  2 clock ) 
1347:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1348               	;;===================================kernel ntask get end===================================;; 
 1349               	
 1350               	
 1351               	
 1352               	
 1353               	
 1354               	;;=============================kernel task priority get starting============================;; 
 1355               	;used registers          : R18, R24, R30(ZL), R31(ZH)                                          
 1356               	;arg registers           : R24(TaskID)                                                         
 1357               	;return registers        : R24(TaskPriority)                                                   
 1358               	;unsafe access registers : R18, R24, R30(ZL), R31(ZH)                                          
 1359               	Kernel_Task_Prio_Get:                                     ;total 1.50uS @8MHz     ( 12 clocks) 
 1360               			;get priority of the task id, arg (task_id->R24), return R24                           
1361:kernel.S      **** 		MOV   R18                , R24                    ;copy task_id           (  1 clock ) 
1362:kernel.S      **** 		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
1363:kernel.S      **** 		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
1364:kernel.S      **** 		ADD   ZL                 , R18                    ;add low bytes          (  1 clock ) 
1365:kernel.S      **** 		LDI   R18                , 0x00                   ;clear reg              (  1 clock ) 
1366:kernel.S      **** 		ADC   ZH                 , R18                    ;add high byte+carry    (  1 clock ) 
1367:kernel.S      **** 		LD    R24                , Z                      ;load priority          (  2 clocks) 
1368:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1369               	;;================================kernel task priority get end==============================;; 
 1370               	
 1371               	
 1372               	
 1373               	
 1374               	
 1375               	;;============================kernel lowest priority get starting===========================;; 
 1376               	;used registers          : R24                                                                 
 1377               	;arg registers           : None                                                                
 1378               	;return registers        : R24(LowestPriorityVal)                                              
 1379               	;unsafe access registers : R24                                                                 
 1380               	Kernel_Lowest_Prio_Get:                                   ;total 0.75uS @8MHz     (  6 clocks) 
1381:kernel.S      **** 		LDS   R24                , KerBase+OFB_LPR        ;load lowest priority   (  2 clocks) 
1382:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1383               	;;===============================kernel lowest priority get end=============================;; 
 1384               	
 1385               	
 1386               	
 1387               	
 1388               	
 1389               	;;===========================kernel high priority task id starting==========================;; 
 1390               	;used registers          : R24                                                                 
 1391               	;arg registers           : None                                                                
 1392               	;return registers        : R24(HighstPriorityTaskID)->UserTaskID (Excluding Idle Task)         
 1393               	;unsafe access registers : R24                                                                 
 1394               	Kernel_High_Prio_Task_ID_Get:                             ;total 0.88uS @8MHz     (  7 clocks) 
1395:kernel.S      **** 		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
1396:kernel.S      **** 		DEC   R24                                         ;decrement by 1         (  1 clock ) 
1397:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1398               	;;==============================kernel high priority task id end============================;; 
 1399               	
 1400               	
 1401               	
 1402               	
 1403               	
 1404               	;;=========================kernel abs high priority task id starting========================;; 
 1405               	;used registers          : R24                                                                 
 1406               	;arg registers           : None                                                                
 1407               	;return registers        : R24(HighstPriorityTaskID)->AbsoluteTaskID (Including Idle Task)     
 1408               	;unsafe access registers : R24                                                                 
 1409               	Kernel_Abs_High_Prio_Task_ID_Get:                         ;total 0.75uS @8MHz     (  6 clocks) 
1410:kernel.S      **** 		LDS   R24                , KerBase+OFB_PTID       ;load priority tak_id   (  2 clocks) 
1411:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1412               	;;============================kernel abs high priority task id end==========================;; 
 1413               	
 1414               	
 1415               	
 1416               	
 1417               	
 1418               	;;================================kernel cpu usage get starting=============================;; 
 1419               	;used registers          : R24                                                                 
 1420               	;arg registers           : None                                                                
 1421               	;return registers        : R24(CurrentCpuUsage)->In percentage                                 
 1422               	;unsafe access registers : R24                                                                 
 1423               	Kernel_CPU_Usage_Get:                                     ;total 0.75uS @8MHz     (  6 clocks) 
 1424               			;get cpu usage, return R24                                                             
1425:kernel.S      **** 		LDS   R24                , KerBase+OFB_USAGE      ;load cpu usage         (  2 clocks) 
1426:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 1427               	;;==================================kernel cpu usage get end================================;; 
DEFINED SYMBOLS
            kernel.S:21     *ABS*:000003e8 KER_TR
            kernel.S:22     *ABS*:00000003 KER_PRS
            kernel.S:23     *ABS*:00000082 KER_RLD
            kernel.S:24     *ABS*:00000080 KER_STK_SZ
            kernel.S:25     *ABS*:0000000a KER_MX_NTSK
            kernel.S:33     *ABS*:00000000 OFB_TICK0
            kernel.S:34     *ABS*:00000001 OFB_TICK1
            kernel.S:35     *ABS*:00000002 OFB_TICK2
            kernel.S:36     *ABS*:00000003 OFB_TICK3
            kernel.S:37     *ABS*:00000004 OFB_TICK4
            kernel.S:38     *ABS*:00000005 OFB_PRS
            kernel.S:39     *ABS*:00000006 OFB_RLD
            kernel.S:40     *ABS*:00000007 OFB_TID
            kernel.S:41     *ABS*:00000008 OFB_NTSK
            kernel.S:42     *ABS*:00000009 OFB_LPR
            kernel.S:43     *ABS*:0000000a OFB_PTID
            kernel.S:44     *ABS*:0000000b OFB_UTC
            kernel.S:45     *ABS*:0000000c OFB_UATC
            kernel.S:46     *ABS*:0000000d OFB_USAGE
            kernel.S:47     *ABS*:0000000e OFB_SLCFG
            kernel.S:48     *ABS*:00000000 OFM_MSPI
            kernel.S:49     *ABS*:00000002 OFM_MSPS
            kernel.S:57     *ABS*:00000000 TASK_BLOCKED
            kernel.S:58     *ABS*:00000001 TASK_READY
            kernel.S:59     *ABS*:00000002 TASK_EXECUTING
            kernel.S:60     *ABS*:00000003 TASK_SUSPENDED
            kernel.S:61     *ABS*:00000004 TASK_CONS_LAT
            kernel.S:62     *ABS*:00000000 SCH_MODE_HANDLER
            kernel.S:63     *ABS*:00000001 SCH_MODE_THREAD
            kernel.S:72     *ABS*:0000007c SRADMUX
            kernel.S:73     *ABS*:0000007b SRADCSRB
            kernel.S:74     *ABS*:0000007a SRADCSRA
            kernel.S:75     *ABS*:0000006e SRTIMSK0
            kernel.S:76     *ABS*:00000060 SRWDTCSR
            kernel.S:77     *ABS*:0000005f SRSREG
            kernel.S:78     *ABS*:0000005e SRSPH
            kernel.S:79     *ABS*:0000005d SRSPL
            kernel.S:80     *ABS*:00000055 SRMCUCR
            kernel.S:81     *ABS*:00000054 SRMCUSR
            kernel.S:82     *ABS*:00000053 SRSMCR
            kernel.S:83     *ABS*:00000050 SRACSR
            kernel.S:84     *ABS*:00000048 SROCR0B
            kernel.S:85     *ABS*:00000047 SROCR0A
            kernel.S:86     *ABS*:00000046 SRTCNT0
            kernel.S:87     *ABS*:00000045 SRTCCR0B
            kernel.S:88     *ABS*:00000044 SRTCCR0A
            kernel.S:89     *ABS*:00000035 SRTIFR0
            kernel.S:91     *ABS*:0000003f IOSREG
            kernel.S:92     *ABS*:0000003e IOSPH
            kernel.S:93     *ABS*:0000003d IOSPL
            kernel.S:94     *ABS*:00000035 IOMCUCR
            kernel.S:95     *ABS*:00000034 IOMCUSR
            kernel.S:96     *ABS*:00000033 IOSMCR
            kernel.S:97     *ABS*:00000028 IOOCR0B
            kernel.S:98     *ABS*:00000027 IOOCR0A
            kernel.S:99     *ABS*:00000026 IOTCNT0
            kernel.S:100    *ABS*:00000025 IOTCCR0B
            kernel.S:101    *ABS*:00000024 IOTCCR0A
            kernel.S:102    *ABS*:00000015 IOTIFR0
            kernel.S:113    .bss:00000000 KerBase
            kernel.S:116    .bss:00000010 KerPSP
            kernel.S:119    .bss:00000024 KerSSZ
            kernel.S:122    .bss:00000032 KerSchSts
            kernel.S:125    .bss:0000003c KerSchPr
            kernel.S:128    .bss:00000046 KerSchSlp
            kernel.S:131    .bss:0000005a KerStack
            kernel.S:991    .text:00000000 __vector_6
            kernel.S:1020   .text:000001f0 Kernel_SysTick_Reg_Init
            kernel.S:1166   .text:000004a2 Kernel_Init
            kernel.S:1079   .text:0000028e Kernel_Task_Create
            kernel.S:1146   .text:0000037e Kernel_Start_Tasks
            kernel.S:1199   .text:00000500 Kernel_Task_Idle
            kernel.S:1216   .text:0000052c Kernel_Task_Sleep
            kernel.S:1249   .text:000006c2 Kernel_Task_Constant_Latency
            kernel.S:1276   .text:000006ee Kernel_Task_Constant_Latency_Sleep
            kernel.S:1303   .text:00000870 Kernel_Task_Sleep_Time_Get
            kernel.S:1325   .text:00000884 Kernel_Task_Status_Get
            kernel.S:1345   .text:00000894 Kernel_NTask_Get
            kernel.S:1359   .text:0000089a Kernel_Task_Prio_Get
            kernel.S:1380   .text:000008aa Kernel_Lowest_Prio_Get
            kernel.S:1394   .text:000008b0 Kernel_High_Prio_Task_ID_Get
            kernel.S:1409   .text:000008b8 Kernel_Abs_High_Prio_Task_ID_Get
            kernel.S:1423   .text:000008be Kernel_CPU_Usage_Get
            kernel.S:999    .text:000000b6 _KER_SCH_LOOP9
            kernel.S:999    .text:000000ec _VAL_NULL10
            kernel.S:999    .text:00000100 _VAL_NOT_NULL10
            kernel.S:999    .text:00000110 _EXIT_SLP_TIME10
            kernel.S:999    .text:0000011a _KER_CALC_PRIO9
            kernel.S:999    .text:0000013e _KER_SCH_NEXT9
            kernel.S:999    .text:0000014e _KER_SCH_EXIT9
            kernel.S:1000   .text:00000168 _KER_USG_TICK15
            kernel.S:1000   .text:00000182 _KER_USG_UTC_SV15
            kernel.S:1148   .text:0000038e _KER_SCH_LOOP32
            kernel.S:1148   .text:000003c4 _VAL_NULL33
            kernel.S:1148   .text:000003d8 _VAL_NOT_NULL33
            kernel.S:1148   .text:000003e8 _EXIT_SLP_TIME33
            kernel.S:1148   .text:000003f2 _KER_CALC_PRIO32
            kernel.S:1148   .text:00000416 _KER_SCH_NEXT32
            kernel.S:1148   .text:00000426 _KER_SCH_EXIT32
            kernel.S:1201   .text:0000050a _IDLE_LOOP
            kernel.S:1234   .text:000005c2 _KER_SCH_LOOP56
            kernel.S:1234   .text:000005f8 _VAL_NULL57
            kernel.S:1234   .text:0000060c _VAL_NOT_NULL57
            kernel.S:1234   .text:0000061c _EXIT_SLP_TIME57
            kernel.S:1234   .text:00000626 _KER_CALC_PRIO56
            kernel.S:1234   .text:0000064a _KER_SCH_NEXT56
            kernel.S:1234   .text:0000065a _KER_SCH_EXIT56
            kernel.S:1288   .text:00000770 _KER_SCH_LOOP75
            kernel.S:1288   .text:000007a6 _VAL_NULL76
            kernel.S:1288   .text:000007ba _VAL_NOT_NULL76
            kernel.S:1288   .text:000007ca _EXIT_SLP_TIME76
            kernel.S:1288   .text:000007d4 _KER_CALC_PRIO75
            kernel.S:1288   .text:000007f8 _KER_SCH_NEXT75
            kernel.S:1288   .text:00000808 _KER_SCH_EXIT75

UNDEFINED SYMBOLS
__vector_16
Kernel_SysTick_Val_Get
Kernel_SysTick_Val_Safely_Get
Kernel_Interrupt_Sts_Get
