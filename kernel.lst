   1               	# 1 "kernel.S"
   1               	
   0               	
   0               	
   2               	#include <avr/io.h>
   1               	/* Copyright (c) 2002,2003,2005,2006,2007 Marek Michalkiewicz, Joerg Wunsch
   2               	   Copyright (c) 2007 Eric B. Weddington
   3               	   All rights reserved.
   4               	
   5               	   Redistribution and use in source and binary forms, with or without
   6               	   modification, are permitted provided that the following conditions are met:
   7               	
   8               	   * Redistributions of source code must retain the above copyright
   9               	     notice, this list of conditions and the following disclaimer.
  10               	
  11               	   * Redistributions in binary form must reproduce the above copyright
  12               	     notice, this list of conditions and the following disclaimer in
  13               	     the documentation and/or other materials provided with the
  14               	     distribution.
  15               	
  16               	   * Neither the name of the copyright holders nor the names of
  17               	     contributors may be used to endorse or promote products derived
  18               	     from this software without specific prior written permission.
  19               	
  20               	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21               	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22               	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23               	  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24               	  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25               	  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26               	  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27               	  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28               	  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29               	  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30               	  POSSIBILITY OF SUCH DAMAGE. */
  31               	
  32               	/* $Id: io.h,v 1.52.2.28 2009/12/20 17:02:53 arcanum Exp $ */
  33               	
  34               	/** \file */
  35               	/** \defgroup avr_io <avr/io.h>: AVR device-specific IO definitions
  36               	    \code #include <avr/io.h> \endcode
  37               	
  38               	    This header file includes the apropriate IO definitions for the
  39               	    device that has been specified by the <tt>-mmcu=</tt> compiler
  40               	    command-line switch.  This is done by diverting to the appropriate
  41               	    file <tt>&lt;avr/io</tt><em>XXXX</em><tt>.h&gt;</tt> which should
  42               	    never be included directly.  Some register names common to all
  43               	    AVR devices are defined directly within <tt>&lt;avr/common.h&gt;</tt>,
  44               	    which is included in <tt>&lt;avr/io.h&gt;</tt>,
  45               	    but most of the details come from the respective include file.
  46               	
  47               	    Note that this file always includes the following files:
  48               	    \code 
  49               	    #include <avr/sfr_defs.h>
  50               	    #include <avr/portpins.h>
  51               	    #include <avr/common.h>
  52               	    #include <avr/version.h>
  53               	    \endcode
  54               	    See \ref avr_sfr for more details about that header file.
  55               	
  56               	    Included are definitions of the IO register set and their
  57               	    respective bit values as specified in the Atmel documentation.
  58               	    Note that inconsistencies in naming conventions,
  59               	    so even identical functions sometimes get different names on
  60               	    different devices.
  61               	
  62               	    Also included are the specific names useable for interrupt
  63               	    function definitions as documented
  64               	    \ref avr_signames "here".
  65               	
  66               	    Finally, the following macros are defined:
  67               	
  68               	    - \b RAMEND
  69               	    <br>
  70               	    The last on-chip RAM address.
  71               	    <br>
  72               	    - \b XRAMEND
  73               	    <br>
  74               	    The last possible RAM location that is addressable. This is equal to 
  75               	    RAMEND for devices that do not allow for external RAM. For devices 
  76               	    that allow external RAM, this will be larger than RAMEND.
  77               	    <br>
  78               	    - \b E2END
  79               	    <br>
  80               	    The last EEPROM address.
  81               	    <br>
  82               	    - \b FLASHEND
  83               	    <br>
  84               	    The last byte address in the Flash program space.
  85               	    <br>
  86               	    - \b SPM_PAGESIZE
  87               	    <br>
  88               	    For devices with bootloader support, the flash pagesize
  89               	    (in bytes) to be used for the \c SPM instruction. 
  90               	    - \b E2PAGESIZE
  91               	    <br>
  92               	    The size of the EEPROM page.
  93               	    
  94               	*/
  95               	
  96               	#ifndef _AVR_IO_H_
  97               	#define _AVR_IO_H_
  98               	
  99               	#include <avr/sfr_defs.h>
   1               	/* Copyright (c) 2002, Marek Michalkiewicz <marekm@amelek.gda.pl>
 100               	
 101               	#if defined (__AVR_AT94K__)
 102               	#  include <avr/ioat94k.h>
 103               	#elif defined (__AVR_AT43USB320__)
 104               	#  include <avr/io43u32x.h>
 105               	#elif defined (__AVR_AT43USB355__)
 106               	#  include <avr/io43u35x.h>
 107               	#elif defined (__AVR_AT76C711__)
 108               	#  include <avr/io76c711.h>
 109               	#elif defined (__AVR_AT86RF401__)
 110               	#  include <avr/io86r401.h>
 111               	#elif defined (__AVR_AT90PWM1__)
 112               	#  include <avr/io90pwm1.h>
 113               	#elif defined (__AVR_AT90PWM2__)
 114               	#  include <avr/io90pwmx.h>
 115               	#elif defined (__AVR_AT90PWM2B__)
 116               	#  include <avr/io90pwm2b.h>
 117               	#elif defined (__AVR_AT90PWM3__)
 118               	#  include <avr/io90pwmx.h>
 119               	#elif defined (__AVR_AT90PWM3B__)
 120               	#  include <avr/io90pwm3b.h>
 121               	#elif defined (__AVR_AT90PWM216__)
 122               	#  include <avr/io90pwm216.h>
 123               	#elif defined (__AVR_AT90PWM316__)
 124               	#  include <avr/io90pwm316.h>
 125               	#elif defined (__AVR_AT90PWM81__)
 126               	#  include <avr/io90pwm81.h>
 127               	#elif defined (__AVR_ATmega8U2__)
 128               	#  include <avr/iom8u2.h>
 129               	#elif defined (__AVR_ATmega16M1__)
 130               	#  include <avr/iom16m1.h>
 131               	#elif defined (__AVR_ATmega16U2__)
 132               	#  include <avr/iom16u2.h>
 133               	#elif defined (__AVR_ATmega16U4__)
 134               	#  include <avr/iom16u4.h>
 135               	#elif defined (__AVR_ATmega32C1__)
 136               	#  include <avr/iom32c1.h>
 137               	#elif defined (__AVR_ATmega32M1__)
 138               	#  include <avr/iom32m1.h>
 139               	#elif defined (__AVR_ATmega32U2__)
 140               	#  include <avr/iom32u2.h>
 141               	#elif defined (__AVR_ATmega32U4__)
 142               	#  include <avr/iom32u4.h>
 143               	#elif defined (__AVR_ATmega32U6__)
 144               	#  include <avr/iom32u6.h>
 145               	#elif defined (__AVR_ATmega64C1__)
 146               	#  include <avr/iom64c1.h>
 147               	#elif defined (__AVR_ATmega64M1__)
 148               	#  include <avr/iom64m1.h>
 149               	#elif defined (__AVR_ATmega128__)
 150               	#  include <avr/iom128.h>
 151               	#elif defined (__AVR_ATmega1280__)
 152               	#  include <avr/iom1280.h>
 153               	#elif defined (__AVR_ATmega1281__)
 154               	#  include <avr/iom1281.h>
 155               	#elif defined (__AVR_ATmega1284P__)
 156               	#  include <avr/iom1284p.h>
 157               	#elif defined (__AVR_ATmega128RFA1__)
 158               	#  include <avr/iom128rfa1.h>
 159               	#elif defined (__AVR_ATmega2560__)
 160               	#  include <avr/iom2560.h>
 161               	#elif defined (__AVR_ATmega2561__)
 162               	#  include <avr/iom2561.h>
 163               	#elif defined (__AVR_AT90CAN32__)
 164               	#  include <avr/iocan32.h>
 165               	#elif defined (__AVR_AT90CAN64__)
 166               	#  include <avr/iocan64.h>
 167               	#elif defined (__AVR_AT90CAN128__)
 168               	#  include <avr/iocan128.h>
 169               	#elif defined (__AVR_AT90USB82__)
 170               	#  include <avr/iousb82.h>
 171               	#elif defined (__AVR_AT90USB162__)
 172               	#  include <avr/iousb162.h>
 173               	#elif defined (__AVR_AT90USB646__)
 174               	#  include <avr/iousb646.h>
 175               	#elif defined (__AVR_AT90USB647__)
 176               	#  include <avr/iousb647.h>
 177               	#elif defined (__AVR_AT90USB1286__)
 178               	#  include <avr/iousb1286.h>
 179               	#elif defined (__AVR_AT90USB1287__)
 180               	#  include <avr/iousb1287.h>
 181               	#elif defined (__AVR_ATmega64__)
 182               	#  include <avr/iom64.h>
 183               	#elif defined (__AVR_ATmega640__)
 184               	#  include <avr/iom640.h>
 185               	#elif defined (__AVR_ATmega644__) || defined (__AVR_ATmega644A__)
 186               	#  include <avr/iom644.h>
 187               	#elif defined (__AVR_ATmega644P__)
 188               	#  include <avr/iom644p.h>
 189               	#elif defined (__AVR_ATmega644PA__)
 190               	#  include <avr/iom644pa.h>
 191               	#elif defined (__AVR_ATmega645__) || defined (__AVR_ATmega645A__) || defined (__AVR_ATmega645P__)
 192               	#  include <avr/iom645.h>
 193               	#elif defined (__AVR_ATmega6450__) || defined (__AVR_ATmega6450A__) || defined (__AVR_ATmega6450P__
 194               	#  include <avr/iom6450.h>
 195               	#elif defined (__AVR_ATmega649__) || defined (__AVR_ATmega649A__)
 196               	#  include <avr/iom649.h>
 197               	#elif defined (__AVR_ATmega6490__) || defined (__AVR_ATmega6490A__) || defined (__AVR_ATmega6490P__
 198               	#  include <avr/iom6490.h>
 199               	#elif defined (__AVR_ATmega649P__)
 200               	#  include <avr/iom649p.h>
 201               	#elif defined (__AVR_ATmega64HVE__)
 202               	#  include <avr/iom64hve.h>
 203               	#elif defined (__AVR_ATmega103__)
 204               	#  include <avr/iom103.h>
 205               	#elif defined (__AVR_ATmega32__)
 206               	#  include <avr/iom32.h>
 207               	#elif defined (__AVR_ATmega323__)
 208               	#  include <avr/iom323.h>
 209               	#elif defined (__AVR_ATmega324P__) || defined (__AVR_ATmega324A__)
 210               	#  include <avr/iom324.h>
 211               	#elif defined (__AVR_ATmega324PA__)
 212               	#  include <avr/iom324pa.h>
 213               	#elif defined (__AVR_ATmega325__)
 214               	#  include <avr/iom325.h>
 215               	#elif defined (__AVR_ATmega325P__)
 216               	#  include <avr/iom325.h>
 217               	#elif defined (__AVR_ATmega3250__)
 218               	#  include <avr/iom3250.h>
 219               	#elif defined (__AVR_ATmega3250P__)
 220               	#  include <avr/iom3250.h>
 221               	#elif defined (__AVR_ATmega328P__) || defined (__AVR_ATmega328__)
 222               	#  include <avr/iom328p.h>
   1               	/* Copyright (c) 2007 Atmel Corporation
 223               	#elif defined (__AVR_ATmega329__)
 224               	#  include <avr/iom329.h>
 225               	#elif defined (__AVR_ATmega329P__) || defined (__AVR_ATmega329PA__)
 226               	#  include <avr/iom329.h>
 227               	#elif defined (__AVR_ATmega3290__)
 228               	#  include <avr/iom3290.h>
 229               	#elif defined (__AVR_ATmega3290P__)
 230               	#  include <avr/iom3290.h>
 231               	#elif defined (__AVR_ATmega32HVB__)
 232               	#  include <avr/iom32hvb.h>
 233               	#elif defined (__AVR_ATmega406__)
 234               	#  include <avr/iom406.h>
 235               	#elif defined (__AVR_ATmega16__)
 236               	#  include <avr/iom16.h>
 237               	#elif defined (__AVR_ATmega16A__)
 238               	#  include <avr/iom16a.h>
 239               	#elif defined (__AVR_ATmega161__)
 240               	#  include <avr/iom161.h>
 241               	#elif defined (__AVR_ATmega162__)
 242               	#  include <avr/iom162.h>
 243               	#elif defined (__AVR_ATmega163__)
 244               	#  include <avr/iom163.h>
 245               	#elif defined (__AVR_ATmega164P__) || defined (__AVR_ATmega164A__)
 246               	#  include <avr/iom164.h>
 247               	#elif defined (__AVR_ATmega165__) || defined (__AVR_ATmega165A__)
 248               	#  include <avr/iom165.h>
 249               	#elif defined (__AVR_ATmega165P__)
 250               	#  include <avr/iom165p.h>
 251               	#elif defined (__AVR_ATmega168__) || defined (__AVR_ATmega168A__)
 252               	#  include <avr/iom168.h>
 253               	#elif defined (__AVR_ATmega168P__)
 254               	#  include <avr/iom168p.h>
 255               	#elif defined (__AVR_ATmega169__) || defined (__AVR_ATmega169A__)
 256               	#  include <avr/iom169.h>
 257               	#elif defined (__AVR_ATmega169P__)
 258               	#  include <avr/iom169p.h>
 259               	#elif defined (__AVR_ATmega169PA__)
 260               	#  include <avr/iom169pa.h>
 261               	#elif defined (__AVR_ATmega8HVA__)
 262               	#  include <avr/iom8hva.h>
 263               	#elif defined (__AVR_ATmega16HVA__)
 264               	#  include <avr/iom16hva.h>
 265               	#elif defined (__AVR_ATmega16HVA2__)
 266               	#  include <avr/iom16hva2.h>
 267               	#elif defined (__AVR_ATmega16HVB__)
 268               	#  include <avr/iom16hvb.h>
 269               	#elif defined (__AVR_ATmega8__)
 270               	#  include <avr/iom8.h>
 271               	#elif defined (__AVR_ATmega48__) || defined (__AVR_ATmega48A__)
 272               	#  include <avr/iom48.h>
 273               	#elif defined (__AVR_ATmega48P__)
 274               	#  include <avr/iom48p.h>
 275               	#elif defined (__AVR_ATmega88__) || defined (__AVR_ATmega88A__)
 276               	#  include <avr/iom88.h>
 277               	#elif defined (__AVR_ATmega88P__)
 278               	#  include <avr/iom88p.h>
 279               	#elif defined (__AVR_ATmega88PA__)
 280               	#  include <avr/iom88pa.h>
 281               	#elif defined (__AVR_ATmega8515__)
 282               	#  include <avr/iom8515.h>
 283               	#elif defined (__AVR_ATmega8535__)
 284               	#  include <avr/iom8535.h>
 285               	#elif defined (__AVR_AT90S8535__)
 286               	#  include <avr/io8535.h>
 287               	#elif defined (__AVR_AT90C8534__)
 288               	#  include <avr/io8534.h>
 289               	#elif defined (__AVR_AT90S8515__)
 290               	#  include <avr/io8515.h>
 291               	#elif defined (__AVR_AT90S4434__)
 292               	#  include <avr/io4434.h>
 293               	#elif defined (__AVR_AT90S4433__)
 294               	#  include <avr/io4433.h>
 295               	#elif defined (__AVR_AT90S4414__)
 296               	#  include <avr/io4414.h>
 297               	#elif defined (__AVR_ATtiny22__)
 298               	#  include <avr/iotn22.h>
 299               	#elif defined (__AVR_ATtiny26__)
 300               	#  include <avr/iotn26.h>
 301               	#elif defined (__AVR_AT90S2343__)
 302               	#  include <avr/io2343.h>
 303               	#elif defined (__AVR_AT90S2333__)
 304               	#  include <avr/io2333.h>
 305               	#elif defined (__AVR_AT90S2323__)
 306               	#  include <avr/io2323.h>
 307               	#elif defined (__AVR_AT90S2313__)
 308               	#  include <avr/io2313.h>
 309               	#elif defined (__AVR_ATtiny2313__)
 310               	#  include <avr/iotn2313.h>
 311               	#elif defined (__AVR_ATtiny2313A__)
 312               	#  include <avr/iotn2313a.h>
 313               	#elif defined (__AVR_ATtiny13__)
 314               	#  include <avr/iotn13.h>
 315               	#elif defined (__AVR_ATtiny13A__)
 316               	#  include <avr/iotn13a.h>
 317               	#elif defined (__AVR_ATtiny25__)
 318               	#  include <avr/iotn25.h>
 319               	#elif defined (__AVR_ATtiny4313__)
 320               	#  include <avr/iotn4313.h>
 321               	#elif defined (__AVR_ATtiny45__)
 322               	#  include <avr/iotn45.h>
 323               	#elif defined (__AVR_ATtiny85__)
 324               	#  include <avr/iotn85.h>
 325               	#elif defined (__AVR_ATtiny24__)
 326               	#  include <avr/iotn24.h>
 327               	#elif defined (__AVR_ATtiny24A__)
 328               	#  include <avr/iotn24a.h>
 329               	#elif defined (__AVR_ATtiny44__)
 330               	#  include <avr/iotn44.h>
 331               	#elif defined (__AVR_ATtiny44A__)
 332               	#  include <avr/iotn44a.h>
 333               	#elif defined (__AVR_ATtiny84__)
 334               	#  include <avr/iotn84.h>
 335               	#elif defined (__AVR_ATtiny261__)
 336               	#  include <avr/iotn261.h>
 337               	#elif defined (__AVR_ATtiny261A__)
 338               	#  include <avr/iotn261a.h>
 339               	#elif defined (__AVR_ATtiny461__)
 340               	#  include <avr/iotn461.h>
 341               	#elif defined (__AVR_ATtiny461A__)
 342               	#  include <avr/iotn461a.h>
 343               	#elif defined (__AVR_ATtiny861__)
 344               	#  include <avr/iotn861.h>
 345               	#elif defined (__AVR_ATtiny861A__)
 346               	#  include <avr/iotn861a.h>
 347               	#elif defined (__AVR_ATtiny43U__)
 348               	#  include <avr/iotn43u.h>
 349               	#elif defined (__AVR_ATtiny48__)
 350               	#  include <avr/iotn48.h>
 351               	#elif defined (__AVR_ATtiny88__)
 352               	#  include <avr/iotn88.h>
 353               	#elif defined (__AVR_ATtiny87__)
 354               	#  include <avr/iotn87.h>
 355               	#elif defined (__AVR_ATtiny167__)
 356               	#  include <avr/iotn167.h>
 357               	#elif defined (__AVR_AT90SCR100__)
 358               	#  include <avr/io90scr100.h>
 359               	#elif defined (__AVR_ATxmega16A4__)
 360               	#  include <avr/iox16a4.h>
 361               	#elif defined (__AVR_ATxmega16D4__)
 362               	#  include <avr/iox16d4.h>
 363               	#elif defined (__AVR_ATxmega32A4__)
 364               	#  include <avr/iox32a4.h>
 365               	#elif defined (__AVR_ATxmega32D4__)
 366               	#  include <avr/iox32d4.h>
 367               	#elif defined (__AVR_ATxmega64A1__)
 368               	#  include <avr/iox64a1.h>
 369               	#elif defined (__AVR_ATxmega64A3__)
 370               	#  include <avr/iox64a3.h>
 371               	#elif defined (__AVR_ATxmega64D3__)
 372               	#  include <avr/iox64d3.h>
 373               	#elif defined (__AVR_ATxmega128A1__)
 374               	#  include <avr/iox128a1.h>
 375               	#elif defined (__AVR_ATxmega128A3__)
 376               	#  include <avr/iox128a3.h>
 377               	#elif defined (__AVR_ATxmega128D3__)
 378               	#  include <avr/iox128d3.h>
 379               	#elif defined (__AVR_ATxmega192A3__)
 380               	#  include <avr/iox192a3.h>
 381               	#elif defined (__AVR_ATxmega192D3__)
 382               	#  include <avr/iox192d3.h>
 383               	#elif defined (__AVR_ATxmega256A3__)
 384               	#  include <avr/iox256a3.h>
 385               	#elif defined (__AVR_ATxmega256A3B__)
 386               	#  include <avr/iox256a3b.h>
 387               	#elif defined (__AVR_ATxmega256D3__)
 388               	#  include <avr/iox256d3.h>
 389               	#elif defined (__AVR_ATA6289__)
 390               	#  include <avr/ioa6289.h>
 391               	/* avr1: the following only supported for assembler programs */
 392               	#elif defined (__AVR_ATtiny28__)
 393               	#  include <avr/iotn28.h>
 394               	#elif defined (__AVR_AT90S1200__)
 395               	#  include <avr/io1200.h>
 396               	#elif defined (__AVR_ATtiny15__)
 397               	#  include <avr/iotn15.h>
 398               	#elif defined (__AVR_ATtiny12__)
 399               	#  include <avr/iotn12.h>
 400               	#elif defined (__AVR_ATtiny11__)
 401               	#  include <avr/iotn11.h>
 402               	#else
 403               	#  if !defined(__COMPILING_AVR_LIBC__)
 404               	#    warning "device type not defined"
 405               	#  endif
 406               	#endif
 407               	
 408               	#include <avr/portpins.h>
   1               	/* Copyright (c) 2003  Theodore A. Roth
 409               	
 410               	#include <avr/common.h>
   1               	/* Copyright (c) 2007 Eric B. Weddington
 411               	
 412               	#include <avr/version.h>
   1               	/* Copyright (c) 2005, Joerg Wunsch                               -*- c -*-
 413               	
 414               	/* Include fuse.h after individual IO header files. */
 415               	#include <avr/fuse.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 416               	
 417               	/* Include lock.h after individual IO header files. */
 418               	#include <avr/lock.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 419               	
   3               	#include <avr/interrupt.h>
   1               	/* Copyright (c) 2002,2005,2007 Marek Michalkiewicz
   4               	#include "kernel.h"
   1               	
   5               	
   6               	
   7               	
   8               	
   9               	
  10               	
  11               	;;============================define user address or macro starting=========================;;
  12               	.equ     KER_TR ,         1000    ;TickRate in Hz, only defined, not calculated
  13               	.equ     KER_PRS,         0x03    ;For prescaler 64, manually select
  14               	.equ     KER_RLD,         0x82    ;KER_RLD = 0xFF-(F_CPU/KER_PRS/KER_TR), check overflow
  15               	
  16               	.equ     KER_STZ,         128     ;stack size for each task
  17               	.equ     KER_NTASK,       2       ;total tasks
  18               	;;==============================define user address or macro end============================;;
  19               	
  20               	
  21               	
  22               	
  23               	
  24               	;;===========================define hardware reg address starting===========================;;
  25               	.equ     SRSREG,          0x5F    ;manually defined SREG in SRAM
  26               	.equ     SRSPH,           0x5E    ;manually defined SPH in SRAM
  27               	.equ     SRSPL,           0x5D    ;manually defined SPL in SRAM
  28               	
  29               	.equ     SRTIMSK0,        0x6E    ;manually defined TIMSK0 in SRAM
  30               	.equ     SROCR0B,         0x48    ;manually defined OCR0B in SRAM
  31               	.equ     SROCR0A,         0x47    ;manually defined OCR0A in SRAM
  32               	.equ     SRTCNT0,         0x46    ;manually defined TCNT0 in SRAM
  33               	.equ     SRTCCR0B,        0x45    ;manually defined TCCR0B in SRAM
  34               	.equ     SRTCCR0A,        0x44    ;manually defined TCCR0A in SRAM
  35               	.equ     SRTIFR0,         0x35    ;manually defined TIFR0 in SRAM
  36               	
  37               	.equ     IOOCR0B,         0x28    ;manually defined OCR0B in IO
  38               	.equ     IOOCR0A,         0x27    ;manually defined OCR0A in IO
  39               	.equ     IOTCNT0,         0x26    ;manually defined TCNT0 in IO
  40               	.equ     IOTCCR0B,        0x25    ;manually defined TCCR0B in IO
  41               	.equ     IOTCCR0A,        0x24    ;manually defined TCCR0A in IO
  42               	.equ     IOTIFR0,         0x15    ;manually defined TIFR0 in IO
  43               	
  44               	.equ     IOSREG,          0x3F    ;manually defined SREG in IO
  45               	.equ     IOSPH,           0x3E    ;manually defined SPH in IO
  46               	.equ     IOSPL,           0x3D    ;manually defined SPL in IO
  47               	;;==============================define hardware reg address end=============================;;
  48               	
  49               	
  50               	
  51               	
  52               	
  53               	;;=============================define global variables starting=============================;;
  54               	.section  .bss
  55               	
  56               	.global   KerBase                 ;declare global space for kernel
  57 0000 0000 0000 	KerBase:  .skip 10                ;TickCnt(5), rld_val(1), task_id(1), ntask(1), rsrvd(2)
  57      0000 0000 
  57      0000 
  58               	
  59               	.global   KerSP                   ;declare global space for stack pointers
  60 000a 0000 0000 	KerSP:    .skip 20                ;2 bytes for each task, max 10 tasks
  60      0000 0000 
  60      0000 0000 
  60      0000 0000 
  60      0000 0000 
  61               	
  62               	.global   KerStack                ;declare global space for stack
  63 001e 0000 0000 	KerStack: .skip KER_STZ*10        ;KER_STZ bytes for each task
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  63      0000 0000 
  64               	;;================================define global variables end===============================;;
  65               	
  66               	
  67               	
  68               	
  69               	
  70               	;;===============================define vector section starting=============================;;
  71               	.section .vectors, "ax", @progbits
  72               	
  73 0000 0000 0000 	.org    0x20
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  73      0000 0000 
  74:kernel.S      ****         RJMP  __vector_16
  75               	;;=================================define vector section end================================;;
  76               	
  77               	
  78               	
  79               	
  80               	
  81               	;;===============================define text section starting===============================;;
  82               	.section .text
  83               	;;==================================define text section end=================================;;
  84               	
  85               	
  86               	
  87               	
  88               	
  89               	;;==============================define global functions starting============================;;
  90               	.global  Kernel_SysTick_Reg_Init
  91               	.global  Kernel_SysTick_Val_Get
  92               	.global  Kernel_SysTick_Val_Safely_Get
  93               	.global  Kernel_Interrupt_Sts_Get
  94               	.global  Kernel_Task_Init
  95               	.global  Kernel_Start_Tasks
  96               	;;================================define global functions end===============================;;
  97               	
  98               	
  99               	
 100               	
 101               	
 102               	;;============================debug pin operation init starting=============================;; 
 103               	.macro  KER_DEBUG_PIN_INIT                                ;total operation        (  4 clocks) 
 104               	        #ifdef KER_DBG_ENABLE
 105               			SBI   KER_DBG_DDR        , KER_DBG_PIN            ;set bit in DDR         (  2 clocks) 
 106               			CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear port bit         (  2 clocks) 
 107               			#endif
 108               	.endm
 109               	;;==============================debug pin operation init end================================;;
 110               	
 111               	
 112               	
 113               	
 114               	
 115               	;;===========================debug pin operation set starting===============================;; 
 116               	.macro  KER_DEBUG_PIN_SET                                 ;total operation        (  2 clocks) 
 117               	        #ifdef KER_DBG_ENABLE
 118               	        SBI   KER_DBG_PORT       , KER_DBG_PIN            ;set gpio               (  2 clocks) 
 119               			#endif
 120               	.endm
 121               	;;==============================debug pin operation set end=================================;; 
 122               	
 123               	
 124               	
 125               	
 126               	
 127               	;;===========================debug pin operation clear starting=============================;; 
 128               	.macro  KER_DEBUG_PIN_CLEAR                               ;total operation        (  2 clocks) 
 129               	        #ifdef KER_DBG_ENABLE
 130               			CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear gpio             (  2 clocks) 
 131               			#endif
 132               	.endm
 133               	;;==============================debug pin operation clear end===============================;; 
 134               	
 135               	
 136               	
 137               	
 138               	
 139               	;;==============================reload counter value starting===============================;; 
 140               	.macro  KER_COUNTER_RELOAD                                ;total operation        (  4 clocks) 
 141               	        LDS   R16                , KerBase+0x05           ;fetch reload value     (  2 clocks) 
 142               			STS   SRTCNT0            , R16                    ;Set value to TCNT0     (  2 clocks) 
 143               	.endm
 144               	;;=================================reload counter value end=================================;; 
 145               	
 146               	
 147               	
 148               	
 149               	
 150               	;;==================================context save starting===================================;; 
 151               	.macro  KER_CONTEXT_SAVE                                  ;total operation        ( 68 clocks) 
 152               	        PUSH  R0                                          ;save R0                (  2 clocks) 
 153               			IN    R0                 , IOSREG                 ;load SREG              (  1 clock ) 
 154               			PUSH  R0                                          ;save SREG              (  2 clocks) 
 155               			PUSH  R1                                          ;save R1                (  2 clocks) 
 156               			CLR   R1                                          ;clear R1               (  1 clock ) 
 157               			PUSH  R2                                          ;save R2                (  2 clocks) 
 158               			PUSH  R3                                          ;save R3                (  2 clocks) 
 159               			PUSH  R4                                          ;save R4                (  2 clocks) 
 160               			PUSH  R5                                          ;save R5                (  2 clocks) 
 161               			PUSH  R6                                          ;save R6                (  2 clocks) 
 162               			PUSH  R7                                          ;save R7                (  2 clocks) 
 163               			PUSH  R8                                          ;save R8                (  2 clocks) 
 164               			PUSH  R9                                          ;save R9                (  2 clocks) 
 165               			PUSH  R10                                         ;save R10               (  2 clocks) 
 166               			PUSH  R11                                         ;save R11               (  2 clocks) 
 167               			PUSH  R12                                         ;save R12               (  2 clocks) 
 168               			PUSH  R13                                         ;save R13               (  2 clocks) 
 169               			PUSH  R14                                         ;save R14               (  2 clocks) 
 170               			PUSH  R15                                         ;save R15               (  2 clocks) 
 171               			PUSH  R16                                         ;save R16               (  2 clocks) 
 172               			PUSH  R17                                         ;save R17               (  2 clocks) 
 173               			PUSH  R18                                         ;save R18               (  2 clocks) 
 174               			PUSH  R19                                         ;save R19               (  2 clocks) 
 175               			PUSH  R20                                         ;save R20               (  2 clocks) 
 176               			PUSH  R21                                         ;save R21               (  2 clocks) 
 177               			PUSH  R22                                         ;save R22               (  2 clocks) 
 178               			PUSH  R23                                         ;save R23               (  2 clocks) 
 179               			PUSH  R24                                         ;save R24               (  2 clocks) 
 180               			PUSH  R25                                         ;save R25               (  2 clocks) 
 181               			PUSH  R26                                         ;save R26               (  2 clocks) 
 182               			PUSH  R27                                         ;save R27               (  2 clocks) 
 183               			PUSH  R28                                         ;save R28               (  2 clocks) 
 184               			PUSH  R29                                         ;save R29               (  2 clocks) 
 185               			PUSH  R30                                         ;save R30               (  2 clocks) 
 186               			PUSH  R31                                         ;save R31               (  2 clocks) 
 187               	.endm
 188               	;;=====================================context save end=====================================;;
 189               	
 190               	
 191               	
 192               	
 193               	
 194               	;;================================context restore starting==================================;; 
 195               	.macro  KER_CONTEXT_RESTORE                               ;total operation        ( 67 clocks) 
 196               			POP   R31                                         ;restore R31            (  2 clocks) 
 197               			POP   R30                                         ;restore R30            (  2 clocks) 
 198               			POP   R29                                         ;restore R29            (  2 clocks) 
 199               			POP   R28                                         ;restore R28            (  2 clocks) 
 200               			POP   R27                                         ;restore R27            (  2 clocks) 
 201               			POP   R26                                         ;restore R26            (  2 clocks) 
 202               			POP   R25                                         ;restore R25            (  2 clocks) 
 203               			POP   R24                                         ;restore R24            (  2 clocks) 
 204               			POP   R23                                         ;restore R23            (  2 clocks) 
 205               			POP   R22                                         ;restore R22            (  2 clocks) 
 206               			POP   R21                                         ;restore R21            (  2 clocks) 
 207               			POP   R20                                         ;restore R20            (  2 clocks) 
 208               			POP   R19                                         ;restore R19            (  2 clocks) 
 209               			POP   R18                                         ;restore R18            (  2 clocks) 
 210               			POP   R17                                         ;restore R17            (  2 clocks) 
 211               			POP   R16                                         ;restore R16            (  2 clocks) 
 212               			POP   R15                                         ;restore R15            (  2 clocks) 
 213               			POP   R14                                         ;restore R14            (  2 clocks) 
 214               			POP   R13                                         ;restore R13            (  2 clocks) 
 215               			POP   R12                                         ;restore R12            (  2 clocks) 
 216               			POP   R11                                         ;restore R11            (  2 clocks) 
 217               			POP   R10                                         ;restore R10            (  2 clocks) 
 218               			POP   R9                                          ;restore R9             (  2 clocks) 
 219               			POP   R8                                          ;restore R8             (  2 clocks) 
 220               			POP   R7                                          ;restore R7             (  2 clocks) 
 221               			POP   R6                                          ;restore R6             (  2 clocks) 
 222               			POP   R5                                          ;restore R5             (  2 clocks) 
 223               			POP   R4                                          ;restore R4             (  2 clocks) 
 224               			POP   R3                                          ;restore R3             (  2 clocks) 
 225               			POP   R2                                          ;restore R2             (  2 clocks) 
 226               			POP   R1                                          ;restore R1             (  2 clocks) 
 227               			POP   R0                                          ;fetch SREG             (  2 clocks) 
 228               			OUT   IOSREG             , R0                     ;load SREG              (  1 clock ) 
 229               			POP   R0                                          ;restore R0             (  2 clocks) 
 230               	.endm
 231               	;;===================================context restore end====================================;; 
 232               	
 233               	
 234               	
 235               	
 236               	
 237               	;;==============================increment tick counter starting=============================;;
 238               	.macro  KER_TICK_INCREMENT                                ;total operation        ( 27 clocks) 
 239               			LDI   R16                , 0x01                   ;load 1 to R16          (  1 clock )
 240               			LDS   R17                , KerBase+0x00           ;load Byte0             (  2 clocks)
 241               			ADD   R17                , R16                    ;add 1 with Byte0       (  1 clock )
 242               			STS   KerBase+0x00       , R17                    ;set Byte0              (  2 clocks)
 243               			LDI   R16                , 0x00                   ;load 0 to R16          (  1 clock )
 244               			LDS   R17                , KerBase+0x01           ;load Byte1             (  2 clocks)
 245               			ADC   R17                , R16                    ;add carry with Byte1   (  1 clock )
 246               			STS   KerBase+0x01       , R17                    ;set Byte1              (  2 clocks)
 247               			LDS   R17                , KerBase+0x02           ;load Byte2             (  2 clocks)
 248               			ADC   R17                , R16                    ;add carry with Byte2   (  1 clock )
 249               			STS   KerBase+0x02       , R17                    ;set Byte2              (  2 clocks)
 250               			LDS   R17                , KerBase+0x03           ;load Byte3             (  2 clocks)
 251               			ADC   R17                , R16                    ;add carry with Byte3   (  1 clock )
 252               			STS   KerBase+0x03       , R17                    ;set Byte3              (  2 clocks)
 253               			LDS   R17                , KerBase+0x04           ;load Byte4             (  2 clocks)
 254               			ADC   R17                , R16                    ;add carry with Byte4   (  1 clock )
 255               			STS   KerBase+0x04       , R17                    ;set Byte4              (  2 clocks)
 256               	.endm
 257               	;;=================================increment tick counter end===============================;;
 258               	
 259               	
 260               	
 261               	
 262               	
 263               	;;====================================task switch starting==================================;;
 264               	.macro  KER_TASK_SWITCH                                   ;total operation        ( 39 clocks) 
 265               			IN    R24                , IOSPL                  ;fetch SPL0             (  1 clock ) 
 266               			IN    R25                , IOSPH                  ;fetch SPH0             (  1 clock ) 
 267               			LDS   R16                , KerBase+0x06           ;fetch task_id          (  2 clocks) 
 268               			LSL   R16                                         ;left shift to multiply (  1 clock ) 
 269               			LDI   R30                , lo8(KerSP)             ;fetch base pos low     (  1 clock ) 
 270               			LDI   R31                , hi8(KerSP)             ;fetch base pos high    (  1 clock ) 
 271               			ADD   R30                , R16                    ;add offset to array    (  1 clock ) 
 272               			LDI   R16                , 0x00                   ;set 0 to R16           (  1 clock ) 
 273               			ADC   R31                , R16                    ;add carry if any       (  1 clock ) 
 274               			ST    Z+                 , R24                    ;store SPL at ZP        (  2 clocks) 
 275               			ST    z                  , R25                    ;store SPH ZP+1         (  2 clocks) 
 276               			LDS   R16                , KerBase+0x06           ;fetch task_id          (  2 clocks) 
 277               			INC   R16                                         ;increment task index   (  1 clock ) 
 278               			LDS   R17                , KerBase+0x07           ;load ntask             (  2 clocks) 
 279               		_MOD_CONT:
 280               		    CP    R16                , R17                    ;compare R17 with R16   (  1 clock ) 
 281               			BRLO  _MOD_DONE                                   ;if R16<R17, done       (  2 clocks) 
 282               			SUB   R16                , R17                    ;subtract R17 from R16  (  1 clock ) 
 283               			RJMP  _MOD_CONT                                   ;go to loop start       (  2 clocks) 
 284               		_MOD_DONE:
 285               		    STS   KerBase+0x06       , R16                    ;task_id%ntask          (  2 clocks) 
 286               			LSL   R16                                         ;left shift to multiply (  1 clock ) 
 287               			LDI   R30                , lo8(KerSP)             ;fetch base pos low     (  1 clock ) 
 288               			LDI   R31                , hi8(KerSP)             ;fetch base pos high    (  1 clock ) 
 289               			ADD   R30                , R16                    ;add offset to array    (  1 clock ) 
 290               			LDI   R16                , 0x00                   ;set 0 to R16           (  1 clock ) 
 291               			ADC   R31                , R16                    ;add carry if any       (  1 clock ) 
 292               			LD    R24                , Z+                     ;load SPL at ZP         (  2 clocks) 
 293               			LD    R25                , Z                      ;load SPH at ZP         (  2 clocks) 
 294               			OUT   IOSPL              , R24                    ;load SPL0              (  1 clock ) 
 295               			OUT   IOSPH              , R25                    ;load SPH0              (  1 clock ) 
 296               	.endm
 297               	;;=======================================task switch end====================================;; 
 298               	
 299               	
 300               	
 301               	
 302               	
 303               	;;=================================ISR execution starting===================================;; 
 304               	.global  __vector_16
 305               	    __vector_16:                                          ;total operation        (208 clocks) 
 306:kernel.S      **** 	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 307:kernel.S      ****         KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 308:kernel.S      **** 		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 309:kernel.S      **** 		KER_TICK_INCREMENT                                ;increment tick counter ( 27 clocks) 
 310:kernel.S      **** 		KER_TASK_SWITCH                                   ;task switching         ( 38 clocks) 
 311:kernel.S      **** 		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 312:kernel.S      **** 	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 313:kernel.S      **** 		RETI                                              ;return from interrupt  (  4 clocks) 
 314               	;;====================================ISR execution end=====================================;; 
 315               	
 316               	
 317               	
 318               	
 319               	
 320               	;;================================SysTick reg init starting=================================;; 
 321               	Kernel_SysTick_Reg_Init:                                  ;total operation        ( 55 clocks) 
 322:kernel.S      ****         CLI                                               ;disable global int,    (  1 clock ) 
 323:kernel.S      **** 		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 324:kernel.S      **** 		LDI   R16                , 0x00                   ;set 0x00 to R16,       (  1 clock ) 
 325:kernel.S      **** 		STS   KerBase+0x00       , R16                    ;clear  KerBase[0]      (  2 clocks) 
 326:kernel.S      **** 		STS   KerBase+0x01       , R16                    ;clear  KerBase[1]      (  2 clocks) 
 327:kernel.S      **** 		STS   KerBase+0x02       , R16                    ;clear  KerBase[2]      (  2 clocks) 
 328:kernel.S      **** 		STS   KerBase+0x03       , R16                    ;clear  KerBase[3]      (  2 clocks) 
 329:kernel.S      **** 		STS   KerBase+0x04       , R16                    ;clear  KerBase[4]      (  2 clocks) 
 330:kernel.S      **** 		STS   KerBase+0x05       , R16                    ;clear  KerBase[5]      (  2 clocks) 
 331:kernel.S      **** 		STS   KerBase+0x06       , R16                    ;clear  KerBase[6]      (  2 clocks) 
 332:kernel.S      **** 		STS   KerBase+0x07       , R16                    ;clear  KerBase[7]      (  2 clocks) 
 333:kernel.S      **** 		STS   KerBase+0x08       , R16                    ;clear  KerBase[8]      (  2 clocks) 
 334:kernel.S      ****         STS   KerBase+0x09       , R16                    ;clear  KerBase[9]      (  2 clocks) 
 335:kernel.S      **** 		STS   KerBase+0x07       , R16                    ;set ntask to 0         (  2 clocks) 
 336:kernel.S      **** 		STS   SRTCCR0A           , R16                    ;clear TCCR0A           (  2 clocks) 
 337:kernel.S      **** 		STS   SRTCCR0B           , R16                    ;clear TCCR0B           (  2 clocks) 
 338:kernel.S      **** 		STS   SRTIMSK0           , R16                    ;clear TIMSK0           (  2 clocks) 
 339:kernel.S      **** 		STS   SRTIFR0            , R16                    ;clear TIFR0            (  2 clocks) 
 340:kernel.S      **** 		STS   SROCR0A            , R16                    ;clear OCR0A            (  2 clocks) 
 341:kernel.S      **** 		STS   SROCR0B            , R16                    ;clear OCR0B            (  2 clocks) 
 342:kernel.S      **** 		STS   SRTCNT0            , R16                    ;clear TCNT0            (  2 clocks) 
 343:kernel.S      **** 		MOV   R16                , R24                    ;prescaler from arg1    (  1 clock ) 
 344:kernel.S      **** 		STS   SRTCCR0B           , R16                    ;set to TCCR0B          (  2 clocks) 
 345:kernel.S      **** 		MOV   R16                , R22                    ;reload val from arg2   (  1 clock ) 
 346:kernel.S      **** 		STS   KerBase+0x05       , R16                    ;KerBase[5] reload val  (  2 clocks) 
 347:kernel.S      **** 		STS   SRTCNT0            , R16                    ;set to TCNT0           (  2 clocks) 
 348:kernel.S      **** 		LDI   R16                , 0x01                   ;bit mask TOIE0         (  1 clock ) 
 349:kernel.S      **** 		STS   SRTIMSK0           , R16                    ;set to TIMSK0          (  2 clocks) 
 350:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 351               	;;===================================SysTick reg init end===================================;; 
 352               	
 353               	
 354               	
 355               	
 356               	
 357               	;;===============================SysTick value get starting=================================;; 
 358               	Kernel_SysTick_Val_Get:                                   ;total operation        ( 42 clocks) 
 359               	    _UNFINISHED_READ:
 360:kernel.S      ****         LDS   R6		         , KerBase+0x00           ;byte0 (LSB)            (  2 clocks) 
 361:kernel.S      **** 		LDS   R7		         , KerBase+0x01           ;byte1                  (  2 clocks) 
 362:kernel.S      **** 		LDS   R8		         , KerBase+0x02           ;byte2                  (  2 clocks) 
 363:kernel.S      **** 		LDS   R9		         , KerBase+0x03           ;byte3                  (  2 clocks) 
 364:kernel.S      **** 		LDS   R10		         , KerBase+0x04           ;byte4 (MSB)            (  2 clocks) 
 365               			
 366:kernel.S      **** 		LDS   R18		         , KerBase+0x00           ;byte0 (LSB)            (  2 clocks) 
 367:kernel.S      **** 		LDS   R19		         , KerBase+0x01           ;byte1                  (  2 clocks) 
 368:kernel.S      **** 		LDS   R20		         , KerBase+0x02           ;byte2                  (  2 clocks) 
 369:kernel.S      **** 		LDS   R21		         , KerBase+0x03           ;byte3                  (  2 clocks) 
 370:kernel.S      **** 		LDS   R22		         , KerBase+0x04           ;byte4 (MSB)            (  2 clocks) 
 371               	        
 372:kernel.S      **** 		CP    R6                 , R18                    ;compare                (  1 clock )
 373:kernel.S      **** 		BRNE  _UNFINISHED_READ                            ;if !=0, read again     (  2 clocks) 
 374:kernel.S      **** 		CP    R7                 , R19                    ;compare                (  1 clock )
 375:kernel.S      **** 		BRNE  _UNFINISHED_READ                            ;if !=0, read again     (  2 clocks) 
 376:kernel.S      **** 		CP    R8                 , R20                    ;compare                (  1 clock )
 377:kernel.S      **** 		BRNE  _UNFINISHED_READ                            ;if !=0, read again     (  2 clocks) 
 378:kernel.S      **** 		CP    R9                 , R21                    ;compare                (  1 clock )
 379:kernel.S      **** 		BRNE  _UNFINISHED_READ                            ;if !=0, read again     (  2 clocks) 
 380:kernel.S      **** 		CP    R10                , R22                    ;compare                (  1 clock )
 381:kernel.S      **** 		BRNE  _UNFINISHED_READ                            ;if !=0, read again     (  2 clocks) 
 382:kernel.S      **** 		LDI   R23		         , 0x00                   ;byte5 -> R23           (  1 clocks) 
 383:kernel.S      **** 		LDI   R24		         , 0x00                   ;byte6 -> R24           (  1 clocks) 
 384:kernel.S      **** 		LDI   R25		         , 0x00                   ;byte7 -> R25           (  1 clocks) 
 385:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 386               	;;==================================SysTick value get end===================================;; 
 387               	
 388               	
 389               	
 390               	
 391               	
 392               	;;============================SysTick value safely get starting=============================;; 
 393               	Kernel_SysTick_Val_Safely_Get:                            ;total operation        ( 20 clocks) 
 394:kernel.S      ****         IN    R2                 , IOSREG                 ;save SREG              (  1 clock ) 
 395:kernel.S      ****         CLI                                               ;disable interrupts     (  1 clock ) 
 396:kernel.S      **** 		LDS   R18		         , KerBase+0x00           ;byte0 -> R18 (LSB)     (  2 clocks) 
 397:kernel.S      **** 		LDS   R19		         , KerBase+0x01           ;byte1 -> R19           (  2 clocks) 
 398:kernel.S      **** 		LDS   R20		         , KerBase+0x02           ;byte2 -> R20           (  2 clocks) 
 399:kernel.S      **** 		LDS   R21		         , KerBase+0x03           ;byte3 -> R21           (  2 clocks) 
 400:kernel.S      **** 		LDS   R22		         , KerBase+0x04           ;byte4 -> R22           (  2 clocks) 
 401:kernel.S      **** 		LDI   R23		         , 0x00                   ;byte5 -> R23           (  1 clocks) 
 402:kernel.S      **** 		LDI   R24		         , 0x00                   ;byte6 -> R24           (  1 clocks) 
 403:kernel.S      **** 		LDI   R25		         , 0x00                   ;byte7 -> R25 (MSB)     (  1 clocks) 
 404:kernel.S      **** 		OUT   IOSREG             , R2          		      ;restore SREG           (  1 clock ) 
 405:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 406               	;;===============================SysTick value safely get end===============================;;
 407               	
 408               	
 409               	
 410               	
 411               	
 412               	;;==============================interrupt status get starting===============================;; 
 413               	Kernel_Interrupt_Sts_Get:                                 ;total operation        ( 10 clocks) 
 414:kernel.S      ****         LDI   R24		         , 0x00                   ;clear R24              (  1 clock ) 
 415:kernel.S      ****         IN    R16		         , IOSREG                 ;save SREG in R16       (  1 clock ) 
 416:kernel.S      **** 		SBRC  R16		         , 0x07                   ;check I flag->bit7     (  3 clocks) 
 417:kernel.S      **** 		LDI   R24		         , 0x01                   ;set R24 to 1           (  1 clock ) 
 418:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 419               	;;================================interrupt status get end==================================;; 
 420               	
 421               	
 422               	
 423               	
 424               	;;================================kernel task init starting=================================;; 
 425               	Kernel_Task_Init:
 426               	        ;func_ptr->R25:R24, task_id->R22, task_priority->R20
 427               	        ;save main SP & Z pointer
 428:kernel.S      ****         IN    R2                 , IOSPL                  ;save SPL of MSP        (  1 clock ) 
 429:kernel.S      ****         IN    R3                 , IOSPH                  ;save SPH of MSP        (  1 clock ) 
 430:kernel.S      ****         MOV   R4                 , R30                    ;save ZPL               (  2 clocks)
 431:kernel.S      **** 		MOV   R5                 , R31                    ;save ZPH               (  2 clocks)
 432               			
 433               			;increment ntask
 434:kernel.S      **** 		LDS   R16                , KerBase+0x07           ;load ntask             (  2 clocks) 
 435:kernel.S      **** 		INC   R16                                         ;increment ntask        (  1 clock ) 
 436:kernel.S      **** 		STS   KerBase+0x07       , R16                    ;store ntask            (  2 clocks) 
 437               			
 438               			;set stack pointer for current task (KerStack + KER_STZ*(ker_ind+1) - 1) ->stack top
 439:kernel.S      **** 		MOV   R16                , R22                    ;load task_id           (  1 clock ) 
 440:kernel.S      **** 		INC   R16                                         ;increment task_id      (  1 clock ) 
 441:kernel.S      **** 		LDI   R17                , KER_STZ                ;load stack size        (  1 clock ) 
 442:kernel.S      **** 		MUL   R16                , R17                    ;multiply to get offset (  2 clocks) 
 443:kernel.S      **** 		MOV   R30                , R0                     ;load multiplied low    (  2 clocks) 
 444:kernel.S      **** 		MOV   R31                , R1                     ;load multiplied high   (  2 clocks) 
 445:kernel.S      **** 		SBIW  R30                , 0x01                   ;KER_STZ*(task_id+1)-1  (  2 clocks) 
 446:kernel.S      **** 		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 447:kernel.S      **** 		LDI   R16                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
 448:kernel.S      **** 		LDI   R17                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
 449:kernel.S      **** 		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 450:kernel.S      **** 		ADC   R31                , R17                    ;add high bytes+carry   (  1 clock ) 
 451:kernel.S      **** 		OUT   IOSPL              , R30                    ;load SPL               (  1 clock ) 
 452:kernel.S      ****         OUT   IOSPH              , R31                    ;load SPH               (  1 clock ) 
 453               			
 454               			;function argument directly returns word address
 455:kernel.S      **** 	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
 456:kernel.S      **** 		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 457               			
 458               			;push context to stack of this task
 459:kernel.S      **** 		KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 460               			
 461               			;read stack pointer of current task (necessary when restore)
 462:kernel.S      **** 		IN    R16                , IOSPL                  ;read SPL               (  1 clock ) 
 463:kernel.S      ****         IN    R17                , IOSPH                  ;read SPH               (  1 clock ) 
 464               			
 465               			;calculate the address where current task's SP will be stored and store SP
 466:kernel.S      **** 		MOV   R18                , R22                    ;fetch task_id from arg (  1 clock ) 
 467:kernel.S      **** 		LSL   R18                                         ;left shift to multiply (  1 clock ) 
 468:kernel.S      **** 		LDI   R30                , lo8(KerSP)             ;fetch base pos low     (  1 clock ) 
 469:kernel.S      **** 		LDI   R31                , hi8(KerSP)             ;fetch base pos high    (  1 clock ) 
 470:kernel.S      **** 		ADD   R30                , R18                    ;add offset to array    (  1 clock ) 
 471:kernel.S      **** 		LDI   R18                , 0x00                   ;set 0 to R16           (  1 clock ) 
 472:kernel.S      **** 		ADC   R31                , R18                    ;add carry if any       (  1 clock ) 
 473:kernel.S      **** 		ST    Z+                 , R16                    ;SPL at KerSp+offset    (  2 clocks) 
 474:kernel.S      **** 		ST    z                  , R17                    ;SPH at KerSp+offset    (  2 clocks) 
 475               			
 476               			;load Main SP, restore Z pointer
 477:kernel.S      **** 		OUT   IOSPL              , R2                     ;load SPL               (  1 clock )
 478:kernel.S      ****         OUT   IOSPH              , R3                     ;load SPH               (  1 clock )
 479:kernel.S      **** 		MOV   R30                , R4                     ;push ZPL               (  2 clocks)
 480:kernel.S      **** 		MOV   R31                , R5                     ;push ZPL               (  2 clocks)
 481:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 482               	;;===================================kernel task init end===================================;; 
 483               	
 484               	
 485               	
 486               	
 487               	
 488               	;;===================================Kernel Task starting===================================;;
 489               	Kernel_Start_Tasks:
 490               			;start executing from task0
 491               			;save ZP
 492:kernel.S      **** 		MOV   R4                 , R30                    ;save ZPL               (  2 clocks)
 493:kernel.S      **** 		MOV   R5                 , R31                    ;save ZPH               (  2 clocks)
 494               			
 495               			;load ZP with addr+offset
 496:kernel.S      **** 		LDI   R30                , lo8(KerSP)             ;fetch ZPL KerSP        (  1 clock )
 497:kernel.S      **** 		LDI   R31                , hi8(KerSP)             ;fetch ZPH KerSP        (  1 clock )
 498               			
 499               			;load last task's SP
 500:kernel.S      **** 		LD    R16                , Z+                     ;load val from Z, inc Z (  2 clocks)
 501:kernel.S      **** 		LD    R17                , Z                      ;load val from Z+1      (  2 clocks)
 502               			
 503               			;set last task's SP
 504:kernel.S      **** 		OUT   IOSPL              , R16                    ;load SPL               (  1 clock ) 
 505:kernel.S      ****         OUT   IOSPH              , R17                    ;load SPH               (  1 clock ) 
 506               	       
 507               	        ;forcefully restore context, in ISR it will be stored automatically
 508:kernel.S      **** 		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 509               			
 510               			;restore ZP
 511:kernel.S      **** 		MOV   R30                , R4                     ;push ZPL               (  2 clocks)
 512:kernel.S      **** 		MOV   R31                , R5                     ;push ZPL               (  2 clocks)
 513               			
 514               			;enable global interrupt to start executing task, starting with last task entry
 515:kernel.S      **** 		SEI                                               ;enable global int      (  1 clock ) 
 516               			
 517               			;execute return to jump to last task's function address, pushed while task init
 518:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 519               	;;======================================Kernel Task end=====================================;;
DEFINED SYMBOLS
            kernel.S:12     *ABS*:000003e8 KER_TR
            kernel.S:13     *ABS*:00000003 KER_PRS
            kernel.S:14     *ABS*:00000082 KER_RLD
            kernel.S:16     *ABS*:00000080 KER_STZ
            kernel.S:17     *ABS*:00000002 KER_NTASK
            kernel.S:25     *ABS*:0000005f SRSREG
            kernel.S:26     *ABS*:0000005e SRSPH
            kernel.S:27     *ABS*:0000005d SRSPL
            kernel.S:29     *ABS*:0000006e SRTIMSK0
            kernel.S:30     *ABS*:00000048 SROCR0B
            kernel.S:31     *ABS*:00000047 SROCR0A
            kernel.S:32     *ABS*:00000046 SRTCNT0
            kernel.S:33     *ABS*:00000045 SRTCCR0B
            kernel.S:34     *ABS*:00000044 SRTCCR0A
            kernel.S:35     *ABS*:00000035 SRTIFR0
            kernel.S:37     *ABS*:00000028 IOOCR0B
            kernel.S:38     *ABS*:00000027 IOOCR0A
            kernel.S:39     *ABS*:00000026 IOTCNT0
            kernel.S:40     *ABS*:00000025 IOTCCR0B
            kernel.S:41     *ABS*:00000024 IOTCCR0A
            kernel.S:42     *ABS*:00000015 IOTIFR0
            kernel.S:44     *ABS*:0000003f IOSREG
            kernel.S:45     *ABS*:0000003e IOSPH
            kernel.S:46     *ABS*:0000003d IOSPL
            kernel.S:57     .bss:00000000 KerBase
            kernel.S:60     .bss:0000000a KerSP
            kernel.S:63     .bss:0000001e KerStack
            kernel.S:305    .text:00000000 __vector_16
            kernel.S:321    .text:00000110 Kernel_SysTick_Reg_Init
            kernel.S:358    .text:00000178 Kernel_SysTick_Val_Get
            kernel.S:393    .text:000001bc Kernel_SysTick_Val_Safely_Get
            kernel.S:413    .text:000001de Kernel_Interrupt_Sts_Get
            kernel.S:425    .text:000001e8 Kernel_Task_Init
            kernel.S:489    .text:00000280 Kernel_Start_Tasks
            kernel.S:310    .text:000000a8 _MOD_CONT
            kernel.S:310    .text:000000b0 _MOD_DONE
            kernel.S:359    .text:00000178 _UNFINISHED_READ

NO UNDEFINED SYMBOLS
