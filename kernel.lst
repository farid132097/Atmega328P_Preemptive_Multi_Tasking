   1               	# 1 "kernel.S"
   1               	
   0               	
   0               	
   2               	#include <avr/io.h>
   1               	/* Copyright (c) 2002,2003,2005,2006,2007 Marek Michalkiewicz, Joerg Wunsch
   2               	   Copyright (c) 2007 Eric B. Weddington
   3               	   All rights reserved.
   4               	
   5               	   Redistribution and use in source and binary forms, with or without
   6               	   modification, are permitted provided that the following conditions are met:
   7               	
   8               	   * Redistributions of source code must retain the above copyright
   9               	     notice, this list of conditions and the following disclaimer.
  10               	
  11               	   * Redistributions in binary form must reproduce the above copyright
  12               	     notice, this list of conditions and the following disclaimer in
  13               	     the documentation and/or other materials provided with the
  14               	     distribution.
  15               	
  16               	   * Neither the name of the copyright holders nor the names of
  17               	     contributors may be used to endorse or promote products derived
  18               	     from this software without specific prior written permission.
  19               	
  20               	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21               	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22               	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23               	  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24               	  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25               	  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26               	  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27               	  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28               	  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29               	  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30               	  POSSIBILITY OF SUCH DAMAGE. */
  31               	
  32               	/* $Id: io.h,v 1.52.2.28 2009/12/20 17:02:53 arcanum Exp $ */
  33               	
  34               	/** \file */
  35               	/** \defgroup avr_io <avr/io.h>: AVR device-specific IO definitions
  36               	    \code #include <avr/io.h> \endcode
  37               	
  38               	    This header file includes the apropriate IO definitions for the
  39               	    device that has been specified by the <tt>-mmcu=</tt> compiler
  40               	    command-line switch.  This is done by diverting to the appropriate
  41               	    file <tt>&lt;avr/io</tt><em>XXXX</em><tt>.h&gt;</tt> which should
  42               	    never be included directly.  Some register names common to all
  43               	    AVR devices are defined directly within <tt>&lt;avr/common.h&gt;</tt>,
  44               	    which is included in <tt>&lt;avr/io.h&gt;</tt>,
  45               	    but most of the details come from the respective include file.
  46               	
  47               	    Note that this file always includes the following files:
  48               	    \code 
  49               	    #include <avr/sfr_defs.h>
  50               	    #include <avr/portpins.h>
  51               	    #include <avr/common.h>
  52               	    #include <avr/version.h>
  53               	    \endcode
  54               	    See \ref avr_sfr for more details about that header file.
  55               	
  56               	    Included are definitions of the IO register set and their
  57               	    respective bit values as specified in the Atmel documentation.
  58               	    Note that inconsistencies in naming conventions,
  59               	    so even identical functions sometimes get different names on
  60               	    different devices.
  61               	
  62               	    Also included are the specific names useable for interrupt
  63               	    function definitions as documented
  64               	    \ref avr_signames "here".
  65               	
  66               	    Finally, the following macros are defined:
  67               	
  68               	    - \b RAMEND
  69               	    <br>
  70               	    The last on-chip RAM address.
  71               	    <br>
  72               	    - \b XRAMEND
  73               	    <br>
  74               	    The last possible RAM location that is addressable. This is equal to 
  75               	    RAMEND for devices that do not allow for external RAM. For devices 
  76               	    that allow external RAM, this will be larger than RAMEND.
  77               	    <br>
  78               	    - \b E2END
  79               	    <br>
  80               	    The last EEPROM address.
  81               	    <br>
  82               	    - \b FLASHEND
  83               	    <br>
  84               	    The last byte address in the Flash program space.
  85               	    <br>
  86               	    - \b SPM_PAGESIZE
  87               	    <br>
  88               	    For devices with bootloader support, the flash pagesize
  89               	    (in bytes) to be used for the \c SPM instruction. 
  90               	    - \b E2PAGESIZE
  91               	    <br>
  92               	    The size of the EEPROM page.
  93               	    
  94               	*/
  95               	
  96               	#ifndef _AVR_IO_H_
  97               	#define _AVR_IO_H_
  98               	
  99               	#include <avr/sfr_defs.h>
   1               	/* Copyright (c) 2002, Marek Michalkiewicz <marekm@amelek.gda.pl>
 100               	
 101               	#if defined (__AVR_AT94K__)
 102               	#  include <avr/ioat94k.h>
 103               	#elif defined (__AVR_AT43USB320__)
 104               	#  include <avr/io43u32x.h>
 105               	#elif defined (__AVR_AT43USB355__)
 106               	#  include <avr/io43u35x.h>
 107               	#elif defined (__AVR_AT76C711__)
 108               	#  include <avr/io76c711.h>
 109               	#elif defined (__AVR_AT86RF401__)
 110               	#  include <avr/io86r401.h>
 111               	#elif defined (__AVR_AT90PWM1__)
 112               	#  include <avr/io90pwm1.h>
 113               	#elif defined (__AVR_AT90PWM2__)
 114               	#  include <avr/io90pwmx.h>
 115               	#elif defined (__AVR_AT90PWM2B__)
 116               	#  include <avr/io90pwm2b.h>
 117               	#elif defined (__AVR_AT90PWM3__)
 118               	#  include <avr/io90pwmx.h>
 119               	#elif defined (__AVR_AT90PWM3B__)
 120               	#  include <avr/io90pwm3b.h>
 121               	#elif defined (__AVR_AT90PWM216__)
 122               	#  include <avr/io90pwm216.h>
 123               	#elif defined (__AVR_AT90PWM316__)
 124               	#  include <avr/io90pwm316.h>
 125               	#elif defined (__AVR_AT90PWM81__)
 126               	#  include <avr/io90pwm81.h>
 127               	#elif defined (__AVR_ATmega8U2__)
 128               	#  include <avr/iom8u2.h>
 129               	#elif defined (__AVR_ATmega16M1__)
 130               	#  include <avr/iom16m1.h>
 131               	#elif defined (__AVR_ATmega16U2__)
 132               	#  include <avr/iom16u2.h>
 133               	#elif defined (__AVR_ATmega16U4__)
 134               	#  include <avr/iom16u4.h>
 135               	#elif defined (__AVR_ATmega32C1__)
 136               	#  include <avr/iom32c1.h>
 137               	#elif defined (__AVR_ATmega32M1__)
 138               	#  include <avr/iom32m1.h>
 139               	#elif defined (__AVR_ATmega32U2__)
 140               	#  include <avr/iom32u2.h>
 141               	#elif defined (__AVR_ATmega32U4__)
 142               	#  include <avr/iom32u4.h>
 143               	#elif defined (__AVR_ATmega32U6__)
 144               	#  include <avr/iom32u6.h>
 145               	#elif defined (__AVR_ATmega64C1__)
 146               	#  include <avr/iom64c1.h>
 147               	#elif defined (__AVR_ATmega64M1__)
 148               	#  include <avr/iom64m1.h>
 149               	#elif defined (__AVR_ATmega128__)
 150               	#  include <avr/iom128.h>
 151               	#elif defined (__AVR_ATmega1280__)
 152               	#  include <avr/iom1280.h>
 153               	#elif defined (__AVR_ATmega1281__)
 154               	#  include <avr/iom1281.h>
 155               	#elif defined (__AVR_ATmega1284P__)
 156               	#  include <avr/iom1284p.h>
 157               	#elif defined (__AVR_ATmega128RFA1__)
 158               	#  include <avr/iom128rfa1.h>
 159               	#elif defined (__AVR_ATmega2560__)
 160               	#  include <avr/iom2560.h>
 161               	#elif defined (__AVR_ATmega2561__)
 162               	#  include <avr/iom2561.h>
 163               	#elif defined (__AVR_AT90CAN32__)
 164               	#  include <avr/iocan32.h>
 165               	#elif defined (__AVR_AT90CAN64__)
 166               	#  include <avr/iocan64.h>
 167               	#elif defined (__AVR_AT90CAN128__)
 168               	#  include <avr/iocan128.h>
 169               	#elif defined (__AVR_AT90USB82__)
 170               	#  include <avr/iousb82.h>
 171               	#elif defined (__AVR_AT90USB162__)
 172               	#  include <avr/iousb162.h>
 173               	#elif defined (__AVR_AT90USB646__)
 174               	#  include <avr/iousb646.h>
 175               	#elif defined (__AVR_AT90USB647__)
 176               	#  include <avr/iousb647.h>
 177               	#elif defined (__AVR_AT90USB1286__)
 178               	#  include <avr/iousb1286.h>
 179               	#elif defined (__AVR_AT90USB1287__)
 180               	#  include <avr/iousb1287.h>
 181               	#elif defined (__AVR_ATmega64__)
 182               	#  include <avr/iom64.h>
 183               	#elif defined (__AVR_ATmega640__)
 184               	#  include <avr/iom640.h>
 185               	#elif defined (__AVR_ATmega644__) || defined (__AVR_ATmega644A__)
 186               	#  include <avr/iom644.h>
 187               	#elif defined (__AVR_ATmega644P__)
 188               	#  include <avr/iom644p.h>
 189               	#elif defined (__AVR_ATmega644PA__)
 190               	#  include <avr/iom644pa.h>
 191               	#elif defined (__AVR_ATmega645__) || defined (__AVR_ATmega645A__) || defined (__AVR_ATmega645P__)
 192               	#  include <avr/iom645.h>
 193               	#elif defined (__AVR_ATmega6450__) || defined (__AVR_ATmega6450A__) || defined (__AVR_ATmega6450P__
 194               	#  include <avr/iom6450.h>
 195               	#elif defined (__AVR_ATmega649__) || defined (__AVR_ATmega649A__)
 196               	#  include <avr/iom649.h>
 197               	#elif defined (__AVR_ATmega6490__) || defined (__AVR_ATmega6490A__) || defined (__AVR_ATmega6490P__
 198               	#  include <avr/iom6490.h>
 199               	#elif defined (__AVR_ATmega649P__)
 200               	#  include <avr/iom649p.h>
 201               	#elif defined (__AVR_ATmega64HVE__)
 202               	#  include <avr/iom64hve.h>
 203               	#elif defined (__AVR_ATmega103__)
 204               	#  include <avr/iom103.h>
 205               	#elif defined (__AVR_ATmega32__)
 206               	#  include <avr/iom32.h>
 207               	#elif defined (__AVR_ATmega323__)
 208               	#  include <avr/iom323.h>
 209               	#elif defined (__AVR_ATmega324P__) || defined (__AVR_ATmega324A__)
 210               	#  include <avr/iom324.h>
 211               	#elif defined (__AVR_ATmega324PA__)
 212               	#  include <avr/iom324pa.h>
 213               	#elif defined (__AVR_ATmega325__)
 214               	#  include <avr/iom325.h>
 215               	#elif defined (__AVR_ATmega325P__)
 216               	#  include <avr/iom325.h>
 217               	#elif defined (__AVR_ATmega3250__)
 218               	#  include <avr/iom3250.h>
 219               	#elif defined (__AVR_ATmega3250P__)
 220               	#  include <avr/iom3250.h>
 221               	#elif defined (__AVR_ATmega328P__) || defined (__AVR_ATmega328__)
 222               	#  include <avr/iom328p.h>
   1               	/* Copyright (c) 2007 Atmel Corporation
 223               	#elif defined (__AVR_ATmega329__)
 224               	#  include <avr/iom329.h>
 225               	#elif defined (__AVR_ATmega329P__) || defined (__AVR_ATmega329PA__)
 226               	#  include <avr/iom329.h>
 227               	#elif defined (__AVR_ATmega3290__)
 228               	#  include <avr/iom3290.h>
 229               	#elif defined (__AVR_ATmega3290P__)
 230               	#  include <avr/iom3290.h>
 231               	#elif defined (__AVR_ATmega32HVB__)
 232               	#  include <avr/iom32hvb.h>
 233               	#elif defined (__AVR_ATmega406__)
 234               	#  include <avr/iom406.h>
 235               	#elif defined (__AVR_ATmega16__)
 236               	#  include <avr/iom16.h>
 237               	#elif defined (__AVR_ATmega16A__)
 238               	#  include <avr/iom16a.h>
 239               	#elif defined (__AVR_ATmega161__)
 240               	#  include <avr/iom161.h>
 241               	#elif defined (__AVR_ATmega162__)
 242               	#  include <avr/iom162.h>
 243               	#elif defined (__AVR_ATmega163__)
 244               	#  include <avr/iom163.h>
 245               	#elif defined (__AVR_ATmega164P__) || defined (__AVR_ATmega164A__)
 246               	#  include <avr/iom164.h>
 247               	#elif defined (__AVR_ATmega165__) || defined (__AVR_ATmega165A__)
 248               	#  include <avr/iom165.h>
 249               	#elif defined (__AVR_ATmega165P__)
 250               	#  include <avr/iom165p.h>
 251               	#elif defined (__AVR_ATmega168__) || defined (__AVR_ATmega168A__)
 252               	#  include <avr/iom168.h>
 253               	#elif defined (__AVR_ATmega168P__)
 254               	#  include <avr/iom168p.h>
 255               	#elif defined (__AVR_ATmega169__) || defined (__AVR_ATmega169A__)
 256               	#  include <avr/iom169.h>
 257               	#elif defined (__AVR_ATmega169P__)
 258               	#  include <avr/iom169p.h>
 259               	#elif defined (__AVR_ATmega169PA__)
 260               	#  include <avr/iom169pa.h>
 261               	#elif defined (__AVR_ATmega8HVA__)
 262               	#  include <avr/iom8hva.h>
 263               	#elif defined (__AVR_ATmega16HVA__)
 264               	#  include <avr/iom16hva.h>
 265               	#elif defined (__AVR_ATmega16HVA2__)
 266               	#  include <avr/iom16hva2.h>
 267               	#elif defined (__AVR_ATmega16HVB__)
 268               	#  include <avr/iom16hvb.h>
 269               	#elif defined (__AVR_ATmega8__)
 270               	#  include <avr/iom8.h>
 271               	#elif defined (__AVR_ATmega48__) || defined (__AVR_ATmega48A__)
 272               	#  include <avr/iom48.h>
 273               	#elif defined (__AVR_ATmega48P__)
 274               	#  include <avr/iom48p.h>
 275               	#elif defined (__AVR_ATmega88__) || defined (__AVR_ATmega88A__)
 276               	#  include <avr/iom88.h>
 277               	#elif defined (__AVR_ATmega88P__)
 278               	#  include <avr/iom88p.h>
 279               	#elif defined (__AVR_ATmega88PA__)
 280               	#  include <avr/iom88pa.h>
 281               	#elif defined (__AVR_ATmega8515__)
 282               	#  include <avr/iom8515.h>
 283               	#elif defined (__AVR_ATmega8535__)
 284               	#  include <avr/iom8535.h>
 285               	#elif defined (__AVR_AT90S8535__)
 286               	#  include <avr/io8535.h>
 287               	#elif defined (__AVR_AT90C8534__)
 288               	#  include <avr/io8534.h>
 289               	#elif defined (__AVR_AT90S8515__)
 290               	#  include <avr/io8515.h>
 291               	#elif defined (__AVR_AT90S4434__)
 292               	#  include <avr/io4434.h>
 293               	#elif defined (__AVR_AT90S4433__)
 294               	#  include <avr/io4433.h>
 295               	#elif defined (__AVR_AT90S4414__)
 296               	#  include <avr/io4414.h>
 297               	#elif defined (__AVR_ATtiny22__)
 298               	#  include <avr/iotn22.h>
 299               	#elif defined (__AVR_ATtiny26__)
 300               	#  include <avr/iotn26.h>
 301               	#elif defined (__AVR_AT90S2343__)
 302               	#  include <avr/io2343.h>
 303               	#elif defined (__AVR_AT90S2333__)
 304               	#  include <avr/io2333.h>
 305               	#elif defined (__AVR_AT90S2323__)
 306               	#  include <avr/io2323.h>
 307               	#elif defined (__AVR_AT90S2313__)
 308               	#  include <avr/io2313.h>
 309               	#elif defined (__AVR_ATtiny2313__)
 310               	#  include <avr/iotn2313.h>
 311               	#elif defined (__AVR_ATtiny2313A__)
 312               	#  include <avr/iotn2313a.h>
 313               	#elif defined (__AVR_ATtiny13__)
 314               	#  include <avr/iotn13.h>
 315               	#elif defined (__AVR_ATtiny13A__)
 316               	#  include <avr/iotn13a.h>
 317               	#elif defined (__AVR_ATtiny25__)
 318               	#  include <avr/iotn25.h>
 319               	#elif defined (__AVR_ATtiny4313__)
 320               	#  include <avr/iotn4313.h>
 321               	#elif defined (__AVR_ATtiny45__)
 322               	#  include <avr/iotn45.h>
 323               	#elif defined (__AVR_ATtiny85__)
 324               	#  include <avr/iotn85.h>
 325               	#elif defined (__AVR_ATtiny24__)
 326               	#  include <avr/iotn24.h>
 327               	#elif defined (__AVR_ATtiny24A__)
 328               	#  include <avr/iotn24a.h>
 329               	#elif defined (__AVR_ATtiny44__)
 330               	#  include <avr/iotn44.h>
 331               	#elif defined (__AVR_ATtiny44A__)
 332               	#  include <avr/iotn44a.h>
 333               	#elif defined (__AVR_ATtiny84__)
 334               	#  include <avr/iotn84.h>
 335               	#elif defined (__AVR_ATtiny261__)
 336               	#  include <avr/iotn261.h>
 337               	#elif defined (__AVR_ATtiny261A__)
 338               	#  include <avr/iotn261a.h>
 339               	#elif defined (__AVR_ATtiny461__)
 340               	#  include <avr/iotn461.h>
 341               	#elif defined (__AVR_ATtiny461A__)
 342               	#  include <avr/iotn461a.h>
 343               	#elif defined (__AVR_ATtiny861__)
 344               	#  include <avr/iotn861.h>
 345               	#elif defined (__AVR_ATtiny861A__)
 346               	#  include <avr/iotn861a.h>
 347               	#elif defined (__AVR_ATtiny43U__)
 348               	#  include <avr/iotn43u.h>
 349               	#elif defined (__AVR_ATtiny48__)
 350               	#  include <avr/iotn48.h>
 351               	#elif defined (__AVR_ATtiny88__)
 352               	#  include <avr/iotn88.h>
 353               	#elif defined (__AVR_ATtiny87__)
 354               	#  include <avr/iotn87.h>
 355               	#elif defined (__AVR_ATtiny167__)
 356               	#  include <avr/iotn167.h>
 357               	#elif defined (__AVR_AT90SCR100__)
 358               	#  include <avr/io90scr100.h>
 359               	#elif defined (__AVR_ATxmega16A4__)
 360               	#  include <avr/iox16a4.h>
 361               	#elif defined (__AVR_ATxmega16D4__)
 362               	#  include <avr/iox16d4.h>
 363               	#elif defined (__AVR_ATxmega32A4__)
 364               	#  include <avr/iox32a4.h>
 365               	#elif defined (__AVR_ATxmega32D4__)
 366               	#  include <avr/iox32d4.h>
 367               	#elif defined (__AVR_ATxmega64A1__)
 368               	#  include <avr/iox64a1.h>
 369               	#elif defined (__AVR_ATxmega64A3__)
 370               	#  include <avr/iox64a3.h>
 371               	#elif defined (__AVR_ATxmega64D3__)
 372               	#  include <avr/iox64d3.h>
 373               	#elif defined (__AVR_ATxmega128A1__)
 374               	#  include <avr/iox128a1.h>
 375               	#elif defined (__AVR_ATxmega128A3__)
 376               	#  include <avr/iox128a3.h>
 377               	#elif defined (__AVR_ATxmega128D3__)
 378               	#  include <avr/iox128d3.h>
 379               	#elif defined (__AVR_ATxmega192A3__)
 380               	#  include <avr/iox192a3.h>
 381               	#elif defined (__AVR_ATxmega192D3__)
 382               	#  include <avr/iox192d3.h>
 383               	#elif defined (__AVR_ATxmega256A3__)
 384               	#  include <avr/iox256a3.h>
 385               	#elif defined (__AVR_ATxmega256A3B__)
 386               	#  include <avr/iox256a3b.h>
 387               	#elif defined (__AVR_ATxmega256D3__)
 388               	#  include <avr/iox256d3.h>
 389               	#elif defined (__AVR_ATA6289__)
 390               	#  include <avr/ioa6289.h>
 391               	/* avr1: the following only supported for assembler programs */
 392               	#elif defined (__AVR_ATtiny28__)
 393               	#  include <avr/iotn28.h>
 394               	#elif defined (__AVR_AT90S1200__)
 395               	#  include <avr/io1200.h>
 396               	#elif defined (__AVR_ATtiny15__)
 397               	#  include <avr/iotn15.h>
 398               	#elif defined (__AVR_ATtiny12__)
 399               	#  include <avr/iotn12.h>
 400               	#elif defined (__AVR_ATtiny11__)
 401               	#  include <avr/iotn11.h>
 402               	#else
 403               	#  if !defined(__COMPILING_AVR_LIBC__)
 404               	#    warning "device type not defined"
 405               	#  endif
 406               	#endif
 407               	
 408               	#include <avr/portpins.h>
   1               	/* Copyright (c) 2003  Theodore A. Roth
 409               	
 410               	#include <avr/common.h>
   1               	/* Copyright (c) 2007 Eric B. Weddington
 411               	
 412               	#include <avr/version.h>
   1               	/* Copyright (c) 2005, Joerg Wunsch                               -*- c -*-
 413               	
 414               	/* Include fuse.h after individual IO header files. */
 415               	#include <avr/fuse.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 416               	
 417               	/* Include lock.h after individual IO header files. */
 418               	#include <avr/lock.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 419               	
   3               	#include <avr/interrupt.h>
   1               	/* Copyright (c) 2002,2005,2007 Marek Michalkiewicz
   4               	#include "kernel.h"
   1               	
   5               	
   6               	
   7               	
   8               	
   9               	
  10               	
  11               	;;============================define user address or macro starting=========================;; 
  12               	.equ     KER_TR ,         1000    ;TickRate in Hz, only defined, not calculated
  13               	.equ     KER_PRS,         0x03    ;For prescaler 64, manually select
  14               	.equ     KER_RLD,         0x82    ;KER_RLD = 0xFF-(F_CPU/KER_PRS/KER_TR), check overflow
  15               	.equ     KER_STK_SZ,      128     ;stack size in bytes for each task
  16               	.equ     KER_MX_NTSK,     10      ;max number of tasks
  17               	;;==============================define user address or macro end============================;; 
  18               	
  19               	
  20               	
  21               	
  22               	
  23               	;;===============================define data offsets starting===============================;; 
  24               	.equ     OFF_TICK0,       0x00    ;tick count byte0 offset from KerBase
  25               	.equ     OFF_TICK1,       0x01    ;tick count byte1 offset from KerBase
  26               	.equ     OFF_TICK2,       0x02    ;tick count byte2 offset from KerBase
  27               	.equ     OFF_TICK3,       0x03    ;tick count byte3 offset from KerBase
  28               	.equ     OFF_TICK4,       0x04    ;tick count byte4 offset from KerBase
  29               	.equ     OFF_PRS  ,       0x05    ;counter prescaler offset from KerBase
  30               	.equ     OFF_RLD  ,       0x06    ;counter reload offset from KerBase
  31               	.equ     OFF_TID  ,       0x07    ;task id offset from KerBase
  32               	.equ     OFF_NTSK ,       0x08    ;ntask offset from KerBase
  33               	;;==================================define data offsets end=================================;; 
  34               	
  35               	
  36               	
  37               	
  38               	
  39               	;;===============================define system macro starting===============================;; 
  40               	.equ     TASK_READY ,     0x01    ;bit 0 in system status reg
  41               	.equ     TASK_BLOCK ,     0x00    ;bit 0 in system status reg
  42               	;;==================================define system macro end=================================;; 
  43               	
  44               	
  45               	
  46               	
  47               	
  48               	;;===========================define hardware reg address starting===========================;; 
  49               	.equ     SRSREG,          0x5F    ;manually defined SREG in SRAM
  50               	.equ     SRSPH,           0x5E    ;manually defined SPH in SRAM
  51               	.equ     SRSPL,           0x5D    ;manually defined SPL in SRAM
  52               	
  53               	.equ     SRTIMSK0,        0x6E    ;manually defined TIMSK0 in SRAM
  54               	.equ     SROCR0B,         0x48    ;manually defined OCR0B in SRAM
  55               	.equ     SROCR0A,         0x47    ;manually defined OCR0A in SRAM
  56               	.equ     SRTCNT0,         0x46    ;manually defined TCNT0 in SRAM
  57               	.equ     SRTCCR0B,        0x45    ;manually defined TCCR0B in SRAM
  58               	.equ     SRTCCR0A,        0x44    ;manually defined TCCR0A in SRAM
  59               	.equ     SRTIFR0,         0x35    ;manually defined TIFR0 in SRAM
  60               	
  61               	.equ     IOOCR0B,         0x28    ;manually defined OCR0B in IO
  62               	.equ     IOOCR0A,         0x27    ;manually defined OCR0A in IO
  63               	.equ     IOTCNT0,         0x26    ;manually defined TCNT0 in IO
  64               	.equ     IOTCCR0B,        0x25    ;manually defined TCCR0B in IO
  65               	.equ     IOTCCR0A,        0x24    ;manually defined TCCR0A in IO
  66               	.equ     IOTIFR0,         0x15    ;manually defined TIFR0 in IO
  67               	
  68               	.equ     IOSREG,          0x3F    ;manually defined SREG in IO
  69               	.equ     IOSPH,           0x3E    ;manually defined SPH in IO
  70               	.equ     IOSPL,           0x3D    ;manually defined SPL in IO
  71               	;;==============================define hardware reg address end=============================;; 
  72               	
  73               	
  74               	
  75               	
  76               	
  77               	;;=============================define global variables starting=============================;; 
  78               	.section   .bss
  79               	
  80               	.global    KerBase                 ;declare global space for kernel
  81 0000 0000 0000 	KerBase:   .skip 10                ;Tick(5), rld(1), task_id(1), ntask(1), prs(1), rsvd(1)
  81      0000 0000 
  81      0000 
  82               	
  83               	.global    KerSP                   ;declare global space for stack pointers
  84 000a 0000 0000 	KerSP:     .skip KER_MX_NTSK*2     ;2 bytes for each task
  84      0000 0000 
  84      0000 0000 
  84      0000 0000 
  84      0000 0000 
  85               	
  86               	.global    KerSchSts               ;declare global space for scheduler status
  87 001e 0000 0000 	KerSchSts: .skip KER_MX_NTSK*1     ;status(1)
  87      0000 0000 
  87      0000 
  88               	
  89               	.global    KerSchPr                ;declare global space for scheduler priority
  90 0028 0000 0000 	KerSchPr:  .skip KER_MX_NTSK*1     ;priority(1)
  90      0000 0000 
  90      0000 
  91               	
  92               	.global    KerSchSlp               ;declare global space for task sleep
  93 0032 0000 0000 	KerSchSlp: .skip KER_MX_NTSK*2     ;timing(2)
  93      0000 0000 
  93      0000 0000 
  93      0000 0000 
  93      0000 0000 
  94               	
  95               	.global    KerStack                ;declare global space for stack
  96 0046 0000 0000 	KerStack:  .skip KER_STK_SZ*10     ;KER_STK_SZ bytes for each task
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  96      0000 0000 
  97               	;;==============================define global variables end=================================;; 
  98               	
  99               	
 100               	
 101               	
 102               	
 103               	;;===============================define vector section starting=============================;; 
 104               	.section .vectors, "ax", @progbits
 105               	
 106 0000 0000 0000 	.org    0x20
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 106      0000 0000 
 107:kernel.S      ****         RJMP  __vector_16
 108               	;;=================================define vector section end================================;; 
 109               	
 110               	
 111               	
 112               	
 113               	
 114               	;;===============================define text section starting===============================;; 
 115               	.section .text
 116               	;;==================================define text section end=================================;; 
 117               	
 118               	
 119               	
 120               	
 121               	
 122               	;;==============================define global functions starting============================;; 
 123               	.global  Kernel_SysTick_Reg_Init
 124               	.global  Kernel_SysTick_Val_Get
 125               	.global  Kernel_SysTick_Val_Safely_Get
 126               	.global  Kernel_Interrupt_Sts_Get
 127               	.global  Kernel_Init
 128               	.global  Kernel_Task_Create
 129               	.global  Kernel_Start_Tasks
 130               	.global  Kernel_Task_Idle
 131               	.global  Kernel_Task_Sleep
 132               	.global  Kernel_Task_Sleep_Time_Get
 133               	.global  Kernel_Task_Sts_Get
 134               	.global  Kernel_Task_Yeild
 135               	;;================================define global functions end===============================;; 
 136               	
 137               	
 138               	
 139               	
 140               	
 141               	;;============================debug pin operation init starting=============================;; 
 142               	.macro  KER_DEBUG_PIN_INIT                                ;total 0.5uS @8MHz      (  4 clocks) 
 143               	        #ifdef KER_DBG_ENABLE                                                                  
 144               			SBI   KER_DBG_DDR        , KER_DBG_PIN            ;set bit in DDR         (  2 clocks) 
 145               			CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear port bit         (  2 clocks) 
 146               			#endif
 147               	.endm
 148               	;;==============================debug pin operation init end================================;; 
 149               	
 150               	
 151               	
 152               	
 153               	
 154               	;;===========================debug pin operation set starting===============================;; 
 155               	.macro  KER_DEBUG_PIN_SET                                 ;total 0.25uS @8MHz     (  2 clocks) 
 156               	        #ifdef KER_DBG_ENABLE                                                                  
 157               	        SBI   KER_DBG_PORT       , KER_DBG_PIN            ;set gpio               (  2 clocks) 
 158               			#endif
 159               	.endm
 160               	;;==============================debug pin operation set end=================================;; 
 161               	
 162               	
 163               	
 164               	
 165               	
 166               	;;===========================debug pin operation clear starting=============================;; 
 167               	.macro  KER_DEBUG_PIN_CLEAR                               ;total 0.25uS @8MHz     (  2 clocks) 
 168               	        #ifdef KER_DBG_ENABLE                                                                  
 169               			CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear gpio             (  2 clocks) 
 170               			#endif
 171               	.endm
 172               	;;==============================debug pin operation clear end===============================;; 
 173               	
 174               	
 175               	
 176               	
 177               	
 178               	;;==============================reload counter value starting===============================;; 
 179               	.macro  KER_COUNTER_RELOAD                                ;total 0.5uS @8MHz      (  4 clocks) 
 180               	        LDS   R16                , KerBase+OFF_RLD        ;load reload value      (  2 clocks) 
 181               			STS   SRTCNT0            , R16                    ;Set value to TCNT0     (  2 clocks) 
 182               	.endm
 183               	;;=================================reload counter value end=================================;; 
 184               	
 185               	
 186               	
 187               	
 188               	
 189               	;;==================================context save starting===================================;; 
 190               	.macro  KER_CONTEXT_SAVE                                  ;total 8.5uS @8MHz      ( 68 clocks) 
 191               	        PUSH  R0                                          ;push R0                (  2 clocks) 
 192               			IN    R0                 , IOSREG                 ;save SREG              (  1 clock ) 
 193               			PUSH  R0                                          ;save SREG              (  2 clocks) 
 194               			PUSH  R1                                          ;save R1                (  2 clocks) 
 195               			CLR   R1                                          ;clear R1               (  1 clock ) 
 196               			PUSH  R2                                          ;save R2                (  2 clocks) 
 197               			PUSH  R3                                          ;save R3                (  2 clocks) 
 198               			PUSH  R4                                          ;save R4                (  2 clocks) 
 199               			PUSH  R5                                          ;save R5                (  2 clocks) 
 200               			PUSH  R6                                          ;save R6                (  2 clocks) 
 201               			PUSH  R7                                          ;save R7                (  2 clocks) 
 202               			PUSH  R8                                          ;save R8                (  2 clocks) 
 203               			PUSH  R9                                          ;save R9                (  2 clocks) 
 204               			PUSH  R10                                         ;save R10               (  2 clocks) 
 205               			PUSH  R11                                         ;save R11               (  2 clocks) 
 206               			PUSH  R12                                         ;save R12               (  2 clocks) 
 207               			PUSH  R13                                         ;save R13               (  2 clocks) 
 208               			PUSH  R14                                         ;save R14               (  2 clocks) 
 209               			PUSH  R15                                         ;save R15               (  2 clocks) 
 210               			PUSH  R16                                         ;save R16               (  2 clocks) 
 211               			PUSH  R17                                         ;save R17               (  2 clocks) 
 212               			PUSH  R18                                         ;save R18               (  2 clocks) 
 213               			PUSH  R19                                         ;save R19               (  2 clocks) 
 214               			PUSH  R20                                         ;save R20               (  2 clocks) 
 215               			PUSH  R21                                         ;save R21               (  2 clocks) 
 216               			PUSH  R22                                         ;save R22               (  2 clocks) 
 217               			PUSH  R23                                         ;save R23               (  2 clocks) 
 218               			PUSH  R24                                         ;save R24               (  2 clocks) 
 219               			PUSH  R25                                         ;save R25               (  2 clocks) 
 220               			PUSH  R26                                         ;save R26               (  2 clocks) 
 221               			PUSH  R27                                         ;save R27               (  2 clocks) 
 222               			PUSH  R28                                         ;save R28               (  2 clocks) 
 223               			PUSH  R29                                         ;save R29               (  2 clocks) 
 224               			PUSH  R30                                         ;save R30               (  2 clocks) 
 225               			PUSH  R31                                         ;save R31               (  2 clocks) 
 226               	.endm
 227               	;;=====================================context save end=====================================;; 
 228               	
 229               	
 230               	
 231               	
 232               	
 233               	;;================================context restore starting==================================;; 
 234               	.macro  KER_CONTEXT_RESTORE                               ;total 8.38uS @8MHz     ( 67 clocks) 
 235               			POP   R31                                         ;restore R31            (  2 clocks) 
 236               			POP   R30                                         ;restore R30            (  2 clocks) 
 237               			POP   R29                                         ;restore R29            (  2 clocks) 
 238               			POP   R28                                         ;restore R28            (  2 clocks) 
 239               			POP   R27                                         ;restore R27            (  2 clocks) 
 240               			POP   R26                                         ;restore R26            (  2 clocks) 
 241               			POP   R25                                         ;restore R25            (  2 clocks) 
 242               			POP   R24                                         ;restore R24            (  2 clocks) 
 243               			POP   R23                                         ;restore R23            (  2 clocks) 
 244               			POP   R22                                         ;restore R22            (  2 clocks) 
 245               			POP   R21                                         ;restore R21            (  2 clocks) 
 246               			POP   R20                                         ;restore R20            (  2 clocks) 
 247               			POP   R19                                         ;restore R19            (  2 clocks) 
 248               			POP   R18                                         ;restore R18            (  2 clocks) 
 249               			POP   R17                                         ;restore R17            (  2 clocks) 
 250               			POP   R16                                         ;restore R16            (  2 clocks) 
 251               			POP   R15                                         ;restore R15            (  2 clocks) 
 252               			POP   R14                                         ;restore R14            (  2 clocks) 
 253               			POP   R13                                         ;restore R13            (  2 clocks) 
 254               			POP   R12                                         ;restore R12            (  2 clocks) 
 255               			POP   R11                                         ;restore R11            (  2 clocks) 
 256               			POP   R10                                         ;restore R10            (  2 clocks) 
 257               			POP   R9                                          ;restore R9             (  2 clocks) 
 258               			POP   R8                                          ;restore R8             (  2 clocks) 
 259               			POP   R7                                          ;restore R7             (  2 clocks) 
 260               			POP   R6                                          ;restore R6             (  2 clocks) 
 261               			POP   R5                                          ;restore R5             (  2 clocks) 
 262               			POP   R4                                          ;restore R4             (  2 clocks) 
 263               			POP   R3                                          ;restore R3             (  2 clocks) 
 264               			POP   R2                                          ;restore R2             (  2 clocks) 
 265               			POP   R1                                          ;restore R1             (  2 clocks) 
 266               			POP   R0                                          ;fetch SREG             (  2 clocks) 
 267               			OUT   IOSREG             , R0                     ;load SREG              (  1 clock ) 
 268               			POP   R0                                          ;restore R0             (  2 clocks) 
 269               	.endm
 270               	;;===================================context restore end====================================;; 
 271               	
 272               	
 273               	
 274               	
 275               	
 276               	;;===============================context save yeild starting================================;; 
 277               	.macro  KER_CONTEXT_SAVE_YEILD                            ;total 8.63uS @8MHz     ( 69 clocks) 
 278               	        PUSH  R0                                          ;push R0                (  2 clocks) 
 279               			IN    R0                 , IOSREG                 ;save SREG              (  1 clock ) 
 280               			CLI                                               ;clear interrupt        (  1 clock ) 
 281               			PUSH  R0                                          ;save SREG              (  2 clocks) 
 282               			PUSH  R1                                          ;save R1                (  2 clocks) 
 283               			CLR   R1                                          ;clear R1               (  1 clock ) 
 284               			PUSH  R2                                          ;save R2                (  2 clocks) 
 285               			PUSH  R3                                          ;save R3                (  2 clocks) 
 286               			PUSH  R4                                          ;save R4                (  2 clocks) 
 287               			PUSH  R5                                          ;save R5                (  2 clocks) 
 288               			PUSH  R6                                          ;save R6                (  2 clocks) 
 289               			PUSH  R7                                          ;save R7                (  2 clocks) 
 290               			PUSH  R8                                          ;save R8                (  2 clocks) 
 291               			PUSH  R9                                          ;save R9                (  2 clocks) 
 292               			PUSH  R10                                         ;save R10               (  2 clocks) 
 293               			PUSH  R11                                         ;save R11               (  2 clocks) 
 294               			PUSH  R12                                         ;save R12               (  2 clocks) 
 295               			PUSH  R13                                         ;save R13               (  2 clocks) 
 296               			PUSH  R14                                         ;save R14               (  2 clocks) 
 297               			PUSH  R15                                         ;save R15               (  2 clocks) 
 298               			PUSH  R16                                         ;save R16               (  2 clocks) 
 299               			PUSH  R17                                         ;save R17               (  2 clocks) 
 300               			PUSH  R18                                         ;save R18               (  2 clocks) 
 301               			PUSH  R19                                         ;save R19               (  2 clocks) 
 302               			PUSH  R20                                         ;save R20               (  2 clocks) 
 303               			PUSH  R21                                         ;save R21               (  2 clocks) 
 304               			PUSH  R22                                         ;save R22               (  2 clocks) 
 305               			PUSH  R23                                         ;save R23               (  2 clocks) 
 306               			PUSH  R24                                         ;save R24               (  2 clocks) 
 307               			PUSH  R25                                         ;save R25               (  2 clocks) 
 308               			PUSH  R26                                         ;save R26               (  2 clocks) 
 309               			PUSH  R27                                         ;save R27               (  2 clocks) 
 310               			PUSH  R28                                         ;save R28               (  2 clocks) 
 311               			PUSH  R29                                         ;save R29               (  2 clocks) 
 312               			PUSH  R30                                         ;save R30               (  2 clocks) 
 313               			PUSH  R31                                         ;save R31               (  2 clocks) 
 314               	.endm
 315               	;;===================================context save yeild end=================================;; 
 316               	
 317               	
 318               	
 319               	
 320               	
 321               	;;=============================context restore yeild starting===============================;; 
 322               	.macro  KER_CONTEXT_RESTORE_YEILD                         ;total 8.5uS @8MHz      ( 68 clocks) 
 323               			POP   R31                                         ;restore R31            (  2 clocks) 
 324               			POP   R30                                         ;restore R30            (  2 clocks) 
 325               			POP   R29                                         ;restore R29            (  2 clocks) 
 326               			POP   R28                                         ;restore R28            (  2 clocks) 
 327               			POP   R27                                         ;restore R27            (  2 clocks) 
 328               			POP   R26                                         ;restore R26            (  2 clocks) 
 329               			POP   R25                                         ;restore R25            (  2 clocks) 
 330               			POP   R24                                         ;restore R24            (  2 clocks) 
 331               			POP   R23                                         ;restore R23            (  2 clocks) 
 332               			POP   R22                                         ;restore R22            (  2 clocks) 
 333               			POP   R21                                         ;restore R21            (  2 clocks) 
 334               			POP   R20                                         ;restore R20            (  2 clocks) 
 335               			POP   R19                                         ;restore R19            (  2 clocks) 
 336               			POP   R18                                         ;restore R18            (  2 clocks) 
 337               			POP   R17                                         ;restore R17            (  2 clocks) 
 338               			POP   R16                                         ;restore R16            (  2 clocks) 
 339               			POP   R15                                         ;restore R15            (  2 clocks) 
 340               			POP   R14                                         ;restore R14            (  2 clocks) 
 341               			POP   R13                                         ;restore R13            (  2 clocks) 
 342               			POP   R12                                         ;restore R12            (  2 clocks) 
 343               			POP   R11                                         ;restore R11            (  2 clocks) 
 344               			POP   R10                                         ;restore R10            (  2 clocks) 
 345               			POP   R9                                          ;restore R9             (  2 clocks) 
 346               			POP   R8                                          ;restore R8             (  2 clocks) 
 347               			POP   R7                                          ;restore R7             (  2 clocks) 
 348               			POP   R6                                          ;restore R6             (  2 clocks) 
 349               			POP   R5                                          ;restore R5             (  2 clocks) 
 350               			POP   R4                                          ;restore R4             (  2 clocks) 
 351               			POP   R3                                          ;restore R3             (  2 clocks) 
 352               			POP   R2                                          ;restore R2             (  2 clocks) 
 353               			POP   R1                                          ;restore R1             (  2 clocks) 
 354               			POP   R0                                          ;fetch SREG             (  2 clocks) 
 355               			OUT   IOSREG             , R0                     ;load SREG              (  1 clock ) 
 356               			POP   R0                                          ;restore R0             (  2 clocks) 
 357               			SEI                                               ;enable interrupt       (  1 clock ) 
 358               	.endm
 359               	;;================================context restore yeild end=================================;; 
 360               	
 361               	
 362               	
 363               	
 364               	
 365               	;;==============================increment tick counter starting=============================;; 
 366               	.macro  KER_TICK_INCREMENT                                ;total 3.13uS @8MHz     ( 25 clocks) 
 367               			LDS   R16                , KerBase+OFF_TICK0      ;load Byte0             (  2 clocks) 
 368               			INC   R16                                         ;add 1 with Byte0       (  1 clock ) 
 369               			STS   KerBase+OFF_TICK0  , R16                    ;set Byte0              (  2 clocks) 
 370               			LDS   R16                , KerBase+OFF_TICK1      ;load Byte1             (  2 clocks) 
 371               			ADC   R16                , R1                     ;add carry with Byte1   (  1 clock ) 
 372               			STS   KerBase+OFF_TICK1  , R16                    ;set Byte1              (  2 clocks) 
 373               			LDS   R16                , KerBase+OFF_TICK2      ;load Byte2             (  2 clocks) 
 374               			ADC   R16                , R1                     ;add carry with Byte2   (  1 clock ) 
 375               			STS   KerBase+OFF_TICK2  , R16                    ;set Byte2              (  2 clocks) 
 376               			LDS   R16                , KerBase+OFF_TICK3      ;load Byte3             (  2 clocks) 
 377               			ADC   R16                , R1                     ;add carry with Byte3   (  1 clock ) 
 378               			STS   KerBase+OFF_TICK3  , R16                    ;set Byte3              (  2 clocks) 
 379               			LDS   R16                , KerBase+OFF_TICK4      ;load Byte4             (  2 clocks) 
 380               			ADC   R16                , R1                     ;add carry with Byte4   (  1 clock ) 
 381               			STS   KerBase+OFF_TICK4  , R16                    ;set Byte4              (  2 clocks) 
 382               	.endm
 383               	;;=================================increment tick counter end===============================;; 
 384               	
 385               	
 386               	
 387               	
 388               	
 389               	;;===============================save current task sp starting==============================;; 
 390               	.macro  KER_SAVE_CURR_TASK_SP                             ;total 1.63uS @8MHz     ( 13 clocks) 
 391               			IN    R16                , IOSPL                  ;fetch SPL0             (  1 clock ) 
 392               			IN    R17                , IOSPH                  ;fetch SPH0             (  1 clock ) 
 393               			LDS   R18                , KerBase+OFF_TID        ;fetch task_id          (  2 clocks) 
 394               			LSL   R18                                         ;left shift to multiply (  1 clock ) 
 395               			LDI   R30                , lo8(KerSP)             ;fetch base pos low     (  1 clock ) 
 396               			LDI   R31                , hi8(KerSP)             ;fetch base pos high    (  1 clock ) 
 397               			ADD   R30                , R18                    ;add offset to array    (  1 clock ) 
 398               			ADC   R31                , R1                     ;add carry, R1 zero reg (  1 clock ) 
 399               			ST    Z+                 , R16                    ;store SPL at ZP        (  2 clocks) 
 400               			ST    z                  , R17                    ;store SPH ZP+1         (  2 clocks) 
 401               	.endm
 402               	;;================================save current task sp end==================================;; 
 403               	
 404               	
 405               	
 406               	
 407               	
 408               	;;==============================load next task id starting==================================;; 
 409               	.macro  KER_LOAD_NEXT_TASK_ID                             ;total 1.63uS @8MHz     ( 13 clocks) 
 410               			LDS   R16                , KerBase+OFF_TID        ;fetch task_id          (  2 clocks) 
 411               			INC   R16                                         ;increment task index   (  1 clock ) 
 412               			LDS   R17                , KerBase+OFF_NTSK       ;load ntask             (  2 clocks) 
 413               		_MOD_CONT\@:                                          ;use local label
 414               		    CP    R16                , R17                    ;compare R17 with R16   (  1 clock ) 
 415               			BRLO  _MOD_DONE\@                                 ;if R16<R17, done       (  2 clocks) 
 416               			SUB   R16                , R17                    ;subtract R17 from R16  (  1 clock ) 
 417               			RJMP  _MOD_CONT\@                                 ;go to loop start       (  2 clocks) 
 418               		_MOD_DONE\@:                                          ;use local label
 419               		    STS   KerBase+OFF_TID    , R16                    ;save task_id%ntask     (  2 clocks) 
 420               	.endm
 421               	;;=================================load next task id end====================================;; 
 422               	
 423               	
 424               	
 425               	
 426               	
 427               	;;===============================decrease timeout starting==================================;; 
 428               	.macro  KER_DEC_SLP_TIMEOUT                               ;total 4.88uS @8MHz     ( 39 clocks) 
 429               	        LDS   R16                , KerBase+OFF_NTSK       ;load ntask             (  2 clocks) 
 430               		 
 431               		_UPDATE_TASK_READY\@:
 432               			;start from ntask-1
 433               			DEC   R16                                         ;start from ntask-1     (  1 clock )
 434               			
 435               			;find ram address for sleep counter
 436               			MOV   R18                , R16                    ;load task_id           (  1 clocks)
 437               			LSL   R18                                         ;x2                     (  1 clock )
 438               			LDI   R30                , lo8(KerSchSlp)         ;fetch base pos low     (  1 clock ) 
 439               			LDI   R31                , hi8(KerSchSlp)         ;fetch base pos high    (  1 clock )
 440               	        ADD   R30                , R18                    ;add offset to array    (  1 clock ) 
 441               			ADC   R31                , R1                     ;add offset, zero reg   (  1 clock ) 
 442               			
 443               			;fetch current value from ram, if val=0, skip decrement
 444               	        LD    R26                , Z+                     ;load val low byte      (  2 clocks) 
 445               			LD    R27                , Z                      ;load val high byte     (  2 clocks) 
 446               			MOV   R18                , R26                    ;copy                   (  1 clock ) 
 447               			OR    R18                , R27                    ;or high & low bytes    (  1 clock ) 
 448               			BREQ  _VAL_NULL\@                                 ;val=0, save sts        (  2 clocks) 
 449               			
 450               			;decrease val by 1
 451               			SBIW  R26                , 0x01                   ;decrement 1 from XP    (  2 clocks) 
 452               			ST    Z                  , R27                    ;store low byte         (  2 clocks) 
 453               			ST    -Z                 , R26                    ;store high byte        (  2 clocks) 
 454               			MOV   R18                , R26                    ;copy                   (  1 clock ) 
 455               			OR    R18                , R27                    ;or high & low bytes    (  1 clock ) 
 456               			BREQ  _VAL_NULL\@                                 ;val=0, save sts        (  2 clocks) 
 457               			JMP   _LOOP\@                                     ;continue until lc=0    (  2 clocks) 
 458               	        
 459               	    _VAL_NULL\@:
 460               		    ;find ram address for status
 461               		    LDI   R30                , lo8(KerSchSts)         ;fetch base pos low     (  1 clock ) 
 462               			LDI   R31                , hi8(KerSchSts)         ;fetch base pos high    (  1 clock ) 
 463               			ADD   R30                , R16                    ;add offset to array    (  1 clock ) 
 464               			ADC   R31                , R1                     ;add carry, R1 zero reg (  1 clock ) 
 465               			
 466               			;update flag as task is ready
 467               			LDI   R18                , TASK_READY             ;set TASK_READY         (  1 clock ) 
 468               			ST    Z                  , R18                    ;update flag            (  2 clocks)
 469               			
 470               		_LOOP\@:
 471               			;if task_id!=0, start again
 472               			CPI   R16                , 0x00                   ;compare with 0         (  1 clock )
 473               			BRNE  _UPDATE_TASK_READY\@                        ;if lc=0, run again     (  2 clocks)
 474               	.endm
 475               	;;=================================decrease timeout end=====================================;; 
 476               	
 477               	
 478               	
 479               	
 480               	
 481               	;;==================================run scheduler starting==================================;; 
 482               	.macro  KER_RUN_SCHEDULER                                 ;total 1.75uS @8MHz     ( 14 clocks) 
 483               	        LDS   R16                , KerBase+OFF_NTSK       ;load ntask             (  2 clocks) 
 484               			
 485               	    _CH_TASK_READY\@:
 486               		    ;decrease by 1, start with ntask-1
 487               		    DEC   R16                                         ;decrement              (  1 clock ) 
 488               			MOV   R17                , R16                    ;copy                   (  1 clock ) 
 489               			LDI   R30                , lo8(KerSchSts)         ;fetch base pos low     (  1 clock ) 
 490               			LDI   R31                , hi8(KerSchSts)         ;fetch base pos high    (  1 clock ) 
 491               			ADD   R30                , R17                    ;add offset to array    (  1 clock ) 
 492               			ADC   R31                , R1                     ;add carry to offset    (  1 clock )
 493               	        LD    R17                , Z                      ;load KerSchSts+task_id (  2 clocks)
 494               			CPI   R17                , TASK_READY             ;compare with task ready(  1 clock )
 495               			BREQ  _NEXT_TASK_FOUND\@
 496               			
 497               		_LOOP_CNT\@:
 498               			CPI   R16                , 0x00                   ;compare with 0         (  1 clock )
 499               			BRNE  _CH_TASK_READY\@
 500               			JMP   _IDLE_TASK\@
 501               			
 502               		_NEXT_TASK_FOUND\@:
 503               		    STS   KerBase+OFF_TID    , R16                    ;save selected task_id  (  2 clocks)
 504               	        JMP   _EXIT\@
 505               			
 506               		_IDLE_TASK\@:
 507               		    LDI   R16                , 0x00                   ;idle task is task0     (  1 clock ) 
 508               		    STS   KerBase+OFF_TID    , R16                    ;save selected task_id  (  2 clocks)
 509               			
 510               		_EXIT\@:
 511               	.endm
 512               	;;====================================run scheduler end=====================================;; 
 513               	
 514               	
 515               	
 516               	
 517               	
 518               	;;==============================load task id & sp starting==================================;; 
 519               	.macro  KER_LOAD_TASK_ID_AND_SP                           ;total 1.75uS @8MHz     ( 14 clocks) 
 520               		    LDS   R16                , KerBase+OFF_TID        ;load task_id           (  2 clocks) 
 521               			LSL   R16                                         ;left shift to multiply (  1 clock ) 
 522               			LDI   R30                , lo8(KerSP)             ;fetch base pos low     (  1 clock ) 
 523               			LDI   R31                , hi8(KerSP)             ;fetch base pos high    (  1 clock ) 
 524               			ADD   R30                , R16                    ;add offset to array    (  1 clock ) 
 525               			ADC   R31                , R1                     ;add carry if any       (  1 clock ) 
 526               			LD    R16                , Z+                     ;load SPL at ZP         (  2 clocks) 
 527               			LD    R17                , Z                      ;load SPH at ZP         (  2 clocks) 
 528               			OUT   IOSPL              , R16                    ;load SPL0              (  1 clock ) 
 529               			OUT   IOSPH              , R17                    ;load SPH0              (  1 clock ) 
 530               	.endm
 531               	;;=================================load task id & sp end====================================;; 
 532               	
 533               	
 534               	
 535               	
 536               	
 537               	;;=================================ISR execution starting===================================;; 
 538               	.global  __vector_16
 539               	    __vector_16:                                          ;total 26.13uS @8MHz    (211 clocks) 
 540:kernel.S      **** 	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 541:kernel.S      ****         KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 542:kernel.S      **** 		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 543:kernel.S      **** 		KER_TICK_INCREMENT                                ;increment tick counter ( 27 clocks) 
 544:kernel.S      ****         KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 545               			
 546:kernel.S      **** 		KER_DEC_SLP_TIMEOUT                               ;decrement of sleep time
 547:kernel.S      **** 		KER_RUN_SCHEDULER                                 ;run task if ready
 548               		    
 549:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 550:kernel.S      **** 		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 551:kernel.S      **** 	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 552:kernel.S      **** 		RETI                                              ;return from interrupt  (  4 clocks) 
 553               	;;====================================ISR execution end=====================================;; 
 554               	
 555               	
 556               	
 557               	
 558               	
 559               	;;================================SysTick reg init starting=================================;; 
 560               	Kernel_SysTick_Reg_Init:                                  ;total operation        ( 55 clocks) 
 561               	        ;arg1 -> prescaler R24, arg2 -> reload val R22
 562:kernel.S      ****         CLI                                               ;disable global int,    (  1 clock )
 563:kernel.S      ****         PUSH  R30
 564:kernel.S      **** 		PUSH  R31
 565:kernel.S      **** 		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 566:kernel.S      **** 		LDI   R16                , 0x00                   ;set 0x00 to R16,       (  1 clock ) 
 567               			
 568               			;clear tick counter
 569:kernel.S      **** 		STS   KerBase+OFF_TICK0  , R16                    ;clear  KerBase[0]      (  2 clocks) 
 570:kernel.S      **** 		STS   KerBase+OFF_TICK1  , R16                    ;clear  KerBase[1]      (  2 clocks) 
 571:kernel.S      **** 		STS   KerBase+OFF_TICK2  , R16                    ;clear  KerBase[2]      (  2 clocks) 
 572:kernel.S      **** 		STS   KerBase+OFF_TICK3  , R16                    ;clear  KerBase[3]      (  2 clocks) 
 573:kernel.S      **** 		STS   KerBase+OFF_TICK4  , R16                    ;clear  KerBase[4]      (  2 clocks) 
 574               			
 575               			;clear prescaler
 576:kernel.S      **** 		STS   KerBase+OFF_PRS    , R16                    ;clear  KerBase[5]      (  2 clocks) 
 577               			
 578               			;clear reload value
 579:kernel.S      **** 		STS   KerBase+OFF_RLD    , R16                    ;clear  KerBase[6]      (  2 clocks) 
 580               			
 581               			;clear task id
 582:kernel.S      **** 		STS   KerBase+OFF_TID    , R16                    ;clear  KerBase[7]      (  2 clocks) 
 583               			
 584               			;clear ntask
 585:kernel.S      **** 		STS   KerBase+OFF_NTSK   , R16                    ;clear  KerBase[8]      (  2 clocks) 
 586               			
 587               			;reserved, not used
 588:kernel.S      ****         STS   KerBase+0x09       , R16                    ;clear  KerBase[9]      (  2 clocks) 
 589               			
 590               			;clear all timer registers
 591:kernel.S      **** 		STS   SRTCCR0A           , R16                    ;clear TCCR0A           (  2 clocks) 
 592:kernel.S      **** 		STS   SRTCCR0B           , R16                    ;clear TCCR0B           (  2 clocks) 
 593:kernel.S      **** 		STS   SRTIMSK0           , R16                    ;clear TIMSK0           (  2 clocks) 
 594:kernel.S      **** 		STS   SRTIFR0            , R16                    ;clear TIFR0            (  2 clocks) 
 595:kernel.S      **** 		STS   SROCR0A            , R16                    ;clear OCR0A            (  2 clocks) 
 596:kernel.S      **** 		STS   SROCR0B            , R16                    ;clear OCR0B            (  2 clocks) 
 597:kernel.S      **** 		STS   SRTCNT0            , R16                    ;clear TCNT0            (  2 clocks) 
 598               			
 599               			;store prescaler value
 600:kernel.S      **** 		MOV   R16                , R24                    ;prescaler from arg1    (  1 clock ) 
 601:kernel.S      **** 		STS   KerBase+OFF_PRS    , R16                    ;KerBase[5] prescaler   (  2 clocks) 
 602               	        
 603               			;store reload value
 604:kernel.S      **** 		MOV   R16                , R22                    ;reload val from arg2   (  1 clock ) 
 605:kernel.S      **** 		STS   KerBase+OFF_RLD    , R16                    ;KerBase[6] reload val  (  2 clocks) 
 606:kernel.S      **** 		POP   R31
 607:kernel.S      **** 		POP   R30
 608               			
 609:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 610               	;;===================================SysTick reg init end===================================;; 
 611               	
 612               	
 613               	
 614               	
 615               	
 616               	;;===============================SysTick value get starting=================================;; 
 617               	Kernel_SysTick_Val_Get:                                   ;total operation        ( 42 clocks) 
 618               	    _READ_AGAIN:
 619               		    ;first read & store to actual return registers
 620:kernel.S      **** 		LDS   R18		         , KerBase+OFF_TICK0      ;byte0 (LSB)            (  2 clocks) 
 621:kernel.S      **** 		LDS   R19		         , KerBase+OFF_TICK1      ;byte1                  (  2 clocks) 
 622:kernel.S      **** 		LDS   R20		         , KerBase+OFF_TICK2      ;byte2                  (  2 clocks) 
 623:kernel.S      **** 		LDS   R21		         , KerBase+OFF_TICK3      ;byte3                  (  2 clocks) 
 624:kernel.S      **** 		LDS   R22		         , KerBase+OFF_TICK4      ;byte4 (MSB)            (  2 clocks) 
 625               			
 626               			;second read to scratch registers
 627:kernel.S      **** 		LDS   R26		         , KerBase+OFF_TICK0      ;byte0 (LSB)            (  2 clocks) 
 628:kernel.S      **** 		LDS   R27		         , KerBase+OFF_TICK1      ;byte1                  (  2 clocks) 
 629:kernel.S      **** 		LDS   R30		         , KerBase+OFF_TICK2      ;byte2                  (  2 clocks) 
 630:kernel.S      **** 		LDS   R31		         , KerBase+OFF_TICK3      ;byte3                  (  2 clocks) 
 631:kernel.S      **** 		LDS   R0		         , KerBase+OFF_TICK4      ;byte4 (MSB)            (  2 clocks) 
 632               			
 633               			;compare all pairs
 634:kernel.S      **** 		CP    R18                , R26                    ;compare                (  1 clock ) 
 635:kernel.S      **** 		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 636:kernel.S      **** 		CP    R19                , R27                    ;compare                (  1 clock ) 
 637:kernel.S      **** 		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 638:kernel.S      **** 		CP    R20                , R30                    ;compare                (  1 clock ) 
 639:kernel.S      **** 		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 640:kernel.S      **** 		CP    R21                , R31                    ;compare                (  1 clock ) 
 641:kernel.S      **** 		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 642:kernel.S      **** 		CP    R22                , R0                     ;compare                (  1 clock ) 
 643:kernel.S      **** 		BRNE  _READ_AGAIN                                 ;if !=0, read again     (  2 clocks) 
 644               			
 645               			;only 5 bytes data are taken, force clear 3 high bytes (64bit return R25:R18)
 646:kernel.S      **** 		LDI   R23		         , 0x00                   ;byte5 -> R23           (  1 clocks) 
 647:kernel.S      **** 		LDI   R24		         , 0x00                   ;byte6 -> R24           (  1 clocks) 
 648:kernel.S      **** 		LDI   R25		         , 0x00                   ;byte7 -> R25           (  1 clocks) 
 649:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 650               	;;==================================SysTick value get end===================================;; 
 651               	
 652               	
 653               	
 654               	
 655               	
 656               	;;============================SysTick value safely get starting=============================;; 
 657               	Kernel_SysTick_Val_Safely_Get:                            ;total operation        ( 20 clocks) 
 658:kernel.S      ****         IN    R2                 , IOSREG                 ;save SREG              (  1 clock ) 
 659:kernel.S      ****         CLI                                               ;disable interrupts     (  1 clock ) 
 660:kernel.S      **** 		LDS   R18		         , KerBase+OFF_TICK0      ;byte0 -> R18 (LSB)     (  2 clocks) 
 661:kernel.S      **** 		LDS   R19		         , KerBase+OFF_TICK1      ;byte1 -> R19           (  2 clocks) 
 662:kernel.S      **** 		LDS   R20		         , KerBase+OFF_TICK2      ;byte2 -> R20           (  2 clocks) 
 663:kernel.S      **** 		LDS   R21		         , KerBase+OFF_TICK3      ;byte3 -> R21           (  2 clocks) 
 664:kernel.S      **** 		LDS   R22		         , KerBase+OFF_TICK4      ;byte4 -> R22           (  2 clocks) 
 665:kernel.S      **** 		LDI   R23		         , 0x00                   ;byte5 -> R23           (  1 clocks) 
 666:kernel.S      **** 		LDI   R24		         , 0x00                   ;byte6 -> R24           (  1 clocks) 
 667:kernel.S      **** 		LDI   R25		         , 0x00                   ;byte7 -> R25 (MSB)     (  1 clocks) 
 668:kernel.S      **** 		OUT   IOSREG             , R2          		      ;restore SREG           (  1 clock ) 
 669:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 670               	;;===============================SysTick value safely get end===============================;; 
 671               	
 672               	
 673               	
 674               	
 675               	
 676               	;;==============================interrupt status get starting===============================;; 
 677               	Kernel_Interrupt_Sts_Get:                                 ;total operation        ( 10 clocks) 
 678:kernel.S      ****         LDI   R24		         , 0x00                   ;clear R24              (  1 clock ) 
 679:kernel.S      ****         IN    R16		         , IOSREG                 ;save SREG in R16       (  1 clock ) 
 680:kernel.S      **** 		SBRC  R16		         , 0x07                   ;check I flag->bit7     (  3 clocks) 
 681:kernel.S      **** 		LDI   R24		         , 0x01                   ;set R24 to 1           (  1 clock ) 
 682:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 683               	;;================================interrupt status get end==================================;; 
 684               	
 685               	
 686               	
 687               	
 688               	;;================================kernel task init starting=================================;; 
 689               	Kernel_Task_Create:                                       ;total operation        (130 clocks)
 690               	        ;func_ptr->R25:R24, task_priority->R22
 691               	        ;save main SP & Z pointer
 692:kernel.S      ****         IN    R2                 , IOSPL                  ;save SPL of MSP        (  1 clock ) 
 693:kernel.S      ****         IN    R3                 , IOSPH                  ;save SPH of MSP        (  1 clock ) 
 694:kernel.S      ****         MOV   R4                 , R30                    ;save ZPL               (  1 clock ) 
 695:kernel.S      **** 		MOV   R5                 , R31                    ;save ZPH               (  1 clock ) 
 696               	        
 697               			;across this function, R16 will be used as task_id   
 698:kernel.S      **** 		LDS   R16                , KerBase+OFF_TID        ;load task_id           (  2 clocks) 
 699               			
 700               			;set priority to KerSchPr+task_id
 701:kernel.S      **** 		LDI   R30                , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 702:kernel.S      **** 		LDI   R31                , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 703:kernel.S      **** 		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 704:kernel.S      **** 		ADC   R31                , R1                     ;add high byte+carry    (  1 clock ) 
 705:kernel.S      **** 		ST    Z                  , R20                    ;save priority          (  2 clocks) 
 706               			
 707               			;increment ntask
 708:kernel.S      **** 		LDS   R17                , KerBase+OFF_NTSK       ;load ntask             (  2 clocks) 
 709:kernel.S      **** 		INC   R17                                         ;increment ntask        (  1 clock ) 
 710:kernel.S      **** 		STS   KerBase+OFF_NTSK   , R17                    ;store ntask            (  2 clocks) 
 711               			
 712               			;stack pointer for current task (KerStack + KER_STK_SZ*(ker_ind+1) - 1) ->stack top 
 713:kernel.S      **** 		MOV   R17                , R16                    ;load task_id           (  1 clock )
 714:kernel.S      **** 		INC   R17                                         ;increment task_id      (  1 clock ) 
 715:kernel.S      **** 		LDI   R18                , KER_STK_SZ             ;load stack size        (  1 clock ) 
 716:kernel.S      **** 		MUL   R17                , R18                    ;multiply to get offset (  2 clocks) 
 717:kernel.S      **** 		MOV   R30                , R0                     ;load multiplied low    (  1 clocks) 
 718:kernel.S      **** 		MOV   R31                , R1                     ;load multiplied high   (  1 clocks) 
 719:kernel.S      **** 		SBIW  R30                , 0x01                   ;dec multiplied val     (  2 clocks) 
 720:kernel.S      **** 		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 721:kernel.S      **** 		LDI   R17                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
 722:kernel.S      **** 		LDI   R18                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
 723:kernel.S      **** 		ADD   R30                , R17                    ;add low bytes          (  1 clock ) 
 724:kernel.S      **** 		ADC   R31                , R18                    ;add high bytes+carry   (  1 clock ) 
 725:kernel.S      **** 		OUT   IOSPL              , R30                    ;load SPL               (  1 clock ) 
 726:kernel.S      ****         OUT   IOSPH              , R31                    ;load SPH               (  1 clock ) 
 727               			
 728               			;function argument directly returns word address
 729:kernel.S      **** 	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
 730:kernel.S      **** 		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 731               			
 732               			;need to save global interrupt enabled in each tasks context
 733:kernel.S      **** 		SEI                                               ;force enable interrupt (  1 clock ) 
 734               			
 735               			;push context to stack of this task
 736:kernel.S      **** 		KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 737               			
 738               			;read stack pointer of current task (necessary when restore)
 739:kernel.S      **** 		IN    R17                , IOSPL                  ;read SPL               (  1 clock ) 
 740:kernel.S      ****         IN    R18                , IOSPH                  ;read SPH               (  1 clock ) 
 741               			
 742               			;calculate the address where current task's SP will be stored and store SP
 743:kernel.S      **** 		MOV   R19                , R16                    ;fetch task_id from arg (  1 clock ) 
 744:kernel.S      **** 		LSL   R19                                         ;left shift to multiply (  1 clock ) 
 745:kernel.S      **** 		LDI   R30                , lo8(KerSP)             ;fetch base pos low     (  1 clock ) 
 746:kernel.S      **** 		LDI   R31                , hi8(KerSP)             ;fetch base pos high    (  1 clock ) 
 747:kernel.S      **** 		ADD   R30                , R19                    ;add offset to array    (  1 clock ) 
 748:kernel.S      **** 		ADC   R31                , R1                     ;add carry if any       (  1 clock ) 
 749:kernel.S      **** 		ST    Z+                 , R17                    ;SPL at KerSp+offset    (  2 clocks) 
 750:kernel.S      **** 		ST    z                  , R18                    ;SPH at KerSp+offset    (  2 clocks) 
 751               			
 752               			;increment task_id
 753:kernel.S      **** 		LDS   R17                , KerBase+OFF_TID        ;load task_id           (  2 clocks) 
 754:kernel.S      **** 		INC   R17                                         ;increment task_id      (  1 clock ) 
 755:kernel.S      **** 		STS   KerBase+OFF_TID    , R17                    ;store task_id          (  2 clocks) 
 756               			
 757               			;load Main SP, restore Z pointer
 758:kernel.S      **** 		OUT   IOSPL              , R2                     ;load SPL               (  1 clock ) 
 759:kernel.S      ****         OUT   IOSPH              , R3                     ;load SPH               (  1 clock ) 
 760:kernel.S      **** 		MOV   R30                , R4                     ;push ZPL               (  1 clock ) 
 761:kernel.S      **** 		MOV   R31                , R5                     ;push ZPL               (  1 clock ) 
 762               			
 763:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 764               	;;===================================kernel task init end===================================;; 
 765               	
 766               	
 767               	
 768               	
 769               	
 770               	;;===================================kernel task starting===================================;; 
 771               	Kernel_Start_Tasks:
 772               			;start executing from task0
 773               			;save ZP
 774:kernel.S      **** 		MOV   R4                 , R30                    ;save ZPL               (  2 clocks) 
 775:kernel.S      **** 		MOV   R5                 , R31                    ;save ZPH               (  2 clocks) 
 776               			
 777               			;clear task_id
 778:kernel.S      **** 		LDI   R16                , 0x00                   ;load task_id           (  2 clocks) 
 779:kernel.S      **** 		STS   KerBase+OFF_TID    , R16                    ;store task_id          (  2 clocks) 
 780               			
 781               			;load ZP with addr+offset
 782:kernel.S      **** 		LDI   R30                , lo8(KerSP+0x00)        ;fetch ZPL KerSP->TID0  (  1 clock ) 
 783:kernel.S      **** 		LDI   R31                , hi8(KerSP+0x00)        ;fetch ZPH KerSP->TID0  (  1 clock ) 
 784               			
 785               			;load TID0 task's SP
 786:kernel.S      **** 		LD    R16                , Z+                     ;load val from Z, inc Z (  2 clocks) 
 787:kernel.S      **** 		LD    R17                , Z                      ;load val from Z+1      (  2 clocks) 
 788               			
 789               			;set TID0 task's SP
 790:kernel.S      **** 		OUT   IOSPL              , R16                    ;load SPL               (  1 clock ) 
 791:kernel.S      ****         OUT   IOSPH              , R17                    ;load SPH               (  1 clock ) 
 792               	        
 793               	        ;forcefully restore context, in ISR it will be stored automatically
 794:kernel.S      **** 		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 795               			
 796               			;restore ZP
 797:kernel.S      **** 		MOV   R30                , R4                     ;restore ZPL            (  2 clocks) 
 798:kernel.S      **** 		MOV   R31                , R5                     ;restore ZPL            (  2 clocks) 
 799               			
 800:kernel.S      **** 		LDS   R16		         , KerBase+OFF_PRS        ;load prescaler         (  2 clocks) 
 801:kernel.S      **** 		LDS   R17		         , KerBase+OFF_RLD        ;load reload val        (  2 clocks) 
 802:kernel.S      **** 		STS   SRTCCR0B           , R16                    ;prescaler-> TCCR0B     (  2 clocks) 
 803:kernel.S      **** 		STS   SRTCNT0            , R17                    ;reload val-> TCNT0     (  2 clocks) 
 804:kernel.S      **** 		LDI   R16                , 0x01                   ;bit mask TOIE0         (  1 clock ) 
 805:kernel.S      **** 		STS   SRTIMSK0           , R16                    ;set to TIMSK0          (  2 clocks) 
 806               			
 807               			;execute return to jump to task0, pushed while task init
 808:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 809               	;;======================================kernel task end=====================================;; 
 810               	
 811               	
 812               	
 813               	
 814               	
 815               	;;===================================kernel task starting===================================;; 
 816               	Kernel_Init:
 817               			;start executing from task0
 818               			;save ZP
 819:kernel.S      **** 		MOV   R4                 , R30                    ;save ZPL               (  2 clocks) 
 820:kernel.S      **** 		MOV   R5                 , R31                    ;save ZPH               (  2 clocks) 
 821               			
 822               			;init timer for kernel 
 823:kernel.S      **** 		LDI   R24                , 0x03                   ;set prescaler          (  1 clock ) 
 824:kernel.S      **** 		LDI   R22                , 0x82                   ;set reload val         (  1 clock ) 
 825:kernel.S      **** 		CALL  Kernel_SysTick_Reg_Init                     ;init timer             ( 55 clocks) 
 826               			
 827:kernel.S      **** 		LDI   R24                , lo8(Kernel_Task_Idle)  ;load func addr low     (  1 clock )
 828:kernel.S      **** 		LDI   R25                , hi8(Kernel_Task_Idle)  ;load func addr high    (  1 clock )
 829:kernel.S      **** 		LSR   R25                                         ;right shift to divide  (  1 clock )
 830:kernel.S      **** 		ROR   R24                                         ;rotate right th carry  (  1 clock )
 831:kernel.S      **** 		LDI   R22                , 0
 832:kernel.S      **** 		CALL  Kernel_Task_Create                          ;init idle task         (130 clocks) 
 833               			
 834               			;execute return to jump to task0, pushed while task init
 835:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 836               	;;======================================kernel task end=====================================;; 
 837               	
 838               	
 839               	
 840               	
 841               	
 842               	;;================================kernel task delay starting================================;; 
 843               	Kernel_Task_Idle:
 844               	    _IDLE_LOOP:
 845:kernel.S      **** 	    LDI   R24 , 0
 846:kernel.S      **** 	    CALL  Debug_Tx_Byte
 847:kernel.S      **** 		RJMP  _IDLE_LOOP                                  ;return from subroutine (  4 clocks) 
 848               	;;=================================kernel task delay end====================================;; 
 849               	
 850               	
 851               	
 852               	
 853               	
 854               	;;================================kernel task delay starting================================;; 
 855               	Kernel_Task_Sleep:
 856               	        ;save current context
 857:kernel.S      ****         KER_CONTEXT_SAVE_YEILD                            ;save context           ( 68 clocks) 
 858:kernel.S      **** 		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks)
 859               			
 860               			;create next task wakeup time (args R25:R24)
 861:kernel.S      **** 		LDS   R16                , KerBase+OFF_TID        ;load tak_id            (  2 clocks) 
 862:kernel.S      **** 		MOV   R17                , R16                    ;copy                   (  1 clock ) 
 863:kernel.S      **** 		LSL   R17                                         ;x2                     (  1 clock ) 
 864:kernel.S      **** 		LDI   R30                , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 865:kernel.S      **** 		LDI   R31                , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 866:kernel.S      **** 		ADD   R30                , R17                    ;add low bytes          (  1 clock ) 
 867:kernel.S      **** 		LDI   R17                , 0x00                   ;load 0                 (  1 clock ) 
 868:kernel.S      **** 		ADC   R31                , R17                    ;add high byte+carry    (  1 clock ) 
 869:kernel.S      **** 		ST    Z+                 , R24                    ;save sleep time        (  2 clocks) 
 870:kernel.S      **** 		ST    Z                  , R25                    ;save sleep time        (  2 clocks) 
 871               			
 872               			;update task scheduler status as blocked
 873:kernel.S      **** 		LDI   R30                , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 874:kernel.S      **** 		LDI   R31                , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 875:kernel.S      **** 		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 876:kernel.S      **** 		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 877:kernel.S      **** 		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 878:kernel.S      ****         LDI   R16                , TASK_BLOCK             ;block task until cnt=0 (  1 clock ) 
 879:kernel.S      **** 		ST    Z                  , R16                    ;save block flag        (  2 clocks) 
 880               			
 881               			;run scheduler, load next task sp, restore context
 882:kernel.S      **** 		KER_RUN_SCHEDULER                                 ;run scheduler for tasks( 14 clocks) 
 883:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 884:kernel.S      **** 		KER_CONTEXT_RESTORE_YEILD                         ;restore context        ( 67 clocks) 
 885               			
 886:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 887               	;;=================================kernel task delay end====================================;; 
 888               	
 889               	
 890               	
 891               	
 892               	
 893               	;;================================kernel task delay starting================================;; 
 894               	Kernel_Task_Sleep_Time_Get:
 895               			;create next task wakeup time
 896:kernel.S      **** 		LDS   R16                , KerBase+OFF_TID        ;load tak_id            (  2 clocks) 
 897:kernel.S      **** 		LSL   R16                                         ;x2                     (  1 clock ) 
 898:kernel.S      **** 		LDI   R30                , lo8(KerSchSlp)         ;load low byte          (  1 clock ) 
 899:kernel.S      **** 		LDI   R31                , hi8(KerSchSlp)         ;load high byte         (  1 clock ) 
 900:kernel.S      **** 		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 901:kernel.S      **** 		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 902:kernel.S      **** 		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 903:kernel.S      **** 		LD    R24                , Z+                     ;load sleep time        (  2 clocks) 
 904:kernel.S      **** 		LD    R25                , Z                      ;load sleep time        (  2 clocks) 
 905:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 906               	;;=================================kernel task delay end====================================;;
 907               	
 908               	
 909               	
 910               	
 911               	
 912               	;;================================kernel task delay starting================================;; 
 913               	Kernel_Task_Sts_Get:
 914               			;create next task wakeup time
 915:kernel.S      **** 		LDS   R16                , KerBase+OFF_TID        ;load tak_id            (  2 clocks) 
 916:kernel.S      **** 		LDI   R30                , lo8(KerSchSts)         ;load low byte          (  1 clock ) 
 917:kernel.S      **** 		LDI   R31                , hi8(KerSchSts)         ;load high byte         (  1 clock ) 
 918:kernel.S      **** 		ADD   R30                , R16                    ;add low bytes          (  1 clock ) 
 919:kernel.S      **** 		LDI   R16                , 0x00                   ;load 0                 (  1 clock ) 
 920:kernel.S      **** 		ADC   R31                , R16                    ;add high byte+carry    (  1 clock ) 
 921:kernel.S      **** 		LD    R24                , Z                      ;load sleep time        (  2 clocks) 
 922:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 923               	;;=================================kernel task delay end====================================;;
 924               	
 925               	
 926               	
 927               	
 928               	
 929               	;;================================kernel task yeild starting================================;; 
 930               	Kernel_Task_Yeild:
 931               			;save context, save sp, run scheduler, load next task sp, restore context
 932:kernel.S      **** 		KER_CONTEXT_SAVE_YEILD                            ;save context           ( 68 clocks) 
 933:kernel.S      **** 		KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 934:kernel.S      **** 		KER_RUN_SCHEDULER                                 ;run scheduler for tasks( 14 clocks) 
 935:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 936:kernel.S      **** 		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 937:kernel.S      **** 		SEI                                               ;enable interrupt       (  1 clock ) 
 938:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 939               	;;=================================kernel task yeild end====================================;; 
DEFINED SYMBOLS
            kernel.S:12     *ABS*:000003e8 KER_TR
            kernel.S:13     *ABS*:00000003 KER_PRS
            kernel.S:14     *ABS*:00000082 KER_RLD
            kernel.S:15     *ABS*:00000080 KER_STK_SZ
            kernel.S:16     *ABS*:0000000a KER_MX_NTSK
            kernel.S:24     *ABS*:00000000 OFF_TICK0
            kernel.S:25     *ABS*:00000001 OFF_TICK1
            kernel.S:26     *ABS*:00000002 OFF_TICK2
            kernel.S:27     *ABS*:00000003 OFF_TICK3
            kernel.S:28     *ABS*:00000004 OFF_TICK4
            kernel.S:29     *ABS*:00000005 OFF_PRS
            kernel.S:30     *ABS*:00000006 OFF_RLD
            kernel.S:31     *ABS*:00000007 OFF_TID
            kernel.S:32     *ABS*:00000008 OFF_NTSK
            kernel.S:40     *ABS*:00000001 TASK_READY
            kernel.S:41     *ABS*:00000000 TASK_BLOCK
            kernel.S:49     *ABS*:0000005f SRSREG
            kernel.S:50     *ABS*:0000005e SRSPH
            kernel.S:51     *ABS*:0000005d SRSPL
            kernel.S:53     *ABS*:0000006e SRTIMSK0
            kernel.S:54     *ABS*:00000048 SROCR0B
            kernel.S:55     *ABS*:00000047 SROCR0A
            kernel.S:56     *ABS*:00000046 SRTCNT0
            kernel.S:57     *ABS*:00000045 SRTCCR0B
            kernel.S:58     *ABS*:00000044 SRTCCR0A
            kernel.S:59     *ABS*:00000035 SRTIFR0
            kernel.S:61     *ABS*:00000028 IOOCR0B
            kernel.S:62     *ABS*:00000027 IOOCR0A
            kernel.S:63     *ABS*:00000026 IOTCNT0
            kernel.S:64     *ABS*:00000025 IOTCCR0B
            kernel.S:65     *ABS*:00000024 IOTCCR0A
            kernel.S:66     *ABS*:00000015 IOTIFR0
            kernel.S:68     *ABS*:0000003f IOSREG
            kernel.S:69     *ABS*:0000003e IOSPH
            kernel.S:70     *ABS*:0000003d IOSPL
            kernel.S:81     .bss:00000000 KerBase
            kernel.S:84     .bss:0000000a KerSP
            kernel.S:87     .bss:0000001e KerSchSts
            kernel.S:90     .bss:00000028 KerSchPr
            kernel.S:93     .bss:00000032 KerSchSlp
            kernel.S:96     .bss:00000046 KerStack
            kernel.S:539    .text:00000000 __vector_16
            kernel.S:560    .text:0000015e Kernel_SysTick_Reg_Init
            kernel.S:617    .text:000001c0 Kernel_SysTick_Val_Get
            kernel.S:657    .text:00000204 Kernel_SysTick_Val_Safely_Get
            kernel.S:677    .text:00000226 Kernel_Interrupt_Sts_Get
            kernel.S:816    .text:00000356 Kernel_Init
            kernel.S:689    .text:00000230 Kernel_Task_Create
            kernel.S:771    .text:000002e0 Kernel_Start_Tasks
            kernel.S:843    .text:00000372 Kernel_Task_Idle
            kernel.S:855    .text:0000037a Kernel_Task_Sleep
            kernel.S:894    .text:00000486 Kernel_Task_Sleep_Time_Get
            kernel.S:913    .text:0000049c Kernel_Task_Sts_Get
            kernel.S:930    .text:000004ae Kernel_Task_Yeild
            kernel.S:546    .text:0000009c _UPDATE_TASK_READY5
            kernel.S:546    .text:000000c4 _VAL_NULL5
            kernel.S:546    .text:000000d0 _LOOP5
            kernel.S:547    .text:000000d8 _CH_TASK_READY6
            kernel.S:547    .text:000000f2 _NEXT_TASK_FOUND6
            kernel.S:547    .text:000000ea _LOOP_CNT6
            kernel.S:547    .text:000000fa _IDLE_TASK6
            kernel.S:547    .text:00000100 _EXIT6
            kernel.S:618    .text:000001c0 _READ_AGAIN
            kernel.S:844    .text:00000372 _IDLE_LOOP
            kernel.S:882    .text:00000400 _CH_TASK_READY15
            kernel.S:882    .text:0000041a _NEXT_TASK_FOUND15
            kernel.S:882    .text:00000412 _LOOP_CNT15
            kernel.S:882    .text:00000422 _IDLE_TASK15
            kernel.S:882    .text:00000428 _EXIT15
            kernel.S:934    .text:00000510 _CH_TASK_READY20
            kernel.S:934    .text:0000052a _NEXT_TASK_FOUND20
            kernel.S:934    .text:00000522 _LOOP_CNT20
            kernel.S:934    .text:00000532 _IDLE_TASK20
            kernel.S:934    .text:00000538 _EXIT20

UNDEFINED SYMBOLS
Debug_Tx_Byte
