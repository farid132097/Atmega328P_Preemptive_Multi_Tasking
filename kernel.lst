   1               	# 1 "kernel.S"
   1               	
   0               	
   0               	
   2               	#include <avr/io.h>
   1               	/* Copyright (c) 2002,2003,2005,2006,2007 Marek Michalkiewicz, Joerg Wunsch
   2               	   Copyright (c) 2007 Eric B. Weddington
   3               	   All rights reserved.
   4               	
   5               	   Redistribution and use in source and binary forms, with or without
   6               	   modification, are permitted provided that the following conditions are met:
   7               	
   8               	   * Redistributions of source code must retain the above copyright
   9               	     notice, this list of conditions and the following disclaimer.
  10               	
  11               	   * Redistributions in binary form must reproduce the above copyright
  12               	     notice, this list of conditions and the following disclaimer in
  13               	     the documentation and/or other materials provided with the
  14               	     distribution.
  15               	
  16               	   * Neither the name of the copyright holders nor the names of
  17               	     contributors may be used to endorse or promote products derived
  18               	     from this software without specific prior written permission.
  19               	
  20               	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21               	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22               	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23               	  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24               	  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25               	  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26               	  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27               	  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28               	  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29               	  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30               	  POSSIBILITY OF SUCH DAMAGE. */
  31               	
  32               	/* $Id: io.h,v 1.52.2.28 2009/12/20 17:02:53 arcanum Exp $ */
  33               	
  34               	/** \file */
  35               	/** \defgroup avr_io <avr/io.h>: AVR device-specific IO definitions
  36               	    \code #include <avr/io.h> \endcode
  37               	
  38               	    This header file includes the apropriate IO definitions for the
  39               	    device that has been specified by the <tt>-mmcu=</tt> compiler
  40               	    command-line switch.  This is done by diverting to the appropriate
  41               	    file <tt>&lt;avr/io</tt><em>XXXX</em><tt>.h&gt;</tt> which should
  42               	    never be included directly.  Some register names common to all
  43               	    AVR devices are defined directly within <tt>&lt;avr/common.h&gt;</tt>,
  44               	    which is included in <tt>&lt;avr/io.h&gt;</tt>,
  45               	    but most of the details come from the respective include file.
  46               	
  47               	    Note that this file always includes the following files:
  48               	    \code 
  49               	    #include <avr/sfr_defs.h>
  50               	    #include <avr/portpins.h>
  51               	    #include <avr/common.h>
  52               	    #include <avr/version.h>
  53               	    \endcode
  54               	    See \ref avr_sfr for more details about that header file.
  55               	
  56               	    Included are definitions of the IO register set and their
  57               	    respective bit values as specified in the Atmel documentation.
  58               	    Note that inconsistencies in naming conventions,
  59               	    so even identical functions sometimes get different names on
  60               	    different devices.
  61               	
  62               	    Also included are the specific names useable for interrupt
  63               	    function definitions as documented
  64               	    \ref avr_signames "here".
  65               	
  66               	    Finally, the following macros are defined:
  67               	
  68               	    - \b RAMEND
  69               	    <br>
  70               	    The last on-chip RAM address.
  71               	    <br>
  72               	    - \b XRAMEND
  73               	    <br>
  74               	    The last possible RAM location that is addressable. This is equal to 
  75               	    RAMEND for devices that do not allow for external RAM. For devices 
  76               	    that allow external RAM, this will be larger than RAMEND.
  77               	    <br>
  78               	    - \b E2END
  79               	    <br>
  80               	    The last EEPROM address.
  81               	    <br>
  82               	    - \b FLASHEND
  83               	    <br>
  84               	    The last byte address in the Flash program space.
  85               	    <br>
  86               	    - \b SPM_PAGESIZE
  87               	    <br>
  88               	    For devices with bootloader support, the flash pagesize
  89               	    (in bytes) to be used for the \c SPM instruction. 
  90               	    - \b E2PAGESIZE
  91               	    <br>
  92               	    The size of the EEPROM page.
  93               	    
  94               	*/
  95               	
  96               	#ifndef _AVR_IO_H_
  97               	#define _AVR_IO_H_
  98               	
  99               	#include <avr/sfr_defs.h>
   1               	/* Copyright (c) 2002, Marek Michalkiewicz <marekm@amelek.gda.pl>
 100               	
 101               	#if defined (__AVR_AT94K__)
 102               	#  include <avr/ioat94k.h>
 103               	#elif defined (__AVR_AT43USB320__)
 104               	#  include <avr/io43u32x.h>
 105               	#elif defined (__AVR_AT43USB355__)
 106               	#  include <avr/io43u35x.h>
 107               	#elif defined (__AVR_AT76C711__)
 108               	#  include <avr/io76c711.h>
 109               	#elif defined (__AVR_AT86RF401__)
 110               	#  include <avr/io86r401.h>
 111               	#elif defined (__AVR_AT90PWM1__)
 112               	#  include <avr/io90pwm1.h>
 113               	#elif defined (__AVR_AT90PWM2__)
 114               	#  include <avr/io90pwmx.h>
 115               	#elif defined (__AVR_AT90PWM2B__)
 116               	#  include <avr/io90pwm2b.h>
 117               	#elif defined (__AVR_AT90PWM3__)
 118               	#  include <avr/io90pwmx.h>
 119               	#elif defined (__AVR_AT90PWM3B__)
 120               	#  include <avr/io90pwm3b.h>
 121               	#elif defined (__AVR_AT90PWM216__)
 122               	#  include <avr/io90pwm216.h>
 123               	#elif defined (__AVR_AT90PWM316__)
 124               	#  include <avr/io90pwm316.h>
 125               	#elif defined (__AVR_AT90PWM81__)
 126               	#  include <avr/io90pwm81.h>
 127               	#elif defined (__AVR_ATmega8U2__)
 128               	#  include <avr/iom8u2.h>
 129               	#elif defined (__AVR_ATmega16M1__)
 130               	#  include <avr/iom16m1.h>
 131               	#elif defined (__AVR_ATmega16U2__)
 132               	#  include <avr/iom16u2.h>
 133               	#elif defined (__AVR_ATmega16U4__)
 134               	#  include <avr/iom16u4.h>
 135               	#elif defined (__AVR_ATmega32C1__)
 136               	#  include <avr/iom32c1.h>
 137               	#elif defined (__AVR_ATmega32M1__)
 138               	#  include <avr/iom32m1.h>
 139               	#elif defined (__AVR_ATmega32U2__)
 140               	#  include <avr/iom32u2.h>
 141               	#elif defined (__AVR_ATmega32U4__)
 142               	#  include <avr/iom32u4.h>
 143               	#elif defined (__AVR_ATmega32U6__)
 144               	#  include <avr/iom32u6.h>
 145               	#elif defined (__AVR_ATmega64C1__)
 146               	#  include <avr/iom64c1.h>
 147               	#elif defined (__AVR_ATmega64M1__)
 148               	#  include <avr/iom64m1.h>
 149               	#elif defined (__AVR_ATmega128__)
 150               	#  include <avr/iom128.h>
 151               	#elif defined (__AVR_ATmega1280__)
 152               	#  include <avr/iom1280.h>
 153               	#elif defined (__AVR_ATmega1281__)
 154               	#  include <avr/iom1281.h>
 155               	#elif defined (__AVR_ATmega1284P__)
 156               	#  include <avr/iom1284p.h>
 157               	#elif defined (__AVR_ATmega128RFA1__)
 158               	#  include <avr/iom128rfa1.h>
 159               	#elif defined (__AVR_ATmega2560__)
 160               	#  include <avr/iom2560.h>
 161               	#elif defined (__AVR_ATmega2561__)
 162               	#  include <avr/iom2561.h>
 163               	#elif defined (__AVR_AT90CAN32__)
 164               	#  include <avr/iocan32.h>
 165               	#elif defined (__AVR_AT90CAN64__)
 166               	#  include <avr/iocan64.h>
 167               	#elif defined (__AVR_AT90CAN128__)
 168               	#  include <avr/iocan128.h>
 169               	#elif defined (__AVR_AT90USB82__)
 170               	#  include <avr/iousb82.h>
 171               	#elif defined (__AVR_AT90USB162__)
 172               	#  include <avr/iousb162.h>
 173               	#elif defined (__AVR_AT90USB646__)
 174               	#  include <avr/iousb646.h>
 175               	#elif defined (__AVR_AT90USB647__)
 176               	#  include <avr/iousb647.h>
 177               	#elif defined (__AVR_AT90USB1286__)
 178               	#  include <avr/iousb1286.h>
 179               	#elif defined (__AVR_AT90USB1287__)
 180               	#  include <avr/iousb1287.h>
 181               	#elif defined (__AVR_ATmega64__)
 182               	#  include <avr/iom64.h>
 183               	#elif defined (__AVR_ATmega640__)
 184               	#  include <avr/iom640.h>
 185               	#elif defined (__AVR_ATmega644__) || defined (__AVR_ATmega644A__)
 186               	#  include <avr/iom644.h>
 187               	#elif defined (__AVR_ATmega644P__)
 188               	#  include <avr/iom644p.h>
 189               	#elif defined (__AVR_ATmega644PA__)
 190               	#  include <avr/iom644pa.h>
 191               	#elif defined (__AVR_ATmega645__) || defined (__AVR_ATmega645A__) || defined (__AVR_ATmega645P__)
 192               	#  include <avr/iom645.h>
 193               	#elif defined (__AVR_ATmega6450__) || defined (__AVR_ATmega6450A__) || defined (__AVR_ATmega6450P__
 194               	#  include <avr/iom6450.h>
 195               	#elif defined (__AVR_ATmega649__) || defined (__AVR_ATmega649A__)
 196               	#  include <avr/iom649.h>
 197               	#elif defined (__AVR_ATmega6490__) || defined (__AVR_ATmega6490A__) || defined (__AVR_ATmega6490P__
 198               	#  include <avr/iom6490.h>
 199               	#elif defined (__AVR_ATmega649P__)
 200               	#  include <avr/iom649p.h>
 201               	#elif defined (__AVR_ATmega64HVE__)
 202               	#  include <avr/iom64hve.h>
 203               	#elif defined (__AVR_ATmega103__)
 204               	#  include <avr/iom103.h>
 205               	#elif defined (__AVR_ATmega32__)
 206               	#  include <avr/iom32.h>
 207               	#elif defined (__AVR_ATmega323__)
 208               	#  include <avr/iom323.h>
 209               	#elif defined (__AVR_ATmega324P__) || defined (__AVR_ATmega324A__)
 210               	#  include <avr/iom324.h>
 211               	#elif defined (__AVR_ATmega324PA__)
 212               	#  include <avr/iom324pa.h>
 213               	#elif defined (__AVR_ATmega325__)
 214               	#  include <avr/iom325.h>
 215               	#elif defined (__AVR_ATmega325P__)
 216               	#  include <avr/iom325.h>
 217               	#elif defined (__AVR_ATmega3250__)
 218               	#  include <avr/iom3250.h>
 219               	#elif defined (__AVR_ATmega3250P__)
 220               	#  include <avr/iom3250.h>
 221               	#elif defined (__AVR_ATmega328P__) || defined (__AVR_ATmega328__)
 222               	#  include <avr/iom328p.h>
   1               	/* Copyright (c) 2007 Atmel Corporation
 223               	#elif defined (__AVR_ATmega329__)
 224               	#  include <avr/iom329.h>
 225               	#elif defined (__AVR_ATmega329P__) || defined (__AVR_ATmega329PA__)
 226               	#  include <avr/iom329.h>
 227               	#elif defined (__AVR_ATmega3290__)
 228               	#  include <avr/iom3290.h>
 229               	#elif defined (__AVR_ATmega3290P__)
 230               	#  include <avr/iom3290.h>
 231               	#elif defined (__AVR_ATmega32HVB__)
 232               	#  include <avr/iom32hvb.h>
 233               	#elif defined (__AVR_ATmega406__)
 234               	#  include <avr/iom406.h>
 235               	#elif defined (__AVR_ATmega16__)
 236               	#  include <avr/iom16.h>
 237               	#elif defined (__AVR_ATmega16A__)
 238               	#  include <avr/iom16a.h>
 239               	#elif defined (__AVR_ATmega161__)
 240               	#  include <avr/iom161.h>
 241               	#elif defined (__AVR_ATmega162__)
 242               	#  include <avr/iom162.h>
 243               	#elif defined (__AVR_ATmega163__)
 244               	#  include <avr/iom163.h>
 245               	#elif defined (__AVR_ATmega164P__) || defined (__AVR_ATmega164A__)
 246               	#  include <avr/iom164.h>
 247               	#elif defined (__AVR_ATmega165__) || defined (__AVR_ATmega165A__)
 248               	#  include <avr/iom165.h>
 249               	#elif defined (__AVR_ATmega165P__)
 250               	#  include <avr/iom165p.h>
 251               	#elif defined (__AVR_ATmega168__) || defined (__AVR_ATmega168A__)
 252               	#  include <avr/iom168.h>
 253               	#elif defined (__AVR_ATmega168P__)
 254               	#  include <avr/iom168p.h>
 255               	#elif defined (__AVR_ATmega169__) || defined (__AVR_ATmega169A__)
 256               	#  include <avr/iom169.h>
 257               	#elif defined (__AVR_ATmega169P__)
 258               	#  include <avr/iom169p.h>
 259               	#elif defined (__AVR_ATmega169PA__)
 260               	#  include <avr/iom169pa.h>
 261               	#elif defined (__AVR_ATmega8HVA__)
 262               	#  include <avr/iom8hva.h>
 263               	#elif defined (__AVR_ATmega16HVA__)
 264               	#  include <avr/iom16hva.h>
 265               	#elif defined (__AVR_ATmega16HVA2__)
 266               	#  include <avr/iom16hva2.h>
 267               	#elif defined (__AVR_ATmega16HVB__)
 268               	#  include <avr/iom16hvb.h>
 269               	#elif defined (__AVR_ATmega8__)
 270               	#  include <avr/iom8.h>
 271               	#elif defined (__AVR_ATmega48__) || defined (__AVR_ATmega48A__)
 272               	#  include <avr/iom48.h>
 273               	#elif defined (__AVR_ATmega48P__)
 274               	#  include <avr/iom48p.h>
 275               	#elif defined (__AVR_ATmega88__) || defined (__AVR_ATmega88A__)
 276               	#  include <avr/iom88.h>
 277               	#elif defined (__AVR_ATmega88P__)
 278               	#  include <avr/iom88p.h>
 279               	#elif defined (__AVR_ATmega88PA__)
 280               	#  include <avr/iom88pa.h>
 281               	#elif defined (__AVR_ATmega8515__)
 282               	#  include <avr/iom8515.h>
 283               	#elif defined (__AVR_ATmega8535__)
 284               	#  include <avr/iom8535.h>
 285               	#elif defined (__AVR_AT90S8535__)
 286               	#  include <avr/io8535.h>
 287               	#elif defined (__AVR_AT90C8534__)
 288               	#  include <avr/io8534.h>
 289               	#elif defined (__AVR_AT90S8515__)
 290               	#  include <avr/io8515.h>
 291               	#elif defined (__AVR_AT90S4434__)
 292               	#  include <avr/io4434.h>
 293               	#elif defined (__AVR_AT90S4433__)
 294               	#  include <avr/io4433.h>
 295               	#elif defined (__AVR_AT90S4414__)
 296               	#  include <avr/io4414.h>
 297               	#elif defined (__AVR_ATtiny22__)
 298               	#  include <avr/iotn22.h>
 299               	#elif defined (__AVR_ATtiny26__)
 300               	#  include <avr/iotn26.h>
 301               	#elif defined (__AVR_AT90S2343__)
 302               	#  include <avr/io2343.h>
 303               	#elif defined (__AVR_AT90S2333__)
 304               	#  include <avr/io2333.h>
 305               	#elif defined (__AVR_AT90S2323__)
 306               	#  include <avr/io2323.h>
 307               	#elif defined (__AVR_AT90S2313__)
 308               	#  include <avr/io2313.h>
 309               	#elif defined (__AVR_ATtiny2313__)
 310               	#  include <avr/iotn2313.h>
 311               	#elif defined (__AVR_ATtiny2313A__)
 312               	#  include <avr/iotn2313a.h>
 313               	#elif defined (__AVR_ATtiny13__)
 314               	#  include <avr/iotn13.h>
 315               	#elif defined (__AVR_ATtiny13A__)
 316               	#  include <avr/iotn13a.h>
 317               	#elif defined (__AVR_ATtiny25__)
 318               	#  include <avr/iotn25.h>
 319               	#elif defined (__AVR_ATtiny4313__)
 320               	#  include <avr/iotn4313.h>
 321               	#elif defined (__AVR_ATtiny45__)
 322               	#  include <avr/iotn45.h>
 323               	#elif defined (__AVR_ATtiny85__)
 324               	#  include <avr/iotn85.h>
 325               	#elif defined (__AVR_ATtiny24__)
 326               	#  include <avr/iotn24.h>
 327               	#elif defined (__AVR_ATtiny24A__)
 328               	#  include <avr/iotn24a.h>
 329               	#elif defined (__AVR_ATtiny44__)
 330               	#  include <avr/iotn44.h>
 331               	#elif defined (__AVR_ATtiny44A__)
 332               	#  include <avr/iotn44a.h>
 333               	#elif defined (__AVR_ATtiny84__)
 334               	#  include <avr/iotn84.h>
 335               	#elif defined (__AVR_ATtiny261__)
 336               	#  include <avr/iotn261.h>
 337               	#elif defined (__AVR_ATtiny261A__)
 338               	#  include <avr/iotn261a.h>
 339               	#elif defined (__AVR_ATtiny461__)
 340               	#  include <avr/iotn461.h>
 341               	#elif defined (__AVR_ATtiny461A__)
 342               	#  include <avr/iotn461a.h>
 343               	#elif defined (__AVR_ATtiny861__)
 344               	#  include <avr/iotn861.h>
 345               	#elif defined (__AVR_ATtiny861A__)
 346               	#  include <avr/iotn861a.h>
 347               	#elif defined (__AVR_ATtiny43U__)
 348               	#  include <avr/iotn43u.h>
 349               	#elif defined (__AVR_ATtiny48__)
 350               	#  include <avr/iotn48.h>
 351               	#elif defined (__AVR_ATtiny88__)
 352               	#  include <avr/iotn88.h>
 353               	#elif defined (__AVR_ATtiny87__)
 354               	#  include <avr/iotn87.h>
 355               	#elif defined (__AVR_ATtiny167__)
 356               	#  include <avr/iotn167.h>
 357               	#elif defined (__AVR_AT90SCR100__)
 358               	#  include <avr/io90scr100.h>
 359               	#elif defined (__AVR_ATxmega16A4__)
 360               	#  include <avr/iox16a4.h>
 361               	#elif defined (__AVR_ATxmega16D4__)
 362               	#  include <avr/iox16d4.h>
 363               	#elif defined (__AVR_ATxmega32A4__)
 364               	#  include <avr/iox32a4.h>
 365               	#elif defined (__AVR_ATxmega32D4__)
 366               	#  include <avr/iox32d4.h>
 367               	#elif defined (__AVR_ATxmega64A1__)
 368               	#  include <avr/iox64a1.h>
 369               	#elif defined (__AVR_ATxmega64A3__)
 370               	#  include <avr/iox64a3.h>
 371               	#elif defined (__AVR_ATxmega64D3__)
 372               	#  include <avr/iox64d3.h>
 373               	#elif defined (__AVR_ATxmega128A1__)
 374               	#  include <avr/iox128a1.h>
 375               	#elif defined (__AVR_ATxmega128A3__)
 376               	#  include <avr/iox128a3.h>
 377               	#elif defined (__AVR_ATxmega128D3__)
 378               	#  include <avr/iox128d3.h>
 379               	#elif defined (__AVR_ATxmega192A3__)
 380               	#  include <avr/iox192a3.h>
 381               	#elif defined (__AVR_ATxmega192D3__)
 382               	#  include <avr/iox192d3.h>
 383               	#elif defined (__AVR_ATxmega256A3__)
 384               	#  include <avr/iox256a3.h>
 385               	#elif defined (__AVR_ATxmega256A3B__)
 386               	#  include <avr/iox256a3b.h>
 387               	#elif defined (__AVR_ATxmega256D3__)
 388               	#  include <avr/iox256d3.h>
 389               	#elif defined (__AVR_ATA6289__)
 390               	#  include <avr/ioa6289.h>
 391               	/* avr1: the following only supported for assembler programs */
 392               	#elif defined (__AVR_ATtiny28__)
 393               	#  include <avr/iotn28.h>
 394               	#elif defined (__AVR_AT90S1200__)
 395               	#  include <avr/io1200.h>
 396               	#elif defined (__AVR_ATtiny15__)
 397               	#  include <avr/iotn15.h>
 398               	#elif defined (__AVR_ATtiny12__)
 399               	#  include <avr/iotn12.h>
 400               	#elif defined (__AVR_ATtiny11__)
 401               	#  include <avr/iotn11.h>
 402               	#else
 403               	#  if !defined(__COMPILING_AVR_LIBC__)
 404               	#    warning "device type not defined"
 405               	#  endif
 406               	#endif
 407               	
 408               	#include <avr/portpins.h>
   1               	/* Copyright (c) 2003  Theodore A. Roth
 409               	
 410               	#include <avr/common.h>
   1               	/* Copyright (c) 2007 Eric B. Weddington
 411               	
 412               	#include <avr/version.h>
   1               	/* Copyright (c) 2005, Joerg Wunsch                               -*- c -*-
 413               	
 414               	/* Include fuse.h after individual IO header files. */
 415               	#include <avr/fuse.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 416               	
 417               	/* Include lock.h after individual IO header files. */
 418               	#include <avr/lock.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 419               	
   3               	#include <avr/interrupt.h>
   1               	/* Copyright (c) 2002,2005,2007 Marek Michalkiewicz
   4               	#include "kernel.h"
   1               	
   5               	
   6               	
   7               	
   8               	
   9               	
  10               	
  11               	;;============================define user address or macro starting=========================;; 
  12               	.equ     KER_TR ,         1000    ;TickRate in Hz, only defined, not calculated
  13               	.equ     KER_PRS,         0x03    ;For prescaler 64, manually select
  14               	.equ     KER_RLD,         0x82    ;KER_RLD = 0xFF-(F_CPU/KER_PRS/KER_TR), check overflow
  15               	.equ     KER_STK_SZ,      128     ;stack size in bytes for each task
  16               	.equ     KER_MX_NTSK,     10      ;max number of tasks
  17               	;;==============================define user address or macro end============================;; 
  18               	
  19               	
  20               	
  21               	
  22               	
  23               	;;===============================define data offsets starting===============================;; 
  24               	.equ     OFF_TICK0,       0x00    ;tick count byte0 offset from KerBase
  25               	.equ     OFF_TICK1,       0x01    ;tick count byte1 offset from KerBase
  26               	.equ     OFF_TICK2,       0x02    ;tick count byte2 offset from KerBase
  27               	.equ     OFF_TICK3,       0x03    ;tick count byte3 offset from KerBase
  28               	.equ     OFF_TICK4,       0x04    ;tick count byte4 offset from KerBase
  29               	.equ     OFF_PRS  ,       0x05    ;counter prescaler offset from KerBase
  30               	.equ     OFF_RLD  ,       0x06    ;counter reload offset from KerBase
  31               	.equ     OFF_TID  ,       0x07    ;task id offset from KerBase
  32               	.equ     OFF_NTSK ,       0x08    ;ntask offset from KerBase
  33               	.equ     OFF_PTID ,       0x09    ;priority task_id offset from KerBase
  34               	;;==================================define data offsets end=================================;; 
  35               	
  36               	
  37               	
  38               	
  39               	
  40               	;;===============================define system macro starting===============================;; 
  41               	.equ     TASK_READY,      0x01    ;bit 0 in system status reg
  42               	.equ     TASK_BLOCK,      0x00    ;bit 0 in system status reg
  43               	;;==================================define system macro end=================================;; 
  44               	
  45               	
  46               	
  47               	
  48               	
  49               	;;===========================define hardware reg address starting===========================;; 
  50               	.equ     SRSREG  ,        0x5F    ;manually defined SREG in SRAM
  51               	.equ     SRSPH   ,        0x5E    ;manually defined SPH in SRAM
  52               	.equ     SRSPL   ,        0x5D    ;manually defined SPL in SRAM
  53               	
  54               	.equ     SRTIMSK0,        0x6E    ;manually defined TIMSK0 in SRAM
  55               	.equ     SROCR0B ,        0x48    ;manually defined OCR0B in SRAM
  56               	.equ     SROCR0A ,        0x47    ;manually defined OCR0A in SRAM
  57               	.equ     SRTCNT0 ,        0x46    ;manually defined TCNT0 in SRAM
  58               	.equ     SRTCCR0B,        0x45    ;manually defined TCCR0B in SRAM
  59               	.equ     SRTCCR0A,        0x44    ;manually defined TCCR0A in SRAM
  60               	.equ     SRTIFR0 ,        0x35    ;manually defined TIFR0 in SRAM
  61               	
  62               	.equ     IOOCR0B ,        0x28    ;manually defined OCR0B in IO
  63               	.equ     IOOCR0A ,        0x27    ;manually defined OCR0A in IO
  64               	.equ     IOTCNT0 ,        0x26    ;manually defined TCNT0 in IO
  65               	.equ     IOTCCR0B,        0x25    ;manually defined TCCR0B in IO
  66               	.equ     IOTCCR0A,        0x24    ;manually defined TCCR0A in IO
  67               	.equ     IOTIFR0 ,        0x15    ;manually defined TIFR0 in IO
  68               	
  69               	.equ     IOSREG  ,        0x3F    ;manually defined SREG in IO
  70               	.equ     IOSPH   ,        0x3E    ;manually defined SPH in IO
  71               	.equ     IOSPL   ,        0x3D    ;manually defined SPL in IO
  72               	;;==============================define hardware reg address end=============================;; 
  73               	
  74               	
  75               	
  76               	
  77               	
  78               	;;=============================define global variables starting=============================;; 
  79               	.section   .bss
  80               	
  81               	.global    KerBase                 ;declare global space for kernel
  82 0000 0000 0000 	KerBase:   .skip 10                ;Tick(5), prs(1), rld(1), task_id(1), ntask(1), ptid(1)
  82      0000 0000 
  82      0000 
  83               	
  84               	.global    KerSP                   ;declare global space for stack pointers
  85 000a 0000 0000 	KerSP:     .skip KER_MX_NTSK*2     ;2 bytes for each task
  85      0000 0000 
  85      0000 0000 
  85      0000 0000 
  85      0000 0000 
  86               	
  87               	.global    KerSchSts               ;declare global space for scheduler status
  88 001e 0000 0000 	KerSchSts: .skip KER_MX_NTSK*1     ;status(1)
  88      0000 0000 
  88      0000 
  89               	
  90               	.global    KerSchPr                ;declare global space for scheduler priority
  91 0028 0000 0000 	KerSchPr:  .skip KER_MX_NTSK*1     ;priority(1)
  91      0000 0000 
  91      0000 
  92               	
  93               	.global    KerSchSlp               ;declare global space for task sleep
  94 0032 0000 0000 	KerSchSlp: .skip KER_MX_NTSK*2     ;timing(2)
  94      0000 0000 
  94      0000 0000 
  94      0000 0000 
  94      0000 0000 
  95               	
  96               	.global    KerStack                ;declare global space for stack
  97 0046 0000 0000 	KerStack:  .skip KER_STK_SZ*10     ;KER_STK_SZ bytes for each task
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  97      0000 0000 
  98               	;;==============================define global variables end=================================;; 
  99               	
 100               	
 101               	
 102               	
 103               	
 104               	;;===============================define vector section starting=============================;; 
 105               	.section .vectors, "ax", @progbits
 106               	
 107 0000 0000 0000 	.org    0x20
 107      0000 0000 
 107      0000 0000 
 107      0000 0000 
 107      0000 0000 
 107      0000 0000 
 107      0000 0000 
 107      0000 0000 
 108:kernel.S      ****         RJMP  __vector_16
 109               	;;=================================define vector section end================================;; 
 110               	
 111               	
 112               	
 113               	
 114               	
 115               	;;===============================define text section starting===============================;; 
 116               	.section .text
 117               	;;==================================define text section end=================================;; 
 118               	
 119               	
 120               	
 121               	
 122               	
 123               	;;==============================define global functions starting============================;; 
 124               	.global  Kernel_SysTick_Reg_Init
 125               	.global  Kernel_SysTick_Val_Get
 126               	.global  Kernel_SysTick_Val_Safely_Get
 127               	.global  Kernel_Interrupt_Sts_Get
 128               	.global  Kernel_Init
 129               	.global  Kernel_Task_Create
 130               	.global  Kernel_Start_Tasks
 131               	.global  Kernel_Task_Idle
 132               	.global  Kernel_Task_Sleep
 133               	.global  Kernel_Task_Sleep_Time_Get
 134               	.global  Kernel_Task_Sts_Get
 135               	.global  Kernel_Task_Prio_Get
 136               	.global  Kernel_High_Prio_Task_ID_Get
 137               	.global  Kernel_Abs_High_Prio_Task_ID_Get
 138               	;;================================define global functions end===============================;; 
 139               	
 140               	
 141               	       
 142               	;;============================debug pin operation init starting=============================;; 
 143               	.macro  KER_TIMER_INIT                                    ;total 1.5uS @8MHz      ( 12 clocks) 
 144               	        LDS   R16		         , KerBase+OFF_PRS        ;load prescaler         (  2 clocks) 
 145               			LDS   R17		         , KerBase+OFF_RLD        ;load reload val        (  2 clocks) 
 146               			STS   SRTCCR0B           , R16                    ;prescaler-> TCCR0B     (  2 clocks) 
 147               			STS   SRTCNT0            , R17                    ;reload val-> TCNT0     (  2 clocks) 
 148               			LDI   R16                , 0x01                   ;bit mask TOIE0         (  1 clock ) 
 149               			STS   SRTIMSK0           , R16                    ;set to TIMSK0          (  2 clocks) 
 150               			SEI                                               ;force enable interrupt (  1 clock ) 
 151               	.endm
 152               	;;==============================debug pin operation init end================================;; 
 153               	
 154               	
 155               	
 156               	
 157               	
 158               	;;============================debug pin operation init starting=============================;; 
 159               	.macro  KER_DEBUG_PIN_INIT                                ;total 0.5uS @8MHz      (  4 clocks) 
 160               	        #ifdef KER_DBG_ENABLE                                                                  
 161               			SBI   KER_DBG_DDR        , KER_DBG_PIN            ;set bit in DDR         (  2 clocks) 
 162               			CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear port bit         (  2 clocks) 
 163               			#endif
 164               	.endm
 165               	;;==============================debug pin operation init end================================;; 
 166               	
 167               	
 168               	
 169               	
 170               	
 171               	;;===========================debug pin operation set starting===============================;; 
 172               	.macro  KER_DEBUG_PIN_SET                                 ;total 0.25uS @8MHz     (  2 clocks) 
 173               	        #ifdef KER_DBG_ENABLE                                                                  
 174               	        SBI   KER_DBG_PORT       , KER_DBG_PIN            ;set gpio               (  2 clocks) 
 175               			#endif
 176               	.endm
 177               	;;==============================debug pin operation set end=================================;; 
 178               	
 179               	
 180               	
 181               	
 182               	
 183               	;;===========================debug pin operation clear starting=============================;; 
 184               	.macro  KER_DEBUG_PIN_CLEAR                               ;total 0.25uS @8MHz     (  2 clocks) 
 185               	        #ifdef KER_DBG_ENABLE                                                                  
 186               			CBI   KER_DBG_PORT       , KER_DBG_PIN            ;clear gpio             (  2 clocks) 
 187               			#endif
 188               	.endm
 189               	;;==============================debug pin operation clear end===============================;; 
 190               	
 191               	
 192               	
 193               	
 194               	
 195               	;;==============================reload counter value starting===============================;; 
 196               	.macro  KER_COUNTER_RELOAD                                ;total 0.5uS @8MHz      (  4 clocks) 
 197               	        LDS   R16                , KerBase+OFF_RLD        ;load reload value      (  2 clocks) 
 198               			STS   SRTCNT0            , R16                    ;Set value to TCNT0     (  2 clocks) 
 199               	.endm
 200               	;;=================================reload counter value end=================================;; 
 201               	
 202               	
 203               	
 204               	
 205               	
 206               	;;==================================context save starting===================================;; 
 207               	.macro  KER_CONTEXT_SAVE                                  ;total 8.5uS @8MHz      ( 68 clocks) 
 208               	        PUSH  R0                                          ;save R0                (  2 clocks) 
 209               			IN    R0                 , IOSREG                 ;load SREG              (  1 clock ) 
 210               			PUSH  R0                                          ;save SREG              (  2 clocks) 
 211               			PUSH  R1                                          ;save R1                (  2 clocks) 
 212               			CLR   R1                                          ;clear R1               (  1 clock ) 
 213               			PUSH  R2                                          ;save R2                (  2 clocks) 
 214               			PUSH  R3                                          ;save R3                (  2 clocks) 
 215               			PUSH  R4                                          ;save R4                (  2 clocks) 
 216               			PUSH  R5                                          ;save R5                (  2 clocks) 
 217               			PUSH  R6                                          ;save R6                (  2 clocks) 
 218               			PUSH  R7                                          ;save R7                (  2 clocks) 
 219               			PUSH  R8                                          ;save R8                (  2 clocks) 
 220               			PUSH  R9                                          ;save R9                (  2 clocks) 
 221               			PUSH  R10                                         ;save R10               (  2 clocks) 
 222               			PUSH  R11                                         ;save R11               (  2 clocks) 
 223               			PUSH  R12                                         ;save R12               (  2 clocks) 
 224               			PUSH  R13                                         ;save R13               (  2 clocks) 
 225               			PUSH  R14                                         ;save R14               (  2 clocks) 
 226               			PUSH  R15                                         ;save R15               (  2 clocks) 
 227               			PUSH  R16                                         ;save R16               (  2 clocks) 
 228               			PUSH  R17                                         ;save R17               (  2 clocks) 
 229               			PUSH  R18                                         ;save R18               (  2 clocks) 
 230               			PUSH  R19                                         ;save R19               (  2 clocks) 
 231               			PUSH  R20                                         ;save R20               (  2 clocks) 
 232               			PUSH  R21                                         ;save R21               (  2 clocks) 
 233               			PUSH  R22                                         ;save R22               (  2 clocks) 
 234               			PUSH  R23                                         ;save R23               (  2 clocks) 
 235               			PUSH  R24                                         ;save R24               (  2 clocks) 
 236               			PUSH  R25                                         ;save R25               (  2 clocks) 
 237               			PUSH  R26                                         ;save R26               (  2 clocks) 
 238               			PUSH  R27                                         ;save R27               (  2 clocks) 
 239               			PUSH  R28                                         ;save R28               (  2 clocks) 
 240               			PUSH  R29                                         ;save R29               (  2 clocks) 
 241               			PUSH  R30                                         ;save R30               (  2 clocks) 
 242               			PUSH  R31                                         ;save R31               (  2 clocks) 
 243               	.endm
 244               	;;=====================================context save end=====================================;; 
 245               	
 246               	
 247               	
 248               	
 249               	
 250               	;;================================context restore starting==================================;; 
 251               	.macro  KER_CONTEXT_RESTORE                               ;total 8.38uS @8MHz     ( 67 clocks) 
 252               			POP   R31                                         ;restore R31            (  2 clocks) 
 253               			POP   R30                                         ;restore R30            (  2 clocks) 
 254               			POP   R29                                         ;restore R29            (  2 clocks) 
 255               			POP   R28                                         ;restore R28            (  2 clocks) 
 256               			POP   R27                                         ;restore R27            (  2 clocks) 
 257               			POP   R26                                         ;restore R26            (  2 clocks) 
 258               			POP   R25                                         ;restore R25            (  2 clocks) 
 259               			POP   R24                                         ;restore R24            (  2 clocks) 
 260               			POP   R23                                         ;restore R23            (  2 clocks) 
 261               			POP   R22                                         ;restore R22            (  2 clocks) 
 262               			POP   R21                                         ;restore R21            (  2 clocks) 
 263               			POP   R20                                         ;restore R20            (  2 clocks) 
 264               			POP   R19                                         ;restore R19            (  2 clocks) 
 265               			POP   R18                                         ;restore R18            (  2 clocks) 
 266               			POP   R17                                         ;restore R17            (  2 clocks) 
 267               			POP   R16                                         ;restore R16            (  2 clocks) 
 268               			POP   R15                                         ;restore R15            (  2 clocks) 
 269               			POP   R14                                         ;restore R14            (  2 clocks) 
 270               			POP   R13                                         ;restore R13            (  2 clocks) 
 271               			POP   R12                                         ;restore R12            (  2 clocks) 
 272               			POP   R11                                         ;restore R11            (  2 clocks) 
 273               			POP   R10                                         ;restore R10            (  2 clocks) 
 274               			POP   R9                                          ;restore R9             (  2 clocks) 
 275               			POP   R8                                          ;restore R8             (  2 clocks) 
 276               			POP   R7                                          ;restore R7             (  2 clocks) 
 277               			POP   R6                                          ;restore R6             (  2 clocks) 
 278               			POP   R5                                          ;restore R5             (  2 clocks) 
 279               			POP   R4                                          ;restore R4             (  2 clocks) 
 280               			POP   R3                                          ;restore R3             (  2 clocks) 
 281               			POP   R2                                          ;restore R2             (  2 clocks) 
 282               			POP   R1                                          ;restore R1             (  2 clocks) 
 283               			POP   R0                                          ;fetch SREG             (  2 clocks) 
 284               			OUT   IOSREG             , R0                     ;load SREG              (  1 clock ) 
 285               			POP   R0                                          ;restore R0             (  2 clocks) 
 286               	.endm
 287               	;;===================================context restore end====================================;; 
 288               	
 289               	
 290               	
 291               	
 292               	
 293               	;;===============================save current task sp starting==============================;; 
 294               	.macro  KER_SAVE_CURR_TASK_SP                             ;total 1.63uS @8MHz     ( 13 clocks) 
 295               	        LDS   R2                 , KerBase+OFF_TID        ;fetch task_id          (  2 clocks) 
 296               			IN    R3                 , IOSPL                  ;fetch SPL0             (  1 clock ) 
 297               			IN    R4                 , IOSPH                  ;fetch SPH0             (  1 clock ) 
 298               			MOV   R16                , R2                     ;copy task_id           (  1 clock ) 
 299               			LSL   R16                                         ;left shift to multiply (  1 clock ) 
 300               			LDI   ZL                 , lo8(KerSP)             ;fetch base pos low     (  1 clock ) 
 301               			LDI   ZH                 , hi8(KerSP)             ;fetch base pos high    (  1 clock ) 
 302               			ADD   ZL                 , R16                    ;add offset to array    (  1 clock ) 
 303               			ADC   ZH                 , R1                     ;add carry, R1 zero reg (  1 clock ) 
 304               			ST    Z+                 , R3                     ;store SPL at ZP        (  2 clocks) 
 305               			ST    z                  , R4                     ;store SPH ZP+1         (  2 clocks) 
 306               	.endm
 307               	;;================================save current task sp end==================================;; 
 308               	
 309               	
 310               	
 311               	
 312               	
 313               	;;==============================load next task id starting==================================;; 
 314               	.macro  KER_LOAD_NEXT_TASK_ID                             ;total 1.63uS @8MHz     ( 13 clocks) 
 315               			MOV   R16                , R2                     ;copy task_id           (  1 clock ) 
 316               			INC   R16                                         ;increment task_id      (  1 clock ) 
 317               			LDS   R17                , KerBase+OFF_NTSK       ;load ntask             (  2 clocks) 
 318               		_MOD_CONT\@:                                          ;use local label
 319               		    CP    R16                , R17                    ;compare R17 with R16   (  1 clock ) 
 320               			BRLO  _MOD_DONE\@                                 ;if R16<R17, done       (  2 clocks) 
 321               			SUB   R16                , R17                    ;subtract R17 from R16  (  1 clock ) 
 322               			RJMP  _MOD_CONT\@                                 ;go to loop start       (  2 clocks) 
 323               		_MOD_DONE\@:                                          ;use local label
 324               		    STS   KerBase+OFF_TID    , R16                    ;save task_id%ntask     (  2 clocks) 
 325               			MOV   R2                 , R16                    ;copy task_id           (  1 clock ) 
 326               	.endm
 327               	;;=================================load next task id end====================================;; 
 328               	
 329               	
 330               	
 331               	
 332               	
 333               	;;==============================load task id & sp starting==================================;; 
 334               	.macro  KER_LOAD_TASK_ID_AND_SP                           ;total 1.75uS @8MHz     ( 14 clocks) 
 335               			MOV   R16                , R2                     ;copy task_id           (  1 clock ) 
 336               			LSL   R16                                         ;left shift to multiply (  1 clock ) 
 337               			LDI   ZL                 , lo8(KerSP)             ;fetch base pos low     (  1 clock ) 
 338               			LDI   ZH                 , hi8(KerSP)             ;fetch base pos high    (  1 clock ) 
 339               			ADD   ZL                 , R16                    ;add offset to array    (  1 clock ) 
 340               			ADC   ZH                 , R1                     ;add carry if any       (  1 clock ) 
 341               			LD    R16                , Z+                     ;load SPL at ZP         (  2 clocks) 
 342               			LD    R17                , Z                      ;load SPH at ZP         (  2 clocks) 
 343               			OUT   IOSPL              , R16                    ;load SPL0              (  1 clock ) 
 344               			OUT   IOSPH              , R17                    ;load SPH0              (  1 clock ) 
 345               	.endm
 346               	;;=================================load task id & sp end====================================;; 
 347               	
 348               	
 349               	
 350               	
 351               	
 352               	;;=================================ISR execution starting===================================;; 
 353               	.global  __vector_16
 354               	    __vector_16:                                          ;total 26.13uS @8MHz    (211 clocks) 
 355:kernel.S      **** 	    KER_DEBUG_PIN_SET                                 ;debug pin set          (  2 clocks) 
 356:kernel.S      ****         KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 357:kernel.S      **** 		KER_COUNTER_RELOAD                                ;counter reload         (  4 clocks) 
 358               			;KER_TICK_INCREMENT                                ;increment tick counter ( 27 clocks) 
 359:kernel.S      ****         KER_SAVE_CURR_TASK_SP                             ;save current task SP   ( 14 clocks) 
 360               			
 361               			;KER_DEC_SLP_TIMEOUT                               ;decrement of sleep time
 362:kernel.S      **** 		KER_LOAD_NEXT_TASK_ID
 363               			;KER_RUN_SCHEDULER                                 ;run scheduler          ( 14 clocks) 
 364               		    
 365:kernel.S      **** 		KER_LOAD_TASK_ID_AND_SP                           ;load next task id, SP  ( 14 clocks) 
 366:kernel.S      **** 		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 367:kernel.S      **** 	    KER_DEBUG_PIN_CLEAR                               ;debug pin clear        (  2 clocks) 
 368:kernel.S      **** 		RETI                                              ;return from interrupt  (  4 clocks) 
 369               	;;====================================ISR execution end=====================================;; 
 370               	
 371               	
 372               	
 373               	
 374               	
 375               	;;================================SysTick reg init starting=================================;; 
 376               	Kernel_SysTick_Reg_Init:                                  ;total operation        ( 48 clocks) 
 377               	        ;arg1 -> prescaler R24, arg2 -> reload val R22
 378:kernel.S      ****         CLI                                               ;disable global int     (  1 clock )
 379:kernel.S      **** 		KER_DEBUG_PIN_INIT                                ;debug pin init         (  4 clocks) 
 380:kernel.S      **** 		LDI   R16                , 0x00                   ;set 0x00 to R16        (  1 clock ) 
 381               			
 382               			;clear tick counter
 383:kernel.S      **** 		STS   KerBase+OFF_TICK0  , R16                    ;clear  KerBase[0]      (  2 clocks) 
 384:kernel.S      **** 		STS   KerBase+OFF_TICK1  , R16                    ;clear  KerBase[1]      (  2 clocks) 
 385:kernel.S      **** 		STS   KerBase+OFF_TICK2  , R16                    ;clear  KerBase[2]      (  2 clocks) 
 386:kernel.S      **** 		STS   KerBase+OFF_TICK3  , R16                    ;clear  KerBase[3]      (  2 clocks) 
 387:kernel.S      **** 		STS   KerBase+OFF_TICK4  , R16                    ;clear  KerBase[4]      (  2 clocks) 
 388               		    
 389               			;clear system registers
 390:kernel.S      **** 		STS   KerBase+OFF_PRS    , R16                    ;clear  KerBase[5]      (  2 clocks) 
 391:kernel.S      **** 		STS   KerBase+OFF_RLD    , R16                    ;clear  KerBase[6]      (  2 clocks) 
 392:kernel.S      **** 		STS   KerBase+OFF_TID    , R16                    ;clear  KerBase[7]      (  2 clocks) 
 393:kernel.S      **** 		STS   KerBase+OFF_NTSK   , R16                    ;clear  KerBase[8]      (  2 clocks) 
 394:kernel.S      ****         STS   KerBase+OFF_PTID   , R16                    ;clear  KerBase[9]      (  2 clocks) 
 395               			
 396               			;clear all timer registers
 397:kernel.S      **** 		STS   SRTCCR0A           , R16                    ;clear TCCR0A           (  2 clocks) 
 398:kernel.S      **** 		STS   SRTCCR0B           , R16                    ;clear TCCR0B           (  2 clocks) 
 399:kernel.S      **** 		STS   SRTIMSK0           , R16                    ;clear TIMSK0           (  2 clocks) 
 400:kernel.S      **** 		STS   SRTIFR0            , R16                    ;clear TIFR0            (  2 clocks) 
 401:kernel.S      **** 		STS   SROCR0A            , R16                    ;clear OCR0A            (  2 clocks) 
 402:kernel.S      **** 		STS   SROCR0B            , R16                    ;clear OCR0B            (  2 clocks) 
 403:kernel.S      **** 		STS   SRTCNT0            , R16                    ;clear TCNT0            (  2 clocks) 
 404               			
 405               			;store prescaler value
 406:kernel.S      **** 		STS   KerBase+OFF_PRS    , R24                    ;KerBase[5] prescaler   (  2 clocks) 
 407               	        
 408               			;store reload value
 409:kernel.S      **** 		STS   KerBase+OFF_RLD    , R22                    ;KerBase[6] reload val  (  2 clocks) 
 410               			
 411:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 412               	;;===================================SysTick reg init end===================================;; 
 413               	
 414               	
 415               	
 416               	
 417               	
 418               	;;===============================kernel task create starting================================;; 
 419               	Kernel_Task_Create:                                       ;total operation        (130 clocks) 
 420               	        ;func_ptr->R25:R24, task_priority->R22 
 421               	        ;save main SP & Z pointer 
 422:kernel.S      ****         IN    R2                 , IOSPL                  ;save SPL of MSP        (  1 clock ) 
 423:kernel.S      ****         IN    R3                 , IOSPH                  ;save SPH of MSP        (  1 clock ) 
 424:kernel.S      ****         MOV   R4                 , ZL                     ;save ZPL               (  1 clock ) 
 425:kernel.S      **** 		MOV   R5                 , ZH                     ;save ZPH               (  1 clock ) 
 426               	        
 427               			
 428               			;across this function, R16 will be used as task_id 
 429:kernel.S      **** 		LDS   R16                , KerBase+OFF_TID        ;load task_id           (  2 clocks) 
 430               			
 431               			;set priority to KerSchPr+task_id
 432:kernel.S      **** 		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 433:kernel.S      **** 		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 434:kernel.S      **** 		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
 435:kernel.S      **** 		ADC   ZH                 , R1                     ;add high byte+carry    (  1 clock ) 
 436:kernel.S      **** 		ST    Z                  , R22                    ;save priority          (  2 clocks) 
 437               			
 438               			;stack pointer for current task (KerStack + KER_STK_SZ*(task_id+1) - 1) ->stack top 
 439:kernel.S      **** 		MOV   R17                , R16                    ;load task_id           (  1 clock )
 440:kernel.S      **** 		INC   R17                                         ;increment task_id      (  1 clock ) 
 441:kernel.S      **** 		LDI   R18                , KER_STK_SZ             ;load stack size        (  1 clock ) 
 442:kernel.S      **** 		MUL   R17                , R18                    ;multiply to get offset (  2 clocks) 
 443:kernel.S      **** 		MOV   ZL                 , R0                     ;load multiplied low    (  1 clocks) 
 444:kernel.S      **** 		MOV   ZH                 , R1                     ;load multiplied high   (  1 clocks) 
 445:kernel.S      **** 		SBIW  ZL                 , 0x01                   ;dec multiplied val     (  2 clocks) 
 446:kernel.S      **** 		CLR   R1                                          ;gcc expects cleared    (  1 clock ) 
 447:kernel.S      **** 		LDI   R17                , lo8(KerStack)          ;load base addr low     (  1 clock ) 
 448:kernel.S      **** 		LDI   R18                , hi8(KerStack)          ;load base addr high    (  1 clock ) 
 449:kernel.S      **** 		ADD   ZL                 , R17                    ;add low bytes          (  1 clock ) 
 450:kernel.S      **** 		ADC   ZH                 , R18                    ;add high bytes+carry   (  1 clock ) 
 451:kernel.S      **** 		OUT   IOSPL              , ZL                     ;load SPL               (  1 clock ) 
 452:kernel.S      ****         OUT   IOSPH              , ZH                     ;load SPH               (  1 clock ) 
 453               			
 454               			;function argument directly returns word address
 455:kernel.S      **** 	    PUSH  R24                                         ;push word addr low     (  2 clocks) 
 456:kernel.S      **** 		PUSH  R25                                         ;push word addr high    (  2 clocks) 
 457               			
 458               			;push context to stack of this task
 459:kernel.S      **** 		KER_CONTEXT_SAVE                                  ;save context           ( 68 clocks) 
 460               			
 461               			;read stack pointer of current task (necessary when restore)
 462:kernel.S      **** 		IN    R17                , IOSPL                  ;read SPL               (  1 clock ) 
 463:kernel.S      ****         IN    R18                , IOSPH                  ;read SPH               (  1 clock ) 
 464               			
 465               			;calculate the address where current task's SP will be stored and store SP
 466:kernel.S      **** 		MOV   R19                , R16                    ;fetch task_id from arg (  1 clock ) 
 467:kernel.S      **** 		LSL   R19                                         ;left shift to multiply (  1 clock ) 
 468:kernel.S      **** 		LDI   ZL                 , lo8(KerSP)             ;fetch base pos low     (  1 clock ) 
 469:kernel.S      **** 		LDI   ZH                 , hi8(KerSP)             ;fetch base pos high    (  1 clock ) 
 470:kernel.S      **** 		ADD   ZL                 , R19                    ;add offset to array    (  1 clock ) 
 471:kernel.S      **** 		ADC   ZH                 , R1                     ;add carry if any       (  1 clock ) 
 472:kernel.S      **** 		ST    Z+                 , R17                    ;SPL at KerSp+offset    (  2 clocks) 
 473:kernel.S      **** 		ST    z                  , R18                    ;SPH at KerSp+offset    (  2 clocks) 
 474               			
 475               			;increment task_id
 476:kernel.S      **** 		LDS   R17                , KerBase+OFF_TID        ;load task_id           (  2 clocks) 
 477:kernel.S      **** 		INC   R17                                         ;increment task_id      (  1 clock ) 
 478:kernel.S      **** 		STS   KerBase+OFF_TID    , R17                    ;store task_id          (  2 clocks) 
 479               	
 480               			;increment ntask
 481:kernel.S      **** 		LDS   R17                , KerBase+OFF_NTSK       ;load ntask             (  2 clocks) 
 482:kernel.S      **** 		INC   R17                                         ;increment ntask        (  1 clock ) 
 483:kernel.S      **** 		STS   KerBase+OFF_NTSK   , R17                    ;store ntask            (  2 clocks) 
 484               			
 485               			;load Main SP, restore Z pointer
 486:kernel.S      **** 		OUT   IOSPL              , R2                     ;load SPL               (  1 clock ) 
 487:kernel.S      ****         OUT   IOSPH              , R3                     ;load SPH               (  1 clock ) 
 488:kernel.S      **** 		MOV   ZL                 , R4                     ;push ZPL               (  1 clock ) 
 489:kernel.S      **** 		MOV   ZH                 , R5                     ;push ZPL               (  1 clock ) 
 490               			
 491:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 492               	;;==================================kernel task create end==================================;; 
 493               	
 494               	
 495               	
 496               	
 497               	
 498               	;;=================================kernel start tasks starting==============================;; 
 499               	Kernel_Start_Tasks:
 500               			;start executing from task0
 501               			;save ZP
 502:kernel.S      **** 		MOV   R4                 , ZL                     ;save ZPL               (  2 clocks) 
 503:kernel.S      **** 		MOV   R5                 , ZH                     ;save ZPH               (  2 clocks) 
 504               			
 505               			;clear task_id
 506:kernel.S      **** 		LDI   R16                , 0x00                   ;load task_id           (  2 clocks) 
 507:kernel.S      **** 		STS   KerBase+OFF_TID    , R16                    ;store task_id          (  2 clocks) 
 508               			
 509               			;load ZP with addr+offset
 510:kernel.S      **** 		LDI   ZL                 , lo8(KerSP+0x00)        ;fetch ZPL KerSP->TID0  (  1 clock ) 
 511:kernel.S      **** 		LDI   ZH                 , hi8(KerSP+0x00)        ;fetch ZPH KerSP->TID0  (  1 clock ) 
 512               			
 513               			;load task_id 0 task's SP
 514:kernel.S      **** 		LD    R16                , Z+                     ;load val from Z, inc Z (  2 clocks) 
 515:kernel.S      **** 		LD    R17                , Z                      ;load val from Z+1      (  2 clocks) 
 516               			
 517               			;set TID0 task's SP
 518:kernel.S      **** 		OUT   IOSPL              , R16                    ;load SPL               (  1 clock ) 
 519:kernel.S      ****         OUT   IOSPH              , R17                    ;load SPH               (  1 clock ) 
 520               	        
 521               	        ;forcefully restore context, in ISR it will be stored automatically
 522:kernel.S      **** 		KER_CONTEXT_RESTORE                               ;restore context        ( 67 clocks) 
 523               			
 524               			;restore ZP
 525:kernel.S      **** 		MOV   ZL                 , R4                     ;restore ZPL            (  2 clocks) 
 526:kernel.S      **** 		MOV   ZH                 , R5                     ;restore ZPL            (  2 clocks) 
 527               			
 528:kernel.S      **** 		KER_TIMER_INIT                                    ;init timer, int enable ( 12 clocks)
 529               			
 530               			;execute return to jump to task0, pushed while task init
 531:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 532               	;;==================================kernel start tasks end==================================;; 
 533               	
 534               	
 535               	
 536               	
 537               	
 538               	;;===================================kernel init starting===================================;; 
 539               	Kernel_Init:
 540               			;start executing from task0
 541               			;save ZP
 542:kernel.S      **** 		MOV   R4                 , ZL                     ;save ZPL               (  2 clocks) 
 543:kernel.S      **** 		MOV   R5                 , ZH                     ;save ZPH               (  2 clocks) 
 544               			
 545               			;init timer for kernel 
 546:kernel.S      **** 		LDI   R24                , 0x03                   ;set prescaler          (  1 clock ) 
 547:kernel.S      **** 		LDI   R22                , 0x82                   ;set reload val         (  1 clock ) 
 548:kernel.S      **** 		CALL  Kernel_SysTick_Reg_Init                     ;init timer             ( 55 clocks) 
 549               			
 550:kernel.S      **** 		LDI   R24                , lo8(Kernel_Task_Idle)  ;load func addr low     (  1 clock )
 551:kernel.S      **** 		LDI   R25                , hi8(Kernel_Task_Idle)  ;load func addr high    (  1 clock )
 552:kernel.S      **** 		LSR   R25                                         ;right shift to divide  (  1 clock )
 553:kernel.S      **** 		ROR   R24                                         ;rotate right th carry  (  1 clock )
 554:kernel.S      **** 		LDI   R22                , 0xFF                   ;set max val
 555:kernel.S      **** 		CALL  Kernel_Task_Create                          ;init idle task         (130 clocks) 
 556               			
 557               	
 558               			;execute return to jump to task0, pushed while task init
 559:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 560               	;;======================================kernel init end=====================================;; 
 561               	
 562               	
 563               	
 564               	
 565               	
 566               	;;=================================kernel idle task starting================================;; 
 567               	Kernel_Task_Idle:                                         ;jumps to this function when idle
 568               	    _IDLE_LOOP:                                           ;forever loop
 569:kernel.S      **** 	    LDI   R24, 0x23
 570:kernel.S      **** 		CALL  Debug_Tx_Byte_Conf
 571:kernel.S      **** 		RJMP  _IDLE_LOOP                                  ;return from subroutine (  4 clocks) 
 572               	;;==================================kernel idle task end====================================;; 
 573               	
 574               	
 575               	
 576               	
 577               	
 578               	;;=============================kernel task priority get starting============================;; 
 579               	Kernel_Task_Prio_Get:
 580               			;get priority of the task id, arg (task_id->R24), return R24
 581:kernel.S      **** 		MOV   R16                , R24                    ;copy task_id           (  1 clock ) 
 582:kernel.S      **** 		LDI   ZL                 , lo8(KerSchPr)          ;load low byte          (  1 clock ) 
 583:kernel.S      **** 		LDI   ZH                 , hi8(KerSchPr)          ;load high byte         (  1 clock ) 
 584:kernel.S      **** 		ADD   ZL                 , R16                    ;add low bytes          (  1 clock ) 
 585:kernel.S      **** 		ADC   ZH                 , R1                     ;add high byte+carry    (  1 clock ) 
 586:kernel.S      **** 		LD    R24                , Z                      ;load priority          (  2 clocks) 
 587:kernel.S      **** 		RET                                               ;return from subroutine (  4 clocks) 
 588               	;;================================kernel task priority get end==============================;; 
DEFINED SYMBOLS
            kernel.S:12     *ABS*:000003e8 KER_TR
            kernel.S:13     *ABS*:00000003 KER_PRS
            kernel.S:14     *ABS*:00000082 KER_RLD
            kernel.S:15     *ABS*:00000080 KER_STK_SZ
            kernel.S:16     *ABS*:0000000a KER_MX_NTSK
            kernel.S:24     *ABS*:00000000 OFF_TICK0
            kernel.S:25     *ABS*:00000001 OFF_TICK1
            kernel.S:26     *ABS*:00000002 OFF_TICK2
            kernel.S:27     *ABS*:00000003 OFF_TICK3
            kernel.S:28     *ABS*:00000004 OFF_TICK4
            kernel.S:29     *ABS*:00000005 OFF_PRS
            kernel.S:30     *ABS*:00000006 OFF_RLD
            kernel.S:31     *ABS*:00000007 OFF_TID
            kernel.S:32     *ABS*:00000008 OFF_NTSK
            kernel.S:33     *ABS*:00000009 OFF_PTID
            kernel.S:41     *ABS*:00000001 TASK_READY
            kernel.S:42     *ABS*:00000000 TASK_BLOCK
            kernel.S:50     *ABS*:0000005f SRSREG
            kernel.S:51     *ABS*:0000005e SRSPH
            kernel.S:52     *ABS*:0000005d SRSPL
            kernel.S:54     *ABS*:0000006e SRTIMSK0
            kernel.S:55     *ABS*:00000048 SROCR0B
            kernel.S:56     *ABS*:00000047 SROCR0A
            kernel.S:57     *ABS*:00000046 SRTCNT0
            kernel.S:58     *ABS*:00000045 SRTCCR0B
            kernel.S:59     *ABS*:00000044 SRTCCR0A
            kernel.S:60     *ABS*:00000035 SRTIFR0
            kernel.S:62     *ABS*:00000028 IOOCR0B
            kernel.S:63     *ABS*:00000027 IOOCR0A
            kernel.S:64     *ABS*:00000026 IOTCNT0
            kernel.S:65     *ABS*:00000025 IOTCCR0B
            kernel.S:66     *ABS*:00000024 IOTCCR0A
            kernel.S:67     *ABS*:00000015 IOTIFR0
            kernel.S:69     *ABS*:0000003f IOSREG
            kernel.S:70     *ABS*:0000003e IOSPH
            kernel.S:71     *ABS*:0000003d IOSPL
            kernel.S:82     .bss:00000000 KerBase
            kernel.S:85     .bss:0000000a KerSP
            kernel.S:88     .bss:0000001e KerSchSts
            kernel.S:91     .bss:00000028 KerSchPr
            kernel.S:94     .bss:00000032 KerSchSlp
            kernel.S:97     .bss:00000046 KerStack
            kernel.S:354    .text:00000000 __vector_16
            kernel.S:376    .text:000000da Kernel_SysTick_Reg_Init
            kernel.S:539    .text:00000256 Kernel_Init
            kernel.S:419    .text:00000130 Kernel_Task_Create
            kernel.S:499    .text:000001de Kernel_Start_Tasks
            kernel.S:567    .text:00000272 Kernel_Task_Idle
            kernel.S:579    .text:0000027a Kernel_Task_Prio_Get
            kernel.S:362    .text:00000070 _MOD_CONT4
            kernel.S:362    .text:00000078 _MOD_DONE4
            kernel.S:568    .text:00000272 _IDLE_LOOP

UNDEFINED SYMBOLS
Kernel_SysTick_Val_Get
Kernel_SysTick_Val_Safely_Get
Kernel_Interrupt_Sts_Get
Kernel_Task_Sleep
Kernel_Task_Sleep_Time_Get
Kernel_Task_Sts_Get
Kernel_High_Prio_Task_ID_Get
Kernel_Abs_High_Prio_Task_ID_Get
Debug_Tx_Byte_Conf
