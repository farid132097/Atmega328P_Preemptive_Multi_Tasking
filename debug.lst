   1               	# 1 "debug.S"
   1               	
   0               	
   0               	
   2               	#include <avr/io.h>
   1               	/* Copyright (c) 2002,2003,2005,2006,2007 Marek Michalkiewicz, Joerg Wunsch
   2               	   Copyright (c) 2007 Eric B. Weddington
   3               	   All rights reserved.
   4               	
   5               	   Redistribution and use in source and binary forms, with or without
   6               	   modification, are permitted provided that the following conditions are met:
   7               	
   8               	   * Redistributions of source code must retain the above copyright
   9               	     notice, this list of conditions and the following disclaimer.
  10               	
  11               	   * Redistributions in binary form must reproduce the above copyright
  12               	     notice, this list of conditions and the following disclaimer in
  13               	     the documentation and/or other materials provided with the
  14               	     distribution.
  15               	
  16               	   * Neither the name of the copyright holders nor the names of
  17               	     contributors may be used to endorse or promote products derived
  18               	     from this software without specific prior written permission.
  19               	
  20               	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21               	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22               	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23               	  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24               	  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25               	  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26               	  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27               	  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28               	  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29               	  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30               	  POSSIBILITY OF SUCH DAMAGE. */
  31               	
  32               	/* $Id: io.h,v 1.52.2.28 2009/12/20 17:02:53 arcanum Exp $ */
  33               	
  34               	/** \file */
  35               	/** \defgroup avr_io <avr/io.h>: AVR device-specific IO definitions
  36               	    \code #include <avr/io.h> \endcode
  37               	
  38               	    This header file includes the apropriate IO definitions for the
  39               	    device that has been specified by the <tt>-mmcu=</tt> compiler
  40               	    command-line switch.  This is done by diverting to the appropriate
  41               	    file <tt>&lt;avr/io</tt><em>XXXX</em><tt>.h&gt;</tt> which should
  42               	    never be included directly.  Some register names common to all
  43               	    AVR devices are defined directly within <tt>&lt;avr/common.h&gt;</tt>,
  44               	    which is included in <tt>&lt;avr/io.h&gt;</tt>,
  45               	    but most of the details come from the respective include file.
  46               	
  47               	    Note that this file always includes the following files:
  48               	    \code 
  49               	    #include <avr/sfr_defs.h>
  50               	    #include <avr/portpins.h>
  51               	    #include <avr/common.h>
  52               	    #include <avr/version.h>
  53               	    \endcode
  54               	    See \ref avr_sfr for more details about that header file.
  55               	
  56               	    Included are definitions of the IO register set and their
  57               	    respective bit values as specified in the Atmel documentation.
  58               	    Note that inconsistencies in naming conventions,
  59               	    so even identical functions sometimes get different names on
  60               	    different devices.
  61               	
  62               	    Also included are the specific names useable for interrupt
  63               	    function definitions as documented
  64               	    \ref avr_signames "here".
  65               	
  66               	    Finally, the following macros are defined:
  67               	
  68               	    - \b RAMEND
  69               	    <br>
  70               	    The last on-chip RAM address.
  71               	    <br>
  72               	    - \b XRAMEND
  73               	    <br>
  74               	    The last possible RAM location that is addressable. This is equal to 
  75               	    RAMEND for devices that do not allow for external RAM. For devices 
  76               	    that allow external RAM, this will be larger than RAMEND.
  77               	    <br>
  78               	    - \b E2END
  79               	    <br>
  80               	    The last EEPROM address.
  81               	    <br>
  82               	    - \b FLASHEND
  83               	    <br>
  84               	    The last byte address in the Flash program space.
  85               	    <br>
  86               	    - \b SPM_PAGESIZE
  87               	    <br>
  88               	    For devices with bootloader support, the flash pagesize
  89               	    (in bytes) to be used for the \c SPM instruction. 
  90               	    - \b E2PAGESIZE
  91               	    <br>
  92               	    The size of the EEPROM page.
  93               	    
  94               	*/
  95               	
  96               	#ifndef _AVR_IO_H_
  97               	#define _AVR_IO_H_
  98               	
  99               	#include <avr/sfr_defs.h>
   1               	/* Copyright (c) 2002, Marek Michalkiewicz <marekm@amelek.gda.pl>
 100               	
 101               	#if defined (__AVR_AT94K__)
 102               	#  include <avr/ioat94k.h>
 103               	#elif defined (__AVR_AT43USB320__)
 104               	#  include <avr/io43u32x.h>
 105               	#elif defined (__AVR_AT43USB355__)
 106               	#  include <avr/io43u35x.h>
 107               	#elif defined (__AVR_AT76C711__)
 108               	#  include <avr/io76c711.h>
 109               	#elif defined (__AVR_AT86RF401__)
 110               	#  include <avr/io86r401.h>
 111               	#elif defined (__AVR_AT90PWM1__)
 112               	#  include <avr/io90pwm1.h>
 113               	#elif defined (__AVR_AT90PWM2__)
 114               	#  include <avr/io90pwmx.h>
 115               	#elif defined (__AVR_AT90PWM2B__)
 116               	#  include <avr/io90pwm2b.h>
 117               	#elif defined (__AVR_AT90PWM3__)
 118               	#  include <avr/io90pwmx.h>
 119               	#elif defined (__AVR_AT90PWM3B__)
 120               	#  include <avr/io90pwm3b.h>
 121               	#elif defined (__AVR_AT90PWM216__)
 122               	#  include <avr/io90pwm216.h>
 123               	#elif defined (__AVR_AT90PWM316__)
 124               	#  include <avr/io90pwm316.h>
 125               	#elif defined (__AVR_AT90PWM81__)
 126               	#  include <avr/io90pwm81.h>
 127               	#elif defined (__AVR_ATmega8U2__)
 128               	#  include <avr/iom8u2.h>
 129               	#elif defined (__AVR_ATmega16M1__)
 130               	#  include <avr/iom16m1.h>
 131               	#elif defined (__AVR_ATmega16U2__)
 132               	#  include <avr/iom16u2.h>
 133               	#elif defined (__AVR_ATmega16U4__)
 134               	#  include <avr/iom16u4.h>
 135               	#elif defined (__AVR_ATmega32C1__)
 136               	#  include <avr/iom32c1.h>
 137               	#elif defined (__AVR_ATmega32M1__)
 138               	#  include <avr/iom32m1.h>
 139               	#elif defined (__AVR_ATmega32U2__)
 140               	#  include <avr/iom32u2.h>
 141               	#elif defined (__AVR_ATmega32U4__)
 142               	#  include <avr/iom32u4.h>
 143               	#elif defined (__AVR_ATmega32U6__)
 144               	#  include <avr/iom32u6.h>
 145               	#elif defined (__AVR_ATmega64C1__)
 146               	#  include <avr/iom64c1.h>
 147               	#elif defined (__AVR_ATmega64M1__)
 148               	#  include <avr/iom64m1.h>
 149               	#elif defined (__AVR_ATmega128__)
 150               	#  include <avr/iom128.h>
 151               	#elif defined (__AVR_ATmega1280__)
 152               	#  include <avr/iom1280.h>
 153               	#elif defined (__AVR_ATmega1281__)
 154               	#  include <avr/iom1281.h>
 155               	#elif defined (__AVR_ATmega1284P__)
 156               	#  include <avr/iom1284p.h>
 157               	#elif defined (__AVR_ATmega128RFA1__)
 158               	#  include <avr/iom128rfa1.h>
 159               	#elif defined (__AVR_ATmega2560__)
 160               	#  include <avr/iom2560.h>
 161               	#elif defined (__AVR_ATmega2561__)
 162               	#  include <avr/iom2561.h>
 163               	#elif defined (__AVR_AT90CAN32__)
 164               	#  include <avr/iocan32.h>
 165               	#elif defined (__AVR_AT90CAN64__)
 166               	#  include <avr/iocan64.h>
 167               	#elif defined (__AVR_AT90CAN128__)
 168               	#  include <avr/iocan128.h>
 169               	#elif defined (__AVR_AT90USB82__)
 170               	#  include <avr/iousb82.h>
 171               	#elif defined (__AVR_AT90USB162__)
 172               	#  include <avr/iousb162.h>
 173               	#elif defined (__AVR_AT90USB646__)
 174               	#  include <avr/iousb646.h>
 175               	#elif defined (__AVR_AT90USB647__)
 176               	#  include <avr/iousb647.h>
 177               	#elif defined (__AVR_AT90USB1286__)
 178               	#  include <avr/iousb1286.h>
 179               	#elif defined (__AVR_AT90USB1287__)
 180               	#  include <avr/iousb1287.h>
 181               	#elif defined (__AVR_ATmega64__)
 182               	#  include <avr/iom64.h>
 183               	#elif defined (__AVR_ATmega640__)
 184               	#  include <avr/iom640.h>
 185               	#elif defined (__AVR_ATmega644__) || defined (__AVR_ATmega644A__)
 186               	#  include <avr/iom644.h>
 187               	#elif defined (__AVR_ATmega644P__)
 188               	#  include <avr/iom644p.h>
 189               	#elif defined (__AVR_ATmega644PA__)
 190               	#  include <avr/iom644pa.h>
 191               	#elif defined (__AVR_ATmega645__) || defined (__AVR_ATmega645A__) || defined (__AVR_ATmega645P__)
 192               	#  include <avr/iom645.h>
 193               	#elif defined (__AVR_ATmega6450__) || defined (__AVR_ATmega6450A__) || defined (__AVR_ATmega6450P__
 194               	#  include <avr/iom6450.h>
 195               	#elif defined (__AVR_ATmega649__) || defined (__AVR_ATmega649A__)
 196               	#  include <avr/iom649.h>
 197               	#elif defined (__AVR_ATmega6490__) || defined (__AVR_ATmega6490A__) || defined (__AVR_ATmega6490P__
 198               	#  include <avr/iom6490.h>
 199               	#elif defined (__AVR_ATmega649P__)
 200               	#  include <avr/iom649p.h>
 201               	#elif defined (__AVR_ATmega64HVE__)
 202               	#  include <avr/iom64hve.h>
 203               	#elif defined (__AVR_ATmega103__)
 204               	#  include <avr/iom103.h>
 205               	#elif defined (__AVR_ATmega32__)
 206               	#  include <avr/iom32.h>
 207               	#elif defined (__AVR_ATmega323__)
 208               	#  include <avr/iom323.h>
 209               	#elif defined (__AVR_ATmega324P__) || defined (__AVR_ATmega324A__)
 210               	#  include <avr/iom324.h>
 211               	#elif defined (__AVR_ATmega324PA__)
 212               	#  include <avr/iom324pa.h>
 213               	#elif defined (__AVR_ATmega325__)
 214               	#  include <avr/iom325.h>
 215               	#elif defined (__AVR_ATmega325P__)
 216               	#  include <avr/iom325.h>
 217               	#elif defined (__AVR_ATmega3250__)
 218               	#  include <avr/iom3250.h>
 219               	#elif defined (__AVR_ATmega3250P__)
 220               	#  include <avr/iom3250.h>
 221               	#elif defined (__AVR_ATmega328P__) || defined (__AVR_ATmega328__)
 222               	#  include <avr/iom328p.h>
   1               	/* Copyright (c) 2007 Atmel Corporation
 223               	#elif defined (__AVR_ATmega329__)
 224               	#  include <avr/iom329.h>
 225               	#elif defined (__AVR_ATmega329P__) || defined (__AVR_ATmega329PA__)
 226               	#  include <avr/iom329.h>
 227               	#elif defined (__AVR_ATmega3290__)
 228               	#  include <avr/iom3290.h>
 229               	#elif defined (__AVR_ATmega3290P__)
 230               	#  include <avr/iom3290.h>
 231               	#elif defined (__AVR_ATmega32HVB__)
 232               	#  include <avr/iom32hvb.h>
 233               	#elif defined (__AVR_ATmega406__)
 234               	#  include <avr/iom406.h>
 235               	#elif defined (__AVR_ATmega16__)
 236               	#  include <avr/iom16.h>
 237               	#elif defined (__AVR_ATmega16A__)
 238               	#  include <avr/iom16a.h>
 239               	#elif defined (__AVR_ATmega161__)
 240               	#  include <avr/iom161.h>
 241               	#elif defined (__AVR_ATmega162__)
 242               	#  include <avr/iom162.h>
 243               	#elif defined (__AVR_ATmega163__)
 244               	#  include <avr/iom163.h>
 245               	#elif defined (__AVR_ATmega164P__) || defined (__AVR_ATmega164A__)
 246               	#  include <avr/iom164.h>
 247               	#elif defined (__AVR_ATmega165__) || defined (__AVR_ATmega165A__)
 248               	#  include <avr/iom165.h>
 249               	#elif defined (__AVR_ATmega165P__)
 250               	#  include <avr/iom165p.h>
 251               	#elif defined (__AVR_ATmega168__) || defined (__AVR_ATmega168A__)
 252               	#  include <avr/iom168.h>
 253               	#elif defined (__AVR_ATmega168P__)
 254               	#  include <avr/iom168p.h>
 255               	#elif defined (__AVR_ATmega169__) || defined (__AVR_ATmega169A__)
 256               	#  include <avr/iom169.h>
 257               	#elif defined (__AVR_ATmega169P__)
 258               	#  include <avr/iom169p.h>
 259               	#elif defined (__AVR_ATmega169PA__)
 260               	#  include <avr/iom169pa.h>
 261               	#elif defined (__AVR_ATmega8HVA__)
 262               	#  include <avr/iom8hva.h>
 263               	#elif defined (__AVR_ATmega16HVA__)
 264               	#  include <avr/iom16hva.h>
 265               	#elif defined (__AVR_ATmega16HVA2__)
 266               	#  include <avr/iom16hva2.h>
 267               	#elif defined (__AVR_ATmega16HVB__)
 268               	#  include <avr/iom16hvb.h>
 269               	#elif defined (__AVR_ATmega8__)
 270               	#  include <avr/iom8.h>
 271               	#elif defined (__AVR_ATmega48__) || defined (__AVR_ATmega48A__)
 272               	#  include <avr/iom48.h>
 273               	#elif defined (__AVR_ATmega48P__)
 274               	#  include <avr/iom48p.h>
 275               	#elif defined (__AVR_ATmega88__) || defined (__AVR_ATmega88A__)
 276               	#  include <avr/iom88.h>
 277               	#elif defined (__AVR_ATmega88P__)
 278               	#  include <avr/iom88p.h>
 279               	#elif defined (__AVR_ATmega88PA__)
 280               	#  include <avr/iom88pa.h>
 281               	#elif defined (__AVR_ATmega8515__)
 282               	#  include <avr/iom8515.h>
 283               	#elif defined (__AVR_ATmega8535__)
 284               	#  include <avr/iom8535.h>
 285               	#elif defined (__AVR_AT90S8535__)
 286               	#  include <avr/io8535.h>
 287               	#elif defined (__AVR_AT90C8534__)
 288               	#  include <avr/io8534.h>
 289               	#elif defined (__AVR_AT90S8515__)
 290               	#  include <avr/io8515.h>
 291               	#elif defined (__AVR_AT90S4434__)
 292               	#  include <avr/io4434.h>
 293               	#elif defined (__AVR_AT90S4433__)
 294               	#  include <avr/io4433.h>
 295               	#elif defined (__AVR_AT90S4414__)
 296               	#  include <avr/io4414.h>
 297               	#elif defined (__AVR_ATtiny22__)
 298               	#  include <avr/iotn22.h>
 299               	#elif defined (__AVR_ATtiny26__)
 300               	#  include <avr/iotn26.h>
 301               	#elif defined (__AVR_AT90S2343__)
 302               	#  include <avr/io2343.h>
 303               	#elif defined (__AVR_AT90S2333__)
 304               	#  include <avr/io2333.h>
 305               	#elif defined (__AVR_AT90S2323__)
 306               	#  include <avr/io2323.h>
 307               	#elif defined (__AVR_AT90S2313__)
 308               	#  include <avr/io2313.h>
 309               	#elif defined (__AVR_ATtiny2313__)
 310               	#  include <avr/iotn2313.h>
 311               	#elif defined (__AVR_ATtiny2313A__)
 312               	#  include <avr/iotn2313a.h>
 313               	#elif defined (__AVR_ATtiny13__)
 314               	#  include <avr/iotn13.h>
 315               	#elif defined (__AVR_ATtiny13A__)
 316               	#  include <avr/iotn13a.h>
 317               	#elif defined (__AVR_ATtiny25__)
 318               	#  include <avr/iotn25.h>
 319               	#elif defined (__AVR_ATtiny4313__)
 320               	#  include <avr/iotn4313.h>
 321               	#elif defined (__AVR_ATtiny45__)
 322               	#  include <avr/iotn45.h>
 323               	#elif defined (__AVR_ATtiny85__)
 324               	#  include <avr/iotn85.h>
 325               	#elif defined (__AVR_ATtiny24__)
 326               	#  include <avr/iotn24.h>
 327               	#elif defined (__AVR_ATtiny24A__)
 328               	#  include <avr/iotn24a.h>
 329               	#elif defined (__AVR_ATtiny44__)
 330               	#  include <avr/iotn44.h>
 331               	#elif defined (__AVR_ATtiny44A__)
 332               	#  include <avr/iotn44a.h>
 333               	#elif defined (__AVR_ATtiny84__)
 334               	#  include <avr/iotn84.h>
 335               	#elif defined (__AVR_ATtiny261__)
 336               	#  include <avr/iotn261.h>
 337               	#elif defined (__AVR_ATtiny261A__)
 338               	#  include <avr/iotn261a.h>
 339               	#elif defined (__AVR_ATtiny461__)
 340               	#  include <avr/iotn461.h>
 341               	#elif defined (__AVR_ATtiny461A__)
 342               	#  include <avr/iotn461a.h>
 343               	#elif defined (__AVR_ATtiny861__)
 344               	#  include <avr/iotn861.h>
 345               	#elif defined (__AVR_ATtiny861A__)
 346               	#  include <avr/iotn861a.h>
 347               	#elif defined (__AVR_ATtiny43U__)
 348               	#  include <avr/iotn43u.h>
 349               	#elif defined (__AVR_ATtiny48__)
 350               	#  include <avr/iotn48.h>
 351               	#elif defined (__AVR_ATtiny88__)
 352               	#  include <avr/iotn88.h>
 353               	#elif defined (__AVR_ATtiny87__)
 354               	#  include <avr/iotn87.h>
 355               	#elif defined (__AVR_ATtiny167__)
 356               	#  include <avr/iotn167.h>
 357               	#elif defined (__AVR_AT90SCR100__)
 358               	#  include <avr/io90scr100.h>
 359               	#elif defined (__AVR_ATxmega16A4__)
 360               	#  include <avr/iox16a4.h>
 361               	#elif defined (__AVR_ATxmega16D4__)
 362               	#  include <avr/iox16d4.h>
 363               	#elif defined (__AVR_ATxmega32A4__)
 364               	#  include <avr/iox32a4.h>
 365               	#elif defined (__AVR_ATxmega32D4__)
 366               	#  include <avr/iox32d4.h>
 367               	#elif defined (__AVR_ATxmega64A1__)
 368               	#  include <avr/iox64a1.h>
 369               	#elif defined (__AVR_ATxmega64A3__)
 370               	#  include <avr/iox64a3.h>
 371               	#elif defined (__AVR_ATxmega64D3__)
 372               	#  include <avr/iox64d3.h>
 373               	#elif defined (__AVR_ATxmega128A1__)
 374               	#  include <avr/iox128a1.h>
 375               	#elif defined (__AVR_ATxmega128A3__)
 376               	#  include <avr/iox128a3.h>
 377               	#elif defined (__AVR_ATxmega128D3__)
 378               	#  include <avr/iox128d3.h>
 379               	#elif defined (__AVR_ATxmega192A3__)
 380               	#  include <avr/iox192a3.h>
 381               	#elif defined (__AVR_ATxmega192D3__)
 382               	#  include <avr/iox192d3.h>
 383               	#elif defined (__AVR_ATxmega256A3__)
 384               	#  include <avr/iox256a3.h>
 385               	#elif defined (__AVR_ATxmega256A3B__)
 386               	#  include <avr/iox256a3b.h>
 387               	#elif defined (__AVR_ATxmega256D3__)
 388               	#  include <avr/iox256d3.h>
 389               	#elif defined (__AVR_ATA6289__)
 390               	#  include <avr/ioa6289.h>
 391               	/* avr1: the following only supported for assembler programs */
 392               	#elif defined (__AVR_ATtiny28__)
 393               	#  include <avr/iotn28.h>
 394               	#elif defined (__AVR_AT90S1200__)
 395               	#  include <avr/io1200.h>
 396               	#elif defined (__AVR_ATtiny15__)
 397               	#  include <avr/iotn15.h>
 398               	#elif defined (__AVR_ATtiny12__)
 399               	#  include <avr/iotn12.h>
 400               	#elif defined (__AVR_ATtiny11__)
 401               	#  include <avr/iotn11.h>
 402               	#else
 403               	#  if !defined(__COMPILING_AVR_LIBC__)
 404               	#    warning "device type not defined"
 405               	#  endif
 406               	#endif
 407               	
 408               	#include <avr/portpins.h>
   1               	/* Copyright (c) 2003  Theodore A. Roth
 409               	
 410               	#include <avr/common.h>
   1               	/* Copyright (c) 2007 Eric B. Weddington
 411               	
 412               	#include <avr/version.h>
   1               	/* Copyright (c) 2005, Joerg Wunsch                               -*- c -*-
 413               	
 414               	/* Include fuse.h after individual IO header files. */
 415               	#include <avr/fuse.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 416               	
 417               	/* Include lock.h after individual IO header files. */
 418               	#include <avr/lock.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 419               	
   3               	#include <avr/interrupt.h>
   1               	/* Copyright (c) 2002,2005,2007 Marek Michalkiewicz
   4               	#include "debug.h"
   1               	
   5               	
   6               	
   7               	
   8               	;;===========================define hardware reg address starting===========================;; 
   9               	.equ    SRGPIOR0,     0x3E   ;manually defined GPIOR0 in SRAM
  10               	.equ    SRGPIOR1,     0x4A   ;manually defined GPIOR1 in SRAM
  11               	.equ    SRGPIOR2,     0x4B   ;manually defined GPIOR2 in SRAM
  12               	.equ    SRUDR0  ,     0xC6   ;manually defined UDR0 in SRAM
  13               	.equ    SRUBRR0H,     0xC5   ;manually defined UBRR0H in SRAM
  14               	.equ    SRUBRR0L,     0xC4   ;manually defined UBRR0L in SRAM
  15               	.equ    SRUCSR0C,     0xC2   ;manually defined UCSR0C in SRAM
  16               	.equ    SRUCSR0B,     0xC1   ;manually defined UCSR0B in SRAM
  17               	.equ    SRUCSR0A,     0xC0   ;manually defined UCSR0A in SRAM
  18               	;;==============================define hardware reg address end=============================;; 
  19               	
  20               	
  21               	
  22               	
  23               	
  24               	;;===============================define text section starting===============================;; 
  25               	.section .text
  26               	;;==================================define text section end=================================;; 
  27               	
  28               	
  29               	
  30               	
  31               	
  32               	;;==============================define global functions starting============================;; 
  33               	.global  Debug_Init
  34               	.global  Debug_Tx_Byte
  35               	.global  Debug_Tx_Word
  36               	.global  Debug_Tx_Byte_Conf
  37               	.global  Debug_Tx_Word_Conf
  38               	.global  Debug_Tx_DWord_Conf
  39               	
  40               	.global  Debug_Tx_From_RAM
  41               	.global  Debug_Tx_RAM_Area
  42               	;;================================define global functions end===============================;;
  43               	
  44               	
  45               	
  46               	
  47               	
  48               	;;===================================debug init starting====================================;;
  49               	Debug_Init:                                               ;total 2.38uS @8MHz     ( 19 clocks) 
  50               	        ;init registers for UART0 (Arg R25:R24->UBRRH:UBRRL)
  51:debug.S       **** 		LDI   R16                , (1<<1)                 ;mask U2x               (  1 clock )
  52:debug.S       **** 		STS   SRUCSR0A           , R16                    ;load val to UCSR0A     (  2 clocks)
  53:debug.S       **** 		MOV   R16                , R25                    ;copy R25->baud rate H  (  1 clock )
  54:debug.S       **** 		STS   SRUBRR0H           , R16                    ;load val to UBRR0H     (  2 clocks)
  55:debug.S       **** 		MOV   R16                , R24                    ;copy R24->baud rate L  (  1 clock )
  56:debug.S       **** 		STS   SRUBRR0L           , R16                    ;load val to UBRR0L     (  2 clocks)
  57:debug.S       **** 		LDI   R16                , (1<<1)|(1<<2)          ;config 8 data bit      (  1 clock )
  58:debug.S       **** 		STS   SRUCSR0C           , R16                    ;load val to UCSR0C     (  2 clocks)
  59:debug.S       **** 		LDI   R16                , (1<<3)                 ;enable tx              (  1 clock )
  60:debug.S       **** 		STS   SRUCSR0B           , R16                    ;load val to UCSR0B     (  2 clocks)
  61:debug.S       ****         RET                                               ;return from subroutine (  4 clocks) 
  62               	;;======================================debug init end======================================;;
  63               	
  64               	
  65               	
  66               	
  67               	
  68               	;;====================================debug tx starting=====================================;; 
  69               	Debug_Tx_Byte:                                            ;total 2.00uS+LT @8MHz  ( 16 clocks) 
  70               			;write single byte to data register (Arg R24)
  71:debug.S       **** 		PUSH  R16                                         ;save reg               (  2 clocks) 
  72:debug.S       **** 		STS   SRUDR0             , R24                    ;load val to UDR0       (  2 clocks) 
  73               	
  74               	    __UDRE0_CLEARED:                                      ;undefined loop wrt ck
  75:debug.S       **** 		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16     (  2 clocks) 
  76:debug.S       **** 		SBRS  R16                , 0x05                   ;skip if UDRE0 is set   (  2 clocks) 
  77:debug.S       **** 		RJMP  __UDRE0_CLEARED                             ;wait until UDRE0 is set(  2 clocks) 
  78:debug.S       **** 		POP   R16                                         ;restore reg            (  2 clocks) 
  79:debug.S       ****         RET                                               ;return from subroutine (  4 clocks) 
  80               	;;======================================debug tx end========================================;; 
  81               	
  82               	
  83               	
  84               	
  85               	
  86               	;;==================================debug tx word starting==================================;; 
  87               	Debug_Tx_Word:                                            ;total 2.00uS+LT @8MHz  ( 16 clocks) 
  88               			;write 2 bytes, (Arg R24, R25), Args retained 
  89:debug.S       **** 		CALL  Debug_Tx_Byte                               ;send via uart          ( 21 clocks)
  90:debug.S       **** 		PUSH  R24                                         ;save reg               (  2 clocks)
  91:debug.S       **** 		MOV   R24                , R25                    ;copy R25 to R24        (  1 clock )
  92:debug.S       **** 		CALL  Debug_Tx_Byte                               ;send via uart          ( 21 clocks)
  93:debug.S       **** 		POP   R24                                         ;restore reg            (  2 clocks)
  94:debug.S       ****         RET                                               ;return from subroutine (  4 clocks) 
  95               	;;====================================debug tx word end=====================================;; 
  96               	
  97               	
  98               	
  99               	
 100               	
 101               	
 102               	
 103               	;;================================debug tx confirm starting=================================;;
 104               	Debug_Tx_Byte_Conf:                                       ;total 2.63uS+LT @8MHz  ( 21 clocks)
 105               	        ;write 1 byte, (Arg R24), Args retained
 106:debug.S       **** 		PUSH  R16                                         ;save reg               (  2 clocks)
 107:debug.S       **** 		STS   SRUDR0             , R24                    ;load val to UDR0,      (  2 clocks)
 108               			
 109               	    __TXC0_CLEARED:
 110:debug.S       **** 		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,    (  2 clocks)
 111:debug.S       **** 		SBRS  R16                , 0x06                   ;skip if TXC0 is set,   (  2 clocks)
 112:debug.S       **** 		RJMP  __TXC0_CLEARED                              ;wait until TXC0 is set (  2 clocks)
 113:debug.S       **** 		LDS   R16                , SRUCSR0A               ;load UCSR0A to R16,    (  2 clocks)
 114:debug.S       **** 		ORI   R16                , (1<<6)                 ;mask bit 6,            (  1 clock )
 115:debug.S       **** 		STS   SRUCSR0A           , R16                    ;write reg with bit msk (  2 clocks)
 116:debug.S       **** 		POP   R16                                         ;restore reg            (  2 clocks)
 117:debug.S       ****         RET                                               ;return from subroutine (  4 clocks) 
 118               	;;===================================debug tx confirm end===================================;;
 119               	
 120               	
 121               	
 122               	
 123               	
 124               	;;==============================debug tx word confirm starting==============================;;
 125               	Debug_Tx_Word_Conf:                                       ;total 6.38uS+LT @8MHz  ( 51 clocks)
 126               	        ;write 2 bytes, (Arg R24, R25), Args retained
 127:debug.S       **** 		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 128:debug.S       **** 		PUSH  R24                                         ;save reg               (  2 clocks)
 129:debug.S       **** 		MOV   R24                , R25                    ;copy R25 to R24        (  1 clock )
 130:debug.S       **** 		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 131:debug.S       **** 		POP   R24                                         ;restore reg            (  2 clocks)
 132:debug.S       ****         RET                                               ;return from subroutine (  4 clocks) 
 133               	;;================================debug tx word confirm end=================================;;
 134               	
 135               	
 136               	
 137               	
 138               	
 139               	;;==============================debug tx dword confirm starting=============================;; 
 140               	Debug_Tx_DWord_Conf:                                      ;total 12.38uS+LT @8MHz ( 99 clocks) 
 141               	        ;write 4 bytes, (Arg R22-R25), Args retained
 142:debug.S       **** 		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks)
 143:debug.S       **** 		MOV   R24                , R22                    ;copy R22 to R24          (1 clock )
 144:debug.S       **** 		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 145:debug.S       **** 		MOV   R24                , R23                    ;copy R23 to R24          (1 clock )
 146:debug.S       **** 		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 147:debug.S       **** 		LDS   R24                , SRGPIOR1               ;restore R24              (2 clocks)
 148:debug.S       **** 		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 149:debug.S       **** 		STS   SRGPIOR1           , R24                    ;store R24 val,           (2 clocks)
 150:debug.S       **** 		MOV   R24                , R25                    ;copy R22 to R24          (1 clock )
 151:debug.S       **** 		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 152:debug.S       **** 		LDS   R24                , SRGPIOR1               ;restore R24 val,         (2 clocks)
 153:debug.S       ****         RET                                               ;return from subroutine,  (4 clocks) 
 154               	;;================================debug tx dword confirm end================================;; 
 155               	
 156               	
 157               	
 158               	
 159               	
 160               	;;=============================debug tx confirm from ram starting===========================;; 
 161               	Debug_Tx_From_RAM:                                        ;total 4.38uS+LT @8MHz  ( 35 clocks) 
 162               	        ;print data from RAM address (Arg R24-R25)
 163:debug.S       **** 		MOV   R16                , R30                    ;copy R30 to R16          (1 clock )
 164:debug.S       **** 		MOV   R17                , R31                    ;copy R31 to R17          (1 clock )
 165:debug.S       **** 		MOV   R18                , R24                    ;copy R24 to R18          (1 clock )
 166:debug.S       **** 		MOV   R30                , R24                    ;copy R22 to R24          (1 clock )
 167:debug.S       **** 		MOV   R31                , R25                    ;copy R22 to R24          (1 clock )
 168:debug.S       **** 		LD    R24                , Z                      ;load val to R24          (2 clocks)
 169:debug.S       **** 		CALL  Debug_Tx_Byte_Conf                          ;send via uart
 170:debug.S       **** 		MOV   R30                , R16                    ;copy R16 to R30          (1 clock )
 171:debug.S       **** 		MOV   R31                , R17                    ;copy R17 to R31          (1 clock )
 172:debug.S       **** 		MOV   R24                , R18                    ;copy R18 to R24          (1 clock )
 173:debug.S       ****         RET                                               ;return from subroutine,  (4 clocks) 
 174               	;;================================debug tx confirm from ram end=============================;; 
 175               	
 176               	
 177               	
 178               	
 179               	
 180               	;;=============================debug tx confirm ram area starting===========================;; 
 181               	Debug_Tx_RAM_Area:                                        ;5.5uS+LT x R22 @8MHz  ( 44 clocks) 
 182               	        ;print data from RAM address (arguments R24:R25, R22)
 183               		__DUMP_BYTES:
 184:debug.S       **** 	    CALL  Debug_Tx_From_RAM                           ;send via uart from ram
 185:debug.S       **** 		SUBI  R24                , 0x01                   ;decrement from LSByte
 186:debug.S       ****         SBCI  R25                , 0x00                   ;decrement if carry
 187:debug.S       **** 		SUBI  R22                , 0x01                   ;decrement
 188:debug.S       **** 		BRNE  __DUMP_BYTES
 189:debug.S       ****         RET                                               ;return from subroutine,  (4 clocks) 
 190               	;;===============================debug tx confirm ram area end==============================;;
DEFINED SYMBOLS
             debug.S:9      *ABS*:0000003e SRGPIOR0
             debug.S:10     *ABS*:0000004a SRGPIOR1
             debug.S:11     *ABS*:0000004b SRGPIOR2
             debug.S:12     *ABS*:000000c6 SRUDR0
             debug.S:13     *ABS*:000000c5 SRUBRR0H
             debug.S:14     *ABS*:000000c4 SRUBRR0L
             debug.S:15     *ABS*:000000c2 SRUCSR0C
             debug.S:16     *ABS*:000000c1 SRUCSR0B
             debug.S:17     *ABS*:000000c0 SRUCSR0A
             debug.S:49     .text:00000000 Debug_Init
             debug.S:69     .text:00000020 Debug_Tx_Byte
             debug.S:87     .text:00000032 Debug_Tx_Word
             debug.S:104    .text:00000042 Debug_Tx_Byte_Conf
             debug.S:125    .text:0000005e Debug_Tx_Word_Conf
             debug.S:140    .text:0000006e Debug_Tx_DWord_Conf
             debug.S:161    .text:00000096 Debug_Tx_From_RAM
             debug.S:181    .text:000000ae Debug_Tx_RAM_Area
             debug.S:74     .text:00000026 __UDRE0_CLEARED
             debug.S:109    .text:00000048 __TXC0_CLEARED
             debug.S:183    .text:000000ae __DUMP_BYTES

NO UNDEFINED SYMBOLS
